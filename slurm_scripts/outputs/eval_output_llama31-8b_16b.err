INFO:root:{'multiprocessing': False, 'path_pretrained_models': './pretrained_models', 'execute_code': True, 'dataset': {'dataset_name': 'GQA', 'data_path': './data/gqa', 'split': 'val', 'max_samples': 1000, 'batch_size': 32, 'start_sample': 0, 'testing': False}, 'load_models': {'maskrcnn': True, 'clip': False, 'glip': True, 'owlvit': False, 'tcl': False, 'gpt3_qa': False, 'gpt3_general': False, 'depth': False, 'blip': True, 'saliency': False, 'xvlm': True, 'codex': False, 'codellama': False, 'codellama_Q': False, 'llm_query': False, 'llm_guess': False, 'gpt3_list': False, 'qa': False, 'guess': False}, 'detect_thresholds': {'glip': 0.5, 'maskrcnn': 0.8, 'owlvit': 0.1}, 'ratio_box_area_to_image_area': 0.0, 'crop_larger_margin': True, 'verify_property': {'model': 'xvlm', 'thresh_clip': 0.6, 'thresh_tcl': 0.25, 'thresh_xvlm': 0.6}, 'best_match_model': 'xvlm', 'gpt3': {'n_votes': 1, 'qa_prompt': './prompts/gpt3/gpt3_qa.txt', 'guess_prompt': './prompts/gpt3/gpt3_process_guess.txt', 'temperature': 0.0, 'model': 'text-davinci-003'}, 'codex': {'temperature': 0.0, 'best_of': 1, 'max_tokens': 512, 'prompt': './prompts/benchmarks/gqa.prompt', 'model': 'gpt-3.5-turbo', 'extra_context': None}, 'save': True, 'save_new_results': True, 'save_codex': False, 'results_dir': './results/gqa/all/', 'use_cache': True, 'clear_cache': True, 'log_every': 20, 'wandb': False, 'blip_half_precision': False, 'blip_v2_model_type': 'blip2-flan-t5-xl', 'glip_model_type': 'large', 'use_fixed_code': False, 'fixed_code_file': './prompts/fixed_code/blip2.prompt', 'cognition': {'is_setted': False}, 'use_cached_codex': True, 'cached_codex_path': 'results/gqa/codex_results/val/llama31Q___04-08_22-55.csv'}
INFO:__main__:Starting main
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:00<00:00,  1.91it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00,  2.58it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:00<00:00,  2.45it/s]
INFO:root:BLIP loaded
/sorgin1/users/jbarrutia006/venvs/viper_tximista/lib/python3.11/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
/sorgin1/users/jbarrutia006/viper/GLIP/maskrcnn_benchmark/utils/checkpoint.py:115: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  return torch.load(f, map_location=torch.device("cpu"))
INFO:root:GLIP model is loaded in cuda:0
/sorgin1/users/jbarrutia006/viper/src/vision_models.py:2102: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(path_checkpoint, map_location='cpu')
INFO:__main__:Models successfully loaded
WARNING:joblib:[Memory(location=cache/joblib)]: Flushing completely the cache
INFO:__main__:Dataset loaded
  0%|                                                                        | 0/32 [00:00<?, ?it/s]/sorgin1/users/jbarrutia006/venvs/viper_tximista/lib/python3.11/site-packages/torch/_dynamo/eval_frame.py:632: UserWarning: torch.utils.checkpoint: the use_reentrant parameter should be passed explicitly. In version 2.5 we will raise an exception if use_reentrant is not passed. use_reentrant=False is recommended, but if you need to preserve the current default behavior, you can pass use_reentrant=True. Refer to docs for more details on the differences between the two variants.
  return fn(*args, **kwargs)
/sorgin1/users/jbarrutia006/venvs/viper_tximista/lib/python3.11/site-packages/transformers/modeling_utils.py:1044: FutureWarning: The `device` argument is deprecated and will be removed in v5 of Transformers.
  warnings.warn(
/sorgin1/users/jbarrutia006/viper/GLIP/maskrcnn_benchmark/modeling/rpn/vldyhead.py:210: UserWarning: `nn.functional.upsample_bilinear` is deprecated. Use `nn.functional.interpolate` instead.
  temp_fea.append(F.upsample_bilinear(self.DyConv[0](visual_feats[level + 1], **conv_args),
/sorgin1/users/jbarrutia006/venvs/viper_tximista/lib/python3.11/site-packages/transformers/generation/configuration_utils.py:633: UserWarning: `do_sample` is set to `False`. However, `top_p` is set to `0.9` -- this flag is only used in sample-based generation modes. You should set `do_sample=True` or unset `top_p`.
  warnings.warn(
  3%|##                                                              | 1/32 [00:27<14:23, 27.87s/it]  6%|####                                                            | 2/32 [00:50<12:22, 24.77s/it]  9%|######                                                          | 3/32 [01:10<10:59, 22.73s/it] 12%|########                                                        | 4/32 [01:27<09:27, 20.27s/it] 16%|##########                                                      | 5/32 [01:47<09:10, 20.38s/it] 19%|############                                                    | 6/32 [02:11<09:22, 21.64s/it] 22%|##############                                                  | 7/32 [02:34<09:07, 21.89s/it] 25%|################                                                | 8/32 [02:57<08:51, 22.14s/it] 28%|##################                                              | 9/32 [03:19<08:30, 22.21s/it] 31%|###################6                                           | 10/32 [03:42<08:12, 22.37s/it] 34%|#####################6                                         | 11/32 [04:04<07:48, 22.31s/it] 38%|#######################6                                       | 12/32 [04:27<07:34, 22.72s/it] 41%|#########################5                                     | 13/32 [04:52<07:19, 23.15s/it] 44%|###########################5                                   | 14/32 [05:13<06:45, 22.55s/it] 47%|#############################5                                 | 15/32 [05:33<06:09, 21.72s/it] 50%|###############################5                               | 16/32 [05:56<05:56, 22.25s/it] 53%|#################################4                             | 17/32 [06:14<05:13, 20.87s/it] 56%|###################################4                           | 18/32 [06:29<04:29, 19.24s/it] 59%|#####################################4                         | 19/32 [06:49<04:11, 19.33s/it] 62%|#######################################3                       | 20/32 [07:07<03:48, 19.04s/it] 66%|#########################################3                     | 21/32 [07:28<03:34, 19.49s/it] 69%|###########################################3                   | 22/32 [07:47<03:13, 19.33s/it] 72%|#############################################2                 | 23/32 [08:09<03:01, 20.15s/it] 75%|###############################################2               | 24/32 [08:35<02:56, 22.03s/it] 78%|#################################################2             | 25/32 [08:59<02:38, 22.71s/it] 81%|###################################################1           | 26/32 [09:26<02:22, 23.81s/it] 84%|#####################################################1         | 27/32 [09:50<01:59, 23.95s/it] 88%|#######################################################1       | 28/32 [10:14<01:35, 23.99s/it] 91%|#########################################################      | 29/32 [10:35<01:09, 23.08s/it] 94%|###########################################################    | 30/32 [10:56<00:44, 22.35s/it] 97%|#############################################################  | 31/32 [11:20<00:23, 23.08s/it]100%|###############################################################| 32/32 [11:28<00:00, 21.52s/it]
INFO:__main__:Saving results to eval_22-55___04-08_23-09.csv
