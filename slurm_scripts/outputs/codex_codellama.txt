SELECTED CONFIG FILES: gqa/general_config,config_codellama,gqa/save_codex,gqa/train
LOADING MODEL: DISABLED
INFO 02-24 19:04:34 __init__.py:183] Automatically detected platform cuda.
INFO 02-24 19:04:53 config.py:526] This model supports multiple tasks: {'classify', 'embed', 'generate', 'reward', 'score'}. Defaulting to 'generate'.
INFO 02-24 19:04:53 llm_engine.py:232] Initializing a V0 LLM engine (v0.7.1) with config: model='codellama/CodeLlama-7b-Instruct-hf', speculative_config=None, tokenizer='codellama/CodeLlama-7b-Instruct-hf', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=16384, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='xgrammar'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None, collect_model_forward_time=False, collect_model_execute_time=False), seed=0, served_model_name=codellama/CodeLlama-7b-Instruct-hf, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=False, chunked_prefill_enabled=False, use_async_output_proc=True, disable_mm_preprocessor_cache=False, mm_processor_kwargs=None, pooler_config=None, compilation_config={"splitting_ops":[],"compile_sizes":[],"cudagraph_capture_sizes":[256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"max_capture_size":256}, use_cached_outputs=False, 
INFO 02-24 19:04:55 cuda.py:235] Using Flash Attention backend.
INFO 02-24 19:04:56 model_runner.py:1111] Starting to load model codellama/CodeLlama-7b-Instruct-hf...
INFO 02-24 19:04:57 weight_utils.py:251] Using model weights format ['*.safetensors']
INFO 02-24 19:06:56 model_runner.py:1116] Loading model weights took 12.5562 GB
INFO 02-24 19:06:59 worker.py:266] Memory profiling takes 2.50 seconds
INFO 02-24 19:06:59 worker.py:266] the current vLLM instance can use total_gpu_memory (79.15GiB) x gpu_memory_utilization (0.90) = 71.24GiB
INFO 02-24 19:06:59 worker.py:266] model weights take 12.56GiB; non_torch_memory takes 0.09GiB; PyTorch activation peak memory takes 1.39GiB; the rest of the memory reserved for KV Cache is 57.20GiB.
INFO 02-24 19:06:59 executor_base.py:108] # CUDA blocks: 7321, # CPU blocks: 512
INFO 02-24 19:06:59 executor_base.py:113] Maximum concurrency for 16384 tokens per request: 7.15x
INFO 02-24 19:07:00 model_runner.py:1435] Capturing cudagraphs for decoding. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI. If out-of-memory error occurs during cudagraph capture, consider decreasing `gpu_memory_utilization` or switching to eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 02-24 19:07:17 model_runner.py:1563] Graph capturing finished in 17 secs, took 0.85 GiB
INFO 02-24 19:07:17 llm_engine.py:429] init engine (profile, create kv cache, warmup model) took 20.82 seconds
modelo: <class 'vision_models.codellama'> , proceso:  codellama
{'codellama': <function make_fn.<locals>._function at 0x7f4d70757ba0>}
WARNING 02-24 19:08:10 scheduler.py:1558] Sequence group 32 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=1
WARNING 02-24 19:29:22 scheduler.py:1558] Sequence group 1311 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=51
WARNING 02-24 19:49:04 scheduler.py:1558] Sequence group 2528 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=101
WARNING 02-24 20:09:03 scheduler.py:1558] Sequence group 3748 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=151
WARNING 02-24 20:30:43 scheduler.py:1558] Sequence group 5087 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=201
WARNING 02-24 20:51:38 scheduler.py:1558] Sequence group 6369 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=251
WARNING 02-24 21:17:32 scheduler.py:1558] Sequence group 7970 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=301
WARNING 02-24 21:34:34 scheduler.py:1558] Sequence group 9023 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=351
WARNING 02-24 21:54:57 scheduler.py:1558] Sequence group 10272 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=401
WARNING 02-24 22:14:36 scheduler.py:1558] Sequence group 11488 is preempted by PreemptionMode.RECOMPUTE mode because there is not enough KV cache space. This can affect the end-to-end performance. Increase gpu_memory_utilization or tensor_parallel_size to provide more KV cache memory. total_num_cumulative_preemption=451
Final accuracy: 0.17682539682539683
