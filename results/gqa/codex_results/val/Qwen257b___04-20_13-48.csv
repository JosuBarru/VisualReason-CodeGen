sample_id,query,generated_code
13151559,Is the large hair both white and soft?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    large_hair_patches = image_patch.find(""large hair"")
    # Question assumes only one large hair patch
    if len(large_hair_patches) == 0:
        # If no large hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    for large_hair_patch in large_hair_patches:
        is_white = large_hair_patch.verify_property(""large hair"", ""white"")
        is_soft = large_hair_patch.verify_property(""large hair"", ""soft"")
        if is_white and is_soft:
            return ""yes""
    return ""no"""
18370956,Who is eating the cupcake?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is eating the cupcake?"")
    for person_patch in person_patches:
        cupcake_patches = image_patch.find(""cupcake"")
        # Question assumes only one cupcake patch
        if len(cupcake_patches) == 0:
            return image_patch.simple_query(""Who is eating the cupcake?"")
        for cupcake_patch in cupcake_patches:
            if cupcake_patch.simple_query(""Is the cupcake in front of the person?"") == ""yes"":
                return person_patch.simple_query(""Who is eating the cupcake?"")"
6436809,What is the guy wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the guy wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What is the guy wearing?"") # crop would include the shirt so keep it in the query"
117037,Which kind of food is to the right of the cabbage?," # cabbage is a noun
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    for food_patch in food_patches:
        cabbage_patches = image_patch.find(""cabbage"")
        for cabbage_patch in cabbage_patches:
            if food_patch.horizontal_center > cabbage_patch.horizontal_center:
                return food_patch.simple_query(""Which kind of food is to the right of the cabbage?"")"
758936,Who wears the cap?," # cap is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who wears the cap?"")"
111046440,Who is pointing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is pointing?"")
    for person_patch in person_patches:
        is_pointing = (person_patch.simple_query(""Is the person pointing?"") == ""yes"")
        if is_pointing:
            return person_patch.simple_query(""Who is pointing?"") # crop would include the pointing so keep it in the query
    # If no person is pointing, pick the first person
    return person_patches[0].simple_query(""Who is pointing?"")"
15804389,Is the woman's hair short or long?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    for woman_patch in woman_patches:
        is_short_hair = (woman_patch.simple_query(""Is the woman's hair short?"") == ""yes"")
        if is_short_hair:
            return woman_patch.simple_query(""Is the woman's hair short or long?"") # crop would include the hair so keep it in the query
    # If no woman has short hair, pick the first woman
    return woman_patches[0].simple_query(""Is the woman's hair short or long?"")"
11445636,The women are watching who?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(women_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""The women are watching who?"")
    for woman_patch in women_patches:
        is_watching = (woman_patch.simple_query(""Is the woman watching?"") == ""yes"")
        if is_watching:
            return woman_patch.simple_query(""The women are watching who?"") # crop would include the shirt so keep it in the query
    # If no woman is wearing a shirt, pick the first woman
    return women_patches[0].simple_query(""The women are watching who?"")"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")"
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")"
758958,Is there either any red pillow or snowboard?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    red_pillow_patches = image_patch.find(""red pillow"")
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one red pillow patch and one snowboard patch
    if len(red_pillow_patches) == 0 and len(snowboard_patches) == 0:
        # If no red pillow or snowboard is found, query the image directly
        return image_patch.simple_query(""Is there either any red pillow or snowboard?"")
    if len(red_pillow_patches) == 0:
        return ""no""
    if len(snowboard_patches) == 0:
        return ""yes""
    return ""yes"""
143816,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?," # knife is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which side is the knife on?"")"
17829769,What is the computer mouse in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    # Question assumes only one mouse patch
    if len(mouse_patches) == 0:
        # If no mouse is found, query the image directly
        return image_patch.simple_query(""What is the computer mouse in front of?"")
    for mouse_patch in mouse_patches:
        in_front_of_patches = image_patch.find(""in front of"")
        for in_front_of_patch in in_front_of_patches:
            return in_front_of_patch.simple_query(""What is the computer mouse in front of?"") # crop would include the mouse so keep it in the query
    # If no mouse is in front of anything, pick the first mouse
    return mouse_patches[0].simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    # Question assumes only one toddler patch
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    for toddler_patch in toddler_patches:
        is_holding_patch = (toddler_patch.simple_query(""Is the toddler holding something?"") == ""yes"")
        if is_holding_patch:
            return toddler_patch.simple_query(""What is the toddler holding?"") # crop would include the object so keep it in the query
    # If no toddler is holding anything, pick the first toddler
    return toddler_patches[0].simple_query(""What is the toddler holding?"")"
2951242,Is the gray shirt sleeveless or short sleeved?," # gray shirt is the only shirt in the image
    image_patch = ImagePatch(image)
    gray_shirt_patches = image_patch.find(""gray shirt"")
    # Question assumes only one gray shirt patch
    if len(gray_shirt_patches) == 0:
        # If no gray shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    if gray_shirt_patches[0].verify_property(""gray shirt"", ""sleeveless""):
        return ""sleeveless""
    else:
        return ""short sleeved"""
15241795,Is the tank top red?," 
    image_patch = ImagePatch(image)
    tank_top_patches = image_patch.find(""tank top"")
    # Question assumes only one tank top patch
    if len(tank_top_patches) == 0:
        # If no tank top is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    for tank_top_patch in tank_top_patches:
        if tank_top_patch.verify_property(""tank top"", ""red""):
            return ""yes""
    return ""no"""
13885234,Which kind of animal is in front of the rocks?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?," # image_patch = ImagePatch(image)
    grapes_patches = image_patch.find(""grapes"")
    # Question assumes only one grapes patch
    if len(grapes_patches) == 0:
        # If no grapes are found, query the image directly
        return image_patch.simple_query(""Do you see any grapes?"")
    return ""yes"""
6455591,What type of furniture is white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What type of furniture is white?"") # crop would include the white so keep it in the query
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""What type of furniture is white?"")"
1033761,What is the blue clothing item?," # blue clothing item
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""blue""):
            return clothing_patch.simple_query(""What is the blue clothing item?"")"
17726504,Who is wearing the glasses?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        is_wearing_glasses = (person_patch.simple_query(""Is the person wearing glasses?"") == ""yes"")
        if is_wearing_glasses:
            return person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no person is wearing glasses, pick the first person
    return person_patches[0].simple_query(""Who is wearing the glasses?"")"
13112902,Is the woman wearing a bracelet?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    for woman_patch in woman_patches:
        is_wearing_bracelet = (woman_patch.simple_query(""Is the woman wearing a bracelet?"") == ""yes"")
        if is_wearing_bracelet:
            return woman_patch.simple_query(""Is the woman wearing a bracelet?"") # crop would include the bracelet so keep it in the query
    # If no woman is wearing a bracelet, pick the first woman
    return woman_patches[0].simple_query(""Is the woman wearing a bracelet?"")"
698766,What is the food that is not white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        if food_patch.verify_property(""food"", ""white"") == False:
            return food_patch.simple_query(""What is the food that is not white?"")"
1332276,Are there both a cup and a bottle in the picture?," # cup and bottle are not relational verbs
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Are there both a cup and a bottle in the picture?"")
    for cup_patch in cup_patches:
        bottle_patches = image_patch.find(""bottle"")
        for bottle_patch in bottle_patches:
            return ""yes""
    return ""no"""
12633088,What color is that glove?," # glove is a noun
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for person_patch in person_patches:
        is_holding_helmet = (person_patch.simple_query(""Is the person holding the helmet?"") == ""yes"")
        if is_holding_helmet:
            return person_patch.simple_query(""Who is holding the helmet?"") # crop would include the helmet so keep it in the query
    # If no person is holding a helmet, pick the first person
    return person_patches[0].simple_query(""Who is holding the helmet?"")"
2143247,What is the name of the food to the left of the donut that looks little?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for food_patch in food_patches:
        if food_patch.simple_query(""Is the food to the left of the donut that looks little?"") == ""yes"":
            return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"") # crop would include the donut so keep it in the query
    # If no food is to the left of the donut that looks little, pick the first food
    return food_patches[0].simple_query(""What is the name of the food to the left of the donut that looks little?"")"
3767951,Is the clock to the right or to the left of the man on the left?," # clock is to the right of the man on the left
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    for clock_patch in clock_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
        for man_patch in man_patches:
            if man_patch.horizontal_center > clock_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
17655180,What's the sticker on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What's the sticker on?"")
    for sticker_patch in sticker_patches:
        is_on_patch = (sticker_patch.simple_query(""Is the sticker on a patch?"") == ""yes"")
        if is_on_patch:
            return sticker_patch.simple_query(""What's the sticker on?"") # crop would include the patch so keep it in the query
    # If no sticker is on a patch, pick the first sticker
    return sticker_patches[0].simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""In front of what is this table?"")
    for table_patch in table_patches:
        in_front_of_patches = image_patch.find(""in front of"")
        for in_front_of_patch in in_front_of_patches:
            return in_front_of_patch.simple_query(""In front of what is this table?"") # crop would include the table so keep it in the query
    # If no table is in front of anything, pick the first table
    return table_patches[0].simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see people to the right of the still car?"")"
7188981,Does the giraffe look adult?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    for giraffe_patch in giraffe_patches:
        is_adult = giraffe_patch.verify_property(""giraffe"", ""adult"")
        if is_adult:
            return giraffe_patch.simple_query(""Does the giraffe look adult?"") # crop would include the adult so keep it in the query
    # If no giraffe is adult, pick the first giraffe
    return giraffe_patches[0].simple_query(""Does the giraffe look adult?"")"
16852802,Of what color are the pants?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants is found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"")"
9619158,What kind of watercraft is full of men?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    for watercraft_patch in watercraft_patches:
        is_full_of_men = (watercraft_patch.simple_query(""Is the watercraft full of men?"") == ""yes"")
        if is_full_of_men:
            return watercraft_patch.simple_query(""What kind of watercraft is full of men?"") # crop would include the men so keep it in the query
    # If no watercraft is full of men, pick the first watercraft
    return watercraft_patches[0].simple_query(""What kind of watercraft is full of men?"")"
3625225,On which side of the picture are the boats?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    boats_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boats_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    if boats_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?," # elephant to the left of the other elephant
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_elephant_patch = elephant_patches[0]
    right_elephant_patch = elephant_patches[1]
    if left_elephant_patch.horizontal_center < right_elephant_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
19834124,What is the girl holding?," # girl holding a ball
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    for girl_patch in girl_patches:
        ball_patches = image_patch.find(""ball"")
        for ball_patch in ball_patches:
            if ball_patch.horizontal_center > girl_patch.horizontal_center:
                return ""ball""
    return ""no"""
4617704,Does the toilet seat that is not down appear to be white and open?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    toilet_seat_patches = image_patch.find(""toilet seat"")
    # Question assumes only one toilet seat patch
    if len(toilet_seat_patches) == 0:
        # If no toilet seat is found, query the image directly
        return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")
    for toilet_seat_patch in toilet_seat_patches:
        if toilet_seat_patch.verify_property(""toilet seat"", ""down"") == False and toilet_seat_patch.verify_property(""toilet seat"", ""white"") == True and toilet_seat_patch.verify_property(""toilet seat"", ""open"") == True:
            return ""yes""
    return ""no"""
5899539,Are there any bottles or mugs that are not purple?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_mug = image_patch.exists(""mug"")
    is_not_purple = image_patch.verify_property(""bottle"", ""not purple"") or image_patch.verify_property(""mug"", ""not purple"")
    return bool_to_yesno(is_bottle and is_mug and is_not_purple)"
2631593,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")"
111054378,Is the small couch to the right or to the left of the bottle?," # bottle is a noun
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    for couch_patch in couch_patches:
        bottle_patches = image_patch.find(""bottle"")
        for bottle_patch in bottle_patches:
            if couch_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""right""
            elif couch_patch.horizontal_center < bottle_patch.horizontal_center:
                return ""left""
    return ""no"""
9392411,Is the bottle to the right or to the left of the appliance on the left?," # bottle is to the right of the appliance on the left
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    for bottle_patch in bottle_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center < bottle_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
16753829,What type of animal is sitting in the container in the bottom of the photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    for animal_patch in animal_patches:
        if animal_patch.vertical_center < image_patch.vertical_center:
            return animal_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"") # crop would include the container so keep it in the query
    # If no animal is in the container, pick the first animal
    return animal_patches[0].simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")"
1345482,What is that train in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""What is that train in front of?"")
    for train_patch in train_patches:
        is_in_front_of = (train_patch.simple_query(""Is the train in front of something?"") == ""yes"")
        if is_in_front_of:
            return train_patch.simple_query(""What is that train in front of?"") # crop would include the object in front so keep it in the query
    # If no train is in front of anything, pick the first train
    return train_patches[0].simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")"
459445,In which part is the silver device?," # silver device is a spoon
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if spoon_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11786203,What is the man on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man on?"")
    for man_patch in man_patches:
        is_on = (man_patch.simple_query(""Is the man on?"") == ""yes"")
        if is_on:
            return man_patch.simple_query(""What is the man on?"") # crop would include the man so keep it in the query
    # If no man is on, pick the first man
    return man_patches[0].simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?," # image_patch = ImagePatch(image)
    brown_door_patches = image_patch.find(""brown door"")
    brown_chair_patches = image_patch.find(""brown chair"")
    # Question assumes only one brown door patch and one brown chair patch
    if len(brown_door_patches) == 0 and len(brown_chair_patches) == 0:
        # If no brown door or chair is found, query the image directly
        return image_patch.simple_query(""Is there a brown door or chair?"")
    if len(brown_door_patches) == 0:
        return ""brown chair""
    if len(brown_chair_patches) == 0:
        return ""brown door""
    return ""brown door and chair"""
131031372,What is the napkin in?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What is the napkin in?"")
    for napkin_patch in napkin_patches:
        is_in_bowl = (napkin_patch.simple_query(""Is the napkin in a bowl?"") == ""yes"")
        if is_in_bowl:
            return napkin_patch.simple_query(""What is the napkin in?"") # crop would include the bowl so keep it in the query
    # If no napkin is in a bowl, pick the first napkin
    return napkin_patches[0].simple_query(""What is the napkin in?"")"
1241681,Are there any people behind the white dessert?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    dessert_patches = image_patch.find(""dessert"")
    # Question assumes only one dessert patch
    if len(dessert_patches) == 0:
        # If no dessert is found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    for dessert_patch in dessert_patches:
        if dessert_patch.color == ""white"":
            people_patches = image_patch.find(""people"")
            # Question assumes only one people patch
            if len(people_patches) == 0:
                # If no people are found, query the image directly
                return image_patch.simple_query(""Are there any people behind the white dessert?"")
            for people_patch in people_patches:
                if people_patch.horizontal_center > dessert_patch.horizontal_center:
                    return ""yes""
    return ""no"""
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")
    for curtain_patch in curtain_patches:
        radiator_patches = image_patch.find(""radiator"")
        for radiator_patch in radiator_patches:
            if radiator_patch.horizontal_center > curtain_patch.horizontal_center:
                animal_patches = image_patch.find(""animal"")
                # Question assumes only one animal patch
                if len(animal_patches) == 0:
                    # If no animal is found, query the image directly
                    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")
                for animal_patch in animal_patches:
                    if animal_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"") == ""cat"":
                        return ""cat""
    return ""no cat"""
8553578,What is the Pikachu doing?," # Pikachu is a Pokemon
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    if car_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    mountains_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountains_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""What is on the large mountains?"")
    for mountain_patch in mountains_patches:
        is_large = mountain_patch.verify_property(""mountain"", ""large"")
        if is_large:
            return mountain_patch.simple_query(""What is on the large mountains?"") # crop would include the large mountain so keep it in the query
    # If no large mountain is found, pick the first mountain
    return mountains_patches[0].simple_query(""What is on the large mountains?"")"
5107295,What is in the sky?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?," # fruit is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of watercraft is the fruit on?"")"
1827218,Is the bottle in the bottom of the image?," # bottle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the bottle in the bottom of the image?"")"
10938155,What color is the sky?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    return sail_patches[0].best_text_match([""white"", ""red""])"
3662784,Do you see either any traffic lights or cars?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    # Question assumes only one traffic light patch
    if len(traffic_light_patches) == 0:
        # If no traffic light is found, query the image directly
        return image_patch.simple_query(""Do you see either any traffic lights or cars?"")
    for traffic_light_patch in traffic_light_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if car_patch.horizontal_center > traffic_light_patch.horizontal_center:
                return ""yes""
    return ""no"""
15515711,Are there any girls to the right of the yellow helmet?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")"
6315316,Which kind of furniture is in front of the window?," # window is a noun
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is in front of the window?"")
    for window_patch in window_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > window_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?," # appliance is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What appliance is to the left of the faucet?"")"
41050828,What is the color of the jacket?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].verify_property(""jacket"", ""color"")"
610914,Is the green boat to the right or to the left of the wood house?," # green boat is the boat with green color
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    for boat_patch in boat_patches:
        if boat_patch.verify_property(""boat"", ""green""):
            wood_house_patches = image_patch.find(""wood house"")
            # Question assumes only one wood house patch
            if len(wood_house_patches) == 0:
                return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
            for wood_house_patch in wood_house_patches:
                if boat_patch.horizontal_center > wood_house_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left"""
13158346,Is the woman in the bottom part of the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    if woman_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
16318707,Are there either any colorful bikes or skateboards?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_colorful_bike = image_patch.exists(""colorful bike"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_colorful_bike or is_skateboard)"
2805654,Is the bag to the right or to the left of the bench?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    for bag_patch in bag_patches:
        bench_patches = image_patch.find(""bench"")
        for bench_patch in bench_patches:
            if bag_patch.horizontal_center > bench_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
15315607,What do you think is in the sky?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What color is the truck near the gas station?"")
    for truck_patch in truck_patches:
        gas_station_patches = image_patch.find(""gas station"")
        for gas_station_patch in gas_station_patches:
            if gas_station_patch.horizontal_center > truck_patch.horizontal_center:
                return truck_patch.simple_query(""What color is the truck near the gas station?"") # crop would include the gas station so keep it in the query
    # If no truck is near the gas station, pick the first truck
    return truck_patches[0].simple_query(""What color is the truck near the gas station?"")"
12140940,"What are the headphones on, a sofa or a desk?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphone patch
    if len(headphones_patches) == 0:
        # If no headphone is found, query the image directly
        return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
    for headphone_patch in headphones_patches:
        sofa_patches = image_patch.find(""sofa"")
        for sofa_patch in sofa_patches:
            if headphone_patch.simple_query(""Is the headphone on the sofa?"") == ""yes"":
                return ""sofa""
        desk_patches = image_patch.find(""desk"")
        for desk_patch in desk_patches:
            if headphone_patch.simple_query(""Is the headphone on the desk?"") == ""yes"":
                return ""desk""
    return ""no"""
727533,Does the bun look brown and toasted?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    for bun_patch in bun_patches:
        return bun_patch.verify_property(""bun"", ""brown"") and bun_patch.verify_property(""bun"", ""toasted"")"
61044602,What is in the brown basket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""What is in the brown basket?"")
    for basket_patch in basket_patches:
        if basket_patch simple_query(""Is the basket brown?"") == ""yes"":
            return basket_patch.simple_query(""What is in the brown basket?"") # crop would include the basket so keep it in the query
    # If no basket is brown, pick the first basket
    return basket_patches[0].simple_query(""What is in the brown basket?"")"
16827204,Is the marker different in color than the paper?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    for marker_patch in marker_patches:
        paper_patches = image_patch.find(""paper"")
        for paper_patch in paper_patches:
            if marker_patch.verify_property(""marker"", ""color"") != paper_patch.verify_property(""paper"", ""color""):
                return ""yes""
    return ""no"""
1284539,Is there a racket to the right of the man on the right side?," # image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1257391,What place is this?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What place is this?"")"
16223517,What do you think is the color of the large device?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What do you think is the color of the large device?"")"
1024280,Does the shirt look long sleeved or sleeveless?," # shirt is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")"
2769463,Which kind of animal is lying in the chair?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    for animal_patch in animal_patches:
        is_laying_in_chair = (animal_patch.simple_query(""Is the animal lying in the chair?"") == ""yes"")
        if is_laying_in_chair:
            return animal_patch.simple_query(""Which kind of animal is lying in the chair?"") # crop would include the chair so keep it in the query
    # If no animal is lying in the chair, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    # Question assumes only one white box patch
    if len(white_box_patches) == 0:
        # If no white box is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    for white_box_patch in white_box_patches:
        crate_patches = image_patch.find(""crate"")
        # Question assumes only one crate patch
        if len(crate_patches) == 0:
            # If no crate is found, query the image directly
            return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
        for crate_patch in crate_patches:
            chair_patches = image_patch.find(""chair"")
            # Question assumes only one chair patch
            if len(chair_patches) == 0:
                # If no chair is found, query the image directly
                return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
            for chair_patch in chair_patches:
                if white_box_patch.horizontal_center > crate_patch.horizontal_center and chair_patch.horizontal_center > crate_patch.horizontal_center:
                    return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?," # clay is a material
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower_pot"")
    # Question assumes only one flower_pot patch
    if len(flower_pot_patches) == 0:
        # If no flower_pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    for flower_pot_patch in flower_pot_patches:
        clay_patches = image_patch.find(""clay"")
        for clay_patch in clay_patches:
            if flower_pot_patch == clay_patch:
                return ""yes""
    return ""no"""
191006281,Does the sky look clear and gray?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the sky look clear and gray?"")"
681336,Do you see hats or gloves that are white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_hat = image_patch.exists(""hat"")
    is_glove = image_patch.exists(""glove"")
    is_white = image_patch.exists(""white"")
    return bool_to_yesno(is_hat and is_white or is_glove and is_white)"
1300368,What is on the cabinet that is to the right of the keyboard?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    for cabinet_patch in cabinet_patches:
        keyboard_patches = image_patch.find(""keyboard"")
        for keyboard_patch in keyboard_patches:
            if keyboard_patch.horizontal_center > cabinet_patch.horizontal_center:
                return cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"") # crop would include the keyboard so keep it in the query
    # If no cabinet is to the right of the keyboard, pick the first cabinet
    return cabinet_patches[0].simple_query(""What is on the cabinet that is to the right of the keyboard?"")"
172394,What is the animal to the left of the tap called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    for animal_patch in animal_patches:
        is_left_of_tap = (animal_patch.simple_query(""Is the animal to the left of the tap?"") == ""yes"")
        if is_left_of_tap:
            return animal_patch.simple_query(""What is the animal to the left of the tap called?"") # crop would include the tap so keep it in the query
    # If no animal is to the left of the tap, pick the first animal
    return animal_patches[0].simple_query(""What is the animal to the left of the tap called?"")"
738176,Is the chair on the right?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    for chair_patch in chair_patches:
        is_on_right = (chair_patch.simple_query(""Is the chair on the right?"") == ""yes"")
        if is_on_right:
            return chair_patch.simple_query(""Is the chair on the right?"") # crop would include the chair so keep it in the query
    # If no chair is on the right, pick the first chair
    return chair_patches[0].simple_query(""Is the chair on the right?"")"
4194919,Is the child on the right of the picture?," # child is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the child on the right of the picture?"")"
3585327,Who is on the surfboard?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard?"")
    for person_patch in person_patches:
        return person_patch.simple_query(""Who is on the surfboard?"")"
1711172,What size are the packages the candle is on top of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    for candle_patch in candle_patches:
        package_patches = image_patch.find(""package"")
        # Question assumes only one package patch
        if len(package_patches) == 0:
            return image_patch.simple_query(""What size are the packages the candle is on top of?"")
        for package_patch in package_patches:
            if package_patch.vertical_center > candle_patch.vertical_center:
                return package_patch.simple_query(""What size are the packages the candle is on top of?"") # crop would include the candle so keep it in the query
    # If no package is found, query the image directly
    return image_patch.simple_query(""What size are the packages the candle is on top of?"")"
4353895,Who is on the snowboard on the right?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    for snowboard_patch in snowboard_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > snowboard_patch.horizontal_center:
                return person_patch.simple_query(""Who is on the snowboard on the right?"") # crop would include the snowboard so keep it in the query
    # If no person is on the snowboard, pick the first person
    return person_patches[0].simple_query(""Who is on the snowboard on the right?"")"
17929304,What is the vehicle that is on the road?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    crust_patches = image_patch.find(""crust"")
    # Question assumes only one crust patch
    if len(crust_patches) == 0:
        # If no crust is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return crust_patches[0].simple_query(""What color is the crust?"")"
5672474,Is the plate to the left or to the right of the beer on the left?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    for plate_patch in plate_patches:
        beer_patches = image_patch.find(""beer"")
        # Question assumes only one beer patch
        if len(beer_patches) == 0:
            return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
        for beer_patch in beer_patches:
            if beer_patch.horizontal_center < plate_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
11341284,What is the pattern of the mattress on the street?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Are there any boys behind the fence?"")
    for boy_patch in boy_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if boy_patch.horizontal_center > fence_patch.horizontal_center:
                return ""yes""
    return ""no"""
19203395,Is the white toilet paper to the right or to the left of the toilet?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    for toilet_patch in toilet_patches:
        toilet_paper_patches = image_patch.find(""toilet paper"")
        for toilet_paper_patch in toilet_paper_patches:
            if toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
                return ""right""
            elif toilet_paper_patch.horizontal_center < toilet_patch.horizontal_center:
                return ""left""
    return ""no"""
1194938,Are there any airplanes in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any airplanes in front of the building?"")"
5350205,How clean is the road that the car is on the side of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    for road_patch in road_patches:
        is_clean = (road_patch.simple_query(""How clean is the road that the car is on the side of?"") == ""clean"")
        if is_clean:
            return road_patch.simple_query(""How clean is the road that the car is on the side of?"") # crop would include the car so keep it in the query
    # If no road is clean, pick the first road
    return road_patches[0].simple_query(""How clean is the road that the car is on the side of?"")"
4256016,"In which part of the picture is the black van, the bottom or the top?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    for person_patch in person_patches:
        is_to_the_right_of_fence = (person_patch.simple_query(""Is the person to the right of the fence?"") == ""yes"")
        if is_to_the_right_of_fence:
            return person_patch.simple_query(""What is the person to the right of the fence doing?"") # crop would include the fence so keep it in the query
    # If no person is to the right of the fence, pick the first person
    return person_patches[0].simple_query(""What is the person to the right of the fence doing?"")"
16471124,Does the horse have a different color than the boot?," # boot is a noun
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    for horse_patch in horse_patches:
        boot_patches = image_patch.find(""boot"")
        for boot_patch in boot_patches:
            if boot_patch.verify_property(""boot"", ""color"") != horse_patch.verify_property(""horse"", ""color""):
                return ""yes""
    return ""no"""
958247,Is the mouse to the right of a chair?," 
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    # Question assumes only one mouse patch
    if len(mouse_patches) == 0:
        # If no mouse is found, query the image directly
        return image_patch.simple_query(""Is the mouse to the right of a chair?"")
    for mouse_patch in mouse_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if mouse_patch.horizontal_center > chair_patch.horizontal_center:
                return ""yes""
    return ""no"""
11179512,The basket made of plastic is what color?," # basket is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The basket made of plastic is what color?"")"
8816272,Do you see any elephant to the left of the bird?," 
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")"
11168592,What is the animal in front of the lamp?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the jacket?"")
    for person_patch in person_patches:
        is_wearing_jacket = (person_patch.simple_query(""Is the person wearing a jacket?"") == ""yes"")
        if is_wearing_jacket:
            return person_patch.simple_query(""Who is wearing the jacket?"") # crop would include the jacket so keep it in the query
    # If no person is wearing a jacket, pick the first person
    return person_patches[0].simple_query(""Who is wearing the jacket?"")"
7398502,What is the food to the left of the girl in the bottom of the photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    for food_patch in food_patches:
        if food_patch.vertical_center < image_patch.vertical_center:
            return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"") # crop would include the girl so keep it in the query
    # If no food is to the left of the girl, pick the first food
    return food_patches[0].simple_query(""What is the food to the left of the girl in the bottom of the photo?"")"
5145864,What is the device that the camera is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that the camera is in front of?"")"
788143,Is the man on the surfboard?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the surfboard?"")
    for man_patch in man_patches:
        surfboard_patches = image_patch.find(""surfboard"")
        for surfboard_patch in surfboard_patches:
            if man_patch.lower > surfboard_patch.lower and man_patch.upper < surfboard_patch.upper:
                return ""yes""
    return ""no"""
15854501,What device has the same color as the device in the box?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    for device_patch in device_patches:
        box_patches = image_patch.find(""box"")
        for box_patch in box_patches:
            if device_patch.verify_property(""device"", ""color"") == box_patch.verify_property(""box"", ""color""):
                return device_patch.simple_query(""What device has the same color as the device in the box?"") # crop would include the box so keep it in the query
    # If no device has the same color as the device in the box, pick the first device
    return device_patches[0].simple_query(""What device has the same color as the device in the box?"")"
3228067,What is the child wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    for child_patch in child_patches:
        clothing_patches = image_patch.find(""clothing"")
        # Question assumes only one clothing patch
        if len(clothing_patches) == 0:
            return image_patch.simple_query(""What is the child wearing?"")
        for clothing_patch in clothing_patches:
            if clothing_patch.simple_query(""Is the clothing patch on the child?"") == ""yes"":
                return clothing_patch.simple_query(""What is the child wearing?"")"
6817336,Is the blue sky behind a cathedral?," 
    image_patch = ImagePatch(image)
    blue_sky_patches = image_patch.find(""blue sky"")
    # Question assumes only one blue sky patch
    if len(blue_sky_patches) == 0:
        # If no blue sky is found, query the image directly
        return image_patch.simple_query(""Is the blue sky behind a cathedral?"")
    for blue_sky_patch in blue_sky_patches:
        cathedral_patches = image_patch.find(""cathedral"")
        for cathedral_patch in cathedral_patches:
            if cathedral_patch.horizontal_center > blue_sky_patch.horizontal_center:
                return ""yes""
    return ""no"""
6347271,"In which part of the image is the yellow pepper, the bottom or the top?"," # yellow pepper is a specific object
    image_patch = ImagePatch(image)
    yellow_pepper_patches = image_patch.find(""yellow pepper"")
    # Question assumes only one yellow pepper patch
    if len(yellow_pepper_patches) == 0:
        # If no yellow pepper is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    if yellow_pepper_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is the woman feeding?"")
    for animal_patch in animal_patches:
        is_feeding = (animal_patch.simple_query(""Is the animal being fed?"") == ""yes"")
        if is_feeding:
            return animal_patch.simple_query(""What animal is the woman feeding?"") # crop would include the animal being fed so keep it in the query
    # If no animal is being fed, pick the first animal
    return animal_patches[0].simple_query(""What animal is the woman feeding?"")"
3427727,On which side is the bucket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    if bucket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
31050314,Is the small chimney in the bottom part of the picture?," # chimney is a small object
    image_patch = ImagePatch(image)
    chimney_patches = image_patch.find(""chimney"")
    # Question assumes only one chimney patch
    if len(chimney_patches) == 0:
        # If no chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    if chimney_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3503396,Are the pants purple?," 
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    for pants_patch in pants_patches:
        return pants_patch.verify_property(""pants"", ""purple"")"
11742862,Which kind of furniture is to the right of the paper towels?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    for furniture_patch in furniture_patches:
        paper_towel_patches = image_patch.find(""paper towels"")
        for paper_towel_patch in paper_towel_patches:
            if paper_towel_patch.horizontal_center > furniture_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"") # crop would include the paper towels so keep it in the query
    # If no furniture is to the right of the paper towels, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is to the right of the paper towels?"")"
5891809,What kind of furniture is gray?," # gray is a color, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is gray?"")"
5370528,Is the hair white and long?," # hair is a property of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    for person_patch in person_patches:
        is_white = person_patch.verify_property(""hair"", ""white"")
        is_long = person_patch.verify_property(""hair"", ""long"")
        if is_white and is_long:
            return ""yes""
    return ""no"""
781153,Do you see trains near the lamp post that looks white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lamp_post_patches = image_patch.find(""lamp post"")
    # Question assumes only one lamp post patch
    if len(lamp_post_patches) == 0:
        # If no lamp post is found, query the image directly
        return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")
    for lamp_post_patch in lamp_post_patches:
        is_white = lamp_post_patch.verify_property(""lamp post"", ""white"")
        if is_white:
            train_patches = image_patch.find(""train"")
            # Question assumes only one train patch
            if len(train_patches) == 0:
                # If no train is found, query the image directly
                return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")
            for train_patch in train_patches:
                if train_patch.horizontal_center > lamp_post_patch.horizontal_center:
                    return ""yes""
    return ""no"""
5543456,Is the container to the left of the person that wears bracelets?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
    for container_patch in container_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
        for person_patch in person_patches:
            if person_patch.simple_query(""Does the person wear bracelets?"") == ""yes"":
                if container_patch.left < person_patch.left:
                    return ""yes""
    return ""no"""
163134,What do you think is on the roof?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    # Question assumes only one roof patch
    if len(roof_patches) == 0:
        # If no roof is found, query the image directly
        return image_patch.simple_query(""What do you think is on the roof?"")
    for roof_patch in roof_patches:
        return roof_patch.simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    for shoe_patch in shoe_patches:
        return shoe_patch.simple_query(""Is the shoe white or brown?"")"
5511395,What is wrapped in paper?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_wrapped_in_paper = image_patch.verify_property(""object"", ""wrapped in paper"")
    if is_wrapped_in_paper:
        return image_patch.simple_query(""What is wrapped in paper?"")
    else:
        return image_patch.simple_query(""What is wrapped in paper?"")"
5611256,Are there any couches in the picture?," 
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Are there any couches in the picture?"")
    return ""yes"""
1162826,The man is in what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is in what?"")
    for man_patch in man_patches:
        is_in = (man_patch.simple_query(""Is the man in the room?"") == ""yes"")
        if is_in:
            return man_patch.simple_query(""The man is in what?"") # crop would include the room so keep it in the query
    # If no man is in the room, pick the first man
    return man_patches[0].simple_query(""The man is in what?"")"
81020685,Which color is the small house?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    small_house_patches = image_patch.find(""small house"")
    # Question assumes only one small house patch
    if len(small_house_patches) == 0:
        # If no small house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    for small_house_patch in small_house_patches:
        return small_house_patch.simple_query(""Which color is the small house?"")"
19640724,Who is in the bathroom?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is in the bathroom?"")
    for person_patch in person_patches:
        is_in_bathroom = (person_patch.simple_query(""Is the person in the bathroom?"") == ""yes"")
        if is_in_bathroom:
            return person_patch.simple_query(""Who is in the bathroom?"") # crop would include the bathroom so keep it in the query
    # If no person is in the bathroom, pick the first person
    return person_patches[0].simple_query(""Who is in the bathroom?"")"
289960,Do you see a racket to the right of the boy that is looking at the tie?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    for racket_patch in racket_patches:
        boy_patches = image_patch.find(""boy"")
        # Question assumes only one boy patch
        if len(boy_patches) == 0:
            return ""no""
        for boy_patch in boy_patches:
            is_looking_at_tie = (boy_patch.simple_query(""Is the boy looking at the tie?"") == ""yes"")
            if is_looking_at_tie:
                return ""yes""
    return ""no"""
9957748,Does the hair appear to be long and brown?," # hair is a property of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the hair appear to be long and brown?"")
    for person_patch in person_patches:
        return person_patch.verify_property(""person"", ""hair"", ""long and brown"")"
21031610,What is the shoe that looks black and white resting on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    for shoe_patch in shoe_patches:
        is_black_and_white = shoe_patch.simple_query(""Is the shoe black and white?"") == ""yes""
        is_resting_on = shoe_patch.simple_query(""Is the shoe resting on something?"") == ""yes""
        if is_black_and_white and is_resting_on:
            return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"") # crop would include the resting on so keep it in the query
    # If no shoe is black and white and resting on, pick the first shoe
    return shoe_patches[0].simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    # Question assumes only one glass patch
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is the glass on?"")
    for glass_patch in glass_patches:
        is_on_patch = (glass_patch.simple_query(""Is the glass on a patch?"") == ""yes"")
        if is_on_patch:
            return glass_patch.simple_query(""What is the glass on?"") # crop would include the patch so keep it in the query
    # If no glass is on a patch, pick the first glass
    return glass_patches[0].simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    for pillow_patch in pillow_patches:
        if pillow_patch.vertical_center < image_patch.vertical_center:
            animal_patches = image_patch.find(""animal"")
            # Question assumes only one animal patch
            if len(animal_patches) == 0:
                # If no animal is found, query the image directly
                return image_patch.simple_query(""Is the white pillow under the black animal?"")
            for animal_patch in animal_patches:
                if animal_patch.vertical_center > pillow_patch.vertical_center:
                    return ""yes""
    return ""no"""
457770,What kind of clothing is striped?," # striped is a property
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""striped""):
            return clothing_patch.simple_query(""What kind of clothing is striped?"")"
12603153,Are the child's eyes blue and open?," # child's eyes blue and open
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    for child_patch in child_patches:
        is_blue = child_patch.verify_property(""child"", ""blue"")
        is_open = child_patch.verify_property(""child"", ""open"")
        if is_blue and is_open:
            return ""yes""
    return ""no"""
9480973,What is located on top of the tub?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    tub_patches = image_patch.find(""tub"")
    # Question assumes only one tub patch
    if len(tub_patches) == 0:
        # If no tub is found, query the image directly
        return image_patch.simple_query(""What is located on top of the tub?"")
    for tub_patch in tub_patches:
        top_patches = image_patch.find(""top"")
        for top_patch in top_patches:
            if top_patch.vertical_center > tub_patch.vertical_center:
                return top_patch.simple_query(""What is located on top of the tub?"") # crop would include the top so keep it in the query
    # If no top is found, pick the first top
    return top_patches[0].simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?," # fork is to the right of the white plate
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    for fork_patch in fork_patches:
        white_plate_patches = image_patch.find(""white plate"")
        for white_plate_patch in white_plate_patches:
            if fork_patch.horizontal_center > white_plate_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
13420253,On which side of the photo is the chair?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    if chair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    # Question assumes only one label patch
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What is the label on?"")
    for label_patch in label_patches:
        return label_patch.simple_query(""What is the label on?"") # crop would include the label so keep it in the query"
3322787,What bird is to the left of the person that is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    for bird_patch in bird_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
        for person_patch in person_patches:
            is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
            if is_wearing_shirt:
                if bird_patch.horizontal_center < person_patch.horizontal_center:
                    return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no bird is to the left of a person wearing a shirt, pick the first bird
    return bird_patches[0].simple_query(""What bird is to the left of the person that is wearing a shirt?"")"
6399594,On which side is the man?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    if man_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
6930120,Is the glass bowl on the right or on the left?," # glass bowl is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")"
12619961,What vehicles are to the left of the taxi?," # taxi is a vehicle
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    for taxi_patch in taxi_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < taxi_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicles are to the left of the taxi?"")"
13362315,Is the basket on the shelf black and empty?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    for basket_patch in basket_patches:
        is_black = basket_patch.verify_property(""basket"", ""black"")
        is_empty = basket_patch.verify_property(""basket"", ""empty"")
        if is_black and is_empty:
            return ""yes""
    return ""no"""
3830854,What is the animal that is standing next to the donkey that is standing in the hay?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    for animal_patch in animal_patches:
        donkey_patches = image_patch.find(""donkey"")
        # Question assumes only one donkey patch
        if len(donkey_patches) == 0:
            return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
        for donkey_patch in donkey_patches:
            hay_patches = image_patch.find(""hay"")
            # Question assumes only one hay patch
            if len(hay_patches) == 0:
                return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
            for hay_patch in hay_patches:
                if animal_patch.horizontal_center > donkey_patch.horizontal_center and donkey_patch.horizontal_center > hay_patch.horizontal_center:
                    return animal_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")"
18382324,Is this a bed or a table?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is this a bed or a table?"")"
18104571,"Which animal is that, a bird or a cat?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""bird""):
            return ""bird""
        elif animal_patch.verify_property(""animal"", ""cat""):
            return ""cat""
    return ""neither"""
2913379,Do you see any fence or pot?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)"
9294271,What is in front of the fence the zebra is kept in?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")"
10741434,What is the vegetable that is on top of the plate called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    for vegetable_patch in vegetable_patches:
        is_on_top_of_plate = vegetable_patch.verify_property(""vegetable"", ""on top of the plate"")
        if is_on_top_of_plate:
            return vegetable_patch.simple_query(""What is the vegetable that is on top of the plate called?"") # crop would include the plate so keep it in the query
    # If no vegetable is on top of the plate, pick the first vegetable
    return vegetable_patches[0].simple_query(""What is the vegetable that is on top of the plate called?"")"
765962,Where is the car?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Where is the car?"")
    return car_patches[0].simple_query(""Where is the car?"")"
12399262,Is there either a yellow truck or airplane?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_yellow_airplane = image_patch.exists(""yellow airplane"")
    return bool_to_yesno(is_yellow_truck or is_yellow_airplane)"
13964213,Is the man on the left of the photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
16171369,What is covered in the snow?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    plastic_bottle_patches = image_patch.find(""plastic bottle"")
    # Question assumes only one plastic bottle patch
    if len(plastic_bottle_patches) == 0:
        # If no plastic bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    for plastic_bottle_patch in plastic_bottle_patches:
        return plastic_bottle_patch.simple_query(""On which side is the plastic bottle?"")"
5858491,Do you see any ropes on the fence that is on the left of the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center < image_patch.horizontal_center:
            rope_patches = image_patch.find(""rope"")
            for rope_patch in rope_patches:
                if rope_patch.horizontal_center > fence_patch.horizontal_center:
                    return ""yes""
    return ""no"""
17834539,Are there any lamps in the scene?," 
    image_patch = ImagePatch(image)
    return image_patch.exists(""lamp"")"
15658176,Who is wearing a helmet?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        is_wearing_helmet = (person_patch.simple_query(""Is the person wearing a helmet?"") == ""yes"")
        if is_wearing_helmet:
            return person_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no person is wearing a helmet, pick the first person
    return person_patches[0].simple_query(""Who is wearing a helmet?"")"
14372400,Does that coat have red color?," # assumes only one coat patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return coat_patches[0].verify_property(""coat"", ""red"")"
411886,Are there any curtains or blankets in this scene?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    curtains_patches = image_patch.find(""curtain"")
    blankets_patches = image_patch.find(""blanket"")
    # Question assumes only one curtain patch and one blanket patch
    if len(curtains_patches) == 0 and len(blankets_patches) == 0:
        # If no curtain or blanket is found, query the image directly
        return image_patch.simple_query(""Are there any curtains or blankets in this scene?"")
    if len(curtains_patches) == 0:
        return blankets_patches[0].simple_query(""Are there any curtains or blankets in this scene?"")
    if len(blankets_patches) == 0:
        return curtains_patches[0].simple_query(""Are there any curtains or blankets in this scene?"")
    return ""yes"""
16921850,What is the item of furniture to the left of the remote that the man is holding called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    for furniture_patch in furniture_patches:
        remote_patches = image_patch.find(""remote"")
        # Question assumes only one remote patch
        if len(remote_patches) == 0:
            return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
        for remote_patch in remote_patches:
            man_patches = image_patch.find(""man"")
            # Question assumes only one man patch
            if len(man_patches) == 0:
                return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
            for man_patch in man_patches:
                if man_patch.horizontal_center > furniture_patch.horizontal_center:
                    return furniture_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")"
51039491,Is the fence black or red?," 
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    return fence_patches[0].best_text_match([""black"", ""red""])"
7425912,What animal is standing in the field?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing in the field?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""standing in the field""):
            return animal_patch.simple_query(""What animal is standing in the field?"") # crop would include the field so keep it in the query
    # If no animal is standing in the field, pick the first animal
    return animal_patches[0].simple_query(""What animal is standing in the field?"")"
13136338,What animal is in front of the dog which is to the right of the bird?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    for dog_patch in dog_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if bird_patch.horizontal_center < dog_patch.horizontal_center:
                animal_patches = image_patch.find(""animal"")
                # Question assumes only one animal patch
                if len(animal_patches) == 0:
                    # If no animal is found, query the image directly
                    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
                for animal_patch in animal_patches:
                    if animal_patch.horizontal_center > dog_patch.horizontal_center:
                        return animal_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")"
3775066,Which color are the cabinets in the bottom of the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")"
17206239,Is the happy girl to the right of a player?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the happy girl to the right of a player?"")"
2992517,"What piece of furniture is not wooden, the table or the chair?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    for furniture_patch in furniture_patches:
        is_not_wooden = (furniture_patch.verify_property(""furniture"", ""wooden"") == ""no"")
        if is_not_wooden:
            return furniture_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"") # crop would include the table or chair so keep it in the query
    # If no furniture is not wooden, pick the first furniture
    return furniture_patches[0].simple_query(""What piece of furniture is not wooden, the table or the chair?"")"
1827558,Which side of the image is the kettle on?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    if kettle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2785208,Where is the man?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    return man_patches[0].simple_query(""Where is the man?"")"
6623967,Is the baby near the countertop chewing a computer mouses?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouses?"")
    for baby_patch in baby_patches:
        countertop_patches = image_patch.find(""countertop"")
        # Question assumes only one countertop patch
        if len(countertop_patches) == 0:
            return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouses?"")
        for countertop_patch in countertop_patches:
            is_chewing = (baby_patch.simple_query(""Is the baby chewing?"") == ""yes"")
            if is_chewing:
                return ""yes""
    return ""no"""
12804807,Is the small bottle open or closed?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    for bottle_patch in bottle_patches:
        if bottle_patch.verify_property(""bottle"", ""open""):
            return ""open""
    return ""closed"""
18437691,Is the clock small or large?," # clock is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the clock small or large?"")"
9482318,Are there either any glasses or bottles in this photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Are there either any glasses or bottles in this photo?"")
    for glasses_patch in glasses_patches:
        bottles_patches = image_patch.find(""bottle"")
        for bottle_patch in bottles_patches:
            if bottle_patch.horizontal_center > glasses_patch.horizontal_center:
                return ""yes""
    return ""no"""
12362819,Is the sky blue or dark?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky blue or dark?"")
    return sky_patches[0].verify_property(""sky"", ""blue"")"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    for shelf_patch in shelf_patches:
        cup_patches = image_patch.find(""cup"")
        # Question assumes only one cup patch
        if len(cup_patches) == 0:
            return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
        for cup_patch in cup_patches:
            furniture_patches = image_patch.find(""furniture"")
            # Question assumes only one furniture patch
            if len(furniture_patches) == 0:
                return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
            for furniture_patch in furniture_patches:
                if furniture_patch.horizontal_center > shelf_patch.horizontal_center:
                    return furniture_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")"
1416636,Are there both bridges and chandeliers in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    if car_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Do you see any doors?"")
    return ""yes"""
13562221,What's the bear on?," # bear is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the bear on?"")"
9536851,Is the woman in front of the trees holding scissors?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")
    for woman_patch in woman_patches:
        scissors_patches = image_patch.find(""scissors"")
        for scissors_patch in scissors_patches:
            if scissors_patch.horizontal_center > woman_patch.horizontal_center:
                return ""yes""
    return ""no"""
9682405,What is on the machine?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    # Question assumes only one machine patch
    if len(machine_patches) == 0:
        # If no machine is found, query the image directly
        return image_patch.simple_query(""What is on the machine?"")
    for machine_patch in machine_patches:
        is_on_machine = (machine_patch.simple_query(""Is there something on the machine?"") == ""yes"")
        if is_on_machine:
            return machine_patch.simple_query(""What is on the machine?"") # crop would include the machine so keep it in the query
    # If no machine is on the machine, pick the first machine
    return machine_patches[0].simple_query(""What is on the machine?"")"
8649435,What is on the white wall?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    wall_patches = image_patch.find(""wall"")
    # Question assumes only one wall patch
    if len(wall_patches) == 0:
        # If no wall is found, query the image directly
        return image_patch.simple_query(""What is on the white wall?"")
    for wall_patch in wall_patches:
        if wall_patch.verify_property(""wall"", ""white""):
            return wall_patch.simple_query(""What is on the white wall?"") # crop would include the wall so keep it in the query
    # If no white wall is found, pick the first wall
    return wall_patches[0].simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""Does the logo look red?"")
    for logo_patch in logo_patches:
        return logo_patch.verify_property(""logo"", ""red"")"
14301289,What type of vehicle is to the left of the white vehicle?," # vehicle is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")"
523976,Which kind of vehicle is large?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vehicle is large?"")"
3423213,Who is in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?," # left or right
    image_patch = ImagePatch(image)
    ottoman_patches = image_patch.find(""ottoman"")
    # Question assumes only one ottoman patch
    if len(ottoman_patches) == 0:
        # If no ottoman is found, query the image directly
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    for ottoman_patch in ottoman_patches:
        brown_chair_patches = image_patch.find(""brown chair"")
        for brown_chair_patch in brown_chair_patches:
            if ottoman_patch.horizontal_center > brown_chair_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
5716578,Is there a laptop on the bed near the magazines?," # laptop on the bed near the magazines
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")
    for laptop_patch in laptop_patches:
        bed_patches = image_patch.find(""bed"")
        for bed_patch in bed_patches:
            magazines_patches = image_patch.find(""magazines"")
            for magazines_patch in magazines_patches:
                if bed_patch.horizontal_center > magazines_patch.horizontal_center and bed_patch.horizontal_center < magazines_patch.horizontal_center:
                    return ""yes""
    return ""no"""
8215791,Is the porcelain toilet to the left or to the right of the small trash can?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    # Question assumes only one porcelain toilet patch
    if len(porcelain_toilet_patches) == 0:
        # If no porcelain toilet is found, query the image directly
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    porcelain_toilet_patch = porcelain_toilet_patches[0]
    trash_can_patches = image_patch.find(""trash can"")
    for trash_can_patch in trash_can_patches:
        if porcelain_toilet_patch.horizontal_center < trash_can_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
17528455,What is in front of the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"")
    for goggles_patch in goggles_patches:
        gloves_patches = image_patch.find(""gloves"")
        for gloves_patch in gloves_patches:
            if goggles_patch.verify_property(""goggles"", ""color"") != gloves_patch.verify_property(""gloves"", ""color""):
                return ""yes""
    return ""no"""
947724,Is there any purple pillow or kite in this photograph?," # purple pillow or kite
    image_patch = ImagePatch(image)
    is_purple_pillow = image_patch.exists(""purple pillow"")
    is_kite = image_patch.exists(""kite"")
    return bool_to_yesno(is_purple_pillow or is_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    for people_patch in people_patches:
        if people_patch.horizontal_center > man_patch.horizontal_center:
            return people_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")"
15492262,Which kind of furniture is white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""Which kind of furniture is white?"") # crop would include the white so keep it in the query
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is white?"")"
151032547,Is the bear on the right side?," # bear is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the bear on the right side?"")"
5698674,Are there either any planters or benches?," # image_patch = ImagePatch(image)
    planters_patches = image_patch.find(""planter"")
    # Question assumes only one planter patch
    if len(planters_patches) == 0:
        # If no planter is found, query the image directly
        return image_patch.simple_query(""Are there either any planters or benches?"")
    for planter_patch in planters_patches:
        benches_patches = image_patch.find(""bench"")
        for bench_patch in benches_patches:
            return ""yes""
    return ""no"""
19397103,What is the person that is standing staring at?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person that is standing staring at?"")
    for person_patch in person_patches:
        is_staring = (person_patch.simple_query(""Is the person that is standing staring at?"") == ""yes"")
        if is_staring:
            return person_patch.simple_query(""What is the person that is standing staring at?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""What is the person that is standing staring at?"")"
11630681,What is the color of the necklace?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the color of the necklace?"")"
248245,Is the table to the left or to the right of the fence?," 
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    for table_patch in table_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if table_patch.horizontal_center < fence_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
837033,Are there round windows or doors?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_round_window = image_patch.exists(""round window"")
    is_round_door = image_patch.exists(""round door"")
    return bool_to_yesno(is_round_window or is_round_door)"
5249150,Are there any bears or napkins in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bears_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bears_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Are there any bears or napkins in the picture?"")
    for bear_patch in bears_patches:
        napkins_patches = image_patch.find(""napkin"")
        # Question assumes only one napkin patch
        if len(napkins_patches) == 0:
            # If no napkin is found, query the image directly
            return image_patch.simple_query(""Are there any bears or napkins in the picture?"")
        for napkin_patch in napkins_patches:
            return ""yes""
    return ""no"""
13908598,What kind of vehicle is to the left of the person?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")"
61006749,Who is dressed in pink?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Who is dressed in pink?"")
    for people_patch in people_patches:
        is_dressed_in_pink = (people_patch.simple_query(""Is the person dressed in pink?"") == ""yes"")
        if is_dressed_in_pink:
            return people_patch.simple_query(""Who is dressed in pink?"") # crop would include the shirt so keep it in the query
    # If no people is dressed in pink, pick the first person
    return people_patches[0].simple_query(""Who is dressed in pink?"")"
6122955,Does the pillow have yellow color?," # pillow is the object
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return pillow_patches[0].verify_property(""pillow"", ""yellow"")"
6861738,Is the old woman to the right or to the left of the faucet?," 
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    # Question assumes only one old woman patch
    if len(old_woman_patches) == 0:
        # If no old woman is found, query the image directly
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    for old_woman_patch in old_woman_patches:
        faucet_patches = image_patch.find(""faucet"")
        for faucet_patch in faucet_patches:
            if faucet_patch.horizontal_center > old_woman_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
15833048,Which kind of animal is on the road?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which kind of animal is on the road?"")"
9524339,What animal is large?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    for animal_patch in animal_patches:
        is_large = animal_patch.verify_property(""animal"", ""large"")
        if is_large:
            return animal_patch.simple_query(""What animal is large?"") # crop would include the large animal so keep it in the query
    # If no large animal is found, pick the first animal
    return animal_patches[0].simple_query(""What animal is large?"")"
18255749,How clean are the sheets the pillow is to the right of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    for pillow_patch in pillow_patches:
        sheets_patches = image_patch.find(""sheets"")
        # Question assumes only one sheets patch
        if len(sheets_patches) == 0:
            return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
        for sheets_patch in sheets_patches:
            if sheets_patch.horizontal_center > pillow_patch.horizontal_center:
                return sheets_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")"
19797097,What's the man wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What's the man wearing?"") # crop would include the shirt so keep it in the query"
6899090,Is the man to the right or to the left of the appliance that looks white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""no""
    for appliance_patch in appliance_patches:
        if appliance_patch.simple_query(""Is the appliance white?"") == ""yes"":
            if man_patch.horizontal_center > appliance_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
    return ""no"""
3357701,Does the dog to the right of the other dog have white color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    dog_patch = dog_patches[0]
    other_dog_patches = image_patch.find(""dog"")
    # Question assumes only one other dog patch
    if len(other_dog_patches) == 0:
        return ""no""
    for other_dog_patch in other_dog_patches:
        if other_dog_patch.horizontal_center > dog_patch.horizontal_center:
            return dog_patch.verify_property(""dog"", ""white"")
    return ""no"""
2829418,What's the girl holding?," # girl holding what?
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What's the girl holding?"")
    for girl_patch in girl_patches:
        holding_patches = image_patch.find(""holding"")
        for holding_patch in holding_patches:
            return holding_patch.simple_query(""What's the girl holding?"")"
15930109,Which kind of vehicle is blue?," # image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""blue""):
            return vehicle_patch.simple_query(""Which kind of vehicle is blue?"")"
1525382,What type of vegetable is on the food with the cheese?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_with_cheese_patches = image_patch.find(""food with cheese"")
    # Question assumes only one food with cheese patch
    if len(food_with_cheese_patches) == 0:
        # If no food with cheese is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    for food_with_cheese_patch in food_with_cheese_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.vertical_center > food_with_cheese_patch.vertical_center:
                return vegetable_patch.simple_query(""What type of vegetable is on the food with the cheese?"") # crop would include the cheese so keep it in the query
    # If no vegetable is on the food with cheese, pick the first vegetable
    return vegetable_patches[0].simple_query(""What type of vegetable is on the food with the cheese?"")"
8548980,Are there either players or hand soaps?," # image_patch = ImagePatch(image)
    players_patches = image_patch.find(""players"")
    # Question assumes only one players patch
    if len(players_patches) == 0:
        # If no players are found, query the image directly
        return image_patch.simple_query(""Are there either players or hand soaps?"")
    is_player = len(players_patches) > 0
    hand_soap_patches = image_patch.find(""hand soap"")
    # Question assumes only one hand soap patch
    if len(hand_soap_patches) == 0:
        return ""no""
    is_hand_soap = len(hand_soap_patches) > 0
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?"," # crop would include eating so keep it in the query
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    for food_patch in food_patches:
        if food_patch.verify_property(""food"", ""made"") == False:
            return food_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")"
6423906,Which kind of food is on the plate?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    for food_patch in food_patches:
        return food_patch.simple_query(""Which kind of food is on the plate?"")"
1993231,Are the animals in the image of different types?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""type"") == ""dog"":
            return ""yes""
    return ""no"""
13949656,Are there any people to the left of the tray?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    tray_patches = image_patch.find(""tray"")
    # Question assumes only one tray patch
    if len(tray_patches) == 0:
        # If no tray is found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for tray_patch in tray_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center < tray_patch.horizontal_center:
                return ""yes""
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    pineapple_patches = image_patch.find(""pineapple"")
    # Question assumes only one pineapple patch
    if len(pineapple_patches) == 0:
        # If no pineapple is found, query the image directly
        return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")
    for pineapple_patch in pineapple_patches:
        is_ripe = pineapple_patch.verify_property(""pineapple"", ""ripe"")
        if is_ripe:
            return ""yes""
    return ""no"""
9392591,Are there chairs or smoothies?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal to the right of the sheep?"") == ""yes"":
            return animal_patch.simple_query(""Which kind of animal is to the right of the sheep?"") # crop would include the sheep so keep it in the query
    # If no animal is to the right of the sheep, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is to the right of the sheep?"")"
9896138,Are there any boxes to the left of the screen in the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""screen"")
    # Question assumes only one screen patch
    if len(screen_patches) == 0:
        # If no screen is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for screen_patch in screen_patches:
        box_patches = image_patch.find(""box"")
        for box_patch in box_patches:
            if box_patch.horizontal_center < screen_patch.horizontal_center:
                return ""yes""
    return ""no"""
1400333,What do you think is the man on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What do you think is the man on?"")
    for man_patch in man_patches:
        is_on_patch = (man_patch.simple_query(""Is the man on a patch?"") == ""yes"")
        if is_on_patch:
            return man_patch.simple_query(""What do you think is the man on?"") # crop would include the patch so keep it in the query
    # If no man is on a patch, pick the first man
    return man_patches[0].simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?," # boot is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the boot white or orange?"")"
3659880,Does the wood boat have silver color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    wood_boat_patches = image_patch.find(""wood boat"")
    # Question assumes only one wood boat patch
    if len(wood_boat_patches) == 0:
        # If no wood boat is found, query the image directly
        return image_patch.simple_query(""Does the wood boat have silver color?"")
    return bool_to_yesno(wood_boat_patches[0].verify_property(""wood boat"", ""silver""))"
1827802,Is the red pot on the appliance to the right of the mixer?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red_pot"")
    # Question assumes only one red_pot patch
    if len(red_pot_patches) == 0:
        # If no red_pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    for red_pot_patch in red_pot_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            mixer_patches = image_patch.find(""mixer"")
            for mixer_patch in mixer_patches:
                if mixer_patch.horizontal_center > appliance_patch.horizontal_center:
                    return ""yes""
    return ""no"""
14809102,The phone that is in front of the camera is of what color?," # phone is in front of the camera
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # Question assumes only one phone patch
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    for phone_patch in phone_patches:
        is_in_front_of_camera = (phone_patch.simple_query(""Is the phone in front of the camera?"") == ""yes"")
        if is_in_front_of_camera:
            return phone_patch.simple_query(""The phone that is in front of the camera is of what color?"") # crop would include the camera so keep it in the query
    # If no phone is in front of the camera, pick the first phone
    return phone_patches[0].simple_query(""The phone that is in front of the camera is of what color?"")"
61001545,What type of food is to the left of the silver spoon?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    for food_patch in food_patches:
        silver_spoon_patches = image_patch.find(""silver spoon"")
        for silver_spoon_patch in silver_spoon_patches:
            if silver_spoon_patch.horizontal_center > food_patch.horizontal_center:
                return food_patch.simple_query(""What type of food is to the left of the silver spoon?"") # crop would include the spoon so keep it in the query
    # If no food is to the left of the silver spoon, pick the first food
    return food_patches[0].simple_query(""What type of food is to the left of the silver spoon?"")"
799463,Are there both a window and a door in the picture?," # window and door are not relational verbs
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Are there both a window and a door in the picture?"")
    for window_patch in window_patches:
        door_patches = image_patch.find(""door"")
        for door_patch in door_patches:
            return ""yes""
    return ""no"""
11260725,Does the water have small size and white color?," # water is the object, small and white are the properties
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Does the water have small size and white color?"")
    for water_patch in water_patches:
        if water_patch.verify_property(""water"", ""small"") and water_patch.verify_property(""water"", ""white""):
            return ""yes""
    return ""no"""
2397653,Are there any fences that are white?," 
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any fences that are white?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""yes""
    return ""no"""
1554603,Who is holding the animal?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    for person_patch in person_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return image_patch.simple_query(""Who is holding the animal?"")
        for animal_patch in animal_patches:
            if animal_patch.simple_query(""Is the animal being held?"") == ""yes"":
                return person_patch.simple_query(""Who is holding the animal?"")"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patch = man_patches[0]
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        return ""no""
    for stroller_patch in stroller_patches:
        people_patches = image_patch.find(""people"")
        # Question assumes only one people patch
        if len(people_patches) == 0:
            return ""no""
        for people_patch in people_patches:
            if people_patch.horizontal_center > stroller_patch.horizontal_center:
                if man_patch.horizontal_center > people_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""no"""
8988476,What kind of furniture is presented in this photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is presented in this photo?"")
    for furniture_patch in furniture_patches:
        return furniture_patch.simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        return ""no""
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center > man_patch.horizontal_center:
            return backpack_patch.simple_query(""What is the man with the backpack holding?"") # crop would include the backpack so keep it in the query
    # If no backpack is found, query the image directly
    return image_patch.simple_query(""What is the man with the backpack holding?"")"
91058050,Are there both mouse pads and computer mice in the photograph?," # mouse pads and computer mice are not in the same image
    image_patch = ImagePatch(image)
    mouse_pad_patches = image_patch.find(""mouse pad"")
    # Question assumes only one mouse pad patch
    if len(mouse_pad_patches) == 0:
        # If no mouse pad is found, query the image directly
        return image_patch.simple_query(""Are there both mouse pads and computer mice in the photograph?"")
    for mouse_pad_patch in mouse_pad_patches:
        computer_mouse_patches = image_patch.find(""computer mouse"")
        for computer_mouse_patch in computer_mouse_patches:
            return ""yes""
    return ""no"""
1972064,Is the person in front of the tree wearing jeans?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")
    for person_patch in person_patches:
        jeans_patches = image_patch.find(""jeans"")
        # Question assumes only one jeans patch
        if len(jeans_patches) == 0:
            return ""no""
        for jeans_patch in jeans_patches:
            if jeans_patch.horizontal_center > person_patch.horizontal_center:
                return ""yes""
    return ""no"""
167162,Is there a bike to the right of the purse that is to the right of the woman?," # bike, purse, woman
    image_patch = ImagePatch(image)
    bike_patches = image_patch.find(""bike"")
    # Question assumes only one bike patch
    if len(bike_patches) == 0:
        # If no bike is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    for bike_patch in bike_patches:
        purse_patches = image_patch.find(""purse"")
        # Question assumes only one purse patch
        if len(purse_patches) == 0:
            return ""no""
        for purse_patch in purse_patches:
            woman_patches = image_patch.find(""woman"")
            # Question assumes only one woman patch
            if len(woman_patches) == 0:
                return ""no""
            for woman_patch in woman_patches:
                if purse_patch.horizontal_center > woman_patch.horizontal_center and bike_patch.horizontal_center > purse_patch.horizontal_center:
                    return ""yes""
    return ""no"""
1695388,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    for woman_patch in woman_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.vertical_center < image_patch.vertical_center:
                if woman_patch.horizontal_center > man_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""no"""
16921984,What is the bent man to the right of the other men doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bent_man_patches = image_patch.find(""bent man"")
    # Question assumes only one bent man patch
    if len(bent_man_patches) == 0:
        # If no bent man is found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    for bent_man_patch in bent_man_patches:
        other_man_patches = image_patch.find(""man"")
        # Question assumes only one other man patch
        if len(other_man_patches) == 0:
            return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
        for other_man_patch in other_man_patches:
            if other_man_patch.horizontal_center > bent_man_patch.horizontal_center:
                return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"") # crop would include the other man so keep it in the query
    # If no other man is found, pick the first man
    return other_man_patches[0].simple_query(""What is the bent man to the right of the other men doing?"")"
12175564,What animal are the men to the right of the girl leading?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""men"")
    # Question assumes only one men patch
    if len(men_patches) == 0:
        # If no men are found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    for men_patch in men_patches:
        girl_patches = image_patch.find(""girl"")
        # Question assumes only one girl patch
        if len(girl_patches) == 0:
            return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
        for girl_patch in girl_patches:
            if girl_patch.horizontal_center > men_patch.horizontal_center:
                animal_patches = image_patch.find(""animal"")
                # Question assumes only one animal patch
                if len(animal_patches) == 0:
                    return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
                for animal_patch in animal_patches:
                    if animal_patch.simple_query(""What animal are the men to the right of the girl leading?"") == ""cat"":
                        return ""cat""
    return ""no cat"""
1219606,On which side of the image is the house?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
1770499,Is the black suitcase to the right or to the left of the person on the left?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")"
5282406,Is the pot to the left of a chair?," 
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    for pot_patch in pot_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if pot_patch.horizontal_center < chair_patch.horizontal_center:
                return ""yes""
    return ""no"""
10914401,Where are the people?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    return people_patches[0].simple_query(""Where are the people?"")"
1919722,What animal is eating the grass?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is eating the grass?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""eating""):
            return animal_patch.simple_query(""What animal is eating the grass?"") # crop would include the grass so keep it in the query
    # If no animal is eating the grass, pick the first animal
    return animal_patches[0].simple_query(""What animal is eating the grass?"")"
9681008,Who is wearing a helmet?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        is_wearing_helmet = (person_patch.simple_query(""Is the person wearing a helmet?"") == ""yes"")
        if is_wearing_helmet:
            return person_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no person is wearing a helmet, pick the first person
    return person_patches[0].simple_query(""Who is wearing a helmet?"")"
16861675,Who is on the surfboard in the middle of the photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        # If no surfboard is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    for surfboard_patch in surfboard_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center == surfboard_patch.horizontal_center:
                return person_patch.simple_query(""Who is on the surfboard in the middle of the photo?"") # crop would include the person so keep it in the query
    # If no person is on the surfboard, pick the first person
    return person_patches[0].simple_query(""Who is on the surfboard in the middle of the photo?"")"
10947426,What is the color of the lizard beside the banana?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    # Question assumes only one lizard patch
    if len(lizard_patches) == 0:
        # If no lizard is found, query the image directly
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    for lizard_patch in lizard_patches:
        banana_patches = image_patch.find(""banana"")
        for banana_patch in banana_patches:
            if lizard_patch.horizontal_center > banana_patch.horizontal_center:
                return lizard_patch.simple_query(""What is the color of the lizard beside the banana?"") # crop would include the banana so keep it in the query
    # If no lizard is beside the banana, pick the first lizard
    return lizard_patches[0].simple_query(""What is the color of the lizard beside the banana?"")"
18200684,Is the wine glass in the top or in the bottom part?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    if wine_glass_patches[0].vertical_center < image_patch.vertical_center:
        return ""top""
    else:
        return ""bottom"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    for people_patch in people_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < people_patch.horizontal_center:
                return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")"
171012637,Is the teddy bear to the right of a suitcase?," 
    image_patch = ImagePatch(image)
    teddy_patches = image_patch.find(""teddy bear"")
    # Question assumes only one teddy bear patch
    if len(teddy_patches) == 0:
        # If no teddy bear is found, query the image directly
        return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"")
    for teddy_patch in teddy_patches:
        suitcase_patches = image_patch.find(""suitcase"")
        for suitcase_patch in suitcase_patches:
            if suitcase_patch.horizontal_center > teddy_patch.horizontal_center:
                return ""yes""
    return ""no"""
19861372,Is the woman's hair long or short?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    for woman_patch in woman_patches:
        hair_length = woman_patch.simple_query(""Is the woman's hair long or short?"")
        if hair_length == ""long"":
            return ""long""
        else:
            return ""short"""
623889,Are both the television and the armchair the same color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    television_patches = image_patch.find(""television"")
    # Question assumes only one television patch
    if len(television_patches) == 0:
        # If no television is found, query the image directly
        return image_patch.simple_query(""Are both the television and the armchair the same color?"")
    for television_patch in television_patches:
        armchair_patches = image_patch.find(""armchair"")
        for armchair_patch in armchair_patches:
            if television_patch.verify_property(""television"", ""color"") == armchair_patch.verify_property(""armchair"", ""color""):
                return ""yes""
    return ""no"""
4917605,Is the shoe white or brown?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    for shoe_patch in shoe_patches:
        return shoe_patch.simple_query(""Is the shoe white or brown?"")"
91055143,What is on the table?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    for table_patch in table_patches:
        object_patches = image_patch.find(""object"")
        # Question assumes only one object patch
        if len(object_patches) == 0:
            return image_patch.simple_query(""What is on the table?"")
        for object_patch in object_patches:
            if object_patch.vertical_center > table_patch.vertical_center:
                return object_patch.simple_query(""What is on the table?"") # crop would include the table so keep it in the query
    # If no object is on the table, pick the first object
    return object_patches[0].simple_query(""What is on the table?"")"
5430643,What do you think sits on the plate to the left of the tomato?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    for plate_patch in plate_patches:
        tomato_patches = image_patch.find(""tomato"")
        for tomato_patch in tomato_patches:
            if tomato_patch.horizontal_center < plate_patch.horizontal_center:
                return plate_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"") # crop would include the tomato so keep it in the query
    # If no tomato is found, pick the first plate
    return plate_patches[0].simple_query(""What do you think sits on the plate to the left of the tomato?"")"
523936,Is the woman in the top part of the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    if woman_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?," # bottle, nightstand, bed
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    for bottle_patch in bottle_patches:
        nightstand_patches = image_patch.find(""nightstand"")
        for nightstand_patch in nightstand_patches:
            bed_patches = image_patch.find(""bed"")
            for bed_patch in bed_patches:
                if nightstand_patch.lower > bed_patch.lower and nightstand_patch.upper < bed_patch.upper:
                    return ""yes""
    return ""no"""
14292161,The pot is of which color?," # pot is of which color?
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].verify_property(""pot"", ""color"")"
17495150,"What device is black, the microphone or the laptop?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    for device_patch in device_patches:
        is_black = device_patch.verify_property(""device"", ""black"")
        if is_black:
            return device_patch.simple_query(""What device is black, the microphone or the laptop?"") # crop would include the black so keep it in the query
    # If no black device is found, pick the first device
    return device_patches[0].simple_query(""What device is black, the microphone or the laptop?"")"
1521847,Is the cat on a desk?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Is the cat on a desk?"")
    for cat_patch in cat_patches:
        desk_patches = image_patch.find(""desk"")
        for desk_patch in desk_patches:
            if cat_patch.vertical_center > desk_patch.vertical_center:
                return ""yes""
    return ""no"""
16465081,The man is holding what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    for man_patch in man_patches:
        object_patches = man_patch.find(""object"")
        # Question assumes only one object patch
        if len(object_patches) == 0:
            return man_patch.simple_query(""The man is holding what?"")
        for object_patch in object_patches:
            if object_patch.simple_query(""Is the object a ball?"") == ""yes"":
                return ""ball""
            elif object_patch.simple_query(""Is the object a cup?"") == ""yes"":
                return ""cup""
            elif object_patch.simple_query(""Is the object a spoon?"") == ""yes"":
                return ""spoon""
            elif object_patch.simple_query(""Is the object a fork?"") == ""yes"":
                return ""fork""
            elif object_patch.simple_query(""Is the object a knife?"") == ""yes"":
                return ""knife""
            elif object_patch.simple_query(""Is the object a spoon?"") == ""yes"":
                return ""spoon""
            elif object_patch.simple_query(""Is the object a fork?"") == ""yes"":
                return ""fork""
            elif object_patch.simple_query(""Is the object a knife?"") == ""yes"":
                return ""knife""
            elif"
17387032,What is on the post?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    post_patches = image_patch.find(""post"")
    # Question assumes only one post patch
    if len(post_patches) == 0:
        # If no post is found, query the image directly
        return image_patch.simple_query(""What is on the post?"")
    for post_patch in post_patches:
        return post_patch.simple_query(""What is on the post?"") # crop would include the post so keep it in the query"
1892436,What is in front of the kids that are looking at the cake?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    kids_patches = image_patch.find(""kids"")
    # Question assumes only one kids patch
    if len(kids_patches) == 0:
        # If no kids are found, query the image directly
        return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")
    for kids_patch in kids_patches:
        cake_patches = image_patch.find(""cake"")
        for cake_patch in cake_patches:
            is_in_front = (kids_patch.simple_query(""Is the kids in front of the cake?"") == ""yes"")
            if is_in_front:
                return kids_patch.simple_query(""What is in front of the kids that are looking at the cake?"") # crop would include the cake so keep it in the query
    # If no kids are in front of the cake, pick the first kids
    return kids_patches[0].simple_query(""What is in front of the kids that are looking at the cake?"")"
18906705,How big is the crowd?," # crop would include the crowd so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How big is the crowd?"")"
6157200,Does the sign on the pole have white color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    for sign_patch in sign_patches:
        if sign_patch.verify_property(""sign"", ""white""):
            return ""yes""
    return ""no"""
16760226,What's the laptop in front of?," # laptop is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?," # crop would include the bed so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How large is the bed?"")"
14143886,Where is the person with the luggage standing on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    for person_patch in person_patches:
        luggage_patches = image_patch.find(""luggage"")
        for luggage_patch in luggage_patches:
            is_on = (luggage_patch.simple_query(""Is the luggage on the person?"") == ""yes"")
            if is_on:
                return person_patch.simple_query(""Where is the person with the luggage standing on?"") # crop would include the luggage so keep it in the query
    # If no person is on the luggage, pick the first person
    return person_patches[0].simple_query(""Where is the person with the luggage standing on?"")"
19872633,Are there either any fire extinguishers or pepper shakers?," # image_patch = ImagePatch(image)
    fire_extinguisher_patches = image_patch.find(""fire extinguisher"")
    pepper_shaker_patches = image_patch.find(""pepper shaker"")
    # Question assumes only one fire extinguisher patch and one pepper shaker patch
    if len(fire_extinguisher_patches) == 0 and len(pepper_shaker_patches) == 0:
        # If no fire extinguisher or pepper shaker is found, query the image directly
        return image_patch.simple_query(""Are there either any fire extinguishers or pepper shakers?"")
    if len(fire_extinguisher_patches) == 0:
        return ""no""
    if len(pepper_shaker_patches) == 0:
        return ""no""
    return ""yes"""
12755010,Is the bottle to the right of a napkin?," 
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    for bottle_patch in bottle_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if napkin_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""yes""
    return ""no"""
2747001,Are there any soaps or bombs?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    baby_giraffe_patches = image_patch.find(""baby giraffe"")
    # Question assumes only one baby giraffe patch
    if len(baby_giraffe_patches) == 0:
        # If no baby giraffe is found, query the image directly
        return image_patch.simple_query(""Do you see baby giraffes or elephants?"")
    for baby_giraffe_patch in baby_giraffe_patches:
        elephant_patches = image_patch.find(""elephant"")
        for elephant_patch in elephant_patches:
            if baby_giraffe_patch.vertical_center > elephant_patch.vertical_center:
                return ""yes""
    return ""no"""
6898877,What is the sign on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""What is the sign on?"")
    return sign_patches[0].simple_query(""What is the sign on?"")"
15862812,What is the sticker on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    for sticker_patch in sticker_patches:
        is_on_patch = (sticker_patch.simple_query(""Is the sticker on a patch?"") == ""yes"")
        if is_on_patch:
            return sticker_patch.simple_query(""What is the sticker on?"") # crop would include the patch so keep it in the query
    # If no sticker is on a patch, pick the first sticker
    return sticker_patches[0].simple_query(""What is the sticker on?"")"
141031470,On which side of the image is the white towel?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    if towel_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
41026846,Who rides a motorcycle?," # motorcycle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""What is around the bathtub the towel is on?"")
    for towel_patch in towel_patches:
        bathtub_patches = image_patch.find(""bathtub"")
        for bathtub_patch in bathtub_patches:
            return image_patch.simple_query(""What is around the bathtub the towel is on?"") # crop would include the towel so keep it in the query
    # If no towel is found, query the image directly
    return image_patch.simple_query(""What is around the bathtub the towel is on?"")"
7469617,Is the man to the left or to the right of the person that is to the left of the people?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    for people_patch in people_patches:
        if people_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
    return ""right"""
64308,What's located on top of the soup?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    soup_patches = image_patch.find(""soup"")
    # Question assumes only one soup patch
    if len(soup_patches) == 0:
        # If no soup is found, query the image directly
        return image_patch.simple_query(""What's located on top of the soup?"")
    for soup_patch in soup_patches:
        top_patches = image_patch.find(""top"")
        for top_patch in top_patches:
            if top_patch.vertical_center > soup_patch.vertical_center:
                return top_patch.simple_query(""What's located on top of the soup?"") # crop would include the top so keep it in the query
    # If no top is found, pick the first top
    return top_patches[0].simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    for fence_patch in fence_patches:
        bench_patches = image_patch.find(""bench"")
        for bench_patch in bench_patches:
            if bench_patch.verify_property(""bench"", ""material"") == fence_patch.verify_property(""fence"", ""material""):
                return ""yes""
    return ""no"""
3196255,Are there helmets that are not white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    helmets_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmets_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmets_patches:
        if not helmet_patch.verify_property(""helmet"", ""white""):
            return ""yes""
    return ""no"""
2992630,Is the bowl to the right or to the left of the man that is drinking?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    for bowl_patch in bowl_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
        for man_patch in man_patches:
            if man_patch.simple_query(""Is the man drinking?"") == ""yes"":
                if bowl_patch.horizontal_center > man_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""no"""
513894,Is the person above the sand wearing glasses?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    for person_patch in person_patches:
        sand_patches = image_patch.find(""sand"")
        for sand_patch in sand_patches:
            if sand_patch.vertical_center > person_patch.vertical_center:
                glasses_patches = image_patch.find(""glasses"")
                for glasses_patch in glasses_patches:
                    if glasses_patch.vertical_center > person_patch.vertical_center:
                        return ""yes""
    return ""no"""
14167599,Is the color of the life preserver the same as that of the house?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    # Question assumes only one life preserver patch
    if len(life_preserver_patches) == 0:
        # If no life preserver is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    for life_preserver_patch in life_preserver_patches:
        house_patches = image_patch.find(""house"")
        for house_patch in house_patches:
            if life_preserver_patch.verify_property(""life preserver"", ""color"") == house_patch.verify_property(""house"", ""color""):
                return ""yes""
    return ""no"""
18264755,How is the weather?," # weather is a predicate of a verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    for animal_patch in animal_patches:
        is_in_toilet = (animal_patch.simple_query(""Is the animal in the toilet?"") == ""yes"")
        is_toilet_open = (animal_patch.simple_query(""Is the toilet open?"") == ""no"")
        if is_in_toilet and is_toilet_open:
            return animal_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"") # crop would include the animal so keep it in the query
    # If no animal is in the toilet, pick the first animal
    return animal_patches[0].simple_query(""What is the animal that is looking into the toilet that is not closed?"")"
8641613,Do you see any helmets in the picture that are not red?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    helmets_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmets_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmets_patches:
        if not helmet_patch.verify_property(""helmet"", ""red""):
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person happy?"") == ""yes"":
            return person_patch.simple_query(""What does the happy person hold?"")"
8461507,Are there either tissue boxes or lamps in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which kind of animal is it?"")"
19102906,What type of drink is to the left of the plate?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    drink_patches = image_patch.find(""drink"")
    # Question assumes only one drink patch
    if len(drink_patches) == 0:
        # If no drink is found, query the image directly
        return image_patch.simple_query(""What type of drink is to the left of the plate?"")
    for drink_patch in drink_patches:
        plate_patches = image_patch.find(""plate"")
        for plate_patch in plate_patches:
            if plate_patch.horizontal_center > drink_patch.horizontal_center:
                return drink_patch.simple_query(""What type of drink is to the left of the plate?"") # crop would include the plate so keep it in the query
    # If no drink is to the left of the plate, pick the first drink
    return drink_patches[0].simple_query(""What type of drink is to the left of the plate?"")"
18315440,Is the sky cloudy and blue?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_cloudy = image_patch.verify_property(""sky"", ""cloudy"")
    is_blue = image_patch.verify_property(""sky"", ""blue"")
    return bool_to_yesno(is_cloudy and is_blue)"
453061,Is the fork on the right of the image?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the fork on the right of the image?"")"
71002567,"What is the broccoli on, a table or a nightstand?"," 
    image_patch = ImagePatch(image)
    broccoli_patches = image_patch.find(""broccoli"")
    # Question assumes only one broccoli patch
    if len(broccoli_patches) == 0:
        # If no broccoli is found, query the image directly
        return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    broccoli_patch = broccoli_patches[0]
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return broccoli_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    for table_patch in table_patches:
        if broccoli_patch.vertical_center > table_patch.vertical_center:
            return ""table""
    nightstand_patches = image_patch.find(""nightstand"")
    # Question assumes only one nightstand patch
    if len(nightstand_patches) == 0:
        # If no nightstand is found, query the image directly
        return broccoli_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    for nightstand_patch in nightstand_patches:
        if broccoli_patch.vertical_center < nightstand_patch.vertical_center:
            return ""nightstand""
    return ""no"""
17465089,Is the field green and small?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_green = image_patch.verify_property(""field"", ""green"")
    is_small = image_patch.verify_property(""field"", ""small"")
    return bool_to_yesno(is_green and is_small)"
16150157,What is on the wall?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    wall_patches = image_patch.find(""wall"")
    # Question assumes only one wall patch
    if len(wall_patches) == 0:
        # If no wall is found, query the image directly
        return image_patch.simple_query(""What is on the wall?"")
    for wall_patch in wall_patches:
        return wall_patch.simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    for van_patch in van_patches:
        suv_patches = image_patch.find(""SUV"")
        # Question assumes only one SUV patch
        if len(suv_patches) == 0:
            return ""no""
        for suv_patch in suv_patches:
            if suv_patch.right > van_patch.right:
                return ""right""
    return ""left"""
15101358,Is the girl to the left of the boy?," # girl is the subject, boy is the object
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    for girl_patch in girl_patches:
        boy_patches = image_patch.find(""boy"")
        for boy_patch in boy_patches:
            if girl_patch.horizontal_center < boy_patch.horizontal_center:
                return ""yes""
    return ""no"""
12785181,What animals are in the grass?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animals are in the grass?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""eating""):
            return animal_patch.simple_query(""What animals are in the grass?"") # crop would include the eating so keep it in the query
    # If no animal is eating, query the image directly
    return image_patch.simple_query(""What animals are in the grass?"")"
348093,Are there both an apple and a bag in the picture?," # apple and bag
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)"
314181,Which sign is shown?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which sign is shown?"")"
16275314,"On which side is the woman, the right or the left?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    if woman_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19535592,Who runs on the sand?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who runs on the sand?"")
    for person_patch in person_patches:
        is_running = (person_patch.simple_query(""Is the person running?"") == ""yes"")
        if is_running:
            return person_patch.simple_query(""Who runs on the sand?"") # crop would include the sand so keep it in the query
    # If no person is running, pick the first person
    return person_patches[0].simple_query(""Who runs on the sand?"")"
156886,Is there a giraffe near the bush?," # image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    for giraffe_patch in giraffe_patches:
        bush_patches = image_patch.find(""bush"")
        for bush_patch in bush_patches:
            if bush_patch.horizontal_center > giraffe_patch.horizontal_center:
                return ""yes""
    return ""no"""
1756642,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who wears the shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who wears the shirt?"")"
1972390,What type of animal is standing in the field?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal is standing in the field?"")
    for animal_patch in animal_patches:
        return animal_patch.simple_query(""What type of animal is standing in the field?"")"
14579439,Is the stuffed animal on the right?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    for stuffed_animal_patch in stuffed_animal_patches:
        is_on_right = (stuffed_animal_patch.simple_query(""Is the stuffed animal on the right?"") == ""yes"")
        if is_on_right:
            return stuffed_animal_patch.simple_query(""Is the stuffed animal on the right?"") # crop would include the stuffed animal so keep it in the query
    # If no stuffed animal is on the right, pick the first stuffed animal
    return stuffed_animal_patches[0].simple_query(""Is the stuffed animal on the right?"")"
6645395,Is the gray building behind the passengers that are boarding the airplane?," 
    image_patch = ImagePatch(image)
    gray_building_patches = image_patch.find(""gray building"")
    # Question assumes only one gray building patch
    if len(gray_building_patches) == 0:
        # If no gray building is found, query the image directly
        return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")
    for gray_building_patch in gray_building_patches:
        passengers_patches = image_patch.find(""passengers"")
        for passengers_patch in passengers_patches:
            if passengers_patch.horizontal_center > gray_building_patch.horizontal_center:
                return ""yes""
    return ""no"""
19610200,Is the fence metallic?," 
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""fence"", ""metallic"")"
5299471,What does the girl that to the left of the trashcan carry?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    for girl_patch in girl_patches:
        trashcan_patches = image_patch.find(""trashcan"")
        for trashcan_patch in trashcan_patches:
            if trashcan_patch.horizontal_center > girl_patch.horizontal_center:
                return girl_patch.simple_query(""What does the girl that to the left of the trashcan carry?"") # crop would include the trashcan so keep it in the query
    # If no girl is to the left of the trashcan, pick the first girl
    return girl_patches[0].simple_query(""What does the girl that to the left of the trashcan carry?"")"
7548203,Which kind of vegetable is on the pizza?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    for vegetable_patch in vegetable_patches:
        return vegetable_patch.simple_query(""Which kind of vegetable is on the pizza?"")"
91027737,On which side is the pan?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    if pan_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19133443,Are the black cars in the top part of the photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    if black_car_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
6144031,Who is in the living room?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    living_room_patches = image_patch.find(""living room"")
    # Question assumes only one living room patch
    if len(living_room_patches) == 0:
        # If no living room is found, query the image directly
        return image_patch.simple_query(""Who is in the living room?"")
    for living_room_patch in living_room_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.vertical_center > living_room_patch.vertical_center:
                return people_patch.simple_query(""Who is in the living room?"") # crop would include the living room so keep it in the query
    # If no people are in the living room, pick the first person
    return people_patches[0].simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    sink_patches = image_patch.find(""sink"")
    # Question assumes only one sink patch
    if len(sink_patches) == 0:
        # If no sink is found, query the image directly
        return image_patch.simple_query(""What is the sink made of?"")
    return sink_patches[0].simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_cat = image_patch.exists(""cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see a bicycle or a biker in this picture?"")"
844747,Are there both a pillow and a kitten in the image?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Are there both a pillow and a kitten in the image?"")
    for pillow_patch in pillow_patches:
        kitten_patches = image_patch.find(""kitten"")
        for kitten_patch in kitten_patches:
            return ""yes""
    return ""no"""
1104500,What kind of food is in the box?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What kind of food is in the box?"")
    for food_patch in food_patches:
        is_in_box = (food_patch.simple_query(""Is the food in the box?"") == ""yes"")
        if is_in_box:
            return food_patch.simple_query(""What kind of food is in the box?"") # crop would include the box so keep it in the query
    # If no food is in the box, pick the first food
    return food_patches[0].simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    for food_patch in food_patches:
        kid_patches = image_patch.find(""kid"")
        for kid_patch in kid_patches:
            if kid_patch.horizontal_center > food_patch.horizontal_center:
                return food_patch.simple_query(""What is the food that is to the left of the kid called?"") # crop would include the kid so keep it in the query
    # If no food is to the left of the kid, pick the first food
    return food_patches[0].simple_query(""What is the food that is to the left of the kid called?"")"
11820726,"What device is the desk in front of, a television or a printer?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    for desk_patch in desk_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center > desk_patch.horizontal_center:
                is_printer = (device_patch.simple_query(""Is the device a printer?"") == ""yes"")
                is_tv = (device_patch.simple_query(""Is the device a television?"") == ""yes"")
                if is_printer:
                    return ""printer""
                elif is_tv:
                    return ""tv""
    return ""no"""
18114588,Do you see a helmet there?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see a helmet there?"")"
11950874,What animal is standing on the ground?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    for animal_patch in animal_patches:
        is_on_ground = animal_patch.verify_property(""animal"", ""on the ground"")
        if is_on_ground:
            return animal_patch.simple_query(""What animal is standing on the ground?"") # crop would include the ground so keep it in the query
    # If no animal is on the ground, pick the first animal
    return animal_patches[0].simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")"
16184942,Does that grass look brown and short?," # grass is a property
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Does that grass look brown and short?"")
    return grass_patches[0].verify_property(""grass"", ""brown and short"")"
6312238,Is the hydrant to the left of the car?," 
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    # Question assumes only one hydrant patch
    if len(hydrant_patches) == 0:
        # If no hydrant is found, query the image directly
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    for hydrant_patch in hydrant_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if car_patch.horizontal_center > hydrant_patch.horizontal_center:
                return ""yes""
    return ""no"""
16646227,On which side of the picture is the gray car?," # gray car is the car with gray color
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    for car_patch in car_patches:
        if car_patch.verify_property(""car"", ""gray""):
            if car_patch.vertical_center < image_patch.vertical_center:
                return ""bottom""
            else:
                return ""top"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?," # ball is to the right of the person
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for ball_patch in ball_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.simple_query(""Is the person wearing sneakers?"") == ""yes"":
                if ball_patch.horizontal_center > person_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""no"""
3443704,What is the woman wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    for woman_patch in woman_patches:
        return woman_patch.simple_query(""What is the woman wearing?"")"
19313572,What is the color of the tent to the left of the vehicles?," # tent is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")"
10885675,What is the toilet seat made of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the toilet seat made of?"")
    for toilet_patch in toilet_patches:
        is_toilet_seat = toilet_patch.verify_property(""toilet"", ""seat"")
        if is_toilet_seat:
            return toilet_patch.simple_query(""What is the toilet seat made of?"") # crop would include the seat so keep it in the query
    # If no toilet seat is found, pick the first toilet
    return toilet_patches[0].simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""resting on the blanket""):
            return animal_patch.simple_query(""What animal is resting on the blanket?"") # crop would include the blanket so keep it in the query
    # If no animal is resting on the blanket, pick the first animal
    return animal_patches[0].simple_query(""What animal is resting on the blanket?"")"
14561612,What color do you think the bikini that the woman is wearing is?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bikini_patches = image_patch.find(""bikini"")
    # Question assumes only one bikini patch
    if len(bikini_patches) == 0:
        # If no bikini is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    return bikini_patches[0].simple_query(""What color do you think the bikini that the woman is wearing is?"")"
6587755,Are both the room and the bowl the same color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    # Question assumes only one room patch
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""Are both the room and the bowl the same color?"")
    for room_patch in room_patches:
        bowl_patches = image_patch.find(""bowl"")
        for bowl_patch in bowl_patches:
            if room_patch.verify_property(""room"", ""color"") == bowl_patch.verify_property(""bowl"", ""color""):
                return ""yes""
    return ""no"""
4479543,Is the barn white or brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the barn white or brown?"")"
972522,Does the box look white or brown?," # box is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the box look white or brown?"")"
3948528,What is the bowl made of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What is the bowl made of?"")
    for bowl_patch in bowl_patches:
        is_made_of_plastic = (bowl_patch.simple_query(""Is the bowl made of plastic?"") == ""yes"")
        if is_made_of_plastic:
            return bowl_patch.simple_query(""What is the bowl made of?"") # crop would include the plastic so keep it in the query
    # If no bowl is made of plastic, pick the first bowl
    return bowl_patches[0].simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?," # gray or red
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    for bench_patch in bench_patches:
        rock_patches = image_patch.find(""rock"")
        for rock_patch in rock_patches:
            if rock_patch.horizontal_center > bench_patch.horizontal_center:
                return bench_patch.best_text_match([""gray"", ""red""])
    return ""no"""
866459,On which side is the couch?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    if couch_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
8614812,Is the person that is playing wearing shorts?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Is the person that is playing wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, pick the first person
    return person_patches[0].simple_query(""Is the person that is playing wearing shorts?"")"
167438,What is wearing the ground?," # ground is a noun
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?," # wooden furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wooden""):
            return furniture_patch.simple_query(""Which kind of furniture is wooden?"")"
1042377,Who is standing beside the person that is wearing a dress?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    for person_patch in person_patches:
        is_wearing_dress = (person_patch.simple_query(""Is the person wearing a dress?"") == ""yes"")
        if is_wearing_dress:
            return person_patch.simple_query(""Who is standing beside the person that is wearing a dress?"") # crop would include the dress so keep it in the query
    # If no person is wearing a dress, pick the first person
    return person_patches[0].simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    skis_patches = image_patch.find(""long skis"")
    # Question assumes only one long skis patch
    if len(skis_patches) == 0:
        # If no long skis are found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    for skis_patch in skis_patches:
        return skis_patch.simple_query(""How fat are the long skis?"")"
2211743,Is the sky clear or overcast?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky clear or overcast?"")
    if sky_patches[0].verify_property(""sky"", ""clear""):
        return ""clear""
    else:
        return ""overcast"""
4224772,Are there bottles to the left of the pencils in the bottom part of the image?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # Question assumes only one bottle patch
    if len(image_patch.find(""bottle"")) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
    for bottle_patch in image_patch.find(""bottle""):
        # Question assumes only one pencil patch
        if len(image_patch.find(""pencil"")) == 0:
            # If no pencil is found, query the image directly
            return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
        for pencil_patch in image_patch.find(""pencil""):
            if pencil_patch.vertical_center < image_patch.vertical_center and bottle_patch.horizontal_center < pencil_patch.horizontal_center:
                return ""yes""
    return ""no"""
15478302,Is there any dark door or window in the image?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    dark_patches = image_patch.find(""dark"")
    # Question assumes only one dark patch
    if len(dark_patches) == 0:
        # If no dark is found, query the image directly
        return image_patch.simple_query(""Is there any dark door or window in the image?"")
    for dark_patch in dark_patches:
        if dark_patch.verify_property(""dark"", ""door"") or dark_patch.verify_property(""dark"", ""window""):
            return ""yes""
    return ""no"""
18414234,Do you see either a knife or a chair in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    # Question assumes only one knife patch
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Do you see either a knife or a chair in the picture?"")
    for knife_patch in knife_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if chair_patch.horizontal_center > knife_patch.horizontal_center:
                return ""yes""
    return ""no"""
19779815,Is the book red or yellow?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the book red or yellow?"")"
7257283,Are there men to the left of the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""men"")
    # Question assumes only one men patch
    if len(men_patches) == 0:
        # If no men is found, query the image directly
        return image_patch.simple_query(""Are there men to the left of the picture?"")
    for men_patch in men_patches:
        if men_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6621625,On which side of the picture is the bench?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    if bench_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19311589,Are there both fences and horses in this picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    for device_patch in device_patches:
        container_patches = image_patch.find(""container"")
        # Question assumes only one container patch
        if len(container_patches) == 0:
            # If no container is found, query the image directly
            return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
        for container_patch in container_patches:
            person_patches = image_patch.find(""person"")
            # Question assumes only one person patch
            if len(person_patches) == 0:
                # If no person is found, query the image directly
                return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
            for person_patch in person_patches:
                if person_patch.horizontal_center < container_patch.horizontal_center:
                    if device_patch.horizontal_center > container_patch.horizontal_center:
                        return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"") # crop would include the container so keep it in the query
    return ""no"""
171031333,Do you see blankets in the picture that are not black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    blankets_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blankets_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Do you see blankets in the picture that are not black?"")
    for blanket_patch in blankets_patches:
        if blanket_patch.verify_property(""blanket"", ""black"") == False:
            return ""yes""
    return ""no"""
16695341,What is the fence made of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    for fence_patch in fence_patches:
        return fence_patch.simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?," # image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Do you see any bottle or child there?"")
    for bottle_patch in bottle_patches:
        child_patches = image_patch.find(""child"")
        for child_patch in child_patches:
            if child_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""yes""
    return ""no"""
5111363,Are there chairs or tables that are not blue?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    is_blue = image_patch.exists(""blue"")
    return bool_to_yesno(is_chair or is_table) and not is_blue"
9230971,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?," # hair is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the hair have short length and white color?"")"
4822200,Do you see any lettuce on the food with the meat?," # lettuce is a vegetable
    image_patch = ImagePatch(image)
    meat_patches = image_patch.find(""meat"")
    # Question assumes only one meat patch
    if len(meat_patches) == 0:
        # If no meat is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    for meat_patch in meat_patches:
        lettuce_patches = image_patch.find(""lettuce"")
        for lettuce_patch in lettuce_patches:
            if lettuce_patch.horizontal_center > meat_patch.horizontal_center:
                return ""yes""
    return ""no"""
3726666,What device is to the left of the curtain that is to the left of the glasses?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    for curtain_patch in curtain_patches:
        glasses_patches = image_patch.find(""glasses"")
        # Question assumes only one glasses patch
        if len(glasses_patches) == 0:
            return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
        for glasses_patch in glasses_patches:
            device_patches = image_patch.find(""device"")
            # Question assumes only one device patch
            if len(device_patches) == 0:
                return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
            for device_patch in device_patches:
                if device_patch.horizontal_center < curtain_patch.horizontal_center:
                    return device_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")"
9954849,What kind of furniture is it?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is it?"")
    return furniture_patches[0].simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_red_train = image_patch.exists(""red train"")
    is_red_bus = image_patch.exists(""red bus"")
    return bool_to_yesno(is_red_train or is_red_bus)"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?," # vegetable, crate, lettuce
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    for vegetable_patch in vegetable_patches:
        crate_patches = image_patch.find(""crate"")
        # Question assumes only one crate patch
        if len(crate_patches) == 0:
            return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
        for crate_patch in crate_patches:
            if vegetable_patch.horizontal_center < crate_patch.horizontal_center:
                lettuce_patches = image_patch.find(""lettuce"")
                # Question assumes only one lettuce patch
                if len(lettuce_patches) == 0:
                    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
                for lettuce_patch in lettuce_patches:
                    if vegetable_patch.vertical_center < lettuce_patch.vertical_center:
                        return vegetable_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")"
623393,"What type of clothing is tan, the hat or the vest?"," # tan is a color, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")"
6436448,Is the color of the skirt the same as the scarf?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    for skirt_patch in skirt_patches:
        scarf_patches = image_patch.find(""scarf"")
        for scarf_patch in scarf_patches:
            if bool_to_yesno(skirt_patch.verify_property(""skirt"", ""color"") == scarf_patch.verify_property(""scarf"", ""color"")):
                return ""yes""
    return ""no"""
3303313,Is the blanket under a cat?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is the blanket under a cat?"")
    for blanket_patch in blanket_patches:
        cat_patches = image_patch.find(""cat"")
        for cat_patch in cat_patches:
            if cat_patch.lower > blanket_patch.lower:
                return ""yes""
    return ""no"""
443663,What color is the picture?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?," 
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes one umbrella patch
    if len(umbrella_patches) == 0:
        return ""no""
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1885406,What is the toy on the bed?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What is the toy on the bed?"")
    for toy_patch in toy_patches:
        is_on_bed = (toy_patch.simple_query(""Is the toy on the bed?"") == ""yes"")
        if is_on_bed:
            return toy_patch.simple_query(""What is the toy on the bed?"") # crop would include the bed so keep it in the query
    # If no toy is on the bed, pick the first toy
    return toy_patches[0].simple_query(""What is the toy on the bed?"")"
5557965,On which side is the bag?," # bag is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the bag?"")"
4325825,On which side is the banana?," # banana is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the banana?"")"
3196355,What does the batter hold?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    for batter_patch in batter_patches:
        is_holding = (batter_patch.simple_query(""Is the batter holding something?"") == ""yes"")
        if is_holding:
            return batter_patch.simple_query(""What does the batter hold?"") # crop would include the object so keep it in the query
    # If no batter is holding anything, pick the first batter
    return batter_patches[0].simple_query(""What does the batter hold?"")"
14470748,Who wears a jacket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for person_patch in person_patches:
        is_wearing_jacket = (person_patch.simple_query(""Is the person wearing a jacket?"") == ""yes"")
        if is_wearing_jacket:
            return person_patch.simple_query(""Who wears a jacket?"") # crop would include the jacket so keep it in the query
    # If no person is wearing a jacket, pick the first person
    return person_patches[0].simple_query(""Who wears a jacket?"")"
16537736,Are there any houses behind the shrubs?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there any houses behind the shrubs?"")"
1129541,What piece of furniture is made of wood?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        is_made_of_wood = furniture_patch.verify_property(""furniture"", ""made of wood"")
        if is_made_of_wood:
            return furniture_patch.simple_query(""What piece of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""What piece of furniture is made of wood?"")"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    is_wearing_hat = (man_patch.simple_query(""Is the man wearing a hat?"") == ""yes"")
    if is_wearing_hat:
        racket_patches = image_patch.find(""racket"")
        # Question assumes only one racket patch
        if len(racket_patches) == 0:
            # If no racket is found, query the image directly
            return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
        for racket_patch in racket_patches:
            if racket_patch.horizontal_center > man_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
    else:
        return ""no"""
12416703,Where is that cat?," # cat is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is that cat?"")"
15603088,The animal to the right of the envelope is lying on what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    for animal_patch in animal_patches:
        envelope_patches = image_patch.find(""envelope"")
        for envelope_patch in envelope_patches:
            if envelope_patch.horizontal_center > animal_patch.horizontal_center:
                return animal_patch.simple_query(""The animal to the right of the envelope is lying on what?"") # crop would include the envelope so keep it in the query
    # If no animal is to the right of the envelope, pick the first animal
    return animal_patches[0].simple_query(""The animal to the right of the envelope is lying on what?"")"
5329077,Is the man on a bench?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on a bench?"")
    for man_patch in man_patches:
        bench_patches = image_patch.find(""bench"")
        for bench_patch in bench_patch:
            if bench_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
1945705,What kind of device is to the left of the device that looks silver and gray?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    for device_patch in device_patches:
        if device_patch.simple_query(""Is the device silver and gray?"") == ""yes"":
            for device_patch2 in device_patches:
                if device_patch2.horizontal_center < device_patch.horizontal_center:
                    return device_patch2.simple_query(""What kind of device is to the left of the device that looks silver and gray?"") # crop would include the silver and gray so keep it in the query
    # If no device is silver and gray, pick the first device
    return device_patches[0].simple_query(""What kind of device is to the left of the device that looks silver and gray?"")"
17520003,What vehicle is to the right of the pine tree?," # vehicle is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")"
1259983,Who is wearing pants?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    for person_patch in person_patches:
        is_wearing_pants = (person_patch.simple_query(""Is the person wearing pants?"") == ""yes"")
        if is_wearing_pants:
            return person_patch.simple_query(""Who is wearing pants?"") # crop would include the pants so keep it in the query
    # If no person is wearing pants, pick the first person
    return person_patches[0].simple_query(""Who is wearing pants?"")"
6413378,Is there a black keyboard or camera?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_black_keyboard = image_patch.verify_property(""keyboard"", ""black"")
    is_black_camera = image_patch.verify_property(""camera"", ""black"")
    return bool_to_yesno(is_black_keyboard or is_black_camera)"
947305,Is the sunny water blue and high?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the sunny water blue and high?"")
    for water_patch in water_patches:
        is_blue = water_patch.verify_property(""water"", ""blue"")
        is_high = water_patch.verify_property(""water"", ""high"")
        if is_blue and is_high:
            return ""yes""
    return ""no"""
4367817,What type of animal in this scene is brown?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""brown""):
            return animal_patch.simple_query(""What type of animal in this scene is brown?"") # crop would include the animal so keep it in the query
    # If no animal is brown, pick the first animal
    return animal_patches[0].simple_query(""What type of animal in this scene is brown?"")"
15485572,What is the vegetable on the hot dog with the cheese?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    for hot_dog_patch in hot_dog_patches:
        cheese_patches = image_patch.find(""cheese"")
        # Question assumes only one cheese patch
        if len(cheese_patches) == 0:
            return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
        for cheese_patch in cheese_patches:
            vegetable_patches = image_patch.find(""vegetable"")
            # Question assumes only one vegetable patch
            if len(vegetable_patches) == 0:
                return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
            for vegetable_patch in vegetable_patches:
                if vegetable_patch.horizontal_center > hot_dog_patch.horizontal_center and vegetable_patch.horizontal_center < cheese_patch.horizontal_center:
                    return vegetable_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")"
12661142,What is the appliance in the kitchen called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    for appliance_patch in appliance_patches:
        return appliance_patch.simple_query(""What is the appliance in the kitchen called?"")"
41012743,The arrow is on what?," # arrow is a relational verb
    image_patch = ImagePatch(image)
    arrow_patches = image_patch.find(""arrow"")
    # Question assumes only one arrow patch
    if len(arrow_patches) == 0:
        # If no arrow is found, query the image directly
        return image_patch.simple_query(""The arrow is on what?"")
    for arrow_patch in arrow_patches:
        is_on = (arrow_patch.simple_query(""Is the arrow on something?"") == ""yes"")
        if is_on:
            return arrow_patch.simple_query(""The arrow is on what?"") # crop would include the object so keep it in the query
    # If no arrow is on something, pick the first arrow
    return arrow_patches[0].simple_query(""The arrow is on what?"")"
4777414,What color is the bicycle in the bottom of the photo?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")"
1185988,What is the device on top of the table that is to the right of the trashcan?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    for device_patch in device_patches:
        table_patches = image_patch.find(""table"")
        for table_patch in table_patches:
            trashcan_patches = image_patch.find(""trashcan"")
            for trashcan_patch in trashcan_patches:
                if trashcan_patch.horizontal_center < table_patch.horizontal_center and table_patch.vertical_center < device_patch.vertical_center:
                    return device_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")"
13582968,Was granite used to make that floor?," # image_patch = ImagePatch(image)
    # contains a property (made of), so ask directly
    return image_patch.simple_query(""Was granite used to make that floor?"")"
6235273,Are there women in the photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(women_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Are there women in the photo?"")
    return ""yes"""
5377974,What is the girl playing with?," # girl is the subject, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the girl playing with?"")"
51037065,On which side of the image is the fridge?," # fridge is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the image is the fridge?"")"
5299477,Which kind of bag does the girl carry?," # girl is a predicate
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    for girl_patch in girl_patches:
        bag_patches = image_patch.find(""bag"")
        for bag_patch in bag_patches:
            if bag_patch.simple_query(""Is the bag being carried by the girl?"") == ""yes"":
                return bag_patch.simple_query(""Which kind of bag does the girl carry?"")"
15135617,Is the white dog on a bench?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog on a bench?"")
    for dog_patch in dog_patches:
        if dog_patch.simple_query(""Is the dog white?"") == ""yes"":
            bench_patches = image_patch.find(""bench"")
            # Question assumes only one bench patch
            if len(bench_patches) == 0:
                # If no bench is found, query the image directly
                return image_patch.simple_query(""Is the white dog on a bench?"")
            for bench_patch in bench_patches:
                if dog_patch.vertical_center > bench_patch.vertical_center:
                    return ""yes""
    return ""no"""
1111583,Is the male person to the right of a person?," # male person is a predicate
    image_patch = ImagePatch(image)
    male_person_patches = image_patch.find(""male person"")
    # Question assumes only one male person patch
    if len(male_person_patches) == 0:
        # If no male person is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_person_patch in male_person_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > male_person_patch.horizontal_center:
                return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?," # window and door are both objects
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
15610844,What kind of place is shown?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")"
11869032,Is the banana below a bird?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Is the banana below a bird?"")
    for banana_patch in banana_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if bird_patch.vertical_center > banana_patch.vertical_center:
                return ""yes""
    return ""no"""
9878360,What color is the vehicle to the left of the fence?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    for vehicle_patch in vehicle_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center > vehicle_patch.horizontal_center:
                return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"")"
481765,Are there either any buses or trains in the image?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    for fence_patch in fence_patches:
        return fence_patch.simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes only one traffic cone patch
    if len(traffic_cone_patches) == 0:
        return ""no""
    for traffic_cone_patch in traffic_cone_patches:
        if traffic_cone_patch.horizontal_center > man_patch.horizontal_center:
            cap_patches = image_patch.find(""cap"")
            # Question assumes only one cap patch
            if len(cap_patches) == 0:
                return ""no""
            for cap_patch in cap_patches:
                if cap_patch.horizontal_center > man_patch.horizontal_center:
                    return ""yes""
    return ""no"""
11981238,What is common to the blazer and the suit?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    # Question assumes only one blazer patch
    if len(blazer_patches) == 0:
        # If no blazer is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    for blazer_patch in blazer_patches:
        suit_patches = image_patch.find(""suit"")
        # Question assumes only one suit patch
        if len(suit_patches) == 0:
            return image_patch.simple_query(""What is common to the blazer and the suit?"")
        for suit_patch in suit_patches:
            common_patch = blazer_patch.intersection(suit_patch)
            if common_patch is not None:
                return common_patch.simple_query(""What is common to the blazer and the suit?"")"
16245,Is the shirt white or green?," # shirt is a relational verb
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    for shirt_patch in shirt_patches:
        is_white = shirt_patch.verify_property(""shirt"", ""white"")
        is_green = shirt_patch.verify_property(""shirt"", ""green"")
        if is_white or is_green:
            return ""yes""
    return ""no"""
2595103,"In which part of the image are the cars, the bottom or the top?"," # image_patch = ImagePatch(image)
    cars_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(cars_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if cars_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""How does the sand look, dry or wet?"")
    return sand_patches[0].simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?," # banana is on the table
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    for banana_patch in banana_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if fruit_patch.horizontal_center > banana_patch.horizontal_center:
                return ""yes""
    return ""no"""
6376614,What color is the car in the middle?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    return car_patches[0].simple_query(""What color is the car in the middle?"")"
712063,What's the lamp made of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What's the lamp made of?"")
    for lamp_patch in lamp_patches:
        is_made_of_plastic = (lamp_patch.simple_query(""Is the lamp made of plastic?"") == ""yes"")
        if is_made_of_plastic:
            return lamp_patch.simple_query(""What's the lamp made of?"") # crop would include the plastic so keep it in the query
    # If no lamp is made of plastic, pick the first lamp
    return lamp_patches[0].simple_query(""What's the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    for furniture_patch in furniture_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > furniture_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is to the right of the pillow, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is to the right of the pillow?"")"
9647343,What type of material is the patio made of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?," # suit is a noun
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the color of the clouds in the sky?"")"
9843309,Do the flowers look orange?," # orange is a color
    image_patch = ImagePatch(image)
    flowers_patches = image_patch.find(""flowers"")
    # Question assumes only one flower patch
    if len(flowers_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    for flowers_patch in flowers_patches:
        return flowers_patch.verify_property(""flowers"", ""orange"")"
618996,Is there a chair or a bed in this image?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?," 
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    for umbrella_patch in umbrella_patches:
        truck_patches = image_patch.find(""truck"")
        for truck_patch in truck_patches:
            if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
                return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = man_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return ""no""
    for pants_patch in pants_patches:
        return pants_patch.simple_query(""What color are the pants the man is wearing?"")"
551601,Are there any pillows or chairs in the image?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there women to the left of the person with the bag?"")"
5925408,What is the bike in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    beds_patches = image_patch.find(""beds"")
    # Question assumes only one beds patch
    if len(beds_patches) == 0:
        # If no beds are found, query the image directly
        return image_patch.simple_query(""Are there either beds or desks in the picture?"")
    for beds_patch in beds_patches:
        desks_patches = image_patch.find(""desks"")
        for desks_patch in desks_patches:
            if desks_patch.horizontal_center > beds_patch.horizontal_center:
                return ""yes""
    return ""no"""
13778498,What type of vehicle is behind the green tree?," # vehicle is a noun
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is behind the green tree?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle behind the green tree?"") == ""yes"":
            return vehicle_patch.simple_query(""What type of vehicle is behind the green tree?"")"
41019603,What is the child standing on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child standing on?"")
    for child_patch in child_patches:
        is_standing_on = (child_patch.simple_query(""Is the child standing on something?"") == ""yes"")
        if is_standing_on:
            return child_patch.simple_query(""What is the child standing on?"") # crop would include the object so keep it in the query
    # If no child is standing on something, pick the first child
    return child_patches[0].simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?," # wooden item of furniture
    image_patch = ImagePatch(image)
    wooden_item_patches = image_patch.find(""wooden item of furniture"")
    # Question assumes only one wooden item patch
    if len(wooden_item_patches) == 0:
        # If no wooden item is found, query the image directly
        return image_patch.simple_query(""What is the wooden item of furniture called?"")
    return wooden_item_patches[0].simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    for man_patch in man_patches:
        woman_patches = image_patch.find(""woman"")
        # Question assumes only one woman patch
        if len(woman_patches) == 0:
            return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
        for woman_patch in woman_patches:
            if man_patch.horizontal_center < woman_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
1316363,Who is wearing the shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    for fence_patch in fence_patches:
        return fence_patch.simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    for kite_patch in kite_patches:
        if kite_patch.verify_property(""kite"", ""triangular""):
            return kite_patch.simple_query(""What color is the kite that looks triangular?"") # crop would include the kite so keep it in the query
    # If no kite is triangular, pick the first kite
    return kite_patches[0].simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is drinking?"")
    for person_patch in person_patches:
        is_drinking = (person_patch.simple_query(""Is the person drinking?"") == ""yes"")
        if is_drinking:
            return person_patch.simple_query(""Who is drinking?"") # crop would include the drink so keep it in the query
    # If no person is drinking, pick the first person
    return person_patches[0].simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    for building_patch in building_patches:
        tree_patches = image_patch.find(""tree"")
        for tree_patch in tree_patches:
            if tree_patch.horizontal_center > building_patch.horizontal_center:
                return building_patch.best_text_match([""white"", ""brown""])
    return ""no"""
5749240,Are the glove and the undershirt both black?," # glove and undershirt are both black
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    for glove_patch in glove_patches:
        undershirt_patches = image_patch.find(""undershirt"")
        for undershirt_patch in undershirt_patches:
            if glove_patch.verify_property(""glove"", ""black"") and undershirt_patch.verify_property(""undershirt"", ""black""):
                return ""yes""
    return ""no"""
18573157,Is the juice in a cup?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    # Question assumes only one juice patch
    if len(juice_patches) == 0:
        # If no juice is found, query the image directly
        return image_patch.simple_query(""Is the juice in a cup?"")
    for juice_patch in juice_patches:
        cup_patches = image_patch.find(""cup"")
        for cup_patch in cup_patches:
            if cup_patch.simple_query(""Is the cup containing juice?"") == ""yes"":
                return ""yes""
    return ""no"""
3445929,Is the brown horse on the right side of the photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    for horse_patch in horse_patches:
        if horse_patch.color == ""brown"":
            if horse_patch.horizontal_center > image_patch.horizontal_center:
                return ""yes""
    return ""no"""
16541709,Where is the grass?," # grass is a noun
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")"
15764335,Are there any dogs on the tan sand?," 
    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""Are there any dogs on the tan sand?"")
    for sand_patch in sand_patches:
        dog_patches = image_patch.find(""dog"")
        for dog_patch in dog_patches:
            if dog_patch.lower < sand_patch.lower and dog_patch.upper > sand_patch.lower:
                return ""yes""
    return ""no"""
1478089,Are the door and the garage door made of the same material?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    for door_patch in door_patches:
        garage_door_patches = image_patch.find(""garage door"")
        for garage_door_patch in garage_door_patches:
            if door_patch.verify_property(""door"", ""material"") == garage_door_patch.verify_property(""garage door"", ""material""):
                return ""yes""
    return ""no"""
1250685,Was this picture taken in a bathroom or at a dining room?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bathroom_patches = image_patch.find(""bathroom"")
    # Question assumes only one bathroom patch
    if len(bathroom_patches) == 0:
        # If no bathroom is found, query the image directly
        return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"")
    for bathroom_patch in bathroom_patches:
        dining_room_patches = image_patch.find(""dining room"")
        for dining_room_patch in dining_room_patches:
            if dining_room_patch.vertical_center > bathroom_patch.vertical_center:
                return ""dining room""
    return ""bathroom"""
10436844,Is the zebra's nose soft and brown?," # zebra's nose is a specific part of the zebra
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    for zebra_patch in zebra_patches:
        nose_patch = zebra_patch.crop(zebra_patch.left, zebra_patch.lower, zebra_patch.right, zebra_patch.upper - 10)
        is_soft = nose_patch.verify_property(""nose"", ""soft"")
        is_brown = nose_patch.verify_property(""nose"", ""brown"")
        if is_soft and is_brown:
            return ""yes""
    return ""no"""
10683765,Does the shirt have blue color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    shirts_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirts_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return bool_to_yesno(shirts_patches[0].verify_property(""shirt"", ""blue""))"
1593352,Do the draperies look white and striped?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""drapery"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    return drapery_patches[0].verify_property(""drapery"", ""white and striped"")"
16553304,Are the trunks both long and wide?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    trunks_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunks_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    for trunk_patch in trunks_patches:
        is_long = trunk_patch.verify_property(""trunk"", ""long"")
        is_wide = trunk_patch.verify_property(""trunk"", ""wide"")
        if is_long and is_wide:
            return ""yes""
    return ""no"""
7165102,Is the car on the left of the photo?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the car on the left of the photo?"")"
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?," # banana that looks yellow and green
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for banana_patch in banana_patches:
        if banana_patch.verify_property(""banana"", ""yellow and green"") and banana_patch.verify_property(""banana"", ""short""):
            return ""yes""
    return ""no"""
19279872,What is the man to the right of the helmet wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    for man_patch in man_patches:
        helmet_patches = image_patch.find(""helmet"")
        for helmet_patch in helmet_patches:
            if helmet_patch.horizontal_center > man_patch.horizontal_center:
                return man_patch.simple_query(""What is the man to the right of the helmet wearing?"") # crop would include the helmet so keep it in the query
    # If no man is wearing a helmet, pick the first man
    return man_patches[0].simple_query(""What is the man to the right of the helmet wearing?"")"
4285513,What is the color of the floor?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor?"")
    return floor_patches[0].verify_property(""floor"", ""color"")"
3974266,Do the trousers look tan?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return trousers_patches[0].verify_property(""trousers"", ""tan"")"
11595009,What are the devices to the right of the device that is to the right of the remote control?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    remote_control_patch = remote_control_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > remote_control_patch.horizontal_center:
            return device_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"") # crop would include the device so keep it in the query
    # If no device is found, query the image directly
    return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")"
6183000,Are there nightstands or beds?," # nightstand is a bed
    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_nightstand or is_bed)"
14143982,Is it an outdoors scene?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it an outdoors scene?"")"
6123160,Are the speakers to the left of a Wii controller?," 
    image_patch = ImagePatch(image)
    speakers_patches = image_patch.find(""speakers"")
    # Question assumes only one speaker patch
    if len(speakers_patches) == 0:
        # If no speaker is found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    for speaker_patch in speakers_patches:
        wii_patches = image_patch.find(""wii controller"")
        for wii_patch in wii_patches:
            if wii_patch.horizontal_center < speaker_patch.horizontal_center:
                return ""yes""
    return ""no"""
3681634,Is the plastic fork in the top or in the bottom part of the photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")"
13629530,What is the vehicle on the street?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""no""
    for hat_patch in hat_patches:
        if hat_patch.simple_query(""What color is the hat the man is in?"") == ""blue"":
            return ""blue""
    return ""no"""
1849976,What vegetables are to the left of the spoon?," # spoon is a noun
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    for spoon_patch in spoon_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < spoon_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetables are to the left of the spoon?"")"
14827816,Is the statue made of bronze or stone?," # bronze or stone
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    for statue_patch in statue_patches:
        is_bronze = statue_patch.verify_property(""statue"", ""bronze"")
        is_stone = statue_patch.verify_property(""statue"", ""stone"")
        if is_bronze or is_stone:
            return ""yes""
    return ""no"""
857204,What's the woman wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    for woman_patch in woman_patches:
        return woman_patch.simple_query(""What's the woman wearing?"")"
2201105,Is the ball pink?," # ball is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball pink?"")"
14616023,What piece of furniture are the cords in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture are the cords in front of?"")
    for furniture_patch in furniture_patches:
        cords_patches = image_patch.find(""cord"")
        for cords_patch in cords_patch:
            if cords_patch.horizontal_center > furniture_patch.horizontal_center:
                return cords_patch.simple_query(""What piece of furniture are the cords in front of?"") # crop would include the cord so keep it in the query
    # If no furniture is in front of the cord, pick the first furniture
    return furniture_patches[0].simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    for car_patch in car_patches:
        if car_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
16184856,What is the striped animal called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the striped animal called?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal striped?"") == ""yes"":
            return animal_patch.simple_query(""What is the striped animal called?"")"
1479068,Is it outdoors?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it outdoors?"")"
16155046,Is the dry grass below a zebra?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    dry_grass_patches = image_patch.find(""dry grass"")
    # Question assumes only one dry grass patch
    if len(dry_grass_patches) == 0:
        # If no dry grass is found, query the image directly
        return image_patch.simple_query(""Is the dry grass below a zebra?"")
    for dry_grass_patch in dry_grass_patches:
        zebra_patches = image_patch.find(""zebra"")
        for zebra_patch in zebra_patches:
            if zebra_patch.vertical_center < dry_grass_patch.vertical_center:
                return ""yes""
    return ""no"""
16515071,What is the person in the water wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    for person_patch in person_patches:
        is_wearing_swimwear = (person_patch.simple_query(""Is the person in the water wearing swimwear?"") == ""yes"")
        if is_wearing_swimwear:
            return person_patch.simple_query(""What is the person in the water wearing?"") # crop would include the swimwear so keep it in the query
    # If no person is wearing swimwear, pick the first person
    return person_patches[0].simple_query(""What is the person in the water wearing?"")"
161015042,Who is wearing the goggles?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the goggles?"")
    for person_patch in person_patches:
        is_wearing_goggles = (person_patch.simple_query(""Is the person wearing the goggles?"") == ""yes"")
        if is_wearing_goggles:
            return person_patch.simple_query(""Who is wearing the goggles?"") # crop would include the goggles so keep it in the query
    # If no person is wearing the goggles, pick the first person
    return person_patches[0].simple_query(""Who is wearing the goggles?"")"
19149868,What is pulled by the lady?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""What is pulled by the lady?"")
    for lady_patch in lady_patches:
        is_pulled_by_lady = (lady_patch.simple_query(""Is the lady pulling something?"") == ""yes"")
        if is_pulled_by_lady:
            return lady_patch.simple_query(""What is pulled by the lady?"") # crop would include the thing being pulled so keep it in the query
    # If no lady is pulling something, pick the first lady
    return lady_patches[0].simple_query(""What is pulled by the lady?"")"
5199994,What's the man wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What's the man wearing?"") # crop would include the shirt so keep it in the query"
19184475,Are the man glasses on the left side of the image?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    for man_patch in man_patches:
        glasses_patches = image_patch.find(""glasses"")
        for glasses_patch in glasses_patches:
            if glasses_patch.horizontal_center < man_patch.horizontal_center:
                return ""yes""
    return ""no"""
7149602,Is the shirt orange or blue?," # orange or blue
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    for shirt_patch in shirt_patches:
        is_orange = shirt_patch.verify_property(""shirt"", ""orange"")
        is_blue = shirt_patch.verify_property(""shirt"", ""blue"")
        if is_orange or is_blue:
            return ""yes""
    return ""no"""
19479555,What is the person to the right of the benches holding?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    for person_patch in person_patches:
        benches_patches = image_patch.find(""benches"")
        for bench_patch in benches_patches:
            if bench_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the benches holding?"") # crop would include the bench so keep it in the query
    # If no person is to the right of the benches, pick the first person
    return person_patches[0].simple_query(""What is the person to the right of the benches holding?"")"
19273393,Are there both a door and a window in this photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
6481656,What is the man doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What is the man doing?"")"
13127703,What kind of drink is to the left of the bottle the woman is pouring?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    drink_patches = image_patch.find(""drink"")
    # Question assumes only one drink patch
    if len(drink_patches) == 0:
        # If no drink is found, query the image directly
        return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    for drink_patch in drink_patches:
        is_left_of_bottle = (drink_patch.simple_query(""Is the drink to the left of the bottle the woman is pouring?"") == ""yes"")
        if is_left_of_bottle:
            return drink_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"") # crop would include the bottle so keep it in the query
    # If no drink is to the left of the bottle, pick the first drink
    return drink_patches[0].simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")"
2378018,What is the toilet in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the toilet in front of?"")
    for toilet_patch in toilet_patches:
        in_front_of_patches = image_patch.find(""in front of"")
        for in_front_of_patch in in_front_of_patches:
            return in_front_of_patch.simple_query(""What is the toilet in front of?"") # crop would include the in front of so keep it in the query
    # If no toilet is in front of, pick the first toilet
    return toilet_patches[0].simple_query(""What is the toilet in front of?"")"
8430841,Is the frisbee to the left of the guy?," 
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    for frisbee_patch in frisbee_patches:
        guy_patches = image_patch.find(""guy"")
        for guy_patch in guy_patches:
            if frisbee_patch.horizontal_center < guy_patch.horizontal_center:
                return ""yes""
    return ""no"""
18616818,The man is watching who?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is watching who?"")
    for man_patch in man_patches:
        # ask directly
        return man_patch.simple_query(""The man is watching who?"")"
179526,Is the white dog behind a girl?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog behind a girl?"")
    for dog_patch in dog_patches:
        if dog_patch.color == ""white"":
            girl_patches = image_patch.find(""girl"")
            # Question assumes only one girl patch
            if len(girl_patches) == 0:
                # If no girl is found, query the image directly
                return image_patch.simple_query(""Is the white dog behind a girl?"")
            for girl_patch in girl_patches:
                if girl_patch.horizontal_center > dog_patch.horizontal_center:
                    return ""yes""
    return ""no"""
21018827,Is the river murky and calm?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_murky = image_patch.verify_property(""river"", ""murky"")
    is_calm = image_patch.verify_property(""river"", ""calm"")
    return bool_to_yesno(is_murky and is_calm)"
3697449,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    for car_patch in car_patches:
        sign_patches = image_patch.find(""sign"")
        for sign_patch in sign_patches:
            if sign_patch.simple_query(""What do both the car and the sign have in common?"") == ""yes"":
                return sign_patch.simple_query(""What do both the car and the sign have in common?"") # crop would include the sign so keep it in the query
    # If no sign is found, query the image directly
    return image_patch.simple_query(""What do both the car and the sign have in common?"")"
11764476,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    for plate_patch in plate_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if plate_patch.vertical_center > furniture_patch.vertical_center:
                return furniture_patch.simple_query(""On what kind of furniture is the plate?"") # crop would include the plate so keep it in the query
    # If no furniture is found, pick the first furniture
    return furniture_patches[0].simple_query(""On what kind of furniture is the plate?"")"
61022361,What is the painting that is to the left of the clock hanging on?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")"
1527392,"What color is the fence, tan or black?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""tan""):
            return ""tan""
        elif fence_patch.verify_property(""fence"", ""black""):
            return ""black""
    return ""unknown"""
19229351,Do you see both bowls and carrots?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bowls_patches = image_patch.find(""bowls"")
    carrots_patches = image_patch.find(""carrots"")
    # Question assumes only one bowl patch and one carrot patch
    if len(bowls_patches) == 0 or len(carrots_patches) == 0:
        # If no bowl or carrot is found, query the image directly
        return image_patch.simple_query(""Do you see both bowls and carrots?"")
    return bool_to_yesno(bowls_patches[0].verify_property(""bowls"", ""carrots"") and carrots_patches[0].verify_property(""carrots"", ""bowls""))"
1297082,On which side is the silver fork?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    silver_fork_patches = image_patch.find(""silver fork"")
    # Question assumes only one silver fork patch
    if len(silver_fork_patches) == 0:
        # If no silver fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    for silver_fork_patch in silver_fork_patches:
        is_on_left = (silver_fork_patch.simple_query(""Is the silver fork on the left?"") == ""yes"")
        if is_on_left:
            return ""left""
        is_on_right = (silver_fork_patch.simple_query(""Is the silver fork on the right?"") == ""yes"")
        if is_on_right:
            return ""right""
    return ""center"""
16757832,Are there any blue helmets or napkins?," # blue helmets or napkins
    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.exists(""blue helmet"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_blue_helmet or is_napkin)"
839816,"In which part of the photo is the racket, the top or the bottom?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12385226,Is there a mirror in the bathroom?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bathroom_patches = image_patch.find(""bathroom"")
    # Question assumes only one bathroom patch
    if len(bathroom_patches) == 0:
        # If no bathroom is found, query the image directly
        return image_patch.simple_query(""Is there a mirror in the bathroom?"")
    for bathroom_patch in bathroom_patches:
        mirror_patches = image_patch.find(""mirror"")
        for mirror_patch in mirror_patches:
            if mirror_patch.lower < bathroom_patch.lower and mirror_patch.upper > bathroom_patch.lower:
                return ""yes""
    return ""no"""
18720852,Are there either blankets or tents in this picture?," # image_patch = ImagePatch(image)
    blankets_patches = image_patch.find(""blanket"")
    tents_patches = image_patch.find(""tent"")
    # Question assumes only one blanket patch
    if len(blankets_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Are there either blankets or tents in this picture?"")
    for blanket_patch in blankets_patches:
        if blanket_patch.simple_query(""Is the blanket blue?"") == ""yes"":
            return ""yes""
    # If no blanket is found, query the image directly
    return image_patch.simple_query(""Are there either blankets or tents in this picture?"")"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?," # left, right, left
    image_patch = ImagePatch(image)
    cardboard_patches = image_patch.find(""cardboard box"")
    # Question assumes only one cardboard patch
    if len(cardboard_patches) == 0:
        # If no cardboard box is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    for cardboard_patch in cardboard_patches:
        woman_patches = image_patch.find(""woman"")
        # Question assumes only one woman patch
        if len(woman_patches) == 0:
            return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center < cardboard_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
19453453,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    if house_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the flowers that look red?"")"
15710688,Is the shirt short sleeved or sleeveless?," # shirt is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")"
5533952,What are the white wires connected to?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    wires_patches = image_patch.find(""wires"")
    # Question assumes only one wire patch
    if len(wires_patches) == 0:
        # If no wire is found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    for wire_patch in wires_patches:
        is_connected_to = wire_patch.simple_query(""What are the white wires connected to?"")
        if is_connected_to == ""light"":
            return ""light""
        elif is_connected_to == ""switch"":
            return ""switch""
        elif is_connected_to == ""bulb"":
            return ""bulb""
        elif is_connected_to == ""lamp"":
            return ""lamp""
        elif is_connected_to == ""lightbulb"":
            return ""lightbulb""
        elif is_connected_to == ""lightbulbs"":
            return ""lightbulbs""
        elif is_connected_to == ""lightbulbs"":
            return ""lightbulbs""
        elif is_connected_to == ""lightbulbs"":
            return ""lightbulbs""
        elif is_connected_to == ""lightbulbs"":
            return ""lightbulbs""
        elif is_connected_to == ""lightbulbs"":
            return ""lightbulbs""
        elif is_connected_to == ""lightbulbs"":
            return ""lightbulbs""
        elif is_connected_to == ""lightbulbs"":
            return ""lightbulbs""
        elif is_connected_to == ""lightbulbs"":
            return """
11313555,"What type of furniture is that, a table or a nightstand?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    for furniture_patch in furniture_patches:
        is_table = furniture_patch.verify_property(""furniture"", ""table"")
        is_nightstand = furniture_patch.verify_property(""furniture"", ""nightstand"")
        if is_table or is_nightstand:
            return furniture_patch.simple_query(""What type of furniture is that, a table or a nightstand?"") # crop would include the furniture so keep it in the query
    # If no furniture is a table or a nightstand, pick the first furniture
    return furniture_patches[0].simple_query(""What type of furniture is that, a table or a nightstand?"")"
10508893,What animals are in front of the trees?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animals_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animals_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animals are in front of the trees?"")
    for animal_patch in animals_patches:
        is_in_front_of_trees = (animal_patch.simple_query(""Is the animal in front of the trees?"") == ""yes"")
        if is_in_front_of_trees:
            return animal_patch.simple_query(""What animals are in front of the trees?"") # crop would include the trees so keep it in the query
    # If no animal is in front of the trees, pick the first animal
    return animals_patches[0].simple_query(""What animals are in front of the trees?"")"
14501997,What is the gate made of?," # gate is a noun
    image_patch = ImagePatch(image)
    gate_patches = image_patch.find(""gate"")
    # Question assumes only one gate patch
    if len(gate_patches) == 0:
        # If no gate is found, query the image directly
        return image_patch.simple_query(""What is the gate made of?"")
    return gate_patches[0].simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    for device_patch in device_patches:
        return device_patch.simple_query(""What color is the device on top of the table?"")"
181032044,Are these closed drawers?," # closed drawers
    image_patch = ImagePatch(image)
    drawers_patches = image_patch.find(""drawers"")
    # Question assumes only one drawer patch
    if len(drawers_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    for drawer_patch in drawers_patches:
        is_closed = drawer_patch.verify_property(""drawers"", ""closed"")
        if is_closed:
            return ""yes""
    return ""no"""
383,What kind of furniture is made of wood?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        is_made_of_wood = furniture_patch.verify_property(""furniture"", ""made of wood"")
        if is_made_of_wood:
            return furniture_patch.simple_query(""What kind of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is made of wood?"")"
101054962,What is the person by the bananas wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    for person_patch in person_patches:
        is_wearing_banana = (person_patch.simple_query(""Is the person by the bananas wearing a banana?"") == ""yes"")
        if is_wearing_banana:
            return person_patch.simple_query(""What is the person by the bananas wearing?"") # crop would include the banana so keep it in the query
    # If no person is wearing a banana, pick the first person
    return person_patches[0].simple_query(""What is the person by the bananas wearing?"")"
759165,What is the color of the tower in the middle of the picture?," # tower is a noun
    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    # Question assumes only one tower patch
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    return tower_patches[0].simple_query(""What is the color of the tower in the middle of the picture?"")"
10775539,Is this giraffe tall and white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_giraffe = image_patch.exists(""giraffe"")
    is_tall = image_patch.verify_property(""giraffe"", ""tall"")
    is_white = image_patch.verify_property(""giraffe"", ""white"")
    return bool_to_yesno(is_giraffe and is_tall and is_white)"
19981804,On which side of the photo is the colorful screen?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    colorful_screen_patches = image_patch.find(""colorful screen"")
    # Question assumes only one colorful screen patch
    if len(colorful_screen_patches) == 0:
        # If no colorful screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    if colorful_screen_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
7903654,Is the tap on the left side or on the right?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    if tap_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
6206183,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?," # assumes only one coat patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    return coat_patches[0].verify_property(""coat"", ""black"")"
13123207,Does the kite near the field look high and red?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    for kite_patch in kite_patches:
        if kite_patch.verify_property(""kite"", ""high"") and kite_patch.verify_property(""kite"", ""red""):
            return ""yes""
    return ""no"""
7740092,Are there any utensils in this picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    utensils_patches = image_patch.find(""utensils"")
    # Question assumes only one utensils patch
    if len(units_patches) == 0:
        # If no utensils is found, query the image directly
        return image_patch.simple_query(""Are there any utensils in this picture?"")
    return ""yes"""
8774975,What is around the guy?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    # Question assumes only one guy patch
    if len(guy_patches) == 0:
        # If no guy is found, query the image directly
        return image_patch.simple_query(""What is around the guy?"")
    for guy_patch in guy_patches:
        around_patches = image_patch.find(""around"")
        for around_patch in around_patches:
            if around_patch.horizontal_center > guy_patch.horizontal_center:
                return around_patch.simple_query(""What is around the guy?"") # crop would include the around so keep it in the query
    # If no around is found, pick the first around
    return around_patches[0].simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?," # banana is a fruit, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see bananas or cookies?"")"
14274506,Is the staircase different in color than the sky?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    # Question assumes only one staircase patch
    if len(staircase_patches) == 0:
        # If no staircase is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    for staircase_patch in staircase_patches:
        sky_patches = image_patch.find(""sky"")
        for sky_patch in sky_patches:
            if staircase_patch.verify_property(""staircase"", ""color"") != sky_patch.verify_property(""sky"", ""color""):
                return ""yes""
    return ""no"""
1605874,What color are the containers that are on the right?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center > image_patch.horizontal_center:
            return container_patch.simple_query(""What color are the containers that are on the right?"")"
12495781,Are the people to the right or to the left of the cone that is orange?," # orange cone
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    for people_patch in people_patches:
        cone_patches = image_patch.find(""cone"")
        for cone_patch in cone_patches:
            if cone_patch.simple_query(""Is the cone orange?"") == ""yes"":
                if people_patch.horizontal_center > cone_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""no"""
14165681,"What type of clothing is light, the sweater or the cap?"," # sweater or cap
    image_patch = ImagePatch(image)
    sweater_patches = image_patch.find(""sweater"")
    # Question assumes only one sweater patch
    if len(sweater_patches) == 0:
        # If no sweater is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    if sweater_patches[0].verify_property(""sweater"", ""light""):
        return ""sweater""
    else:
        cap_patches = image_patch.find(""cap"")
        # Question assumes only one cap patch
        if len(cap_patches) == 0:
            # If no cap is found, query the image directly
            return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
        if cap_patches[0].verify_property(""cap"", ""light""):
            return ""cap""
        else:
            return ""unknown"""
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    for chair_patch in chair_patches:
        jeans_patches = image_patch.find(""jeans"")
        # Question assumes only one jeans patch
        if len(jeans_patches) == 0:
            return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
        for jeans_patch in jeans_patches:
            if jeans_patch.vertical_center > chair_patch.vertical_center:
                return ""right""
            else:
                return ""left"""
5617223,"What color is the container to the left of the horse, green or silver?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    for container_patch in container_patches:
        is_green = container_patch.verify_property(""container"", ""green"")
        is_silver = container_patch.verify_property(""container"", ""silver"")
        if is_green or is_silver:
            return ""yes""
    return ""no"""
2428964,Is the water gray or teal?," # gray or teal
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    if water_patches[0].verify_property(""water"", ""gray""):
        return ""gray""
    else:
        return ""teal"""
19620769,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    if lamp_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""brown"") and animal_patch.verify_property(""animal"", ""tiny""):
            return ""yes""
    return ""no"""
5672532,Does that shirt look long sleeved?," # shirt is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does that shirt look long sleeved?"")"
6146439,Does the box look green?," # box is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the box look green?"")"
1910285,Is the white container on the left of the image?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center < image_patch.left:
            return ""yes""
    return ""no"""
13362134,Is that shower curtain to the left of a toilet?," 
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center < shower_curtain_patch.horizontal_center:
                return ""yes""
    return ""no"""
161060488,Is there any cabinet to the right of the stove?," 
    image_patch = ImagePatch(image)
    stove_patches = image_patch.find(""stove"")
    # Question assumes only one stove patch
    if len(stove_patches) == 0:
        # If no stove is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for stove_patch in stove_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > stove_patch.horizontal_center:
                return ""yes""
    return ""no"""
111055042,Is the chair on the right?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    for chair_patch in chair_patches:
        is_on_right = (chair_patch.simple_query(""Is the chair on the right?"") == ""yes"")
        if is_on_right:
            return chair_patch.simple_query(""Is the chair on the right?"") # crop would include the chair so keep it in the query
    # If no chair is on the right, pick the first chair
    return chair_patches[0].simple_query(""Is the chair on the right?"")"
151068,Which kind of clothing is white?," # white is a color, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of clothing is white?"")"
19387951,Is this place the forest or the garden?," # forest or garden
    image_patch = ImagePatch(image)
    forest_patches = image_patch.find(""forest"")
    # Question assumes only one forest patch
    if len(forest_patches) == 0:
        # If no forest is found, query the image directly
        return image_patch.simple_query(""Is this place the forest or the garden?"")
    for forest_patch in forest_patches:
        garden_patches = image_patch.find(""garden"")
        for garden_patch in garden_patches:
            if garden_patch.vertical_center > forest_patch.vertical_center:
                return ""forest""
    return ""garden"""
1781695,What's on the blanket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What's on the blanket?"")
    for blanket_patch in blanket_patches:
        return blanket_patch.simple_query(""What's on the blanket?"")"
17699779,Is she on a bed?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_on_bed = image_patch.exists(""bed"")
    if is_on_bed:
        return image_patch.simple_query(""Is she on a bed?"")
    else:
        return ""no"""
464441,"What piece of furniture is the blanket on, a bed or a sofa?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    for blanket_patch in blanket_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.simple_query(""Is the furniture a bed?"") == ""yes"":
                return ""bed""
            elif furniture_patch.simple_query(""Is the furniture a sofa?"") == ""yes"":
                return ""sofa""
    return ""unknown"""
9505496,Are the wires above a man?," 
    image_patch = ImagePatch(image)
    wires_patches = image_patch.find(""wires"")
    # Question assumes only one wire patch
    if len(wires_patches) == 0:
        # If no wire is found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    for wires_patch in wires_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.vertical_center > wires_patch.vertical_center:
                return ""yes""
    return ""no"""
4625512,What is the woman doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman doing?"")
    for woman_patch in woman_patches:
        return woman_patch.simple_query(""What is the woman doing?"") # crop would include the woman so keep it in the query"
9441941,Is the woman's hair red or black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    for woman_patch in woman_patches:
        is_red_hair = (woman_patch.simple_query(""Is the woman's hair red?"") == ""yes"")
        is_black_hair = (woman_patch.simple_query(""Is the woman's hair black?"") == ""yes"")
        if is_red_hair or is_black_hair:
            return ""yes""
    return ""no"""
2387432,What's on the table?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What's on the table?"")
    for table_patch in table_patches:
        table_patch_patches = image_patch.find(""table_patch"")
        for table_patch_patch in table_patch_patches:
            return table_patch_patch.simple_query(""What's on the table?"")"
10534717,What is the pillow on?," # pillow is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pillow on?"")"
19335685,"What fruits is the container behind of, apples or bananas?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")
    for container_patch in container_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if fruit_patch.horizontal_center > container_patch.horizontal_center:
                return fruit_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")"
3127817,The goat is standing in what?," # goat is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The goat is standing in what?"")"
1588567,Where does the man that to the right of the mirror sit?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    for man_patch in man_patches:
        mirror_patches = image_patch.find(""mirror"")
        for mirror_patch in mirror_patches:
            if mirror_patch.horizontal_center > man_patch.horizontal_center:
                return man_patch.simple_query(""Where does the man that to the right of the mirror sit?"") # crop would include the mirror so keep it in the query
    # If no man is to the right of the mirror, pick the first man
    return man_patches[0].simple_query(""Where does the man that to the right of the mirror sit?"")"
7399543,What is the floor made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the floor made of?"")
    return floor_patches[0].simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is the house behind of?"")
    for animal_patch in animal_patches:
        is_house_behind_animal = (animal_patch.simple_query(""Is the house behind of the animal?"") == ""yes"")
        if is_house_behind_animal:
            return animal_patch.simple_query(""What kind of animal is the house behind of?"") # crop would include the animal so keep it in the query
    # If no animal is behind the house, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is the house behind of?"")"
1174904,Is the cobblestone sidewalk both large and gray?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_large = image_patch.exists(""large"")
    is_gray = image_patch.exists(""gray"")
    return bool_to_yesno(is_large and is_gray)"
13375231,What is the lettuce on?," # lettuce is a noun
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What is the lettuce on?"")
    for lettuce_patch in lettuce_patches:
        is_on = (lettuce_patch.simple_query(""Is the lettuce on something?"") == ""yes"")
        if is_on:
            return lettuce_patch.simple_query(""What is the lettuce on?"") # crop would include the object so keep it in the query
    # If no lettuce is on something, pick the first lettuce
    return lettuce_patches[0].simple_query(""What is the lettuce on?"")"
1194027,Which kind of clothing is black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
9963477,Is the statue wearing a dress?," # dress is a property
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    for statue_patch in statue_patches:
        return statue_patch.verify_property(""statue"", ""wearing a dress"")"
1151995,Which side of the photo is the yellow vase on?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    yellow_vase_patches = image_patch.find(""yellow vase"")
    # Question assumes only one yellow vase patch
    if len(yellow_vase_patches) == 0:
        # If no yellow vase is found, query the image directly
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    if yellow_vase_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
712821,What is common to the bear and the belt?," # bear and belt are both animals
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    for bear_patch in bear_patches:
        belt_patches = image_patch.find(""belt"")
        for belt_patch in belt_patches:
            return belt_patch.simple_query(""What is common to the bear and the belt?"")"
1757418,What is the vehicle to the right of the car?," # vehicle is a general term, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle to the right of the car?"")"
7624100,Are the trunks that are gray wet and large?," # gray, wet, large
    image_patch = ImagePatch(image)
    trunks_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunks_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunks_patches:
        is_gray = trunk_patch.verify_property(""trunk"", ""gray"")
        is_wet = trunk_patch.verify_property(""trunk"", ""wet"")
        is_large = trunk_patch.verify_property(""trunk"", ""large"")
        if is_gray and is_wet and is_large:
            return ""yes""
    return ""no"""
1125474,"On which side of the photo is the iron fence, the right or the left?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    iron_fences_patches = image_patch.find(""iron fence"")
    # Question assumes only one iron fence patch
    if len(iron_fences_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    if iron_fences_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
1300375,What is the name of the item of furniture that the printer is on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    for furniture_patch in furniture_patches:
        is_printer_on = (furniture_patch.simple_query(""Is the printer on the furniture?"") == ""yes"")
        if is_printer_on:
            return furniture_patch.simple_query(""What is the name of the item of furniture that the printer is on?"") # crop would include the printer so keep it in the query
    # If no furniture is on the printer, pick the first furniture
    return furniture_patches[0].simple_query(""What is the name of the item of furniture that the printer is on?"")"
5925196,What's the building covered by?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""What's the building covered by?"")
    for building_patch in building_patches:
        is_covered_by = (building_patch.simple_query(""Is the building covered by?"") == ""yes"")
        if is_covered_by:
            return building_patch.simple_query(""What's the building covered by?"") # crop would include the cover so keep it in the query
    # If no building is covered, pick the first building
    return building_patches[0].simple_query(""What's the building covered by?"")"
1948055,What watercraft is the white rope tying?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    for watercraft_patch in watercraft_patches:
        is_tying = (watercraft_patch.simple_query(""Is the watercraft the white rope tying?"") == ""yes"")
        if is_tying:
            return watercraft_patch.simple_query(""What watercraft is the white rope tying?"") # crop would include the rope so keep it in the query
    # If no watercraft is the white rope tying, pick the first watercraft
    return watercraft_patches[0].simple_query(""What watercraft is the white rope tying?"")"
8540582,What kind of animal is in front of the leafy trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    for woman_patch in woman_patches:
        is_walking = (woman_patch.simple_query(""Is the woman walking?"") == ""yes"")
        if is_walking:
            return woman_patch.simple_query(""What does the walking woman by the bus wear?"") # crop would include the walking so keep it in the query
    # If no woman is walking, pick the first woman
    return woman_patches[0].simple_query(""What does the walking woman by the bus wear?"")"
1129508,Is the controller to the left of a pillow?," 
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if controller_patch.horizontal_center < pillow_patch.horizontal_center:
                return ""yes""
    return ""no"""
18664084,Is there any sheep by the fence?," # image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is there any sheep by the fence?"")
    for sheep_patch in sheep_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if sheep_patch.lower < fence_patch.lower and sheep_patch.upper > fence_patch.upper:
                return ""yes""
    return ""no"""
6912079,What animal is this?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is this?"")"
3412029,Where is the person?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person?"")
    return person_patches[0].simple_query(""Where is the person?"")"
14161122,What animal is in the water?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""in water""):
            return animal_patch.simple_query(""What animal is in the water?"") # crop would include the water so keep it in the query
    # If no animal is in the water, pick the first animal
    return animal_patches[0].simple_query(""What animal is in the water?"")"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    for baby_patch in baby_patches:
        parent_patches = image_patch.find(""parent"")
        for parent_patch in parent_patches:
            if parent_patch.horizontal_center < baby_patch.horizontal_center:
                furniture_patches = image_patch.find(""furniture"")
                for furniture_patch in furniture_patches:
                    if furniture_patch.horizontal_center > baby_patch.horizontal_center:
                        return furniture_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")"
15699496,What is the cup that looks clean made of?," # cup is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the cup that looks clean made of?"")"
12765451,What animals are to the right of the ladder?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for ladder_patch in ladder_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > ladder_patch.horizontal_center:
                return animal_patch.simple_query(""What animals are to the right of the ladder?"") # crop would include the animal so keep it in the query
    # If no animal is to the right of the ladder, pick the first animal
    return animal_patches[0].simple_query(""What animals are to the right of the ladder?"")"
191044307,What animal is black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What animal is black?"") # crop would include the animal so keep it in the query
    # If no animal is black, pick the first animal
    return animal_patches[0].simple_query(""What animal is black?"")"
12639181,Who is wearing shorts?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, pick the first person
    return person_patches[0].simple_query(""Who is wearing shorts?"")"
10630949,Is the person that is not male wearing an elbow pad?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person male?"") == ""no"":
            is_wearing_elbow_pad = (person_patch.simple_query(""Is the person wearing an elbow pad?"") == ""yes"")
            if is_wearing_elbow_pad:
                return person_patch.simple_query(""Is the person that is not male wearing an elbow pad?"") # crop would include the elbow pad so keep it in the query
    # If no person is not male, pick the first person
    return person_patches[0].simple_query(""Is the person that is not male wearing an elbow pad?"")"
14544602,What is the boy holding?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    for boy_patch in boy_patches:
        is_holding_patch = (boy_patch.simple_query(""Is the boy holding something?"") == ""yes"")
        if is_holding_patch:
            return boy_patch.simple_query(""What is the boy holding?"") # crop would include the object so keep it in the query
    # If no boy is holding anything, pick the first boy
    return boy_patches[0].simple_query(""What is the boy holding?"")"
2986699,Of what material the dish?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    dish_patches = image_patch.find(""dish"")
    # Question assumes only one dish patch
    if len(dish_patches) == 0:
        # If no dish is found, query the image directly
        return image_patch.simple_query(""Of what material the dish?"")
    for dish_patch in dish_patches:
        material_patches = image_patch.find(""material"")
        for material_patch in material_patches:
            if material_patch.simple_query(""Is the material of the dish the same as the material of the material?"") == ""yes"":
                return material_patch.simple_query(""Of what material the dish?"") # crop would include the material so keep it in the query
    # If no material is found, pick the first material
    return material_patches[0].simple_query(""Of what material the dish?"")"
161013513,What kind of animal is on the street?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""on the street""):
            return animal_patch.simple_query(""What kind of animal is on the street?"") # crop would include the street so keep it in the query
    # If no animal is on the street, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is on the street?"")"
15143936,What animal is before the roof?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is before the roof?"")"
1955043,Who is playing with the ball?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is playing with the ball?"")
    for person_patch in person_patches:
        ball_patches = image_patch.find(""ball"")
        # Question assumes only one ball patch
        if len(ball_patches) == 0:
            return image_patch.simple_query(""Who is playing with the ball?"")
        for ball_patch in ball_patches:
            if ball_patch.simple_query(""Is the ball in the person's hand?"") == ""yes"":
                return person_patch.simple_query(""Who is playing with the ball?"")"
91044150,What is the name of the animals in front of the trees beside the river?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animals_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animals_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")
    for animal_patch in animals_patches:
        if animal_patch.verify_property(""animal"", ""in front of the trees beside the river""):
            return animal_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?," # fruit hanging
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is hanging?"")
    for fruit_patch in fruit_patches:
        if fruit_patch.verify_property(""fruit"", ""hanging""):
            return fruit_patch.simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bush_patches = image_patch.find(""bush"")
    # Question assumes only one bush patch
    if len(bush_patches) == 0:
        # If no bush is found, query the image directly
        return image_patch.simple_query(""What is under the bush?"")
    for bush_patch in bush_patches:
        under_patches = image_patch.find(""under"")
        # Question assumes only one under patch
        if len(under_patches) == 0:
            return image_patch.simple_query(""What is under the bush?"")
        for under_patch in under_patches:
            return under_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?," # kangaroos or birds
    image_patch = ImagePatch(image)
    kangaroo_patches = image_patch.find(""kangaroo"")
    # Question assumes only one kangaroo patch
    if len(kangaroo_patches) == 0:
        # If no kangaroo is found, query the image directly
        return image_patch.simple_query(""Are there kangaroos or birds in this photograph?"")
    for kangaroo_patch in kangaroo_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if bird_patch.vertical_center > kangaroo_patch.vertical_center:
                return ""yes""
    return ""no"""
10457241,What is the color of the trousers?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers is found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].verify_property(""trousers"", ""color"")"
2913850,Is the placemat in the bottom or in the top part?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered with blanket?"")"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    man_patch = man_patches[0]
    is_wearing_sweater = (man_patch.simple_query(""Is the man wearing a sweater?"") == ""yes"")
    if is_wearing_sweater:
        furniture_patches = image_patch.find(""furniture"")
        # Question assumes only one furniture patch
        if len(furniture_patches) == 0:
            # If no furniture is found, query the image directly
            return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > man_patch.horizontal_center:
                return furniture_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"") # crop would include the sweater so keep it in the query
    # If no man is wearing a sweater, pick the first man
    return man_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    for desk_patch in desk_patches:
        drawer_patches = image_patch.find(""drawer"")
        for drawer_patch in drawer_patches:
            if drawer_patch.vertical_center < desk_patch.vertical_center:
                return ""bottom""
            else:
                return ""top"""
19900141,Are there napkins or tablecloths?," # napkins or tablecloths
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)"
19737232,Is the book on the right of the picture?," # book is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the book on the right of the picture?"")"
475064,Who is wearing the glasses?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        is_wearing_glasses = (person_patch.simple_query(""Is the person wearing glasses?"") == ""yes"")
        if is_wearing_glasses:
            return person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no person is wearing glasses, pick the first person
    return person_patches[0].simple_query(""Who is wearing the glasses?"")"
8594579,Is there a woman to the right of the orange object that is to the right of the person?," # orange object is a carrot
    image_patch = ImagePatch(image)
    orange_object_patches = image_patch.find(""orange object"")
    # Question assumes only one orange object patch
    if len(orange_object_patches) == 0:
        # If no orange object is found, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    for orange_object_patch in orange_object_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
        for person_patch in person_patches:
            if person_patch.horizontal_center < orange_object_patch.horizontal_center:
                woman_patches = image_patch.find(""woman"")
                # Question assumes only one woman patch
                if len(woman_patches) == 0:
                    # If no woman is found, query the image directly
                    return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
                for woman_patch in woman_patches:
                    if woman_patch.horizontal_center > orange_object_patch.horizontal_center:
                        return ""yes""
    return ""no"""
14602992,Which side of the image is the couch on?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
9944587,How tall is the man that is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    for man_patch in man_patches:
        is_wearing_shirt = (man_patch.simple_query(""Is the man wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return man_patch.simple_query(""How tall is the man that is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no man is wearing a shirt, pick the first man
    return man_patches[0].simple_query(""How tall is the man that is wearing a shirt?"")"
13736712,Are there any giraffes?," # image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Are there any giraffes?"")
    return ""yes"""
6996118,The young girl is wearing what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The young girl is wearing what?"")
    for girl_patch in girl_patches:
        clothing_patches = image_patch.find(""clothing"")
        # Question assumes only one clothing patch
        if len(clothing_patches) == 0:
            return image_patch.simple_query(""The young girl is wearing what?"")
        for clothing_patch in clothing_patches:
            if clothing_patch.simple_query(""Is the clothing patch on the girl?"") == ""yes"":
                return clothing_patch.simple_query(""What is the clothing patch on the girl?"")"
19992576,Is the basket on the floor small and brown?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    for basket_patch in basket_patches:
        is_on_floor = (basket_patch.simple_query(""Is the basket on the floor?"") == ""yes"")
        is_small = (basket_patch.simple_query(""Is the basket small?"") == ""yes"")
        is_brown = (basket_patch.simple_query(""Is the basket brown?"") == ""yes"")
        if is_on_floor and is_small and is_brown:
            return ""yes""
    return ""no"""
17332401,What is the boy in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy in front of?"")
    for boy_patch in boy_patches:
        is_in_front_of = (boy_patch.simple_query(""Is the boy in front of something?"") == ""yes"")
        if is_in_front_of:
            return boy_patch.simple_query(""What is the boy in front of?"") # crop would include the object so keep it in the query
    # If no boy is in front of something, pick the first boy
    return boy_patches[0].simple_query(""What is the boy in front of?"")"
15586294,Which side is the leather armchair on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    leather_armchair_patches = image_patch.find(""leather armchair"")
    # Question assumes only one leather armchair patch
    if len(leather_armchair_patches) == 0:
        # If no leather armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    for leather_armchair_patch in leather_armchair_patches:
        is_on_left = (leather_armchair_patch.simple_query(""Is the leather armchair on the left?"") == ""yes"")
        if is_on_left:
            return leather_armchair_patch.simple_query(""Which side is the leather armchair on?"") # crop would include the armchair so keep it in the query
    # If no leather armchair is on the left, pick the first leather armchair
    return leather_armchair_patches[0].simple_query(""Which side is the leather armchair on?"")"
15658324,What is the horse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    controller_patch = controller_patches[0]
    controller_color = controller_patch.simple_query(""What color is the controller?"")
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""What color is the furniture?"") == controller_color:
            return furniture_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")"
2531874,Who is playing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is playing?"")
    for person_patch in person_patches:
        is_playing = (person_patch.simple_query(""Is the person playing?"") == ""yes"")
        if is_playing:
            return person_patch.simple_query(""Who is playing?"") # crop would include the shirt so keep it in the query
    # If no person is playing, pick the first person
    return person_patches[0].simple_query(""Who is playing?"")"
3112009,Is the plate on the left side?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the plate on the left side?"")"
1527613,On which side of the picture is the bag?," # bag is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the picture is the bag?"")"
11781054,Are both the road and the roof the same color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""Are both the road and the roof the same color?"")
    for road_patch in road_patches:
        roof_patches = image_patch.find(""roof"")
        for roof_patch in roof_patches:
            if road_patch.verify_property(""road"", ""color"") == roof_patch.verify_property(""roof"", ""color""):
                return ""yes""
    return ""no"""
161027384,What is the green rug hanging on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    green_rug_patches = image_patch.find(""green rug"")
    # Question assumes only one green rug patch
    if len(green_rug_patches) == 0:
        # If no green rug is found, query the image directly
        return image_patch.simple_query(""What is the green rug hanging on?"")
    for green_rug_patch in green_rug_patches:
        hanging_patches = image_patch.find(""hanging"")
        for hanging_patch in hanging_patches:
            return hanging_patch.simple_query(""What is the green rug hanging on?"") # crop would include the hanging so keep it in the query
    # If no green rug is hanging, pick the first green rug
    return green_rug_patches[0].simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?," # laptop is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(people_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who in the photo is standing?"")
    for person_patch in people_patches:
        is_standing = (person_patch.simple_query(""Is the person standing?"") == ""yes"")
        if is_standing:
            return person_patch.simple_query(""Who in the photo is standing?"") # crop would include the shirt so keep it in the query
    # If no person is standing, pick the first person
    return people_patches[0].simple_query(""Who in the photo is standing?"")"
693318,Do you see any plates in the photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    plates_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plates_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Do you see any plates in the photo?"")
    return plates_patches[0].simple_query(""Do you see any plates in the photo?"")"
19613394,The person on the skateboard is wearing what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    for person_patch in person_patches:
        is_on_skateboard = (person_patch.simple_query(""Is the person on the skateboard?"") == ""yes"")
        if is_on_skateboard:
            return person_patch.simple_query(""The person on the skateboard is wearing what?"") # crop would include the skateboard so keep it in the query
    # If no person is on the skateboard, pick the first person
    return person_patches[0].simple_query(""The person on the skateboard is wearing what?"")"
19927237,Is the blue car in front of the white van?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue car in front of the white van?"")"
31054022,What is the box sitting on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What is the box sitting on?"")
    for box_patch in box_patches:
        is_sitting_on = (box_patch.simple_query(""Is the box sitting on something?"") == ""yes"")
        if is_sitting_on:
            return box_patch.simple_query(""What is the box sitting on?"") # crop would include the object on the box so keep it in the query
    # If no box is sitting on something, pick the first box
    return box_patches[0].simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?," # ground is brown, snow is white
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Does the ground look snowy and brown?"")
    ground_patch = ground_patches[0]
    snow_patches = image_patch.find(""snow"")
    # Question assumes only one snow patch
    if len(snow_patches) == 0:
        return ""no""
    for snow_patch in snow_patches:
        if snow_patch.vertical_center > ground_patch.vertical_center:
            return ""yes""
    return ""no"""
15185768,Does the sky look blue and clear?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the sky look blue and clear?"")"
1589160,Does the person that is sitting lean against a fire hydrant?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    for person_patch in person_patches:
        is_leaning = (person_patch.simple_query(""Is the person leaning?"") == ""yes"")
        if is_leaning:
            return person_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"") # crop would include the person so keep it in the query
    # If no person is leaning, pick the first person
    return person_patches[0].simple_query(""Does the person that is sitting lean against a fire hydrant?"")"
2142522,Are there any shopping carts or mannequins in this photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    shopping_cart_patches = image_patch.find(""shopping cart"")
    mannequin_patches = image_patch.find(""mannequin"")
    # Question assumes only one shopping cart patch and one mannequin patch
    if len(shopping_cart_patches) == 0 and len(mannequin_patches) == 0:
        # If no shopping cart or mannequin is found, query the image directly
        return image_patch.simple_query(""Are there any shopping carts or mannequins in this photo?"")
    if len(shopping_cart_patches) == 0:
        return mannequin_patches[0].simple_query(""Are there any shopping carts or mannequins in this photo?"")
    if len(mannequin_patches) == 0:
        return shopping_cart_patches[0].simple_query(""Are there any shopping carts or mannequins in this photo?"")
    return ""yes"""
17362234,Are there cages or scrub brushes in this picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)"
4955854,Is the lamp below the chain?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    for lamp_patch in lamp_patches:
        chain_patches = image_patch.find(""chain"")
        for chain_patch in chain_patches:
            if chain_patch.vertical_center > lamp_patch.vertical_center:
                return ""yes""
    return ""no"""
10463545,Is the computer to the right of the other computer silver or black?," # computer is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")"
2265037,What is the girl wearing?," # girl is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue"")
    # Question assumes only one blue patch
    if len(blue_patches) == 0:
        # If no blue is found, query the image directly
        return image_patch.simple_query(""Are there any blue numbers or letters?"")
    for blue_patch in blue_patches:
        if blue_patch.verify_property(""blue"", ""numbers"") or blue_patch.verify_property(""blue"", ""letters""):
            return ""yes""
    return ""no"""
3483992,Is the long bus to the left or to the right of the person with the backpack?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")"
13598461,What is the device that is not on called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    for device_patch in device_patches:
        is_on = (device_patch.simple_query(""Is the device on?"") == ""no"")
        if is_on:
            return device_patch.simple_query(""What is the device that is not on called?"") # crop would include the device so keep it in the query
    # If no device is not on, pick the first device
    return device_patches[0].simple_query(""What is the device that is not on called?"")"
13885436,The sky has what color?," 
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"")"
7432467,Is the black container to the left of the man that is on the motorcycle?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        # If no black container is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    for black_container_patch in black_container_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return ""no""
        for man_patch in man_patches:
            if man_patch.simple_query(""Is the man on the motorcycle?"") == ""yes"":
                if black_container_patch.horizontal_center < man_patch.horizontal_center:
                    return ""yes""
    return ""no"""
19540096,Is the fire in an oven?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    # Question assumes only one fire patch
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    for fire_patch in fire_patches:
        oven_patches = image_patch.find(""oven"")
        for oven_patch in oven_patch:
            if oven_patch.horizontal_center > fire_patch.horizontal_center:
                return ""yes""
    return ""no"""
18291107,The horse is where?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""The horse is where?"")
    for horse_patch in horse_patches:
        return horse_patch.simple_query(""The horse is where?"") # crop would include the horse so keep it in the query"
5435474,Is the man that is to the left of the motorbike wearing a hat?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    man_patch = man_patches[0]
    motorbike_patches = image_patch.find(""motorbike"")
    # Question assumes only one motorbike patch
    if len(motorbike_patches) == 0:
        return ""no""
    for motorbike_patch in motorbike_patches:
        if motorbike_patch.horizontal_center > man_patch.horizontal_center:
            return man_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"") # crop would include the motorbike so keep it in the query
    # If no motorbike is to the left of the man, pick the first motorbike
    return motorbike_patches[0].simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")"
226307,Are there any tables in the photo?," 
    image_patch = ImagePatch(image)
    return image_patch.exists(""table"")"
1944826,Who is reflected in the mirror?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is reflected in the mirror?"")
    for person_patch in person_patches:
        is_reflected = (person_patch.simple_query(""Is the person reflected in the mirror?"") == ""yes"")
        if is_reflected:
            return person_patch.simple_query(""Who is reflected in the mirror?"") # crop would include the mirror so keep it in the query
    # If no person is reflected in the mirror, pick the first person
    return person_patches[0].simple_query(""Who is reflected in the mirror?"")"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        # If no cooking utensil is found, query the image directly
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    for cooking_utensil_patch in cooking_utensil_patches:
        stove_patches = image_patch.find(""stove"")
        # Question assumes only one stove patch
        if len(stove_patches) == 0:
            return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
        for stove_patch in stove_patches:
            if stove_patch.vertical_center > cooking_utensil_patch.vertical_center:
                woman_patches = image_patch.find(""woman"")
                # Question assumes only one woman patch
                if len(woman_patches) == 0:
                    return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
                for woman_patch in woman_patches:
                    if woman_patch.horizontal_center > cooking_utensil_patch.horizontal_center:
                        return cooking_utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"") # crop would include the stove so keep"
18435846,What is the color of the balloon that is to the right of the backpack?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")"
8390894,Is the woman to the right of the man sitting on a sofa?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    for woman_patch in woman_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            # If no man is found, query the image directly
            return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
        for man_patch in man_patches:
            sofa_patches = image_patch.find(""sofa"")
            # Question assumes only one sofa patch
            if len(sofa_patches) == 0:
                # If no sofa is found, query the image directly
                return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
            for sofa_patch in sofa_patches:
                if sofa_patch.horizontal_center > man_patch.horizontal_center and sofa_patch.horizontal_center < woman_patch.horizontal_center:
                    return ""yes""
    return ""no"""
18896007,Which side of the image is the pot on?," # pot is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which side of the image is the pot on?"")"
19323898,Is that pillow on a couch?," 
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is that pillow on a couch?"")
    for pillow_patch in pillow_patches:
        couch_patches = image_patch.find(""couch"")
        for couch_patch in couch_patches:
            if pillow_patch.vertical_center > couch_patch.vertical_center:
                return ""yes""
    return ""no"""
1281034,Where are the trees?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    trees_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(trees_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Where are the trees?"")
    return trees_patches[0].simple_query(""Where are the trees?"")"
13515147,What is on the cow?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""What is on the cow?"")
    for cow_patch in cow_patches:
        return cow_patch.simple_query(""What is on the cow?"")"
91036716,What is the skater doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    # Question assumes only one skater patch
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    for skater_patch in skater_patches:
        is_skating = (skater_patch.simple_query(""Is the skater skating?"") == ""yes"")
        if is_skating:
            return skater_patch.simple_query(""What is the skater doing?"") # crop would include the skater so keep it in the query
    # If no skater is skating, pick the first skater
    return skater_patches[0].simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    for person_patch in person_patches:
        boy_patches = image_patch.find(""boy"")
        # Question assumes only one boy patch
        if len(boy_patches) == 0:
            return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
        for boy_patch in boy_patches:
            is_carrying = (person_patch.simple_query(""Is the person carrying?"") == ""yes"")
            if is_carrying:
                return person_patch.simple_query(""What is the person to the left of the boy carrying?"") # crop would include the boy so keep it in the query
    # If no person is carrying, pick the first person
    return person_patches[0].simple_query(""What is the person to the left of the boy carrying?"")"
13152020,Is the ground wet or dry?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Is the ground wet or dry?"")
    if ground_patches[0].verify_property(""ground"", ""wet""):
        return ""wet""
    else:
        return ""dry"""
19312096,"On which side is the purse, the left or the right?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    if purse_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there breads in this photograph?"")"
9113663,Do you see either any snow or sand that are white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one snow patch and one sand patch
    if len(snow_patches) == 0 or len(sand_patches) == 0:
        # If no snow or sand is found, query the image directly
        return image_patch.simple_query(""Do you see either any snow or sand that are white?"")
    for snow_patch in snow_patches:
        if snow_patch.verify_property(""snow"", ""white""):
            return ""yes""
    for sand_patch in sand_patches:
        if sand_patch.verify_property(""sand"", ""white""):
            return ""yes""
    return ""no"""
10243612,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What vegetable is to the left of the napkin?"")
    for vegetable_patch in vegetable_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if vegetable_patch.horizontal_center < napkin_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetable is to the left of the napkin?"") # crop would include the napkin so keep it in the query
    # If no vegetable is to the left of the napkin, pick the first vegetable
    return vegetable_patches[0].simple_query(""What vegetable is to the left of the napkin?"")"
15599523,Is the dog on the right side?," # image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    for dog_patch in dog_patches:
        if dog_patch.horizontal_center > image_patch.width / 2:
            return ""yes""
    return ""no"""
101019673,What is the man wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What is the man wearing?"")"
333047,Do you see any men to the right of the orange tent?," # orange tent
    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(men_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for men_patch in men_patches:
        orange_tent_patches = image_patch.find(""orange tent"")
        for orange_tent_patch in orange_tent_patches:
            if orange_tent_patch.horizontal_center > men_patch.horizontal_center:
                return ""yes""
    return ""no"""
13907796,Is the shirt striped and green?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_striped = image_patch.verify_property(""shirt"", ""striped"")
    is_green = image_patch.verify_property(""shirt"", ""green"")
    return bool_to_yesno(is_striped and is_green)"
17207604,Are there either bottles or shelves?," # image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    for train_patch in train_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > train_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")"
7165131,Is that train engine small or large?," # train engine is a noun
    image_patch = ImagePatch(image)
    train_engine_patches = image_patch.find(""train engine"")
    # Question assumes only one train engine patch
    if len(train_engine_patches) == 0:
        # If no train engine is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    if train_engine_patches[0].verify_property(""train engine"", ""small""):
        return ""small""
    else:
        return ""large"""
21049362,Where are the railroad tracks?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal looking at?"")
    for animal_patch in animal_patches:
        is_wearing_shirt = (animal_patch.simple_query(""Is the animal wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return animal_patch.simple_query(""What is the animal looking at?"") # crop would include the shirt so keep it in the query
    # If no animal is wearing a shirt, pick the first animal
    return animal_patches[0].simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    children_patches = image_patch.find(""children"")
    # Question assumes only one children patch
    if len(children_patches) == 0:
        # If no children are found, query the image directly
        return image_patch.simple_query(""What are the children playing?"")
    for children_patch in children_patches:
        is_playing = (children_patch.simple_query(""Are the children playing?"") == ""yes"")
        if is_playing:
            return children_patch.simple_query(""What are the children playing?"") # crop would include the children so keep it in the query
    # If no children are playing, pick the first children
    return children_patches[0].simple_query(""What are the children playing?"")"
598297,Are there combs or figurines in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)"
16409127,What is the wire on?," # wire is a noun
    image_patch = ImagePatch(image)
    wire_patches = image_patch.find(""wire"")
    # Question assumes only one wire patch
    if len(wire_patches) == 0:
        # If no wire is found, query the image directly
        return image_patch.simple_query(""What is the wire on?"")
    for wire_patch in wire_patches:
        is_on = (wire_patch.simple_query(""Is the wire on?"") == ""yes"")
        if is_on:
            return wire_patch.simple_query(""What is the wire on?"") # crop would include the object so keep it in the query
    # If no wire is on, pick the first wire
    return wire_patches[0].simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    # Question assumes only one tunnel patch
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    if tunnel_patches[0].width < 100:
        return ""small""
    else:
        return ""large"""
17560468,Do you see trains or windows?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    for person_patch in person_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return image_patch.simple_query(""What is the person near the man wearing?"")
        for man_patch in man_patches:
            is_wearing = (man_patch.simple_query(""Is the man wearing something?"") == ""yes"")
            if is_wearing:
                return man_patch.simple_query(""What is the person near the man wearing?"") # crop would include the shirt so keep it in the query
    # If no person is near the man, pick the first person
    return person_patches[0].simple_query(""What is the person near the man wearing?"")"
12352375,Is the vehicle that is sitting down black or blue?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")"
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    trash_can_patches = image_patch.find(""metal trash can"")
    # Question assumes only one trash can patch
    if len(trash_can_patches) == 0:
        # If no trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    for trash_can_patch in trash_can_patches:
        white_patches = image_patch.find(""white"")
        for white_patch in white_patches:
            if white_patch.horizontal_center > trash_can_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
5800248,Is it outdoors?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it outdoors?"")"
4604785,Does the pizza slice to the left of the pizza have large size?," # pizza slice is a pizza
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    for pizza_patch in pizza_patches:
        pizza_slice_patches = image_patch.find(""pizza slice"")
        # Question assumes only one pizza slice patch
        if len(pizza_slice_patches) == 0:
            return ""no""
        for pizza_slice_patch in pizza_slice_patches:
            if pizza_slice_patch.horizontal_center < pizza_patch.horizontal_center:
                return bool_to_yesno(pizza_slice_patch.verify_property(""pizza slice"", ""large size""))
    return ""no"""
15185845,What's the man wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What's the man wearing?"") # crop would include the shirt so keep it in the query"
2282232,Where is the snow?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"")"
7889197,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    blankets_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blankets_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Are there either any blankets or pictures in the photograph?"")
    for blanket_patch in blankets_patches:
        pictures_patches = image_patch.find(""picture"")
        for picture_patch in pictures_patches:
            if picture_patch.horizontal_center > blanket_patch.horizontal_center:
                return ""yes""
    return ""no"""
154682,Where does the bird stand on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Where does the bird stand on?"")
    for bird_patch in bird_patches:
        is_on_patch = (bird_patch.simple_query(""Is the bird on a patch?"") == ""yes"")
        if is_on_patch:
            return bird_patch.simple_query(""Where does the bird stand on?"") # crop would include the patch so keep it in the query
    # If no bird is on a patch, pick the first bird
    return bird_patches[0].simple_query(""Where does the bird stand on?"")"
10435315,Is the man holding a racket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if man_patch.simple_query(""Is the man holding a racket?"") == ""yes"":
            return ""yes""
    return ""no"""
121035887,Do the man shorts have white color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    shorts_patches = man_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    for shorts_patch in shorts_patches:
        if shorts_patch.verify_property(""shorts"", ""white""):
            return ""yes""
    return ""no"""
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?," # vehicle, man, cows
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    cows_patches = image_patch.find(""cows"")
    # Question assumes only one cows patch
    if len(cows_patches) == 0:
        return ""no""
    for cows_patch in cows_patches:
        if cows_patch.horizontal_center > man_patch.horizontal_center:
            vehicle_patches = image_patch.find(""vehicle"")
            # Question assumes only one vehicle patch
            if len(vehicle_patches) == 0:
                return ""no""
            for vehicle_patch in vehicle_patches:
                if vehicle_patch.horizontal_center < man_patch.horizontal_center:
                    return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    return ""no"""
19659501,What is the color of the umbrella the bird is on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    for bird_patch in bird_patches:
        umbrella_patches = image_patch.find(""umbrella"")
        for umbrella_patch in umbrella_patches:
            if umbrella_patch.simple_query(""Is the umbrella the bird is on?"") == ""yes"":
                return umbrella_patch.simple_query(""What is the color of the umbrella the bird is on?"")"
10595217,Where is the grass?," # grass is a noun
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")"
14803743,Which kind of clothing is black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
19743238,Is the man on the right side?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    if man_patches[0].horizontal_center > image_patch.width / 2:
        return ""yes""
    else:
        return ""no"""
3965204,Are the mountains covered with snow?," 
    image_patch = ImagePatch(image)
    mountains_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountains_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    for mountain_patch in mountains_patches:
        is_snowy = mountain_patch.verify_property(""mountain"", ""snowy"")
        if is_snowy:
            return ""yes""
    return ""no"""
141024710,Are there both windows and cars in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    windows_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(windows_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Are there both windows and cars in the picture?"")
    for window_patch in windows_patches:
        cars_patches = image_patch.find(""car"")
        # Question assumes only one car patch
        if len(cars_patches) == 0:
            # If no car is found, query the image directly
            return image_patch.simple_query(""Are there both windows and cars in the picture?"")
        for car_patch in cars_patches:
            if car_patch.horizontal_center > window_patch.horizontal_center:
                return ""yes""
    return ""no"""
6481635,What color do you think the shirt is?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the shirt is?"")"
3623367,What's he doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What's he doing?"")"
15634950,Where is the giraffe in front of the hay eating from?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    for giraffe_patch in giraffe_patches:
        hay_patches = image_patch.find(""hay"")
        for hay_patch in hay_patches:
            if hay_patch.horizontal_center > giraffe_patch.horizontal_center:
                return hay_patch.simple_query(""Where is the giraffe in front of the hay eating from?"") # crop would include the hay so keep it in the query
    # If no hay is in front of the giraffe, pick the first hay
    return hay_patches[0].simple_query(""Where is the giraffe in front of the hay eating from?"")"
16644500,What animal is the log pulled by?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is the log pulled by?"")
    for animal_patch in animal_patches:
        is_pulled_by_animal = (animal_patch.simple_query(""Is the log pulled by an animal?"") == ""yes"")
        if is_pulled_by_animal:
            return animal_patch.simple_query(""What animal is the log pulled by?"") # crop would include the animal so keep it in the query
    # If no animal is pulling the log, pick the first animal
    return animal_patches[0].simple_query(""What animal is the log pulled by?"")"
3202108,Which side is the car on?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10137201,Are the papers in the bottom part of the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    papers_patches = image_patch.find(""papers"")
    # Question assumes only one papers patch
    if len(papers_patches) == 0:
        # If no papers is found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    if papers_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    for boy_patch in boy_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
        for person_patch in person_patches:
            if person_patch.horizontal_center < boy_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
8438091,The picture is what color?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""The picture is what color?"")"
4325939,On which side of the photo is the banana?," # banana is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the photo is the banana?"")"
1425189,What is the name of the brown piece of furniture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture brown?"") == ""yes"":
            return furniture_patch.simple_query(""What is the name of the brown piece of furniture?"")"
5119962,Is the man to the right of glasses?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    for man_patch in man_patches:
        glasses_patches = image_patch.find(""glasses"")
        for glasses_patch in glasses_patches:
            if glasses_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lid_patches = image_patch.find(""toilet lid"")
    # Question assumes only one lid patch
    if len(lid_patches) == 0:
        # If no lid is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    if lid_patches[0].simple_query(""Is the toilet lid down?"") == ""yes"":
        return ""down""
    else:
        return ""up"""
6522554,Which kind of device does the man hold?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    for device_patch in device_patches:
        if device_patch.simple_query(""Is the device being held by the man?"") == ""yes"":
            return device_patch.simple_query(""Which kind of device does the man hold?"")"
870619,What is the device to the left of the person that is to the left of the television?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    television_patches = image_patch.find(""television"")
    # Question assumes only one television patch
    if len(television_patches) == 0:
        # If no television is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    for television_patch in television_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
        for person_patch in person_patches:
            device_patches = image_patch.find(""device"")
            # Question assumes only one device patch
            if len(device_patches) == 0:
                return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
            for device_patch in device_patches:
                if device_patch.horizontal_center < person_patch.horizontal_center:
                    return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")"
12713794,Does the woman to the left of the man wear a necklace?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < man_patch.horizontal_center:
            return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")"
824070,What is the man doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What is the man doing?"")"
11593733,Which kind of furniture is right to the pillow?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    for furniture_patch in furniture_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > furniture_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is right to the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is right to the pillow, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is right to the pillow?"")"
3357821,Does the dog to the left of the other dog look small or large?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog_patch = dog_patches[0]
    right_dog_patch = dog_patches[1]
    if left_dog_patch.horizontal_center < right_dog_patch.horizontal_center:
        return left_dog_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    else:
        return right_dog_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")"
338026,Are the white candles short or tall?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    for candle_patch in candle_patches:
        if candle_patch.verify_property(""candle"", ""white"") and candle_patch.verify_property(""candle"", ""short""):
            return ""short""
        elif candle_patch.verify_property(""candle"", ""white"") and candle_patch.verify_property(""candle"", ""tall""):
            return ""tall""
    return ""unknown"""
15346232,What kind of fruit is the girl holding?," # fruit is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is the girl holding?"")"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    if yellow_vehicle_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
81030271,Is the gray car to the right or to the left of the cart?," # gray car is the object, cart is the reference
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    for gray_car_patch in gray_car_patches:
        cart_patches = image_patch.find(""cart"")
        for cart_patch in cart_patches:
            if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
                return ""right""
            elif gray_car_patch.horizontal_center < cart_patch.horizontal_center:
                return ""left""
    return ""no"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        # If no cooking utensil is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    for cooking_utensil_patch in cooking_utensil_patches:
        is_right_of_canister = (cooking_utensil_patch.simple_query(""Is the cooking utensil to the right of the canister made of chrome?"") == ""yes"")
        if is_right_of_canister:
            return cooking_utensil_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"") # crop would include the canister so keep it in the query
    # If no cooking utensil is to the right of the canister, pick the first cooking utensil
    return cooking_utensil_patches[0].simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")"
8240699,What animal is in front of the bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the bird?"")"
10105081,Is the fence white or green?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].verify_property(""fence"", ""white"")"
13613689,Is there a train or a fence in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Is there a train or a fence in the picture?"")
    for train_patch in train_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center > train_patch.horizontal_center:
                return ""yes""
    return ""no"""
10662521,What is the bottle made of?," # bottle is a noun
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?," # fruit is a noun, so ask directly
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    return fruit_patches[0].simple_query(""Which kind of fruit is on the plate?"")"
16701575,What device is to the right of the cake?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    for device_patch in device_patches:
        cake_patches = image_patch.find(""cake"")
        for cake_patch in cake_patches:
            if cake_patch.horizontal_center > device_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the right of the cake?"") # crop would include the cake so keep it in the query
    # If no device is to the right of the cake, pick the first device
    return device_patches[0].simple_query(""What device is to the right of the cake?"")"
6572516,What material is the ceiling?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    ceiling_patches = image_patch.find(""ceiling"")
    # Question assumes only one ceiling patch
    if len(ceiling_patches) == 0:
        # If no ceiling is found, query the image directly
        return image_patch.simple_query(""What material is the ceiling?"")
    for ceiling_patch in ceiling_patches:
        return ceiling_patch.simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    for egg_patch in egg_patches:
        return egg_patch.simple_query(""What is the color of the egg in the middle of the picture?"")"
14371534,Are the gold pans on the right part or on the left?," # gold_pans = ""gold pan""
    image_patch = ImagePatch(image)
    gold_pans_patches = image_patch.find(""gold pan"")
    # Question assumes only one gold pan patch
    if len(gold_pans_patches) == 0:
        # If no gold pan is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    if gold_pans_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16538076,What does the man that is not tall wear?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if not man_patch.verify_property(""man"", ""tall""):
            return man_patch.simple_query(""What does the man that is not tall wear?"")"
5483644,"On which side is the woman, the left or the right?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    if woman_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the animal in this photograph?"")"
1290926,Are there either any life vests or flags?," # image_patch = ImagePatch(image)
    life_vests_patches = image_patch.find(""life vests"")
    flags_patches = image_patch.find(""flags"")
    # Question assumes only one life vest patch and one flag patch
    if len(life_vests_patches) == 0 and len(flags_patches) == 0:
        # If no life vest or flag is found, query the image directly
        return image_patch.simple_query(""Are there either any life vests or flags?"")
    if len(life_vests_patches) == 0:
        return ""yes"" if len(flags_patches) > 0 else ""no""
    if len(flags_patches) == 0:
        return ""yes"" if len(life_vests_patches) > 0 else ""no""
    return ""yes"""
18273738,Do you see a cup?," # cup is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see a cup?"")"
4211922,Who is sitting on the table?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is sitting on the table?"")
    for person_patch in person_patches:
        is_sitting_on_table = (person_patch.simple_query(""Is the person sitting on the table?"") == ""yes"")
        if is_sitting_on_table:
            return person_patch.simple_query(""Who is sitting on the table?"") # crop would include the table so keep it in the query
    # If no person is sitting on the table, pick the first person
    return person_patches[0].simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?," # girl is a relation, so ask directly
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    for girl_patch in girl_patches:
        left_girl_patches = image_patch.find(""girl"", left=girl_patch.left)
        # Question assumes only one left girl patch
        if len(left_girl_patches) == 0:
            return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
        left_girl_patch = left_girl_patches[0]
        return left_girl_patch.simple_query(""What is the color of the girl to the left of the other girl?"")"
6599090,What is the person to the right of the car holding?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    for person_patch in person_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if car_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the car holding?"") # crop would include the car so keep it in the query
    # If no person is to the right of the car, pick the first person
    return person_patches[0].simple_query(""What is the person to the right of the car holding?"")"
1174895,What is the vehicle in the parking lot?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    for vehicle_patch in vehicle_patches:
        return vehicle_patch.simple_query(""What is the vehicle in the parking lot?"") # crop would include the vehicle so keep it in the query"
14755158,Who is the woman in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Who is the woman in front of?"")
    for woman_patch in woman_patches:
        is_in_front_of = (woman_patch.simple_query(""Is the woman in front of someone?"") == ""yes"")
        if is_in_front_of:
            return woman_patch.simple_query(""Who is the woman in front of?"") # crop would include the person so keep it in the query
    # If no woman is in front of someone, pick the first woman
    return woman_patches[0].simple_query(""Who is the woman in front of?"")"
18349161,Where does the cow that is standing stand?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    for cow_patch in cow_patches:
        return cow_patch.simple_query(""Where does the cow that is standing stand?"")"
7472884,On which side is the tap?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    if tap_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
111051831,On which side of the image is the cabinet?," # returns ""left"" or ""right""
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    if cabinet_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    for bag_patch in bag_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > bag_patch.horizontal_center:
                return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    for artwork_patch in artwork_patches:
        computer_desk_patches = image_patch.find(""computer desk"")
        for computer_desk_patch in computer_desk_patches:
            if artwork_patch.verify_property(""artwork"", ""material"") == computer_desk_patch.verify_property(""computer desk"", ""material""):
                return ""yes""
    return ""no"""
14298125,Who is playing Wii?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")"
9382689,What's the floor made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What's the floor made of?"")
    return floor_patches[0].simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the dress?"")
    for person_patch in person_patches:
        is_wearing_dress = (person_patch.simple_query(""Is the person wearing a dress?"") == ""yes"")
        if is_wearing_dress:
            return person_patch.simple_query(""Who is wearing the dress?"") # crop would include the dress so keep it in the query
    # If no person is wearing a dress, pick the first person
    return person_patches[0].simple_query(""Who is wearing the dress?"")"
15127108,Does the tea pot above the receipt look short and white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")"
15632653,Which room is it?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
490992,Is the fence on the left side or on the right of the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    mountains_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountains_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Do the mountains look rocky?"")
    for mountain_patch in mountains_patches:
        is_rocky = mountain_patch.verify_property(""mountain"", ""rocky"")
        if is_rocky:
            return ""yes""
    return ""no"""
17573742,Is the woman to the right of the camera wearing a coat?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    for woman_patch in woman_patches:
        is_wearing_coat = (woman_patch.simple_query(""Is the woman wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return woman_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"") # crop would include the coat so keep it in the query
    # If no woman is wearing a coat, pick the first woman
    return woman_patches[0].simple_query(""Is the woman to the right of the camera wearing a coat?"")"
3395780,Is the vehicle to the left of the parking meter covered in rain?," 
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    for vehicle_patch in vehicle_patches:
        parking_meter_patches = image_patch.find(""parking meter"")
        for parking_meter_patch in parking_meter_patches:
            if parking_meter_patch.horizontal_center > vehicle_patch.horizontal_center:
                return ""yes""
    return ""no"""
1542668,Is there a black laptop or desk?," # laptop or desk
    image_patch = ImagePatch(image)
    is_laptop = image_patch.exists(""laptop"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_laptop or is_desk)"
1655442,What type of food is to the right of the waffles that are to the right of the person?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for person_patch in person_patches:
        waffles_patches = image_patch.find(""waffles"")
        # Question assumes only one waffles patch
        if len(waffles_patches) == 0:
            return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
        for waffles_patch in waffles_patches:
            food_patches = image_patch.find(""food"")
            # Question assumes only one food patch
            if len(food_patches) == 0:
                return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
            for food_patch in food_patches:
                if food_patch.horizontal_center > waffles_patch.horizontal_center:
                    return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")"
395290,How large is the bag?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"")"
16138893,Are there both motorcycles and cars in this scene?," # motorcycle and car are not in the same image
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, pick the first person
    return person_patches[0].simple_query(""Who is wearing shorts?"")"
171032184,What hangs from the windows?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?," # spoon and plate are not relational verbs
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    for giraffe_patch in giraffe_patches:
        tree_patches = image_patch.find(""tree"")
        for tree_patch in tree_patches:
            if tree_patch.horizontal_center > giraffe_patch.horizontal_center:
                return tree_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"") # crop would include the tree so keep it in the query
    # If no tree is found, pick the first tree
    return tree_patches[0].simple_query(""What is in front of the giraffe that the tree is behind of?"")"
8197176,What color is the jacket that the man wears?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return ""no""
    for jacket_patch in jacket_patches:
        if jacket_patch.simple_query(""Is the jacket that the man wears blue?"") == ""yes"":
            return jacket_patch.simple_query(""What color is the jacket that the man wears?"") # crop would include the jacket so keep it in the query
    # If no jacket is found, query the image directly
    return image_patch.simple_query(""What color is the jacket that the man wears?"")"
3440931,What are that pieces of furniture called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What are that pieces of furniture called?"")
    for furniture_patch in furniture_patches:
        return furniture_patch.simple_query(""What are that pieces of furniture called?"")"
337924,What is the fruit that is to the left of the chair?," # fruit is a noun, so ask directly
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")
    for fruit_patch in fruit_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if fruit_patch.horizontal_center < chair_patch.horizontal_center:
                return fruit_patch.simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bowls_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowls_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    for bowl_patch in bowls_patches:
        is_on_patch = bowl_patch.simple_query(""Is the bowl on a patch?"")
        if is_on_patch:
            return bowl_patch.simple_query(""What do you think are the bowls on?"") # crop would include the patch so keep it in the query
    # If no bowl is on a patch, pick the first bowl
    return bowls_patches[0].simple_query(""What do you think are the bowls on?"")"
18330260,Is the sky above the trees open and clear?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky above the trees open and clear?"")
    for sky_patch in sky_patches:
        trees_patches = image_patch.find(""trees"")
        for trees_patch in trees_patches:
            if trees_patch.vertical_center > sky_patch.vertical_center:
                return ""no""
    return ""yes"""
14119691,Does the squirrel to the right of the stuffed dog look white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    # Question assumes only one squirrel patch
    if len(squirrel_patches) == 0:
        # If no squirrel is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for squirrel_patch in squirrel_patches:
        is_white = squirrel_patch.verify_property(""squirrel"", ""white"")
        if is_white:
            return ""yes""
    return ""no"""
18437694,Does the clock to the right of the statue have gold color and tiny size?," # clock is a relational verb
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Does the clock to the right of the statue have gold color and tiny size?"")
    for clock_patch in clock_patches:
        is_gold = clock_patch.verify_property(""clock"", ""gold"")
        is_tiny = clock_patch.verify_property(""clock"", ""tiny"")
        if is_gold and is_tiny:
            return ""yes""
    return ""no"""
1252960,Where was the photo taken?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?," # frisbee is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a frisbee on the grass?"")"
13180513,Are there either cakes or containers in the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?," # black cars or motorcycles
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?," # blue car is the object, the vehicle to the left of the police officer is the reference
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    for blue_car_patch in blue_car_patches:
        vehicle_to_left_of_police_officer_patches = image_patch.find(""vehicle to the left of the police officer"")
        # Question assumes only one vehicle to the left of the police officer patch
        if len(vehicle_to_left_of_police_officer_patches) == 0:
            return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
        for vehicle_to_left_of_police_officer_patch in vehicle_to_left_of_police_officer_patches:
            if vehicle_to_left_of_police_officer_patch.horizontal_center > blue_car_patch.horizontal_center:
                return ""behind""
            else:
                return ""in front of"""
5785831,What is in the glass?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    # Question assumes only one glass patch
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is in the glass?"")
    for glass_patch in glass_patches:
        is_water = (glass_patch.simple_query(""Is the glass containing water?"") == ""yes"")
        if is_water:
            return glass_patch.simple_query(""What is in the glass?"") # crop would include the water so keep it in the query
    # If no glass is containing water, pick the first glass
    return glass_patches[0].simple_query(""What is in the glass?"")"
19246241,Are there any brown benches or buckets?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_bucket = image_patch.exists(""bucket"")
    return bool_to_yesno(is_brown_bench or is_bucket)"
3243803,"Where in the picture is the spoon, on the right or on the left?"," # spoon is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")"
6952486,Does the shirt look white?," # shirt is a property of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""shirt"", ""white""):
            return ""yes""
    return ""no"""
17401425,Is there a bag that is not brown?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if bag_patch.verify_property(""bag"", ""brown"") == False:
            return ""yes""
    return ""no"""
481240,"Which kind of furniture is large, the shelf or the cupboard?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""large""):
            if furniture_patch.verify_property(""furniture"", ""shelf""):
                return ""shelf""
            else:
                return ""cupboard""
    return ""no furniture is large"""
8531943,Are there any screens or bags?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    screens_patches = image_patch.find(""screen"")
    # Question assumes only one screen patch
    if len(screens_patches) == 0:
        # If no screen is found, query the image directly
        return image_patch.simple_query(""Are there any screens or bags?"")
    for screen_patch in screens_patches:
        bags_patches = image_patch.find(""bag"")
        for bag_patch in bags_patches:
            if bag_patch.horizontal_center > screen_patch.horizontal_center:
                return ""yes""
    return ""no"""
1969545,What is she wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    for person_patch in person_patches:
        return person_patch.simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    for appliance_patch in appliance_patches:
        is_white = appliance_patch.verify_property(""appliance"", ""white"")
        if not is_white:
            return appliance_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"") # crop would include the white so keep it in the query
    # If no appliance is not white, pick the first appliance
    return appliance_patches[0].simple_query(""Which appliance is not white, the freezer or the ice maker?"")"
1051870,Are there chairs or tables that are not green?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    is_not_green = image_patch.verify_property(""chairs and tables"", ""green"")
    return bool_to_yesno(is_chair or is_table and is_not_green)"
1366363,Does the taxi have a different color than the truck?," 
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    for taxi_patch in taxi_patches:
        truck_patches = image_patch.find(""truck"")
        for truck_patch in truck_patches:
            if taxi_patch.verify_property(""taxi"", ""color"") != truck_patch.verify_property(""truck"", ""color""):
                return ""yes""
    return ""no"""
5460839,In which part of the image is the dog?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    if dog_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
18899476,What type of vegetable is to the right of the rice that is on the plate?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    for vegetable_patch in vegetable_patches:
        is_on_plate = vegetable_patch.verify_property(""vegetable"", ""on the plate"")
        if is_on_plate:
            rice_patches = image_patch.find(""rice"")
            # Question assumes only one rice patch
            if len(rice_patches) == 0:
                # If no rice is found, query the image directly
                return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
            for rice_patch in rice_patches:
                if vegetable_patch.horizontal_center > rice_patch.horizontal_center:
                    return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"") # crop would include the rice so keep it in the query
    # If no vegetable is to the right of the rice, pick the first vegetable
    return vegetable_patches[0].simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")"
8606903,What food item is not wide?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""wide""):
            return food_patch.simple_query(""What food item is not wide?"") # crop would include the food item so keep it in the query
    # If no food is not wide, pick the first food
    return food_patches[0].simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?," 
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Is there an elephant near the pond?"")
    for elephant_patch in elephant_patches:
        pond_patches = image_patch.find(""pond"")
        for pond_patch in pond_patches:
            if pond_patch.horizontal_center > elephant_patch.horizontal_center:
                return ""yes""
    return ""no"""
1575941,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    for desk_patch in desk_patches:
        floor_patches = image_patch.find(""floor"")
        for floor_patch in floor_patches:
            if floor_patch.vertical_center < desk_patch.vertical_center:
                return floor_patch.simple_query(""What is the color of the floor that the desk is on top of?"") # crop would include the desk so keep it in the query
    # If no floor is found, query the image directly
    return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")"
16654241,Is the TV on the left or on the right?," # TV is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the TV on the left or on the right?"")"
18685233,Which kind of vehicle is to the left of the flags?," # vehicle is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")"
9796068,Are there both a fence and a sheep in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?," # blue is a property
    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue"")
    # Question assumes only one blue patch
    if len(blue_patches) == 0:
        # If no blue is found, query the image directly
        return image_patch.simple_query(""Do you see any blue blanket or towel?"")
    for blue_patch in blue_patches:
        towel_patches = image_patch.find(""towel"")
        for towel_patch in towel_patches:
            if towel_patch.simple_query(""Is the towel blue?"") == ""yes"":
                return ""yes""
    return ""no"""
1110330,Is the pillow to the left of the frog cream colored or green?," # pillow is the object, frog is the subject
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    for pillow_patch in pillow_patches:
        frog_patches = image_patch.find(""frog"")
        for frog_patch in frog_patch:
            if frog_patch.horizontal_center < pillow_patch.horizontal_center:
                return ""green""
            else:
                return ""cream"""
511507,Is the antenna on the aircraft?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the antenna on the aircraft?"")"
10464417,"In which part is the tent, the top or the bottom?"," # tent is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")"
10816730,Is the tree in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tree in front of the building?"")"
18766115,Who is walking?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is walking?"")
    for person_patch in person_patches:
        return person_patch.simple_query(""Who is walking?"")"
10625851,Are there either any fruits or plates in the image?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    for person_patch in person_patches:
        is_wearing_coat = (person_patch.simple_query(""Is the person wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return person_patch.simple_query(""Is the person wearing a coat?"") # crop would include the coat so keep it in the query
    # If no person is wearing a coat, pick the first person
    return person_patches[0].simple_query(""Is the person wearing a coat?"")"
4194722,Is the man wearing a helmet?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    for man_patch in man_patches:
        is_wearing_helmet = (man_patch.simple_query(""Is the man wearing a helmet?"") == ""yes"")
        if is_wearing_helmet:
            return man_patch.simple_query(""Is the man wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no man is wearing a helmet, pick the first man
    return man_patches[0].simple_query(""Is the man wearing a helmet?"")"
414248,"What animal are the women near the ocean riding, a pig or a horse?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""horse""):
            return ""horse""
        elif animal_patch.verify_property(""animal"", ""pig""):
            return ""pig""
    return ""no"""
683094,Who is wearing the shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing the shirt?"")"
12140603,What device is to the left of the headphones?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for device_patch in device_patches:
        headphones_patches = image_patch.find(""headphones"")
        for headphones_patch in headphones_patches:
            if device_patch.horizontal_center < headphones_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the headphones?"") # crop would include the headphones so keep it in the query
    # If no device is to the left of the headphones, pick the first device
    return device_patches[0].simple_query(""What device is to the left of the headphones?"")"
5575209,The flowers are where?," # flowers are where?
    image_patch = ImagePatch(image)
    flowers_patches = image_patch.find(""flowers"")
    # Question assumes only one flowers patch
    if len(flowers_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    return flowers_patches[0].simple_query(""The flowers are where?"")"
8773829,Which kind of furniture is made of wood?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        is_made_of_wood = furniture_patch.verify_property(""furniture"", ""made of wood"")
        if is_made_of_wood:
            return furniture_patch.simple_query(""Which kind of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is made of wood?"")"
12636428,Which kind of animal is black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""Which kind of animal is black?"")"
1020584,What animals is the car behind of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What animals is the car behind of?"")
    for car_patch in car_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return image_patch.simple_query(""What animals is the car behind of?"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > car_patch.horizontal_center:
                return animal_patch.simple_query(""What animals is the car behind of?"")"
11879418,The man is standing on what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is standing on what?"")
    for man_patch in man_patches:
        is_on = (man_patch.simple_query(""Is the man standing on something?"") == ""yes"")
        if is_on:
            return man_patch.simple_query(""The man is standing on what?"") # crop would include the object so keep it in the query
    # If no man is standing on something, pick the first man
    return man_patches[0].simple_query(""The man is standing on what?"")"
12334288,What device is to the left of the cabinet?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the cabinet?"")
    for device_patch in device_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > device_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the cabinet?"") # crop would include the cabinet so keep it in the query
    # If no device is to the left of the cabinet, pick the first device
    return device_patches[0].simple_query(""What device is to the left of the cabinet?"")"
691610,Is the monitor to the left of a book?," 
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Is the monitor to the left of a book?"")
    for monitor_patch in monitor_patches:
        book_patches = image_patch.find(""book"")
        for book_patch in book_patches:
            if book_patch.horizontal_center < monitor_patch.horizontal_center:
                return ""yes""
    return ""no"""
7552714,Is the color of the jacket black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    for jacket_patch in jacket_patches:
        return jacket_patch.verify_property(""jacket"", ""black"")"
8492422,Is the man to the left of a boy?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    for man_patch in man_patches:
        boy_patches = image_patch.find(""boy"")
        for boy_patch in boy_patches:
            if man_patch.horizontal_center < boy_patch.horizontal_center:
                return ""yes""
    return ""no"""
13248061,What type of device is to the left of the keyboard in the bottom of the image?," # left of the keyboard in the bottom of the image
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")"
18252454,What is common to the roof and the sky?," # roof and sky are not in the same image
    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    # Question assumes only one roof patch
    if len(roof_patches) == 0:
        # If no roof is found, query the image directly
        return image_patch.simple_query(""What is common to the roof and the sky?"")
    for roof_patch in roof_patches:
        sky_patches = image_patch.find(""sky"")
        for sky_patch in sky_patches:
            if roof_patch.lower < sky_patch.lower and roof_patch.upper > sky_patch.upper:
                return ""sky""
    return ""roof"""
14443687,What do the cat and the book have in common?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    for cat_patch in cat_patches:
        book_patches = image_patch.find(""book"")
        for book_patch in book_patches:
            if cat_patch.verify_property(""cat"", ""has"") == book_patch.verify_property(""book"", ""has""):
                return cat_patch.verify_property(""cat"", ""has"") # crop would include the book so keep it in the query
    # If no cat and book have the same property, pick the first cat
    return cat_patches[0].verify_property(""cat"", ""has"")"
14571335,Who is wearing trousers?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing trousers?"")
    for person_patch in person_patches:
        is_wearing_trousers = (person_patch.simple_query(""Is the person wearing trousers?"") == ""yes"")
        if is_wearing_trousers:
            return person_patch.simple_query(""Who is wearing trousers?"") # crop would include the trousers so keep it in the query
    # If no person is wearing trousers, pick the first person
    return person_patches[0].simple_query(""Who is wearing trousers?"")"
474885,Who wears a cap?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    for person_patch in person_patches:
        cap_patches = image_patch.find(""cap"")
        for cap_patch in cap_patches:
            return cap_patch.simple_query(""Who wears a cap?"") # crop would include the cap so keep it in the query
    # If no person is wearing a cap, pick the first person
    return person_patches[0].simple_query(""Who wears a cap?"")"
141013015,"What color is the toilet, brown or white?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    for toilet_patch in toilet_patches:
        is_brown = toilet_patch.verify_property(""toilet"", ""brown"")
        is_white = toilet_patch.verify_property(""toilet"", ""white"")
        if is_brown:
            return ""brown""
        elif is_white:
            return ""white""
    return ""unknown"""
5515816,On which side of the image is the fence?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16774696,What is the surfer wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    # Question assumes only one surfer patch
    if len(surfer_patches) == 0:
        # If no surfer is found, query the image directly
        return image_patch.simple_query(""What is the surfer wearing?"")
    for surfer_patch in surfer_patches:
        is_wearing_sunglasses = (surfer_patch.simple_query(""Is the surfer wearing sunglasses?"") == ""yes"")
        if is_wearing_sunglasses:
            return surfer_patch.simple_query(""What is the surfer wearing?"") # crop would include the sunglasses so keep it in the query
    # If no surfer is wearing sunglasses, pick the first surfer
    return surfer_patches[0].simple_query(""What is the surfer wearing?"")"
13701956,Is there any grass or sand that is not dry?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one grass patch and one sand patch
    if len(grass_patches) == 0 or len(sand_patches) == 0:
        # If no grass or sand is found, query the image directly
        return image_patch.simple_query(""Is there any grass or sand that is not dry?"")
    for grass_patch in grass_patches:
        is_not_dry = (grass_patch.simple_query(""Is the grass not dry?"") == ""yes"")
        if is_not_dry:
            return ""yes""
    for sand_patch in sand_patches:
        is_not_dry = (sand_patch.simple_query(""Is the sand not dry?"") == ""yes"")
        if is_not_dry:
            return ""yes""
    return ""no"""
11606870,Is there a cow or a zebra in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""fire hydrant"", ""modern"")"
942308,Is the cup empty or full?," # cup is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the cup empty or full?"")"
15815976,Is the woman wearing a scarf?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    for woman_patch in woman_patches:
        is_wearing_scarf = (woman_patch.simple_query(""Is the woman wearing a scarf?"") == ""yes"")
        if is_wearing_scarf:
            return woman_patch.simple_query(""Is the woman wearing a scarf?"") # crop would include the scarf so keep it in the query
    # If no woman is wearing a scarf, pick the first woman
    return woman_patches[0].simple_query(""Is the woman wearing a scarf?"")"
3193231,Do you see either parking meters or brooms in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)"
314218,Is the sign in front of the bridge small and white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    for sign_patch in sign_patches:
        is_small = sign_patch.verify_property(""sign"", ""small"")
        is_white = sign_patch.verify_property(""sign"", ""white"")
        if is_small and is_white:
            return ""yes""
    return ""no"""
18130465,Does the umbrella that is not dry look orange and open?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    for umbrella_patch in umbrella_patches:
        is_not_dry = umbrella_patch.verify_property(""umbrella"", ""not dry"")
        is_orange = umbrella_patch.verify_property(""umbrella"", ""orange"")
        is_open = umbrella_patch.verify_property(""umbrella"", ""open"")
        if is_not_dry and is_orange and is_open:
            return ""yes""
    return ""no"""
7920817,What's in the paper?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""What's in the paper?"")
    for paper_patch in paper_patches:
        is_in_paper = (paper_patch.simple_query(""Is the paper in the paper?"") == ""yes"")
        if is_in_paper:
            return paper_patch.simple_query(""What's in the paper?"") # crop would include the paper so keep it in the query
    # If no paper is in the paper, pick the first paper
    return paper_patches[0].simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    for bun_patch in bun_patches:
        is_on_top = (bun_patch.simple_query(""Is the bun on top?"") == ""yes"")
        if is_on_top:
            return bun_patch.simple_query(""What is on the bun in the top?"") # crop would include the bun so keep it in the query
    # If no bun is on top, pick the first bun
    return bun_patches[0].simple_query(""What is on the bun in the top?"")"
16929928,What is the fence made of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    for fence_patch in fence_patches:
        return fence_patch.simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    for woman_patch in woman_patches:
        lady_patches = image_patch.find(""lady"")
        for lady_patch in lady_patches:
            if lady_patch.horizontal_center > woman_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
17993299,Is the horse to the left of a car?," 
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the horse to the left of a car?"")
    for horse_patch in horse_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patch:
            if car_patch.horizontal_center < horse_patch.horizontal_center:
                return ""yes""
    return ""no"""
8717022,Is the small animal to the left of the vehicle that looks silver?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        # If no small animal is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    for small_animal_patch in small_animal_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.color == ""silver"":
                if small_animal_patch.horizontal_center < vehicle_patch.horizontal_center:
                    return ""yes""
    return ""no"""
2998707,Which color is the chair that is on the right?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            return chair_patch.simple_query(""Which color is the chair that is on the right?"") # crop would include the chair so keep it in the query
    # If no chair is on the right, pick the first chair
    return chair_patches[0].simple_query(""Which color is the chair that is on the right?"")"
171017786,Do you see any cups to the left of the monitor?," 
    image_patch = ImagePatch(image)
    cups_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cups_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    for cup_patch in cups_patches:
        monitor_patches = image_patch.find(""monitor"")
        for monitor_patch in monitor_patches:
            if cup_patch.horizontal_center < monitor_patch.horizontal_center:
                return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?," # girl is the subject, glasses is the object
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    for girl_patch in girl_patches:
        glasses_patches = image_patch.find(""glasses"")
        for glasses_patch in glasses_patches:
            if glasses_patch.horizontal_center > girl_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
1941568,What animal is in the water?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""in water""):
            return animal_patch.simple_query(""What animal is in the water?"") # crop would include the water so keep it in the query
    # If no animal is in the water, pick the first animal
    return animal_patches[0].simple_query(""What animal is in the water?"")"
17577787,Does the man's hair look short and white?," # hair is a property of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    return man_patch.verify_property(""man"", ""hair"", ""short and white"")"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    chairs_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chairs_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    for chair_patch in chairs_patches:
        if chair_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
9825336,Which kind of furniture is the mat lying on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    for mat_patch in mat_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.simple_query(""Is the furniture lying on the mat?"") == ""yes"":
                return furniture_patch.simple_query(""Which kind of furniture is the mat lying on?"") # crop would include the mat so keep it in the query
    # If no furniture is lying on the mat, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is the mat lying on?"")"
11222427,Do you see fences or elephants?," 
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    for furniture_patch in furniture_patches:
        is_not_white = (furniture_patch.simple_query(""Is the furniture not white?"") == ""yes"")
        if is_not_white:
            is_entertainment_center = (furniture_patch.simple_query(""Is the furniture the entertainment center?"") == ""yes"")
            is_bed = (furniture_patch.simple_query(""Is the furniture the bed?"") == ""yes"")
            if not is_entertainment_center and not is_bed:
                return furniture_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"") # crop would include the furniture so keep it in the query
    # If no furniture is not white, the entertainment center or the bed, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")"
1152020,Do you see either any plate or tomato that are red?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_tomato = image_patch.exists(""tomato"")
    is_red = image_patch.exists(""red"")
    return bool_to_yesno(is_plate and is_red or is_tomato and is_red)"
8961520,Who is surfing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"")"
18106780,Which room is it?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
1892692,What color do you think the bowl that is to the right of the person is?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for bowl_patch in bowl_patches:
        if bowl_patch.verify_property(""bowl"", ""color"") == ""red"":
            return ""red""
        elif bowl_patch.verify_property(""bowl"", ""color"") == ""blue"":
            return ""blue""
        elif bowl_patch.verify_property(""bowl"", ""color"") == ""green"":
            return ""green""
        elif bowl_patch.verify_property(""bowl"", ""color"") == ""yellow"":
            return ""yellow""
        elif bowl_patch.verify_property(""bowl"", ""color"") == ""purple"":
            return ""purple""
        elif bowl_patch.verify_property(""bowl"", ""color"") == ""orange"":
            return ""orange""
        elif bowl_patch.verify_property(""bowl"", ""color"") == ""brown"":
            return ""brown""
        elif bowl_patch.verify_property(""bowl"", ""color"") == ""pink"":
            return ""pink""
        elif bowl_patch.verify_property(""bowl"", ""color"") == ""black"":
            return ""black""
        elif bowl_patch.verify_property(""bowl"", ""color"") == ""white"":
            return ""white""
        elif bowl_patch.verify_property(""b"
6952082,What color is the hair?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the hair?"")"
3768067,What color is the pot the statue is to the right of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    for statue_patch in statue_patches:
        pot_patches = image_patch.find(""pot"")
        for pot_patch in pot_patches:
            if pot_patch.horizontal_center > statue_patch.horizontal_center:
                return pot_patch.simple_query(""What color is the pot the statue is to the right of?"") # crop would include the statue so keep it in the query
    # If no pot is to the right of the statue, pick the first pot
    return pot_patches[0].simple_query(""What color is the pot the statue is to the right of?"")"
17866761,Is the clear glass on the shelf of the table?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")"
798020,Does the skirt look black or yellow?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    for skirt_patch in skirt_patches:
        is_black = skirt_patch.verify_property(""skirt"", ""black"")
        is_yellow = skirt_patch.verify_property(""skirt"", ""yellow"")
        if is_black or is_yellow:
            return ""yes""
    return ""no"""
828981,How old is he?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""How old is he?"")"
7236463,Of what color is the book?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    for book_patch in book_patches:
        return book_patch.simple_query(""Of what color is the book?"")"
6376684,What color is the car to the left of the train car?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What color is the car to the left of the train car?"")"
786798,Is this a photo of a beach?," # beach is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a photo of a beach?"")"
19836753,What vehicles are to the left of the fence?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vehicles_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicles_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    for vehicle_patch in vehicles_patches:
        if vehicle_patch.horizontal_center < image_patch.vertical_center:
            return vehicle_patch.simple_query(""What vehicles are to the left of the fence?"") # crop would include the fence so keep it in the query
    # If no vehicle is to the left of the fence, pick the first vehicle
    return vehicles_patches[0].simple_query(""What vehicles are to the left of the fence?"")"
15284615,Who is playing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is playing?"")
    for person_patch in person_patches:
        is_playing = (person_patch.simple_query(""Is the person playing?"") == ""yes"")
        if is_playing:
            return person_patch.simple_query(""Who is playing?"") # crop would include the shirt so keep it in the query
    # If no person is playing, pick the first person
    return person_patches[0].simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    for man_patch in man_patches:
        remote_control_patches = image_patch.find(""remote control"")
        # Question assumes only one remote control patch
        if len(remote_control_patches) == 0:
            return ""no""
        for remote_control_patch in remote_control_patches:
            if man_patch.simple_query(""Is the man that is walking holding a remote control?"") == ""yes"":
                return ""yes""
    return ""no"""
17746396,What's the boy wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    for boy_patch in boy_patches:
        return boy_patch.simple_query(""What's the boy wearing?"") # crop would include the shirt so keep it in the query"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?," # mug is to the right of the bottle, which is to the right of the tap
    image_patch = ImagePatch(image)
    mug_patches = image_patch.find(""mug"")
    # Question assumes only one mug patch
    if len(mug_patches) == 0:
        # If no mug is found, query the image directly
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    for mug_patch in mug_patches:
        bottle_patches = image_patch.find(""bottle"")
        # Question assumes only one bottle patch
        if len(bottle_patches) == 0:
            # If no bottle is found, query the image directly
            return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
        for bottle_patch in bottle_patches:
            tap_patches = image_patch.find(""tap"")
            # Question assumes only one tap patch
            if len(tap_patches) == 0:
                # If no tap is found, query the image directly
                return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
            for tap_patch in tap_patches:
                if tap_patch.horizontal_center < bottle_patch.horizontal_center < mug_patch.horizontal_center:
                    return ""yes""
    return ""no"""
13826837,What color is the door?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?," 
    image_patch = ImagePatch(image)
    return image_patch.exists(""horse"")"
2964690,What is in front of the mountains?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?," 
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for truck_patch in truck_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
                return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    for scarf_patch in scarf_patches:
        is_long = scarf_patch.verify_property(""scarf"", ""long"")
        is_blue = scarf_patch.verify_property(""scarf"", ""blue"")
        if is_long and is_blue:
            return ""yes""
    return ""no"""
1189986,Is the man behind the elephant holding a surfboard?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    man_patch = man_patches[0]
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        return ""no""
    for elephant_patch in elephant_patches:
        if elephant_patch.horizontal_center > man_patch.horizontal_center:
            surfboard_patches = image_patch.find(""surfboard"")
            # Question assumes only one surfboard patch
            if len(surfboard_patches) == 0:
                return ""no""
            for surfboard_patch in surfboard_patches:
                if man_patch.lower < surfboard_patch.lower and man_patch.upper > surfboard_patch.upper:
                    return ""yes""
    return ""no"""
8792466,Which color is the closed window?," # window is a closed window
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    for window_patch in window_patches:
        if window_patch.verify_property(""window"", ""closed""):
            return window_patch.simple_query(""Which color is the closed window?"")"
10188423,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    for vegetable_patch in vegetable_patches:
        is_to_the_right_of_girl = vegetable_patch.simple_query(""Is the vegetable to the right of the girl?"") == ""yes""
        if is_to_the_right_of_girl:
            return vegetable_patch.simple_query(""What kind of vegetable is to the right of the girl?"") # crop would include the girl so keep it in the query
    # If no vegetable is to the right of the girl, pick the first vegetable
    return vegetable_patches[0].simple_query(""What kind of vegetable is to the right of the girl?"")"
4929965,Is there a black racket or clock in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_black_clock = image_patch.exists(""black clock"")
    return bool_to_yesno(is_black_racket or is_black_clock)"
4782038,What kind of animal is white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What kind of animal is white?"") # crop would include the white so keep it in the query
    # If no animal is white, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is white?"")"
14658201,Is the sheep that looks white and brown made of plastic?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    for sheep_patch in sheep_patches:
        is_white = sheep_patch.verify_property(""sheep"", ""white"")
        is_brown = sheep_patch.verify_property(""sheep"", ""brown"")
        if is_white and is_brown:
            is_plastic = sheep_patch.verify_property(""sheep"", ""plastic"")
            if is_plastic:
                return ""yes""
    return ""no"""
1441865,Do you see any boxes on the table under the grill?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    grill_patches = image_patch.find(""grill"")
    # Question assumes only one grill patch
    if len(grill_patches) == 0:
        # If no grill is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    grill_patch = grill_patches[0]
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        return ""no""
    for table_patch in table_patches:
        if table_patch.lower > grill_patch.lower and table_patch.lower < grill_patch.lower + grill_patch.height:
            box_patches = image_patch.find(""box"")
            # Question assumes only one box patch
            if len(box_patches) == 0:
                return ""no""
            for box_patch in box_patches:
                if box_patch.lower > table_patch.lower and box_patch.lower < table_patch.lower + table_patch.height:
                    return ""yes""
    return ""no"""
1424926,What is the tag on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    tag_patches = image_patch.find(""tag"")
    # Question assumes only one tag patch
    if len(tag_patches) == 0:
        # If no tag is found, query the image directly
        return image_patch.simple_query(""What is the tag on?"")
    for tag_patch in tag_patches:
        is_on = (tag_patch.simple_query(""Is the tag on?"") == ""yes"")
        if is_on:
            return tag_patch.simple_query(""What is the tag on?"") # crop would include the tag so keep it in the query
    # If no tag is on, pick the first tag
    return tag_patches[0].simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    for person_patch in person_patches:
        laptop_patches = image_patch.find(""laptop"")
        # Question assumes only one laptop patch
        if len(laptop_patches) == 0:
            # If no laptop is found, query the image directly
            return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
        for laptop_patch in laptop_patches:
            furniture_patches = image_patch.find(""furniture"")
            # Question assumes only one furniture patch
            if len(furniture_patches) == 0:
                # If no furniture is found, query the image directly
                return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
            for furniture_patch in furniture_patches:
                if furniture_patch.horizontal_center > person_patch.horizontal_center:
                    return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")"
3635257,Is there any freezer in this photo?," # image_patch = ImagePatch(image)
    freezer_patches = image_patch.find(""freezer"")
    # Question assumes only one freezer patch
    if len(freezer_patches) == 0:
        # If no freezer is found, query the image directly
        return image_patch.simple_query(""Is there any freezer in this photo?"")
    return ""yes"""
8821026,Are there either any bags or chairs?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    for vehicle_patch in vehicle_patches:
        is_bus = (vehicle_patch.simple_query(""Is the vehicle a bus?"") == ""yes"")
        if is_bus:
            return vehicle_patch.simple_query(""In what vehicle is the bus driver?"") # crop would include the driver so keep it in the query
    # If no bus is found, pick the first vehicle
    return vehicle_patches[0].simple_query(""In what vehicle is the bus driver?"")"
17204662,What is that man in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is that man in front of?"")
    for man_patch in man_patches:
        in_front_of_patches = image_patch.find(""in front of"")
        # Question assumes only one in front of patch
        if len(in_front_of_patches) == 0:
            return image_patch.simple_query(""What is that man in front of?"")
        for in_front_of_patch in in_front_of_patches:
            return in_front_of_patch.simple_query(""What is that man in front of?"")"
380866,Are there any girls or radios?," 
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?," # girl is a predicate
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The girl is sitting on what?"")
    for girl_patch in girl_patches:
        is_sitting_on = (girl_patch.simple_query(""Is the girl sitting on something?"") == ""yes"")
        if is_sitting_on:
            return girl_patch.simple_query(""The girl is sitting on what?"") # crop would include the object so keep it in the query
    # If no girl is sitting on something, pick the first girl
    return girl_patches[0].simple_query(""The girl is sitting on what?"")"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?," # left or right
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for lamp_patch in lamp_patches:
        pillow_patches = image_patch.find(""pillow"")
        # Question assumes only one pillow patch
        if len(pillow_patches) == 0:
            return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
        for pillow_patch in pillow_patches:
            if pillow_patch.vertical_center == image_patch.vertical_center:
                if lamp_patch.horizontal_center < pillow_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right"""
16545552,What color do you think is the vehicle the girl is washing?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")"
16719872,Are there motorcycles to the left of the man who is wearing a hat?," # motorcycle is a subcategory of vehicle
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    is_wearing_hat = man_patch.simple_query(""Is the man wearing a hat?"") == ""yes""
    if is_wearing_hat:
        motorcycles_patches = image_patch.find(""motorcycle"")
        # Question assumes only one motorcycle patch
        if len(motorcycles_patches) == 0:
            return ""no""
        for motorcycle_patch in motorcycles_patches:
            if motorcycle_patch.horizontal_center < man_patch.horizontal_center:
                return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    for garbage_can_patch in garbage_can_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
        for person_patch in person_patches:
            stroller_patches = image_patch.find(""stroller"")
            # Question assumes only one stroller patch
            if len(stroller_patches) == 0:
                return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
            for stroller_patch in stroller_patches:
                if stroller_patch.horizontal_center > garbage_can_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left"""
13711589,What do the truck and the street sign have in common?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    for truck_patch in truck_patches:
        street_sign_patches = image_patch.find(""street sign"")
        for street_sign_patch in street_sign_patches:
            if truck_patch.verify_property(""truck"", ""has a"") and street_sign_patch.verify_property(""street sign"", ""has a""):
                return ""has a""
            elif truck_patch.verify_property(""truck"", ""has a"") and street_sign_patch.verify_property(""street sign"", ""has a different""):
                return ""has a different""
            elif truck_patch.verify_property(""truck"", ""has a different"") and street_sign_patch.verify_property(""street sign"", ""has a""):
                return ""has a different""
            elif truck_patch.verify_property(""truck"", ""has a different"") and street_sign_patch.verify_property(""street sign"", ""has a different""):
                return ""has a different""
    return ""has a different"""
10227573,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is the man leading?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""no""
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal being led by the man?"") == ""yes"":
            return animal_patch.simple_query(""What animal is the man leading?"")"
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
    for curtain_patch in curtain_patches:
        dresser_patches = image_patch.find(""dresser"")
        for dresser_patch in dresser_patches:
            furniture_patches = image_patch.find(""furniture"")
            for furniture_patch in furniture_patches:
                if furniture_patch.horizontal_center > curtain_patch.horizontal_center and furniture_patch.horizontal_center < dresser_patch.horizontal_center:
                    return furniture_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"") # crop would include the furniture so keep it in the query
    # If no furniture is found, pick the first furniture
    return furniture_patches[0].simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")"
7190226,Does the puddle look large?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    return bool_to_yesno(puddle_patches[0].verify_property(""puddle"", ""large""))"
11675152,Who throws the frisbee?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who throws the frisbee?"")
    for person_patch in person_patches:
        frisbee_patches = image_patch.find(""frisbee"")
        for frisbee_patch in frisbee_patches:
            if frisbee_patch.simple_query(""Is the frisbee being thrown by the person?"") == ""yes"":
                return person_patch.simple_query(""Who throws the frisbee?"") # crop would include the frisbee so keep it in the query
    # If no person is throwing a frisbee, pick the first person
    return person_patches[0].simple_query(""Who throws the frisbee?"")"
8723676,Which kind of animal is the water on?," # water is a noun
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is the water on?"")
    for water_patch in water_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.vertical_center > water_patch.vertical_center:
                return animal_patch.simple_query(""Which kind of animal is the water on?"")"
61046657,Do you think that traffic light is tall?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you think that traffic light is tall?"")"
9581034,On which side is the wine glass?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the wine glass?"")"
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        pizza_patches = image_patch.find(""pizza"")
        for pizza_patch in pizza_patches:
            if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
                return ""right""
            elif napkin_patch.horizontal_center < pizza_patch.horizontal_center:
                return ""left""
    return ""no"""
18535266,Is the face mask made of the same material as the mask?," # mask is a relation verb
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    # Question assumes only one face mask patch
    if len(face_mask_patches) == 0:
        # If no face mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    for face_mask_patch in face_mask_patches:
        mask_patches = image_patch.find(""mask"")
        for mask_patch in mask_patches:
            if face_mask_patch.verify_property(""face mask"", ""material"") == mask_patch.verify_property(""mask"", ""material""):
                return ""yes""
    return ""no"""
11254215,What is the tan item of furniture?," # tan is a color
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What is the tan item of furniture?"")
    for tan_patch in tan_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.simple_query(""Is the furniture tan?"") == ""yes"":
                return furniture_patch.simple_query(""What is the tan item of furniture?"")"
1852010,How is the device to the right of the device on the desk called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    for device_patch in device_patches:
        is_on_desk = (device_patch.simple_query(""Is the device on the desk?"") == ""yes"")
        if is_on_desk:
            right_device_patches = image_patch.find(""device"")
            # Question assumes only one right device patch
            if len(right_device_patches) == 0:
                # If no right device is found, query the image directly
                return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
            for right_device_patch in right_device_patches:
                if right_device_patch.horizontal_center > device_patch.horizontal_center:
                    return right_device_patch.simple_query(""How is the device to the right of the device on the desk called?"") # crop would include the device on the desk so keep it in the query
    # If no device is on the desk, pick the first device
    return device_patches[0].simple_query(""How is the device to the right of the device on the desk called?"")"
1587534,Is the device on the floor black and large?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    for device_patch in device_patches:
        is_on_floor = (device_patch.simple_query(""Is the device on the floor?"") == ""yes"")
        is_black = (device_patch.simple_query(""Is the device black?"") == ""yes"")
        is_large = (device_patch.simple_query(""Is the device large?"") == ""yes"")
        if is_on_floor and is_black and is_large:
            return ""yes""
    return ""no"""
8470757,Are there any surfboards?," 
    image_patch = ImagePatch(image)
    return image_patch.exists(""surfboard"")"
11273949,Is the shirt white?," # shirt is a property of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    for person_patch in person_patches:
        is_white = person_patch.verify_property(""shirt"", ""white"")
        if is_white:
            return ""yes""
    return ""no"""
7475238,What's the airplane in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    airplane_patches = image_patch.find(""airplane"")
    # Question assumes only one airplane patch
    if len(airplane_patches) == 0:
        # If no airplane is found, query the image directly
        return image_patch.simple_query(""What's the airplane in front of?"")
    for airplane_patch in airplane_patches:
        in_front_of_patches = image_patch.find(""in front of"")
        for in_front_of_patch in in_front_of_patches:
            return in_front_of_patch.simple_query(""What's the airplane in front of?"") # crop would include the airplane so keep it in the query
    # If no airplane is in front of, pick the first airplane
    return airplane_patches[0].simple_query(""What's the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        hose_patches = image_patch.find(""hose"")
        for hose_patch in hose_patches:
            if hose_patch.horizontal_center > horse_patch.horizontal_center:
                return horse_patch.simple_query(""Where does the horse to the right of the hose run?"") # crop would include the hose so keep it in the query
    # If no horse is to the right of the hose, pick the first horse
    return horse_patches[0].simple_query(""Where does the horse to the right of the hose run?"")"
3932624,Are there either any gray chairs or laptops?," # gray chair or laptop
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water brown or blue?"")
    if water_patches[0].verify_property(""water"", ""brown""):
        return ""brown""
    else:
        return ""blue"""
9256263,Which kind of furniture is brown?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""brown""):
            return furniture_patch.simple_query(""Which kind of furniture is brown?"")"
18719769,Is the man wearing glasses?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""Is the man wearing glasses?"")"
18342439,What animal is white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What animal is white?"") # crop would include the white so keep it in the query
    # If no animal is white, pick the first animal
    return animal_patches[0].simple_query(""What animal is white?"")"
8665725,Who is wearing a coat?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a coat?"")
    for person_patch in person_patches:
        is_wearing_coat = (person_patch.simple_query(""Is the person wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return person_patch.simple_query(""Who is wearing a coat?"") # crop would include the coat so keep it in the query
    # If no person is wearing a coat, pick the first person
    return person_patches[0].simple_query(""Who is wearing a coat?"")"
5440407,What vehicle isn't black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""black"") == False:
            return vehicle_patch.simple_query(""What vehicle isn't black?"")"
4104707,On which side of the picture is the oven?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3126763,What is common to the logo and the letter?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is common to the logo and the letter?"")"
18640925,What animal is in the water the man is walking through?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        return ""no""
    for water_patch in water_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return ""no""
        for animal_patch in animal_patches:
            if animal_patch.vertical_center > man_patch.vertical_center and animal_patch.vertical_center < water_patch.vertical_center:
                return animal_patch.simple_query(""What animal is in the water the man is walking through?"")"
125488,What is the man wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What is the man wearing?"")"
5925435,What is the sidewalk made of?," # sidewalk is a noun
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    for coat_patch in coat_patches:
        return coat_patch.simple_query(""What is the pattern of the coat?"")"
4819547,What kind of furniture is white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What kind of furniture is white?"") # crop would include the white so keep it in the query
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is white?"")"
14263174,What color do you think the chair that is to the right of the other chair is?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    man_patch = man_patches[0]
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        return ""no""
    for train_patch in train_patches:
        if train_patch.color == ""green"":
            if man_patch.horizontal_center < train_patch.horizontal_center:
                return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"") # crop would include the train so keep it in the query
    return ""no"""
9239936,Do the cows near the trees have white color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    cows_patches = image_patch.find(""cows"")
    # Question assumes only one cow patch
    if len(cows_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    for cow_patch in cows_patches:
        trees_patches = image_patch.find(""trees"")
        for tree_patch in trees_patches:
            if cow_patch.vertical_center > tree_patch.vertical_center:
                return ""yes""
    return ""no"""
1885178,"In which part of the image is the remote control, the bottom or the top?"," # remote control is a toy
    image_patch = ImagePatch(image)
    remote_patches = image_patch.find(""remote control"")
    # Question assumes only one remote patch
    if len(remote_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    if remote_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12341631,Which color is the bag in the top part?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    for bag_patch in bag_patches:
        if bag_patch.vertical_center < image_patch.vertical_center:
            return bag_patch.simple_query(""Which color is the bag in the top part?"")"
5532909,"What is the weather like, cloudless or maybe rainy?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")"
2618222,What is connected to the open laptop?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""What is connected to the open laptop?"")
    for laptop_patch in laptop_patches:
        connected_patches = image_patch.find(""connected"")
        for connected_patch in connected_patches:
            if connected_patch.horizontal_center > laptop_patch.horizontal_center:
                return connected_patch.simple_query(""What is connected to the open laptop?"") # crop would include the laptop so keep it in the query
    # If no connected object is found, pick the first connected object
    return connected_patches[0].simple_query(""What is connected to the open laptop?"")"
3252220,Of which color is the shirt the man wears?," # shirt is a relational verb
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = man_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no""
    for shirt_patch in shirt_patches:
        return shirt_patch.simple_query(""Of which color is the shirt the man wears?"")"
8947801,What is in the vase?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_in_vase = image_patch.exists(""vase"")
    if is_in_vase:
        return image_patch.simple_query(""What is in the vase?"")
    else:
        return image_patch.simple_query(""What is in the vase?"")"
10841562,Is the color of the pants the same as the shorts?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants is found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    for pants_patch in pants_patches:
        shorts_patches = image_patch.find(""shorts"")
        for shorts_patch in shorts_patches:
            if pants_patch.verify_property(""pants"", ""color"") == shorts_patch.verify_property(""shorts"", ""color""):
                return ""yes""
    return ""no"""
15511838,What kind of furniture is to the left of the bucket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    for furniture_patch in furniture_patches:
        bucket_patches = image_patch.find(""bucket"")
        for bucket_patch in bucket_patches:
            if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"") # crop would include the bucket so keep it in the query
    # If no furniture is to the left of the bucket, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is to the left of the bucket?"")"
14495306,Is there any racket to the right of the person that the woman is to the left of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    for person_patch in person_patches:
        woman_patches = image_patch.find(""woman"")
        # Question assumes only one woman patch
        if len(woman_patches) == 0:
            # If no woman is found, query the image directly
            return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
        for woman_patch in woman_patches:
            racket_patches = image_patch.find(""racket"")
            # Question assumes only one racket patch
            if len(racket_patches) == 0:
                # If no racket is found, query the image directly
                return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
            for racket_patch in racket_patches:
                if racket_patch.horizontal_center > person_patch.horizontal_center and woman_patch.horizontal_center > racket_patch.horizontal_center:
                    return ""yes""
    return ""no"""
14841932,Do the tiles have square shape and black color?," # tiles are not in the image
    image_patch = ImagePatch(image)
    tiles_patches = image_patch.find(""tiles"")
    # Question assumes only one tile patch
    if len(tiles_patches) == 0:
        # If no tiles are found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    return bool_to_yesno(tiles_patches[0].verify_property(""tiles"", ""square"") and tiles_patches[0].verify_property(""tiles"", ""black""))"
41029381,What is the vehicle that is the same color as the shirt called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    for vehicle_patch in vehicle_patches:
        is_same_color_as_shirt = (vehicle_patch.simple_query(""Is the vehicle the same color as the shirt?"") == ""yes"")
        if is_same_color_as_shirt:
            return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"") # crop would include the shirt so keep it in the query
    # If no vehicle is the same color as the shirt, pick the first vehicle
    return vehicle_patches[0].simple_query(""What is the vehicle that is the same color as the shirt called?"")"
161027428,Are there both windows and doors in the image?," # window and door are not in the image
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
16478246,Does the pillow to the right of the man have green color and large size?," # pillow is a relation, so ask directly
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    for pillow_patch in pillow_patches:
        if pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""):
            return ""yes""
    return ""no"""
9450308,Is the happy person wearing a hat?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person happy?"") == ""yes"":
            hat_patches = image_patch.find(""hat"")
            # Question assumes only one hat patch
            if len(hat_patches) == 0:
                # If no hat is found, query the image directly
                return image_patch.simple_query(""Is the happy person wearing a hat?"")
            for hat_patch in hat_patches:
                if hat_patch.horizontal_center > person_patch.horizontal_center:
                    return ""yes""
    return ""no"""
11850389,What place is this?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What place is this?"")"
17250452,What kind of appliance is on the right of the drawer?," # appliance is a noun
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    for appliance_patch in appliance_patches:
        drawer_patches = image_patch.find(""drawer"")
        for drawer_patch in drawer_patches:
            if drawer_patch.horizontal_center > appliance_patch.horizontal_center:
                return appliance_patch.simple_query(""What kind of appliance is on the right of the drawer?"") # crop would include the drawer so keep it in the query
    # If no appliance is on the right of the drawer, pick the first appliance
    return appliance_patches[0].simple_query(""What kind of appliance is on the right of the drawer?"")"
14857961,Is the lady to the right of a woman?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    for lady_patch in lady_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center > lady_patch.horizontal_center:
                return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?," # left, right, pan, cooking utensils
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    for pan_patch in pan_patches:
        cooking_utensils_patches = image_patch.find(""cooking utensils"")
        # Question assumes only one cooking utensils patch
        if len(cooking_utensils_patches) == 0:
            return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
        for cooking_utensils_patch in cooking_utensils_patches:
            if cooking_utensils_patch.horizontal_center < pan_patch.horizontal_center:
                return cooking_utensils_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")"
9745131,Which color is the truck that is to the left of the lamps?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    for truck_patch in truck_patches:
        lamp_patches = image_patch.find(""lamp"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center > truck_patch.horizontal_center:
                return truck_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")"
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")"
867818,Is the man on the skateboard?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the skateboard?"")
    for man_patch in man_patches:
        skateboard_patches = image_patch.find(""skateboard"")
        for skateboard_patch in skateboard_patches:
            if man_patch.lower > skateboard_patch.lower and man_patch.upper < skateboard_patch.upper:
                return ""yes""
    return ""no"""
13896221,What is on the table?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    for table_patch in table_patches:
        object_patches = image_patch.find(""object"")
        # Question assumes only one object patch
        if len(object_patches) == 0:
            return image_patch.simple_query(""What is on the table?"")
        for object_patch in object_patches:
            if object_patch.vertical_center > table_patch.vertical_center:
                return object_patch.simple_query(""What is on the table?"") # crop would include the table so keep it in the query
    # If no object is on the table, pick the first object
    return object_patches[0].simple_query(""What is on the table?"")"
1964517,What is the food that is above the white paper?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is above the white paper?"")
    for food_patch in food_patches:
        is_above_white_paper = (food_patch.simple_query(""Is the food above the white paper?"") == ""yes"")
        if is_above_white_paper:
            return food_patch.simple_query(""What is the food that is above the white paper?"") # crop would include the white paper so keep it in the query
    # If no food is above the white paper, pick the first food
    return food_patches[0].simple_query(""What is the food that is above the white paper?"")"
15705231,Is the shelf to the left of a cabinet?," 
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if shelf_patch.horizontal_center < cabinet_patch.horizontal_center:
                return ""yes""
    return ""no"""
15693846,Is the motorcycle parked on the grass?," # motorcycle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the motorcycle parked on the grass?"")"
13872995,Who is jumping?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is jumping?"")
    for person_patch in person_patches:
        is_jumping = (person_patch.simple_query(""Is the person jumping?"") == ""yes"")
        if is_jumping:
            return person_patch.simple_query(""Who is jumping?"") # crop would include the person so keep it in the query
    # If no person is jumping, pick the first person
    return person_patches[0].simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is this a dog or a cat?"")
    for dog_patch in dog_patches:
        cat_patches = image_patch.find(""cat"")
        for cat_patch in cat_patches:
            if cat_patch.horizontal_center > dog_patch.horizontal_center:
                return ""no""
    return ""yes"""
12584623,What is the person with the bag wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    for person_patch in person_patches:
        bag_patches = image_patch.find(""bag"")
        for bag_patch in bag_patches:
            clothing_patches = image_patch.find(""clothing"")
            for clothing_patch in clothing_patches:
                if clothing_patch.simple_query(""Is the clothing worn by the person with the bag?"") == ""yes"":
                    return clothing_patch.simple_query(""What is the person with the bag wearing?"") # crop would include the bag so keep it in the query
    # If no person is found, query the image directly
    return image_patch.simple_query(""What is the person with the bag wearing?"")"
7202064,"What is this, a bus or a truck?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_bus or is_truck)"
16542208,Do you see either any beds or blankets there?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    beds_patches = image_patch.find(""bed"")
    blankets_patches = image_patch.find(""blanket"")
    # Question assumes only one bed patch and one blanket patch
    if len(beds_patches) == 0 and len(blankets_patches) == 0:
        # If no bed or blanket is found, query the image directly
        return image_patch.simple_query(""Do you see either any beds or blankets there?"")
    if len(beds_patches) == 0:
        return blankets_patches[0].simple_query(""Do you see either any beds or blankets there?"")
    if len(blankets_patches) == 0:
        return beds_patches[0].simple_query(""Do you see either any beds or blankets there?"")
    return ""yes"""
11700224,Do you see both lettuce and salad?," # lettuce and salad are not in the same image
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""Do you see both lettuce and salad?"")
    salad_patches = image_patch.find(""salad"")
    # Question assumes only one salad patch
    if len(salad_patches) == 0:
        return ""no""
    for lettuce_patch in lettuce_patches:
        for salad_patch in salad_patches:
            if lettuce_patch.lower > salad_patch.lower and lettuce_patch.upper < salad_patch.upper:
                return ""yes""
    return ""no"""
1067136,Is the ball on the tree?," # ball is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball on the tree?"")"
364079,What kind of furniture is to the right of the blanket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is to the right of the blanket?"")"
2533062,How large is the ground the zebra is standing on?," # crop would include the ground so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How large is the ground the zebra is standing on?"")"
19683710,The clock is inside what?," # clock is inside a box
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""The clock is inside what?"")
    for clock_patch in clock_patches:
        box_patches = image_patch.find(""box"")
        for box_patch in box_patches:
            if box_patch.contains(clock_patch):
                return box_patch.simple_query(""The clock is inside what?"")"
15674863,Is the racket in the top part?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            skateboard_patches = image_patch.find(""skateboard"")
            # Question assumes only one skateboard patch
            if len(skateboard_patches) == 0:
                # If no skateboard is found, query the image directly
                return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
            for skateboard_patch in skateboard_patches:
                if skateboard_patch.horizontal_center > person_patch.horizontal_center:
                    return ""yes""
    return ""no"""
2292637,What is the color of the shirt that the passenger is wearing?," # shirt is a relational verb
    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    for passenger_patch in passenger_patches:
        shirt_patches = image_patch.find(""shirt"")
        for shirt_patch in shirt_patches:
            return shirt_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")"
9175259,What is the chair made of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    for chair_patch in chair_patches:
        is_made_of_plastic = (chair_patch.simple_query(""Is the chair made of plastic?"") == ""yes"")
        if is_made_of_plastic:
            return chair_patch.simple_query(""What is the chair made of?"") # crop would include the plastic so keep it in the query
    # If no chair is made of plastic, pick the first chair
    return chair_patches[0].simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?," # crop would include the carrot so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How big is the carrot in the top of the picture?"")"
1638685,What is the name of the vegetable that is on the yellow food?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    for vegetable_patch in vegetable_patches:
        is_on_yellow_food = vegetable_patch.simple_query(""Is the vegetable on the yellow food?"") == ""yes""
        if is_on_yellow_food:
            return vegetable_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"") # crop would include the yellow food so keep it in the query
    # If no vegetable is on the yellow food, pick the first vegetable
    return vegetable_patches[0].simple_query(""What is the name of the vegetable that is on the yellow food?"")"
5828256,Is the clock on a tower?," # clock is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the clock on a tower?"")"
18937563,What kind of animal is orange?," # orange is a color, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is orange?"")"
14360113,What is the smiling woman holding?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    for woman_patch in woman_patches:
        is_smiling = (woman_patch.simple_query(""Is the woman smiling?"") == ""yes"")
        if is_smiling:
            return woman_patch.simple_query(""What is the smiling woman holding?"") # crop would include the object so keep it in the query
    # If no woman is smiling, pick the first woman
    return woman_patches[0].simple_query(""What is the smiling woman holding?"")"
593188,Is the hair short?," # hair is a property of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    for person_patch in person_patches:
        return person_patch.verify_property(""person"", ""short hair"")"
10824666,Are there ladies to the left of the man that is wearing shorts?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    is_wearing_shorts = (man_patch.simple_query(""Is the man wearing shorts?"") == ""yes"")
    if is_wearing_shorts:
        ladies_patches = image_patch.find(""lady"")
        # Question assumes only one lady patch
        if len(ladies_patches) == 0:
            return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
        for ladies_patch in ladies_patches:
            if ladies_patch.horizontal_center < man_patch.horizontal_center:
                return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?," 
    image_patch = ImagePatch(image)
    garbage_bin_patches = image_patch.find(""garbage bin"")
    # Question assumes only one garbage bin patch
    if len(garbage_bin_patches) == 0:
        # If no garbage bin is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    for garbage_bin_patch in garbage_bin_patches:
        gray_car_patches = image_patch.find(""gray car"")
        for gray_car_patch in gray_car_patches:
            if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
7574939,Is there any table or plate that is white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Is there any table or plate that is white?"")
    for table_patch in table_patches:
        is_white = table_patch.verify_property(""table"", ""white"")
        if is_white:
            return ""yes""
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is there any table or plate that is white?"")
    for plate_patch in plate_patches:
        is_white = plate_patch.verify_property(""plate"", ""white"")
        if is_white:
            return ""yes""
    return ""no"""
12252101,Is it outdoors?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it outdoors?"")"
6943442,What cooking utensil is on the oven?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cooking_utensils_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensils_patches) == 0:
        # If no cooking utensil is found, query the image directly
        return image_patch.simple_query(""What cooking utensil is on the oven?"")
    for cooking_utensil_patch in cooking_utensils_patches:
        oven_patches = image_patch.find(""oven"")
        for oven_patch in oven_patches:
            if cooking_utensil_patch.vertical_center > oven_patch.vertical_center:
                return cooking_utensil_patch.simple_query(""What cooking utensil is on the oven?"") # crop would include the oven so keep it in the query
    # If no cooking utensil is on the oven, pick the first cooking utensil
    return cooking_utensils_patches[0].simple_query(""What cooking utensil is on the oven?"")"
2977077,The propeller that looks red is what pattern?," # propeller is a relational verb
    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    for propeller_patch in propeller_patches:
        if propeller_patch.simple_query(""Is the propeller red?"") == ""yes"":
            return propeller_patch.simple_query(""The propeller that looks red is what pattern?"")"
11190306,Which kind of animal is to the left of the train?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the left of the train?"")
    for animal_patch in animal_patches:
        train_patches = image_patch.find(""train"")
        for train_patch in train_patches:
            if animal_patch.horizontal_center < train_patch.horizontal_center:
                return animal_patch.simple_query(""Which kind of animal is to the left of the train?"") # crop would include the train so keep it in the query
    # If no animal is to the left of the train, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is to the left of the train?"")"
5107190,Do you see both an airplane and a truck?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"")"
12536783,What kind of animal is in front of the pole?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    for glasses_patch in glasses_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
        for man_patch in man_patches:
            tshirt_patches = image_patch.find(""t-shirt"")
            # Question assumes only one t-shirt patch
            if len(tshirt_patches) == 0:
                return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
            for tshirt_patch in tshirt_patches:
                if tshirt_patch.horizontal_center > man_patch.horizontal_center and glasses_patch.horizontal_center > man_patch.horizontal_center:
                    return ""right""
                elif tshirt_patch.horizontal_center < man_patch.horizontal_center and glasses_patch.horizontal_center < man_patch.horizontal_center:
                    return ""left""
    return ""no"""
18655269,Which room is it?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it indoors?"")"
1705569,Does the pot on top of the stove look black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    for pot_patch in pot_patches:
        stove_patches = image_patch.find(""stove"")
        for stove_patch in stove_patch:
            if stove_patch.vertical_center > pot_patch.vertical_center:
                return ""yes""
    return ""no"""
1028569,Are there both a cyclist and a helmet in the photo?," # cyclist and helmet are not in the same image
    image_patch = ImagePatch(image)
    cyclist_patches = image_patch.find(""cyclist"")
    # Question assumes only one cyclist patch
    if len(cyclist_patches) == 0:
        # If no cyclist is found, query the image directly
        return image_patch.simple_query(""Are there both a cyclist and a helmet in the photo?"")
    for cyclist_patch in cyclist_patches:
        helmet_patches = image_patch.find(""helmet"")
        for helmet_patch in helmet_patches:
            if helmet_patch.horizontal_center > cyclist_patch.horizontal_center:
                return ""yes""
    return ""no"""
13954115,Are there any men to the left of the person in the crowd?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    for person_patch in person_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center < person_patch.horizontal_center:
                return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")"
1017626,Who is inside the train?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Who is inside the train?"")
    for people_patch in people_patches:
        is_inside_train = (people_patch.simple_query(""Is the person inside the train?"") == ""yes"")
        if is_inside_train:
            return people_patch.simple_query(""Who is inside the train?"") # crop would include the train so keep it in the query
    # If no people is inside the train, pick the first people
    return people_patches[0].simple_query(""Who is inside the train?"")"
7650014,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the car doing?"")
    for person_patch in person_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if car_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the left of the car doing?"") # crop would include the car so keep it in the query
    # If no person is to the left of the car, pick the first person
    return person_patches[0].simple_query(""What is the person to the left of the car doing?"")"
1310985,Is the yellow vehicle to the left of a lamp?," 
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        lamp_patches = image_patch.find(""lamp"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center < yellow_vehicle_patch.horizontal_center:
                return ""yes""
    return ""no"""
646935,Which room is it?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
9495263,Is the woman to the left or to the right of the man that wears a cap?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    for woman_patch in woman_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return ""no""
        for man_patch in man_patches:
            if man_patch.simple_query(""Is the man wearing a cap?"") == ""yes"":
                if woman_patch.horizontal_center < man_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right""
    return ""no"""
946016,Do you think the animal that is sitting-down is small or large?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal sitting-down small or large?"") == ""small"":
            return ""small""
        else:
            return ""large"""
9617920,Do the garbage can and the pan have the same color?," # garbage can and the pan have the same color?
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    for garbage_can_patch in garbage_can_patches:
        pan_patches = image_patch.find(""pan"")
        for pan_patch in pan_patches:
            if garbage_can_patch.verify_property(""garbage can"", ""color"") == pan_patch.verify_property(""pan"", ""color""):
                return ""yes""
    return ""no"""
3578781,Which kind of clothing is black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
4695656,What is the lamp on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What is the lamp on?"")
    for lamp_patch in lamp_patches:
        is_on = (lamp_patch.simple_query(""Is the lamp on?"") == ""yes"")
        if is_on:
            return lamp_patch.simple_query(""What is the lamp on?"") # crop would include the lamp so keep it in the query
    # If no lamp is on, pick the first lamp
    return lamp_patches[0].simple_query(""What is the lamp on?"")"
13696926,The homes that are to the left of the people have what color?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    for people_patch in people_patches:
        homes_patches = image_patch.find(""home"")
        for home_patch in homes_patches:
            if home_patch.horizontal_center < people_patch.horizontal_center:
                return home_patch.simple_query(""The homes that are to the left of the people have what color?"")"
16946079,What is on the wall?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    wall_patches = image_patch.find(""wall"")
    # Question assumes only one wall patch
    if len(wall_patches) == 0:
        # If no wall is found, query the image directly
        return image_patch.simple_query(""What is on the wall?"")
    for wall_patch in wall_patches:
        return wall_patch.simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the napkin on the right side?"")"
11513897,What appliance is the label on?," # appliance is a noun
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    for appliance_patch in appliance_patches:
        return appliance_patch.simple_query(""What appliance is the label on?"")"
8240644,What is the color of the bird's tail?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    for bird_patch in bird_patches:
        tail_patches = image_patch.find(""tail"")
        # Question assumes only one tail patch
        if len(tail_patches) == 0:
            return ""no""
        for tail_patch in tail_patches:
            return tail_patch.simple_query(""What is the color of the bird's tail?"")"
5245080,Is he to the right or to the left of the camera?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    for man_patch in man_patches:
        camera_patches = image_patch.find(""camera"")
        for camera_patch in camera_patches:
            if man_patch.horizontal_center > camera_patch.horizontal_center:
                return ""right""
            elif man_patch.horizontal_center < camera_patch.horizontal_center:
                return ""left""
    return ""no"""
17800894,Are there both a window and a door in the picture?," # window and door are not relational verbs
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Are there both a window and a door in the picture?"")
    for window_patch in window_patches:
        door_patches = image_patch.find(""door"")
        for door_patch in door_patches:
            return ""yes""
    return ""no"""
191027873,Where is the snowboard?," # snowboard is a noun
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Where is the snowboard?"")
    return snowboard_patches[0].simple_query(""Where is the snowboard?"")"
1964079,Are the box and the paper the same color?," # box and paper are the same color
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    for box_patch in box_patches:
        paper_patches = image_patch.find(""paper"")
        for paper_patch in paper_patches:
            if box_patch.verify_property(""box"", ""color"") == paper_patch.verify_property(""paper"", ""color""):
                return ""yes""
    return ""no"""
