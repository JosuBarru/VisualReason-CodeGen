sample_id,query,generated_code
13151559,Is the large hair both white and soft?," # assumes one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    hair_patch = hair_patches[0]
    is_large = hair_patch.width > image_patch.width / 2
    is_white = hair_patch.simple_query(""Is the hair white?"") == ""yes""
    is_soft = hair_patch.simple_query(""Is the hair soft?"") == ""yes""
    return bool_to_yesno(is_large and is_white and is_soft)"
18370956,Who is eating the cupcake?," # contains a relation (eating, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is eating the cupcake?"") # crop would include the cupcake so keep it in the query"
6436809,What is the guy wearing?," # assumes only one patch
    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    if len(guy_patches) == 0:
        return image_patch.simple_query(""What is the guy wearing?"")
    for guy_patch in guy_patches:
        return guy_patch.simple_query(""What is the guy wearing?"") # crop would include the clothing so keep it in the query"
117037,Which kind of food is to the right of the cabbage?," # type: ignore
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center > cabbage_patch.horizontal_center:
            return food_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    # If no food is to the right of the cabbage, query the image directly
    return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")"
758936,Who wears the cap?," # assumes one patch
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    if len(cap_patches) == 0:
        return image_patch.simple_query(""Who wears the cap?"")
    return cap_patches[0].simple_query(""Who wears the cap?"") # crop would include the cap so keep it in the query"
111046440,Who is pointing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is pointing?"") # crop would include the pointing so keep it in the query"
15804389,Is the woman's hair short or long?," # image
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    return woman_patches[0].simple_query(""Is the woman's hair short or long?"") # crop would include the hair so keep it in the query"
11445636,The women are watching who?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The women are watching who?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?," # returns yes or no
    image_patch = ImagePatch(image)
    # contains a relation (inside, outside, to the left of, etc), so ask directly
    return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"") # crop would include the color so keep it in the query"
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?," # returns the name of the piece of furniture
    image_patch = ImagePatch(image)
    bed_sheet_patches = image_patch.find(""bed sheet"")
    # Question assumes only one bed sheet patch
    if len(bed_sheet_patches) == 0:
        # If no bed sheet is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_sheet_patch = bed_sheet_patches[0]
    for bed_sheet_patch in bed_sheet_patches:
        baby_patches = image_patch.find(""baby"")
        # Question assumes only one baby patch
        if len(baby_patches) == 0:
            # If no baby is found, query the image directly
            return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
        for baby_patch in baby_patches:
            for x in range(image_patch.width):
                if image_patch.cropped_image[0, image_patch.height - 1, x] == bed_sheet_patch.cropped_image[0, bed_sheet_patch.height - 1, 0]:
                    return bed_sheet_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
            for y in range(image_patch.height):
                if image_patch.cropped_image[0, y, 0] == bed_sheet_patch.cropped_image[0"
758958,Is there either any red pillow or snowboard?," # asks for either a red pillow or a snowboard
    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)"
143816,Which place is it?," # could be any object or place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # could be any object or place"
13741513,Which side is the knife on?," # requires left, right, or no knife
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    # Question assumes only one knife patch
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Which side is the knife on?"")
    knife_patch = knife_patches[0]
    if knife_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
17829769,What is the computer mouse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"") # crop would include the object in front of so keep it in the query"
17233738,What is the toddler holding?," # is a relational verb so go step by step
    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    # Question assumes only one toddler patch
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    return toddler_patches[0].simple_query(""What is the toddler holding?"") # crop would include the object so keep it in the query"
2951242,Is the gray shirt sleeveless or short sleeved?," # sleeveless, short sleeved
    image_patch = ImagePatch(image)
    gray_shirt_patches = image_patch.find(""gray shirt"")
    # Question assumes only one gray shirt patch
    if len(gray_shirt_patches) == 0:
        # If no gray shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    gray_shirt_patch = gray_shirt_patches[0]
    is_sleeveless = (gray_shirt_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"") == ""sleeveless"")
    if is_sleeveless:
        return ""sleeveless""
    else:
        return ""short sleeved"""
15241795,Is the tank top red?," # assumes only one tank top patch
    image_patch = ImagePatch(image)
    tank_top_patch = image_patch.find(""tank top"")
    if len(tank_top_patch) == 0:
        # If no tank top is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    return tank_top_patch[0].verify_property(""tank top"", ""red"")"
13885234,Which kind of animal is in front of the rocks?," # assumes one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.horizontal_center:
            return animal_patch.simple_query(""Which kind of animal is in front of the rocks?"") # crop would include the rocks so keep it in the query
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"") # if no animal is in front, query the image directly"
19335715,Do you see any grapes?," # contains a question, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any grapes?"")"
6455591,What type of furniture is white?," # assumes one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of furniture is white?"") # crop would include the color so keep it in the query"
1033761,What is the blue clothing item?," # returns the first clothing item with blue color
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    for clothing_patch in clothing_patches:
        is_blue = clothing_patch.verify_property(""clothing"", ""blue"")
        if is_blue:
            return clothing_patch.simple_query(""What is the blue clothing item?"")
    # If no clothing is blue, query the image directly
    return image_patch.simple_query(""What is the blue clothing item?"") # crop would include the blue clothing item so keep it in the query"
17726504,Who is wearing the glasses?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query"
13112902,Is the woman wearing a bracelet?," # -> bool
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"") # crop would include the bracelet so keep it in the query
    return woman_patches[0].verify_property(""woman"", ""bracelet"")"
698766,What is the food that is not white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the food that is not white?"") # assumes no relation between food and white"
1332276,Are there both a cup and a bottle in the picture?," # not the best name
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?," # returns color of first object found
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"") # crop would include the glove so keep it in the query"
18103787,Who is holding the helmet?," # asks for the predicate of a relational verb (holding), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is holding the helmet?"") # crop would include the helmet so keep it in the query"
2143247,What is the name of the food to the left of the donut that looks little?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"") # crop would include the donut so keep it in the query"
3767951,Is the clock to the right or to the left of the man on the left?," # assumes one man on the left
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        return ""left""
    clock_patch = clock_patches[0]
    if clock_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17655180,What's the sticker on?," # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the sticker on?"") # crop would include the object so keep it in the query"
3468831,In front of what is this table?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?," # assumes one car patch
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > car_patch.horizontal_center:
            return ""yes""
    return ""no"""
7188981,Does the giraffe look adult?," # giraffe is an adult
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""adult"")) # giraffe is an adult"
16852802,Of what color are the pants?," # -> str
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"") # crop would include the pants so keep it in the query"
9619158,What kind of watercraft is full of men?," # return the answer to ""What kind of watercraft is full of men?""
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    for watercraft_patch in watercraft_patches:
        if watercraft_patch.simple_query(""How many men are on the watercraft?"") == ""many"":
            return watercraft_patch.simple_query(""What kind of watercraft is full of men?"")
    # If no watercraft is full of men, pick the first watercraft
    return watercraft_patches[0].simple_query(""What kind of watercraft is full of men?"") # crop would include the men so keep it in the query"
3625225,On which side of the picture are the boats?," # left, right
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    if boat_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only two elephant patches
    if len(elephant_patches) < 2:
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    for i in range(len(elephant_patches)):
        for j in range(i + 1, len(elephant_patches)):
            if elephant_patches[j].horizontal_center > elephant_patches[i].horizontal_center:
                return bool_to_yesno(elephant_patches[i].verify_property(""elephant"", ""large size""))
    return ""no"""
19834124,What is the girl holding?," # no relation, no assumption of object's position
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the girl holding?"") # assumes no relation"
4617704,Does the toilet seat that is not down appear to be white and open?," # toilet seat is an object that has properties (open, closed, up, down, etc)
    image_patch = ImagePatch(image)
    toilet_seats_patches = image_patch.find(""toilet seat"")
    # Question assumes only one toilet seat patch
    if len(toilet_seats_patches) == 0:
        # If no toilet seat is found, query the image directly
        return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")
    for toilet_seat_patch in toilet_seats_patches:
        is_not_down = (toilet_seat_patch.simple_query(""Is the toilet seat down?"") == ""no"")
        if is_not_down:
            is_white = (toilet_seat_patch.simple_query(""What color is the toilet seat?"") == ""white"")
            is_open = (toilet_seat_patch.simple_query(""Is the toilet seat open?"") == ""yes"")
            return bool_to_yesno(is_white and is_open)
    # If no toilet seat is not down and appears white and open, query the image directly
    return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"") # crop would include the seat so keep it in the query"
5899539,Are there any bottles or mugs that are not purple?," # bottle, mug, purple
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    mug_patches = image_patch.find(""mug"")
    bottle_mug_patches = bottle_patches + mug_patches
    for patch in bottle_mug_patches:
        if patch.simple_query(""What color is the bottle or mug?"") != ""purple"":
            return ""yes""
    return ""no"""
2631593,Which place is it?," # returns the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # does not need to be modified"
12228864,Do you see any men to the right of the person that is in the living room?," # contains a relation (in the living room, etc)
    image_patch = ImagePatch(image)
    # contains a relation (in the living room, etc), so ask directly
    return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"") # contains a relation so keep it in the query"
111054378,Is the small couch to the right or to the left of the bottle?," # ask for the relative position of two objects
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    small_couch_patches = image_patch.find(""small couch"")
    # Question assumes only one small couch patch
    if len(small_couch_patches) == 0:
        return ""left""
    for small_couch_patch in small_couch_patches:
        if small_couch_patch.horizontal_center > bottle_patch.horizontal_center:
            return ""right""
    return ""left"""
9392411,Is the bottle to the right or to the left of the appliance on the left?," # assumes only one bottle and one appliance on the left
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        return ""right""
    bottle_patch = bottle_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    if len(appliance_patches) == 0:
        return ""left""
    appliance_patch = appliance_patches[0]
    if appliance_patch.horizontal_center < image_patch.horizontal_center:
        if bottle_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
        else:
            return ""left""
    else:
        if bottle_patch.horizontal_center > image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
16753829,What type of animal is sitting in the container in the bottom of the photo?," # image is a 3D array
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    for container_patch in container_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            # If no animal is found, query the image directly
            return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
        for animal_patch in animal_patches:
            if animal_patch.vertical_center < image_patch.vertical_center:
                return animal_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    # If no animal is found in the bottom container, query the image directly
    return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"") # crop would include the container so keep it in the query"
1345482,What is that train in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?," # does not work with simple_query
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"") # crop would include the objects so keep them in the query"
459445,In which part is the silver device?," # e.g. phone
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""silver device"") # e.g. phone
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if device_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif device_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
11786203,What is the man on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"") # crop would include the object so keep it in the query"
5200013,Is there a brown door or chair?," # not needed
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown"")
    # Question assumes only one patch
    if len(brown_patches) == 0:
        return ""no""
    else:
        return brown_patches[0].simple_query(""Is that door or chair?"") # crop would include the chair so keep it in the query"
131031372,What is the napkin in?," # what is the object of the relation ""in""
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the napkin in?"") # contains ""in"" so keep it in the query"
1241681,Are there any people behind the white dessert?," # assume the white dessert is on the right
    image_patch = ImagePatch(image)
    white_dessert_patch = image_patch.find(""white dessert"")[0]
    return bool_to_yesno(image_patch.exists(""person"") and white_dessert_patch.horizontal_center > image_patch.horizontal_center)"
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?," # crop would include the objects in front of the curtain so keep them in the query
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"") # crop would include the objects in front of the curtain so keep them in the query"
8553578,What is the Pikachu doing?," # returns action, not object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the Pikachu doing?"") # crop would include the action so keep it in the query"
16711804,"On which side is the car, the left or the right?"," # not sure if this is the best way to do it
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    horizontal_center = car_patches[0].horizontal_center
    if horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the large mountains?"") # crop would include the mountains so keep it in the query"
5107295,What is in the sky?," # sky is a relation (above), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"") # sky is a relation (above), so ask directly"
123768,What kind of watercraft is the fruit on?," # fruit on watercraft
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of watercraft is the fruit on?"") # contains a relation (on), so ask directly"
1827218,Is the bottle in the bottom of the image?," # no need for the image patch
    image = ImagePatch(image)
    if image.vertical_center < image Patchchsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachsachs"
10938155,What color is the sky?," # todo: add to simple_query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"") # todo: change to simple_query"
4893512,Does the sail look white or red?," # does the sail look white or red?
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    return sail_patches[0].simple_query(""Does the sail look white or red?"") # crop would include the sail so keep it in the query"
3662784,Do you see either any traffic lights or cars?," # traffic light or car
    image_patch = ImagePatch(image)
    is_traffic_light = image_patch.exists(""traffic light"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_traffic_light or is_car)"
15515711,Are there any girls to the right of the yellow helmet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
6315316,Which kind of furniture is in front of the window?," # assumes only one window patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is in front of the window?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > window_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is in front of the window?"")
    # If no furniture is in front of the window, query the image directly
    return image_patch.simple_query(""Which kind of furniture is in front of the window?"") # crop would include the window so keep it in the query"
17736488,What appliance is to the left of the faucet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What appliance is to the left of the faucet?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
41050828,What is the color of the jacket?," # change to simple_query
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"") # crop would include the jacket so keep it in the query"
610914,Is the green boat to the right or to the left of the wood house?," # assumes green and wood are colors and not materials
    image_patch = ImagePatch(image)
    green_boat_patches = image_patch.find(""green boat"")
    # Question assumes only one green boat patch
    if len(green_boat_patches) == 0:
        # If no green boat is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    green_boat_patch = green_boat_patches[0]
    wood_house_patches = image_patch.find(""wood house"")
    # Question assumes only one wood house patch
    if len(wood_house_patches) == 0:
        # If no wood house is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    wood_house_patch = wood_house_patches[0]
    if green_boat_patch.horizontal_center > wood_house_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13158346,Is the woman in the bottom part of the picture?," # no relation, so ask step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    return ""no"""
16318707,Are there either any colorful bikes or skateboards?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bike = image_patch.exists(""bike"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_bike or is_skateboard)"
2805654,Is the bag to the right or to the left of the bench?," # bag or bench
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    for bag_patch in bag_patches:
        if bag_patch.horizontal_center > bench_patch.horizontal_center:
            return ""right""
        else:
            return ""left""
    return ""left"""
15315607,What do you think is in the sky?," # sky
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"") # sky"
2995829,What color is the truck near the gas station?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the truck near the gas station?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
12140940,"What are the headphones on, a sofa or a desk?"," # contains a relation (on, in, under, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"") # crop would include the object so keep it in the query"
727533,Does the bun look brown and toasted?," # ImagePatch
    image_patch = ImagePatch(image)
    is_brown = image_patch.verify_property(""bun"", ""brown"")
    is_toasted = image_patch.verify_property(""bun"", ""toasted"")
    return bool_to_yesno(is_brown and is_toasted)"
61044602,What is in the brown basket?," # in the brown basket
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the brown basket?"") # in the brown basket"
16827204,Is the marker different in color than the paper?," # assumes one patch
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    if len(marker_patches) == 0:
        return ""no""
    marker_patch = marker_patches[0]
    paper_patches = image_patch.find(""paper"")
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    return bool_to_yesno(marker_patch.simple_query(""What color is the marker?"") != paper_patch.simple_query(""What color is the paper?"")) # crop would include the paper and marker so keep it in the query"
1284539,Is there a racket to the right of the man on the right side?," # query the image directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    man_patch = man_patches[0]
    man_right_patch = man_patch.crop(0, 0, man_patch.width, man_patch.height) # crop to the right of the man
    man_right_center = man_right_patch.horizontal_center # horizontal center of the right half
    man_right = man_patch.crop(man_right_center, 0, man_right_center + man_patch.width / 2, man_patch.height) # crop to the right of the man
    return man_right.exists(""racket"") # ask about the right half of the image"
1257391,What place is this?," # query image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"") # query image directly"
16223517,What do you think is the color of the large device?," # what color is the phone?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the phone?"") # crop would include the phone so keep it in the query"
1024280,Does the shirt look long sleeved or sleeveless?," # Shirt may be cropped
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    is_long_sleeved = (shirt_patch.simple_query(""Is the shirt long sleeved?"") == ""yes"")
    if is_long_sleeved:
        return ""long sleeved""
    else:
        return ""sleeveless"""
2769463,Which kind of animal is lying in the chair?," # crop would include the chair so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is lying in the chair?"") # crop would include the chair so keep it in the query"
18503776,Is the white box to the right of the crate the chair is to the right of?," # crop would include the chair and the crate
    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    # Question assumes only one white box patch
    if len(white_box_patches) == 0:
        # If no white box is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"") # crop would include the chair and the crate
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"") # crop would include the chair and the crate
    for white_box_patch in white_box_patches:
        for chair_patch in chair_patches:
            if white_box_patch.horizontal_center > crate_patch.horizontal_center:
                if white_box_patch.horizontal_center > chair_patch.horizontal_center:
                    return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?," # not a relation
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?," # returns yes or no
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    # Question assumes only one flower pot patch
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    flower_pot_patch = flower_pot_patches[0]
    return flower_pot_patch.verify_property(""flower pot"", ""clay"") # returns yes or no"
191006281,Does the sky look clear and gray?," # sky, clear, gray
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Does the sky look clear and gray?"")
    return bool_to_yesno(sky_patches[0].verify_property(""sky"", ""clear and gray"")) # crop would include the sky so keep it in the query"
681336,Do you see hats or gloves that are white?," # image_patch
    image_patch = ImagePatch(image)
    hat_patches = image_patch.find(""hat"")
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one hat patch and one glove patch
    if len(hat_patches) == 0 or len(glove_patches) == 0:
        # If no hat or glove is found, query the image directly
        return image_patch.simple_query(""Do you see hats or gloves that are white?"")
    for hat_patch in hat_patches:
        if hat_patch.simple_query(""Is the hat white?"") == ""yes"":
            return ""hat""
    for glove_patch in glove_patches:
        if glove_patch.simple_query(""Is the glove white?"") == ""yes"":
            return ""glove""
    return ""no"""
1300368,What is on the cabinet that is to the right of the keyboard?," # assumes only one cabinet patch
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    if len(cabinet_patches) == 0:
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    cabinet_patch = cabinet_patches[0]
    right_cabinet_patch = cabinet_patch.crop(cabinet_patch.right, cabinet_patch.lower, cabinet_patch.right + cabinet_patch.width, cabinet_patch.upper)
    return right_cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"") # crop would include the right cabinet so keep it in the query"
172394,What is the animal to the left of the tap called?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal to the left of the tap called?"") # crop would include the tap so keep it in the query"
738176,Is the chair on the right?," # asks for a predicate of a relational verb (on), so ask directly
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    return ""yes"" if chair_patches[0].horizontal_center > image_patch.horizontal_center else ""no"""
4194919,Is the child on the right of the picture?," # (image, left, lower, right, upper)
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    for child_patch in child_patches:
        if child_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
3585327,Who is on the surfboard?," # contains a relation (on, in, under, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard?"") # crop would include the action so keep it in the query"
1711172,What size are the packages the candle is on top of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What size are the packages the candle is on top of?"")"
4353895,Who is on the snowboard on the right?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    snowboarder_patches = image_patch.find(""snowboarder"")
    # Question assumes only one snowboarder patch
    if len(snowboarder_patches) == 0:
        # If no snowboarder is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    for snowboarder_patch in snowboarder_patches:
        is_right = snowboarder_patch.horizontal_center > image_patch.horizontal_center
        if is_right:
            return snowboarder_patch.simple_query(""Who is on the snowboard on the right?"")
    # If no snowboarder is on the right, pick the first snowboarder
    return snowboarder_patches[0].simple_query(""Who is on the snowboard on the right?"")"
17929304,What is the vehicle that is on the road?," # crop would include the road so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?," # What color is the crust of the bread?
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""What color is the crust of the bread?"")
    return bread_patches[0].simple_query(""What color is the crust of the bread?"") # crop would include the crust so keep it in the query"
5672474,Is the plate to the left or to the right of the beer on the left?," # beer is on the left
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"") # beer is on the left"
11341284,What is the pattern of the mattress on the street?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the mattress on the street?"") # crop would include the street so keep it in the query"
14192693,Are there any boys behind the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any boys behind the fence?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
19203395,Is the white toilet paper to the right or to the left of the toilet?," # does not need to be a function
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    for toilet_patch in toilet_patches:
        white_toilet_paper_patches = image_patch.find(""white toilet paper"")
        # Question assumes only one white toilet paper patch
        if len(white_toilet_paper_patches) == 0:
            return ""left""
        for white_toilet_paper_patch in white_toilet_paper_patches:
            if white_toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
                return ""right""
    return ""left"""
1194938,Are there any airplanes in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any airplanes in front of the building?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5350205,How clean is the road that the car is on the side of?," # returns ""clean"", ""moderately dirty"", ""filthy""
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    return road_patches[0].simple_query(""How clean is the road that the car is on the side of?"") # crop would include the car so keep it in the query"
4256016,"In which part of the picture is the black van, the bottom or the top?"," # assumes a van is a type of vehicle
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?," # relation is to the right of, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the right of the fence doing?"")"
16471124,Does the horse have a different color than the boot?," # does not exist
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    if len(image_patch.find(""boot"")) == 0:
        return ""no""
    horse_color = horse_patches[0].simple_query(""What color is the horse?"")
    boot_color = image_patch.find(""boot"")[0].simple_query(""What color is the boot?"")
    return ""yes"" if horse_color != boot_color else ""no"""
958247,Is the mouse to the right of a chair?," # asks for the predicate of a relational verb (right of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the mouse to the right of a chair?"") # crop would include the chair so keep it in the query"
11179512,The basket made of plastic is what color?," # basket made of plastic
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    basket_patch = basket_patches[0]
    return basket_patch.simple_query(""What color is the basket made of plastic?"") # crop would include the material so keep it in the query"
8816272,Do you see any elephant to the left of the bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any elephant to the left of the bird?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
11168592,What is the animal in front of the lamp?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in front of the lamp?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
3568717,Who is wearing the jacket?," # assumes only one jacket patch
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    return jacket_patches[0].simple_query(""Who is wearing the jacket?"") # crop would include the jacket so keep it in the query"
7398502,What is the food to the left of the girl in the bottom of the photo?," # assumes one girl in the bottom
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"") # crop would include the girl in the bottom so keep it in the query"
5145864,What is the device that the camera is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the device that the camera is in front of?"")"
788143,Is the man on the surfboard?," # man and surfboard are assumed to be in the image
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the surfboard?"")
    man_patch = man_patches[0]
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        return ""no""
    surfboard_patch = surfboard_patches[0]
    if man_patch.horizontal_center > surfboard_patch.horizontal_center:
        return ""yes""
    else:
        return ""yes"""
15854501,What device has the same color as the device in the box?," # a box is a container, so it is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device has the same color as the device in the box?"") # crop would include the box, so keep it in the query"
3228067,What is the child wearing?," # Query assumes one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        return image_patch.simple_query(""What is the child wearing?"")
    return child_patches[0].simple_query(""What is the child wearing?"") # crop would include the clothing so keep it in the query"
6817336,Is the blue sky behind a cathedral?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue sky behind a cathedral?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
6347271,"In which part of the image is the yellow pepper, the bottom or the top?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"") # crop would include the pepper so keep it in the query"
296230,What animal is the woman feeding?," # contains a relation (feeding, petting, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the woman feeding?"") # crop would include the animal so keep it in the query"
3427727,On which side is the bucket?," # returns left or right
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    if bucket_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
31050314,Is the small chimney in the bottom part of the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"") # crop would include the chimney and bottom so keep it in the query"
3503396,Are the pants purple?," # contains a property (color, shape, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""pants"", ""purple""))"
11742862,Which kind of furniture is to the right of the paper towels?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5891809,What kind of furniture is gray?," # assumes only one patch of gray furniture
    image_patch = ImagePatch(image)
    gray_patches = image_patch.find(""furniture"")
    if len(gray_patches) == 0:
        return image_patch.simple_query(""What kind of furniture is gray?"")
    return gray_patches[0].simple_query(""What kind of furniture is gray?"")"
5370528,Is the hair white and long?," # assumes one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        return ""no""
    hair_patch = hair_patches[0]
    is_white = (hair_patch.simple_query(""Is the hair white?"") == ""yes"")
    is_long = (hair_patch.simple_query(""Is the hair long?"") == ""yes"")
    return bool_to_yesno(is_white and is_long)"
781153,Do you see trains near the lamp post that looks white?," # near is a relation so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")"
5543456,Is the container to the left of the person that wears bracelets?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
163134,What do you think is on the roof?," # assumes one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"") # crop would include the roof so keep it in the query"
5603075,Is the shoe white or brown?," # is the object white or brown?
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    shoe_patch = shoe_patches[0]
    return shoe_patch.best_text_match([""white"", ""brown""]) # assumes one patch, and the best match is the one that is most similar to the object"
5511395,What is wrapped in paper?," # paper wrapping
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wrapped in paper?"") # assumes paper wrapping"
5611256,Are there any couches in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch"")) # returns yes if found, no otherwise"
1162826,The man is in what?," # indoor or outdoor
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is in what?"")
    man_patch = man_patches[0]
    if man_patch.lower < man_patch.upper / 2: # half of the height
        return ""indoor""
    else:
        return ""outdoor"""
81020685,Which color is the small house?," # fixme: use simple_query instead
    image_patch = ImagePatch(image)
    small_houses_patches = image_patch.find(""small house"")
    # Question assumes only one small house patch
    if len(small_houses_patches) == 0:
        # If no small house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    return small_houses_patches[0].simple_query(""Which color is the small house?"") # crop would include the house so keep it in the query"
19640724,Who is in the bathroom?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"") # crop would include the bathroom so keep it in the query"
289960,Do you see a racket to the right of the boy that is looking at the tie?," # assumes only one patch
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    for boy_patch in boy_patches:
        if boy_patch.simple_query(""Is the boy looking at the tie?"") == ""yes"":
            return image_patch.exists(""racket"") and image_patch.right > boy_patch.horizontal_center
    return ""no"""
9957748,Does the hair appear to be long and brown?," # assuming the hair is not cropped
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""hair"", ""long brown"")) # crop would include the hair so keep it in the query"
21031610,What is the shoe that looks black and white resting on?," # resting on
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    shoe_patch = shoe_patches[0]
    if shoe_patch.cropped_image.shape[0] == 3: # rgb
        shoe_patch = ImagePatch(image_patch.cropped_image[:, :, 0]) # grey scale
    if shoe_patch.cropped_image.shape[0] == 1: # grey scale
        is_black = (shoe_patch.cropped_image[0, 0] == 0)
        is_white = (shoe_patch.cropped_image[0, 0] == 255)
        if is_black and is_white:
            return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"")
        elif is_black:
            return shoe_patch.simple_query(""What is the black shoe resting on?"")
        elif is_white:
            return shoe_patch.simple_query(""What is the white shoe resting on?"")
    return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"") # crop would include the resting on so keep it in the query"
12801921,What is the glass on?," # table, counter, bar, etc.
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the glass on?"") # assumes glass is found, so no need to find"
16243948,Is the white pillow under the black animal?," # returns a yes or no
    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white pillow"")
    black_patches = image_patch.find(""black animal"")
    if len(white_patches) == 0 or len(black_patches) == 0:
        return ""no""
    white_patch = white_patches[0]
    black_patch = black_patches[0]
    return bool_to_yesno(white_patch.vertical_center > black_patch.vertical_center)"
457770,What kind of clothing is striped?," # clothing
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What color is the clothing?"") == ""white"":
            return clothing_patch.simple_query(""What kind of clothing is striped?"")
        else:
            return clothing_patch.best_text_match([""sweater"", ""shirt"", ""socks"", ""pants""]) # crop would include the color so keep it in the query"
12603153,Are the child's eyes blue and open?," # does not require any arguments
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    child_patch = child_patches[0]
    if child_patch.verify_property(""child"", ""blue eyes"") and child_patch.verify_property(""child"", ""open eyes""):
        return ""yes""
    return ""no"""
9480973,What is located on top of the tub?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is located on top of the tub?"") # tub is a container so on top of is the right relation"
8399764,Is the fork to the right or to the left of the white plate?," # horizontal center of white plate is 850
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    if fork_patches[0].horizontal_center > 850:
        return ""right""
    else:
        return ""left"""
13420253,On which side of the photo is the chair?," # left or right
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    if chair_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?," # assumes the object is the same in the query
    image_patch = ImagePatch(image)
    object_patches = image_patch.find(""object"") # assumes the object is the same in the query
    # Question assumes only one object patch
    if len(object_patches) == 0:
        # If no object is found, query the image directly
        return image_patch.simple_query(""What is the label on?"")
    return object_patches[0].simple_query(""What is the label on?"") # crop would include the object so keep it in the query"
3322787,What bird is to the left of the person that is wearing a shirt?," # assume only one person and one bird
    image_patch = ImagePatch(image)
    person_wearing_shirt_patches = image_patch.find(""person wearing a shirt"")
    if len(person_wearing_shirt_patches) == 0:
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    for person_wearing_shirt_patch in person_wearing_shirt_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if bird_patch.horizontal_center < person_wearing_shirt_patch.horizontal_center:
                return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    return person_wearing_shirt_patches[0].simple_query(""What bird is to the left of the person that is wearing a shirt?"") # crop would include the shirt so keep it in the query"
6399594,On which side is the man?," # left, right, or center
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    horizontal_center = man_patch.horizontal_center
    if horizontal_center > image_patch.width / 2:
        return ""right""
    elif horizontal_center == image_patch.width / 2:
        return ""center""
    else:
        return ""left"""
6930120,Is the glass bowl on the right or on the left?," # has to be on the right or left, not on top of or below
    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    # Question assumes only one glass bowl patch
    if len(glass_bowl_patches) == 0:
        # If no glass bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    if glass_bowl_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
12619961,What vehicles are to the left of the taxi?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicles are to the left of the taxi?"") # crop would include the taxi so keep it in the query"
13362315,Is the basket on the shelf black and empty?," # basket is on the shelf, black and empty
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the basket on the shelf black and empty?"") # basket is on the shelf, black and empty"
3830854,What is the animal that is standing next to the donkey that is standing in the hay?," # what is the relation between the standing animal and the donkey?
    image_patch = ImagePatch(image)
    standing_animal_patches = image_patch.find(""animal"")
    # Question assumes only one standing animal patch
    if len(standing_animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing next to the donkey that is standing in the hay?"")
    standing_animal_patch = standing_animal_patches[0]
    donkey_patches = image_patch.find(""donkey"")
    # Question assumes only one donkey patch
    if len(donkey_patches) == 0:
        # If no donkey is found, query the image directly
        return image_patch.simple_query(""What animal is standing next to the donkey that is standing in the hay?"")
    donkey_patch = donkey_patches[0]
    return standing_animal_patch.simple_query(""What animal is standing next to the donkey that is standing in the hay?"") # crop would include the hay and donkey so keep it in the query"
18382324,Is this a bed or a table?," # assuming only one patch
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""bed"", ""table""]) # crop would include the object so keep it in the query"
18104571,"Which animal is that, a bird or a cat?"," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    animal_patch = animal_patches[0]
    return animal_patch.best_text_match([""bird"", ""cat""]) # crop would include the animal so keep it in the query"
2913379,Do you see any fence or pot?," # returns a yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)"
9294271,What is in front of the fence the zebra is kept in?," # assumes there is a fence and a zebra
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"") # zebra is in the fence, so crop would include it, so keep it in the query"
10741434,What is the vegetable that is on top of the plate called?," # crop would include the plate so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")"
765962,Where is the car?," # no relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the car?"") # no relation, so ask directly"
12399262,Is there either a yellow truck or airplane?," # includes the image directly
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"") or image_patch.exists(""truck"") # includes the image directly
    is_airplane = image_patch.exists(""airplane"") or image_patch.exists(""plane"") # includes the image directly
    return bool_to_yesno(is_yellow_truck or is_airplane) # includes the image directly"
13964213,Is the man on the left of the photo?," # crop would include the man so keep it in the query
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
16171369,What is covered in the snow?," # only one object to query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"") # crop would include the snow so keep it in the query"
181055844,On which side is the plastic bottle?," # left or right
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the plastic bottle, left or right?"")"
5858491,Do you see any ropes on the fence that is on the left of the picture?," # assumes the fence is on the left
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    rope_patches = image_patch.find(""rope"")
    # Question assumes only one rope patch
    if len(rope_patches) == 0:
        return ""no""
    for rope_patch in rope_patches:
        if rope_patch.horizontal_center < fence_patch.horizontal_center:
            return ""yes""
    return ""no"""
17834539,Are there any lamps in the scene?," # if no lamps are found, ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp"")) # or ""lamp"" or ""table lamp"""
15658176,Who is wearing a helmet?," # helmet
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    helmet_patch = helmet_patches[0]
    return helmet_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query"
14372400,Does that coat have red color?," # assumes one object patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        return ""no""
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red""))"
411886,Are there any curtains or blankets in this scene?," # no
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"") # crop would include the remote so keep it in the query"
51039491,Is the fence black or red?," # assuming only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the fence black or red?"")
    fence_patch = fence_patches[0]
    return fence_patch.best_text_match([""black"", ""red""])"
7425912,What animal is standing in the field?," # What animal is standing in the field?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is standing in the field?"") # assumes no object is in the field"
13136338,What animal is in front of the dog which is to the right of the bird?," # query assumes one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.exists(""dog"") and animal_patch.exists(""bird""):
            return animal_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"") # if no animal, bird, or dog is found, query the image directly"
3775066,Which color are the cabinets in the bottom of the picture?," # assumes only one cabinet patch
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinets"")
    if len(cabinet_patches) == 0:
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.vertical_center < image_patch.vertical_center:
        return cabinet_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    else:
        return cabinet_patch.simple_query(""Which color are the cabinets in the top of the picture?"") # crop would include the top so keep it in the query"
17206239,Is the happy girl to the right of a player?," # asks for the predicate of a relational verb (right of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the happy girl to the right of a player?"")"
2992517,"What piece of furniture is not wooden, the table or the chair?"," # and other furniture
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    table_patch = image_patch.find(""table"")
    chair_patch = image_patch.find(""chair"")
    if len(table_patch) == 0 or len(chair_patch) == 0:
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    if table_patch[0].simple_query(""Is the table wooden?"") == ""yes"":
        return chair_patch[0].simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    else:
        return table_patch[0].simple_query(""What piece of furniture is not wooden, the table or the chair?"")"
1827558,Which side of the image is the kettle on?," # assume the image is centered
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    kettle_patch = kettle_patches[0]
    if kettle_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
2785208,Where is the man?," # crop would include the man, so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the man?"") # crop would include the man, so keep it in the query"
6623967,Is the baby near the countertop chewing a computer mouses?," # near
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouse?"")
    for baby_patch in baby_patches:
        if baby_patch.simple_query(""Is the baby near the countertop chewing a computer mouse?"") == ""yes"":
            return ""yes""
    return ""no"""
12804807,Is the small bottle open or closed?," # assuming only one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    bottle_patch = bottle_patches[0]
    return bottle_patch.simple_query(""Is the bottle open or closed?"") # crop would include the cap so keep it in the query"
18437691,Is the clock small or large?," # change to a more descriptive name
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    return clock_patches[0].simple_query(""Is the clock small or large?"") # crop would include the clock so keep it in the query"
9482318,Are there either any glasses or bottles in this photo?," # assume one object patch
    image_patch = ImagePatch(image)
    is_glass = image_patch.exists(""glasses"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glass or is_bottle) # return yes if either is found"
12362819,Is the sky blue or dark?," # or is the sky blue or is the sky dark?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue or dark?"") # contains a relation (blue or dark), so ask directly"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?," # returns the name of the piece of furniture
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    for shelf_patch in shelf_patches:
        cup_patches = image_patch.find(""cup"")
        for cup_patch in cup_patches:
            # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
            return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"") # crop would include the shelf and the cup so keep it in the query
    # If no shelf or cup is found, query the image directly
    return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"") # crop would include the shelf and the cup so keep it in the query"
1416636,Are there both bridges and chandeliers in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?"," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
6110985,Is there any plate or orange in the photo?," # assumes one object per patch
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?," # returns a boolean
    image_patch = ImagePatch(image)
    return image_patch.exists(""door"") # contains a door so no need to crop"
13562221,What's the bear on?," # can be simplified to just simple_query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the bear on?"") # no need to check for existence, so just ask directly"
9536851,Is the woman in front of the trees holding scissors?," # is this a tree or a bush?
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"") # crop would include the trees and the woman so keep it in the query
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center > tree_patch.horizontal_center:
        return ""yes""
    return ""no"""
9682405,What is on the machine?," # query machine
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is on the machine?"") # query machine"
8649435,What is on the white wall?," # what is on the white wall
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"") # wall is white, so no need to ask for it"
12487033,Does the logo look red?," # red or green
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""Does the logo look red or green?"")
    return logo_patches[0].simple_query(""Does the logo look red or green?"") # crop would include the logo so keep it in the query"
14301289,What type of vehicle is to the left of the white vehicle?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    white_vehicle_patches = image_patch.find(""white vehicle"")
    # Question assumes only one white vehicle patch
    if len(white_vehicle_patches) == 0:
        # If no white vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    for white_vehicle_patch in white_vehicle_patches:
        left_vehicle_patches = image_patch.find(""vehicle"")
        for left_vehicle_patch in left_vehicle_patches:
            if left_vehicle_patch.horizontal_center < white_vehicle_patch.horizontal_center:
                return left_vehicle_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"") # crop would include the vehicle so keep it in the query
    # If no vehicle is to the left of the white vehicle, pick the first vehicle
    return left_vehicle_patches[0].simple_query(""What type of vehicle is to the left of the white vehicle?"") # crop would include the vehicle so keep it in the query"
523976,Which kind of vehicle is large?," # for simplicity, assume one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.width > vehicle_patch.height:
            return vehicle_patch.simple_query(""Which kind of vehicle is large?"")
    # If no vehicle is large, pick the first vehicle
    return vehicle_patches[0].simple_query(""Which kind of vehicle is large?"") # crop would include the size so keep it in the query"
3423213,Who is in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18107197,Is the ottoman to the right or to the left of the brown chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"") # contains a relation so keep it in the query"
5716578,Is there a laptop on the bed near the magazines?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"") # contains a relation, so ask directly"
8215791,Is the porcelain toilet to the left or to the right of the small trash can?," # assumes only one patch per object
    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    small_trash_can_patches = image_patch.find(""small trash can"")
    if len(porcelain_toilet_patches) == 0 or len(small_trash_can_patches) == 0:
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    porcelain_toilet_patch = porcelain_toilet_patches[0]
    small_trash_can_patch = small_trash_can_patches[0]
    if porcelain_toilet_patch.horizontal_center < small_trash_can_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17528455,What is in front of the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
4896890,Do the goggles and the gloves have a different colors?," # goggles and gloves are assumed to be the same color
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"") # crop would include the gloves so keep it in the query
    goggles_color = goggles_patches[0].simple_query(""What is the color of the goggles?"")
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one gloves patch
    if len(gloves_patches) == 0:
        return ""yes""
    gloves_color = gloves_patches[0].simple_query(""What is the color of the gloves?"")
    return bool_to_yesno(goggles_color != gloves_color)"
947724,Is there any purple pillow or kite in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"") and image_patch.verify_property(""pillow"", ""purple"")
    is_kite = image_patch.exists(""kite"") and image_patch.verify_property(""kite"", ""purple"")
    return bool_to_yesno(is_pillow or is_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?"," # to the right of
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""standing""
    for people_patch in people_patches:
        if people_patch.horizontal_center > man_patch.horizontal_center:
            return people_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    return ""standing"""
15492262,Which kind of furniture is white?," # assumes one piece of white furniture
    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""furniture"")
    for white_patch in white_patches:
        if white_patch.simple_query(""What color is the furniture?"") == ""white"":
            return white_patch.simple_query(""What kind of furniture is white?"")
    return image_patch.simple_query(""Which kind of furniture is white?"") # if no white furniture is found, query the image directly"
151032547,Is the bear on the right side?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the bear on the right side?"") # crop would include the right side so keep it in the query"
5698674,Are there either any planters or benches?," # What is the type of object in the center of the image?
    image_patch = ImagePatch(image)
    is_planter = image_patch.exists(""planter"")
    is_bench = image_patch.exists(""bench"")
    return bool_to_yesno(is_planter or is_bench)"
19397103,What is the person that is standing staring at?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person that is standing staring at?"") # crop would include the staring so keep it in the query"
11630681,What is the color of the necklace?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the necklace?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
248245,Is the table to the left or to the right of the fence?," # assumes only one fence patch and one table patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return ""left""
    fence_patch = fence_patches[0]
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        return ""right""
    table_patch = table_patches[0]
    if table_patch.horizontal_center > fence_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
837033,Are there round windows or doors?," # image_patch exists
    image_patch = ImagePatch(image)
    round_patches = image_patch.find(""round window"") # round patches
    door_patches = image_patch.find(""door"") # door patches
    # Question assumes only one patch
    if len(round_patches) == 0 and len(door_patches) == 0:
        return ""no""
    elif len(round_patches) == 0:
        return ""door""
    elif len(door_patches) == 0:
        return ""round window""
    elif round_patches[0].horizontal_center > door_patches[0].horizontal_center:
        return ""round window""
    else:
        return ""door"""
5249150,Are there any bears or napkins in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vehicle is to the left of the person?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
61006749,Who is dressed in pink?," # image is a 3D array (height, width, channels)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is dressed in pink?"") # simple_query will determine if the image is 3D or not and handle accordingly"
6122955,Does the pillow have yellow color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return bool_to_yesno(pillow_patches[0].verify_property(""pillow"", ""yellow"")) # crop would include the color so keep it in the query"
6861738,Is the old woman to the right or to the left of the faucet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    # Question assumes only one old woman patch
    if len(old_woman_patches) == 0:
        # If no old woman is found, query the image directly
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    old_woman_patch = old_woman_patches[0]
    faucet_patches = image_patch.find(""faucet"")
    # Question assumes only one faucet patch
    if len(faucet_patches) == 0:
        # If no faucet is found, query the image directly
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    faucet_patch = faucet_patches[0]
    if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15833048,Which kind of animal is on the road?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is on the road?"") # crop would include the road so keep it in the query"
9524339,What animal is large?," # returns a list
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is large?"") # assumes only one patch"
18255749,How clean are the sheets the pillow is to the right of?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    left = pillow_patch.horizontal_center - 100 # 100 pixels
    right = pillow_patch.horizontal_center + 100 # 100 pixels
    lower = pillow_patch.vertical_center - 100 # 100 pixels
    upper = pillow_patch.vertical_center + 100 # 100 pixels
    return pillow_patch.crop(left, lower, right, upper).simple_query(""How clean are the sheets the pillow is to the right of?"") # crop would include the pillow so keep it in the query"
19797097,What's the man wearing?," # what's the man wearing?
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"") # crop would include the man so keep it in the query"
6899090,Is the man to the right or to the left of the appliance that looks white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
    return ""left"""
3357701,Does the dog to the right of the other dog have white color?," # relation is not in the query
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes two dog patches
    if len(dog_patches) < 2:
        # If no two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    right_dog_patch = dog_patches[0]
    left_dog_patch = dog_patches[1]
    if right_dog_patch.horizontal_center > left_dog_patch.horizontal_center:
        return bool_to_yesno(right_dog_patch.verify_property(""dog"", ""white""))
    else:
        return bool_to_yesno(left_dog_patch.verify_property(""dog"", ""white"")) # if not, return no"
2829418,What's the girl holding?," # assumes one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What's the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What's the girl holding?"") # crop would include the object so keep it in the query"
15930109,Which kind of vehicle is blue?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vehicle is blue?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1525382,What type of vegetable is on the food with the cheese?," # on the food with the cheese
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"") # crop would include the cheese so keep it in the query"
8548980,Are there either players or hand soaps?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?"," # no relation between the food and the action
    image_patch = ImagePatch(image)
    sandwich_patches = image_patch.find(""sandwich"")
    # Question assumes only one sandwich patch
    if len(sandwich_patches) == 0:
        # If no sandwich is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    return sandwich_patches[0].simple_query(""Which kind of food is not made, the sandwich or the croissant?"") # crop would include the action so keep it in the query"
6423906,Which kind of food is on the plate?," # assumes only one plate patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of food is on the plate?"")"
1993231,Are the animals in the image of different types?," # different types (horse, elephant, cow, etc)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    for animal_patch in animal_patches:
        is_different_type = animal_patch.simple_query(""What type of animal is it?"") != animal_patch.simple_query(""What type of animal is it next to?"")
        if is_different_type:
            return ""yes""
    return ""no"""
13949656,Are there any people to the left of the tray?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?," # in the image
    image_patch = ImagePatch(image)
    fresh_pineapple_patches = image_patch.find(""fresh pineapple"")
    # Question assumes only one fresh pineapple patch
    if len(fresh_pineapple_patches) == 0:
        # If no fresh pineapple is found, query the image directly
        return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")
    return fresh_pineapple_patches[0].verify_property(""fresh pineapple"", ""ripe"") # crop would include the color so keep it in the query"
9392591,Are there chairs or smoothies?," # This is a new function
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"") # contains a relation, so ask directly"
9896138,Are there any boxes to the left of the screen in the picture?," # image is a PIL image object
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""box"") and image_patch.horizontal_center < (image_patch.right + image_patch.left) / 2) # horizontal center of image is half of width"
1400333,What do you think is the man on?," # uses a relation (on) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the man on?"") # crop would include the object so keep it in the query"
13105327,Is the boot white or orange?," # not an object but a property
    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    return boot_patches[0].best_text_match([""white"", ""orange""]) # crop would include the color so keep it in the query"
3659880,Does the wood boat have silver color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""wood boat"", ""silver"")) # diff between wood boat and boat, and between silver and blue, etc"
1827802,Is the red pot on the appliance to the right of the mixer?," # query assumes only one appliance patch
    image_patch = ImagePatch(image)
    red_pot_patch = image_patch.find(""red pot"")[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""no""
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center > mixer_patch.horizontal_center:
            return bool_to_yesno(appliance_patch.verify_property(""appliance"", ""red pot on""))
    return ""no"""
14809102,The phone that is in front of the camera is of what color?," # takes an image and returns the color of the phone in front of the camera
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # Question assumes only one phone patch
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    for phone_patch in phone_patches:
        if phone_patch.horizontal_center > image_patch.horizontal_center: # front of the camera
            return phone_patch.simple_query(""What color is the phone?"")
    # If no phone is in front of the camera, pick the first phone
    return phone_patches[0].simple_query(""What color is the phone?"") # crop would include the phone so keep it in the query"
61001545,What type of food is to the left of the silver spoon?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
799463,Are there both a window and a door in the picture?," # boolean
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
11260725,Does the water have small size and white color?," # no need for image_patch
    return bool_to_yesno(verify_property(image, ""water"", ""small size"") and verify_property(image, ""water"", ""white color"")) # no need for image_patch"
2397653,Are there any fences that are white?," # ->str
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any fences that are white?"")
    for fence_patch in fence_patches:
        is_white = fence_patch.verify_property(""fence"", ""white"")
        if is_white:
            return ""yes""
    return ""no"""
1554603,Who is holding the animal?," # assumes only one patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    for animal_patch in animal_patches:
        holder_patches = image_patch.find(""holder"")
        # Question assumes only one holder patch
        if len(holder_patches) == 0:
            return image_patch.simple_query(""Who is holding the animal?"")
        holder_patch = holder_patches[0]
        if holder_patch.horizontal_center > animal_patch.horizontal_center:
            return holder_patch.simple_query(""Who is holding the animal?"")
    # If no holder is found, query the image directly
    return image_patch.simple_query(""Who is holding the animal?"") # crop would include the animal so keep it in the query"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"") # assumes one patch for each object"
8988476,What kind of furniture is presented in this photo?," # return a list of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is presented in this photo?"") # query the image directly"
10695214,What is the man with the backpack holding?," # the backpack is in the query
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patch = backpack_patches[0]
    if backpack_patch.horizontal_center > man_patch.horizontal_center:
        backpack_patch = backpack_patches[1]
    return backpack_patch.simple_query(""What is the man holding?"") # crop would include the backpack so keep it in the query"
91058050,Are there both mouse pads and computer mice in the photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""mouse pad"") and image_patch.exists(""computer mouse"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1972064,Is the person in front of the tree wearing jeans?," # crop would include the tree and the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")
    for person_patch in person_patches:
        is_wearing_jeans = (person_patch.simple_query(""Is the person wearing jeans?"") == ""yes"")
        if is_wearing_jeans:
            return ""yes""
    return ""no"""
167162,Is there a bike to the right of the purse that is to the right of the woman?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1695388,Who is wearing a shirt?," # shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for shirt_patch in shirt_patches:
        shirt_wearer_patches = image_patch.find(""shirt wearer"")
        # Question assumes only one shirt wearer patch
        if len(shirt_wearer_patches) == 0:
            # If no shirt wearer is found, query the image directly
            return image_patch.simple_query(""Who is wearing a shirt?"")
        return shirt_wearer_patches[0].simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query"
10960149,Is the woman to the left or to the right of the man in the bottom?," # bottom
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""left""
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16921984,What is the bent man to the right of the other men doing?," # assumes one bent man patch
    image_patch = ImagePatch(image)
    bent_man_patch = image_patch.find(""bent man"")[0]
    other_men_patches = image_patch.find(""man"")
    # Question assumes only one other man patch
    if len(other_men_patches) == 0:
        # If no other man is found, query the image directly
        return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    for other_man_patch in other_men_patches:
        if bent_man_patch.horizontal_center > other_man_patch.horizontal_center:
            return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return bent_man_patch.simple_query(""What is the bent man doing?"") # crop would include the other men so keep them in the query"
12175564,What animal are the men to the right of the girl leading?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal are the men to the right of the girl leading?"") # crop would include the leading so keep it in the query"
1219606,On which side of the image is the house?," # image is horizontal
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
1770499,Is the black suitcase to the right or to the left of the person on the left?," # left, right, or neither
    image_patch = ImagePatch(image)
    black_suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one black suitcase patch
    if len(black_suitcase_patches) == 0:
        # If no black suitcase is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    suitcase_patch = black_suitcase_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    person_patch = person_patches[0]
    if suitcase_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
5282406,Is the pot to the left of a chair?," # no image patch needed
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    for pot_patch in pot_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if pot_patch.horizontal_center < chair_patch.horizontal_center:
                return ""yes""
    return ""no"""
10914401,Where are the people?," # crop would include people so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the people?"") # crop would include people so keep it in the query"
1919722,What animal is eating the grass?," # crop would include the eating so keep it in the query
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""eating""):
            return animal_patch.simple_query(""What animal is eating the grass?"") # crop would include the eating so keep it in the query
    # If no animal is eating, query the image directly
    return image_patch.simple_query(""What animal is eating the grass?"") # crop would include the eating so keep it in the query"
9681008,Who is wearing a helmet?," # helmet
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for helmet_patch in helmet_patches:
        return helmet_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query"
16861675,Who is on the surfboard in the middle of the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"") # assumes a single patch"
10947426,What is the color of the lizard beside the banana?," # assumes one patch for the lizard and one patch for the banana
    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    # Question assumes only one lizard patch
    if len(lizard_patches) == 0:
        # If no lizard is found, query the image directly
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    lizard_patch = lizard_patches[0]
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        return ""no""
    banana_patch = banana_patches[0]
    # query the color of the lizard beside the banana
    return lizard_patch.simple_query(""What is the color of the lizard beside the banana?"") # crop would include the banana so keep it in the query"
18200684,Is the wine glass in the top or in the bottom part?," # not wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    if wine_glass_patches[0].vertical_center > image_patch.vertical_center:
        return ""top""
    else:
        return ""bottom"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"") # crop would include the people so keep it in the query"
171012637,Is the teddy bear to the right of a suitcase?," # to the right of
    image_patch = ImagePatch(image)
    teddy_bear_patches = image_patch.find(""teddy bear"")
    # Question assumes only one teddy bear patch
    if len(teddy_bear_patches) == 0:
        # If no teddy bear is found, query the image directly
        return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"")
    suitcase_patches = image_patch.find(""suitcase"")
    # Question assumes only one suitcase patch
    if len(suitcase_patches) == 0:
        return ""no""
    for suitcase_patch in suitcase_patches:
        if suitcase_patch.horizontal_center > teddy_bear_patch.horizontal_center:
            return ""yes""
    return ""no"""
19861372,Is the woman's hair long or short?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    return woman_patch.best_text_match([""long"", ""short""])"
623889,Are both the television and the armchair the same color?," # only one command per function
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""television"")
    # Question assumes only one tv patch
    if len(tv_patches) == 0:
        # If no tv is found, query the image directly
        return image_patch.simple_query(""Are both the television and the armchair the same color?"")
    for tv_patch in tv_patches:
        armchair_patches = image_patch.find(""armchair"")
        # Question assumes only one armchair patch
        if len(armchair_patches) == 0:
            return ""no""
        for armchair_patch in armchair_patches:
            is_same_color = (tv_patch.simple_query(""What color is the tv?"") == armchair_patch.simple_query(""What color is the armchair?""))
            if is_same_color:
                return ""yes""
    return ""no"""
4917605,Is the shoe white or brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shoe white or brown?"") # shoe is a relational verb so ask directly"
91055143,What is on the table?," # returns the object on the table
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"") # assumes only one patch on the table"
5430643,What do you think sits on the plate to the left of the tomato?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"") # crop would include the plate and the tomato so keep them in the query"
523936,Is the woman in the top part of the picture?," # no relation so ask directly
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    if woman_patches[0].vertical_center > image_patch.vertical_center:
        return ""yes""
    return ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?," # contains a relation (on, under, above, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"") # crop would include the bed and nightstand so keep it in the query"
14292161,The pot is of which color?," # pot is the object of interest
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""The pot is of which color?"")
    pot_patch = pot_patches[0]
    return pot_patch.simple_query(""The pot is of which color?"") # crop would include the pot so keep it in the query"
17495150,"What device is black, the microphone or the laptop?"," # uses relation to find the device
    image_patch = ImagePatch(image)
    is_microphone_black = image_patch.exists(""microphone black"")
    is_laptop_black = image_patch.exists(""laptop black"")
    if is_microphone_black:
        return ""microphone""
    elif is_laptop_black:
        return ""laptop""
    else:
        return ""neither"""
1521847,Is the cat on a desk?," # no relation
    image_patch = ImagePatch(image)
    is_cat = image_patch.exists(""cat"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_cat and is_desk) # only ask if both exist"
16465081,The man is holding what?," # assuming only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""The man is holding what?"") # crop would include the object being held so keep it in the query"
17387032,What is on the post?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"") # crop would include the post so keep it in the query"
1892436,What is in front of the kids that are looking at the cake?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"") # crop would include the kids looking at the cake so keep it in the query"
18906705,How big is the crowd?," # assumes the image is centered
    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""crowd"")
    # Question assumes only one crowd patch
    if len(crowd_patches) == 0:
        # If no crowd is found, query the image directly
        return image_patch.simple_query(""How big is the crowd?"")
    horizontal_size = crowd_patches[0].horizontal_center - crowd_patches[0].left
    vertical_size = crowd_patches[0].upper - crowd_patches[0].lower
    if horizontal_size == 0 and vertical_size == 0:
        return ""none""
    elif horizontal_size == 0:
        return ""vertical""
    elif vertical_size == 0:
        return ""horizontal""
    elif horizontal_size > vertical_size:
        return ""horizontal""
    else:
        return ""vertical"""
6157200,Does the sign on the pole have white color?," # execute_command
    image_patch = ImagePatch(image)
    sign_on_pole_patches = image_patch.find(""sign on pole"") # crop would include the pole so keep it in the query
    # Question assumes only one sign on pole patch
    if len(sign_on_pole_patches) == 0:
        # If no sign on pole is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    return sign_on_pole_patches[0].verify_property(""sign on pole"", ""white"")"
16760226,What's the laptop in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
111054070,How large is the bed?," # returns size in feet
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    bed_patch = bed_patches[0]
    # assumes that the bed is a rectangle
    length = bed_patch.width / 12
    width = bed_patch.height / 12
    if width > length:
        return width
    else:
        return length"
14143886,Where is the person with the luggage standing on?," # has a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the person with the luggage standing on?"") # ground or grass"
19872633,Are there either any fire extinguishers or pepper shakers?," # exists
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)"
12755010,Is the bottle to the right of a napkin?," # assumes one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        return ""no""
    for bottle_patch in bottle_patches:
        if bottle_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    napkin_patches = image_patch.find(""napkin"")
    for napkin_patch in napkin_patches:
        if bottle_patch.horizontal_center > napkin_patch.horizontal_center:
            return ""yes""
    return ""no"""
2747001,Are there any soaps or bombs?," # bomb is a common object name
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see baby giraffes or elephants?"") # assumes only one answer so simple query is used"
6898877,What is the sign on?," # contains a relation (on, in, near, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"") # crop would include the object so keep it in the query"
15862812,What is the sticker on?," # TODO: implement simple_query for relation
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    sticker_patch = sticker_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return ""the ground""
    object_patch = object_patches[0]
    if object_patch.horizontal_center > sticker_patch.horizontal_center:
        return ""the ground""
    return sticker_patch.simple_query(""What is the sticker on?"") # crop would include the object so keep it in the query"
141031470,On which side of the image is the white towel?," # left, right
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    towel_patch = towel_patches[0]
    horizontal_center = towel_patch.horizontal_center
    if horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
41026846,Who rides a motorcycle?," # contains a relation (on, in, with, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who rides a motorcycle?"") # crop would include the motorcycle so keep it in the query"
16540391,What is around the bathtub the towel is on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the bathtub the towel is on?"") # crop would include the bathtub so keep it in the query"
7469617,Is the man to the left or to the right of the person that is to the left of the people?," # left is to the right in the image
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    left_of_people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(left_of_people_patches) == 0:
        return ""left""
    left_of_people_patch = left_of_people_patches[0]
    if left_of_people_patch.horizontal_center > man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
64308,What's located on top of the soup?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?," # needs to be modified
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    fence_patch = fence_patches[0]
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        return ""yes""
    bench_patch = bench_patches[0]
    if fence_patch.simple_query(""What material is the fence made of?"") == bench_patch.simple_query(""What material is the bench made of?""):
        return ""yes""
    return ""no"""
3196255,Are there helmets that are not white?," # helmet, helmet (white), helmet (blue), helmet (red)
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    helmet_patch = helmet_patches[0]
    if helmet_patch.simple_query(""Is the helmet white?"") == ""yes"":
        return ""no""
    else:
        return ""yes"""
2992630,Is the bowl to the right or to the left of the man that is drinking?," # assumes only one man and one bowl
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is drinking"")
    bowl_patches = image_patch.find(""bowl"")
    man_patch = man_patches[0]
    bowl_patch = bowl_patches[0]
    if bowl_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
513894,Is the person above the sand wearing glasses?," # assumes the person and sand are in the image
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        return ""no""
    sand_patch = sand_patches[0]
    if person_patch.vertical_center > sand_patch.vertical_center:
        return person_patch.simple_query(""Is the person wearing glasses?"")
    return ""no"""
14167599,Is the color of the life preserver the same as that of the house?," # contains a relation (same as, different from, etc), so ask directly
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    # Question assumes only one life preserver patch
    if len(life_preserver_patches) == 0:
        # If no life preserver is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    life_preserver_patch = life_preserver_patches[0]
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    house_patch = house_patches[0]
    return bool_to_yesno(life_preserver_patch.cropped_image[0, 0] == house_patch.cropped_image[0, 0]) # crop would include the house so keep it in the query"
18264755,How is the weather?," # no relation, no object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"") # no relation, no object"
6711450,What is the animal that is looking into the toilet that is not closed?," # the command is the same as the query
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    for animal_patch in animal_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.simple_query(""Is the toilet closed?"") == ""no"":
                return animal_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"") # crop would include the toilet so keep it in the query
    # If no toilet is not closed, pick the first animal
    return animal_patches[0].simple_query(""What is the animal that is looking into the toilet that is not closed?"") # crop would include the toilet so keep it in the query"
8641613,Do you see any helmets in the picture that are not red?," # helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet, helmet"
2409779,What does the happy person hold?," # assumes one happy person
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    if len(happy_patches) == 0:
        return image_patch.simple_query(""What does the happy person hold?"")
    happy_patch = happy_patches[0]
    # assumes only one object is being held
    for object_patch in happy_patch.find(""object being held""):
        return object_patch.simple_query(""What does the happy person hold?"")
    return image_patch.simple_query(""What does the happy person hold?"") # assumes no object is being held"
8461507,Are there either tissue boxes or lamps in the picture?," # (tissue box, lamp)
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?," # asks directly
    return image_patch.simple_query(""Which kind of animal is it?"") # image_patch is the ImagePatch of the original image"
19102906,What type of drink is to the left of the plate?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of drink is to the left of the plate?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18315440,Is the sky cloudy and blue?," # returns yes or no
    image_patch = ImagePatch(image)
    sky_patch = image_patch.find(""sky"")[0]
    is_cloudy = sky_patch.verify_property(""sky"", ""cloudy"")
    is_blue = sky_patch.verify_property(""sky"", ""blue"")
    return bool_to_yesno(is_cloudy and is_blue) # returns yes if both are true, no otherwise"
453061,Is the fork on the right of the image?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.horizontal_center > image_patch.width / 2)"
71002567,"What is the broccoli on, a table or a nightstand?"," # contains a relation (on, next to, in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"") # crop would include the surface so keep it in the query"
17465089,Is the field green and small?," # not a patch
    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Is the field green and small?"") # crop would include the field so keep it in the query
    if field_patches[0].simple_query(""Is the field green?"") == ""yes"" and field_patches[0].simple_query(""Is the field small?"") == ""yes"":
        return ""yes""
    return ""no"""
16150157,What is on the wall?," # not a relational verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"") # crop would include the wall so keep it in the query"
17882658,Is the van to the left or to the right of the SUV on the right side?," # image_patch is on the right
    image_patch = ImagePatch(image, image_patch.right, image_patch.lower, image_patch.right, image_patch.upper)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    if van_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15101358,Is the girl to the left of the boy?," # crop would include the direction so keep it in the query
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    girl_patch = girl_patches[0]
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        return ""no""
    boy_patch = boy_patches[0]
    if girl_patch.horizontal_center < boy_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
12785181,What animals are in the grass?," # grass is a location
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in the grass?"") # contains a relation (in), so ask directly"
348093,Are there both an apple and a bag in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
314181,Which sign is shown?," # ask for a predicate of a relational verb (showing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which sign is shown?"") # crop would include the sign so keep it in the query"
16275314,"On which side is the woman, the right or the left?"," # image patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    if woman_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
19535592,Who runs on the sand?," # assumes only one patch
    image_patch = ImagePatch(image)
    runner_patches = image_patch.find(""runner"")
    # Question assumes only one runner patch
    if len(runner_patches) == 0:
        # If no runner is found, query the image directly
        return image_patch.simple_query(""Who runs on the sand?"")
    return runner_patches[0].simple_query(""Who runs on the sand?"") # crop would include the sand so keep it in the query"
156886,Is there a giraffe near the bush?," # near
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    bush_patches = image_patch.find(""bush"")
    # Question assumes only one bush patch
    if len(bush_patches) == 0:
        return ""no""
    return bool_to_yesno(giraffe_patch.horizontal_center > (bush_patch.horizontal_center - bush_patch.width)) # near"
1756642,Which place is it?," # returns a place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # simple_query would ask ""What is this?"" by default"
11177243,Who wears the shirt?," # shirt on body
    image_patch = ImagePatch(image)
    shirt_wearing_patches = image_patch.find(""shirt on body"")
    # Question assumes only one shirt_wearing_patch
    if len(shirt_wearing_patches) == 0:
        # If no shirt_wearing_patch is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    return shirt_wearing_patches[0].simple_query(""Who wears the shirt?"") # crop would include the shirt so keep it in the query"
1972390,What type of animal is standing in the field?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal is standing in the field?"") # crop would include the field so keep it in the query"
14579439,Is the stuffed animal on the right?," # returns yes or no
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    if stuffed_animal_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
6645395,Is the gray building behind the passengers that are boarding the airplane?," # query directly
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"") # crop would include the passengers so keep it in the query"
19610200,Is the fence metallic?," # the fence is in the background
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return bool_to_yesno(fence_patches[0].verify_property(""fence"", ""metallic""))"
5299471,What does the girl that to the left of the trashcan carry?," # assumes a girl to the left of a trashcan
    image_patch = ImagePatch(image)
    trashcan_patches = image_patch.find(""trashcan"")
    # Question assumes only one trashcan patch
    if len(trashcan_patches) == 0:
        # If no trashcan is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    for trashcan_patch in trashcan_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if girl_patch.horizontal_center < trashcan_patch.horizontal_center:
                return girl_patch.simple_query(""What does the girl carry?"")
    # If no girl is to the left of the trashcan, query the image directly
    return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"") # crop would include the trashcan so keep it in the query"
7548203,Which kind of vegetable is on the pizza?," # needs to be a relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vegetable is on the pizza?"") # pizza is the relation"
91027737,On which side is the pan?," # left, right, or no pan
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
19133443,Are the black cars in the top part of the photo?," # assumes image is RGB
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    if black_car_patches[0].vertical_center > image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
6144031,Who is in the living room?," # (living room, bedroom, etc)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"") # assume living room is the default"
14300987,What is the sink made of?," # assumes only one sink patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?," # bird
    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?," # ImagePatch
    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return ""bicycle"" if is_bicycle else ""biker"""
844747,Are there both a pillow and a kitten in the image?," # pillow or kitten
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)"
1104500,What kind of food is in the box?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of food is in the box?"") # box is a relation so keep it in the query"
4204973,What is the food that is to the left of the kid called?," # food
    image_patch = ImagePatch(image)
    kid_patches = image_patch.find(""kid"")
    # Question assumes only one kid patch
    if len(kid_patches) == 0:
        # If no kid is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    for kid_patch in kid_patches:
        food_patches = image_patch.find(""food"")
        # Question assumes only one food patch
        if len(food_patches) == 0:
            return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < kid_patch.horizontal_center:
                return food_patch.simple_query(""What is the food that is to the left of the kid called?"")
    # If no food is to the left of the kid, pick the first food
    return food_patches[0].simple_query(""What is the food that is to the left of the kid called?"") # crop would include the food so keep it in the query"
11820726,"What device is the desk in front of, a television or a printer?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    for desk_patch in desk_patches:
        is_in_front_of_tv = (desk_patch.simple_query(""Is the desk in front of a television or a printer?"") == ""television"")
        if is_in_front_of_tv:
            return ""television""
        is_in_front_of_printer = (desk_patch.simple_query(""Is the desk in front of a television or a printer?"") == ""printer"")
        if is_in_front_of_printer:
            return ""printer""
    # If no device is in front of the desk, pick the first device
    return desk_patches[0].simple_query(""What device is the desk in front of, a television or a printer?"") # crop would include the device so keep it in the query"
18114588,Do you see a helmet there?," # is there a helmet in the image?
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""helmet""))"
11950874,What animal is standing on the ground?," # assumes one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    return animal_patches[0].simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the small car to the left of the fork on the right?"") # crop would include the fork so keep it in the query"
16184942,Does that grass look brown and short?," # returns ""yes"" or ""no""
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""grass"", ""brown and short"")) # crop would include the color and height, so keep it in the query"
6312238,Is the hydrant to the left of the car?," # this function is only used for testing
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    # Question assumes only one hydrant patch
    if len(hydrant_patches) == 0:
        # If no hydrant is found, query the image directly
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    for hydrant_patch in hydrant_patches:
        car_patches = image_patch.find(""car"")
        # Question assumes only one car patch
        if len(car_patches) == 0:
            return image_patch.simple_query(""Is the hydrant to the left of the car?"")
        for car_patch in car_patches:
            if car_patch.horizontal_center > hydrant_patch.horizontal_center:
                return ""yes""
    return ""no"""
16646227,On which side of the picture is the gray car?," # right or left
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    if gray_car_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?," # only works if there is one person wearing sneakers
    image_patch = ImagePatch(image)
    sneakers_patches = image_patch.find(""person wearing sneakers"")
    # Question assumes only one sneakers patch
    if len(sneakers_patches) == 0:
        # If no person is found wearing sneakers, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for sneakers_patch in sneakers_patches:
        ball_patches = image_patch.find(""ball"")
        # Question assumes only one ball patch
        if len(ball_patches) == 0:
            return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
        for ball_patch in ball_patches:
            if ball_patch.horizontal_center > sneakers_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
3443704,What is the woman wearing?," # crop would include the clothing so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the woman wearing?"") # crop would include the clothing so keep it in the query"
19313572,What is the color of the tent to the left of the vehicles?," # returns the color of the tent
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    tent_patch = tent_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    vehicle_patch = vehicle_patches[0]
    if tent_patch.horizontal_center < vehicle_patch.horizontal_center:
        return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    return vehicle_patch.simple_query(""What is the color of the tent to the left of the vehicles?"") # crop would include the vehicles so keep it in the query"
10885675,What is the toilet seat made of?," # is this really the best way to do it?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet seat made of?"") # if no toilet is found, query the image directly"
6926432,What animal is resting on the blanket?," # a relation (on, in, etc) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is resting on the blanket?"") # crop would include the blanket so keep it in the query"
14561612,What color do you think the bikini that the woman is wearing is?," # the patch would be the woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    bikini_patches = woman_patch.find(""bikini"")
    # Question assumes only one bikini patch
    if len(bikini_patches) == 0:
        # If no bikini is found, query the image directly
        return woman_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    return bikini_patches[0].simple_query(""What color do you think the bikini that the woman is wearing is?"") # crop would include the bikini so keep it in the query"
6587755,Are both the room and the bowl the same color?," # is the room and the bowl the same color?
    image_patch = ImagePatch(image)
    is_room_same_color = image_patch.simple_query(""Is the room the same color as the bowl?"") == ""yes""
    return bool_to_yesno(is_room_same_color)"
4479543,Is the barn white or brown?," # returns the answer
    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    # Question assumes only one barn patch
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    return barn_patches[0].best_text_match([""white"", ""brown""]) # best text match returns the string that best matches the image"
972522,Does the box look white or brown?," # image is in the wrong order, correct it
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"") # correct the order of the patches
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].simple_query(""Does the box look white or brown?"") # crop would include the color so keep it in the query"
3948528,What is the bowl made of?," # assumes only one bowl
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?," # gray or red
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    rock_patches = image_patch.find(""rock"")
    # Question assumes only one bench and one rock patch
    if len(bench_patches) == 0 or len(rock_patches) == 0:
        # If no bench or rock is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    bench_patch = bench_patches[0]
    rock_patch = rock_patches[0]
    if bench_patch.horizontal_center > rock_patch.horizontal_center:
        return ""gray""
    else:
        return ""red"""
866459,On which side is the couch?," # left or right
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the couch, the left or the right?"") # assumes only one couch patch"
8614812,Is the person that is playing wearing shorts?," # crop would include the shorts so keep it in the query
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    return person_patches[0].simple_query(""Is the person that is playing wearing shorts?"") # crop would include the shorts so keep it in the query"
167438,What is wearing the ground?," # assumes one object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"") # assumes one object"
9418088,Which kind of furniture is wooden?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is wooden?"")"
1042377,Who is standing beside the person that is wearing a dress?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"") # crop would include the dress so keep it in the query"
16889676,Is it an indoors or outdoors scene?," # ->str
    image_patch = ImagePatch(image)
    if image_patch.exists(""grass"") or image_patch.exists(""tree"") or image_patch.exists(""cloud"") or image_patch.exists(""sun""):
        return ""outdoors""
    elif image_patch.exists(""floor"") or image_patch.exists(""table"") or image_patch.exists(""bookshelf"") or image_patch.exists(""bed"") or image_patch.exists(""shelf"") or image_patch.exists(""couch"") or image_patch.exists(""chair"") or image_patch.exists(""door"") or image_patch.exists(""window""):
        return ""indoors""
    elif image_patch.exists(""car"") or image_patch.exists(""train"") or image_patch.exists(""bus"") or image_patch.exists(""ship"") or image_patch.exists(""airplane"") or image_patch.exists(""bike"") or image_patch.exists(""scooter"") or image_patch.exists(""skateboard""):
        return ""indoors"" # or ""outdoors"", but ""indoors"" is safer
    else:
        return ""indoors"" # or ""outdoors"", but ""indoors"" is safer"
10324400,How fat are the long skis?," # ski shape is long, so assume long skis
    image_patch = ImagePatch(image)
    long_ski_patches = image_patch.find(""long ski"")
    # Question assumes only one long_ski patch
    if len(long_ski_patches) == 0:
        # If no long_ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    return long_ski_patches[0].simple_query(""How fat are the long skis?"") # crop would include the fat so keep it in the query"
2211743,Is the sky clear or overcast?," # not used in the relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sky condition, clear or overcast?"") # sky condition is not a relation so ask directly"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?," # is there a bottle to the left of a pencil in the bottom part of the image?
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"") # crop would include the bottles and pencils so keep it in the query"
15478302,Is there any dark door or window in the image?," # door and window are similar, so just check for one
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Is there any dark door or window in the image?"")
    for door_patch in door_patches:
        is_dark = door_patch.simple_query(""Is the door dark?"")
        if is_dark:
            return ""yes""
    return ""no"""
18414234,Do you see either a knife or a chair in the picture?," # or just ""yes""
    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)"
19779815,Is the book red or yellow?," # assumes only one patch
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    return book_patches[0].simple_query(""What color is the book?"") # crop would include the book so keep it in the query"
7257283,Are there men to the left of the picture?," # crop would include the picture so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there men to the left of the picture?"") # crop would include the picture so keep it in the query"
6621625,On which side of the picture is the bench?," # has a relation (left, right, center) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the picture is the bench?"") # left, right, center"
19311589,Are there both fences and horses in this picture?," # only one image patch
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse) # bool_to_yesno is a helper function that converts True/False to yes/no"
171018070,What device is to the right of the container that the person is to the left of?," # assumes a simple image
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > image_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"") # if no device is to the right, query the image directly"
171031333,Do you see blankets in the picture that are not black?," # no relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see blankets in the picture that are not black?"") # no relation, so ask directly"
16695341,What is the fence made of?," # no relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"") # no relation, so ask directly"
8314287,Do you see any bottle or child there?," # in the image
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)"
5111363,Are there chairs or tables that are not blue?," # TODO: improve this function
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    if is_chair and is_table:
        return ""yes""
    if is_chair:
        chair_patch = image_patch.find(""chair"")[0]
        return ""yes"" if not chair_patch.verify_property(""chair"", ""blue"") else ""no""
    elif is_table:
        table_patch = image_patch.find(""table"")[0]
        return ""yes"" if not table_patch.verify_property(""table"", ""blue"") else ""no""
    else:
        return ""no"""
9230971,Which place is it?," # What place is this?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"") # simple query will return the answer to ""What place is this?"" if no question is provided"
132422,Does the hair have short length and white color?," # short length
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    if hair_patches[0].verify_property(""hair"", ""length"") == ""short"":
        if hair_patches[0].verify_property(""hair"", ""color"") == ""white"":
            return ""yes""
    return ""no"""
4822200,Do you see any lettuce on the food with the meat?," # meat is assumed to be on the top
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    return ""yes"""
3726666,What device is to the left of the curtain that is to the left of the glasses?," # device, glasses, curtain
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"") # crop would include the glasses and curtain so keep them in the query"
9954849,What kind of furniture is it?," # assumes the image is in the correct orientation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is it?"") # assumes the image is in the correct orientation"
19409495,Are there any red trains or buses?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any red trains or buses?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?," # query to the left of the crate that is of the lettuce
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    lettuce_patch = lettuce_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center < lettuce_patch.horizontal_center:
            return vegetable_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    return lettuce_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"") # if no vegetable is found to the left of the lettuce, query the image directly"
623393,"What type of clothing is tan, the hat or the vest?"," # tan is the color of the clothing, hat and vest are the objects
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan clothing"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan clothing is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        # If no hat is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    vest_patches = image_patch.find(""vest"")
    # Question assumes only one vest patch
    if len(vest_patches) == 0:
        # If no vest is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    if tan_patches[0].horizontal_center > hat_patch.horizontal_center:
        if tan_patches[0].horizontal_center > vest_patch.horizontal_center:
            return ""hat""
        else:
            return ""vest""
    elif tan_patches[0].horizontal_center > vest_patch.horizontal_center:
        return ""vest""
    else:
        return ""hat"""
6436448,Is the color of the skirt the same as the scarf?," # and is the color of the scarf the same as the color of the shirt?
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"") # and is the color of the scarf the same as the color of the shirt?
    for skirt_patch in skirt_patches:
        scarf_patches = image_patch.find(""scarf"")
        # Question assumes only one scarf patch
        if len(scarf_patches) == 0:
            return ""no"" # and ""no"" # If no scarf is found, query the image directly
        for scarf_patch in scarf_patches:
            shirt_patches = image_patch.find(""shirt"")
            # Question assumes only one shirt patch
            if len(shirt_patches) == 0:
                return ""no"" # and ""no"" # If no shirt is found, query the image directly
            for shirt_patch in shirt_patches:
                return bool_to_yesno(skirt_patch.simple_query(""What color is the skirt?"") == scarf_patch.simple_query(""What color is the scarf?"") and skirt_patch.simple_query(""What color is the skirt?"") == shirt_patch.simple_query(""What color is the shirt?""))
    # If no skirt is found, query the image directly
    return image_patch.simple_query(""Is the color of the skirt"
3303313,Is the blanket under a cat?," # crop would include the cat so keep it in the query
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is the blanket under a cat?"")
    for blanket_patch in blanket_patches:
        cat_patches = image_patch.find(""cat"")
        # Question assumes only one cat patch
        if len(cat_patches) == 0:
            # If no cat is found, query the image directly
            return image_patch.simple_query(""Is the blanket under a cat?"")
        for cat_patch in cat_patches:
            if cat_patch.vertical_center > blanket_patch.vertical_center:
                return ""yes""
    return ""no"""
443663,What color is the picture?," # needs to be a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"") # color is a property of the image itself, so ask directly"
17267472,Is there any umbrella to the right of the man?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        return ""no""
    umbrella_patch = umbrella_patches[0]
    if umbrella_patch.horizontal_center > man_patch.horizontal_center:
        return ""yes""
    return ""no"""
1885406,What is the toy on the bed?," # todo: add relation
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the toy on the bed?"") # todo: add relation"
5557965,On which side is the bag?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    bag_patch = bag_patches[0]
    horizontal_center = bag_patch.horizontal_center
    if horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
4325825,On which side is the banana?," # left or right
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
3196355,What does the batter hold?," # batter = person in a batter's stance
    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    for batter_patch in batter_patches:
        held_object_patches = image_patch.find(""held object"")
        # Question assumes only one held object patch
        if len(held_object_patches) == 0:
            return batter_patch.simple_query(""What does the batter hold?"")
        return held_object_patches[0].simple_query(""What does the batter hold?"") # crop would include the held object so keep it in the query"
14470748,Who wears a jacket?," # crop would include the jacket so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a jacket?"") # contains a predicate of a relational verb (wearing), so ask directly"
16537736,Are there any houses behind the shrubs?," # house or building
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"") # house or building
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    for house_patch in house_patches:
        is_behind_shrub = False
        for shrub_patch in image_patch.find(""shrub""):
            if house_patch.horizontal_center < shrub_patch.horizontal_center:
                is_behind_shrub = True
                break
        if is_behind_shrub:
            return ""yes""
    return ""no"""
1129541,What piece of furniture is made of wood?," # wood is a property, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture is made of wood?"") # wood is a property, so ask directly"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?," # only one man and one hat
    image_patch = ImagePatch(image)
    man_hat_patches = image_patch.find(""man wearing a hat"")
    # Question assumes only one man patch
    if len(man_hat_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_hat_patch = man_hat_patches[0]
    man_hat_center = man_hat_patch.horizontal_center
    # Question assumes only one racket patch
    if len(image_patch.find(""racket"")) == 0:
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    racket_patch = image_patch.find(""racket"")[0]
    racket_center = racket_patch.horizontal_center
    if racket_center > man_hat_center:
        return ""right""
    else:
        return ""left"""
12416703,Where is that cat?," # x, y
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Where is that cat?"")
    return cat_patches[0].simple_query(""Where is that cat?"") # crop would include the cat so keep it in the query"
15603088,The animal to the right of the envelope is lying on what?," # assumes only one animal patch and one envelope patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    envelope_patches = image_patch.find(""envelope"")
    for animal_patch in animal_patches:
        for envelope_patch in envelope_patches:
            if envelope_patch.horizontal_center > animal_patch.horizontal_center:
                return animal_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"") # if no envelope is found, query the image directly"
5329077,Is the man on a bench?," # This is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on a bench?"") # crop would include the bench so keep it in the query"
1945705,What kind of device is to the left of the device that looks silver and gray?," # execute_command is used to avoid confusion with the ImagePatch class
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"") # crop would include the color so keep it in the query"
17520003,What vehicle is to the right of the pine tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the pine tree?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1259983,Who is wearing pants?," # no relation
    image_patch = ImagePatch(image)
    wearing_pants = image_patch.simple_query(""Who is wearing pants?"")
    return wearing_pants"
6413378,Is there a black keyboard or camera?," # assume one patch for keyboard or camera
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    if len(keyboard_patches) == 0:
        camera_patches = image_patch.find(""camera"")
        if len(camera_patches) == 0:
            return ""no""
        return ""camera""
    return ""keyboard"""
947305,Is the sunny water blue and high?," # returns yes or no
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the sunny water blue and high?"")
    water_patch = water_patches[0]
    is_blue = water_patch.verify_property(""water"", ""blue"")
    is_high = water_patch.horizontal_center > image_patch.horizontal_center
    return bool_to_yesno(is_blue and is_high)"
4367817,What type of animal in this scene is brown?," # scene
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""animal"")
    # Question assumes only one brown animal patch
    for animal_patch in brown_animal_patches:
        if animal_patch.simple_query(""What color is the animal?"") == ""brown"":
            return animal_patch.simple_query(""What type of animal is it?"")
    # If no brown animal is found, query the image directly
    return image_patch.simple_query(""What type of animal in this scene is brown?"") # crop would include the scene so keep it in the query"
15485572,What is the vegetable on the hot dog with the cheese?," # contains a relation (on top of, next to, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"") # crop would include the cheese so keep it in the query"
12661142,What is the appliance in the kitchen called?," # assumes one appliance patch
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    if len(appliance_patches) == 0:
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    return appliance_patches[0].simple_query(""What is the appliance in the kitchen called?"") # crop would include the kitchen so keep it in the query"
41012743,The arrow is on what?," # What is the arrow on?
    image_patch = ImagePatch(image)
    arrow_patches = image_patch.find(""arrow"")
    # Question assumes only one arrow patch
    if len(arrow_patches) == 0:
        # If no arrow is found, query the image directly
        return image_patch.simple_query(""The arrow is on what?"")
    return arrow_patches[0].simple_query(""The arrow is on what?"") # crop would include the object so keep it in the query"
4777414,What color is the bicycle in the bottom of the photo?," # photo is assumed to be a 2D array
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    bottom_patches = image_patch.crop(0, image_patch.height // 2, image_patch.width, image_patch.height)
    return bottom_patches.simple_query(""What color is the bicycle in the bottom of the photo?"") # crop would include the bottom of the photo so keep it in the query"
1185988,What is the device on top of the table that is to the right of the trashcan?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"") # crop would include the trashcan and the table so keep it in the query"
13582968,Was granite used to make that floor?," # contains a relation (made of, using, with, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was granite used to make that floor?"")"
6235273,Are there women in the photo?," # this one is tricky
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    return bool_to_yesno(len(woman_patches) > 0) # count all women"
5377974,What is the girl playing with?," # object is being played with, so assume only one patch
    image_patch = ImagePatch(image)
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        # If no object is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    return object_patches[0].simple_query(""What is the girl playing with?"") # crop would include the object being played with so keep it in the query"
51037065,On which side of the image is the fridge?," # horizontal_center
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    if fridge_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
5299477,Which kind of bag does the girl carry?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patch = image_patch.find(""girl"")[0]
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    best_match = bag_patches[0].best_text_match([""backpack"", ""handbag"", ""satchel"", ""tote""])
    return best_match"
15135617,Is the white dog on a bench?," # contains a relation (on, in, near, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white dog on a bench?"") # crop would include the bench so keep it in the query"
1111583,Is the male person to the right of a person?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    male_patches = image_patch.find(""male person"")
    if len(male_patches) == 0:
        return ""no""
    for male_patch in male_patches:
        other_patches = image_patch.find(""person"")
        for other_patch in other_patches:
            if other_patch.horizontal_center > male_patch.horizontal_center:
                return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
15610844,What kind of place is shown?," # could be a building, a room, a location, etc.
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"") # could be a building, a room, a location, etc."
11869032,Is the banana below a bird?," # not sure what the problem is with this one
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Is the banana below a bird?"")
    for banana_patch in banana_patches:
        bird_patches = image_patch.find(""bird"")
        # Question assumes only one bird patch
        if len(bird_patches) == 0:
            return ""no""
        for bird_patch in bird_patches:
            if bird_patch.horizontal_center > banana_patch.horizontal_center:
                return ""no""
    return ""yes"""
9878360,What color is the vehicle to the left of the fence?," # assumes only one fence and one vehicle
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    for fence_patch in fence_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    return image_patch.simple_query(""What color is the vehicle to the left of the fence?"") # if no vehicle is found, query the image directly"
481765,Are there either any buses or trains in the image?," # returns bool
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?," # fence is made of, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"") # fence is made of, so ask directly"
9218340,Does the man to the left of the traffic cone wear a cap?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    for man_patch in man_patches:
        traffic_cone_patches = image_patch.find(""traffic cone"")
        # Question assumes only one traffic cone patch
        if len(traffic_cone_patches) == 0:
            # If no traffic cone is found, query the image directly
            return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
        for traffic_cone_patch in traffic_cone_patches:
            if traffic_cone_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
11981238,What is common to the blazer and the suit?," # assumes only one blazer and one suit patch
    image_patch = ImagePatch(image)
    blazer_patch = image_patch.find(""blazer"")[0]
    suit_patch = image_patch.find(""suit"")[0]
    common_properties = blazer_patch.simple_query(""What is common to the blazer and the suit?"")
    return common_properties"
16245,Is the shirt white or green?," # shirt is a common object
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""white"", ""green""]) # crop would include the shirt so keep it in the query"
2595103,"In which part of the image are the cars, the bottom or the top?"," # assuming only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?"," # a predicate of a relational verb (next to, in front of, etc)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?," # table, right, on, banana, fruit
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    for banana_patch in banana_patches:
        if banana_patch.simple_query(""Is the banana on the table?"") == ""yes"":
            fruit_patches = image_patch.find(""fruit"")
            for fruit_patch in fruit_patches:
                if fruit_patch.horizontal_center > banana_patch.horizontal_center:
                    return ""yes""
    return ""no"""
6376614,What color is the car in the middle?," # returns the color
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    car_patch = car_patches[0]
    return car_patch.simple_query(""What color is the car in the middle?"") # crop would include the middle so keep it in the query"
712063,What's the lamp made of?," # cast, made of, material, etc.
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the lamp made of?"") # crop would include the material so keep it in the query"
19358285,Which kind of furniture is to the right of the pillow?," # furniture is a broad category
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    # If no furniture is to the right of the pillow, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is to the right of the pillow?"") # crop would include the pillow so keep it in the query"
9647343,What type of material is the patio made of?," # patio, floor, roof, etc
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"") # patio, floor, roof, etc"
12545434,Who is wearing the suit?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the suit?"") # crop would include the suit so keep it in the query"
12894285,What is the color of the clouds in the sky?," # query the image directly
    return simple_qa(image, ""What is the color of the clouds in the sky?"") # crop would include the sky so keep it in the query"
9843309,Do the flowers look orange?," #TODO: update
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flower"", ""orange"")) #TODO: update"
618996,Is there a chair or a bed in this image?," # Contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    umbrella_patch = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patch) == 0:
        return ""no""
    umbrella_patch = umbrella_patch[0]
    for truck_patch in truck_patches:
        if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
            return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?," # requires man and pants to be in the image
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return ""unknown""
    pants_patch = pants_patches[0]
    return pants_patch.simple_query(""What color are the pants the man is wearing?"") # crop would include the man so keep it in the query"
551601,Are there any pillows or chairs in the image?," # no
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there women to the left of the person with the bag?"") # contains a relation, so ask directly"
5925408,What is the bike in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"") # crop would include the object in front so keep it in the query"
11328059,What type of fast food is shown in this photo?," # assumes the image is a fast food logo
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""mcdonalds"", ""burger king"", ""wendys"", ""taco bell"", ""subway""]) # crop would include the logo so keep it in the query"
15427544,Are there either beds or desks in the picture?," # assuming no overlap between beds and desks
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk) # assuming no overlap between beds and desks"
13778498,What type of vehicle is behind the green tree?," # green tree is to the right
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"") # green tree is to the right"
41019603,What is the child standing on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child standing on?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
11705574,What is the wooden item of furniture called?," # could be a chair, table, bed, etc
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wooden item of furniture called?"") # crop would include the furniture so keep it in the query"
16817277,Is the man to the left or to the right of the woman?," # left or right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    man_patch = man_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?," # shirt
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the shirt?"") # shirt"
18546659,What is the fence made of?," # material
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"") # crop would include the fence so keep it in the query"
10519192,What color is the kite that looks triangular?," # asks for the predicate of a relational verb (looks triangular), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the kite that looks triangular?"") # crop would include the shape so keep it in the query"
1672200,Who is drinking?," # contains a relation (drinking), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is drinking?"") # crop would include the drink so keep it in the query"
5703748,Is the building behind the tree white or brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the building behind the tree white or brown?"") # crop would include the building and tree so keep them in the query"
5749240,Are the glove and the undershirt both black?," # check if a relation is needed
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    undershirt_patches = image_patch.find(""undershirt"")
    # Question assumes only one undershirt patch
    if len(undershirt_patches) == 0:
        return ""no""
    is_glove_black = glove_patches[0].simple_query(""Is the glove black?"")
    is_undershirt_black = undershirt_patches[0].simple_query(""Is the undershirt black?"")
    return bool_to_yesno(is_glove_black and is_undershirt_black)"
18573157,Is the juice in a cup?," # not needed
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""juice"", ""cup"") # assumes one patch of juice"
3445929,Is the brown horse on the right side of the photo?," # uses the ImagePatch class
    image_patch = ImagePatch(image)
    brown_horse_patches = image_patch.find(""brown horse"")
    # Question assumes only one brown horse patch
    if len(brown_horse_patches) == 0:
        # If no brown horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    if brown_horse_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
16541709,Where is the grass?," # assumes one patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"") # crop would include the grass so keep it in the query"
15764335,Are there any dogs on the tan sand?," # tan sand is the beach
    image_patch = ImagePatch(image)
    is_dog = image_patch.exists(""dog"")
    is_beach = image_patch.simple_query(""What is the sand made of?"") == ""tan""
    return bool_to_yesno(is_dog and is_beach)"
1478089,Are the door and the garage door made of the same material?," # material
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_patch = door_patches[0]
    garage_door_patches = image_patch.find(""garage door"")
    # Question assumes only one garage door patch
    if len(garage_door_patches) == 0:
        return ""no""
    garage_door_patch = garage_door_patches[0]
    return bool_to_yesno(door_patch.simple_query(""What material is the door made of?"") == garage_door_patch.simple_query(""What material is the garage door made of?"")) # crop would include the material so keep it in the query"
1250685,Was this picture taken in a bathroom or at a dining room?," # assuming the picture was taken in either a bathroom or a dining room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"") # assuming the picture was taken in either a bathroom or a dining room"
10436844,Is the zebra's nose soft and brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the zebra's nose soft and brown?"") # crop would include the nose so keep it in the query"
10683765,Does the shirt have blue color?," # shirt could be a patch
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""blue""))"
1593352,Do the draperies look white and striped?," # 'striped' is a property
    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""drapery"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    drapery_patch = drapery_patches[0]
    is_white = drapery_patch.verify_property(""drapery"", ""white"")
    is_striped = drapery_patch.verify_property(""drapery"", ""striped"")
    return bool_to_yesno(is_white and is_striped)"
16553304,Are the trunks both long and wide?," # assumes only one elephant patch
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    elephant_patch = elephant_patches[0]
    is_long = elephant_patch.verify_property(""trunk"", ""long"")
    is_wide = elephant_patch.verify_property(""trunk"", ""wide"")
    return bool_to_yesno(is_long and is_wide)"
7165102,Is the car on the left of the photo?," # no relation, so query directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.horizontal_center < image_patch.width / 2) # horizontal_center is the center of the image, not the car"
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?," # contains a relation (both, either, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"") # crop would include the color so keep it in the query"
19279872,What is the man to the right of the helmet wearing?," # helmet, hat, headgear
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    for helmet_patch in helmet_patches:
        if helmet_patch.horizontal_center < man_patch.horizontal_center:
            return helmet_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    return helmet_patches[0].simple_query(""What is the man to the right of the helmet wearing?"")"
4285513,What is the color of the floor?," # Returns the color of the floor
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor?"")
    return floor_patches[0].simple_query(""What is the color of the floor?"") # crop would include the floor so keep it in the query"
3974266,Do the trousers look tan?," # crop would include the tan so keep it in the query
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return trousers_patches[0].simple_query(""Do the trousers look tan?"") # crop would include the tan so keep it in the query"
11595009,What are the devices to the right of the device that is to the right of the remote control?," # returns the rightmost device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one remote control patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    rightmost_device = None
    for device_patch in device_patches:
        if rightmost_device is None or rightmost_device.horizontal_center < device_patch.horizontal_center:
            rightmost_device = device_patch
    for device_patch in device_patches:
        if rightmost_device.horizontal_center < device_patch.horizontal_center:
            rightmost_device = device_patch
    rightmost_device_patches = image_patch.find(""device"")
    rightmost_device = rightmost_device_patches[0]
    for device_patch in rightmost_device_patches:
        if device_patch.horizontal_center > rightmost_device.horizontal_center:
            rightmost_device = device_patch
    return rightmost_device.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"") # crop would include the rightmost device so keep it in the query"
6183000,Are there nightstands or beds?," # has a relation, so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""nightstand"") or image_patch.exists(""bed"")) # if no, ask directly"
14143982,Is it an outdoors scene?," # TODO: rewrite
    image_patch = ImagePatch(image)
    is_outdoors = image_patch.verify_property(""scene"", ""outdoors"")
    return bool_to_yesno(is_outdoors)"
6123160,Are the speakers to the left of a Wii controller?," # assume only one patch
    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    wii_controller_patch = image_patch.find(""Wii controller"")[0]
    for speaker_patch in speaker_patches:
        if speaker_patch.horizontal_center < wii_controller_patch.horizontal_center:
            return ""yes""
    return ""no"""
3681634,Is the plastic fork in the top or in the bottom part of the photo?," # type: ignore
    image_patch = ImagePatch(image)
    plastic_fork_patches = image_patch.find(""plastic fork"")
    # Question assumes only one plastic fork patch
    if len(plastic_fork_patches) == 0:
        # If no plastic fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    if plastic_fork_patches[0].vertical_center > image_patch.vertical_center:
        return ""top""
    else:
        return ""bottom"""
13629530,What is the vehicle on the street?," # query the image directly
    return image_patch.simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?," # assumes only one man patch and one hat patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    hat_patches = image_patch.find(""hat"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    if len(hat_patches) == 0:
        return ""blue"" # default color
    return hat_patches[0].simple_query(""What color is the hat the man is in?"") # crop would include the man so keep him in the query"
1849976,What vegetables are to the left of the spoon?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vegetables are to the left of the spoon?"") # crop would include the spoon so keep it in the query"
14827816,Is the statue made of bronze or stone?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the statue made of bronze or stone?"") # assumes only one statue patch"
857204,What's the woman wearing?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"") # crop would include the clothing so keep it in the query"
2201105,Is the ball pink?," # ball is a generic term, could be any object
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return bool_to_yesno(ball_patches[0].verify_property(""ball"", ""pink"")) # ball is a generic term, could be any object"
14616023,What piece of furniture are the cords in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
161027411,Are there both doors and windows in this photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?," # not necessary to return a string
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    horizontal_center = black_car_patches[0].horizontal_center
    if horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
16184856,What is the striped animal called?," # crop would include the stripes so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the striped animal called?"") # crop would include the stripes so keep it in the query"
1479068,Is it outdoors?," # is it daytime or nighttime?
    image_patch = ImagePatch(image)
    is_outdoors = image_patch.verify_property(""image"", ""outdoors"")
    if is_outdoors:
        return ""yes""
    else:
        return ""no"""
16155046,Is the dry grass below a zebra?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the dry grass below a zebra?"") # crop would include the grass and zebra so keep them in the query"
16515071,What is the person in the water wearing?," # (fins, goggles, a hat, etc.)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the person in the water wearing?"") # crop would include the water so keep it in the query"
161015042,Who is wearing the goggles?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the goggles?"") # crop would include the goggles so keep it in the query"
19149868,What is pulled by the lady?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is pulled by the lady?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5199994,What's the man wearing?," # returns the answer to ""What's the man wearing?""
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    wearing_patches = man_patch.find(""wearing"")
    # Question assumes only one wearing patch
    if len(wearing_patches) == 0:
        return man_patch.simple_query(""What's the man wearing?"")
    return wearing_patches[0].simple_query(""What's the man wearing?"") # crop would include the wearing so keep it in the query"
19184475,Are the man glasses on the left side of the image?," # glasses on the left
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center < image_patch.width / 2:
        return ""yes""
    return ""no"""
7149602,Is the shirt orange or blue?," # changed to execute_command
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""orange"", ""blue""])"
19479555,What is the person to the right of the benches holding?," # crop would include the object being held so keep it in the query
    image_patch = ImagePatch(image)
    benches_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(benches_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return ""no""
    for person_patch in person_patches:
        if person_patch.horizontal_center > benches_patch.horizontal_center:
            return person_patch.simple_query(""What is the person to the right of the benches holding?"")
    return ""no"""
19273393,Are there both a door and a window in this photo?," # assumes one photo
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
6481656,What is the man doing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"") # crop would include the man so keep it in the query"
13127703,What kind of drink is to the left of the bottle the woman is pouring?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"") # crop would include the bottle so keep it in the query"
2378018,What is the toilet in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8430841,Is the frisbee to the left of the guy?," # assumes one frisbee and one guy
    image_patch = ImagePatch(image)
    frisbee_patch = image_patch.find(""frisbee"")[0]
    guy_patch = image_patch.find(""guy"")[0]
    return ""yes"" if frisbee_patch.horizontal_center < guy_patch.horizontal_center else ""no"""
18616818,The man is watching who?," # contains a relation (watching, looking at, staring at, etc)
    image_patch = ImagePatch(image)
    # contains a relation (watching, looking at, staring at, etc), so ask directly
    return image_patch.simple_query(""The man is watching who?"") # crop would include the man so keep him in the query"
179526,Is the white dog behind a girl?," # assumes white dog is in the image
    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog behind a girl?"")
    for white_dog_patch in white_dog_patches:
        girl_patches = image_patch.find(""girl"")
        # Question assumes only one girl patch
        if len(girl_patches) == 0:
            return ""no""
        girl_patch = girl_patches[0]
        if white_dog_patch.horizontal_center < girl_patch.horizontal_center:
            return ""yes""
    return ""no"""
21018827,Is the river murky and calm?," # no relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the river murky and calm?"") # no relation"
3697449,Who is wearing a shirt?," # shirt is a property, so check the property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"") # shirt is a property, so check the property"
3697807,Are there both a racket and a toothbrush in the image?," # takes an image patch
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?," # returns the common property
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patch = sign_patches[0]
    common_property = None
    for property in [""color"", ""shape"", ""size"", ""brand"", ""model"", ""material"", ""age"", ""location"", ""orientation"", ""direction"", ""speed"", ""temperature"", ""humidity"", ""pressure"", ""time"", ""date"", ""event"", ""activity"", ""object"", ""person"", ""animal"", ""plant"", ""building"", ""structure"", ""road"", ""path"", ""water"", ""air"", ""fire"", ""earth"", ""sky"", ""cloud"", ""sun"", ""moon"", ""star"", ""planet"", ""galaxy"", ""universe"", ""space"", ""cosmos"", ""matter"", ""energy"", ""light"", ""darkness"", ""shadow"", ""silhouette"", ""reflection"", ""refraction"", ""diffraction"", ""interference"", ""superposition"", ""entanglement"", ""unc"
11764476,Which place is it?," # (ask directly)
    return image_patch.simple_query(""Which place is it?"") # (ask directly)"
4903948,On what kind of furniture is the plate?," # contains a relation (on, next to, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On what kind of furniture is the plate?"") # crop would include the plate so keep it in the query"
61022361,What is the painting that is to the left of the clock hanging on?," # crop would include hanging on, so keep it in the query
    image_patch = ImagePatch(image)
    painting_patches = image_patch.find(""painting"")
    # Question assumes only one painting patch
    if len(painting_patches) == 0:
        # If no painting is found, query the image directly
        return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    for painting_patch in painting_patches:
        if painting_patch.horizontal_center < image_patch.horizontal_center:
            return painting_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    # If no painting is to the left of the clock, pick the first painting
    return painting_patches[0].simple_query(""What is the painting that is to the left of the clock hanging on?"") # crop would include hanging on, so keep it in the query"
1527392,"What color is the fence, tan or black?"," # or gray
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"") # or gray
    return fence_patches[0].simple_query(""What color is the fence, tan or black?"") # or gray"
19229351,Do you see both bowls and carrots?," # return bool_to_yesno
    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)"
1297082,On which side is the silver fork?," # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    if fork_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16757832,Are there any blue helmets or napkins?," # query the image directly
    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.exists(""blue helmet"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_blue_helmet or is_napkin)"
839816,"In which part of the photo is the racket, the top or the bottom?"," # asks for the predicate of a relational verb (holding), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"") # assumes a single object and a single patch"
12385226,Is there a mirror in the bathroom?," # This function assumes that the mirror is only in the bathroom
    image_patch = ImagePatch(image)
    is_mirror = image_patch.verify_property(""mirror"", ""bathroom"")
    return bool_to_yesno(is_mirror)"
18720852,Are there either blankets or tents in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?," # assumes only one woman and one box
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    woman_patch = woman_patches[0]
    cardboard_box_patches = image_patch.find(""cardboard box"")
    # Question assumes only one cardboard box patch
    if len(cardboard_box_patches) == 0:
        return ""right""
    cardboard_box_patch = cardboard_box_patches[0]
    if cardboard_box_patch.horizontal_center > woman_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
19453453,Who is wearing a shirt?," # assumes one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query"
19562503,Is the house in the bottom part or in the top of the photo?," # todo: implement bottom, top
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    if house_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?," # uses simple_query
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flowers that look red"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""What is in front of the flowers that look red?"")
    for flower_patch in flower_patches:
        if flower_patch.horizontal_center > image_patch.horizontal_center:
            return image_patch.simple_query(""What is in front of the flowers that look red?"")
    return image_patch.simple_query(""What is in front of the flowers that look red?"") # if no object is in front, query the image directly"
15710688,Is the shirt short sleeved or sleeveless?," # is the shirt short sleeved or sleeveless?
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    if shirt_patches[0].simple_query(""Is the shirt short sleeved?"") == ""yes"":
        return ""short sleeved""
    else:
        return ""sleeveless"""
5533952,What are the white wires connected to?," # assumes only one patch
    image_patch = ImagePatch(image)
    white_wire_patches = image_patch.find(""white wire"")
    # Question assumes only one white wire patch
    if len(white_wire_patches) == 0:
        # If no white wire is found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    white_wire_patch = white_wire_patches[0]
    for object_patch in white_wire_patch.find(""object""):
        if object_patch.horizontal_center > white_wire_patch.horizontal_center:
            return object_patch.simple_query(""What are the white wires connected to?"")
    return white_wire_patch.simple_query(""What are the white wires connected to?"") # crop would include the connection so keep it in the query"
11313555,"What type of furniture is that, a table or a nightstand?"," # crop would include the object so keep it in the query
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    return furniture_patches[0].best_text_match([""table"", ""nightstand""]) # crop would include the object so keep it in the query"
10508893,What animals are in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in front of the trees?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14501997,What is the gate made of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the gate made of?"") # crop would include the gate so keep it in the query"
45624,What color is the device on top of the table?," # returns a color
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What color is the device on top of the table?"") # crop would include the table so keep it in the query"
181032044,Are these closed drawers?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are these closed drawers?"")"
383,What kind of furniture is made of wood?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is made of wood?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
101054962,What is the person by the bananas wearing?," # crop would include the bananas so keep it in the query
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    return person_patches[0].simple_query(""What is the person by the bananas wearing?"") # crop would include the bananas so keep it in the query"
759165,What is the color of the tower in the middle of the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"") # crop would include the tower so keep it in the query"
10775539,Is this giraffe tall and white?," # giraffe is a tall animal
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is this giraffe tall and white?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""tall"") and giraffe_patches[0].verify_property(""giraffe"", ""white"")) # crop would include the giraffe so keep it in the query"
19981804,On which side of the photo is the colorful screen?," # left or right
    image_patch = ImagePatch(image)
    colorful_screen_patches = image_patch.find(""colorful screen"")
    # Question assumes only one colorful screen patch
    if len(colorful_screen_patches) == 0:
        # If no colorful screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    colorful_screen_patch = colorful_screen_patches[0]
    horizontal_center = colorful_screen_patch.horizontal_center
    if horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
7903654,Is the tap on the left side or on the right?," # tap on the right
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    return ""right"""
6206183,Which place is it?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15212437,Is the coat black or beige?," # assume only one patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    coat_patch = coat_patches[0]
    return coat_patch.best_text_match([""black"", ""beige""])"
13123207,Does the kite near the field look high and red?," # assumes one kite and one field
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    field_patches = image_patch.find(""field"")
    if len(kite_patches) == 0 or len(field_patches) == 0:
        return ""no""
    kite_patch = kite_patches[0]
    field_patch = field_patches[0]
    return bool_to_yesno(kite_patch.horizontal_center > field_patch.horizontal_center and kite_patch.simple_query(""Is the kite red and high?"") == ""yes"") # crop would include the red and high so keep it in the query
    kite_patch = kite_patches[0]
    return bool_to_yesno(kite_patch.horizontal_center > field_patch.horizontal_center and kite_patch.simple_query(""Is the kite red and high?"") == ""yes"") # crop would include the red and high so keep it in the query"
7740092,Are there any utensils in this picture?," # returns a yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""utensil"")) # assumes only one utensil patch"
8774975,What is around the guy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?," # image is the input to the command
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?," # sky is the default color
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    staircase_patches = image_patch.find(""staircase"")
    if len(staircase_patches) == 0:
        return ""no""
    else:
        for staircase_patch in staircase_patches:
            color = staircase_patch.simple_query(""What color are you?"")
            return ""yes"" if color != ""sky"" else ""no"""
1605874,What color are the containers that are on the right?," # needs to be adjusted
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center > image_patch.horizontal_center:
            return container_patch.simple_query(""What color are the containers that are on the right?"")
    return container_patches[0].simple_query(""What color are the containers that are on the right?"") # crop would include the right so keep it in the query"
12495781,Are the people to the right or to the left of the cone that is orange?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"") # crop would include the orange so keep it in the query"
14165681,"What type of clothing is light, the sweater or the cap?"," # crop would include the cap so keep it in the query
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    light_clothing_patch = clothing_patches[0]
    if light_clothing_patch.simple_query(""Is the clothing light, the sweater or the cap?"") == ""cap"":
        return ""cap""
    else:
        return light_clothing_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")"
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?," # chair and girl with jeans
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    for chair_patch in chair_patches:
        girl_patches = image_patch.find(""girl wearing jeans"")
        # Question assumes only one girl patch
        if len(girl_patches) == 0:
            # If no girl is found, query the image directly
            return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
        girl_patch = girl_patches[0]
        if chair_patch.horizontal_center > girl_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
5617223,"What color is the container to the left of the horse, green or silver?"," # is the horse on the right
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center < horse_patch.horizontal_center:
            return container_patch.best_text_match([""green"", ""silver""])
    return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"") # if no container is to the left of the horse, query the image directly"
2428964,Is the water gray or teal?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].simple_query(""Is the water gray or teal?"") # crop would include the water so keep it in the query"
19620769,Which place is it?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14785459,On which side of the picture is the lamp?," # right, left, or center
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    if lamp_patches[0].horizontal_center == image_patch.width / 2:
        return ""center""
    elif lamp_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
1325617,Does the brown animal look tiny?," # assumes one animal patch
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    for brown_animal_patch in brown_animal_patches:
        return bool_to_yesno(brown_animal_patch.width < 50 and brown_animal_patch.height < 50)"
5672532,Does that shirt look long sleeved?," # shirt is the object, long sleeved is the property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    shirt_patch = shirt_patches[0]
    return bool_to_yesno(shirt_patch.verify_property(""shirt"", ""long sleeved"")) # shirt is the object, long sleeved is the property"
6146439,Does the box look green?," # Is the box green?
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look green?"")
    return box_patches[0].simple_query(""Is the box green?"") # crop would include the color so keep it in the query"
1910285,Is the white container on the left of the image?," # contains a relation (on, in, next to, near, etc)
    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    # Question assumes only one white container patch
    if len(white_container_patches) == 0:
        # If no white container is found, query the image directly
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    if white_container_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
13362134,Is that shower curtain to the left of a toilet?," # image is assumed to be a 2D array
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center > shower_curtain_patch.horizontal_center:
                return ""no""
    return ""yes"""
161060488,Is there any cabinet to the right of the stove?," # cabinet and stove are not in the image
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.horizontal_center > stove_patch.horizontal_center:
            return ""yes""
    return ""no"""
111055042,Is the chair on the right?," # assuming only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    return bool_to_yesno(chair_patches[0].horizontal_center > image_patch.horizontal_center)"
151068,Which kind of clothing is white?," # TODO: this is not a question asked by the user
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What color is the clothing?"") == ""white"":
            return clothing_patch.simple_query(""Which kind of clothing is white?"") # crop would include the white so keep it in the query
    # If no clothing is white, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is white?"") # crop would include the white so keep it in the query"
19387951,Is this place the forest or the garden?," # not implemented
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"") # not implemented"
1781695,What's on the blanket?," # object and property
    image_patch = ImagePatch(image)
    # object and property so go step by step
    return image_patch.simple_query(""What's on the blanket?"") # crop would include the object so keep it in the query"
17699779,Is she on a bed?," # contains a relation (on, in, under, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is she on a bed?"")"
464441,"What piece of furniture is the blanket on, a bed or a sofa?"," # only works if there is only one piece of furniture
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    if furniture_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""bed""
    else:
        return ""sofa"""
9505496,Are the wires above a man?," # not sure what the purpose of this one is
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    man_patch = man_patches[0]
    wire_patches = image_patch.find(""wires"")
    # Question assumes only one wire patch
    if len(wire_patches) == 0:
        return ""no""
    if wire_patches[0].vertical_center > man_patch.vertical_center:
        return ""yes""
    return ""no"""
4625512,What is the woman doing?," # Assuming only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the woman doing?"")
    return woman_patches[0].simple_query(""What is the woman doing?"") # crop would include the woman so keep it in the query"
9441941,Is the woman's hair red or black?," # query directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman's hair red or black?"") # query directly"
2387432,What's on the table?," # assumes one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's on the table?"") # crop would include the table so keep it in the query"
10534717,What is the pillow on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pillow on?"") # crop would include the object so keep it in the query"
19335685,"What fruits is the container behind of, apples or bananas?"," # no crop
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"") # crop would include the container so keep it in the query"
3127817,The goat is standing in what?," # image is assumed to be a crop of the scene
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The goat is standing in what?"") # assumes the image is a crop of the scene"
1588567,Where does the man that to the right of the mirror sit?," # assume only one mirror patch
    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    if len(mirror_patches) == 0:
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    for mirror_patch in mirror_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if mirror_patch.horizontal_center < man_patch.horizontal_center:
                return man_patch.simple_query(""Where does the man sit?"")
    return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"") # if no man is found to the right of the mirror, ask the image directly"
7399543,What is the floor made of?," # tile, wood, carpet, etc
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the floor made of?"")
    floor_patch = floor_patches[0]
    return floor_patch.simple_query(""What is the floor made of?"") # crop would include the floor so keep it in the query"
13741124,What kind of animal is the house behind of?," # returns the answer to ""What kind of animal is the house behind of?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is the house behind of?"") # crop would include the animal so keep it in the query"
1174904,Is the cobblestone sidewalk both large and gray?," # assumes only one patch of cobblestone
    image_patch = ImagePatch(image)
    cobblestone_patches = image_patch.find(""cobblestone"")
    if len(cobblestone_patches) == 0:
        return ""no""
    cobblestone_patch = cobblestone_patches[0]
    is_large = (cobblestone_patch.width > 50)
    is_gray = (cobblestone_patch.simple_query(""What is the color of the cobblestone?"") == ""gray"")
    return bool_to_yesno(is_large and is_gray)"
13375231,What is the lettuce on?," # on, in, with, next to, etc
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What is the lettuce on?"")
    for lettuce_patch in lettuce_patches:
        return lettuce_patch.simple_query(""What is the lettuce on?"") # crop would include the surface so keep it in the query"
1194027,Which kind of clothing is black?," # execute_command
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What color is the clothing?"") == ""black"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"")
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query"
9963477,Is the statue wearing a dress?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the statue wearing a dress?"") # crop would include the dress so keep it in the query"
1151995,Which side of the photo is the yellow vase on?," # assumes one yellow vase patch
    image_patch = ImagePatch(image)
    yellow_vase_patches = image_patch.find(""yellow vase"")
    if len(yellow_vase_patches) == 0:
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    yellow_vase_patch = yellow_vase_patches[0]
    if yellow_vase_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
712821,What is common to the bear and the belt?," # returns a list of common properties
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    bear_patch = bear_patches[0]
    belt_patches = image_patch.find(""belt"")
    # Question assumes only one belt patch
    if len(belt_patches) == 0:
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    belt_patch = belt_patches[0]
    common_properties = []
    if bear_patch.vertical_center > belt_patch.vertical_center:
        common_properties.append(""vertical_position"")
    else:
        common_properties.append(""horizontal_position"")
    if bear_patch.horizontal_center < belt_patch.horizontal_center:
        common_properties.append(""horizontal_position"")
    else:
        common_properties.append(""vertical_position"")
    return common_properties"
1757418,What is the vehicle to the right of the car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle to the right of the car?"") # assumes one car patch"
7624100,Are the trunks that are gray wet and large?," # elephant trunks
    image_patch = ImagePatch(image)
    trunks_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunks_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunks_patches:
        is_gray = (trunk_patch.simple_query(""What color is the trunk?"") == ""gray"")
        is_wet = (trunk_patch.simple_query(""Is the trunk wet?"") == ""yes"")
        is_large = (trunk_patch.simple_query(""What size is the trunk, small, medium, or large?"") == ""large"")
        if is_gray and is_wet and is_large:
            return ""yes""
    return ""no"""
1125474,"On which side of the photo is the iron fence, the right or the left?"," # assumes the iron fence is on the right
    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    # Question assumes only one iron fence patch
    if len(iron_fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    iron_fence_patch = iron_fence_patches[0]
    if iron_fence_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1300375,What is the name of the item of furniture that the printer is on?," # this is the original query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"") # crop would include the item of furniture so keep it in the query"
5925196,What's the building covered by?," # image_patch instead of image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the building covered by?"") # assumes one patch, so no need to loop"
1948055,What watercraft is the white rope tying?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What watercraft is the white rope tying?"") # crop would include the rope so keep it in the query"
8540582,What kind of animal is in front of the leafy trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
3719411,What does the walking woman by the bus wear?," # crop would include the bus and the woman, so keep it in the query
    image_patch = ImagePatch(image)
    walking_woman_patches = image_patch.find(""walking woman"")
    # Question assumes only one walking woman patch
    if len(walking_woman_patches) == 0:
        # If no walking woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    return walking_woman_patches[0].simple_query(""What does the walking woman by the bus wear?"") # crop would include the bus and the woman, so keep it in the query"
1129508,Is the controller to the left of a pillow?," # needs to be in the same image
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > controller_patch.horizontal_center:
                return ""yes""
    return ""no"""
18664084,Is there any sheep by the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there any sheep by the fence?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
6912079,What animal is this?," # image is the input to the function
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is this?"") # image is the input to the function"
3412029,Where is the person?," # this is the default query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the person?"") # crop would include the person so keep it in the query"
14161122,What animal is in the water?," # ask the question directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"") # crop would include the parent and baby so keep them in the query"
15699496,What is the cup that looks clean made of?," # and what is the cup that looks clean made of?
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    clean_cup_patch = None
    for cup_patch in cup_patches:
        if cup_patch.simple_query(""Is the cup clean?"") == ""yes"":
            if clean_cup_patch is None:
                clean_cup_patch = cup_patch
            else:
                # if multiple cups are clean, pick the first one
                break
    if clean_cup_patch is None:
        # if no cup is clean, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    else:
        return clean_cup_patch.simple_query(""What is the cup that looks clean made of?"") # crop would include the cleanliness so keep it in the query"
12765451,What animals are to the right of the ladder?," # assumes only one patch for the ladder
    image_patch = ImagePatch(image)
    ladder_patch = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patch) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    right_image_patch = image_patch.crop(ladder_patch.horizontal_center + 50, 0, image_patch.width, image_patch.height) # crop 50 pixels to the right
    return right_image_patch.simple_query(""What animals are to the right of the ladder?"") # assumes that the animals are not on the ladder"
191044307,What animal is black?," # no relation
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What color is the animal?"") == ""black"":
            return animal_patch.simple_query(""What animal is black?"") # crop would include the color so keep it in the query
    # If no animal is black, pick the first animal
    return animal_patches[0].simple_query(""What animal is black?"") # crop would include the color so keep it in the query"
12639181,Who is wearing shorts?," # crop would include the shorts so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing shorts?"")"
10630949,Is the person that is not male wearing an elbow pad?," # needs to be a function because it is using the patch
    image_patch = ImagePatch(image)
    male_patches = image_patch.find(""male"")
    if len(male_patches) == 0:
        # If no male is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for male_patch in male_patches:
        for patch in image_patch.find(""person""):
            if patch.horizontal_center != male_patch.horizontal_center:
                return bool_to_yesno(patch.simple_query(""Is the person wearing an elbow pad?"") == ""yes"")
    return ""no"""
14544602,What is the boy holding?," # returns a string describing the object
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    return boy_patch.simple_query(""What is the boy holding?"") # crop would include the object so keep it in the query"
2986699,Of what material the dish?," # material of the dish
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Of what material is the dish?"") # asks directly because it's a predicate"
161013513,What kind of animal is on the street?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    return animal_patches[0].simple_query(""What kind of animal is on the street?"") # crop would include the street so keep it in the query"
15143936,What animal is before the roof?," # uses a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is before the roof?"") # crop would include the roof so keep it in the query"
1955043,Who is playing with the ball?," # contains a relation (playing with), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing with the ball?"") # crop would include the ball so keep it in the query"
91044150,What is the name of the animals in front of the trees beside the river?," # contains multiple relations (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"") # contains multiple relations (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13483129,What kind of fruit is hanging?," # fruit hanging is a common scenario
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of fruit is hanging?"") # fruit hanging is a common scenario"
7317299,What is under the bush?," # contains a relation (under, above, on, next to, etc)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is under the bush?"") # contains a relation (under, above, on, next to, etc) so ask directly"
17432396,Are there kangaroos or birds in this photograph?," # -> bool
    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)"
10457241,What is the color of the trousers?," # crop would include the rest of the body, so query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the trousers?"") # crop would include the rest of the body, so query the image directly"
2913850,Is the placemat in the bottom or in the top part?," # returns ""bottom""
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?," # contains a relation (covering), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered with blanket?"") # crop would include the blanket so keep it in the query"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"") # assumes only one man and one piece of furniture"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?"," # assumes only one desk patch
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    desk_patch = desk_patches[0]
    if desk_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?," # or tablecloths
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)"
19737232,Is the book on the right of the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the book on the right of the picture?"") # crop would include the right of the picture so keep it in the query"
475064,Who is wearing the glasses?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query"
8594579,Is there a woman to the right of the orange object that is to the right of the person?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"") # assumes only one person patch"
14602992,Which side of the image is the couch on?," # requires that the image is not rotated
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which side of the image is the couch on?"") # crop would include the couch so keep it in the query"
9944587,How tall is the man that is wearing a shirt?," # crop would include the shirt so keep it in the query
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    for man_patch in man_patches:
        if man_patch.verify_property(""man"", ""wearing a shirt""):
            return man_patch.simple_query(""How tall is the man that is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no man is wearing a shirt, pick the first man
    return man_patches[0].simple_query(""How tall is the man that is wearing a shirt?"")"
13736712,Are there any giraffes?," # giraffe is one word, so use 'giraffe' instead of 'giraffes'
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe"")) # returns yes if found, no if not found"
6996118,The young girl is wearing what?," # change to simple_query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The young girl is wearing what?"") # crop would include the item so keep it in the query"
19992576,Is the basket on the floor small and brown?," # is the object on the floor, small, brown
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    if basket_patches[0].vertical_center < image_patch.vertical_center:
        if basket_patches[0].width < image_patch.width / 2:
            if basket_patches[0].simple_query(""Is the basket brown?"") == ""yes"":
                return ""yes""
    return ""no"""
17332401,What is the boy in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15586294,Which side is the leather armchair on?," # returns left, right, or center
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""leather armchair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    elif chair_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""center"""
15658324,What is the horse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?," # assuming one man patch and one controller patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    # Question assumes one controller patch
    if len(controller_patches) == 0:
        return ""no""
    for controller_patch in controller_patches:
        if controller_patch.horizontal_center > man_patch.horizontal_center:
            return ""no""
    item_of_furniture_patches = image_patch.find(""item of furniture"")
    # Question assumes only one item of furniture patch
    if len(item_of_furniture_patches) == 0:
        return ""no""
    for item_of_furniture_patch in item_of_furniture_patches:
        if item_of_furniture_patch.simple_query(""Is the item of furniture the same color as the controller the man is holding?"") == ""yes"":
            return item_of_furniture_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    return ""no"""
2531874,Who is playing?," # assuming only one player
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"") # crop would include the player so keep it in the query"
3112009,Is the plate on the left side?," # assumes one patch
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    if plate_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
1527613,On which side of the picture is the bag?," # left or right
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?," # not necessary to create an image patch
    return bool_to_yesno(image[:, 0, 0].shape[0] == image[:, 0, 0].shape[1]) and bool_to_yesno(image[:, 0, 0].shape[0] == image[:, image.shape[1] - 1, image.shape[2] - 1].shape[0])"
161027384,What is the green rug hanging on?," # crop would include the hanging so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the green rug hanging on?"") # crop would include the hanging so keep it in the query"
14153714,Who is using the laptop?," # assumes one laptop patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?," # no relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who in the photo is standing?"") # no relation, so no need to crop"
693318,Do you see any plates in the photo?," # changed the function name
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate"")) # changed the function name"
19613394,The person on the skateboard is wearing what?," # -> str
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""The person on the skateboard is wearing what?"") # crop would include the skateboard so keep it in the query
    return person_patches[0].simple_query(""What is the person on the skateboard wearing?"") # crop would include the skateboard so keep it in the query"
19927237,Is the blue car in front of the white van?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue car in front of the white van?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
31054022,What is the box sitting on?," # sitting on is a relational verb
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the box sitting on?"") # sitting on is a relational verb"
17634413,Does the ground look snowy and brown?," # needs an object to compare
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""ground"", ""snowy"")) and bool_to_yesno(image_patch.verify_property(""ground"", ""brown"")) # ground should be in the query"
15185768,Does the sky look blue and clear?," # execute_command
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Does the sky look blue and clear?"") # crop would include the sky so keep it in the query
    if sky_patches[0].simple_query(""What is the condition of the sky?"") == ""blue and clear"":
        return ""yes""
    return ""no"""
1589160,Does the person that is sitting lean against a fire hydrant?," # no relation
    image_patch = ImagePatch(image)
    # no relation so go step by step
    person_sitting_patches = image_patch.find(""person sitting"")
    # Question assumes only one person patch
    if len(person_sitting_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    for person_sitting_patch in person_sitting_patches:
        leaning_against_firehydrant = (person_sitting_patch.simple_query(""Is the person leaning against a fire hydrant?"") == ""yes"")
        if leaning_against_firehydrant:
            return ""yes""
    return ""no"""
2142522,Are there any shopping carts or mannequins in this photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)"
17362234,Are there cages or scrub brushes in this picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cage"") or image_patch.exists(""scrub brush"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
4955854,Is the lamp below the chain?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    for lamp_patch in lamp_patches:
        is_below_chain = (lamp_patch.simple_query(""Is the lamp below the chain?"") == ""yes"")
        if is_below_chain:
            return ""yes""
    return ""no"""
10463545,Is the computer to the right of the other computer silver or black?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"") # assumes only one computer patch"
2265037,What is the girl wearing?," # the object is the girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"") # crop would include the wearing so keep it in the query"
15485146,Are there any blue numbers or letters?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""numbers"", ""blue"") or image_patch.verify_property(""letters"", ""blue"")) # Question assumes only one number or letter patch"
3483992,Is the long bus to the left or to the right of the person with the backpack?," # bus is long
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        # If no backpack is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    backpack_patch = backpack_patches[0]
    if bus_patches[0].horizontal_center < backpack_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
13598461,What is the device that is not on called?," # crop would include the on/off switch so keep it in the query
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    for device_patch in device_patches:
        if not device_patch.verify_property(""device"", ""on""):
            return device_patch.simple_query(""What is the device that is not on called?"") # crop would include the on/off switch so keep it in the query
    # If no device is off, pick the first device
    return device_patches[0].simple_query(""What is the device that is not on called?"") # crop would include the on/off switch so keep it in the query"
13885436,The sky has what color?," # assumes one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"") # contains a relation (above, below, next to, etc) so ask directly"
7432467,Is the black container to the left of the man that is on the motorcycle?," # assume one motorcycle and one man
    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        # If no black container is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    for black_container_patch in black_container_patches:
        if black_container_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
19540096,Is the fire in an oven?," # assumes one patch per object
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    # Question assumes only one fire patch
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        return ""no""
    return ""yes"" if fire_patches[0].horizontal_center > oven_patches[0].horizontal_center else ""no"""
18291107,The horse is where?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The horse is where?"") # relation is assumed to be contained within the query"
5435474,Is the man that is to the left of the motorbike wearing a hat?," # motorbike
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < motorbike_patch.horizontal_center:
        return man_patch.simple_query(""Is the man wearing a hat?"")
    return ""no"""
226307,Are there any tables in the photo?," # table
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))"
1944826,Who is reflected in the mirror?," # mirror is the object of reflection
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is reflected in the mirror?"") # mirror is the object of reflection"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?," # assumes only one woman and one cooking utensil on top of the stove to the right of the woman
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"") # crop would include the stove, the woman, and the utensil so keep it in the query"
18435846,What is the color of the balloon that is to the right of the backpack?," # returns the color of the object to the right of the backpack
    image_patch = ImagePatch(image)
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        # If no backpack is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    backpack_patch = backpack_patches[0]
    balloon_patches = image_patch.find(""balloon"")
    # Question assumes only one balloon patch
    if len(balloon_patches) == 0:
        return ""no""
    balloon_patch = balloon_patches[0]
    if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
        return balloon_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    return backpack_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"") # crop would include the backpack so keep it in the query"
8390894,Is the woman to the right of the man sitting on a sofa?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"") # crop would include the sofa so keep it in the query"
18896007,Which side of the image is the pot on?," # assumes only one pot
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
19323898,Is that pillow on a couch?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is that pillow on a couch?"")
    return pillow_patches[0].simple_query(""Is that pillow on a couch?"") # crop would include the couch so keep it in the query"
1281034,Where are the trees?," # returns the horizontal center of the tree
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the trees?"") # assumes only one patch"
13515147,What is on the cow?," # assumes one object on the cow
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""What is on the cow?"")
    for cow_patch in cow_patches:
        on_patches = cow_patch.find(""on"")
        # Question assumes only one object on the cow
        if len(on_patches) == 0:
            return cow_patch.simple_query(""What is on the cow?"")
        return on_patches[0].simple_query(""What is on the cow?"") # crop would include the object on the cow so keep it in the query"
91036716,What is the skater doing?," # assumes only one skater
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"") # crop would include the action so keep it in the query"
17791510,What is the person to the left of the boy carrying?," # crop would include what the boy is carrying so keep it in the query
    image_patch = ImagePatch(image)
    boy_carrying_patches = image_patch.find(""boy carrying"")
    # Question assumes only one boy carrying patch
    if len(boy_carrying_patches) == 0:
        # If no boy carrying is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    for boy_carrying_patch in boy_carrying_patches:
        patches_to_left = image_patch.crop(0, 0, boy_carrying_patch.horizontal_center, image_patch.height)
        return patches_to_left.simple_query(""What is the person to the left of the boy carrying?"") # crop would include what the boy is carrying so keep it in the query"
13152020,Is the ground wet or dry?," # ask ground directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ground wet or dry?"") # ground is a noun so ask directly"
19312096,"On which side is the purse, the left or the right?"," # assuming only one purse
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) == 0:
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    purse_patch = purse_patches[0]
    if purse_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?," # -> str
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bread""))"
9113663,Do you see either any snow or sand that are white?," #->str
    image_patch = ImagePatch(image)
    is_snow = image_patch.exists(""snow"")
    is_sand = image_patch.exists(""sand"")
    return bool_to_yesno((is_snow or is_sand)) and image_patch.simple_query(""What is white?"") # crop would include the white so keep it in the query"
10243612,Which place is it?," # could be a country, city, state, etc
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # assumes no object is in the way of the place"
555062,What vegetable is to the left of the napkin?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"") # crop would include the napkin so keep it in the query"
15599523,Is the dog on the right side?," # contains a relation (left, right, above, below, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the dog on the right side?"") # crop would include the dog so keep it in the query"
101019673,What is the man wearing?," # what is the man wearing
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"") # crop would include the clothing so keep it in the query"
333047,Do you see any men to the right of the orange tent?," # Do you see any men to the right of the orange tent?
    image_patch = ImagePatch(image)
    orange_tent_patch = None
    men_patches = image_patch.find(""man"")
    # Question assumes only one orange tent patch
    if len(image_patch.find(""tent"")) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for tent_patch in image_patch.find(""tent""):
        if tent_patch.simple_query(""What color is the tent?"") == ""orange"":
            orange_tent_patch = tent_patch
    # Question assumes only one orange tent patch
    if orange_tent_patch is None:
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for man_patch in men_patches:
        if man_patch.horizontal_center > orange_tent_patch.horizontal_center:
            return ""yes""
    return ""no"""
13907796,Is the shirt striped and green?," # and green
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    shirt_patch = shirt_patches[0]
    is_striped = shirt_patch.simple_query(""Is the shirt striped?"") == ""yes""
    is_green = shirt_patch.simple_query(""Is the shirt green?"") == ""yes""
    return bool_to_yesno(is_striped and is_green)"
17207604,Are there either bottles or shelves?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf) # or is_bottle or is_shelf is True if either is True"
1890653,What vehicle is to the right of the train on the left of the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"") # crop would include the train on the left so keep it in the query"
7165131,Is that train engine small or large?," # assumes one engine patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train engine"")
    if len(train_patches) == 0:
        return image_patch.simple_query(""Is that train engine small or large?"")
    if train_patches[0].horizontal_center > train_patches[0].horizontal_center * 1.5:
        return ""large""
    else:
        return ""small"""
21049362,Where are the railroad tracks?," # returns the location
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"") # crop would include the tracks so keep it in the query"
6224352,What is the animal looking at?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal looking at?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14367593,What are the children playing?," # returns a list of strings
    image_patch = ImagePatch(image)
    return image_patch.find(""children playing"")"
598297,Are there combs or figurines in the picture?," # type: ignore
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine) # type: ignore"
16409127,What is the wire on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5841062,Is the tunnel small or large?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tunnel small or large?"") # crop would include the tunnel so keep it in the query"
17560468,Do you see trains or windows?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see trains or windows?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
9321809,What is the person near the man wearing?," #, prefix: str=""""):
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person near the man wearing?"") #, prefix=prefix) #, prefix=prefix)"
12352375,Is the vehicle that is sitting down black or blue?," # assumes one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle sitting down?"") == ""yes"":
            return vehicle_patch.best_text_match([""black"", ""blue""])
    # If no vehicle is sitting down, query the image directly
    return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")"
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?," # white thing -> shower curtain
    image_patch = ImagePatch(image)
    metal_trash_can_patches = image_patch.find(""metal trash can"")
    # Question assumes only one metal trash can patch
    if len(metal_trash_can_patches) == 0:
        # If no metal trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    metal_trash_can_patch = metal_trash_can_patches[0]
    white_thing_patches = image_patch.find(""white thing"")
    # Question assumes only one white thing patch
    if len(white_thing_patches) == 0:
        return ""left""
    white_thing_patch = white_thing_patches[0]
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        return ""left""
    shower_curtain_patch = shower_curtain_patches[0]
    if white_thing_patch.horizontal_center > shower_curtain_patch.horizontal_center:
        if metal_trash_can_patch.horizontal_center < white_thing_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
    else:
        if metal_trash_can_patch.horizontal_center < white_thing_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
5800248,Is it outdoors?," # assumes image is 3D
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it outdoors?"")) # assumes image is 3D"
4604785,Does the pizza slice to the left of the pizza have large size?," # returns yes or no
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    pizza_patch = pizza_patches[0]
    left_pizza_patches = pizza_patch.crop(0, 0, pizza_patch.width // 2, pizza_patch.height)
    return bool_to_yesno(left_pizza_patch.simple_query(""Does the pizza slice have large size?"")) # crop would include the size so keep it in the query"
15185845,What's the man wearing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the man wearing?"") # crop would include the object being worn so keep it in the query"
2282232,Where is the snow?," # snow in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"") # snow in the query"
7889197,Who is wearing a shirt?," # shirt is not a property, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query"
11292587,Are there either any blankets or pictures in the photograph?," # image is a 3D array
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)"
154682,Where does the bird stand on?," # bird, on, stand
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Where does the bird stand on?"")
    return bird_patches[0].simple_query(""Where does the bird stand on?"") # crop would include the object so keep it in the query"
10435315,Is the man holding a racket?," # rackets is a plural
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    return bool_to_yesno(man_patch.simple_query(""Is the man holding a racket?"") == ""yes"") # crop would include the racket so keep it in the query"
121035887,Do the man shorts have white color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    man_shorts_patches = man_patch.find(""man shorts"")
    # Question assumes only one man shorts patch
    if len(man_shorts_patches) == 0:
        # If no man shorts are found, query the image directly
        return man_patch.simple_query(""Do the man shorts have white color?"")
    man_shorts_patch = man_shorts_patches[0]
    return man_shorts_patch.verify_property(""man shorts"", ""white"") # crop would include the man so keep it in the query"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?," # contains multiple relations, so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < man_patch.horizontal_center:
            cows_patches = image_patch.find(""cows"")
            # Question assumes only one cow patch
            if len(cows_patches) == 0:
                return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
            cow_patch = cows_patches[0]
            if cow_patch.horizontal_center > man_patch.horizontal_center:
                return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    return vehicle_patches[0].simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"") # crop would include the man and cows so keep"
19659501,What is the color of the umbrella the bird is on?," # bird on umbrella
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the color of the umbrella the bird is on?"") # crop would include the bird so keep it in the query"
10595217,Where is the grass?," # assumes one grass patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    if len(grass_patches) == 0:
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"") # crop would include the grass so keep it in the query"
14803743,Which kind of clothing is black?," # assume only one patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        is_black = clothing_patch.simple_query(""Is the clothing black?"")
        if is_black == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"")
    # If no clothing is black, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"") # crop would include the color so keep it in the query"
19743238,Is the man on the right side?," # no relation, so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    return bool_to_yesno(man_patches[0].horizontal_center > image_patch.horizontal_center)"
3965204,Are the mountains covered with snow?," # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""mountains"", ""snow"")) # crop would include the snow so keep it in the query"
141024710,Are there both windows and cars in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?," # not sure if this is the right way to do it
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    shirt_patch = shirt_patches[0]
    shirt_color = shirt_patch.simple_query(""What color do you think the shirt is?"")
    return shirt_color"
3623367,What's he doing?," # assumes only one object
    image_patch = ImagePatch(image)
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        # If no object is found, query the image directly
        return image_patch.simple_query(""What's he doing?"")
    return object_patches[0].simple_query(""What's he doing?"") # crop would include the action so keep it in the query"
15634950,Where is the giraffe in front of the hay eating from?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"") # crop would include eating so keep it in the query"
16644500,What animal is the log pulled by?," # contains a relation (pulled by), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the log pulled by?"")"
3202108,Which side is the car on?," # assumes only one car
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which side is the car on?"") # assumes only one car"
10137201,Are the papers in the bottom part of the picture?," # bottom
    image_patch = ImagePatch(image)
    papers_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(papers_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    return bool_to_yesno(papers_patches[0].vertical_center < image_patch.vertical_center)"
5325670,Is the boy to the left or to the right of the person that is on the left?," # relative position
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    boy_patch = boy_patches[0]
    boy_horizontal_center = boy_patch.horizontal_center
    leftmost_patch = ImagePatch(image, 0, 0, boy_patch.left, boy_patch.lower)
    if leftmost_patch.horizontal_center < boy_horizontal_center:
        return ""left""
    else:
        return ""right"""
8438091,The picture is what color?," # a relation of color
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""The picture is what color?"") # crop would include the color so keep it in the query"
4325939,On which side of the photo is the banana?," # left, right, or center
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif banana_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
1425189,What is the name of the brown piece of furniture?," # not the best name
    image_patch = ImagePatch(image)
    brown_furniture_patches = image_patch.find(""brown piece of furniture"")
    # Question assumes only one brown patch
    if len(brown_furniture_patches) == 0:
        # If no brown furniture is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return brown_furniture_patches[0].simple_query(""What is the name of the brown piece of furniture?"") # crop would include the brown color so keep it in the query"
5119962,Is the man to the right of glasses?," # glasses is a type of object
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if man_patch.horizontal_center > glasses_patch.horizontal_center:
        return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?," # the lid is a part of the toilet
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    lid_patches = toilet_patches[0].find(""lid"")
    # Question assumes only one lid patch
    if len(lid_patches) == 0:
        return ""down""
    return lid_patches[0].simple_query(""Is the lid down or up?"") # crop would include the lid so keep it in the query"
6522554,Which kind of device does the man hold?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patch = image_patch.find(""man"")[0]
    device_patches = man_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return man_patch.simple_query(""Which kind of device does the man hold?"")
    return device_patches[0].simple_query(""Which kind of device does the man hold?"") # crop would include the device so keep it in the query"
870619,What is the device to the left of the person that is to the left of the television?," # device, person, television
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    person_patches = image_patch.find(""person"")
    television_patches = image_patch.find(""television"")
    # Question assumes only one patch for each object
    if len(device_patches) == 0 or len(person_patches) == 0 or len(television_patches) == 0:
        # If no object is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    device_patch = device_patches[0]
    person_patch = person_patches[0]
    television_patch = television_patches[0]
    if device_patch.horizontal_center < person_patch.horizontal_center and person_patch.horizontal_center < television_patch.horizontal_center:
        return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"") # if no device is to the left of the person that is to the left of the television, query the image directly"
12713794,Does the woman to the left of the man wear a necklace?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    for woman_patch in image_patch.find(""woman""):
        if woman_patch.horizontal_center < man_patch.horizontal_center:
            return bool_to_yesno(woman_patch.verify_property(""woman"", ""necklace""))
    return ""no"""
824070,What is the man doing?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    man_action = man_patch.simple_query(""What is the man doing?"")
    return man_action"
11593733,Which kind of furniture is right to the pillow?," # relation (right to) is not supported
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which kind of furniture is right to the pillow?"") # relation (right to) is not supported"
3357821,Does the dog to the left of the other dog look small or large?," # crop would include the other dog, so keep it in the query
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If less than two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog_patch = dog_patches[0]
    right_dog_patch = dog_patches[1]
    if left_dog_patch.horizontal_center < right_dog_patch.horizontal_center:
        return left_dog_patch.simple_query(""Does the dog look small or large?"")
    else:
        return right_dog_patch.simple_query(""Does the dog look small or large?"") # crop would include the other dog, so keep it in the query"
338026,Are the white candles short or tall?," # candle color is white
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    height = candle_patches[0].height
    if height < 100: # arbitrary threshold
        return ""short""
    else:
        return ""tall"""
15346232,What kind of fruit is the girl holding?," # contains a relation (holding, eating, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is the girl holding?"") # crop would include the fruit so keep it in the query"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?"," # has a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"") # yellow vehicle is the relation"
81030271,Is the gray car to the right or to the left of the cart?," # requires a cart and a car
    image_patch = ImagePatch(image)
    cart_patches = image_patch.find(""cart"")
    # Question assumes only one cart patch
    if len(cart_patches) == 0:
        # If no cart is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        return ""left""
    for gray_car_patch in gray_car_patches:
        if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
            return ""right""
    return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?," # image contains canister made of chrome and cooking utensil
    image_patch = ImagePatch(image)
    canister_patches = image_patch.find(""canister made of chrome"")
    # Question assumes only one canister patch
    if len(canister_patches) == 0:
        # If no canister is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    canister_patch = canister_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        return ""no""
    for cooking_utensil_patch in cooking_utensil_patches:
        if cooking_utensil_patch.horizontal_center > canister_patch.horizontal_center:
            return cooking_utensil_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    return cooking_utensil_patches[0].simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"") # crop would include the canister so keep it in the query"
8240699,What animal is in front of the bird?," # assumes one bird patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the bird?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
10105081,Is the fence white or green?," # no patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].best_text_match([""white"", ""green""])"
13613689,Is there a train or a fence in the picture?," # assuming the image is a photo
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    fence_patches = image_patch.find(""fence"")
    if len(train_patches) == 0 and len(fence_patches) == 0:
        return ""no""
    elif len(train_patches) == 0:
        return ""fence""
    elif len(fence_patches) == 0:
        return ""train""
    elif train_patches[0].horizontal_center > fence_patches[0].horizontal_center:
        return ""train""
    else:
        return ""fence"""
10662521,What is the bottle made of?," # bottle
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?," # needs to be modified
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which kind of fruit is on the plate?"") # needs to be modified"
16701575,What device is to the right of the cake?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is to the right of the cake?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
6572516,What material is the ceiling?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"") # crop would include the ceiling so keep it in the query"
11213633,Are there both magazines and umbrellas?," # assumes both are in the same patch
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?," # center of image
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    for egg_patch in egg_patches:
        return egg_patch.simple_query(""What is the color of the egg in the middle of the picture?"") # crop would include the egg so keep it in the query"
14371534,Are the gold pans on the right part or on the left?," # or to the left of the rightmost object
    image_patch = ImagePatch(image)
    gold_pans_patches = image_patch.find(""gold pans"")
    # Question assumes only one gold pans patch
    if len(gold_pans_patches) == 0:
        # If no gold pan is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    if gold_pans_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16538076,What does the man that is not tall wear?," # not sure if it's the best way to do it
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if man_patch.simple_query(""Is the man tall?"") == ""no"":
            return man_patch.simple_query(""What is the man wearing?"")
    # If no man is not tall, pick the first man
    return man_patches[0].simple_query(""What is the man wearing?"") # crop would include the clothes so keep it in the query"
5483644,"On which side is the woman, the left or the right?"," # no need for an image patch
    return ""left"" # hardcoded"
181041779,What is the animal in this photograph?," # simple query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in this photograph?"") # simple query"
1290926,Are there either any life vests or flags?," # is the query ""life vest or flag""?
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)"
18273738,Do you see a cup?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cup"")) # returns yes or no"
4211922,Who is sitting on the table?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"") # crop would include the girl to the right so keep it in the query"
6599090,What is the person to the right of the car holding?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the right of the car holding?"") # crop would include the car so keep it in the query"
1174895,What is the vehicle in the parking lot?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    return vehicle_patches[0].simple_query(""What is the vehicle in the parking lot?"") # crop would include the parking lot so keep it in the query"
14755158,Who is the woman in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the woman in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18349161,Where does the cow that is standing stand?," # assuming only one patch
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    cow_patch = cow_patches[0]
    return cow_patch.simple_query(""Where does the cow that is standing stand?"") # crop would include the standing so keep it in the query"
7472884,On which side is the tap?," # left or right
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    tap_patch = tap_patches[0]
    if tap_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
111051831,On which side of the image is the cabinet?," # left or right
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?," # assumes only one object
    image_patch = ImagePatch(image)
    fork_patch = image_patch.find(""fork"")
    if len(fork_patch) == 0:
        return image_patch.simple_query(""On which side of the image is the fork?"")
    fork_center = fork_patch[0].horizontal_center
    if fork_center > image_patch.width / 2:
        return ""right""
    elif fork_center < image_patch.width / 2:
        return ""left""
    else:
        return ""center"""
2409726,Do you see men to the right of the bag the person is carrying?," # returns yes or no
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?," # material
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    artwork_patch = artwork_patches[0]
    computer_desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one computer desk patch
    if len(computer_desk_patches) == 0:
        return ""no""
    computer_desk_patch = computer_desk_patches[0]
    return bool_to_yesno(artwork_patch.simple_query(""What material is the artwork made of?"") == computer_desk_patch.simple_query(""What material is the computer desk made of?"")) # material"
14298125,Who is playing Wii?," # does not need to be modified
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"") # assumes Wii is a queryable object"
9382689,What's the floor made of?," #, prefix: str=""""):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the floor made of?"") #, prefix=prefix) # prefix would be the prefix of the options"
12889614,Who is wearing the dress?," # who
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is wearing the dress?"") # crop would include the dress so keep it in the query"
15127108,Does the tea pot above the receipt look short and white?," # tea pot and receipt are assumed to be found
    image_patch = ImagePatch(image)
    tea_pot_patch = image_patch.find(""tea pot"")[0]
    receipt_patch = image_patch.find(""receipt"")[0]
    if tea_pot_patch.horizontal_center > receipt_patch.horizontal_center:
        return ""yes""
    return ""no"""
15632653,Which room is it?," # This is the ""What is this?"" query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
485962,Which kind of clothing is black?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What kind of clothing is black?"") == ""black"":
            return clothing_patch.simple_query(""What kind of clothing is black?"")
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""What kind of clothing is black?"") # crop would include the black so keep it in the query"
490992,Is the fence on the left side or on the right of the picture?," # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?," # not a query
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Do the mountains look rocky?"")
    return bool_to_yesno(mountain_patches[0].simple_query(""Do the mountains look rocky?"")) # crop would include the mountains so keep it in the query"
17573742,Is the woman to the right of the camera wearing a coat?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
3395780,Is the vehicle to the left of the parking meter covered in rain?," # assumes only one vehicle and one parking meter
    image_patch = ImagePatch(image)
    vehicle_patch = image_patch.find(""vehicle"")[0]
    parking_meter_patch = image_patch.find(""parking meter"")[0]
    is_to_left = vehicle_patch.horizontal_center < parking_meter_patch.horizontal_center
    is_rainy = vehicle_patch.verify_property(""vehicle"", ""rainy"")
    return bool_to_yesno(is_to_left and is_rainy)"
1542668,Is there a black laptop or desk?," # assuming no laptops or desks are on the floor
    image_patch = ImagePatch(image, 0, image.shape[1]//2, image.shape[2], image.shape[1]) # crop the image in half
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Is there a black laptop or desk?"")
    for laptop_patch in laptop_patches:
        if laptop_patch.simple_query(""Is the laptop black?"") == ""yes"":
            return ""laptop""
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        return ""no""
    for desk_patch in desk_patches:
        if desk_patch.simple_query(""Is the desk black?"") == ""yes"":
            return ""desk""
    return ""no"""
1655442,What type of food is to the right of the waffles that are to the right of the person?," # waffles are to the right of the person
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for food_patch in food_patches:
        waffles_patches = image_patch.find(""waffles"")
        for waffles_patch in waffles_patches:
            if waffles_patch.horizontal_center > man_patch.horizontal_center:
                if waffles_patch.horizontal_center > food_patch.horizontal_center:
                    return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    return food_patches[0].simple_query(""What type of food is to the right of the waffles that are to the right of the person?"") # crop would include the food so keep it in the query"
395290,How large is the bag?," # returns a string
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"") # crop would include the bag so keep it in the query"
16138893,Are there both motorcycles and cars in this scene?," # changed from execute_command
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?," # find the object wearing shorts
    image_patch = ImagePatch(image)
    wearing_shorts_patches = image_patch.find(""person wearing shorts"")
    # Question assumes only one patch
    if len(wearing_shorts_patches) == 0:
        # If no person wearing shorts is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    return wearing_shorts_patches[0].simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query"
171032184,What hangs from the windows?," # TODO: Is this a good example of a query?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15962394,Are there both spoons and plates in the image?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8197176,What color is the jacket that the man wears?," # crop would include the man so keep it in the query
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = man_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return man_patch.simple_query(""What color is the jacket that the man wears?"")
    return jacket_patches[0].simple_query(""What color is the jacket that the man wears?"") # crop would include the man so keep it in the query"
3440931,What are that pieces of furniture called?," # return the answer to the question
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What are those pieces of furniture called?"") # assumes that the pieces of furniture are in the same patch"
337924,What is the fruit that is to the left of the chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"") # contains a relation, so ask directly"
16208211,What do you think are the bowls on?," # assumes a single object
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    for bowl_patch in bowl_patches:
        surface_patches = image_patch.find(""surface"")
        # Question assumes only one surface patch
        if len(surface_patches) == 0:
            # If no surface is found, query the image directly
            return image_patch.simple_query(""What do you think are the bowls on?"")
        return surface_patches[0].simple_query(""What do you think are the bowls on?"") # crop would include the surface so keep it in the query"
18330260,Is the sky above the trees open and clear?," # assumes one patch per object
    image_patch = ImagePatch(image)
    sky_patch = image_patch.find(""sky"")[0]
    tree_patch = image_patch.find(""tree"")[0]
    return bool_to_yesno(sky_patch.upper > tree_patch.vertical_center and sky_patch.simple_query(""Is the sky open and clear?"") == ""yes"") # crop would include the sky so keep it in the query"
14119691,Does the squirrel to the right of the stuffed dog look white?," # Does the squirrel to the right of the stuffed dog look white?
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"") # crop would include the squirrel and the dog, so keep it in the query"
18437694,Does the clock to the right of the statue have gold color and tiny size?," # not tested
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        return ""no""
    clock_patch = clock_patches[0]
    is_gold = clock_patch.verify_property(""clock"", ""gold"")
    is_tiny = clock_patch.verify_property(""clock"", ""tiny"")
    return bool_to_yesno(is_gold and is_tiny)"
1252960,Where was the photo taken?," # not sure if this works
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"") # not sure if this works"
17454895,Is there a frisbee on the grass?," # checks if there is a frisbee on the grass
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Is there a frisbee on the grass?"")
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        return ""no""
    return bool_to_yesno(frisbee_patches[0].horizontal_center > grass_patches[0].horizontal_center) # if the frisbee is on the grass, it should be to the right of the grass"
13180513,Are there either cakes or containers in the photo?," # not used
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    motorcycle_patches = image_patch.find(""motorcycle"")
    return bool_to_yesno(len(black_car_patches) > 0 or len(motorcycle_patches) > 0)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?," # to the left of the police officer
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    for blue_car_patch in blue_car_patches:
        vehicle_to_left_of_police_officer_patches = image_patch.find(""vehicle to the left of the police officer"")
        # Question assumes only one patch
        if len(vehicle_to_left_of_police_officer_patches) == 0:
            return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
        for vehicle_to_left_of_police_officer_patch in vehicle_to_left_of_police_officer_patches:
            if blue_car_patch.horizontal_center > vehicle_to_left_of_police_officer_patch.horizontal_center:
                return ""behind""
            elif blue_car_patch.horizontal_center < vehicle_to_left_of_police_officer_patch.horizontal_center:
                return ""front""
    return ""front"" # if no vehicle is to the left of the police officer, return ""front"""
5785831,What is in the glass?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the glass?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
19246241,Are there any brown benches or buckets?," # returns yes or no
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.verify_property(""bench"", ""brown"")
    is_brown_bucket = image_patch.verify_property(""bucket"", ""brown"")
    return bool_to_yesno(is_brown_bench or is_brown_bucket)"
3243803,"Where in the picture is the spoon, on the right or on the left?"," # assumes only one spoon patch
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
6952486,Does the shirt look white?," # shirt is a common object
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    return shirt_patches[0].simple_query(""Does the shirt look white?"") # crop would include the shirt so keep it in the query"
17401425,Is there a bag that is not brown?," # bag, bag, bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if bag_patch.simple_query(""Is the bag brown?"") == ""yes"":
            return ""no""
    return ""yes"""
481240,"Which kind of furniture is large, the shelf or the cupboard?"," # This function assumes a shelf and a cupboard are in the image
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    # Question assumes only one shelf patch and one cupboard patch
    if len(shelf_patches) == 0 or len(cupboard_patches) == 0:
        # If no shelf or cupboard is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    if shelf_patches[0].width > cupboard_patches[0].width:
        return ""shelf""
    elif cupboard_patches[0].width > shelf_patches[0].width:
        return ""cupboard""
    else: # if they have the same size, return the first one
        return shelf_patches[0].simple_query(""Which kind of furniture is large, the shelf or the cupboard?"") # crop would include the size so keep it in the query"
8531943,Are there any screens or bags?," # returns yes or no
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)"
1969545,What is she wearing?," # crop would include the shirt so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is she wearing?"") # crop would include the shirt so keep it in the query"
91045271,"Which appliance is not white, the freezer or the ice maker?"," # assumes both are in the image
    image_patch = ImagePatch(image)
    freezer_patches = image_patch.find(""freezer"")
    # Question assumes only one freezer patch
    if len(freezer_patches) == 0:
        # If no freezer is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    if freezer_patches[0].simple_query(""Is the freezer white?"") == ""yes"":
        return ""freezer""
    else:
        return ""ice maker"""
1051870,Are there chairs or tables that are not green?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    table_patches = image_patch.find(""table"")
    # Question assumes only one chair and one table patch
    if len(chair_patches) == 0 or len(table_patches) == 0:
        # If no chair or table is found, query the image directly
        return image_patch.simple_query(""Are there chairs or tables that are not green?"")
    for chair_patch in chair_patches:
        is_green = (chair_patch.simple_query(""Is the chair green?"") == ""yes"")
        if not is_green:
            return ""yes""
    for table_patch in table_patches:
        is_green = (table_patch.simple_query(""Is the table green?"") == ""yes"")
        if not is_green:
            return ""yes""
    return ""no"""
1366363,Does the taxi have a different color than the truck?," # returns a yes or no
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    truck_patches = image_patch.find(""truck"")
    if len(taxi_patches) == 0 or len(truck_patches) == 0:
        return ""yes""
    for taxi_patch in taxi_patches:
        for truck_patch in truck_patches:
            if taxi_patch.cropped_image.shape[0] == 0 or truck_patch.cropped_image.shape[0] == 0:
                return ""yes""
            taxi_color = ImagePatch(taxi_patch.cropped_image[:, :, 0]).simple_query(""What color is the taxi?"")
            truck_color = ImagePatch(truck_patch.cropped_image[:, :, 0]).simple_query(""What color is the truck?"")
            if taxi_color != truck_color:
                return ""yes""
    return ""no"""
5460839,In which part of the image is the dog?," # crop would include the dog so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the image is the dog?"") # crop would include the dog so keep it in the query"
18899476,What type of vegetable is to the right of the rice that is on the plate?," # query assumes rice is on the plate
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    for vegetable_patch in vegetable_patches:
        rice_patches = image_patch.find(""rice"")
        # Question assumes only one rice patch
        if len(rice_patches) == 0:
            return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
        rice_patch = rice_patches[0]
        if rice_patch.horizontal_center > vegetable_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    # If no vegetable is to the right of the rice, pick the first vegetable
    return vegetable_patches[0].simple_query(""What type of vegetable is to the right of the rice that is on the plate?"") # crop would include the rice and plate so keep it in the query"
8606903,What food item is not wide?," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if food_patch.width < image_patch.width / 2:
            return food_patch.simple_query(""What food item is not wide?"")
    # If all food is wide, pick the first food
    return food_patches[0].simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?," # or is there a folding chair or a skateboard?
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there an elephant near the pond?"")"
1575941,Which place is it?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
9725865,What is the color of the floor that the desk is on top of?," # a relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
16654241,Is the TV on the left or on the right?," # does not use the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the TV on the left or on the right?"")"
18685233,Which kind of vehicle is to the left of the flags?," # assumes one patch for flags
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < image_patch.horizontal_center:
            return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"") # if no vehicle is found to the left, ask the image directly"
9796068,Are there both a fence and a sheep in the picture?," # should be bool_to_yesno
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?," # is the blanket or towel blue
    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue blanket"") # blanket or towel
    # Question assumes only one patch
    if len(blue_patches) == 0:
        # If no blue patch is found, query the image directly
        return image_patch.simple_query(""Do you see any blue blanket or towel?"")
    return ""yes"""
1110330,Is the pillow to the left of the frog cream colored or green?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"") # pillow is to the left of the frog, so keep it in the query"
511507,Is the antenna on the aircraft?," # aircraft, airplane, plane, plane, aeroplane
    image_patch = ImagePatch(image)
    # not a relational verb so go step by step
    return image_patch.simple_query(""Is the antenna on the aircraft?"") # crop would include the aircraft so keep it in the query"
10464417,"In which part is the tent, the top or the bottom?"," # assumes a single tent patch
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    if len(tent_patches) == 0:
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    tent_patch = tent_patches[0]
    if tent_patch.vertical_center > image_patch.vertical_center:
        return ""top""
    else:
        return ""bottom"""
10816730,Is the tree in front of the building?," # no relation, so go step by step
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Is the tree in front of the building?"")
    tree_patch = tree_patches[0]
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        return ""no""
    building_patch = building_patches[0]
    if tree_patch.horizontal_center < building_patch.horizontal_center:
        return ""yes""
    return ""no"""
18766115,Who is walking?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is walking?"") # no need to crop, no relation"
10625851,Are there either any fruits or plates in the image?," # assumes only one object patch per object
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return ""no""
    return person_patch.simple_query(""Is the person wearing a coat?"") # crop would include the coat so keep it in the query"
4194722,Is the man wearing a helmet?," # no helmet
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    man_patch = man_patches[0]
    return man_patch.verify_property(""man"", ""helmet"") # helmet is not an attribute of man"
414248,"What animal are the women near the ocean riding, a pig or a horse?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"") # crop would include the ocean so keep it in the query"
683094,Who is wearing the shirt?," # shirt is a predicate of a relational verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the shirt?"") # shirt is a predicate of a relational verb"
12140603,What device is to the left of the headphones?," # device, headphones
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for device_patch in device_patches:
        for headphones_patch in headphones_patches:
            if headphones_patch.horizontal_center > device_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the headphones?"")
    # If no device is to the left of the headphones, query the image directly
    return image_patch.simple_query(""What device is to the left of the headphones?"") # crop would include the headphones so keep it in the query"
5575209,The flowers are where?," # assume one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The flowers are where?"") # assume one patch"
8773829,Which kind of furniture is made of wood?," # return the answer to the question
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        is_made_of_wood = (furniture_patch.simple_query(""Is the furniture made of wood?"") == ""yes"")
        if is_made_of_wood:
            return furniture_patch.simple_query(""Which kind of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is made of wood?"") # crop would include the wood so keep it in the query"
12636428,Which kind of animal is black?," # animal, black, eating
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What kind of animal is black?"")
    return image_patch.simple_query(""Which kind of animal is black?"") # crop would include the black so keep it in the query"
1020584,What animals is the car behind of?," # animal patches
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animals is the car behind of?"") # assumes only one patch"
11879418,The man is standing on what?," # contains a relation (on, in, with, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is standing on what?"") # crop would include the object so keep it in the query"
12334288,What device is to the left of the cabinet?," # assumes one cabinet patch
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    if len(cabinet_patches) == 0:
        return image_patch.simple_query(""What device is to the left of the cabinet?"")
    cabinet_patch = cabinet_patches[0]
    return cabinet_patch.simple_query(""What device is to the left of the cabinet?"") # crop would include the cabinet so keep it in the query"
691610,Is the monitor to the left of a book?," # monitor is assumed to be on the right
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Is the monitor to the left of a book?"")
    for monitor_patch in monitor_patches:
        book_patches = image_patch.find(""book"")
        for book_patch in book_patches:
            if book_patch.horizontal_center > monitor_patch.horizontal_center:
                return ""no""
    return ""yes"""
7552714,Is the color of the jacket black?," # color of jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    jacket_patch = jacket_patches[0]
    return bool_to_yesno(jacket_patch.verify_property(""jacket"", ""black""))"
8492422,Is the man to the left of a boy?," # man or boy
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one man and one boy patch
    if len(man_patches) == 0 or len(boy_patches) == 0:
        # If no man or boy is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    man_patch = man_patches[0]
    boy_patch = boy_patches[0]
    if man_patch.horizontal_center < boy_patch.horizontal_center:
        return ""yes""
    return ""no"""
13248061,What type of device is to the left of the keyboard in the bottom of the image?," # no query
    image_patch = ImagePatch(image, 0, image_patch.height - 100, 100, image_patch.height) # bottom of image
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < image_patch.horizontal_center:
            return device_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    # If no device is to the left of the keyboard, query the image directly
    return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"") # crop would include the keyboard so keep it in the query"
18252454,What is common to the roof and the sky?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is common to the roof and the sky?"")"
14443687,What do the cat and the book have in common?," # object1 and object2 have property
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    # Question assumes only one cat patch and one book patch
    if len(cat_patches) == 0 or len(book_patches) == 0:
        # If no cat or book is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    for cat_patch in cat_patches:
        for book_patch in book_patches:
            common_property = cat_patch.simple_query(""What do you have in common with the book?"")
            return common_property"
14571335,Who is wearing trousers?," # who is wearing trousers
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing trousers?"") # crop would include the trousers so keep it in the query"
474885,Who wears a cap?," # is the cap gold or white?
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    return cap_patches[0].simple_query(""Who wears a cap?"") # cap would be in the query"
141013015,"What color is the toilet, brown or white?"," # assumes toilet is in the image
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].simple_query(""What color is the toilet, brown or white?"") # crop would include the toilet so keep it in the query"
5515816,On which side of the image is the fence?," #left or right
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
16774696,What is the surfer wearing?," # surfer
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the surfer wearing?"") # crop would include the clothing so keep it in the query"
13701956,Is there any grass or sand that is not dry?," # assumes one patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    sand_patches = image_patch.find(""sand"")
    for patch in grass_patches + sand_patches:
        if patch.simple_query(""Is the grass or sand dry?"") == ""no"":
            return ""yes""
    return ""no"""
11606870,Is there a cow or a zebra in the picture?," # change to simple_query
    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?," # a property
    image_patch = ImagePatch(image)
    fire_hydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(fire_hydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"") # a property
    return bool_to_yesno(fire_hydrant_patches[0].verify_property(""fire hydrant"", ""modern""))"
942308,Is the cup empty or full?," # assumes only one cup patch
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    for cup_patch in cup_patches:
        is_full = cup_patch.simple_query(""Is the cup full?"")
        if is_full == ""yes"":
            return ""full""
        is_empty = cup_patch.simple_query(""Is the cup empty?"")
        if is_empty == ""yes"":
            return ""empty""
    return ""empty"" # default to empty if no cup is found"
15815976,Is the woman wearing a scarf?," # returns yes or no
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    return bool_to_yesno(woman_patches[0].verify_property(""woman"", ""scarf"")) # woman and scarf are the same object so use the same property"
3193231,Do you see either parking meters or brooms in the picture?," # assumes that either parking meter or broom is present
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)"
314218,Is the sign in front of the bridge small and white?," # small and white
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    for sign_patch in sign_patches:
        if sign_patch.horizontal_center > bridge_patch.horizontal_center:
            return bool_to_yesno(sign_patch.simple_query(""Is the sign small and white?"") == ""yes"")
    return ""no"""
18130465,Does the umbrella that is not dry look orange and open?," # does not exist in the image
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    umbrella_patch = umbrella_patches[0]
    is_not_dry = umbrella_patch.simple_query(""Is the umbrella dry or not dry?"") == ""not dry""
    if is_not_dry:
        return umbrella_patch.simple_query(""Does the umbrella look orange and open?"") # crop would include the opening so keep it in the query
    return ""no"""
7920817,What's in the paper?," # assumes paper is a object (card, paper, etc)
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""What's in the paper?"")
    return paper_patches[0].simple_query(""What's in the paper?"") # crop would include the paper so keep it in the query"
18167292,What is on the bun in the top?," # not a query but a command
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the bun in the top?"") # crop would include the bun so keep it in the query"
16929928,What is the fence made of?," # material
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    fence_patch = fence_patches[0]
    return fence_patch.simple_query(""What is the fence made of?"") # crop would include the fence so keep it in the query"
14113312,Is the woman to the left or to the right of the lady?," # assumes only one woman and one lady
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    lady_patches = image_patch.find(""lady"")
    if len(woman_patches) == 0 or len(lady_patches) == 0:
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    woman = woman_patches[0]
    lady = lady_patches[0]
    if woman.horizontal_center < lady.horizontal_center:
        return ""left""
    else:
        return ""right"""
17993299,Is the horse to the left of a car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the horse to the left of a car?"")"
8717022,Is the small animal to the left of the vehicle that looks silver?," # returns yes or no
    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        # If no small animal is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    for small_animal_patch in small_animal_patches:
        if small_animal_patch.horizontal_center < vehicle_patch.horizontal_center:
            return ""yes""
    return ""no"""
2998707,Which color is the chair that is on the right?," # assume only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    rightmost_chair = max(chair_patches, key=lambda chair: chair.horizontal_center)
    return rightmost_chair.simple_query(""Which color is the chair that is on the right?"") # crop would include the chair so keep it in the query"
171017786,Do you see any cups to the left of the monitor?," # cups, monitor
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one monitor patch
    monitor_patch = image_patch.find(""monitor"")[0]
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    for cup_patch in cup_patches:
        if cup_patch.horizontal_center < monitor_patch.horizontal_center:
            return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?," # horizontal relation
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    glasses_patch = man_patch.find(""glasses"")[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    girl_patch = girl_patches[0]
    if girl_patch.horizontal_center > glasses_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1941568,What animal is in the water?," # changed from animal
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")"
17577787,Does the man's hair look short and white?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    is_hair_short_and_white = (man_patch.simple_query(""Is the man's hair short and white?"") == ""yes"")
    return bool_to_yesno(is_hair_short_and_white)"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"") # contains a relation, so ask directly"
9825336,Which kind of furniture is the mat lying on?," # image is assumed to be a 3D array
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    return mat_patches[0].simple_query(""Which kind of furniture is the mat lying on?"") # crop would include the furniture so keep it in the query"
11222427,Do you see fences or elephants?," # check if fences are in the image
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?"," # no need to modify the image
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    for bed_patch in bed_patches:
        is_white = bed_patch.simple_query(""Is the bed white?"") == ""yes""
        if not is_white:
            return ""bed""
    # If the bed is white, ask the image directly
    return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"") # crop would include the bed so keep it in the query"
1152020,Do you see either any plate or tomato that are red?," # plate or tomato
    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""plate"") and image_patch.verify_property(""plate"", ""red"")
    is_red_tomato = image_patch.exists(""tomato"") and image_patch.verify_property(""tomato"", ""red"")
    return bool_to_yesno(is_red_plate or is_red_tomato)"
8961520,Who is surfing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18106780,Which room is it?," # assuming one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
1892692,What color do you think the bowl that is to the right of the person is?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
6952082,What color is the hair?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    hair_patch = hair_patches[0]
    return hair_patch.simple_query(""What color is the hair?"") # crop would include the hair so keep it in the query"
3768067,What color is the pot the statue is to the right of?," # TODO: needs to be modified
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    for statue_patch in statue_patches:
        pot_patches = image_patch.find(""pot"")
        for pot_patch in pot_patches:
            if pot_patch.horizontal_center < statue_patch.horizontal_center:
                return pot_patch.simple_query(""What color is the pot the statue is to the right of?"")
    # If no pot is found to the left of the statue, query the image directly
    return image_patch.simple_query(""What color is the pot the statue is to the right of?"") # TODO: needs to be modified"
17866761,Is the clear glass on the shelf of the table?," #clear glass
    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    for clear_glass_patch in clear_glass_patches:
        is_on_shelf = clear_glass_patch.simple_query(""Is the clear glass on the shelf of the table?"") == ""yes""
        if is_on_shelf:
            return ""yes""
    return ""no"""
798020,Does the skirt look black or yellow?," # skirt is yellow, black is a wrong guess
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the skirt look black or yellow?"") # skirt is yellow, black is a wrong guess"
828981,How old is he?," # should be an image
    image_patch = ImagePatch(image)
    # asks for a property (age), so ask directly
    return image_patch.simple_query(""How old is he?"") # he is assumed to be male"
7236463,Of what color is the book?," # TODO: update this example to reflect the color property
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""Of what color is the book?"") # crop would include the color so keep it in the query"
6376684,What color is the car to the left of the train car?," # image should be RGB
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    train_car_patches = image_patch.find(""train car"")
    # Question assumes only one train car patch
    if len(train_car_patches) == 0:
        return image_patch.simple_query(""What color is the car to the left of the train car?"") # crop would include the train car so keep it in the query
    for car_patch in car_patches:
        for train_car_patch in train_car_patches:
            if train_car_patch.horizontal_center > car_patch.horizontal_center:
                return car_patch.simple_query(""What color is the car to the left of the train car?"")
    return train_car_patches[0].simple_query(""What color is the car to the left of the train car?"") # crop would include the train car so keep it in the query"
786798,Is this a photo of a beach?," # todo: implement simple_query for beach
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is this a photo of a beach?"")) # todo: implement simple_query for beach"
19836753,What vehicles are to the left of the fence?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    for vehicle_patch in image_patch.find(""vehicle""):
        if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is to the left of the fence?"") # crop would include the fence so keep it in the query
    return ""no vehicle"""
15284615,Who is playing?," # Who is playing?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"") # contains a relation (playing with, playing against, etc), so ask directly"
16785170,Is the man that is walking holding a remote control?," # no relation so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    if man_patch.simple_query(""Is the man walking?"") == ""yes"":
        is_holding_remote_control = man_patch.simple_query(""Is the man holding a remote control?"")
        return bool_to_yesno(is_holding_remote_control)
    return ""no"""
17746396,What's the boy wearing?," # assumes one boy patch
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    boy_patch = boy_patches[0]
    return boy_patch.simple_query(""What's the boy wearing?"") # crop would include the wearing so keep it in the query"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13826837,What color is the door?," # to be used in a more complex question
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    return door_patches[0].simple_query(""What color is the door?"") # crop would include the door so keep it in the query"
19249907,Are there any horses in the field?," # field is a noun
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse"")) # field is a noun so do not ask directly"
2964690,What is in front of the mountains?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?," # not used
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for vehicle_patch in image_patch.find(""vehicle""):
        if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
            return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?," # crop would include the color so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")"
1189986,Is the man behind the elephant holding a surfboard?," # assumes only one man and elephant and one surfboard
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    man_patches = image_patch.find(""man"")
    surfboard_patches = image_patch.find(""surfboard"")
    if len(man_patches) == 0 or len(surfboard_patches) == 0 or len(elephant_patches) == 0:
        # If no man, elephant, or surfboard is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    man_patch = man_patches[0]
    elephant_patch = elephant_patches[0]
    surfboard_patch = surfboard_patches[0]
    return bool_to_yesno((man_patch.horizontal_center > elephant_patch.horizontal_center) and (man_patch.horizontal_center > surfboard_patch.horizontal_center)) # horizontal center"
8792466,Which color is the closed window?," # assume only one window patch
    image_patch = ImagePatch(image)
    window_patch = image_patch.find(""window"")
    if len(window_patch) == 0:
        return image_patch.simple_query(""Which color is the closed window?"")
    return window_patch[0].simple_query(""Which color is the closed window?"") # crop would include the window so keep it in the query"
10188423,Who is wearing a shirt?," # assumes only one shirt wearer
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    for shirt_patch in shirt_patches:
        is_wearing_shirt = (shirt_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    return image_patch.simple_query(""Who is wearing a shirt?"") # if no one is wearing a shirt, query the image directly"
8965417,What kind of vegetable is to the right of the girl?," # assumes one girl patch and one vegetable patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    girl_patch = girl_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > girl_patch.horizontal_center:
            return vegetable_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    return ""no"""
4929965,Is there a black racket or clock in the picture?," # is there a black clock or racket in the picture?
    image_patch = ImagePatch(image)
    is_black_clock = image_patch.exists(""clock"") and image_patch.simple_query(""Is the clock black?"") == ""yes""
    is_black_racket = image_patch.exists(""racket"") and image_patch.simple_query(""Is the racket black?"") == ""yes""
    return bool_to_yesno(is_black_clock or is_black_racket)"
4782038,What kind of animal is white?," # is white
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"") # crop would include the white so keep it in the query
    for animal_patch in animal_patches:
        is_white = animal_patch.simple_query(""Is the animal white?"") == ""yes""
        if is_white:
            return animal_patch.simple_query(""What kind of animal is white?"") # crop would include the white so keep it in the query
    # If no white animal is found, query the image directly
    return image_patch.simple_query(""What kind of animal is white?"") # crop would include the white so keep it in the query"
14658201,Is the sheep that looks white and brown made of plastic?," # this is a complicated question
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    for sheep_patch in sheep_patches:
        is_white = (sheep_patch.simple_query(""Is the sheep white?"") == ""yes"")
        is_brown = (sheep_patch.simple_query(""Is the sheep brown?"") == ""yes"")
        is_plastic = (sheep_patch.simple_query(""Is the sheep made of plastic?"") == ""yes"")
        if is_white and is_brown and is_plastic:
            return ""yes""
    return ""no"""
1441865,Do you see any boxes on the table under the grill?," # assumes only one table and one grill
    image_patch = ImagePatch(image)
    # contains a relation (under, above, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see any boxes on the table under the grill?"") # assumes only one table and one grill"
1424926,What is the tag on?," # tag is a relational verb (on, in, with, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tag on?"") # tag is a relational verb (on, in, with, etc), so ask directly"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?," # piece of furniture
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    for laptop_patch in laptop_patches:
        furniture_patches = image_patch.find(""furniture"")
        # Question assumes only one furniture patch
        if len(furniture_patches) == 0:
            return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > laptop_patch.horizontal_center:
                return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    # If no furniture is found to the right of the laptop, query the image directly
    return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
3635257,Is there any freezer in this photo?," # freezer
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer"")) # freezer"
8821026,Are there either any bags or chairs?," # bags and chairs are both objects
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?," # bus driver is the subject
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In what vehicle is the bus driver?"") # bus driver is the subject"
17204662,What is that man in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that man in front of?"")"
380866,Are there any girls or radios?," # check if there are any girls or radios
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?," # contains a relation (on, in, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The girl is sitting on what?"") # crop would include the object so keep it in the query"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?," # requires only one patch
    image_patch = ImagePatch(image)
    white_lamp_patches = image_patch.find(""white lamp"")
    # Question assumes only one white lamp patch
    if len(white_lamp_patches) == 0:
        # If no white lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for white_lamp_patch in white_lamp_patches:
        pillow_patches = image_patch.find(""pillow"")
        # Question assumes only one pillow patch
        if len(pillow_patches) == 0:
            # If no pillow is found, query the image directly
            return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
        pillow_patch = pillow_patches[0]
        if pillow_patch.horizontal_center == image_patch.horizontal_center:
            return ""left""
        if white_lamp_patch.horizontal_center < pillow_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
    # If no white lamp is found, query the image directly
    return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"") # no patch found so query directly"
16545552,What color do you think is the vehicle the girl is washing?," # not a query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"") # assumes one vehicle patch"
16719872,Are there motorcycles to the left of the man who is wearing a hat?," # the man who is wearing a hat
    image_patch = ImagePatch(image)
    man_wearing_hat_patches = image_patch.find(""man wearing a hat"")
    # Question assumes only one man wearing a hat patch
    if len(man_wearing_hat_patches) == 0:
        # If no man is wearing a hat is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_wearing_hat_patch = man_wearing_hat_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        return ""no""
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.horizontal_center < man_wearing_hat_patch.horizontal_center:
            return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?," # garbage can
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    garbage_can_patch = garbage_can_patches[0]
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        # If no stroller is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    stroller_patch = stroller_patches[0]
    if garbage_can_patch.horizontal_center > stroller_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13711589,What do the truck and the street sign have in common?," # returns the common property
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    truck_patch = truck_patches[0]
    street_sign_patches = image_patch.find(""street sign"")
    # Question assumes only one street sign patch
    if len(street_sign_patches) == 0:
        return ""no property found""
    street_sign_patch = street_sign_patches[0]
    return truck_patch.simple_query(""What property do you and the street sign have in common?"") # crop would include the property so keep it in the query"
10227573,Who is wearing a shirt?," # shirt is not a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"") # shirt is not a property, so query directly"
161071156,What animal is the man leading?," # assumes only one man patch and only one animal patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    animal_patches = image_patch.find(""animal"")
    if len(man_patches) == 0 or len(animal_patches) == 0:
        # If no man or animal is found, query the image directly
        return image_patch.simple_query(""What animal is the man leading?"")
    return man_patches[0].simple_query(""What animal is the man leading?"") # crop would include the animal so keep it in the query"
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
7190226,Does the puddle look large?," # puddle
    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    puddle_patch = puddle_patches[0]
    return bool_to_yesno(puddle_patch.width > puddle_patch.height)"
11675152,Who throws the frisbee?," # contains a relation (to, with, at, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who throws the frisbee?"") # crop would include the frisbee so keep it in the query"
8723676,Which kind of animal is the water on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is the water on?"") # crop would include the water so keep it in the query"
61046657,Do you think that traffic light is tall?," # TODO: implement simple_query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you think that traffic light is tall?"") # TODO: implement simple_query"
9581034,On which side is the wine glass?," # assumes the glass is to the right of the center
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?," # returns right
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        if napkin_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
        elif napkin_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
    return ""center"""
18535266,Is the face mask made of the same material as the mask?," # mask is the one on the face, face mask is the one on the face
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    # Question assumes only one face mask patch
    if len(face_mask_patches) == 0:
        # If no face mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    face_mask_patch = face_mask_patches[0]
    mask_patches = image_patch.find(""mask"")
    # Question assumes only one mask patch
    if len(mask_patches) == 0:
        # If no mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    mask_patch = mask_patches[0]
    return bool_to_yesno(face_mask_patch.verify_property(""face mask"", ""material"") == mask_patch.verify_property(""mask"", ""material"")) # assumes same patch for both face mask and mask"
11254215,What is the tan item of furniture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tan item of furniture?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1852010,How is the device to the right of the device on the desk called?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the device to the right of the device on the desk called?"") # crop would include the desk so keep it in the query"
1587534,Is the device on the floor black and large?," # returns a boolean
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"") == ""yes""
    device_patch = device_patches[0]
    is_floor = (device_patch.vertical_center < image_patch.vertical_center / 2)
    is_black = (device_patch.simple_query(""What color is the device?"") == ""black"")
    is_large = (device_patch.simple_query(""What size is the device?"") == ""large"")
    return bool_to_yesno(is_floor and is_black and is_large)"
8470757,Are there any surfboards?," # no relation
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard"")) # or ""surfboard"" or ""surf board"""
11273949,Is the shirt white?," # shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return shirt_patches[0].verify_property(""shirt"", ""white"") # crop would include the shirt so keep it in the query"
7475238,What's the airplane in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"") # contains a relation, so ask directly"
16685900,Where does the horse to the right of the hose run?," # execute_command
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        hose_patches = image_patch.find(""hose"")
        for hose_patch in hose_patches:
            if hose_patch.horizontal_center > horse_patch.horizontal_center:
                return horse_patch.simple_query(""Where does the horse run?"")
    # If no hose is found to the right of the horse, query the image directly
    return image_patch.simple_query(""Where does the horse run?"") # crop would include the hose so keep it in the query"
3932624,Are there either any gray chairs or laptops?," # no need to crop
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the water brown or blue?"") # crop would include the water so keep it in the query"
9256263,Which kind of furniture is brown?," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""What color is the furniture?"") == ""brown"":
            return furniture_patch.simple_query(""Which kind of furniture is brown?"") # crop would include the brown color so keep it in the query
    # If no furniture is brown, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is brown?"") # crop would include the brown color so keep it in the query"
18719769,Is the man wearing glasses?," # glasses
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    glasses_on_man = False
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
18342439,What animal is white?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What animal is white?"")
    return image_patch.simple_query(""What animal is white?"") # if no animal is white, query the image directly"
8665725,Who is wearing a coat?," # who
    image_patch = ImagePatch(image)
    # not a relational verb so go step by step
    return image_patch.simple_query(""Who is wearing a coat?"") # crop would include the coat so keep it in the query"
5440407,What vehicle isn't black?," # assuming only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle black?"") == ""yes"":
            return vehicle_patch.simple_query(""What vehicle isn't black?"")
    # If all vehicles are black, query the image directly
    return image_patch.simple_query(""What vehicle isn't black?"") # crop would include the color so keep it in the query"
4104707,On which side of the picture is the oven?," # assumes one object
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
3126763,What is common to the logo and the letter?," # returns a string
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    letter_patches = image_patch.find(""letter"")
    # Question assumes only one letter patch
    if len(letter_patches) == 0:
        return ""no""
    for logo_patch in logo_patches:
        for letter_patch in letter_patches:
            common_features = [""blue"", ""red"", ""green"", ""yellow"", ""black"", ""white""]
            for feature in common_features:
                logo_is_feature = logo_patch.verify_property(""logo"", feature)
                letter_is_feature = letter_patch.verify_property(""letter"", feature)
                if logo_is_feature and letter_is_feature:
                    return feature
    return ""no"""
18640925,What animal is in the water the man is walking through?," # assumes only one man and one body of water
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in the water the man is walking through?"")
    # If no animal is found in the water, query the image directly
    return image_patch.simple_query(""What animal is in the water the man is walking through?"") # crop would include the water so keep it in the query"
125488,What is the man wearing?," # simple query
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"") # crop would include the man so keep it in the query"
5925435,What is the sidewalk made of?," # no sidewalk in the image, query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"") # sidewalk is not in the image, query the image directly"
17563472,What is the pattern of the coat?," # patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the coat?"")"
4819547,What kind of furniture is white?," # assumes one object patch
    image_patch = ImagePatch(image)
    patches = image_patch.find(""furniture"")
    if len(patches) == 0:
        return image_patch.simple_query(""What kind of furniture is white?"")
    for patch in patches:
        if patch.simple_query(""Is the furniture white?"") == ""yes"":
            return patch.simple_query(""What kind of furniture is white?"")
    return patches[0].simple_query(""What kind of furniture is white?"") # if no white furniture is found, pick the first furniture patch"
14263174,What color do you think the chair that is to the right of the other chair is?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"") # crop would include the relation, so keep it in the query"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?," # uses relations (left, riding, in front of, etc)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"") # green train would be included in the query"
9239936,Do the cows near the trees have white color?," # near is a relation
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    cow_patch = cow_patches[0]
    tree_patch = tree_patches[0]
    if cow_patch.horizontal_center > tree_patch.horizontal_center:
        return ""yes""
    return ""no"""
1885178,"In which part of the image is the remote control, the bottom or the top?"," # has to be in the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"") # assumes it is in the image"
12341631,Which color is the bag in the top part?," # which color is the bag in the top part
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    top_patch = image_patch.crop(0, image_patch.height//2, image_patch.width, image_patch.height)
    return top_patch.simple_query(""Which color is the bag in the top part?"") # crop would include the top part so keep it in the query"
5532909,"What is the weather like, cloudless or maybe rainy?"," # weather is not always visible
    image_patch = ImagePatch(image)
    is_cloudless = image_patch.verify_property(""weather"", ""cloudless"")
    is_rainy = image_patch.verify_property(""weather"", ""rainy"")
    return ""cloudless"" if is_cloudless else ""rainy"" # order matters, so order based on visibility"
2618222,What is connected to the open laptop?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is connected to the open laptop?"") # crop would include the laptop so keep it in the query"
3252220,Of which color is the shirt the man wears?," # shirt the man wears
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""red"", ""blue"", ""white"", ""green"", ""black""]) # only consider the shirt"
8947801,What is in the vase?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the vase?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
10841562,Is the color of the pants the same as the shorts?," # color of the pants is the same as the shorts
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    pants_color = pants_patches[0].simple_query(""What is the color of the pants?"")
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return pants_color
    return pants_color if pants_color == shorts_patches[0].simple_query(""What is the color of the shorts?"") else ""no"""
15511838,What kind of furniture is to the left of the bucket?," # assumes one bucket patch
    image_patch = ImagePatch(image)
    bucket_patch = image_patch.find(""bucket"")[0]
    left_patch = ImagePatch(image_patch.cropped_image, bucket_patch.horizontal_center - 50, bucket_patch.vertical_center - 50, bucket_patch.horizontal_center + 50, bucket_patch.vertical_center + 50)
    return left_patch.simple_query(""What kind of furniture is to the left of the bucket?"") # crop would include the bucket so keep it in the query"
14495306,Is there any racket to the right of the person that the woman is to the left of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14841932,Do the tiles have square shape and black color?," # shape and color
    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    # Question assumes only one tile patch
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    return tile_patches[0].verify_property(""tile"", ""square"") and tile_patches[0].verify_property(""tile"", ""black"") # shape and color"
41029381,What is the vehicle that is the same color as the shirt called?," # assumes one vehicle patch and one shirt patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one vehicle patch and one shirt patch
    if len(vehicle_patches) == 0 or len(shirt_patches) == 0:
        # If no vehicle or no shirt is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    vehicle_patch = vehicle_patches[0]
    shirt_patch = shirt_patches[0]
    if vehicle_patch.simple_query(""What is the color of the vehicle?"") == shirt_patch.simple_query(""What is the color of the shirt?""):
        return vehicle_patch.simple_query(""What is the vehicle called?"")
    return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"") # if no vehicle is the same color as the shirt, query the image directly"
161027428,Are there both windows and doors in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
16478246,Does the pillow to the right of the man have green color and large size?," # takes an image
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        return ""no""
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""))
    return ""no"""
9450308,Is the happy person wearing a hat?," # crop would include the hat so keep it in the query
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    return happy_patches[0].simple_query(""Is the happy person wearing a hat?"")"
11850389,What place is this?," # what place is this?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"") # query the image directly"
17250452,What kind of appliance is on the right of the drawer?," # on the right of the drawer
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center > image_patch.horizontal_center:
            return appliance_patch.simple_query(""What kind of appliance is on the right of the drawer?"") # crop would include the right of the drawer so keep it in the query
    # If no appliance is found to the right of the drawer, pick the first appliance
    return appliance_patches[0].simple_query(""What kind of appliance is on the right of the drawer?"") # crop would include the right of the drawer so keep it in the query"
14857961,Is the lady to the right of a woman?," # lady and woman are the same object
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the lady to the right of a woman?"") # lady and woman are the same object"
132385,What cooking utensils are to the left of the pan on the right side?," # assumes only one pan on the right
    image_patch = ImagePatch(image)
    cooking_utensils_patches = image_patch.find(""cooking utensils"")
    pan_patch = image_patch.find(""pan"")
    if len(pan_patch) == 0:
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    pan_patch = pan_patch[0]
    cooking_utensils_list = []
    for cooking_utensils_patch in cooking_utensils_patches:
        if cooking_utensils_patch.horizontal_center < pan_patch.horizontal_center:
            cooking_utensils_list.append(cooking_utensils_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?""))
    if len(cooking_utensils_list) == 0:
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return cooking_utensils_list[0]"
9745131,Which color is the truck that is to the left of the lamps?," # crop would include the lamps so keep them in the query
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    for truck_patch in truck_patches:
        if truck_patch.horizontal_center < image_patch.horizontal_center:
            return truck_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    # If no truck is to the left of the lamps, pick the first truck
    return truck_patches[0].simple_query(""Which color is the truck that is to the left of the lamps?"") # crop would include the lamps so keep them in the query"
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?," # returns the color of the motorcycle
    image_patch = ImagePatch(image, 0, image.shape[1] - 1, image.shape[2], image.shape[1]) # crop image to the bottom
    motorcycle_color = image_patch.simple_query(""What color is the motorcycle?"")
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    for bird_patch in bird_patches:
        if bird_patch.simple_query(""What color is the bird?"") == motorcycle_color:
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    # If no bird is the same color as the motorcycle, pick the first bird
    return bird_patches[0].simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"") # crop would include the motorcycle so keep it in the query"
867818,Is the man on the skateboard?," # check if the man is on the skateboard
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the skateboard?"") # contains a relation, so ask directly
    man_patch = man_patches[0]
    is_on_skateboard = (man_patch.simple_query(""Is the man on the skateboard?"") == ""yes"")
    return bool_to_yesno(is_on_skateboard)"
13896221,What is on the table?," # contains a relation (on, next to, around, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"") # crop would include the table so keep it in the query"
1964517,What is the food that is above the white paper?," # What is the food that is above the white paper?
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the food that is above the white paper?"") # contains a relation (above, below, etc), so ask directly"
15705231,Is the shelf to the left of a cabinet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        # Question assumes only one cabinet patch
        if len(cabinet_patches) == 0:
            return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > shelf_patch.horizontal_center:
                return ""no""
    return ""yes"""
15693846,Is the motorcycle parked on the grass?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the motorcycle parked on the grass?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13872995,Who is jumping?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is jumping?"") # crop would include the jumping so keep it in the query"
4502830,Is this a dog or a cat?," # assumes one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""Is this a dog or a cat?"")
    return animal_patches[0].best_text_match([""dog"", ""cat""]) # best match"
12584623,What is the person with the bag wearing?," # to be used with a predicate like ""wearing""
    image_patch = ImagePatch(image)
    person_with_bag_patches = image_patch.find(""person with bag"")
    # Question assumes only one person_with_bag patch
    if len(person_with_bag_patches) == 0:
        # If no person with bag is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    return person_with_bag_patches[0].simple_query(""What is the person with the bag wearing?"") # crop would include the bag so keep it in the query"
7202064,"What is this, a bus or a truck?"," # is it a bus or a truck
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this, a bus or a truck?"") # assumes that the patch is a vehicle"
16542208,Do you see either any beds or blankets there?," # returns a boolean
    image_patch = ImagePatch(image)
    return image_patch.exists(""bed"") or image_patch.exists(""blanket"") # returns a boolean"
11700224,Do you see both lettuce and salad?," # should return yes or no
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)"
1067136,Is the ball on the tree?," # contains a relation (on, in, under, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball on the tree?"") # crop would include the tree so keep it in the query"
364079,What kind of furniture is to the right of the blanket?," # requires a relational verb (to the right of)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"") # crop would include the blanket so keep it in the query"
2533062,How large is the ground the zebra is standing on?," # returns the area of the ground
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    zebra_patch = zebra_patches[0]
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        return ""unknown""
    ground_patch = ground_patches[0]
    return ground_patch.width * ground_patch.height"
19683710,The clock is inside what?," # This example is not a query, but an example of how to ask a question about an object
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""The clock is inside what?"") # This example assumes the clock is inside something, which is a common scenario"
15674863,Is the racket in the top part?," # crop would include the top part so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the racket in the top part?"") # crop would include the top part so keep it in the query"
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?," # TODO: this is not a relational verb
    image_patch = ImagePatch(image)
    person_wearing_shirt_patches = image_patch.find(""person wearing a shirt"")
    # Question assumes only one person wearing a shirt patch
    if len(person_wearing_shirt_patches) == 0:
        # If no person is wearing a shirt is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    shirt_wearing_patch = person_wearing_shirt_patches[0]
    shirt_wearing_center = shirt_wearing_patch.horizontal_center
    shirt_wearing_right = shirt_wearing_center + (shirt_wearing_patch.width / 2)
    return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"") # crop would include the shirt so keep it in the query"
2292637,What is the color of the shirt that the passenger is wearing?," # image is the original image
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"") # crop would include the shirt so keep it in the query"
9175259,What is the chair made of?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patch = image_patch.find(""chair"")[0]
    return chair_patch.simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?," # crop would include the top so keep it in the query
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    carrot_patch = carrot_patches[0]
    return carrot_patch.simple_query(""How big is the carrot in the top of the picture?"") # crop would include the top so keep it in the query"
1638685,What is the name of the vegetable that is on the yellow food?," # contains a relation (on, next to, etc)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"") # crop would include the yellow food so keep it in the query"
5828256,Is the clock on a tower?," # assumes only one patch
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    for clock_patch in clock_patches:
        return bool_to_yesno(clock_patch.simple_query(""Is the clock on a tower?"")) # crop would include the tower so keep it in the query
    return ""no"""
18937563,What kind of animal is orange?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is orange?"") # crop would include the orange so keep it in the query"
14360113,What is the smiling woman holding?," # crop would include the smile so keep it in the query
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    return woman_patches[0].simple_query(""What is the smiling woman holding?"") # crop would include the smile so keep it in the query"
593188,Is the hair short?," # this one is not relational
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    hair_patch = hair_patches[0]
    return hair_patch.simple_query(""Is the hair short?"") # crop would include the hair so keep it in the query"
10824666,Are there ladies to the left of the man that is wearing shorts?," # left of the man that is wearing shorts
    image_patch = ImagePatch(image)
    man_wearing_shorts_patches = image_patch.find(""man that is wearing shorts"")
    # Question assumes only one man patch
    if len(man_wearing_shorts_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    for man_wearing_shorts_patch in man_wearing_shorts_patches:
        lady_patches = image_patch.find(""lady"")
        # Question assumes only one lady patch
        if len(lady_patches) == 0:
            # If no lady is found, query the image directly
            return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
        for lady_patch in lady_patches:
            if lady_patch.horizontal_center < man_wearing_shorts_patch.horizontal_center:
                return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
7574939,Is there any table or plate that is white?," # returns ""yes"" or ""no""
    image_patch = ImagePatch(image)
    is_table_or_plate = image_patch.exists(""table"") or image_patch.exists(""plate"")
    is_white = image_patch.simple_query(""Is the table or plate white?"") == ""yes""
    return bool_to_yesno(is_table_or_plate and is_white) # if table or plate is white, return ""yes"" else return ""no"""
12252101,Is it outdoors?," # assumes one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors"")) # patch is assumed to be the entire image"
6943442,What cooking utensil is on the oven?," # is the oven on the left or right
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What cooking utensil is on the oven?"") # crop would include the oven so keep it in the query"
2977077,The propeller that looks red is what pattern?," # needs to be changed to propeller
    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    for propeller_patch in propeller_patches:
        if propeller_patch.simple_query(""What pattern is the propeller?"") == ""red"":
            return propeller_patch.simple_query(""What pattern is the propeller?"")
    # If no red propeller is found, pick the first propeller
    return propeller_patches[0].simple_query(""What pattern is the propeller?"") # crop would include the propeller so keep it in the query"
11190306,Which kind of animal is to the left of the train?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is to the left of the train?"") # assumes only one train patch"
5107190,Do you see both an airplane and a truck?," # -> bool
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?," # age is a property of a living thing
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"") # age is a property of a living thing so keep it in the query"
12536783,What kind of animal is in front of the pole?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the pole?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    man_t_shirt_patches = image_patch.find(""man wearing a t-shirt"")
    glasses_center = image_patch.horizontal_center
    man_center = image_patch.horizontal_center
    if len(man_t_shirt_patches) == 0:
        man_t_shirt_patches = image_patch.find(""man wearing a t-shirt and a shirt"")
    for man_t_shirt_patch in man_t_shirt_patches:
        man_center = man_t_shirt_patch.horizontal_center
    if len(glasses_patches) == 0:
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    for glasses_patch in glasses_patches:
        glasses_center = glasses_patch.horizontal_center
        if glasses_center > man_center:
            return ""right""
        else:
            return ""left"""
18655269,Which room is it?," # returns the name of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"") # assumes the room is in the image"
7405860,Is it indoors?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it indoors?"")) # returns ""yes"" or ""no"" for yes or no respectively"
1705569,Does the pot on top of the stove look black?," # TODO: update this to not need the stove
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center > image_patch.horizontal_center: # TODO: update this to not need the stove
        return ""yes""
    return ""no"""
1028569,Are there both a cyclist and a helmet in the photo?," # is the helmet on the cyclist
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cycling"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet) # helmet is on the cyclist, so check together"
13954115,Are there any men to the left of the person in the crowd?," # assumes one patch for the crowd
    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""crowd"")
    # Question assumes only one crowd patch
    if len(crowd_patches) == 0:
        # If no crowd is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    for man_patch in image_patch.find(""man""):
        if man_patch.horizontal_center < crowd_patch.horizontal_center:
            return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1017626,Who is inside the train?," # assumes one train patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is inside the train?"") # train patch would include inside so keep it in the query"
7650014,Which place is it?," # not using ImagePatch
    return simple_qa(image, ""Which place is it?"") # assumes one patch"
15889871,What is the person to the left of the car doing?," # no need to return the patch, only the action
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the person to the left of the car doing?"") # crop would include the car so keep it in the query"
1310985,Is the yellow vehicle to the left of a lamp?," # yellow vehicle and lamp
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        lamp_patches = image_patch.find(""lamp"")
        # Question assumes only one lamp patch
        if len(lamp_patches) == 0:
            return ""no""
        for lamp_patch in lamp_patches:
            if yellow_vehicle_patch.horizontal_center < lamp_patch.horizontal_center:
                return ""yes""
    return ""no"""
646935,Which room is it?," # room patches
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    # Question assumes only one room patch
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""Which room is it?"")
    return room_patches[0].simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
9495263,Is the woman to the left or to the right of the man that wears a cap?," # this is a relation
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    man_patch = man_patches[0]
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        return ""left""
    cap_patch = cap_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right""
    return ""left"""
946016,Do you think the animal that is sitting-down is small or large?," # has a relation and a property, so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    animal_patch = animal_patches[0]
    if animal_patch.verify_property(""animal"", ""sitting-down""):
        return animal_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    else:
        return ""unknown"""
9617920,Do the garbage can and the pan have the same color?," # garbage can and pan
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        return ""no""
    garbage_can_patch = garbage_can_patches[0]
    pan_patch = pan_patches[0]
    return bool_to_yesno(garbage_can_patch.simple_query(""What color is the garbage can?"") == pan_patch.simple_query(""What color is the pan?""))"
3578781,Which kind of clothing is black?," # not an attribute of clothing
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        is_black = (clothing_patch.simple_query(""Is the clothing black?"") == ""yes"")
        if is_black:
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black color so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"") # crop would include the clothing so keep it in the query"
4695656,What is the lamp on?," # ask for the predicate of a relational verb (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lamp on?"") # crop would include the object being on so keep it in the query"
13696926,The homes that are to the left of the people have what color?," # -> str
    image_patch = ImagePatch(image)
    home_patches = image_patch.find(""home"")
    # Question assumes only one home patch
    if len(home_patches) == 0:
        # If no home is found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    for home_patch in home_patches:
        if home_patch.horizontal_center < image_patch.horizontal_center:
            return home_patch.simple_query(""What color are the homes to the left of the people?"")
    return home_patches[0].simple_query(""What color are the homes to the left of the people?"") # crop would include the people so keep it in the query"
16946079,What is on the wall?," # contains a relation (on, near, in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"") # contains a relation (on, near, in front of, etc), so ask directly"
18986542,Is the napkin on the right side?," # assumes only one patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    return bool_to_yesno(napkin_patches[0].horizontal_center > image_patch.horizontal_center)"
11513897,What appliance is the label on?," # label is the object, so check for existence first
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    # Question assumes only one label patch
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    return label_patches[0].simple_query(""What appliance is the label on?"") # crop would include the appliance so keep it in the query"
8240644,What is the color of the bird's tail?," # assuming only one patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What is the color of the bird's tail?"") # crop would include the tail so keep it in the query"
5245080,Is he to the right or to the left of the camera?," # image is the original image
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is he to the right or to the left of the camera?"") # image is the original image"
17800894,Are there both a window and a door in the picture?," # image is a 3D array
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
191027873,Where is the snowboard?," # to the left of, to the right of, above, below, near, next to, etc
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Where is the snowboard?"")
    return snowboard_patches[0].simple_query(""Where is the snowboard?"") # crop would include the object so keep it in the query"
1964079,Are the box and the paper the same color?," # needs to be improved
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    box_patch = box_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    return bool_to_yesno(box_patch.verify_property(""box"", ""color"") and paper_patch.verify_property(""paper"", ""color"")) # box and paper are the same object, so same property"
