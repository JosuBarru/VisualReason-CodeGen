sample_id,query,generated_code
13151559,Is the large hair both white and soft?," # assumes only one large hair patch
    image_patch = ImagePatch(image)
    large_hair_patches = image_patch.find(""large hair"")
    if len(large_hair_patches) == 0:
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    large_hair_patch = large_hair_patches[0]
    is_white = large_hair_patch.verify_property(""hair"", ""white"")
    is_soft = large_hair_patch.verify_property(""hair"", ""soft"")
    return bool_to_yesno(is_white and is_soft)"
18370956,Who is eating the cupcake?," # contains a relation (eating, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is eating the cupcake?"") # crop would include the cupcake so keep it in the query"
6436809,What is the guy wearing?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the guy wearing?"")"
117037,Which kind of food is to the right of the cabbage?," # type: ignore
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center > image_patch.find(""cabbage"")[0].horizontal_center:
            return food_patch.simple_query(""Which kind of food is to the right of the cabbage?"") # crop would include the cabbage so keep it in the query
    return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")"
758936,Who wears the cap?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who wears the cap?"") # crop would include the cap so keep it in the query"
111046440,Who is pointing?," # contains a relation (pointing at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is pointing?"") # crop would include the object pointed at, so keep it in the query"
15804389,Is the woman's hair short or long?," # image is the PIL Image object
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    hair_length = woman_patch.simple_query(""Is the woman's hair short or long?"")
    return hair_length"
11445636,The women are watching who?," # contains a relation (watching), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The women are watching who?"")"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?," # contains multiple objects and a relation, so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""dishwasher"", ""white"") and image_patch.verify_property(""gas stove"", ""white""))"
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?," # returns the name of the piece of furniture
    image_patch = ImagePatch(image)
    bed_sheet_patches = image_patch.find(""bed sheet"")
    # Question assumes only one bed sheet patch
    if len(bed_sheet_patches) == 0:
        # If no bed sheet is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_sheet_patch = bed_sheet_patches[0]
    for bed_sheet_patch in bed_sheet_patches:
        baby_patches = image_patch.find(""baby"")
        for baby_patch in baby_patches:
            if baby_patch.horizontal_center > bed_sheet_patch.horizontal_center:
                for object_patch in image_patch.find(""bed""):
                    if object_patch.verify_property(""bed"", ""color"") == bed_sheet_patch.verify_property(""bed sheet"", ""color""):
                        return object_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")"
758958,Is there either any red pillow or snowboard?," # asks for either a red pillow or a snowboard, so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""red pillow"") or image_patch.exists(""snowboard""))"
143816,Which place is it?," # could be any image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # contains a relation (in, at, on, etc), so ask directly"
13741513,Which side is the knife on?," # left or right
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    # Question assumes only one knife patch
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Which side is the knife on?"")
    if knife_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17829769,What is the computer mouse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?," # is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toddler holding?"")"
2951242,Is the gray shirt sleeveless or short sleeved?," # sleeveless or short sleeved
    image_patch = ImagePatch(image)
    gray_shirt_patches = image_patch.find(""gray shirt"")
    # Question assumes only one gray shirt patch
    if len(gray_shirt_patches) == 0:
        # If no gray shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    gray_shirt_patch = gray_shirt_patches[0]
    return gray_shirt_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"") # crop would include the sleeves so keep it in the query"
15241795,Is the tank top red?," # assumes only one tank top patch
    image_patch = ImagePatch(image)
    tank_top_patches = image_patch.find(""tank top"")
    if len(tank_top_patches) == 0:
        # If no tank top is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    return tank_top_patches[0].verify_property(""tank top"", ""red"")"
13885234,Which kind of animal is in front of the rocks?," # assumes one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""Which kind of animal is in front of the rocks?"") # crop would include the rocks so keep it in the query
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?," # contains a question, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any grapes?"")"
6455591,What type of furniture is white?," # assuming only one type of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of furniture is white?"") # crop would include the white so keep it in the query"
1033761,What is the blue clothing item?," # returns the first clothing item with blue color
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""blue""):
            return clothing_patch.simple_query(""What is the blue clothing item?"")
    return image_patch.simple_query(""What is the blue clothing item?"")"
17726504,Who is wearing the glasses?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query"
13112902,Is the woman wearing a bracelet?," # -> ImagePatch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    for woman_patch in woman_patches:
        is_wearing_bracelet = (woman_patch.simple_query(""Is the woman wearing a bracelet?"") == ""yes"")
        if is_wearing_bracelet:
            return woman_patch.simple_query(""Is the woman wearing a bracelet?"") # crop would include the bracelet so keep it in the query
    return ""no"""
698766,What is the food that is not white?," # contains a relation (not white, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the food that is not white?"")"
1332276,Are there both a cup and a bottle in the picture?," # object and object
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?," # returns the color of the glove
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?," # asks for the predicate of a relational verb (holding), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is holding the helmet?"")"
2143247,What is the name of the food to the left of the donut that looks little?," # contains a relation (left of) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")"
3767951,Is the clock to the right or to the left of the man on the left?," # left of the image, not the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    for clock_patch in clock_patches:
        if clock_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
    return ""left"""
17655180,What's the sticker on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see people to the right of the still car?"")"
7188981,Does the giraffe look adult?," # giraffe is not eating
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""adult""))"
16852802,Of what color are the pants?," # -> str
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"")"
9619158,What kind of watercraft is full of men?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of watercraft is full of men?"")"
3625225,On which side of the picture are the boats?," # left or right
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    if boat_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")"
19834124,What is the girl holding?," # no relation (holding) so go step by step
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    for girl_patch in girl_patches:
        # assume only one object is being held
        object_patches = image_patch.find(""object"")
        for object_patch in object_patches:
            if object_patch.horizontal_center > girl_patch.horizontal_center:
                return object_patch.simple_query(""What is the girl holding?"")
    # If no object is being held, query the image directly
    return image_patch.simple_query(""What is the girl holding?"")"
4617704,Does the toilet seat that is not down appear to be white and open?," # toilet seat is a complex object with multiple properties
    image_patch = ImagePatch(image)
    toilet_seats = image_patch.find(""toilet seat"")
    # Question assumes only one toilet seat patch
    if len(toilet_seats) == 0:
        # If no toilet seat is found, query the image directly
        return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")
    for toilet_seat in toilet_seats:
        is_down = toilet_seat.verify_property(""toilet seat"", ""down"")
        if not is_down:
            is_white = toilet_seat.verify_property(""toilet seat"", ""white"")
            is_open = toilet_seat.verify_property(""toilet seat"", ""open"")
            return bool_to_yesno(is_white and is_open)
    # If no toilet seat is not down, query the image directly
    return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")"
5899539,Are there any bottles or mugs that are not purple?," # bottle, mug, purple
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    mug_patches = image_patch.find(""mug"")
    # Question assumes only one bottle or mug patch
    is_bottle_or_mug = len(bottle_patches) > 0 or len(mug_patches) > 0
    if not is_bottle_or_mug:
        return ""no""
    for bottle_patch in bottle_patches:
        is_not_purple = bottle_patch.verify_property(""bottle"", ""purple"") == False
        if is_not_purple:
            return ""yes""
    for mug_patch in mug_patches:
        is_not_purple = mug_patch.verify_property(""mug"", ""purple"") == False
        if is_not_purple:
            return ""yes""
    return ""no"""
2631593,Which place is it?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?," # contains a relation (in the living room, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"") # contains a relation (in the living room, etc), so ask directly"
111054378,Is the small couch to the right or to the left of the bottle?," # this is the most complicated example
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    for couch_patch in couch_patches:
        bottle_patches = image_patch.find(""bottle"")
        # Question assumes only one bottle patch
        if len(bottle_patches) == 0:
            # If no bottle is found, query the image directly
            return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
        for bottle_patch in bottle_patches:
            if bottle_patch.horizontal_center < couch_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
9392411,Is the bottle to the right or to the left of the appliance on the left?," # image is the original image
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    for bottle_patch in bottle_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center < image_patch.horizontal_center:
                appliance_patch = appliance_patch.crop(0, 0, appliance_patch.width, appliance_patch.height)
                if bottle_patch.horizontal_center < appliance_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right""
    return ""right"" # if no appliance is on the left, the bottle is on the right"
16753829,What type of animal is sitting in the container in the bottom of the photo?," # image is a 3D array
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    for container_patch in container_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            # If no animal is found, query the image directly
            return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
        for animal_patch in animal_patches:
            if animal_patch.vertical_center < image_patch.vertical_center:
                return animal_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    # If no animal is found in the bottom of the image, query the image directly
    return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"") # crop would include the container and animal so keep it in the query"
1345482,What is that train in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"") # contains a relation so ask directly"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?," # does not work with multiple relations
    image_patch = ImagePatch(image)
    # contains multiple relations, so ask directly
    return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")"
459445,In which part is the silver device?," # e.g. phone
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""silver device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if device_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11786203,What is the man on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?," # ImagePatch
    image_patch = ImagePatch(image)
    is_brown_door = image_patch.exists(""brown door"")
    is_brown_chair = image_patch.exists(""brown chair"")
    return bool_to_yesno(is_brown_door or is_brown_chair)"
131031372,What is the napkin in?," # what is the napkin in? -> what is the napkin on?
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What is the napkin in?"")
    return napkin_patches[0].simple_query(""What is the napkin in?"") # crop would include the object so keep it in the query"
1241681,Are there any people behind the white dessert?," # assume the white dessert is on the top
    image_patch = ImagePatch(image)
    dessert_patches = image_patch.find(""white dessert"")
    # Question assumes only one dessert patch
    if len(dessert_patches) == 0:
        # If no dessert is found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    for dessert_patch in dessert_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.vertical_center < image_patch.vertical_center: # assume the white dessert is on the top
                return ""yes""
    return ""no"""
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")"
8553578,What is the Pikachu doing?," # Pikachu is the only image with a verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?"," # contains a relation (left, right), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the car, the left or the right?"") # contains a relation (left, right), so ask directly"
5546271,What is on the large mountains?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the large mountains?"") # contains a relation (on), so ask directly"
5107295,What is in the sky?," # sky is a relation (in the sky) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?," # fruit on watercraft
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of watercraft is the fruit on?"")"
1827218,Is the bottle in the bottom of the image?," # bottle and bottom are in the same image
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    for bottle_patch in bottle_patches:
        if bottle_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no"""
10938155,What color is the sky?," # todo: add to simple_query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?," # does the sail look white or red?
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    return sail_patches[0].best_text_match([""white"", ""red""]) # crop would include the sail so keep it in the query"
3662784,Do you see either any traffic lights or cars?," # -> bool
    image_patch = ImagePatch(image)
    is_traffic_light = image_patch.exists(""traffic light"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_traffic_light or is_car)"
15515711,Are there any girls to the right of the yellow helmet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""girl"") and image_patch.find(""yellow helmet"")[0].horizontal_center < image_patch.horizontal_center)"
6315316,Which kind of furniture is in front of the window?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What appliance is to the left of the faucet?"")"
41050828,What is the color of the jacket?," # returns the color of the jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"") # crop would include the jacket so keep it in the query"
610914,Is the green boat to the right or to the left of the wood house?," # left or right
    image_patch = ImagePatch(image)
    green_boat_patches = image_patch.find(""green boat"")
    # Question assumes only one green boat patch
    if len(green_boat_patches) == 0:
        # If no green boat is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    for green_boat_patch in green_boat_patches:
        wood_house_patches = image_patch.find(""wood house"")
        # Question assumes only one wood house patch
        if len(wood_house_patches) == 0:
            # If no wood house is found, query the image directly
            return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
        for wood_house_patch in wood_house_patches:
            if green_boat_patch.horizontal_center > wood_house_patch.horizontal_center:
                return ""right""
    return ""left"""
13158346,Is the woman in the bottom part of the picture?," # no return type
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
16318707,Are there either any colorful bikes or skateboards?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bike = image_patch.exists(""bike"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_bike or is_skateboard)"
2805654,Is the bag to the right or to the left of the bench?," # assumes only one bag and one bench
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    bench_patches = image_patch.find(""bench"")
    if len(bag_patches) == 0 or len(bench_patches) == 0:
        # If no bag or bench is found, query the image directly
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    bag_patch = bag_patches[0]
    bench_patch = bench_patches[0]
    if bag_patch.horizontal_center > bench_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15315607,What do you think is in the sky?," # sky
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?," # contains a relation (near), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the truck near the gas station?"")"
12140940,"What are the headphones on, a sofa or a desk?"," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")"
727533,Does the bun look brown and toasted?," # ImagePatch(image)
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    return bool_to_yesno(bun_patches[0].verify_property(""bun"", ""brown"") and bun_patches[0].verify_property(""bun"", ""toasted""))"
61044602,What is in the brown basket?," # contains a relation (in, on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the brown basket?"") # crop would include the basket so keep it in the query"
16827204,Is the marker different in color than the paper?," # assumes one marker and one paper
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    marker_patch = marker_patches[0]
    paper_patches = image_patch.find(""paper"")
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    paper_patch = paper_patches[0]
    return bool_to_yesno(marker_patch.verify_property(""marker"", ""color"") != paper_patch.verify_property(""paper"", ""color""))"
1284539,Is there a racket to the right of the man on the right side?," # query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")"
1257391,What place is this?," # todo: implement the place detection
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
16223517,What do you think is the color of the large device?," # what color is the large device?
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What do you think is the color of the large device?"")
    device_patch = device_patches[0]
    return device_patch.simple_query(""What is the color of the device?"")"
1024280,Does the shirt look long sleeved or sleeveless?," # can be used as is, no modification needed
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    return shirt_patches[0].simple_query(""Does the shirt look long sleeved or sleeveless?"") # crop would include the sleeves so keep it in the query"
2769463,Which kind of animal is lying in the chair?," # contains a relation (in, on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?," # crop would include the chair so keep it in the query
    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    # Question assumes only one white box patch
    if len(white_box_patches) == 0:
        # If no white box is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    for white_box_patch in white_box_patches:
        chair_patches = image_patch.find(""chair"")
        # Question assumes only one chair patch
        if len(chair_patches) == 0:
            return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
        chair_patch = chair_patches[0]
        crate_patches = image_patch.find(""crate"")
        # Question assumes only one crate patch
        if len(crate_patches) == 0:
            return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
        crate_patch = crate_patches[0]
        if white_box_patch.horizontal_center > chair_patch.horizontal_center and white_box_patch.horizontal_center > crate_patch.horizontal_center:
            return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?," # not used in the paper
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?," # object property question
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    # Question assumes only one flower pot patch
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return flower_pot_patches[0].verify_property(""flower pot"", ""clay"")"
191006281,Does the sky look clear and gray?," # clear and gray is not the same as clear gray, clear gray is a gray sky
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""clear"") and image_patch.verify_property(""sky"", ""gray""))"
681336,Do you see hats or gloves that are white?," # image is a numpy array
    image_patch = ImagePatch(image)
    hats_patches = image_patch.find(""hat"")
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one hat or gloves patch
    for hat_patch in hats_patches:
        if hat_patch.verify_property(""hat"", ""white""):
            return ""yes""
    for glove_patch in gloves_patches:
        if glove_patch.verify_property(""gloves"", ""white""):
            return ""yes""
    return ""no"""
1300368,What is on the cabinet that is to the right of the keyboard?," # assumes only one keyboard patch
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    keyboard_patches = image_patch.find(""keyboard"")
    if len(keyboard_patches) == 0:
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    for cabinet_patch in cabinet_patches:
        for keyboard_patch in keyboard_patches:
            if cabinet_patch.horizontal_center > keyboard_patch.horizontal_center:
                return cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")"
172394,What is the animal to the left of the tap called?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal to the left of the tap called?"")"
738176,Is the chair on the right?," # contains a relation (on the right), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the chair on the right?"")"
4194919,Is the child on the right of the picture?," # contains a relation (right, left, above, below, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the child on the right of the picture?"")"
3585327,Who is on the surfboard?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard?"")"
1711172,What size are the packages the candle is on top of?," # contains a relation (on top of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What size are the packages the candle is on top of?"")"
4353895,Who is on the snowboard on the right?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the snowboard on the right?"")"
17929304,What is the vehicle that is on the road?," # crop would include the road so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?," # What color is the crust of the bread?
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""What color is the crust of the bread?"")
    return bread_patches[0].simple_query(""What color is the crust of the bread?"") # crop would include the crust so keep it in the query"
5672474,Is the plate to the left or to the right of the beer on the left?," # beer is on the left
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    for plate_patch in plate_patches:
        beer_patches = image_patch.find(""beer"")
        for beer_patch in beer_patches:
            if beer_patch.horizontal_center < image_patch.horizontal_center:
                if plate_patch.horizontal_center < beer_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right""
    return ""left"" # if no beer is found on the left, assume the plate is to the left of the beer"
11341284,What is the pattern of the mattress on the street?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""boy"") and image_patch.find(""boy"")[0].horizontal_center < image_patch.horizontal_center)"
19203395,Is the white toilet paper to the right or to the left of the toilet?," # assumes one toilet paper patch and one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    toilet_patch = toilet_patches[0]
    toilet_paper_patches = image_patch.find(""white toilet paper"")
    if len(toilet_paper_patches) == 0:
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    for toilet_paper_patch in toilet_paper_patches:
        if toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
            return ""right""
    return ""left"""
1194938,Are there any airplanes in front of the building?," # airplane is to the left of the building
    image_patch = ImagePatch(image)
    airplane_patches = image_patch.find(""airplane"")
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Are there any airplanes in front of the building?"")
    for airplane_patch in airplane_patches:
        if airplane_patch.horizontal_center < building_patches[0].horizontal_center:
            return ""yes""
    return ""no"""
5350205,How clean is the road that the car is on the side of?," # returns ""clean"", ""dirty"", or ""unknown""
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    car_patch = car_patches[0]
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        return ""unknown""
    road_patch = road_patches[0]
    # crop would include the car so keep it in the query
    return road_patch.simple_query(""How clean is the road that the car is on the side of?"") # crop would include the car so keep it in the query"
4256016,"In which part of the picture is the black van, the bottom or the top?"," # image is a 3D array (height, width, channels)
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""black van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the right of the fence doing?"")"
16471124,Does the horse have a different color than the boot?," # Does the horse have a different color than the boot?
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    horse_color = horse_patches[0].simple_query(""What is the color of the horse?"")
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    boot_color = boot_patches[0].simple_query(""What is the color of the boot?"")
    return bool_to_yesno(horse_color != boot_color)"
958247,Is the mouse to the right of a chair?," # asks for the predicate of a relational verb (right of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the mouse to the right of a chair?"")"
11179512,The basket made of plastic is what color?," # execute_command is a reserved function name in Python
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    for basket_patch in basket_patches:
        if basket_patch.simple_query(""Is the basket made of plastic?"") == ""yes"":
            return basket_patch.simple_query(""What is the color of the basket?"")
    return ""no"" # if no basket is made of plastic"
8816272,Do you see any elephant to the left of the bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")"
11168592,What is the animal in front of the lamp?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?," # contains a relation (wearing, holding, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the jacket?"") # crop would include the jacket so keep it in the query"
7398502,What is the food to the left of the girl in the bottom of the photo?," # a multi-step query
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    girl_patch = girl_patches[0]
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < girl_patch.horizontal_center and food_patch.vertical_center < image_patch.vertical_center:
            return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")"
5145864,What is the device that the camera is in front of?," # contains a relation (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that the camera is in front of?"") # contains a relation (in front of), so ask directly"
788143,Is the man on the surfboard?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the surfboard?"") # crop would include the surfboard so keep it in the query"
15854501,What device has the same color as the device in the box?," # a box is not a device
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device has the same color as the device in the box?"")"
3228067,What is the child wearing?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child wearing?"")"
6817336,Is the blue sky behind a cathedral?," # blue sky is not in the query because it's not a relational verb
    image_patch = ImagePatch(image)
    blue_sky_patches = image_patch.find(""blue sky"")
    # Question assumes only one blue sky patch
    if len(blue_sky_patches) == 0:
        # If no blue sky is found, query the image directly
        return image_patch.simple_query(""Is the blue sky behind a cathedral?"")
    for blue_sky_patch in blue_sky_patches:
        cathedral_patches = image_patch.find(""cathedral"")
        for cathedral_patch in cathedral_patches:
            if blue_sky_patch.horizontal_center < cathedral_patch.horizontal_center:
                return ""yes""
    return ""no"""
6347271,"In which part of the image is the yellow pepper, the bottom or the top?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
296230,What animal is the woman feeding?," # contains a relation (feeding), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the woman feeding?"")"
3427727,On which side is the bucket?," # returns left or right
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    if bucket_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
31050314,Is the small chimney in the bottom part of the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"") # crop would include the chimney so keep it in the query"
3503396,Are the pants purple?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the pants purple?"")"
11742862,Which kind of furniture is to the right of the paper towels?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")"
5891809,What kind of furniture is gray?," # Gray is not a property of furniture, so it is assumed to be a property of the object (furniture)
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    return furniture_patches[0].simple_query(""What kind of furniture is gray?"") # crop would include the gray color so keep it in the query"
5370528,Is the hair white and long?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    return bool_to_yesno(person_patches[0].verify_property(""hair"", ""white"") and person_patches[0].verify_property(""hair"", ""long""))"
781153,Do you see trains near the lamp post that looks white?," # image is RGB
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"") # crop would include the lamp post so keep it in the query"
5543456,Is the container to the left of the person that wears bracelets?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")"
163134,What do you think is on the roof?," # assumes one patch for each object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?," # is the shoe brown or white?
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""brown"", ""white""]) # crop would include the shoe so keep it in the query"
5511395,What is wrapped in paper?," # paper is assumed to be on top of object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wrapped in paper?"")"
5611256,Are there any couches in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch"")) # returns yes or no"
1162826,The man is in what?," # uses a relation (in)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""The man is in what?"")"
81020685,Which color is the small house?," # image is a batch of images
    image_patch = ImagePatch(image[0]) # select the first image
    small_patches = image_patch.find(""small house"")
    # Question assumes only one small house patch
    if len(small_patches) == 0:
        # If no small house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    return small_patches[0].simple_query(""What color is the small house?"") # crop would include the house so keep it in the query"
19640724,Who is in the bathroom?," # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"")"
289960,Do you see a racket to the right of the boy that is looking at the tie?," # assumes only one boy and one tie
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    for racket_patch in racket_patches:
        boy_patches = image_patch.find(""boy"")
        tie_patches = image_patch.find(""tie"")
        for boy_patch in boy_patches:
            for tie_patch in tie_patches:
                if boy_patch.horizontal_center < tie_patch.horizontal_center and tie_patch.horizontal_center < racket_patch.horizontal_center:
                    return ""yes""
    return ""no"""
9957748,Does the hair appear to be long and brown?," # assuming only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        return image_patch.simple_query(""Does the hair appear to be long and brown?"")
    hair_patch = hair_patches[0]
    return bool_to_yesno(hair_patch.verify_property(""hair"", ""brown"") and hair_patch.verify_property(""hair"", ""long""))"
21031610,What is the shoe that looks black and white resting on?," # contains a relation (resting on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?," # assumes only one glass patch
    image_patch = ImagePatch(image)
    glass_patch = image_patch.find(""glass"")[0]
    return glass_patch.simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?," # returns a boolean
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    animal_patches = image_patch.find(""animal"")
    # Question assumes one pillow patch and one animal patch
    if len(pillow_patches) == 0 or len(animal_patches) == 0:
        # If no pillow or animal is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    white_pillow_patch = pillow_patches[0]
    black_animal_patch = animal_patches[0]
    if white_pillow_patch.vertical_center > black_animal_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
457770,What kind of clothing is striped?," # clothing
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""striped""):
            return clothing_patch.simple_query(""What kind of clothing is striped?"")
    return ""unknown"""
12603153,Are the child's eyes blue and open?," # does not require any arguments
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    child_patch = child_patches[0]
    return bool_to_yesno(child_patch.verify_property(""child"", ""blue"") and child_patch.verify_property(""child"", ""eyes open""))"
9480973,What is located on top of the tub?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is located on top of the tub?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8399764,Is the fork to the right or to the left of the white plate?," # image is the image
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    for fork_patch in fork_patches:
        white_plate_patches = image_patch.find(""white plate"")
        for white_plate_patch in white_plate_patches:
            if fork_patch.horizontal_center > white_plate_patch.horizontal_center:
                return ""right""
            elif fork_patch.horizontal_center < white_plate_patch.horizontal_center:
                return ""left""
    return ""right"" # if no white plate is found, fork is right of it"
13420253,On which side of the photo is the chair?," # left or right
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    if chair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?," # assumes one object of interest
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    if len(label_patches) == 0:
        return image_patch.simple_query(""What is the label on?"")
    return label_patches[0].simple_query(""What is the label on?"")"
3322787,What bird is to the left of the person that is wearing a shirt?," # assume only one bird and one person wearing a shirt
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    shirt_patch = shirt_patches[0]
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    bird_patch = bird_patches[0]
    if bird_patch.horizontal_center < shirt_patch.horizontal_center:
        return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")"
6399594,On which side is the man?," # left or right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    return ""left"" if man_patch.horizontal_center < image_patch.horizontal_center else ""right"""
6930120,Is the glass bowl on the right or on the left?," # left and right are swapped in the query
    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    # Question assumes only one glass_bowl patch
    if len(glass_bowl_patches) == 0:
        # If no glass_bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    if glass_bowl_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
12619961,What vehicles are to the left of the taxi?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicles are to the left of the taxi?"")"
13362315,Is the basket on the shelf black and empty?," # contains a relation (on, next to, etc) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the basket on the shelf black and empty?"")"
3830854,What is the animal that is standing next to the donkey that is standing in the hay?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")"
18382324,Is this a bed or a table?," # assuming only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a bed or a table?"")"
18104571,"Which animal is that, a bird or a cat?"," # object detection and classification
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    return animal_patches[0].best_text_match([""bird"", ""cat""])"
2913379,Do you see any fence or pot?," # returns a boolean
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)"
9294271,What is in front of the fence the zebra is kept in?," # zebra is kept in a fence
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"") # crop would include the fence so keep it in the query"
10741434,What is the vegetable that is on top of the plate called?," # contains a relation (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")"
765962,Where is the car?," # where is the car?
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Where is the car?"")
    return car_patches[0].simple_query(""Where is the car?"")"
12399262,Is there either a yellow truck or airplane?," # assumes the image is a 3D image
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)"
13964213,Is the man on the left of the photo?," # crop would include the man so keep it in the query
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
16171369,What is covered in the snow?," # only works if the snow is in the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?," # left or right of the center of the image
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""plastic bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    if bottle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5858491,Do you see any ropes on the fence that is on the left of the picture?," # assumes the fence is on the left of the image
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"") # crop would include the fence so keep it in the query"
17834539,Are there any lamps in the scene?," # -> bool
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp""))"
15658176,Who is wearing a helmet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a helmet?"")"
14372400,Does that coat have red color?," # returns yes or no
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red"")) # crop would include the coat so keep it in the query"
411886,Are there any curtains or blankets in this scene?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?," # contains a relation (on, next to, above, below, etc) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")"
51039491,Is the fence black or red?," # assuming only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    fence_patch = fence_patches[0]
    return fence_patch.best_text_match([""black"", ""red""])"
7425912,What animal is standing in the field?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is standing in the field?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13136338,What animal is in front of the dog which is to the right of the bird?," # Contains a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")"
3775066,Which color are the cabinets in the bottom of the picture?," # assumes only one cabinet
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinets"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.vertical_center < image_patch.vertical_center:
            return cabinet_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    return cabinet_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")"
17206239,Is the happy girl to the right of a player?," # asks for the predicate of a relational verb (to the right of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the happy girl to the right of a player?"")"
2992517,"What piece of furniture is not wooden, the table or the chair?"," # not tested
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    chair_patches = image_patch.find(""chair"")
    for table_patch in table_patches:
        if table_patch.verify_property(""table"", ""wooden""):
            return ""table""
    for chair_patch in chair_patches:
        if not chair_patch.verify_property(""chair"", ""wooden""):
            return ""chair""
    return ""table"""
1827558,Which side of the image is the kettle on?," # assume the image is centered
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    kettle_patch = kettle_patches[0]
    if kettle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2785208,Where is the man?," # crop would include the man, so keep it in the query
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    return man_patches[0].simple_query(""Where is the man?"")"
6623967,Is the baby near the countertop chewing a computer mouses?," # contains a relation (near, on, etc) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouse?"") # crop would include the countertop so keep it in the query"
12804807,Is the small bottle open or closed?," # assuming only one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    bottle_patch = bottle_patches[0]
    return bottle_patch.simple_query(""Is the bottle open or closed?"") # crop would include the cap so keep it in the query"
18437691,Is the clock small or large?," # asks for a property, so go step by step
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    return clock_patches[0].simple_query(""Is the clock small or large?"")"
9482318,Are there either any glasses or bottles in this photo?," # assume one object patch per query
    image_patch = ImagePatch(image)
    is_glasses = image_patch.exists(""glasses"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glasses or is_bottle)"
12362819,Is the sky blue or dark?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue or dark?"")"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")"
1416636,Are there both bridges and chandeliers in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?"," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    horizontal_center = car_patch.horizontal_center
    if horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
6110985,Is there any plate or orange in the photo?," # assumes one image patch
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?," # returns a boolean
    image_patch = ImagePatch(image)
    return image_patch.exists(""door"")"
13562221,What's the bear on?," # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the bear on?"")"
9536851,Is the woman in front of the trees holding scissors?," # is this a relational verb?
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")"
9682405,What is on the machine?," # assumes only one machine patch
    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    if len(machine_patches) == 0:
        return image_patch.simple_query(""What is on the machine?"")
    return machine_patches[0].simple_query(""What is on the machine?"") # crop would include the machine so keep it in the query"
8649435,What is on the white wall?," # contains a relation (on, in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""logo"", ""red""))"
14301289,What type of vehicle is to the left of the white vehicle?," # contains a relation (left of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"") # crop would include the vehicle so keep it in the query"
523976,Which kind of vehicle is large?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vehicle is large?"")"
3423213,Who is in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18107197,Is the ottoman to the right or to the left of the brown chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"") # contains a relation so ask directly"
5716578,Is there a laptop on the bed near the magazines?," # contains a relation (near, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"") # crop would include the bed so keep it in the query"
8215791,Is the porcelain toilet to the left or to the right of the small trash can?," # assumes only one patch of the object
    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    # Question assumes only one porcelain toilet patch
    if len(porcelain_toilet_patches) == 0:
        # If no porcelain toilet is found, query the image directly
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    for porcelain_toilet_patch in porcelain_toilet_patches:
        small_trash_can_patches = image_patch.find(""small trash can"")
        # Question assumes only one small trash can patch
        if len(small_trash_can_patches) == 0:
            return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
        for small_trash_can_patch in small_trash_can_patches:
            if porcelain_toilet_patch.horizontal_center < small_trash_can_patch.horizontal_center:
                return ""left""
    return ""right"""
17528455,What is in front of the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?," # ImagePatch(image)
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"")
    goggles_patch = goggles_patches[0]
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one gloves patch
    if len(gloves_patches) == 0:
        return ""no""
    gloves_patch = gloves_patches[0]
    goggles_color = goggles_patch.simple_query(""What color are the goggles?"")
    gloves_color = gloves_patch.simple_query(""What color are the gloves?"")
    return bool_to_yesno(goggles_color != gloves_color)"
947724,Is there any purple pillow or kite in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""purple pillow"") or image_patch.exists(""kite"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5679522,"What are the people to the right of the man doing, standing or sitting?"," # to the right of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > man_patch.horizontal_center:
            return person_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"") # if no person is to the right of the man, query the image directly"
15492262,Which kind of furniture is white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is white?"")"
151032547,Is the bear on the right side?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the bear on the right side?"")"
5698674,Are there either any planters or benches?," # What is the type of object in the center of the image?
    image_patch = ImagePatch(image)
    is_planter = image_patch.exists(""planter"")
    is_bench = image_patch.exists(""bench"")
    return bool_to_yesno(is_planter or is_bench)"
19397103,What is the person that is standing staring at?," # contains a relation (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person that is standing staring at?"")"
11630681,What is the color of the necklace?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the necklace?"")"
248245,Is the table to the left or to the right of the fence?," # assumes only one table and one fence patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    fence_patches = image_patch.find(""fence"")
    if len(table_patches) == 0 or len(fence_patches) == 0:
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    if table_patches[0].horizontal_center < fence_patches[0].horizontal_center:
        return ""left""
    else:
        return ""right"""
837033,Are there round windows or doors?," # -> bool
    image_patch = ImagePatch(image)
    is_round_window = image_patch.exists(""round window"")
    is_round_door = image_patch.exists(""round door"")
    return bool_to_yesno(is_round_window or is_round_door)"
5249150,Are there any bears or napkins in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vehicle is to the left of the person?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
61006749,Who is dressed in pink?," # image is a PIL Image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is dressed in pink?"")"
6122955,Does the pillow have yellow color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return bool_to_yesno(pillow_patches[0].verify_property(""pillow"", ""yellow""))"
6861738,Is the old woman to the right or to the left of the faucet?," # contains a relation (left, right, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")"
15833048,Which kind of animal is on the road?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is on the road?"")"
9524339,What animal is large?," # returns a list of strings
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""large""):
            return animal_patch.simple_query(""What animal is large?"")
    return [] # if no animal is large, return an empty list"
18255749,How clean are the sheets the pillow is to the right of?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheet_patches = image_patch.find(""sheets"")
    if len(sheet_patches) == 0:
        # If no sheets are found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    for sheet_patch in sheet_patches:
        if sheet_patch.horizontal_center > pillow_patch.horizontal_center:
            return sheet_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    # If no sheets are found to the right of the pillow, query the pillow directly
    return pillow_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")"
19797097,What's the man wearing?," # what is the man wearing?
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"") # crop would include the clothing so keep it in the query"
6899090,Is the man to the right or to the left of the appliance that looks white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")"
3357701,Does the dog to the right of the other dog have white color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")"
2829418,What's the girl holding?," # assumes one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What's the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What's the girl holding?"") # crop would include the girl so keep it in the query"
15930109,Which kind of vehicle is blue?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vehicle is blue?"")"
1525382,What type of vegetable is on the food with the cheese?," # ask for the object of a relational verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")"
8548980,Are there either players or hand soaps?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?"," # image is a 3D array
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    sandwich_patches = image_patch.find(""sandwich"")
    croissant_patches = image_patch.find(""croissant"")
    for sandwich_patch in sandwich_patches:
        if not sandwich_patch.verify_property(""sandwich"", ""made""):
            return ""sandwich""
    for croissant_patch in croissant_patches:
        if not croissant_patch.verify_property(""croissant"", ""made""):
            return ""croissant""
    return ""sandwich"" # default return value"
6423906,Which kind of food is on the plate?," # contains a relation (on the plate), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of food is on the plate?"") # crop would include the plate so keep it in the query"
1993231,Are the animals in the image of different types?," # different types -> multiple types
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes multiple animal patches
    if len(animal_patches) < 2:
        return ""no""
    for i in range(len(animal_patches)):
        for j in range(i+1, len(animal_patches)):
            if animal_patches[i].best_text_match([""dog"", ""cat"", ""horse""]) != animal_patches[j].best_text_match([""dog"", ""cat"", ""horse""]):
                return ""yes""
    return ""no"""
13949656,Are there any people to the left of the tray?," # contains a relation (left, right, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""person"") and image_patch.find(""person"")[0].horizontal_center < image_patch.find(""tray"")[0].horizontal_center)"
184032,Does the fresh pineapple appear to be ripe?," # in this case the answer is not related to the image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""fresh pineapple"", ""ripe"")) # property is related to the image"
9392591,Are there chairs or smoothies?," # ImagePatch image
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
9896138,Are there any boxes to the left of the screen in the picture?," # image is a PIL Image object
    image_patch = ImagePatch(image)
    boxes_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(boxes_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in boxes_patches:
        if box_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1400333,What do you think is the man on?," # contains a relation (on) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?," # assuming only one boot patch
    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    boot_patch = boot_patches[0]
    return boot_patch.best_text_match([""white"", ""orange""]) # crop would include the color so keep it in the query"
3659880,Does the wood boat have silver color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""wood boat"", ""silver"")) # wood boat is the object and silver is the property"
1827802,Is the red pot on the appliance to the right of the mixer?," # uses ImagePatch
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    red_pot_patch = red_pot_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    appliance_patch = appliance_patches[0]
    mixer_patches = image_patch.find(""mixer"")
    # Question assumes only one mixer patch
    if len(mixer_patches) == 0:
        # If no mixer is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    mixer_patch = mixer_patches[0]
    if appliance_patch.horizontal_center > mixer_patch.horizontal_center:
        return bool_to_yesno(red_pot_patch.horizontal_center > mixer_patch.horizontal_center)
    return ""no"""
14809102,The phone that is in front of the camera is of what color?," # contains a relation (in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")"
61001545,What type of food is to the left of the silver spoon?," # contains a relation (left, right, above, below, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"") # contains a relation (left, right, above, below, etc), so ask directly"
799463,Are there both a window and a door in the picture?," # boolean query
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
11260725,Does the water have small size and white color?," # not used
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""water"", ""small"") and image_patch.verify_property(""water"", ""white""))"
2397653,Are there any fences that are white?," # -> bool
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return bool_to_yesno(image_patch.exists(""white fence""))
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""yes""
    return ""no"""
1554603,Who is holding the animal?," # assumes only one holding patch and one animal patch
    image_patch = ImagePatch(image)
    holding_patches = image_patch.find(""holding"")
    animal_patches = image_patch.find(""animal"")
    if len(holding_patches) == 0 or len(animal_patches) == 0:
        # If no holding or animal is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    holding_patch = holding_patches[0]
    animal_patch = animal_patches[0]
    return holding_patch.simple_query(""Who is holding the animal?"") # crop would include the animal so keep it in the query"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?," # contains a relation (right of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")"
8988476,What kind of furniture is presented in this photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?," # the query asks about the man with the backpack, not the backpack itself
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center > man_patch.horizontal_center:
            return backpack_patch.simple_query(""What is the man with the backpack holding?"")
    return image_patch.simple_query(""What is the man with the backpack holding?"")"
91058050,Are there both mouse pads and computer mice in the photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_computer_mouse = image_patch.exists(""computer mouse"")
    return bool_to_yesno(is_mouse_pad and is_computer_mouse)"
1972064,Is the person in front of the tree wearing jeans?," # contains a relation (in front of) and a verb (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")"
167162,Is there a bike to the right of the purse that is to the right of the woman?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")"
1695388,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?," # bottom
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    # Question assumes only one woman patch and one man patch
    if len(woman_patches) == 0 or len(man_patches) == 0:
        # If no woman or man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    woman_patch = woman_patches[0]
    man_patch = man_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16921984,What is the bent man to the right of the other men doing?," # assumes one bent man patch and one man patch
    image_patch = ImagePatch(image)
    bent_man_patch = image_patch.find(""bent man"")[0]
    man_patch = image_patch.find(""man"")[0]
    return bent_man_patch.simple_query(""What is the bent man to the right of the man doing?"") # crop would include the man so keep it in the query"
12175564,What animal are the men to the right of the girl leading?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal are the men to the right of the girl leading?"") # crop would include the girl so keep her in the query"
1219606,On which side of the image is the house?," # image is the input image
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1770499,Is the black suitcase to the right or to the left of the person on the left?," # left of the person on the left means right of the leftmost person
    image_patch = ImagePatch(image)
    suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one suitcase patch
    if len(suitcase_patches) == 0:
        # If no suitcase is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    suitcase_patch = suitcase_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < image_patch.horizontal_center: # leftmost person
            if suitcase_patch.horizontal_center > person_patch.horizontal_center:
                return ""right""
    return ""left"""
5282406,Is the pot to the left of a chair?," # no image parameter for simplicity
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    for pot_patch in pot_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if chair_patch.horizontal_center > pot_patch.horizontal_center:
                return ""yes""
    return ""no"""
10914401,Where are the people?," # crop would include people so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the people?"")"
1919722,What animal is eating the grass?," # contains a relation (eating), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is eating the grass?"")"
9681008,Who is wearing a helmet?," # helmet
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a helmet?"")"
16861675,Who is on the surfboard in the middle of the photo?," # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")"
10947426,What is the color of the lizard beside the banana?," # assumes one banana and one lizard
    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    # Question assumes only one lizard patch
    if len(lizard_patches) == 0:
        # If no lizard is found, query the image directly
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    for lizard_patch in lizard_patches:
        banana_patches = image_patch.find(""banana"")
        for banana_patch in banana_patches:
            if lizard_patch.horizontal_center > banana_patch.horizontal_center:
                return lizard_patch.simple_query(""What is the color of the lizard beside the banana?"")
    # If no lizard is beside the banana, query the image directly
    return image_patch.simple_query(""What is the color of the lizard beside the banana?"")"
18200684,Is the wine glass in the top or in the bottom part?," # contains a relation (on top of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")"
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?," # contains a relation (left, middle, right, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"") # contains a relation (left, middle, right, etc), so ask directly"
171012637,Is the teddy bear to the right of a suitcase?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
19861372,Is the woman's hair long or short?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""Is the woman's hair long or short?"") # crop would include the woman so keep it in the query"
623889,Are both the television and the armchair the same color?," # only one command here
    image_patch = ImagePatch(image)
    is_tv_red = image_patch.exists(""television"") and not image_patch.verify_property(""television"", ""red"")
    is_armchair_red = image_patch.exists(""armchair"") and not image_patch.verify_property(""armchair"", ""red"")
    return bool_to_yesno(is_tv_red and is_armchair_red)"
4917605,Is the shoe white or brown?," # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
91055143,What is on the table?," # returns the top object on the table
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    table_patch = table_patches[0]
    return table_patch.simple_query(""What is on the table?"") # crop would include the table so keep it in the query"
5430643,What do you think sits on the plate to the left of the tomato?," # contains a relation (left, right, on top of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")"
523936,Is the woman in the top part of the picture?," # no query
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    if woman_patches[0].vertical_center > image_patch.vertical_center:
        return ""no""
    else:
        return ""yes"""
3189548,Is there a bottle on the nightstand that is on the bed?," # contains a relation (on the nightstand that is on the bed), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")"
14292161,The pot is of which color?," # has a relation (next to, above, below, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The pot is of which color?"")"
17495150,"What device is black, the microphone or the laptop?"," # uses relation to find the device
    image_patch = ImagePatch(image)
    is_black_microphone = False
    is_black_laptop = False
    # Question assumes one microphone patch
    microphone_patches = image_patch.find(""microphone"")
    if len(microphone_patches) > 0:
        microphone_patch = microphone_patches[0]
        is_black_microphone = microphone_patch.verify_property(""microphone"", ""black"")
    # Question assumes one laptop patch
    laptop_patches = image_patch.find(""laptop"")
    if len(laptop_patches) > 0:
        laptop_patch = laptop_patches[0]
        is_black_laptop = laptop_patch.verify_property(""laptop"", ""black"")
    if is_black_microphone:
        return ""microphone""
    elif is_black_laptop:
        return ""laptop""
    else:
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")"
1521847,Is the cat on a desk?," # no relation
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Is the cat on a desk?"")
    return cat_patches[0].simple_query(""Is the cat on a desk?"")"
16465081,The man is holding what?," # assuming only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""The man is holding what?"")"
17387032,What is on the post?," # contains a relation (on) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")"
18906705,How big is the crowd?," # returns the number of people
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How big is the crowd?"")"
6157200,Does the sign on the pole have white color?," # execute_command
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign on the pole"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign on the pole is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    return bool_to_yesno(sign_patches[0].verify_property(""sign on the pole"", ""white"")) # crop would include the pole so keep it in the query"
16760226,What's the laptop in front of?," # contains a relation (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?," # returns size in feet
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    bed_patch = bed_patches[0]
    # assumes bed is a rectangle
    width = bed_patch.width / 100  # convert to feet
    height = bed_patch.height / 100  # convert to feet
    if width > height:
        return ""king""
    elif width < height:
        return ""queen""
    else:
        return ""twin"""
14143886,Where is the person with the luggage standing on?," # has a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the person with the luggage standing on?"")"
19872633,Are there either any fire extinguishers or pepper shakers?," # exists
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)"
12755010,Is the bottle to the right of a napkin?," # assumes one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    bottle_patch = bottle_patches[0]
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    for napkin_patch in napkin_patches:
        if napkin_patch.horizontal_center < bottle_patch.horizontal_center:
            return ""yes""
    return ""no"""
2747001,Are there any soaps or bombs?," # bomb is a common object name
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see baby giraffes or elephants?"")"
6898877,What is the sign on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"")"
15862812,What is the sticker on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sticker on?"")"
141031470,On which side of the image is the white towel?," # left or right
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    towel_patch = towel_patches[0]
    if towel_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
41026846,Who rides a motorcycle?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the bathtub the towel is on?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
7469617,Is the man to the left or to the right of the person that is to the left of the people?," # left of the people, not people
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    for man_patch in man_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
        for person_patch in person_patches:
            people_patches = image_patch.find(""people"")
            # Question assumes only one people patch
            if len(people_patches) == 0:
                # If no people is found, query the image directly
                return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
            people_patch = people_patches[0]
            if person_patch.horizontal_center < people_patch.horizontal_center:
                if man_patch.horizontal_center < person_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right""
    return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the"
64308,What's located on top of the soup?," # contains a relation (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?," # needs to be modified
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        return ""no""
    bench_patch = bench_patches[0]
    fence_patch = fence_patches[0]
    return bool_to_yesno(fence_patch.verify_property(""fence"", bench_patch.verify_property(""bench"", ""material""))) # crop would include the material so keep it in the query"
3196255,Are there helmets that are not white?," # helmet, helmet with face mask, helmet with visor
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmet_patches:
        is_not_white = helmet_patch.verify_property(""helmet"", ""white"") == False
        if is_not_white:
            return ""yes""
    return ""no"""
2992630,Is the bowl to the right or to the left of the man that is drinking?," # contains a relation (right of, left of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")"
513894,Is the person above the sand wearing glasses?," # image is assumed to be a PIL Image
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    person_patch = person_patches[0]
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    sand_patch = sand_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if person_patch.vertical_center > sand_patch.vertical_center and glasses_patch.horizontal_center > person_patch.horizontal_center:
        return ""yes""
    return ""no"""
14167599,Is the color of the life preserver the same as that of the house?," # contains a relation (same as, different from, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")"
18264755,How is the weather?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?," # modified to remove the second query
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the toilet not closed?"") == ""yes"":
            return animal_patch.simple_query(""What animal is looking into the toilet that is not closed?"")
    # If no animal is looking into a toilet that is not closed, pick the first animal
    return animal_patches[0].simple_query(""What animal is looking into the toilet that is not closed?"")"
8641613,Do you see any helmets in the picture that are not red?," # helmet
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.verify_property(""helmet"", ""red"") == False:
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?," # assumes one happy person
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    if len(happy_patches) == 0:
        return image_patch.simple_query(""What does the happy person hold?"")
    happy_patch = happy_patches[0]
    object_patches = happy_patch.find(""object"")
    if len(object_patches) == 0:
        return image_patch.simple_query(""What does the happy person hold?"")
    return object_patches[0].simple_query(""What does the happy person hold?"")"
8461507,Are there either tissue boxes or lamps in the picture?," # image is an array
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?," # which kind of animal is it?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is it?"")"
19102906,What type of drink is to the left of the plate?," # contains a relation (left of, right of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of drink is to the left of the plate?"")"
18315440,Is the sky cloudy and blue?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cloudy = image_patch.exists(""cloud"")
    is_blue = image_patch.exists(""blue"")
    return bool_to_yesno(is_cloudy and is_blue)"
453061,Is the fork on the right of the image?," # contains a relation (on the right of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the fork on the right of the image?"")"
71002567,"What is the broccoli on, a table or a nightstand?"," # contains a relation (on, next to, in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"") # crop would include the surface so keep it in the query"
17465089,Is the field green and small?," # not a verb so go step by step
    image_patch = ImagePatch(image)
    is_green = image_patch.verify_property(""field"", ""green"")
    is_small = image_patch.verify_property(""field"", ""small"")
    return bool_to_yesno(is_green and is_small)"
16150157,What is on the wall?," # contains a relation (on the wall), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?," # image is on the right
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    van_patch = van_patches[0]
    suv_patches = image_patch.find(""suv"")
    # Question assumes only one suv patch
    if len(suv_patches) == 0:
        # If no suv is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    suv_patch = suv_patches[0]
    if van_patch.horizontal_center < suv_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15101358,Is the girl to the left of the boy?," # crop would include the boy so keep it in the query
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    for girl_patch in girl_patches:
        for boy_patch in boy_patches:
            if girl_patch.horizontal_center < boy_patch.horizontal_center:
                return ""yes""
    return ""no"""
12785181,What animals are in the grass?," # Contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in the grass?"")"
348093,Are there both an apple and a bag in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)"
314181,Which sign is shown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which sign is shown?"")"
16275314,"On which side is the woman, the right or the left?"," # image is an ImagePatch
    image_patch = image
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    if woman_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
19535592,Who runs on the sand?," # ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who runs on the sand?"") # contains a relation (running on), so ask directly"
156886,Is there a giraffe near the bush?," # -> bool
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    giraffe_patch = giraffe_patches[0]
    bush_patches = image_patch.find(""bush"")
    # Question assumes only one bush patch
    if len(bush_patches) == 0:
        return ""no""
    for bush_patch in bush_patches:
        if giraffe_patch.horizontal_center > bush_patch.horizontal_center:
            return ""yes""
    return ""no"""
1756642,Which place is it?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
11177243,Who wears the shirt?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who wears the shirt?"") # crop would include the shirt so keep it in the query"
1972390,What type of animal is standing in the field?," # contains a relation (in the field), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal is standing in the field?"") # crop would include the field so keep it in the query"
14579439,Is the stuffed animal on the right?," # returns yes or no
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    if stuffed_animal_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
6645395,Is the gray building behind the passengers that are boarding the airplane?," # query directly as it contains a relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")"
19610200,Is the fence metallic?," # the fence is in the top right corner
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return bool_to_yesno(fence_patches[0].verify_property(""fence"", ""metallic""))"
5299471,What does the girl that to the left of the trashcan carry?," # assumes one trashcan patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    for girl_patch in girl_patches:
        trashcan_patches = image_patch.find(""trashcan"")
        for trashcan_patch in trashcan_patches:
            if trashcan_patch.horizontal_center > girl_patch.horizontal_center:
                return girl_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    return girl_patches[0].simple_query(""What does the girl that to the left of the trashcan carry?"") # default to the first girl patch"
7548203,Which kind of vegetable is on the pizza?," # needs to be called with a specific image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")"
91027737,On which side is the pan?," # left or right
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    if pan_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?," # contains a relation (above, below, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the black cars in the top part of the photo?"")"
6144031,Who is in the living room?," # living room is not a object, so go step by step
    image_patch = ImagePatch(image)
    living_room_patches = image_patch.find(""living room"")
    # Question assumes only one living room patch
    if len(living_room_patches) == 0:
        # If no living room is found, query the image directly
        return image_patch.simple_query(""Who is in the living room?"")
    for living_room_patch in living_room_patches:
        people_patches = image_patch.find(""person"")
        for people_patch in people_patches:
            if people_patch.horizontal_center > living_room_patch.horizontal_center:
                return people_patch.simple_query(""Who is in the living room?"")
    return image_patch.simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?," # assumes only one sink patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?," # bird is not in the image
    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?," # ImagePatch
    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return bool_to_yesno(is_bicycle or is_biker)"
844747,Are there both a pillow and a kitten in the image?," # Pillow is a library, so using Pillow ImagePatch
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)"
1104500,What kind of food is in the box?," # contains a relation (in, on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the food that is to the left of the kid called?"") # crop would include the kid so keep it in the query"
11820726,"What device is the desk in front of, a television or a printer?"," # contains a relation (in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")"
18114588,Do you see a helmet there?," # is there a helmet in the image?
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""helmet""))"
11950874,What animal is standing on the ground?," # asks for the subject of a relational verb (standing on the ground), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?," # contains a relation (left, right), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")"
16184942,Does that grass look brown and short?," # returns ""yes"" or ""no""
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Does that grass look brown and short?""))"
6312238,Is the hydrant to the left of the car?," # this function is only used for testing, not in the original code
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    # Question assumes only one hydrant patch
    if len(hydrant_patches) == 0:
        # If no hydrant is found, query the image directly
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    for hydrant_patch in hydrant_patches:
        car_patches = image_patch.find(""car"")
        # Question assumes only one car patch
        if len(car_patches) == 0:
            return image_patch.simple_query(""Is the hydrant to the left of the car?"")
        for car_patch in car_patches:
            if car_patch.horizontal_center > hydrant_patch.horizontal_center:
                return ""yes""
    return ""no"""
16646227,On which side of the picture is the gray car?," # right or left
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    gray_car_patch = gray_car_patches[0]
    horizontal_center = gray_car_patch.horizontal_center
    if horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?," # only works if there's one person wearing sneakers
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for ball_patch in ball_patches:
        person_patches = image_patch.find(""person wearing sneakers"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
        person_patch = person_patches[0]
        if ball_patch.horizontal_center > person_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
3443704,What is the woman wearing?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the woman wearing?"")"
19313572,What is the color of the tent to the left of the vehicles?," # returns the color of the tent
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    for tent_patch in tent_patches:
        vehicle_patches = image_patch.find(""vehicles"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > tent_patch.horizontal_center:
                return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    # If no vehicle is to the right of the tent, query the image directly
    return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")"
10885675,What is the toilet seat made of?," # is this really the best name for this function?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?," # query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is resting on the blanket?"")"
14561612,What color do you think the bikini that the woman is wearing is?," # the image is assumed to be the bikini
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")"
6587755,Are both the room and the bowl the same color?," # is the room and the bowl the same color?
    image_patch = ImagePatch(image)
    is_room = image_patch.exists(""room"")
    is_bowl = image_patch.exists(""bowl"")
    if not is_room or not is_bowl:
        return bool_to_yesno(is_room and is_bowl)
    room_patches = image_patch.find(""room"")
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one room and one bowl patch
    room_patch = room_patches[0]
    bowl_patch = bowl_patches[0]
    return bool_to_yesno(room_patch.verify_property(""room"", ""color"") == bowl_patch.verify_property(""bowl"", ""color""))"
4479543,Is the barn white or brown?," # returns the first object found that is a barn
    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    # Question assumes only one barn patch
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    return barn_patches[0].best_text_match([""white"", ""brown""]) # crop would include the barn so keep it in the query"
972522,Does the box look white or brown?," # image is the PIL Image object
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    box_patch = box_patches[0]
    return box_patch.best_text_match([""white"", ""brown""])"
3948528,What is the bowl made of?," # the bowl is not visible in the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bowl made of?"") # bowl is not visible so ask directly"
15724828,Is the bench in front of the rock gray or red?," # gray or red
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    for bench_patch in bench_patches:
        is_in_front_of_rock = bench_patch.horizontal_center > image_patch.horizontal_center
        if is_in_front_of_rock:
            return bench_patch.simple_query(""What color is the bench?"") # crop would include the rock so keep it in the query
    return ""gray"""
866459,On which side is the couch?," # left or right
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8614812,Is the person that is playing wearing shorts?," # asks for the predicate of a relational verb (playing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person that is playing wearing shorts?"")"
167438,What is wearing the ground?," # assumes one object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?," # contains a relation (made of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is wooden?"")"
1042377,Who is standing beside the person that is wearing a dress?," # contains a relation (next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?," # ->str
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?," # ski is a noun, so query directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How fat are the long skis?"")"
2211743,Is the sky clear or overcast?," # clear or overcast
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?," # is there a bottle to the left of the pencils in the bottom part of the image?
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
    for bottle_patch in bottle_patches:
        pencil_patches = image_patch.find(""pencil"")
        for pencil_patch in pencil_patches:
            if bottle_patch.horizontal_center < pencil_patch.horizontal_center and bottle_patch.vertical_center < image_patch.vertical_center:
                return ""yes""
    return ""no"""
15478302,Is there any dark door or window in the image?," # door and window are similar, so just ask for one
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Is there any dark door or window in the image?"")
    return bool_to_yesno(door_patches[0].verify_property(""door"", ""dark"")) # crop would include the door so keep it in the query"
18414234,Do you see either a knife or a chair in the picture?," # or just ""image""
    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)"
19779815,Is the book red or yellow?," # assumes only one book
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    return book_patches[0].best_text_match([""red"", ""yellow""])"
7257283,Are there men to the left of the picture?," # contains a relation (left, right, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""man"") and image_patch.find(""man"")[0].horizontal_center < image_patch.horizontal_center)"
6621625,On which side of the picture is the bench?," # has a relation (left, right, center) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the picture is the bench?"") # has a relation (left, right, center) so ask directly"
19311589,Are there both fences and horses in this picture?," # -> bool
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?," # assumes one person patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    for device_patch in device_patches:
        container_patches = image_patch.find(""container"")
        # Question assumes only one container patch
        if len(container_patches) == 0:
            # If no container is found, query the image directly
            return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
        for container_patch in container_patches:
            person_patches = image_patch.find(""person"")
            # Question assumes only one person patch
            if len(person_patches) == 0:
                # If no person is found, query the image directly
                return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
            for person_patch in person_patches:
                if device_patch.horizontal_center > container_patch.horizontal_center and container_patch.horizontal_center > person_patch.horizontal_center:
                    return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    return device_patches[0].simple_query(""What device is to the right of the container that the person is to the left of?"")"
171031333,Do you see blankets in the picture that are not black?," # -> bool
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Do you see blankets in the picture that are not black?"") == ""yes"")
    return bool_to_yesno(blanket_patches[0].verify_property(""blanket"", ""black"") == False)"
16695341,What is the fence made of?," # contains a relation (made of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bottle"") or image_patch.exists(""child""))"
5111363,Are there chairs or tables that are not blue?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    return bool_to_yesno(is_chair or is_table)"
9230971,Which place is it?," # contains a relation (in, to, from, near, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # contains a relation (in, to, from, near, etc), so ask directly"
132422,Does the hair have short length and white color?," # object, property
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    return bool_to_yesno(hair_patches[0].verify_property(""hair"", ""short"") and hair_patches[0].verify_property(""hair"", ""white""))"
4822200,Do you see any lettuce on the food with the meat?," # meat is assumed to be on the top of the food
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    return bool_to_yesno(lettuce_patches[0].vertical_center < image_patch.vertical_center)"
3726666,What device is to the left of the curtain that is to the left of the glasses?," # device, glasses, curtain
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")"
9954849,What kind of furniture is it?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is it?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
19409495,Are there any red trains or buses?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""red train"") or image_patch.exists(""red bus"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?," # contains a relation (left of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"") # contains a relation (left of, etc), so ask directly"
623393,"What type of clothing is tan, the hat or the vest?"," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")"
6436448,Is the color of the skirt the same as the scarf?," # and is the scarf on the left of the woman?
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(skirt_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    for skirt_patch in skirt_patches:
        for scarf_patch in scarf_patches:
            if skirt_patch.verify_property(""skirt"", ""color"") == scarf_patch.verify_property(""scarf"", ""color""):
                return ""yes""
    return ""no"""
3303313,Is the blanket under a cat?," # crop would include the cat so keep it in the query
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is the blanket under a cat?"")
    for blanket_patch in blanket_patches:
        cat_patches = image_patch.find(""cat"")
        for cat_patch in cat_patches:
            if cat_patch.horizontal_center < blanket_patch.horizontal_center:
                return ""yes""
    return ""no"""
443663,What color is the picture?," # needs to be a specific image type
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"") # needs to be a specific image type"
17267472,Is there any umbrella to the right of the man?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1885406,What is the toy on the bed?," # todo: add toy on bed
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toy on the bed?"") # contains a relation (on), so ask directly"
5557965,On which side is the bag?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    bag_patch = bag_patches[0]
    # Question assumes one bag patch
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?," # left or right
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    return ""right"" # right by default"
3196355,What does the batter hold?," # batter is a noun
    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    return batter_patches[0].simple_query(""What does the batter hold?"") # crop would include what the batter holds so keep it in the query"
14470748,Who wears a jacket?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who wears a jacket?"")"
16537736,Are there any houses behind the shrubs?," # assumes one shrub patch
    image_patch = ImagePatch(image)
    shrub_patches = image_patch.find(""shrub"")
    # Question assumes only one shrub patch
    if len(shrub_patches) == 0:
        # If no shrub is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    shrub_patch = shrub_patches[0]
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        return ""no""
    house_patch = house_patches[0]
    return bool_to_yesno(house_patch.horizontal_center > shrub_patch.horizontal_center)"
1129541,What piece of furniture is made of wood?," # -> str
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    return furniture_patches[0].simple_query(""What piece of furniture is made of wood?"") # crop would include the wood so keep it in the query"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?," # only one man wearing a hat
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is wearing a hat"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""left""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patches[0].horizontal_center:
            return ""right""
    return ""left"""
12416703,Where is that cat?," # x, y
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Where is that cat?"")
    return cat_patches[0].simple_query(""Where is that cat?"") # crop would include the cat so keep it in the query"
15603088,The animal to the right of the envelope is lying on what?," # assumes only one envelope and one animal to the right of it
    image_patch = ImagePatch(image)
    envelope_patches = image_patch.find(""envelope"")
    # Question assumes only one envelope patch
    if len(envelope_patches) == 0:
        # If no envelope is found, query the image directly
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    envelope_patch = envelope_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch to the right of the envelope
    if len(animal_patches) == 0:
        return ""no""
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > envelope_patch.horizontal_center:
            return animal_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    return ""no"""
5329077,Is the man on a bench?," # This is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on a bench?"")"
1945705,What kind of device is to the left of the device that looks silver and gray?," # execute_command is used to match the function signature
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")"
17520003,What vehicle is to the right of the pine tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the pine tree?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1259983,Who is wearing pants?," # no need to execute
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""pants""):
            return person_patch.simple_query(""Who is wearing pants?"")
    return image_patch.simple_query(""Who is wearing pants?"")"
6413378,Is there a black keyboard or camera?," # assume only one object type
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    for keyboard_patch in keyboard_patches:
        if keyboard_patch.verify_property(""keyboard"", ""black""):
            return ""yes""
    camera_patches = image_patch.find(""camera"")
    for camera_patch in camera_patches:
        if camera_patch.verify_property(""camera"", ""black""):
            return ""yes""
    return ""no"""
947305,Is the sunny water blue and high?," # high water level
    image_patch = ImagePatch(image)
    is_sunny = image_patch.simple_query(""Is the water sunny?"") == ""yes""
    is_blue = image_patch.simple_query(""Is the water blue?"") == ""yes""
    is_high = image_patch.simple_query(""Is the water high?"") == ""yes""
    return bool_to_yesno(is_sunny and is_blue and is_high)"
4367817,What type of animal in this scene is brown?," # -> str
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What type of animal is brown?"") == animal_patch.simple_query(""What type of animal is this?""):
            return animal_patch.simple_query(""What type of animal in this scene is brown?"")
    # If no animal is brown, query the image directly
    return image_patch.simple_query(""What type of animal in this scene is brown?"")"
15485572,What is the vegetable on the hot dog with the cheese?," # contains a relation (on top of, next to, in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")"
12661142,What is the appliance in the kitchen called?," # assumes only one appliance
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    if len(appliance_patches) == 0:
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    return appliance_patches[0].simple_query(""What is the appliance in the kitchen called?"") # crop would include the appliance so keep it in the query"
41012743,The arrow is on what?," # contains a relation (on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The arrow is on what?"") # crop would include the arrow so keep it in the query"
4777414,What color is the bicycle in the bottom of the photo?," # photo is assumed to be a vertical image
    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    # Question assumes only one bicycle patch
    if len(bicycle_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    for bicycle_patch in bicycle_patches:
        if bicycle_patch.vertical_center < image_patch.vertical_center:
            return bicycle_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    # If no bicycle is found at the bottom, query the image directly
    return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")"
1185988,What is the device on top of the table that is to the right of the trashcan?," # contains a relation (on top of, to the right of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")"
13582968,Was granite used to make that floor?," # contains a relation (made of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was granite used to make that floor?"")"
6235273,Are there women in the photo?," # ImagePatch(image)
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""woman"")) # 'woman' is the singular form, so 'women' is also correct"
5377974,What is the girl playing with?," # contains a relation (playing with), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the girl playing with?"")"
51037065,On which side of the image is the fridge?," # horizontal center
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    if fridge_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5299477,Which kind of bag does the girl carry?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    girl_patch = girl_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    for bag_patch in bag_patches:
        if bag_patch.horizontal_center < girl_patch.horizontal_center:
            return bag_patch.simple_query(""Which kind of bag does the girl carry?"")
    return bag_patches[0].simple_query(""Which kind of bag does the girl carry?"")"
15135617,Is the white dog on a bench?," # image is an ImagePatch
    image_patch = image
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog on a bench?"")
    for white_dog_patch in white_dog_patches:
        is_on_bench = (white_dog_patch.simple_query(""Is the dog on a bench?"") == ""yes"")
        return bool_to_yesno(is_on_bench)"
1111583,Is the male person to the right of a person?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the male person to the right of a person?"")"
12352269,Are there both windows and doors in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
15610844,What kind of place is shown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")"
11869032,Is the banana below a bird?," # contains a relation (above, below, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the banana below a bird?"")"
9878360,What color is the vehicle to the left of the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")"
481765,Are there either any buses or trains in the image?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes only one traffic_cone patch
    if len(traffic_cone_patches) == 0:
        return ""no""
    for traffic_cone_patch in traffic_cone_patches:
        if traffic_cone_patch.horizontal_center > man_patch.horizontal_center:
            return man_patch.simple_query(""Does the man wear a cap?"")
    return ""no"""
11981238,What is common to the blazer and the suit?," # assumes only one blazer and one suit
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one blazer patch and one suit patch
    if len(blazer_patches) == 0 or len(suit_patches) == 0:
        # If no blazer or no suit is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    blazer_patch = blazer_patches[0]
    suit_patch = suit_patches[0]
    common_properties = blazer_patch.verify_property(""blazer"", ""buttoned"") and suit_patch.verify_property(""suit"", ""buttoned"")
    if common_properties:
        return ""buttoned""
    else:
        return ""type"""
16245,Is the shirt white or green?," # contains a relation (wearing, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shirt white or green?"")"
2595103,"In which part of the image are the cars, the bottom or the top?"," # assuming only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    car_patch = car_patches[0]
    if car_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?"," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?," # table, banana, fruit
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    for banana_patch in banana_patches:
        if banana_patch.horizontal_center < image_patch.horizontal_center:
            return ""no""
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if fruit_patch.horizontal_center > banana_patch.horizontal_center:
                return ""yes""
    return ""no"""
6376614,What color is the car in the middle?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    return car_patches[0].simple_query(""What color is the car in the middle?"") # crop would include the car so keep it in the query"
712063,What's the lamp made of?," # contains a relation (made of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")"
9647343,What type of material is the patio made of?," # contains a relation (made of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?," # query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the clouds in the sky?"")"
9843309,Do the flowers look orange?," # assuming only one flower patch
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    if len(flower_patches) == 0:
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flower"", ""orange""))"
618996,Is there a chair or a bed in this image?," # Contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?," # contains a relation (left, right, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""truck"") and image_patch.simple_query(""Is the truck to the left of the umbrella?"") == ""yes"")"
867869,What color are the pants the man is wearing?," # returns the color of the pants the man is wearing
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return ""white""
    for pants_patch in pants_patches:
        if pants_patch.horizontal_center > man_patch.horizontal_center:
            return pants_patch.simple_query(""What color are the pants the man is wearing?"")
    return ""white"""
551601,Are there any pillows or chairs in the image?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""pillow"") or image_patch.exists(""chair""))"
10775785,Are there women to the left of the person with the bag?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there women to the left of the person with the bag?"") # contains a relation so ask directly"
5925408,What is the bike in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?," # assuming only one bed or desk in the query
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)"
13778498,What type of vehicle is behind the green tree?," # green tree is to the right of the vehicle
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"")"
41019603,What is the child standing on?," # contains a relation (standing on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?," # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?," # left or right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""left"" # default value
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?," # contains a relation (wearing a shirt), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?," # asks for the predicate of a relational verb (looks triangular), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?," # contains a relation (drinking), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?," # contains a relation (behind), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the building behind the tree white or brown?"")"
5749240,Are the glove and the undershirt both black?," # image is a PIL Image
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    undershirt_patches = image_patch.find(""undershirt"")
    if len(glove_patches) == 0 or len(undershirt_patches) == 0:
        # If no glove or undershirt is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    for glove_patch in glove_patches:
        for undershirt_patch in undershirt_patches:
            is_glove_black = glove_patch.verify_property(""glove"", ""black"")
            is_undershirt_black = undershirt_patch.verify_property(""undershirt"", ""black"")
            return bool_to_yesno(is_glove_black and is_undershirt_black)"
18573157,Is the juice in a cup?," # not using ImagePatch here
    image = Image.fromarray(image)
    return bool_to_yesno(find_in_image(image, ""juice"")[0].simple_query(""Is the juice in a cup?"") == ""yes"") # crop would include the cup so keep it in the query"
3445929,Is the brown horse on the right side of the photo?," # uses the ImagePatch class
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""brown horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    for horse_patch in horse_patches:
        if horse_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
16541709,Where is the grass?," # assumes only one patch of grass
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"")"
15764335,Are there any dogs on the tan sand?," # tan sand is not a property of the image itself
    image_patch = ImagePatch(image)
    is_dog = image_patch.exists(""dog"")
    is_tan_sand = image_patch.verify_property(""sand"", ""tan"") # tan sand is a property of the image
    return bool_to_yesno(is_dog and is_tan_sand)"
1478089,Are the door and the garage door made of the same material?," # material is a property
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    garage_door_patches = image_patch.find(""garage door"")
    # Question assumes only one door and one garage door patch
    if len(door_patches) == 0 or len(garage_door_patches) == 0:
        # If no door or garage door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_patch = door_patches[0]
    garage_door_patch = garage_door_patches[0]
    return bool_to_yesno(door_patch.verify_property(""door"", ""material"") == garage_door_patch.verify_property(""garage door"", ""material"")) # material is a property"
1250685,Was this picture taken in a bathroom or at a dining room?," # assuming the image is of a single room
    image_patch = ImagePatch(image)
    is_bathroom = image_patch.exists(""bathroom"")
    is_dining_room = image_patch.exists(""dining room"")
    if is_bathroom:
        return ""bathroom""
    elif is_dining_room:
        return ""dining room""
    else:
        return ""unknown"""
10436844,Is the zebra's nose soft and brown?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the zebra's nose soft and brown?"")"
10683765,Does the shirt have blue color?," # changed to a function
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""blue""))"
1593352,Do the draperies look white and striped?," # assume image is of draperies
    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""draperies"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    drapery_patch = drapery_patches[0]
    is_white = drapery_patch.verify_property(""draperies"", ""white"")
    is_striped = drapery_patch.verify_property(""draperies"", ""striped"")
    return bool_to_yesno(is_white and is_striped)"
16553304,Are the trunks both long and wide?," # assumes only one trunk patch
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    for trunk_patch in trunk_patches:
        is_long = trunk_patch.verify_property(""trunk"", ""long"")
        is_wide = trunk_patch.verify_property(""trunk"", ""wide"")
        if is_long and is_wide:
            return ""yes""
    return ""no"""
7165102,Is the car on the left of the photo?," # no simple_query
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the car on the left of the photo?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?," # contains a relation (and, but, or, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")) # crop would include the color so keep it in the query"
19279872,What is the man to the right of the helmet wearing?," # helmet and man are assumed to be at the same vertical level
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    helmet_patch = helmet_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > helmet_patch.horizontal_center:
        return man_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    return helmet_patch.simple_query(""What is the man to the right of the helmet wearing?"")"
4285513,What is the color of the floor?," # Returns the color of the floor
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor?"") # crop would include the floor so keep it in the query"
3974266,Do the trousers look tan?," # crop would include the trousers so keep it in the query
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan""))"
11595009,What are the devices to the right of the device that is to the right of the remote control?," # returns the first device to the right of the remote control
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""remote control"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    device_patch = device_patches[0]
    # assume only one device to the right of the remote control
    device_patches = image_patch.find(""device"")
    for device in device_patches:
        if device.horizontal_center > device_patch.horizontal_center:
            return device.simple_query(""What device is this?"")
    return device_patch.simple_query(""What device is this?"")"
6183000,Are there nightstands or beds?," # has a relation, so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""nightstand"") or image_patch.exists(""bed"")) # has a relation, so ask directly"
14143982,Is it an outdoors scene?," # TODO: implement
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an outdoors scene?"") # TODO: implement"
6123160,Are the speakers to the left of a Wii controller?," # assume only one speaker and one Wii controller
    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    wii_controller_patches = image_patch.find(""Wii controller"")
    # Question assumes only one speaker patch and one Wii controller patch
    if len(speaker_patches) == 0 or len(wii_controller_patches) == 0:
        # If no speaker or Wii controller is found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    speaker = speaker_patches[0]
    wii_controller = wii_controller_patches[0]
    return bool_to_yesno(speaker.horizontal_center < wii_controller.horizontal_center)"
3681634,Is the plastic fork in the top or in the bottom part of the photo?," # type: ignore
    image_patch = ImagePatch(image)
    plastic_fork_patches = image_patch.find(""plastic fork"")
    # Question assumes only one plastic fork patch
    if len(plastic_fork_patches) == 0:
        # If no plastic fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    if plastic_fork_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
13629530,What is the vehicle on the street?," # assuming only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle on the street?"")
    return vehicle_patches[0].simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?," # assumes only one man patch and one hat patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    hat_patches = image_patch.find(""hat"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    if len(hat_patches) == 0:
        return image_patch.simple_query(""What color is the hat the man is in?"")
    return hat_patches[0].simple_query(""What color is the hat the man is in?"") # crop would include the man so keep it in the query"
1849976,What vegetables are to the left of the spoon?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vegetables are to the left of the spoon?"")"
14827816,Is the statue made of bronze or stone?," # contains a relation (made of) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the statue made of bronze or stone?"")"
857204,What's the woman wearing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the woman wearing?"") # crop would include the clothing so keep it in the query"
2201105,Is the ball pink?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball pink?"")"
14616023,What piece of furniture are the cords in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?," # not necessary to return a string
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""black car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16184856,What is the striped animal called?," # striped animal
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the striped animal called?"")"
1479068,Is it outdoors?," # image is a numpy array
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it outdoors?"")) # assumes one object is outdoors"
16155046,Is the dry grass below a zebra?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the dry grass below a zebra?"")"
16515071,What is the person in the water wearing?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person in the water wearing?"") # crop would include the water so keep it in the query"
161015042,Who is wearing the goggles?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the goggles?"")"
19149868,What is pulled by the lady?," # contains a relation (pulling), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is pulled by the lady?"")"
5199994,What's the man wearing?," # returns the answer to ""What is the man wearing?""
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"") # crop would include the clothes so keep it in the query"
19184475,Are the man glasses on the left side of the image?," # glasses are not related to the man
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Are the glasses on the left side of the image?"")
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
7149602,Is the shirt orange or blue?," # changed to execute_command
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    return shirt_patches[0].best_text_match([""orange"", ""blue""]) # crop would include the shirt so keep it in the query"
19479555,What is the person to the right of the benches holding?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the right of the benches holding?"")"
19273393,Are there both a door and a window in this photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
6481656,What is the man doing?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    return man_patches[0].simple_query(""What is the man doing?"")"
13127703,What kind of drink is to the left of the bottle the woman is pouring?," # contains a relation (to the left of) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")"
2378018,What is the toilet in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"")"
8430841,Is the frisbee to the left of the guy?," # assumes one frisbee and one guy
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    guy_patches = image_patch.find(""guy"")
    if len(frisbee_patches) == 0 or len(guy_patches) == 0:
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    frisbee_patch = frisbee_patches[0]
    guy_patch = guy_patches[0]
    return bool_to_yesno(frisbee_patch.horizontal_center < guy_patch.horizontal_center)"
18616818,The man is watching who?," # contains a relation (watching), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is watching who?"")"
179526,Is the white dog behind a girl?," # assumes white dog is the only dog and there is only one girl
    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    for white_dog_patch in white_dog_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if girl_patch.horizontal_center > white_dog_patch.horizontal_center:
                return ""yes""
    return ""no"""
21018827,Is the river murky and calm?," # no relation between murky and calm so go step by step
    image_patch = ImagePatch(image)
    river_patches = image_patch.find(""river"")
    # Question assumes only one river patch
    if len(river_patches) == 0:
        # If no river is found, query the image directly
        return image_patch.simple_query(""Is the river murky and calm?"")
    river_patch = river_patches[0]
    is_murky = river_patch.verify_property(""river"", ""murky"")
    is_calm = river_patch.verify_property(""river"", ""calm"")
    return bool_to_yesno(is_murky and is_calm)"
3697449,Who is wearing a shirt?," # assumes only one image patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query"
3697807,Are there both a racket and a toothbrush in the image?," # assuming only one object of each type
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?," # returns the common property
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    sign_patch = sign_patches[0]
    common_property = car_patch.simple_query(""What do you and the sign have in common?"")
    return common_property"
11764476,Which place is it?," # contains a relation (in, at, on, etc) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # contains a relation (in, at, on, etc) so ask directly"
4903948,On what kind of furniture is the plate?," # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On what kind of furniture is the plate?"")"
61022361,What is the painting that is to the left of the clock hanging on?," # crop would include hanging on, so keep it in the query
    image_patch = ImagePatch(image)
    painting_patches = image_patch.find(""painting"")
    # Question assumes only one painting patch
    if len(painting_patches) == 0:
        # If no painting is found, query the image directly
        return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    for painting_patch in painting_patches:
        clock_patches = image_patch.find(""clock"")
        for clock_patch in clock_patches:
            if clock_patch.horizontal_center < painting_patch.horizontal_center:
                return painting_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    # If no painting is to the left of a clock, query the image directly
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")"
1527392,"What color is the fence, tan or black?"," # assuming only one fence
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    return fence_patches[0].best_text_match([""tan"", ""black""])"
19229351,Do you see both bowls and carrots?," # -> bool
    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)"
1297082,On which side is the silver fork?," # contains a relation (left, right), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the silver fork?"")"
16757832,Are there any blue helmets or napkins?," # query the image directly if no helmet or napkin is found
    image_patch = ImagePatch(image)
    is_helmet = image_patch.exists(""helmet"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_helmet or is_napkin)"
839816,"In which part of the photo is the racket, the top or the bottom?"," # asks for the predicate of a relational verb (above), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"") # assumes only one racket patch"
12385226,Is there a mirror in the bathroom?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""mirror"")) # bathroom is part of the query"
18720852,Are there either blankets or tents in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?," # contains a relation (left, right), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")"
19453453,Who is wearing a shirt?," # contains a relation (wearing a shirt), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?," # contains a relation (bottom, top), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")"
11737187,What is in front of the flowers that look red?," # uses the relation ""in front of"" and the predicate ""looks red""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the flowers that look red?"") # contains a relation and a predicate, so ask directly"
15710688,Is the shirt short sleeved or sleeveless?," # image is a 3D array
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    is_sleeveless = shirt_patch.verify_property(""shirt"", ""sleeveless"")
    return ""sleeveless"" if is_sleeveless else ""short sleeved"""
5533952,What are the white wires connected to?," # contains a relation (connected to), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the white wires connected to?"")"
11313555,"What type of furniture is that, a table or a nightstand?"," # crop would include the object so keep it in the query
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    return furniture_patches[0].best_text_match([""table"", ""nightstand""]) # crop would include the object so keep it in the query"
10508893,What animals are in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in front of the trees?"")"
14501997,What is the gate made of?," # contains a relation (made of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?," # returns a string of the color
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    device_patch = device_patches[0]
    # Check if the device is on top of a table
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        return image_patch.simple_query(""What color is the device on top of the table?"")
    for table_patch in table_patches:
        if device_patch.vertical_center > table_patch.vertical_center:
            return device_patch.simple_query(""What color is the device on top of the table?"")
    return device_patch.simple_query(""What color is the device on top of the table?"") # crop would include the table so keep it in the query"
181032044,Are these closed drawers?," # contains a relation (on top of, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Are these closed drawers?"")) # crop would include the drawers so keep it in the query"
383,What kind of furniture is made of wood?," # contains a relation (made of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is made of wood?"")"
101054962,What is the person by the bananas wearing?," # crop would include the bananas so keep it in the query
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    return person_patches[0].simple_query(""What is the person by the bananas wearing?"")"
759165,What is the color of the tower in the middle of the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"") # crop would include the tower so keep it in the query"
10775539,Is this giraffe tall and white?," # query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this giraffe tall and white?"")"
19981804,On which side of the photo is the colorful screen?," # the screen is colorful
    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""screen"")
    # Question assumes only one screen patch
    if len(screen_patches) == 0:
        # If no screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    if screen_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
7903654,Is the tap on the left side or on the right?," # contains a relation (on the left, on the right, etc)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tap on the left side or on the right?"")"
6206183,Which place is it?," # contains a relation (in, on, near, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?," # assume only one coat
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        return image_patch.simple_query(""Is the coat black or beige?"")
    coat_patch = coat_patches[0]
    return coat_patch.best_text_match([""black"", ""beige""]) # crop would include the coat so keep it in the query"
13123207,Does the kite near the field look high and red?," # high and red are properties
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    for kite_patch in kite_patches:
        if kite_patch.verify_property(""kite"", ""high"") and kite_patch.verify_property(""kite"", ""red""):
            return ""yes""
    return ""no"""
7740092,Are there any utensils in this picture?," # returns a yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""utensil"")) # assumes only one utensil"
8774975,What is around the guy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?," # image is a PIL Image
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the staircase different in color than the sky?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1605874,What color are the containers that are on the right?," # needs to be adjusted
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center > image_patch.horizontal_center:
            return container_patch.simple_query(""What color are the containers that are on the right?"")
    return container_patch.simple_query(""What color are the containers that are on the right?"")"
12495781,Are the people to the right or to the left of the cone that is orange?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")"
14165681,"What type of clothing is light, the sweater or the cap?"," # crop would include the clothing so keep it in the query
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    clothing_patch = clothing_patches[0]
    is_light = clothing_patch.verify_property(""clothing"", ""light"")
    if is_light:
        return clothing_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    return clothing_patch.simple_query(""What type of clothing is not light, the sweater or the cap?"") # crop would include the clothing so keep it in the query"
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?," # contains a relation (right, left, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")"
5617223,"What color is the container to the left of the horse, green or silver?"," # is the horse on the left?
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    for container_patch in container_patches:
        horse_patches = image_patch.find(""horse"")
        for horse_patch in horse_patches:
            if container_patch.horizontal_center < horse_patch.horizontal_center:
                return container_patch.best_text_match([""green"", ""silver""])
    # If no container is to the left of the horse, query the image directly
    return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")"
2428964,Is the water gray or teal?," # not used
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].best_text_match([""gray"", ""teal""])"
19620769,Which place is it?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?," # right or left
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    if lamp_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?," # assumes one brown animal
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    return bool_to_yesno(brown_animal_patches[0].verify_property(""brown animal"", ""tiny""))"
5672532,Does that shirt look long sleeved?," # returns a boolean
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return bool_to_yesno(image_patch.verify_property(""shirt"", ""long sleeved""))
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""long sleeved"")) # crop would include the sleeves so keep it in the query"
6146439,Does the box look green?," # Is the box green?
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look green?"")
    return bool_to_yesno(box_patches[0].verify_property(""box"", ""green""))"
1910285,Is the white container on the left of the image?," # contains a relation (on, in, next to, above, below, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white container on the left of the image?"")"
13362134,Is that shower curtain to the left of a toilet?," # image is an array-like
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center > shower_curtain_patch.horizontal_center:
                return ""yes""
    return ""no"""
161060488,Is there any cabinet to the right of the stove?," # cabinet and stove are not in the image
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.horizontal_center > image_patch.horizontal_center: # horizontal_center is not defined
            return ""yes""
    return ""no"""
111055042,Is the chair on the right?," # assuming only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    chair_patch = chair_patches[0]
    return bool_to_yesno(chair_patch.horizontal_center > image_patch.horizontal_center)"
151068,Which kind of clothing is white?," # TODO: this is not a question asked by the user
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""white""):
            return clothing_patch.simple_query(""What kind of clothing is white?"")
    return ""no clothing is white"""
19387951,Is this place the forest or the garden?," # not implemented
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"") # not implemented"
1781695,What's on the blanket?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's on the blanket?"")"
17699779,Is she on a bed?," # contains a relation (on) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is she on a bed?"")"
464441,"What piece of furniture is the blanket on, a bed or a sofa?"," # only works if there's only one bed or sofa
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    for blanket_patch in blanket_patches:
        bed_patches = image_patch.find(""bed"")
        sofa_patches = image_patch.find(""sofa"")
        # Question assumes only one bed or sofa patch
        if len(bed_patches) == 0:
            return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
        for bed_patch in bed_patches:
            if blanket_patch.horizontal_center > bed_patch.horizontal_center:
                return ""bed""
        for sofa_patch in sofa_patches:
            if blanket_patch.horizontal_center > sofa_patch.horizontal_center:
                return ""sofa""
    # If no bed or sofa is found, query the image directly
    return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")"
9505496,Are the wires above a man?," # contains a relation (above, below, left of, right of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the wires above a man?"")"
4625512,What is the woman doing?," # Assuming only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the woman doing?"")
    return woman_patches[0].simple_query(""What is the woman doing?"")"
9441941,Is the woman's hair red or black?," # query directly as it's a property of the woman's hair
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman's hair red or black?"") # crop would include the woman's hair so keep it in the query"
2387432,What's on the table?," # assumes one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What's on the table?"")
    return table_patches[0].simple_query(""What's on the table?"") # crop would include the table so keep it in the query"
10534717,What is the pillow on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pillow on?"") # contains a relation (on), so ask directly"
19335685,"What fruits is the container behind of, apples or bananas?"," # no container in the image, so query directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")"
3127817,The goat is standing in what?," # image is assumed to be a numpy array
    image_patch = ImagePatch(image)
    goat_patches = image_patch.find(""goat"")
    # Question assumes only one goat patch
    if len(goat_patches) == 0:
        # If no goat is found, query the image directly
        return image_patch.simple_query(""The goat is standing in what?"")
    goat_patch = goat_patches[0]
    return goat_patch.simple_query(""The goat is standing in what?"")"
1588567,Where does the man that to the right of the mirror sit?," # contains a relation (to the right of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")"
7399543,What is the floor made of?," # assumes the floor is visible
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the floor made of?"") # assumes the floor is visible"
13741124,What kind of animal is the house behind of?," # image contains a house and a cat
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is the house behind of?"")
    return ""cat"""
1174904,Is the cobblestone sidewalk both large and gray?," # assumes only one cobblestone sidewalk
    image_patch = ImagePatch(image)
    cobblestone_sidewalk_patches = image_patch.find(""cobblestone sidewalk"")
    if len(cobblestone_sidewalk_patches) == 0:
        # If no cobblestone sidewalk is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    return bool_to_yesno(cobblestone_sidewalk_patches[0].verify_property(""cobblestone sidewalk"", ""large"") and cobblestone_sidewalk_patches[0].verify_property(""cobblestone sidewalk"", ""gray""))"
13375231,What is the lettuce on?," # only one object
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What is the lettuce on?"")
    return lettuce_patches[0].simple_query(""What is the lettuce on?"")"
1194027,Which kind of clothing is black?," # execute_command is a function name
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"")
    return image_patch.simple_query(""Which kind of clothing is black?"")"
9963477,Is the statue wearing a dress?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the statue wearing a dress?"")"
1151995,Which side of the photo is the yellow vase on?," # assumes one yellow vase
    image_patch = ImagePatch(image)
    vase_patches = image_patch.find(""vase"")
    if len(vase_patches) == 0:
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    if vase_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
712821,What is common to the bear and the belt?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is common to the bear and the belt?"")"
1757418,What is the vehicle to the right of the car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle to the right of the car?"")"
7624100,Are the trunks that are gray wet and large?," # elephant trunk
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunk_patches:
        is_gray = trunk_patch.simple_query(""Is the trunk gray?"") == ""yes""
        is_wet = trunk_patch.simple_query(""Is the trunk wet?"") == ""yes""
        is_large = trunk_patch.simple_query(""Is the trunk large?"") == ""yes""
        return bool_to_yesno(is_gray and is_wet and is_large)"
1125474,"On which side of the photo is the iron fence, the right or the left?"," # assumes the iron fence is to the right of the center
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""iron fence"")
    # Question assumes only one iron fence patch
    if len(fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    if fence_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1300375,What is the name of the item of furniture that the printer is on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")"
5925196,What's the building covered by?," # image is assumed to be a numpy array
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""What's the building covered by?"")
    return building_patches[0].simple_query(""What's the building covered by?"") # crop would include the cover so keep it in the query"
1948055,What watercraft is the white rope tying?," # contains a relation (tying), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What watercraft is the white rope tying?"")"
8540582,What kind of animal is in front of the leafy trees?," # contains a relation (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"") # crop would include the trees so keep it in the query"
3719411,What does the walking woman by the bus wear?," # contains a relation (walking by the bus), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What does the walking woman by the bus wear?"")"
1129508,Is the controller to the left of a pillow?," # needs to be in the same image
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if controller_patch.horizontal_center < pillow_patch.horizontal_center:
                return ""yes""
    return ""no"""
18664084,Is there any sheep by the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there any sheep by the fence?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
6912079,What animal is this?," # image is expected to be a PIL Image object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is this?"") # simple_query will find the animal and return its name"
3412029,Where is the person?," # this is a simple query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the person?"") # crop would include the person so keep it in the query"
14161122,What animal is in the water?," # contains a relation (in, on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")"
15699496,What is the cup that looks clean made of?," # asks about a property of a relational verb (looks clean), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the cup that looks clean made of?"") # crop would include the cleanliness so keep it in the query"
12765451,What animals are to the right of the ladder?," # assumes only one ladder patch
    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    ladder_patch = ladder_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > ladder_patch.horizontal_center:
            return animal_patch.simple_query(""What animals are to the right of the ladder?"") # crop would include the ladder so keep it in the query
    return image_patch.simple_query(""What animals are to the right of the ladder?"")"
191044307,What animal is black?," # no relation between animal and color, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is black?"")"
12639181,Who is wearing shorts?," # crop would include the shorts so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing shorts?"")"
10630949,Is the person that is not male wearing an elbow pad?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"") # crop would include the elbow pad so keep it in the query"
14544602,What is the boy holding?," # returns a string describing the object
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        # If no object is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    for object_patch in object_patches:
        if object_patch.horizontal_center < boy_patch.horizontal_center:
            return object_patch.simple_query(""What is the boy holding?"")
    # If no object is found to the left of the boy, query the image directly
    return image_patch.simple_query(""What is the boy holding?"")"
2986699,Of what material the dish?," # material of the dish
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Of what material the dish?"")"
161013513,What kind of animal is on the street?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    return animal_patches[0].simple_query(""What kind of animal is on the street?"")"
15143936,What animal is before the roof?," # animal is before the roof
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is before the roof?"")
    return animal_patches[0].simple_query(""What animal is before the roof?"") # crop would include the roof so keep it in the query"
1955043,Who is playing with the ball?," # contains a relation (playing with), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing with the ball?"")"
91044150,What is the name of the animals in front of the trees beside the river?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?," # contains a relation (hanging from), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?," # contains a relation (under), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?," # -> bool
    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)"
10457241,What is the color of the trousers?," # crop would include the rest of the body, so query directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the trousers?"") # crop would include the rest of the body, so query directly"
2913850,Is the placemat in the bottom or in the top part?," # returns ""bottom"" or ""top""
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?," # contains a relation (covered with), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered with blanket?"")"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"") # crop would include the desk drawer so keep it in the query"
19900141,Are there napkins or tablecloths?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""napkin"") or image_patch.exists(""tablecloth""))"
19737232,Is the book on the right of the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the book on the right of the picture?"") # crop would include the book so keep it in the query"
475064,Who is wearing the glasses?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the glasses?"")"
8594579,Is there a woman to the right of the orange object that is to the right of the person?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"") # contains a relation so ask directly"
14602992,Which side of the image is the couch on?," # Left or Right
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which side of the image is the couch on?"")"
9944587,How tall is the man that is wearing a shirt?," # crop would include the shirt so keep it in the query
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    for man_patch in man_patches:
        if man_patch.verify_property(""man"", ""wearing a shirt""):
            return man_patch.simple_query(""How tall is the man that is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no man is wearing a shirt, query the image directly
    return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")"
13736712,Are there any giraffes?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe"")) # assumes giraffe and giraffe is the same"
6996118,The young girl is wearing what?," # contains a relation (wearing) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The young girl is wearing what?"") # crop would include the girl so keep it in the query"
19992576,Is the basket on the floor small and brown?," # is the basket on the floor small and brown?
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    basket_patch = basket_patches[0]
    if basket_patch.vertical_center < image_patch.vertical_center: # is the basket on the floor?
        return basket_patch.simple_query(""Is the basket small and brown?"") # crop would include the floor so keep it in the query
    return ""no"""
17332401,What is the boy in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"")"
15586294,Which side is the leather armchair on?," # returns left or right
    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""armchair"")
    # Question assumes only one armchair patch
    if len(armchair_patches) == 0:
        # If no armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    armchair_patch = armchair_patches[0]
    # the armchair is on the right if its horizontal center is to the right of the image's horizontal center
    return ""right"" if armchair_patch.horizontal_center > image_patch.horizontal_center else ""left"""
15658324,What is the horse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?," # assuming one controller
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    # Question assumes one controller patch
    if len(controller_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    for controller_patch in controller_patches:
        if controller_patch.horizontal_center < man_patch.horizontal_center:
            # Assuming one item of furniture patch
            item_of_furniture_patches = image_patch.find(""item of furniture"")
            if len(item_of_furniture_patches) == 0:
                return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
            for item_of_furniture_patch in item_of_furniture_patches:
                if item_of_furniture_patch.simple_query(""Is the item of furniture the same color as the controller the man is holding?"") == ""yes"":
                    return item_of_furniture_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    return image_patch.simple_query(""What is the item of furniture that has the"
2531874,Who is playing?," # assuming only one player
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"") # crop would include the player so keep it in the query"
3112009,Is the plate on the left side?," # assumes one plate patch
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    plate_patch = plate_patches[0]
    return bool_to_yesno(plate_patch.horizontal_center < image_patch.horizontal_center)"
1527613,On which side of the picture is the bag?," # left or right
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?," # input image
    image_patch = ImagePatch(image)
    is_road_blue = image_patch.verify_property(""road"", ""blue"")
    is_roof_blue = image_patch.verify_property(""roof"", ""blue"")
    return bool_to_yesno(is_road_blue == is_roof_blue)"
161027384,What is the green rug hanging on?," # contains a relation (hanging on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?," # contains a relation (using), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?," # note: uses simple query which will return a person object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who in the photo is standing?"") # crop would include the standing so keep it in the query"
693318,Do you see any plates in the photo?," # changed to image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate""))"
19613394,The person on the skateboard is wearing what?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The person on the skateboard is wearing what?"")"
19927237,Is the blue car in front of the white van?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue car in front of the white van?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
31054022,What is the box sitting on?," # sitting on is a relational verb
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?," # needs to be a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""ground"", ""snowy"") and image_patch.verify_property(""ground"", ""brown""))"
15185768,Does the sky look blue and clear?," # image is not used
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""blue"") and image_patch.verify_property(""sky"", ""clear""))"
1589160,Does the person that is sitting lean against a fire hydrant?," # no
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person that is sitting"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    for person_patch in person_patches:
        firehydrant_patches = image_patch.find(""fire hydrant"")
        # Question assumes only one firehydrant patch
        if len(firehydrant_patches) == 0:
            return ""no""
        for firehydrant_patch in firehydrant_patches:
            is_leaning = (person_patch.horizontal_center > firehydrant_patch.horizontal_center)
            return bool_to_yesno(is_leaning)"
2142522,Are there any shopping carts or mannequins in this photo?," # shopping cart and mannequin are both objects with a specific name
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)"
17362234,Are there cages or scrub brushes in this picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cage"") or image_patch.exists(""scrub brush"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
4955854,Is the lamp below the chain?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    for lamp_patch in lamp_patches:
        is_below_chain = (lamp_patch.simple_query(""Is the lamp below the chain?"") == ""yes"")
        if is_below_chain:
            return ""yes""
    return ""no"""
10463545,Is the computer to the right of the other computer silver or black?," # contains a relation (right of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"") # contains a relation, so ask directly"
2265037,What is the girl wearing?," # the image is of a girl
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""blue number"") or image_patch.exists(""blue letter""))"
3483992,Is the long bus to the left or to the right of the person with the backpack?," # bus is long
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    for bus_patch in bus_patches:
        backpack_patches = image_patch.find(""backpack"")
        # Question assumes only one backpack patch
        if len(backpack_patches) == 0:
            # If no backpack is found, query the image directly
            return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
        for backpack_patch in backpack_patches:
            if bus_patch.horizontal_center < backpack_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
13598461,What is the device that is not on called?," # contains a relation (on, off, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that is not on called?"") # crop would include the state (on, off) so keep it in the query"
13885436,The sky has what color?," # assumes one sky patch
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""The sky has what color?"")
    return sky_patches[0].simple_query(""The sky has what color?"") # crop would include the sky so keep it in the query"
7432467,Is the black container to the left of the man that is on the motorcycle?," # assume one motorcycle and one man
    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    man_patches = image_patch.find(""man on motorcycle"")
    # Question assumes only one man patch and one black container patch
    if len(man_patches) == 0 or len(black_container_patches) == 0:
        # If no man or black container is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    black_container_patch = black_container_patches[0]
    man_patch = man_patches[0]
    if black_container_patch.horizontal_center < man_patch.horizontal_center:
        return ""yes""
    return ""no"""
19540096,Is the fire in an oven?," # todo: add a check to see if the fire is inside the oven
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    # Question assumes only one fire patch
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    fire_patch = fire_patches[0]
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        return ""no""
    oven_patch = oven_patches[0]
    return bool_to_yesno(fire_patch.horizontal_center < oven_patch.horizontal_center) # todo: add a check to see if the fire is inside the oven"
18291107,The horse is where?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The horse is where?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5435474,Is the man that is to the left of the motorbike wearing a hat?," # motorbike
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    man_patch = man_patches[0]
    motorbike_patches = image_patch.find(""motorbike"")
    # Question assumes only one motorbike patch
    if len(motorbike_patches) == 0:
        # If no motorbike is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    motorbike_patch = motorbike_patches[0]
    if motorbike_patch.horizontal_center > man_patch.horizontal_center:
        return bool_to_yesno(man_patch.verify_property(""man"", ""hat""))
    return ""no"""
226307,Are there any tables in the photo?," # table
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))"
1944826,Who is reflected in the mirror?," # mirror is the main object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is reflected in the mirror?"")"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?," # contains a relation (on top of, to the right of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"") # contains a relation (on top of, to the right of, etc), so ask directly"
18435846,What is the color of the balloon that is to the right of the backpack?," # returns the color of the balloon
    image_patch = ImagePatch(image)
    balloon_patches = image_patch.find(""balloon"")
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes one balloon patch and one backpack patch
    if len(balloon_patches) == 0 or len(backpack_patches) == 0:
        # If no balloon or backpack is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    for balloon_patch in balloon_patches:
        for backpack_patch in backpack_patches:
            if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
                return balloon_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"") # crop would include the backpack so keep it in the query
    # If no balloon is to the right of the backpack, query the image directly
    return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")"
8390894,Is the woman to the right of the man sitting on a sofa?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")"
18896007,Which side of the image is the pot on?," # assumes only one pot
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19323898,Is that pillow on a couch?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is that pillow on a couch?"")"
1281034,Where are the trees?," # returns the location of the first tree
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Where are the trees?"")
    return tree_patches[0].simple_query(""Where are the trees?"") # crop would include the tree so keep it in the query"
13515147,What is on the cow?," # assumes one cow
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        return image_patch.simple_query(""What is on the cow?"")
    return cow_patches[0].simple_query(""What is on the cow?"") # crop would include the object on the cow so keep it in the query"
91036716,What is the skater doing?," # assumes only one skater
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the left of the boy carrying?"")"
13152020,Is the ground wet or dry?," # ask directly because it is a predicate of a relational verb (on)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ground wet or dry?"")"
19312096,"On which side is the purse, the left or the right?"," # contains a relation (left, right, on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the purse, the left or the right?"") # contains a relation (left, right, on), so ask directly"
71002343,Are there breads in this photograph?," # -> bool
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bread""))"
9113663,Do you see either any snow or sand that are white?," # contains a relation (on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    sand_patches = image_patch.find(""sand"")
    for snow_patch in snow_patches:
        if snow_patch.verify_property(""snow"", ""white""):
            return ""yes""
    for sand_patch in sand_patches:
        if sand_patch.verify_property(""sand"", ""white""):
            return ""yes""
    return ""no"""
10243612,Which place is it?," # could be a country, city, etc
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
555062,What vegetable is to the left of the napkin?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"") # crop would include the napkin so keep it in the query"
15599523,Is the dog on the right side?," # contains a relation (left, right, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the dog on the right side?"")"
101019673,What is the man wearing?," # what is the man wearing
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"")"
333047,Do you see any men to the right of the orange tent?," # contains a relation (right of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")"
13907796,Is the shirt striped and green?," # ImagePatch(image)
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    for shirt_patch in shirt_patches:
        is_striped = shirt_patch.simple_query(""Is the shirt striped?"") == ""yes""
        is_green = shirt_patch.simple_query(""Is the shirt green?"") == ""yes""
        if is_striped and is_green:
            return ""yes""
    return ""no"""
17207604,Are there either bottles or shelves?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?," # contains a relation (on the left/right of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")"
7165131,Is that train engine small or large?," # contains a relation (small or large), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is that train engine small or large?"")"
21049362,Where are the railroad tracks?," # returns the position of the railroad tracks
    image_patch = ImagePatch(image)
    railroad_patches = image_patch.find(""railroad tracks"")
    # Question assumes only one railroad patch
    if len(railroad_patches) == 0:
        # If no railroad tracks are found, query the image directly
        return image_patch.simple_query(""Where are the railroad tracks?"")
    return railroad_patches[0].simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?," # returns a list of strings
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the children playing?"") # crop would include the children so keep it in the query"
598297,Are there combs or figurines in the picture?," # type: ignore
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)"
16409127,What is the wire on?," # contains a relation (on, around, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tunnel small or large?"")"
17560468,Do you see trains or windows?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?," # contains a relation (near, next to, on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person near the man wearing?"")"
12352375,Is the vehicle that is sitting down black or blue?," # contains a relation (sitting down, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")"
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?," # white thing near the shower curtain
    image_patch = ImagePatch(image)
    trash_can_patches = image_patch.find(""trash can"")
    # Question assumes only one trash can patch
    if len(trash_can_patches) == 0:
        # If no trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    trash_can_patch = trash_can_patches[0]
    white_patches = image_patch.find(""white thing near the shower curtain"")
    # Question assumes only one white patch
    if len(white_patches) == 0:
        # If no white thing is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    white_patch = white_patches[0]
    if trash_can_patch.horizontal_center < white_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5800248,Is it outdoors?," # assumes image is a photo
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""scene"", ""outdoors"")) # assumes scene is the image itself"
4604785,Does the pizza slice to the left of the pizza have large size?," # ImagePatch
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    for pizza_patch in pizza_patches:
        left_slice_patches = image_patch.find(""pizza slice"")
        for left_slice_patch in left_slice_patches:
            if left_slice_patch.horizontal_center < pizza_patch.horizontal_center:
                return bool_to_yesno(left_slice_patch.verify_property(""pizza slice"", ""large""))
    return ""no"""
15185845,What's the man wearing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the man wearing?"")"
2282232,Where is the snow?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
7889197,Who is wearing a shirt?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?," # image is a numpy array
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)"
154682,Where does the bird stand on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where does the bird stand on?"")"
10435315,Is the man holding a racket?," # tennis
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    racket_patch = racket_patches[0]
    return bool_to_yesno(racket_patch.horizontal_center < man_patch.horizontal_center and racket_patch.horizontal_center > man_patch.horizontal_center - 50)"
121035887,Do the man shorts have white color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man shorts"", ""white""))"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?," # contains multiple relations (left of, left of, etc) so ask step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    for vehicle_patch in vehicle_patches:
        cow_patches = image_patch.find(""cows"")
        # Question assumes only one cow patch
        if len(cow_patches) == 0:
            # If no cow is found, query the image directly
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
        cow_patch = cow_patches[0]
        if vehicle_patch.horizontal_center < man_patch.horizontal_center and man_patch.horizontal_center < cow_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"") # crop would include the man so keep"
19659501,What is the color of the umbrella the bird is on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")"
10595217,Where is the grass?," # assumes one grass patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    if len(grass_patches) == 0:
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"")"
14803743,Which kind of clothing is black?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of clothing is black?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
19743238,Is the man on the right side?," # no relation, so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
3965204,Are the mountains covered with snow?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the mountains covered with snow?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
141024710,Are there both windows and cars in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?," # and what kind of shirt?
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"") # and what kind of shirt?
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""What color do you think the shirt is?"") # and what kind of shirt?"
3623367,What's he doing?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's he doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What's he doing?"") # crop would include the action so keep it in the query"
15634950,Where is the giraffe in front of the hay eating from?," # contains a relation (in front of, eating from, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")"
16644500,What animal is the log pulled by?," # contains a relation (pulled by), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the log pulled by?"")"
3202108,Which side is the car on?," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10137201,Are the papers in the bottom part of the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Are the papers in the bottom part of the picture?"") == ""yes"")"
5325670,Is the boy to the left or to the right of the person that is on the left?," # contains a relation (left of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")"
8438091,The picture is what color?," # returns the dominant color
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The picture is what color?"")"
4325939,On which side of the photo is the banana?," # left, right, or center
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif banana_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
1425189,What is the name of the brown piece of furniture?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the brown piece of furniture?"")"
5119962,Is the man to the right of glasses?," # glasses is a type of accessory
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?," # the lid is a separate object, so find it
    image_patch = ImagePatch(image)
    lid_patches = image_patch.find(""toilet lid"")
    # Question assumes only one lid patch
    if len(lid_patches) == 0:
        # If no lid is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    return lid_patches[0].simple_query(""Is the toilet lid down or up?"")"
6522554,Which kind of device does the man hold?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of device does the man hold?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
870619,What is the device to the left of the person that is to the left of the television?," # contains multiple relations, so ask step by step
    image_patch = ImagePatch(image)
    # Question assumes only one person patch
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    person_patch = person_patches[0]
    # Question assumes only one television patch
    television_patches = image_patch.find(""television"")
    if len(television_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    television_patch = television_patches[0]
    # Question assumes only one device patch
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < person_patch.horizontal_center and person_patch.horizontal_center < television_patch.horizontal_center:
            return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"") # If no device is found to the left of the person that is to the left of the television"
12713794,Does the woman to the left of the man wear a necklace?," # contains a relation (left of, right of, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    for woman_patch in woman_patches:
        for man_patch in man_patches:
            if woman_patch.horizontal_center < man_patch.horizontal_center:
                return bool_to_yesno(woman_patch.verify_property(""woman"", ""necklace""))
    return ""no"""
824070,What is the man doing?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    return man_patches[0].simple_query(""What is the man doing?"") # crop would include the man's actions so keep it in the query"
11593733,Which kind of furniture is right to the pillow?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is right to the pillow?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
3357821,Does the dog to the left of the other dog look small or large?," # crop would include the other dog, so ask directly
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If no two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog_patch = dog_patches[0]
    right_dog_patch = dog_patches[1]
    return left_dog_patch.simple_query(""Does the dog look small or large?"")"
338026,Are the white candles short or tall?," # candle is the object, white is a property of the object
    image_patch = ImagePatch(image)
    white_candle_patches = image_patch.find(""candle"")
    # Question assumes only one white candle patch
    if len(white_candle_patches) == 0:
        # If no white candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    return white_candle_patches[0].simple_query(""Are the white candles short or tall?"")"
15346232,What kind of fruit is the girl holding?," # contains a relation (holding) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is the girl holding?"")"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?"," # has a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"") # crop would include the vehicle so keep it in the query"
81030271,Is the gray car to the right or to the left of the cart?," # assuming one cart and one car
    image_patch = ImagePatch(image)
    cart_patches = image_patch.find(""cart"")
    # Question assumes only one cart patch
    if len(cart_patches) == 0:
        # If no cart is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    cart = cart_patches[0]
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    gray_car = gray_car_patches[0]
    if gray_car.horizontal_center > cart.horizontal_center:
        return ""right""
    else:
        return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?," # image contains a canister made of chrome and a cooking utensil
    image_patch = ImagePatch(image)
    canister_patches = image_patch.find(""canister made of chrome"")
    # Question assumes only one canister patch
    if len(canister_patches) == 0:
        # If no canister is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    canister_patch = canister_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        return ""I don't see a cooking utensil""
    for cooking_utensil_patch in cooking_utensil_patches:
        if cooking_utensil_patch.horizontal_center > canister_patch.horizontal_center:
            return cooking_utensil_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    return cooking_utensil_patches[0].simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")"
8240699,What animal is in front of the bird?," # assumes one bird patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        return image_patch.simple_query(""What animal is in front of the bird?"")
    for bird_patch in bird_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center < bird_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is in front of the bird?"")
    return image_patch.simple_query(""What animal is in front of the bird?"")"
10105081,Is the fence white or green?," # no prefix
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].best_text_match([""white"", ""green""])"
13613689,Is there a train or a fence in the picture?," # assuming the image is a photo
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)"
10662521,What is the bottle made of?," # contains a relation (made of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?," # needs the plate in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of fruit is on the plate?"") # crop would include the plate so keep it in the query"
16701575,What device is to the right of the cake?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is to the right of the cake?"")"
6572516,What material is the ceiling?," # assumes only one ceiling patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?," # type: ignore
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?," # object in the middle of the image
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    middle_image_patch = ImagePatch(image)
    middle_image_patch.horizontal_center = image_patch.horizontal_center
    middle_image_patch.vertical_center = image_patch.vertical_center
    for egg_patch in egg_patches:
        if egg_patch.horizontal_center == middle_image_patch.horizontal_center:
            return egg_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"") # if no egg is in the middle, query the image directly"
14371534,Are the gold pans on the right part or on the left?," # contains a relation (on the right, on the left, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")"
16538076,What does the man that is not tall wear?," # not sure if it's the best way to do it
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if not man_patch.verify_property(""man"", ""tall""):
            return man_patch.simple_query(""What does the man that is not tall wear?"") # crop would include the height so keep it in the query
    # If no man is not tall, pick the first man
    return man_patches[0].simple_query(""What does the man that is not tall wear?"")"
5483644,"On which side is the woman, the left or the right?"," # contains a relation (left, right), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the woman, the left or the right?"") # contains a relation (left, right), so ask directly"
181041779,What is the animal in this photograph?," # this is the default query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in this photograph?"") # crop would include the animal so keep it in the query"
1290926,Are there either any life vests or flags?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)"
18273738,Do you see a cup?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cup""))"
4211922,Who is sitting on the table?," # contains a relation (sitting on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?," # contains a relation (left of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"") # crop would include the other girl so keep it in the query"
6599090,What is the person to the right of the car holding?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the right of the car holding?"")"
1174895,What is the vehicle in the parking lot?," # contains a relation (in, on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle in the parking lot?"")"
14755158,Who is the woman in front of?," # contains a relation (in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the woman in front of?"") # contains a relation (in front of, etc), so ask directly"
18349161,Where does the cow that is standing stand?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where does the cow that is standing stand?"")"
7472884,On which side is the tap?," # left or right of the sink
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    tap_patch = tap_patches[0]
    sink_patches = image_patch.find(""sink"")
    # Question assumes only one sink patch
    if len(sink_patches) == 0:
        return ""right""
    sink_patch = sink_patches[0]
    if tap_patch.horizontal_center > sink_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
111051831,On which side of the image is the cabinet?," # left or right
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    if cabinet_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?," # contains a relation (left, right), so ask directly
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    return ""left"" if fork_patches[0].horizontal_center < image_patch.horizontal_center else ""right"""
2409726,Do you see men to the right of the bag the person is carrying?," # returns yes or no
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    man_patch = man_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""yes""
    bag_patch = bag_patches[0]
    for man_patch_found in man_patches:
        if man_patch_found.horizontal_center > bag_patch.horizontal_center:
            return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?," # material is not specified in the query, so ask directly
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    computer_desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one artwork patch and one computer desk patch
    if len(artwork_patches) == 0 or len(computer_desk_patches) == 0:
        # If no artwork or computer desk is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    artwork_patch = artwork_patches[0]
    computer_desk_patch = computer_desk_patches[0]
    return bool_to_yesno(artwork_patch.verify_property(""artwork"", ""material"") == computer_desk_patch.verify_property(""computer desk"", ""material""))"
14298125,Who is playing Wii?," # does not need to be modified
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"") # assumes only one person playing Wii"
9382689,What's the floor made of?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the dress?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15127108,Does the tea pot above the receipt look short and white?," # tea pot and receipt are assumed to be found
    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    receipt_patches = image_patch.find(""receipt"")
    # Question assumes only one tea pot patch and one receipt patch
    if len(tea_pot_patches) == 0 or len(receipt_patches) == 0:
        # If no tea pot or receipt is found, query the image directly
        return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")
    tea_pot_patch = tea_pot_patches[0]
    receipt_patch = receipt_patches[0]
    if tea_pot_patch.vertical_center < receipt_patch.vertical_center:
        return bool_to_yesno(tea_pot_patch.verify_property(""tea pot"", ""short"") and tea_pot_patch.verify_property(""tea pot"", ""white""))
    else:
        return ""no"""
15632653,Which room is it?," # This is a very basic example and does not work for all images
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of clothing is black?"") # crop would include the clothing so keep it in the query"
490992,Is the fence on the left side or on the right of the picture?," # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?," # -> bool
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return bool(image_patch.simple_query(""Do the mountains look rocky?"") == ""yes"")
    return mountain_patches[0].verify_property(""mountain"", ""rocky"")"
17573742,Is the woman to the right of the camera wearing a coat?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"") # crop would include the camera so keep it in the query"
3395780,Is the vehicle to the left of the parking meter covered in rain?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")"
1542668,Is there a black laptop or desk?," # assuming no laptops or desks with black screens
    image_patch = ImagePatch(image)
    is_black_laptop = image_patch.exists(""black laptop"")
    is_black_desk = image_patch.exists(""black desk"")
    return bool_to_yesno(is_black_laptop or is_black_desk)"
1655442,What type of food is to the right of the waffles that are to the right of the person?," # waffles are to the right of the person
    image_patch = ImagePatch(image)
    waffles_patches = image_patch.find(""waffles"")
    # Question assumes only one waffles patch
    if len(waffles_patches) == 0:
        # If no waffles are found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    right_of_waffles = waffles_patches[0].horizontal_center
    right_of_person = image_patch.horizontal_center
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center > right_of_waffles and food_patch.horizontal_center > right_of_person:
            return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"") # if no food is found, query the image directly"
395290,How large is the bag?," # bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"") # crop would include the bag so keep it in the query"
16138893,Are there both motorcycles and cars in this scene?," # changed from execute_command_3
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?," # ImagePatch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing shorts?"")"
171032184,What hangs from the windows?," # TODO: Is there a more efficient way to query the image directly?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")"
8197176,What color is the jacket that the man wears?," # contains a relation (wears) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the jacket that the man wears?"")"
3440931,What are that pieces of furniture called?," # return the first match
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are that pieces of furniture called?"") # crop would include the furniture so keep it in the query"
337924,What is the fruit that is to the left of the chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"") # contains a relation, so ask directly"
16208211,What do you think are the bowls on?," # assumes a single object
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    return bowl_patches[0].simple_query(""What do you think are the bowls on?"") # crop would include the object so keep it in the query"
18330260,Is the sky above the trees open and clear?," # assume one tree patch
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Is the sky above the trees open and clear?"")
    tree_patch = tree_patches[0]
    return image_patch.simple_query(""Is the sky above the tree open and clear?"")"
14119691,Does the squirrel to the right of the stuffed dog look white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")"
18437694,Does the clock to the right of the statue have gold color and tiny size?," # contains a relation (to the right of) so ask directly
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Does the clock to the right of the statue have gold color and tiny size?"")
    for clock_patch in clock_patches:
        statue_patches = image_patch.find(""statue"")
        for statue_patch in statue_patches:
            if clock_patch.horizontal_center > statue_patch.horizontal_center:
                return bool_to_yesno(clock_patch.verify_property(""clock"", ""gold"") and clock_patch.verify_property(""clock"", ""tiny""))
    return ""no"""
1252960,Where was the photo taken?," # not sure if this works as it should
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"") # not sure if this works as it should"
17454895,Is there a frisbee on the grass?," # contains a relation (on, next to, in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a frisbee on the grass?"")"
13180513,Are there either cakes or containers in the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cake"") or image_patch.exists(""container"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
479962,Are there black cars or motorcycles?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?," # to the left of the police officer
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    for blue_car_patch in blue_car_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            police_officer_patches = image_patch.find(""police officer"")
            for police_officer_patch in police_officer_patches:
                if vehicle_patch.horizontal_center < police_officer_patch.horizontal_center:
                    if blue_car_patch.horizontal_center < vehicle_patch.horizontal_center:
                        return ""behind""
                    else:
                        return ""in front of""
    return ""behind"" # if no vehicle is to the left of the police officer, query the image directly"
5785831,What is in the glass?," # contains a relation (in) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the glass?"") # contains a relation (in) so ask directly"
19246241,Are there any brown benches or buckets?," # returns a boolean
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_brown_bucket = image_patch.exists(""brown bucket"")
    return bool_to_yesno(is_brown_bench or is_brown_bucket)"
3243803,"Where in the picture is the spoon, on the right or on the left?"," # assumes only one spoon patch
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
6952486,Does the shirt look white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the shirt look white?"")"
17401425,Is there a bag that is not brown?," # bag is the object of interest
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        is_brown = bag_patch.simple_query(""What color is the bag?"") == ""brown""
        if not is_brown:
            return ""yes""
    return ""no"""
481240,"Which kind of furniture is large, the shelf or the cupboard?"," # contains a relation (large), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")"
8531943,Are there any screens or bags?," # returns yes or no
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)"
1969545,What is she wearing?," # crop would include the shirt so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?"," # takes the image
    image_patch = ImagePatch(image)
    freezer_patches = image_patch.find(""freezer"")
    ice_maker_patches = image_patch.find(""ice maker"")
    # Question assumes only one appliance patch
    if len(freezer_patches) == 0:
        # If no freezer is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    if len(ice_maker_patches) == 0:
        # If no ice maker is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    for freezer_patch in freezer_patches:
        for ice_maker_patch in ice_maker_patches:
            if freezer_patch.verify_property(""freezer"", ""white"") and not ice_maker_patch.verify_property(""ice maker"", ""white""):
                return ""ice maker""
            elif not freezer_patch.verify_property(""freezer"", ""white"") and ice_maker_patch.verify_property(""ice maker"", ""white""):
                return ""freezer""
    return ""freezer"""
1051870,Are there chairs or tables that are not green?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    return bool_to_yesno(is_chair or is_table)"
1366363,Does the taxi have a different color than the truck?," # returns a yes or no
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    truck_patches = image_patch.find(""truck"")
    if len(taxi_patches) == 0 or len(truck_patches) == 0:
        return ""yes""
    for taxi_patch in taxi_patches:
        for truck_patch in truck_patches:
            taxi_color = taxi_patch.simple_query(""What color is the taxi?"")
            truck_color = truck_patch.simple_query(""What color is the truck?"")
            if taxi_color != truck_color:
                return ""yes""
    return ""no"""
5460839,In which part of the image is the dog?," # crop would include the dog so keep it in the query
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    if dog_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
18899476,What type of vegetable is to the right of the rice that is on the plate?," # image is a 3D array (height, width, channels)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")"
8606903,What food item is not wide?," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""wide""):
            return food_patch.simple_query(""What food item is not wide?"")
    # If all food is wide, query the image directly
    return image_patch.simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?," # contains a relation (next to, on, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_chair or is_skateboard)"
2327600,Is there an elephant near the pond?," # Note: the image must be a .jpg or .png for this to work
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Is there an elephant near the pond?"")
    for elephant_patch in elephant_patches:
        is_near_pond = elephant_patch.simple_query(""Is the elephant near the pond?"") == ""yes""
        return bool_to_yesno(is_near_pond)"
1575941,Which place is it?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?," # contains a relation (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")"
16654241,Is the TV on the left or on the right?," # contains a relation (left, right), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the TV on the left or on the right?"") # contains a relation (left, right), so ask directly"
18685233,Which kind of vehicle is to the left of the flags?," # assumes one flag patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    flag_patches = image_patch.find(""flag"")
    # Question assumes only one flag patch
    if len(flag_patches) == 0:
        # If no flag is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    for vehicle_patch in vehicle_patches:
        for flag_patch in flag_patches:
            if vehicle_patch.horizontal_center < flag_patch.horizontal_center:
                return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"") # if no vehicle is found to the left, ask directly"
9796068,Are there both a fence and a sheep in the picture?," # should be ImagePatch
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?," # is the blanket blue?
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    towel_patches = image_patch.find(""towel"")
    for blanket_patch in blanket_patches:
        if blanket_patch.verify_property(""blanket"", ""blue""):
            return ""yes""
    for towel_patch in towel_patches:
        if towel_patch.verify_property(""towel"", ""blue""):
            return ""yes""
    return ""no"""
1110330,Is the pillow to the left of the frog cream colored or green?," # Contains a relation (left of) so ask directly
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    frog_patches = image_patch.find(""frog"")
    # Question assumes only one pillow and one frog patch
    if len(pillow_patches) == 0 or len(frog_patches) == 0:
        # If no pillow or frog is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    pillow_patch = pillow_patches[0]
    frog_patch = frog_patches[0]
    if pillow_patch.horizontal_center < frog_patch.horizontal_center:
        return pillow_patch.best_text_match([""cream colored"", ""green""])
    else:
        return ""no"""
511507,Is the antenna on the aircraft?," # aircraft is a specific object, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the antenna on the aircraft?"") # crop would include the aircraft so keep it in the query"
10464417,"In which part is the tent, the top or the bottom?"," # assumes only one tent patch
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    if len(tent_patches) == 0:
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    tent_patch = tent_patches[0]
    if tent_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
10816730,Is the tree in front of the building?," # no relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tree in front of the building?"") # contains a relation (in front of), so ask directly"
18766115,Who is walking?," # assumes only one walking person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person walking?"") == ""yes"":
            return person_patch.simple_query(""Who is walking?"")
    return ""no one"""
10625851,Are there either any fruits or plates in the image?," # assumes only one object type per query
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    for person_patch in person_patches:
        return bool_to_yesno(person_patch.verify_property(""person"", ""coat""))"
4194722,Is the man wearing a helmet?," # ImagePatch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    man_patch = man_patches[0]
    return man_patch.verify_property(""man"", ""helmet"")"
414248,"What animal are the women near the ocean riding, a pig or a horse?"," # contains a relation (near, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")"
683094,Who is wearing the shirt?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the shirt?"")"
12140603,What device is to the left of the headphones?," # device is a super category that includes phone and computer
    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for headphones_patch in headphones_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < headphones_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the headphones?"")
    return image_patch.simple_query(""What device is to the left of the headphones?"") # if no device is found, query the image directly"
5575209,The flowers are where?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The flowers are where?"")"
8773829,Which kind of furniture is made of wood?," # return the type of furniture that is made of wood
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    return furniture_patches[0].simple_query(""Which kind of furniture is made of wood?"")"
12636428,Which kind of animal is black?," # animal, black
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What kind of animal is black?"")
    # If no animal is black, query the image directly
    return image_patch.simple_query(""Which kind of animal is black?"")"
1020584,What animals is the car behind of?," # image contains a car and an animal
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What animals is the car behind of?"")
    for car_patch in car_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return image_patch.simple_query(""What animals is the car behind of?"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center < car_patch.horizontal_center:
                return animal_patch.simple_query(""What animals is the car behind of?"")
    # If no animal is behind the car, query the image directly
    return image_patch.simple_query(""What animals is the car behind of?"")"
11879418,The man is standing on what?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is standing on what?"")"
12334288,What device is to the left of the cabinet?," # assumes one cabinet
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the left of the cabinet?"")"
691610,Is the monitor to the left of a book?," # monitor is assumed to be a screen
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Is the monitor to the left of a book?"")
    for monitor_patch in monitor_patches:
        book_patches = image_patch.find(""book"")
        for book_patch in book_patches:
            if book_patch.horizontal_center > monitor_patch.horizontal_center:
                return ""yes""
    return ""no"""
7552714,Is the color of the jacket black?," # color is a property
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return bool_to_yesno(jacket_patches[0].verify_property(""jacket"", ""black""))"
8492422,Is the man to the left of a boy?," # contains a relation (left, right, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man to the left of a boy?"")"
13248061,What type of device is to the left of the keyboard in the bottom of the image?," # no query
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    keyboard_patch = keyboard_patches[0]
    if keyboard_patch.vertical_center > image_patch.vertical_center:
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    for device_patch in image_patch.find(""device""):
        if device_patch.horizontal_center < keyboard_patch.horizontal_center:
            return device_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"") # if no device is found, query the image directly"
18252454,What is common to the roof and the sky?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is common to the roof and the sky?"")"
14443687,What do the cat and the book have in common?," # object1 and object2 have property
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    # Question assumes only one cat patch and one book patch
    if len(cat_patches) == 0 or len(book_patches) == 0:
        # If no cat or book is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    cat_patch = cat_patches[0]
    book_patch = book_patches[0]
    common_properties = [prop for prop in cat_patch.properties if prop in book_patch.properties]
    return common_properties[0]"
14571335,Who is wearing trousers?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing trousers?"")"
474885,Who wears a cap?," # is the person wearing the cap?
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    person_patch = person_patches[0]
    cap_patches = image_patch.find(""cap"")
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    cap_patch = cap_patches[0]
    if cap_patch.horizontal_center < person_patch.horizontal_center:
        return person_patch.simple_query(""Who wears a cap?"")
    return cap_patch.simple_query(""Who wears a cap?"") # crop would include the cap so keep it in the query"
141013015,"What color is the toilet, brown or white?"," # assumes toilet is in the image
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].best_text_match([""brown"", ""white""])"
5515816,On which side of the image is the fence?," #left or right
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16774696,What is the surfer wearing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the surfer wearing?"")"
13701956,Is there any grass or sand that is not dry?," # image is 3d array (height, width, channels)
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Is there any grass or sand that is not dry?"")
    for grass_patch in grass_patches:
        is_not_dry = grass_patch.simple_query(""Is the grass not dry?"") == ""yes""
        if is_not_dry:
            return ""yes""
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        return ""no""
    for sand_patch in sand_patches:
        is_not_dry = sand_patch.simple_query(""Is the sand not dry?"") == ""yes""
        if is_not_dry:
            return ""yes""
    return ""no"""
11606870,Is there a cow or a zebra in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?," # asks a property of the fire hydrant, so go step by step
    image_patch = ImagePatch(image)
    firehydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(firehydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    return firehydrant_patches[0].verify_property(""fire hydrant"", ""modern"")"
942308,Is the cup empty or full?," # Note: empty and full are not properties of the cup object, but of its content
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    return cup_patches[0].simple_query(""Is the cup empty or full?"") # crop would include the content so keep it in the query"
15815976,Is the woman wearing a scarf?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman wearing a scarf?"")"
3193231,Do you see either parking meters or brooms in the picture?," # contains a disjunction (or) so ask directly
    image_patch = ImagePatch(image)
    is_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_meter or is_broom)"
314218,Is the sign in front of the bridge small and white?," # image is the input image
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    for sign_patch in sign_patches:
        is_in_front = (sign_patch.horizontal_center > image_patch.horizontal_center)
        if is_in_front:
            return sign_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    return ""no"""
18130465,Does the umbrella that is not dry look orange and open?," # does not contain a verb, so ask directly
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    for umbrella_patch in umbrella_patches:
        is_not_dry = umbrella_patch.verify_property(""umbrella"", ""dry"") == False
        if is_not_dry:
            is_orange = umbrella_patch.verify_property(""umbrella"", ""orange"")
            is_open = umbrella_patch.verify_property(""umbrella"", ""open"")
            return bool_to_yesno(is_orange and is_open)
    return ""no"""
7920817,What's in the paper?," # assumes paper is a 2D object
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""What's in the paper?"")
    return paper_patches[0].simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?," # crop would include the bun so keep it in the query
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    return bun_patches[0].simple_query(""What is on the bun in the top?"")"
16929928,What is the fence made of?," # material
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?," # contains a relation (left, right, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")"
17993299,Is the horse to the left of a car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the horse to the left of a car?"")"
8717022,Is the small animal to the left of the vehicle that looks silver?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")"
2998707,Which color is the chair that is on the right?," # contains a relation (right of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which color is the chair that is on the right?"")"
171017786,Do you see any cups to the left of the monitor?," # monitor is a TV
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    monitor_patch = monitor_patches[0]
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        return ""no""
    for cup_patch in cup_patches:
        if cup_patch.horizontal_center < monitor_patch.horizontal_center:
            return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")"
1941568,What animal is in the water?," # changed from ImagePatch to Image
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal in the water?"") == ""yes"":
            return animal_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"")"
17577787,Does the man's hair look short and white?," # contains a relation (on, of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the man's hair look short and white?"")"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?," # contains a relation (to the left of, to the right of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"") # contains a relation (to the left of, to the right of, etc), so ask directly"
9825336,Which kind of furniture is the mat lying on?," # image is assumed to be a numpy array
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    return mat_patches[0].simple_query(""Which kind of furniture is the mat lying on?"") # crop would include the mat so keep it in the query"
11222427,Do you see fences or elephants?," # assume image is RGB
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?"," # no need to modify the image
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    bed_color = bed_patches[0].simple_query(""What color is the bed?"")
    entertainment_center_patches = image_patch.find(""entertainment center"")
    # Question assumes only one entertainment center patch
    if len(entertainment_center_patches) == 0:
        # If no entertainment center is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    for entertainment_center_patch in entertainment_center_patches:
        entertainment_center_color = entertainment_center_patch.simple_query(""What color is the entertainment center?"")
        if entertainment_center_color != ""white"":
            return entertainment_center_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    return bed_patches[0].simple_query(""What kind of furniture is not white, the entertainment center or the bed?"") # crop would include the bed so keep it in the query"
1152020,Do you see either any plate or tomato that are red?," # is red a property of plate or tomato?
    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""plate"") and image_patch.verify_property(""plate"", ""red"")
    is_red_tomato = image_patch.exists(""tomato"") and image_patch.verify_property(""tomato"", ""red"")
    return bool_to_yesno(is_red_plate or is_red_tomato)"
8961520,Who is surfing?," # contains a relation (surfing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"")"
18106780,Which room is it?," # assuming one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
1892692,What color do you think the bowl that is to the right of the person is?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"") # contains a relation so ask directly"
6952082,What color is the hair?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"") # crop would include the hair so keep it in the query"
3768067,What color is the pot the statue is to the right of?," # TODO: needs to be modified to ask about the pot
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    for statue_patch in statue_patches:
        if statue_patch.horizontal_center > image_patch.horizontal_center:
            return statue_patch.simple_query(""What color is the pot the statue is to the right of?"")
    return image_patch.simple_query(""What color is the pot the statue is to the right of?"")"
17866761,Is the clear glass on the shelf of the table?," # table and shelf are not defined in the image
    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    return clear_glass_patches[0].simple_query(""Is the clear glass on the shelf of the table?"") # crop would include the shelf and table so keep them in the query"
798020,Does the skirt look black or yellow?," # image is an ImagePatch
    image_patch = image
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].best_text_match([""black"", ""yellow""]) # crop would include the skirt so keep it in the query"
828981,How old is he?," # should be an image
    image_patch = ImagePatch(image)
    # asks for a property (age), so ask directly
    return image_patch.simple_query(""How old is he?"")"
7236463,Of what color is the book?," # TODO: assumes one book patch
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""Of what color is the book?"")"
6376684,What color is the car to the left of the train car?," # image should be RGB
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    car_patch = car_patches[0]
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    for train_patch in train_patches:
        if train_patch.horizontal_center > car_patch.horizontal_center:
            # crop would include the train so keep it in the query
            return car_patch.simple_query(""What color is the car to the left of the train car?"")
    return car_patch.simple_query(""What color is the car to the left of the train car?"")"
786798,Is this a photo of a beach?," # contains a question, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a photo of a beach?"") # contains a question, so ask directly"
19836753,What vehicles are to the left of the fence?," # assumes only one vehicle and one fence
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one vehicle and one fence patch
    if len(vehicle_patches) == 0 or len(fence_patches) == 0:
        # If no vehicle or fence is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    vehicle = vehicle_patches[0]
    fence = fence_patches[0]
    if vehicle.horizontal_center < fence.horizontal_center:
        return vehicle.simple_query(""What vehicle is to the left of the fence?"")
    return image_patch.simple_query(""What vehicles are to the left of the fence?"")"
15284615,Who is playing?," # contains a relation (playing with), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?," # no relation so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    is_man_walking = man_patch.simple_query(""Is the man walking?"")
    is_man_holding_remote = man_patch.simple_query(""Is the man holding a remote control?"")
    return bool_to_yesno(is_man_walking and is_man_holding_remote)"
17746396,What's the boy wearing?," # Contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the boy wearing?"")"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13826837,What color is the door?," # assuming one door patch
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    return door_patches[0].simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?," # field is not a object, so query directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse"")) # query directly"
2964690,What is in front of the mountains?," # contains a relation (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?," # not used in the examples
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for truck_patch in truck_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
                return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?," # crop would include the scarf so keep it in the query
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    return scarf_patches[0].simple_query(""Is the scarf made of wool long and blue?"") # crop would include the scarf so keep it in the query"
1189986,Is the man behind the elephant holding a surfboard?," # assumes only one man and one elephant patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    if len(elephant_patches) == 0:
        return ""no""
    # Question assumes only one elephant patch
    for man_patch in man_patches:
        for elephant_patch in elephant_patches:
            if elephant_patch.horizontal_center > man_patch.horizontal_center:
                return man_patch.simple_query(""Is the man holding a surfboard?"") == ""yes""
    return ""no"""
8792466,Which color is the closed window?," # assume only one window patch
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    if len(window_patches) == 0:
        return image_patch.simple_query(""Which color is the closed window?"")
    return window_patches[0].simple_query(""Which color is the closed window?"")"
10188423,Who is wearing a shirt?," # assumes only one shirt
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?," # contains a relation (right of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")"
4929965,Is there a black racket or clock in the picture?," # is there a black racket or clock in the picture?
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_black_clock = image_patch.exists(""black clock"")
    return bool_to_yesno(is_black_racket or is_black_clock)"
4782038,What kind of animal is white?," # is white
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    for animal_patch in animal_patches:
        is_white = animal_patch.verify_property(""animal"", ""white"")
        if is_white:
            return animal_patch.simple_query(""What kind of animal is white?"")
    # If no white animal is found, query the image directly
    return image_patch.simple_query(""What kind of animal is white?"")"
14658201,Is the sheep that looks white and brown made of plastic?," # contains a relation (looks like) so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"") # contains a relation (looks like) so ask directly"
1441865,Do you see any boxes on the table under the grill?," # assumes only one grill and one table
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    for box_patch in box_patches:
        if box_patch.vertical_center < image_patch.vertical_center: # under the grill
            table_patches = image_patch.find(""table"")
            for table_patch in table_patches:
                if table_patch.vertical_center > box_patch.vertical_center: # on the table
                    return ""yes""
    return ""no"""
1424926,What is the tag on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")"
3635257,Is there any freezer in this photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8821026,Are there either any bags or chairs?," # bags and chairs are found in the same image
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?," # bus driver is not in the image, query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In what vehicle is the bus driver?"")"
17204662,What is that man in front of?," # contains a relation (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that man in front of?"") # contains a relation (in front of), so ask directly"
380866,Are there any girls or radios?," # returns yes or no
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?," # contains a relation (sitting on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The girl is sitting on what?"")"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?," # left
    image_patch = ImagePatch(image)
    white_lamp_patches = image_patch.find(""white lamp"")
    # Question assumes only one white lamp patch
    if len(white_lamp_patches) == 0:
        # If no white lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for white_lamp_patch in white_lamp_patches:
        pillow_patches = image_patch.find(""pillow"")
        # Question assumes only one pillow patch
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center == image_patch.horizontal_center:
                if white_lamp_patch.horizontal_center < pillow_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right""
    return ""left"""
16545552,What color do you think is the vehicle the girl is washing?," # not used
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    return vehicle_patches[0].simple_query(""What color do you think is the vehicle the girl is washing?"")"
16719872,Are there motorcycles to the left of the man who is wearing a hat?," # the man who is wearing a hat is not the only man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man who is wearing a hat"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man who is wearing a hat is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        return ""no""
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?," # contains a relation (right of, left of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")"
13711589,What do the truck and the street sign have in common?," # returns the common property of two objects
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    truck_patch = truck_patches[0]
    street_sign_patches = image_patch.find(""street sign"")
    # Question assumes only one street sign patch
    if len(street_sign_patches) == 0:
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    for property in truck_patch.simple_query(""What properties does the truck have?"").split("",""):
        for street_sign_patch in street_sign_patches:
            if street_sign_patch.simple_query(""What properties does the street sign have?"").find(property) != -1:
                return property
    return image_patch.simple_query(""What do the truck and the street sign have in common?"")"
10227573,Who is wearing a shirt?," # the image contains a shirtless man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    return man_patches[0].simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?," # assumes only one man patch and one animal patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    animal_patches = image_patch.find(""animal"")
    if len(man_patches) == 0 or len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is the man leading?"")
    man_patch = man_patches[0]
    animal_patch = animal_patches[0]
    return animal_patch.simple_query(""What animal is the man leading?"") # crop would include the man so keep him in the query"
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
7190226,Does the puddle look large?," # note that ImagePatch is not being used here, but the image
    return bool_to_yesno(image.shape[0] > 1000) # example: image is 1000x1000, so is the puddle large?"
11675152,Who throws the frisbee?," # contains a relation (throws), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who throws the frisbee?"")"
8723676,Which kind of animal is the water on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is the water on?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""in_water"") == False:
            return animal_patch.simple_query(""Which kind of animal is the water on?"")
    # If all animals are in water, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is the water on?"")"
61046657,Do you think that traffic light is tall?," # -> bool
    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    # Question assumes only one traffic light patch
    if len(traffic_light_patches) == 0:
        # If no traffic light is found, query the image directly
        return image_patch.simple_query(""Do you think that traffic light is tall?"") == ""yes""
    return traffic_light_patches[0].verify_property(""traffic light"", ""tall"")"
9581034,On which side is the wine glass?," # assumes only one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    wine_glass_patch = wine_glass_patches[0]
    horizontal_center = wine_glass_patch.horizontal_center
    if horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?," # modified to ask the right question
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        pizza_patches = image_patch.find(""pizza"")
        for pizza_patch in pizza_patches:
            if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
18535266,Is the face mask made of the same material as the mask?," # mask is a generic term
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    # Question assumes only one face mask patch
    if len(face_mask_patches) == 0:
        # If no face mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    for face_mask_patch in face_mask_patches:
        mask_patches = image_patch.find(""mask"")
        for mask_patch in mask_patches:
            is_same_material = face_mask_patch.verify_property(""face mask"", ""material"") == mask_patch.verify_property(""mask"", ""material"")
            return bool_to_yesno(is_same_material)"
11254215,What is the tan item of furniture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tan item of furniture?"")"
1852010,How is the device to the right of the device on the desk called?," # contains a relation (next to, on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")"
1587534,Is the device on the floor black and large?," # returns a boolean
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"") == ""yes""
    device_patch = device_patches[0]
    return device_patch.verify_property(""device"", ""black"") and device_patch.verify_property(""device"", ""large"") and device_patch.vertical_center > image_patch.vertical_center/2"
8470757,Are there any surfboards?," # no query needed
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))"
11273949,Is the shirt white?," # shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))"
7475238,What's the airplane in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?," # assume only one horse and one hose
    image_patch = ImagePatch(image)
    hose_patches = image_patch.find(""hose"")
    if len(hose_patches) == 0:
        # If no hose is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    hose_patch = hose_patches[0]
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        if horse_patch.horizontal_center > hose_patch.horizontal_center:
            return horse_patch.simple_query(""Where does the horse to the right of the hose run?"")
    return image_patch.simple_query(""Where does the horse to the right of the hose run?"") # if no horse is to the right of the hose, query the image directly"
3932624,Are there either any gray chairs or laptops?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?," # contains water
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the water brown or blue?"")"
9256263,Which kind of furniture is brown?," # assumes only one brown furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""brown""):
            return furniture_patch.simple_query(""Which kind of furniture is brown?"")
    return image_patch.simple_query(""Which kind of furniture is brown?"")"
18719769,Is the man wearing glasses?," # glasses
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    return bool_to_yesno(glasses_patch.horizontal_center > man_patches[0].horizontal_center)"
18342439,What animal is white?," # assumes only one white animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What animal is white?"")
    return ""No animal is white"""
8665725,Who is wearing a coat?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a coat?"")"
5440407,What vehicle isn't black?," # assuming only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""black"") == False:
            return vehicle_patch.simple_query(""What vehicle isn't black?"")
    # If all vehicles are black, query the image directly
    return image_patch.simple_query(""What vehicle isn't black?"")"
4104707,On which side of the picture is the oven?," # assumes one oven
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    return ""right"" if oven_patches[0].horizontal_center > image_patch.horizontal_center else ""left"""
3126763,What is common to the logo and the letter?," # returns a string with the common property
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    logo_patch = logo_patches[0]
    letter_patches = image_patch.find(""letter"")
    # Question assumes only one letter patch
    if len(letter_patches) == 0:
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    letter_patch = letter_patches[0]
    common_properties = logo_patch.verify_property(""logo"", ""red"") and letter_patch.verify_property(""letter"", ""red"")
    if common_properties:
        return ""red""
    common_properties = logo_patch.verify_property(""logo"", ""blue"") and letter_patch.verify_property(""letter"", ""blue"")
    if common_properties:
        return ""blue""
    return ""unknown"""
18640925,What animal is in the water the man is walking through?," # assumes only one man and one water patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    water_patches = image_patch.find(""water"")
    # Question assumes only one man and one water patch
    if len(man_patches) == 0 or len(water_patches) == 0:
        # If no man or water is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    water_patch = water_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > man_patch.horizontal_center and animal_patch.horizontal_center < water_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in the water the man is walking through?"")
    return animal_patches[0].simple_query(""What animal is in the water the man is walking through?"") # crop would include the water so keep it in the query"
125488,What is the man wearing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man wearing?"")"
5925435,What is the sidewalk made of?," # no sidewalk in the image, query the image directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?," # returns a list of patterns
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].simple_query(""What is the pattern of the coat?"") # crop would include the coat so keep it in the query"
4819547,What kind of furniture is white?," # assumes one white piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What kind of furniture is white?"")
    return image_patch.simple_query(""What kind of furniture is white?"") # if no white furniture is found, query the image directly"
14263174,What color do you think the chair that is to the right of the other chair is?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?," # uses relation (left of, riding, green, etc)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    man_patch = man_patches[0]
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    for train_patch in train_patches:
        if train_patch.simple_query(""Is the train green?"") == ""yes"":
            # contains a relation (left of, riding, etc), so ask directly
            return train_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"") # crop would include the man so keep it in the query
    return ""no"""
9239936,Do the cows near the trees have white color?," # Contains a relation (near, etc)
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    for cow_patch in cow_patches:
        is_near_tree = False
        for tree_patch in tree_patches:
            if cow_patch.horizontal_center > tree_patch.horizontal_center:
                is_near_tree = True
                break
        if is_near_tree:
            return bool_to_yesno(cow_patch.verify_property(""cow"", ""white""))
    return ""no"""
1885178,"In which part of the image is the remote control, the bottom or the top?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
12341631,Which color is the bag in the top part?," # which color is the bag in the top part
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    if bag_patch.vertical_center < image_patch.vertical_center:
        return bag_patch.simple_query(""Which color is the bag in the bottom part?"")
    return bag_patch.simple_query(""Which color is the bag in the top part?"")"
5532909,"What is the weather like, cloudless or maybe rainy?"," # weather is not always visible
    image_patch = ImagePatch(image)
    is_cloudless = image_patch.exists(""cloudless"")
    is_rainy = image_patch.exists(""rainy"")
    return ""cloudless"" if is_cloudless else ""rainy"""
2618222,What is connected to the open laptop?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is connected to the open laptop?"")"
3252220,Of which color is the shirt the man wears?," # which shirt, which man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""What color is the shirt the man wears?"") # crop would include the shirt so keep it in the query"
8947801,What is in the vase?," # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the vase?"") # contains a relation (in), so ask directly"
10841562,Is the color of the pants the same as the shorts?," # only works if both pants and shorts are found in the same image
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    for pants_patch in pants_patches:
        shorts_patches = image_patch.find(""shorts"")
        for shorts_patch in shorts_patches:
            if pants_patch.verify_property(""pants"", ""color"") == shorts_patch.verify_property(""shorts"", ""color""):
                return ""yes""
    return ""no"""
15511838,What kind of furniture is to the left of the bucket?," # assumes one bucket and one furniture patch
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    bucket_patch = bucket_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"") # if no furniture to the left of the bucket, query the image directly"
14495306,Is there any racket to the right of the person that the woman is to the left of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")"
14841932,Do the tiles have square shape and black color?," # shape and color
    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    # Question assumes only one tile patch
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    return bool_to_yesno(tile_patches[0].verify_property(""tile"", ""square"") and tile_patches[0].verify_property(""tile"", ""black"")) # crop would include the shape and color so keep it in the query"
41029381,What is the vehicle that is the same color as the shirt called?," # assumes one vehicle patch and one shirt patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one vehicle patch and one shirt patch
    if len(vehicle_patches) == 0 or len(shirt_patches) == 0:
        # If no vehicle or shirt is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    vehicle_patch = vehicle_patches[0]
    shirt_patch = shirt_patches[0]
    if vehicle_patch.verify_property(""vehicle"", shirt_patch.simple_query(""What color is the shirt?"")):
        return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")"
161027428,Are there both windows and doors in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
16478246,Does the pillow to the right of the man have green color and large size?," # takes an image
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch to the right of the man
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""))
    # If no pillow to the right of the man, query the image directly
    return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")"
9450308,Is the happy person wearing a hat?," # crop would include the hat so keep it in the query
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    return happy_patches[0].simple_query(""Is the happy person wearing a hat?"") # crop would include the hat so keep it in the query"
11850389,What place is this?," # what is this?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"") # what is this? # what is this? # what is this? # what is this?"
17250452,What kind of appliance is on the right of the drawer?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"") # crop would include the appliance so keep it in the query"
14857961,Is the lady to the right of a woman?," # assuming ""woman"" and ""lady"" are the same object
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    for lady_patch in lady_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center > lady_patch.horizontal_center:
                return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?," # todo: fix the description
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")"
9745131,Which color is the truck that is to the left of the lamps?," # crop would include the lamps so keep them in the query
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    for truck_patch in truck_patches:
        lamps_patches = image_patch.find(""lamps"")
        for lamps_patch in lamps_patches:
            if lamps_patch.horizontal_center > truck_patch.horizontal_center:
                return truck_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    # If no truck is to the left of any lamp, pick the first truck
    return truck_patches[0].simple_query(""Which color is the truck that is to the left of the lamps?"")"
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?," # returns the color of the motorcycle
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    motorcycle_color = motorcycle_patches[0].simple_query(""What color is the motorcycle?"")
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    for bird_patch in bird_patches:
        if bird_patch.simple_query(""What color is the bird?"") == motorcycle_color:
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")"
867818,Is the man on the skateboard?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the skateboard?"")"
13896221,What is on the table?," # contains a relation (on the table), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
1964517,What is the food that is above the white paper?," # image is a PIL Image
    image_patch = ImagePatch(image)
    # contains a relation (above), so ask directly
    return image_patch.simple_query(""What is the food that is above the white paper?"") # crop would include the white paper so keep it in the query"
15705231,Is the shelf to the left of a cabinet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")"
15693846,Is the motorcycle parked on the grass?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the motorcycle parked on the grass?"")"
13872995,Who is jumping?," # contains a relation (jumping over), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?," # assumes one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Is this a dog or a cat?"")
    return animal_patches[0].best_text_match([""dog"", ""cat""])"
12584623,What is the person with the bag wearing?," # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person with the bag wearing?"")"
7202064,"What is this, a bus or a truck?"," # is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this, a bus or a truck?"")"
16542208,Do you see either any beds or blankets there?," # returns a boolean
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)"
11700224,Do you see both lettuce and salad?," # should return yes or no
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)"
1067136,Is the ball on the tree?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball on the tree?"") # crop would include the tree so keep it in the query"
364079,What kind of furniture is to the right of the blanket?," # requires a blanket and a piece of furniture to the right of it
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for blanket_patch in blanket_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")"
2533062,How large is the ground the zebra is standing on?," # width
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    return zebra_patches[0].width"
19683710,The clock is inside what?," # This example is not a direct query, but rather a step-by-step query
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""The clock is inside what?"")
    for clock_patch in clock_patches:
        return clock_patch.simple_query(""The clock is inside what?"") # crop would include the clock so keep it in the query"
15674863,Is the racket in the top part?," # crop would include the racket so keep it in the query
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""no""
    else:
        return ""yes"""
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")"
2292637,What is the color of the shirt that the passenger is wearing?," # image is a 3D array
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")"
9175259,What is the chair made of?," # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?," # crop would include the top so keep it in the query
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    return carrot_patches[0].simple_query(""How big is the carrot in the top of the picture?"") # crop would include the top so keep it in the query"
1638685,What is the name of the vegetable that is on the yellow food?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"") # crop would include the yellow food so keep it in the query"
5828256,Is the clock on a tower?," # contains a relation (on, in, at, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the clock on a tower?"")"
18937563,What kind of animal is orange?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is orange?"") # crop would include the animal so keep it in the query"
14360113,What is the smiling woman holding?," # this should be a relational verb, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the smiling woman holding?"")"
593188,Is the hair short?," # this one is not working properly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is the hair short?"")) # crop would include the hair so keep it in the query"
10824666,Are there ladies to the left of the man that is wearing shorts?," # left of the man that is wearing shorts
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    is_wearing_shorts = (man_patch.simple_query(""Is the man wearing shorts?"") == ""yes"")
    if not is_wearing_shorts:
        return ""no""
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        return ""no""
    for lady_patch in lady_patches:
        if lady_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"") # contains a relation so ask directly"
7574939,Is there any table or plate that is white?," # returns ""yes"" or ""no""
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    plate_patches = image_patch.find(""plate"")
    for table_patch in table_patches:
        if table_patch.verify_property(""table"", ""white""):
            return ""yes""
    for plate_patch in plate_patches:
        if plate_patch.verify_property(""plate"", ""white""):
            return ""yes""
    return ""no"""
12252101,Is it outdoors?," # contains a relation (outdoors, indoors), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"") # contains a relation (outdoors, indoors), so ask directly"
6943442,What cooking utensil is on the oven?," # asks directly, so no need to check if the object exists
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What cooking utensil is on the oven?"")"
2977077,The propeller that looks red is what pattern?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The propeller that looks red is what pattern?"")"
11190306,Which kind of animal is to the left of the train?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is to the left of the train?"")"
5107190,Do you see both an airplane and a truck?," # -> bool
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How old is the child?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
12536783,What kind of animal is in front of the pole?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    man_patches = image_patch.find(""man"")
    t_shirt_patches = image_patch.find(""t-shirt"")
    # Question assumes only one man patch and one t-shirt patch
    if len(man_patches) == 0 or len(t_shirt_patches) == 0:
        # If no man or t-shirt is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    glasses_patches = image_patch.find(""glasses"")
    for glasses_patch in glasses_patches:
        for man_patch in man_patches:
            for t_shirt_patch in t_shirt_patches:
                if glasses_patch.horizontal_center > man_patch.horizontal_center:
                    return ""right""
    return ""left"""
18655269,Which room is it?," # returns the name of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?," # contains a relation (indoors, outdoors), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it indoors?""))"
1705569,Does the pot on top of the stove look black?," # TODO: update this to not ask about the pot on top of the stove
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot on top of stove"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    return bool_to_yesno(pot_patches[0].verify_property(""pot on top of stove"", ""black""))"
1028569,Are there both a cyclist and a helmet in the photo?," # is there a helmet in the photo?
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)"
13954115,Are there any men to the left of the person in the crowd?," # contains a relation (left of), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""man"")) # assume the man is to the left of the person in the crowd"
12436797,What kind of device is to the left of the keyboard?," # a relational verb so go step by step
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    for keyboard_patch in keyboard_patches:
        left_device_patches = image_patch.find(""device"")
        for left_device_patch in left_device_patches:
            if left_device_patch.horizontal_center < keyboard_patch.horizontal_center:
                return left_device_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    # If no device is to the left of the keyboard, query the image directly
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")"
1017626,Who is inside the train?," # assumes one train patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Who is inside the train?"")
    return train_patches[0].simple_query(""Who is inside the train?"")"
7650014,Which place is it?," # not using ImagePatch
    return ImagePatch(image).simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?," # no query
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the person to the left of the car doing?"")"
1310985,Is the yellow vehicle to the left of a lamp?," # yellow vehicle and lamp
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        lamp_patches = image_patch.find(""lamp"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center > yellow_vehicle_patch.horizontal_center:
                return ""yes""
    return ""no"""
646935,Which room is it?," # room not found in image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"") # room not found in image"
9495263,Is the woman to the left or to the right of the man that wears a cap?," # contains a relation (left, right, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")"
946016,Do you think the animal that is sitting-down is small or large?," # has a relation (sitting-down), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")"
9617920,Do the garbage can and the pan have the same color?," # -> bool
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one garbage can and one pan patch
    if len(garbage_can_patches) == 0 or len(pan_patches) == 0:
        # If no garbage can or no pan is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    garbage_can_patch = garbage_can_patches[0]
    pan_patch = pan_patches[0]
    return bool_to_yesno(garbage_can_patch.verify_property(""garbage can"", ""blue"") == pan_patch.verify_property(""pan"", ""blue""))"
3578781,Which kind of clothing is black?," # clothing is assumed to be a single patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"")
    return ""unknown"""
4695656,What is the lamp on?," # ask for the predicate of a relational verb (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lamp on?"")"
13696926,The homes that are to the left of the people have what color?," # -> str
    image_patch = ImagePatch(image)
    home_patches = image_patch.find(""home"")
    people_patches = image_patch.find(""people"")
    # Question assumes one home patch and one people patch
    if len(home_patches) == 0 or len(people_patches) == 0:
        # If no home or people are found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    home_patch = home_patches[0]
    people_patch = people_patches[0]
    if home_patch.horizontal_center < people_patch.horizontal_center:
        return home_patch.simple_query(""What color are the homes?"")
    return people_patch.simple_query(""What color are the homes?"")"
16946079,What is on the wall?," # contains a relation (on the wall), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"") # crop would include the wall so keep it in the query"
18986542,Is the napkin on the right side?," # todo: ask what is on the right
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    return bool_to_yesno(napkin_patches[0].horizontal_center > image_patch.horizontal_center)"
11513897,What appliance is the label on?," # label is the object, so first find it
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    # Question assumes only one label patch
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    return label_patches[0].simple_query(""What appliance is the label on?"") # crop would include the label so keep it in the query"
8240644,What is the color of the bird's tail?," # assuming only one bird patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What is the color of the bird's tail?"") # crop would include the tail so keep it in the query"
5245080,Is he to the right or to the left of the camera?," # image is the original image
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is he to the right or to the left of the camera?"") # he refers to the man"
17800894,Are there both a window and a door in the picture?," # image is a 3D array
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
191027873,Where is the snowboard?," # needs to know where the mountain is
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snowboard?"")"
1964079,Are the box and the paper the same color?," # needs to be in the same ImagePatch
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    box_patch = box_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""yes""
    paper_patch = paper_patches[0]
    return bool_to_yesno(box_patch.verify_property(""box"", ""blue"") == paper_patch.verify_property(""paper"", ""blue""))"
