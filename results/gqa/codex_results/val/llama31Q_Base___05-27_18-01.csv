sample_id,query,generated_code
13151559,Is the large hair both white and soft?," # assumes only one large hair
    image_patch = ImagePatch(image)
    large_hair_patches = image_patch.find(""large hair"")
    # Question assumes only one large hair patch
    if len(large_hair_patches) == 0:
        # If no large hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    large_hair_patch = large_hair_patches[0]
    is_white = large_hair_patch.verify_property(""large hair"", ""white"")
    is_soft = large_hair_patch.verify_property(""large hair"", ""soft"")
    return bool_to_yesno(is_white and is_soft)"
18370956,Who is eating the cupcake?," # assumes only one person and one cupcake
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        cupcake_patches = image_patch.find(""cupcake"")
        for cupcake_patch in cupcake_patches:
            if cupcake_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is eating the cupcake?"")
    return ""no one"""
6436809,What is the guy wearing?," # assumes only one guy
    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    # Question assumes only one guy patch
    if len(guy_patches) == 0:
        # If no guy is found, query the image directly
        return image_patch.simple_query(""What is the guy wearing?"")
    guy_patch = guy_patches[0]
    return guy_patch.simple_query(""What is the guy wearing?"")"
117037,Which kind of food is to the right of the cabbage?," # assumes only one cabbage patch
    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    cabbage_patch = cabbage_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center > cabbage_patch.horizontal_center:
            return food_patch.simple_query(""Which kind of food is to the right of the cabbage?"") # crop would include the food so keep it in the query
    return ""no"""
758936,Who wears the cap?," # assumes only one person
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    for cap_patch in cap_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > cap_patch.horizontal_center:
                return person_patch.simple_query(""Who wears the cap?"")
    return ""no one"""
111046440,Who is pointing?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        is_pointing = (person_patch.simple_query(""Is the person pointing?"") == ""yes"")
        if is_pointing:
            return person_patch.simple_query(""Who is pointing?"")
    return ""no one"""
15804389,Is the woman's hair short or long?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    return woman_patch.best_text_match([""short"", ""long""])"
11445636,The women are watching who?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The women are watching who?"")"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?," # TODO: add kitchen
    image_patch = ImagePatch(image)
    dishwasher_patches = image_patch.find(""dishwasher"")
    # Question assumes only one dishwasher patch
    if len(dishwasher_patches) == 0:
        # If no dishwasher is found, query the image directly
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    for dishwasher_patch in dishwasher_patches:
        if dishwasher_patch.horizontal_center < image_patch.horizontal_center:
            gas_stove_patches = image_patch.find(""gas stove"")
            # Question assumes only one gas stove patch
            if len(gas_stove_patches) == 0:
                # If no gas stove is found, query the image directly
                return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
            for gas_stove_patch in gas_stove_patches:
                if gas_stove_patch.simple_query(""Is the gas stove inside the kitchen?"") == ""yes"":
                    return bool_to_yesno(dishwasher_patch.verify_property(""dishwasher"", ""white"") and gas_stove_patch.verify_property(""gas stove"", ""white""))
    return ""no"""
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?," # TODO: add a way to get the color of the bed sheet
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    for baby_patch in baby_patches:
        bed_sheet_patches = image_patch.find(""bed sheet"")
        for bed_sheet_patch in bed_sheet_patches:
            if bed_sheet_patch.horizontal_center > baby_patch.horizontal_center:
                furniture_patches = image_patch.find(""furniture"")
                for furniture_patch in furniture_patches:
                    if furniture_patch.color == bed_sheet_patch.color:
                        return furniture_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    return ""no"""
758958,Is there either any red pillow or snowboard?," # assumes only one pillow and one snowboard
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is there either any red pillow or snowboard?"")
    for pillow_patch in pillow_patches:
        is_red = pillow_patch.simple_query(""Is the pillow red?"") == ""yes""
        if is_red:
            return ""yes""
    for snowboard_patch in snowboard_patches:
        is_red = snowboard_patch.simple_query(""Is the snowboard red?"") == ""yes""
        if is_red:
            return ""yes""
    return ""no"""
143816,Which place is it?," # TODO: add more places
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?," # assumes only one knife
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    # Question assumes only one knife patch
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Which side is the knife on?"")
    knife_patch = knife_patches[0]
    if knife_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17829769,What is the computer mouse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?," # assumes only one toddler patch
    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    for toddler_patch in toddler_patches:
        return toddler_patch.simple_query(""What is the toddler holding?"")"
2951242,Is the gray shirt sleeveless or short sleeved?," # TODO: add sleeveless
    image_patch = ImagePatch(image)
    gray_shirt_patches = image_patch.find(""gray shirt"")
    # Question assumes only one gray shirt patch
    if len(gray_shirt_patches) == 0:
        # If no gray shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    gray_shirt_patch = gray_shirt_patches[0]
    is_sleeveless = gray_shirt_patch.simple_query(""Is the gray shirt sleeveless?"") == ""yes""
    is_short_sleeved = gray_shirt_patch.simple_query(""Is the gray shirt short sleeved?"") == ""yes""
    return bool_to_yesno(is_sleeveless or is_short_sleeved)"
15241795,Is the tank top red?," # assumes only one tank top
    image_patch = ImagePatch(image)
    tank_top_patches = image_patch.find(""tank top"")
    if len(tank_top_patches) == 0:
        # If no tank top is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    return bool_to_yesno(tank_top_patches[0].verify_property(""tank top"", ""red""))"
13885234,Which kind of animal is in front of the rocks?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?," # assumes only one grape patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""grape""))"
6455591,What type of furniture is white?," # assumes only one white furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What type of furniture is white?"")
    return ""no furniture is white"""
1033761,What is the blue clothing item?," # assumes only one blue clothing item
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""blue""):
            return clothing_patch.simple_query(""What is the blue clothing item?"")
    return ""no blue clothing item"""
17726504,Who is wearing the glasses?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        is_wearing_glasses = (person_patch.simple_query(""Is the person wearing glasses?"") == ""yes"")
        if is_wearing_glasses:
            return person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no person is wearing glasses, pick the first person
    return person_patches[0].simple_query(""Who is wearing the glasses?"")"
13112902,Is the woman wearing a bracelet?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    for woman_patch in woman_patches:
        is_wearing_bracelet = (woman_patch.simple_query(""Is the woman wearing a bracelet?"") == ""yes"")
        if is_wearing_bracelet:
            return ""yes""
    return ""no"""
698766,What is the food that is not white?," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""white""):
            return food_patch.simple_query(""What is the food that is not white?"")
    return ""no food is not white"""
1332276,Are there both a cup and a bottle in the picture?," # assumes only one cup and one bottle
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?," # glove is a property
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for person_patch in person_patches:
        helmet_patches = image_patch.find(""helmet"")
        for helmet_patch in helmet_patches:
            if helmet_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is holding the helmet?"")
    return ""no one"""
2143247,What is the name of the food to the left of the donut that looks little?," # assumes only one donut patch
    image_patch = ImagePatch(image)
    donut_patches = image_patch.find(""donut"")
    # Question assumes only one donut patch
    if len(donut_patches) == 0:
        # If no donut is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for donut_patch in donut_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < donut_patch.horizontal_center:
                if donut_patch.simple_query(""Does the donut look little?"") == ""yes"":
                    return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    return ""no"""
3767951,Is the clock to the right or to the left of the man on the left?," # assumes only one man patch
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    for clock_patch in clock_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center < clock_patch.horizontal_center:
                return ""right""
    return ""left"""
17655180,What's the sticker on?," # assumes only one sticker
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    if len(sticker_patches) == 0:
        return image_patch.simple_query(""What's the sticker on?"")
    sticker_patch = sticker_patches[0]
    return sticker_patch.simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    for car_patch in car_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center > car_patch.horizontal_center:
                return ""yes""
    return ""no"""
7188981,Does the giraffe look adult?," # giraffe is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the giraffe look adult?"")"
16852802,Of what color are the pants?," # TODO: add color
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants is found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].best_text_match([""blue"", ""red"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""black"", ""white"", ""gray"", ""silver"", ""gold""])"
9619158,What kind of watercraft is full of men?," # assumes only one watercraft
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    watercraft_patch = watercraft_patches[0]
    men_patches = image_patch.find(""men"")
    # Question assumes only one men patch
    if len(men_patches) == 0:
        return ""no""
    for men_patch in men_patches:
        if men_patch.horizontal_center > watercraft_patch.horizontal_center:
            return watercraft_patch.simple_query(""What kind of watercraft is full of men?"")
    return ""no"""
3625225,On which side of the picture are the boats?," # assumes only one boat patch
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    boat_patch = boat_patches[0]
    if boat_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?," # assumes only one elephant patch
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    for elephant_patch in elephant_patches:
        is_large = elephant_patch.simple_query(""Does the elephant have large size?"")
        if is_large == ""yes"":
            return ""yes""
    return ""no"""
19834124,What is the girl holding?," # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    girl_patch = girl_patches[0]
    holding_patches = image_patch.find(""holding"")
    # Question assumes only one holding patch
    if len(holding_patches) == 0:
        return ""nothing""
    holding_patch = holding_patches[0]
    return holding_patch.simple_query(""What is the girl holding?"")"
4617704,Does the toilet seat that is not down appear to be white and open?," # assumes only one toilet seat
    image_patch = ImagePatch(image)
    toilet_seat_patches = image_patch.find(""toilet seat"")
    # Question assumes only one toilet seat patch
    if len(toilet_seat_patches) == 0:
        # If no toilet seat is found, query the image directly
        return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")
    for toilet_seat_patch in toilet_seat_patches:
        is_down = (toilet_seat_patch.simple_query(""Is the toilet seat down?"") == ""yes"")
        if not is_down:
            is_white = (toilet_seat_patch.simple_query(""Does the toilet seat appear to be white?"") == ""yes"")
            is_open = (toilet_seat_patch.simple_query(""Does the toilet seat appear to be open?"") == ""yes"")
            return bool_to_yesno(is_white and is_open)
    return ""no"""
5899539,Are there any bottles or mugs that are not purple?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    mug_patches = image_patch.find(""mug"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0 and len(mug_patches) == 0:
        # If no bottle or mug is found, query the image directly
        return image_patch.simple_query(""Are there any bottles or mugs that are not purple?"")
    for bottle_patch in bottle_patches:
        if not bottle_patch.verify_property(""bottle"", ""purple""):
            return ""yes""
    for mug_patch in mug_patches:
        if not mug_patch.verify_property(""mug"", ""purple""):
            return ""yes""
    return ""no"""
2631593,Which place is it?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?," # TODO: add a way to check if the person is in the living room
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    for person_patch in person_patches:
        men_patches = image_patch.find(""man"")
        for man_patch in men_patches:
            if man_patch.horizontal_center > person_patch.horizontal_center:
                return ""yes""
    return ""no"""
111054378,Is the small couch to the right or to the left of the bottle?," # assumes only one couch and one bottle
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    bottle_patches = image_patch.find(""bottle"")
    for couch_patch in couch_patches:
        for bottle_patch in bottle_patches:
            if couch_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
9392411,Is the bottle to the right or to the left of the appliance on the left?," # assumes only one appliance on the left
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    for bottle_patch in bottle_patches:
        appliance_patches = image_patch.find(""appliance"")
        # Question assumes only one appliance patch
        if len(appliance_patches) == 0:
            return ""no""
        appliance_patch = appliance_patches[0]
        if appliance_patch.horizontal_center < image_patch.horizontal_center:
            if bottle_patch.horizontal_center > appliance_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
    return ""no"""
16753829,What type of animal is sitting in the container in the bottom of the photo?," # assumes only one container
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    for container_patch in container_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return ""no""
        for animal_patch in animal_patches:
            if animal_patch.vertical_center > container_patch.vertical_center:
                return animal_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    return ""no"""
1345482,What is that train in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?," # TODO: add a way to check if the image is a photo
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    for car_patch in car_patches:
        palm_tree_patches = image_patch.find(""palm tree"")
        # Question assumes only one palm tree patch
        if len(palm_tree_patches) == 0:
            return ""no""
        for palm_tree_patch in palm_tree_patches:
            girl_patches = image_patch.find(""girl"")
            # Question assumes only one girl patch
            if len(girl_patches) == 0:
                return ""no""
            for girl_patch in girl_patches:
                if girl_patch.horizontal_center > palm_tree_patch.horizontal_center and palm_tree_patch.horizontal_center > car_patch.horizontal_center:
                    return ""yes""
    return ""no"""
459445,In which part is the silver device?," # silver device is a silver device
    image_patch = ImagePatch(image)
    silver_device_patches = image_patch.find(""silver device"")
    # Question assumes only one silver device patch
    if len(silver_device_patches) == 0:
        # If no silver device is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if silver_device_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11786203,What is the man on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?," # assumes only one door and one chair
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Is there a brown door or chair?"")
    for door_patch in door_patches:
        if door_patch.simple_query(""Is the door brown?"") == ""yes"":
            return ""door""
    for chair_patch in chair_patches:
        if chair_patch.simple_query(""Is the chair brown?"") == ""yes"":
            return ""chair""
    return ""no"""
131031372,What is the napkin in?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the napkin in?"")"
1241681,Are there any people behind the white dessert?," # dessert is a cake
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    for people_patch in people_patches:
        dessert_patches = image_patch.find(""dessert"")
        for dessert_patch in dessert_patches:
            if people_patch.horizontal_center > dessert_patch.horizontal_center:
                return ""yes""
    return ""no"""
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?," # TODO: add a way to ask for the predicate of a relational verb (in front of, to the right of, etc)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")"
8553578,What is the Pikachu doing?," # assumes only one Pikachu
    image_patch = ImagePatch(image)
    pikachu_patches = image_patch.find(""pikachu"")
    if len(pikachu_patches) == 0:
        return image_patch.simple_query(""What is the Pikachu doing?"")
    pikachu_patch = pikachu_patches[0]
    return pikachu_patch.simple_query(""What is the Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?"," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?," # assumes only one mountain patch
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""What is on the large mountains?"")
    mountain_patch = mountain_patches[0]
    return mountain_patch.simple_query(""What is on the large mountains?"")"
5107295,What is in the sky?," # sky is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?," # fruit is on watercraft
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is the fruit on?"")
    for fruit_patch in fruit_patches:
        watercraft_patches = image_patch.find(""watercraft"")
        # Question assumes only one watercraft patch
        if len(watercraft_patches) == 0:
            return ""no""
        for watercraft_patch in watercraft_patches:
            if watercraft_patch.horizontal_center > fruit_patch.horizontal_center:
                return watercraft_patch.simple_query(""What kind of watercraft is the fruit on?"")
    return ""no"""
1827218,Is the bottle in the bottom of the image?," # assumes only one bottle
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
10938155,What color is the sky?," # sky is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?," # assumes only one sail
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    if len(sail_patches) == 0:
        return image_patch.simple_query(""Does the sail look white or red?"")
    return sail_patches[0].best_text_match([""white"", ""red""])"
3662784,Do you see either any traffic lights or cars?," # TODO: add traffic light
    image_patch = ImagePatch(image)
    is_car = image_patch.exists(""car"")
    is_traffic_light = image_patch.exists(""traffic light"")
    return bool_to_yesno(is_car or is_traffic_light)"
15515711,Are there any girls to the right of the yellow helmet?," # assumes only one yellow helmet
    image_patch = ImagePatch(image)
    yellow_helmet_patches = image_patch.find(""yellow helmet"")
    # Question assumes only one yellow helmet patch
    if len(yellow_helmet_patches) == 0:
        # If no yellow helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    for yellow_helmet_patch in yellow_helmet_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if girl_patch.horizontal_center > yellow_helmet_patch.horizontal_center:
                return ""yes""
    return ""no"""
6315316,Which kind of furniture is in front of the window?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?," # assumes only one faucet
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center < image_patch.horizontal_center:
            return appliance_patch.simple_query(""What appliance is to the left of the faucet?"")
    return ""no"""
41050828,What is the color of the jacket?," # assumes only one jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    if len(jacket_patches) == 0:
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""black"", ""white""])"
610914,Is the green boat to the right or to the left of the wood house?," # assumes only one boat and one house
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    for boat_patch in boat_patches:
        house_patches = image_patch.find(""house"")
        for house_patch in house_patches:
            if boat_patch.horizontal_center > house_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
13158346,Is the woman in the bottom part of the picture?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
16318707,Are there either any colorful bikes or skateboards?," # TODO: add a way to check if there are any colorful bikes or skateboards
    image_patch = ImagePatch(image)
    is_colorful_bike = image_patch.exists(""colorful bike"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_colorful_bike or is_skateboard)"
2805654,Is the bag to the right or to the left of the bench?," # assumes only one bag and one bench
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    bench_patches = image_patch.find(""bench"")
    for bag_patch in bag_patches:
        for bench_patch in bench_patches:
            if bag_patch.horizontal_center > bench_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
15315607,What do you think is in the sky?," # sky is a property, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the truck near the gas station?"")"
12140940,"What are the headphones on, a sofa or a desk?"," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")"
727533,Does the bun look brown and toasted?," # TODO: add color
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    return bool_to_yesno(bun_patches[0].verify_property(""bun"", ""brown"") and bun_patches[0].verify_property(""bun"", ""toasted""))"
61044602,What is in the brown basket?," # assumes only one basket
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""What is in the brown basket?"")
    for basket_patch in basket_patches:
        return basket_patch.simple_query(""What is in the brown basket?"") # crop would include the basket so keep it in the query"
16827204,Is the marker different in color than the paper?," # assumes only one marker and one paper patch
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    paper_patches = image_patch.find(""paper"")
    for marker_patch in marker_patches:
        for paper_patch in paper_patches:
            if marker_patch.simple_query(""Is the marker different in color than the paper?"") == ""yes"":
                return ""yes""
    return ""no"""
1284539,Is there a racket to the right of the man on the right side?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1257391,What place is this?," # TODO: add more places
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
16223517,What do you think is the color of the large device?," # large device is a phone
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # Question assumes only one phone patch
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""What do you think is the color of the large device?"")
    return phone_patches[0].best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""black"", ""white""])"
1024280,Does the shirt look long sleeved or sleeveless?," # TODO: add more options
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    for shirt_patch in shirt_patches:
        is_long_sleeved = (shirt_patch.simple_query(""Is the shirt long sleeved?"") == ""yes"")
        is_sleeveless = (shirt_patch.simple_query(""Is the shirt sleeveless?"") == ""yes"")
        return bool_to_yesno(is_long_sleeved or is_sleeveless)"
2769463,Which kind of animal is lying in the chair?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal lying in the chair?"") == ""yes"":
            return animal_patch.simple_query(""Which kind of animal is lying in the chair?"")
    # If no animal is lying in the chair, query the image directly
    return image_patch.simple_query(""Which kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?," # TODO: fix
    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    # Question assumes only one white box patch
    if len(white_box_patches) == 0:
        # If no white box is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    for white_box_patch in white_box_patches:
        crate_patches = image_patch.find(""crate"")
        # Question assumes only one crate patch
        if len(crate_patches) == 0:
            return ""no""
        for crate_patch in crate_patches:
            chair_patches = image_patch.find(""chair"")
            # Question assumes only one chair patch
            if len(chair_patches) == 0:
                return ""no""
            for chair_patch in chair_patches:
                if chair_patch.horizontal_center > crate_patch.horizontal_center:
                    if white_box_patch.horizontal_center > crate_patch.horizontal_center:
                        return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?," # assumes only one coffee table and one lamp
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?," # assumes only one flower pot
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return bool_to_yesno(flower_pot_patches[0].verify_property(""flower pot"", ""clay""))"
191006281,Does the sky look clear and gray?," # sky is a property of the image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""clear"") and image_patch.verify_property(""sky"", ""gray""))"
681336,Do you see hats or gloves that are white?," # assumes only one hat and one glove
    image_patch = ImagePatch(image)
    hat_patches = image_patch.find(""hat"")
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        # If no hat is found, query the image directly
        return image_patch.simple_query(""Do you see hats or gloves that are white?"")
    for hat_patch in hat_patches:
        is_white = hat_patch.verify_property(""hat"", ""white"")
        if is_white:
            return ""yes""
    # If no hat is white, query the glove
    for glove_patch in glove_patches:
        is_white = glove_patch.verify_property(""glove"", ""white"")
        if is_white:
            return ""yes""
    return ""no"""
1300368,What is on the cabinet that is to the right of the keyboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")"
172394,What is the animal to the left of the tap called?," # assumes only one tap and one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        tap_patches = image_patch.find(""tap"")
        for tap_patch in tap_patches:
            if tap_patch.horizontal_center < animal_patch.horizontal_center:
                return animal_patch.simple_query(""What is the animal to the left of the tap called?"")
    return ""no"""
738176,Is the chair on the right?," # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
4194919,Is the child on the right of the picture?," # assumes only one child
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    for child_patch in child_patches:
        if child_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
3585327,Who is on the surfboard?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person on the surfboard?"") == ""yes"":
            return person_patch.simple_query(""Who is on the surfboard?"") # crop would include the surfboard so keep it in the query
    return ""no one"""
1711172,What size are the packages the candle is on top of?," # candle is on top of packages
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    for candle_patch in candle_patches:
        package_patches = image_patch.find(""package"")
        # Question assumes only one package patch
        if len(package_patches) == 0:
            return ""no""
        for package_patch in package_patches:
            if package_patch.vertical_center < candle_patch.vertical_center:
                return package_patch.simple_query(""What size are the packages the candle is on top of?"")
    return ""no"""
4353895,Who is on the snowboard on the right?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the snowboard on the right?"")"
17929304,What is the vehicle that is on the road?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?," # assumes only one pizza
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    for pizza_patch in pizza_patches:
        return pizza_patch.simple_query(""What color is the crust?"") # crop would include the crust so keep it in the query"
5672474,Is the plate to the left or to the right of the beer on the left?," # beer on the left is a relation, so ask directly
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    for plate_patch in plate_patches:
        beer_patches = image_patch.find(""beer"")
        for beer_patch in beer_patches:
            if beer_patch.horizontal_center < plate_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
11341284,What is the pattern of the mattress on the street?," # TODO: add pattern
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?," # assumes only one fence
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any boys behind the fence?"")
    for fence_patch in fence_patches:
        boy_patches = image_patch.find(""boy"")
        for boy_patch in boy_patches:
            if boy_patch.horizontal_center > fence_patch.horizontal_center:
                return ""yes""
    return ""no"""
19203395,Is the white toilet paper to the right or to the left of the toilet?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    toilet_patch = toilet_patches[0]
    white_toilet_paper_patches = image_patch.find(""white toilet paper"")
    # Question assumes only one white toilet paper patch
    if len(white_toilet_paper_patches) == 0:
        return ""no""
    white_toilet_paper_patch = white_toilet_paper_patches[0]
    if white_toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1194938,Are there any airplanes in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any airplanes in front of the building?"")"
5350205,How clean is the road that the car is on the side of?," # TODO: add more options
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    car_patch = car_patches[0]
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        return ""no""
    road_patch = road_patches[0]
    return road_patch.simple_query(""How clean is the road that the car is on the side of?"")"
4256016,"In which part of the picture is the black van, the bottom or the top?"," # TODO: check if this works
    image_patch = ImagePatch(image)
    black_van_patches = image_patch.find(""black van"")
    # Question assumes only one black van patch
    if len(black_van_patches) == 0:
        # If no black van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if black_van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?," # assumes only one person and one fence
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    for person_patch in person_patches:
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the fence doing?"")
    return ""no"""
16471124,Does the horse have a different color than the boot?," # assumes only one horse and one boot
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    horse_patch = horse_patches[0]
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        return ""no""
    boot_patch = boot_patches[0]
    return bool_to_yesno(horse_patch.color != boot_patch.color)"
958247,Is the mouse to the right of a chair?," # assumes only one mouse and one chair
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    chair_patches = image_patch.find(""chair"")
    if len(mouse_patches) == 0 or len(chair_patches) == 0:
        return ""no""
    mouse_patch = mouse_patches[0]
    chair_patch = chair_patches[0]
    if mouse_patch.horizontal_center > chair_patch.horizontal_center:
        return ""yes""
    return ""no"""
11179512,The basket made of plastic is what color?," # assumes only one basket
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    return basket_patches[0].best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""black"", ""white""])"
8816272,Do you see any elephant to the left of the bird?," # assumes only one bird patch
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
    for elephant_patch in elephant_patches:
        if elephant_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
11168592,What is the animal in front of the lamp?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the jacket?"")
    for person_patch in person_patches:
        is_wearing_jacket = (person_patch.simple_query(""Is the person wearing a jacket?"") == ""yes"")
        if is_wearing_jacket:
            return person_patch.simple_query(""Who is wearing the jacket?"") # crop would include the jacket so keep it in the query
    # If no person is wearing a jacket, pick the first person
    return person_patches[0].simple_query(""Who is wearing the jacket?"")"
7398502,What is the food to the left of the girl in the bottom of the photo?," # TODO: add a way to specify the position of the object
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    for food_patch in food_patches:
        girl_patches = image_patch.find(""girl"")
        # Question assumes only one girl patch
        if len(girl_patches) == 0:
            return ""no""
        for girl_patch in girl_patches:
            if food_patch.horizontal_center < girl_patch.horizontal_center and food_patch.vertical_center < image_patch.vertical_center:
                return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    return ""no"""
5145864,What is the device that the camera is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that the camera is in front of?"")"
788143,Is the man on the surfboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the surfboard?"")"
15854501,What device has the same color as the device in the box?," # TODO: add color
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    device_patch = device_patches[0]
    device_in_box_patches = image_patch.find(""device in box"")
    # Question assumes only one device in box patch
    if len(device_in_box_patches) == 0:
        return ""no""
    device_in_box_patch = device_in_box_patches[0]
    return device_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""black"", ""white""])"
3228067,What is the child wearing?," # assumes only one child
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    return child_patches[0].simple_query(""What is the child wearing?"")"
6817336,Is the blue sky behind a cathedral?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue sky behind a cathedral?"")"
6347271,"In which part of the image is the yellow pepper, the bottom or the top?"," # TODO: add more options
    image_patch = ImagePatch(image)
    yellow_pepper_patches = image_patch.find(""yellow pepper"")
    # Question assumes only one yellow pepper patch
    if len(yellow_pepper_patches) == 0:
        # If no yellow pepper is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    if yellow_pepper_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?," # assumes only one woman and one animal
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    animal_patches = image_patch.find(""animal"")
    for woman_patch in woman_patches:
        for animal_patch in animal_patches:
            if woman_patch.horizontal_center > animal_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is the woman feeding?"")
    return ""no animal"""
3427727,On which side is the bucket?," # assumes only one bucket
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    bucket_patch = bucket_patches[0]
    if bucket_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
31050314,Is the small chimney in the bottom part of the picture?," # chimney is a small object
    image_patch = ImagePatch(image)
    chimney_patches = image_patch.find(""chimney"")
    # Question assumes only one chimney patch
    if len(chimney_patches) == 0:
        # If no chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    chimney_patch = chimney_patches[0]
    if chimney_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3503396,Are the pants purple?," # pants is a plural noun
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants is found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    return bool_to_yesno(pants_patches[0].verify_property(""pants"", ""purple""))"
11742862,Which kind of furniture is to the right of the paper towels?," # assumes only one paper towel patch
    image_patch = ImagePatch(image)
    paper_towel_patches = image_patch.find(""paper towel"")
    # Question assumes only one paper towel patch
    if len(paper_towel_patches) == 0:
        # If no paper towel is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    for paper_towel_patch in paper_towel_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > paper_towel_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    return ""no"""
5891809,What kind of furniture is gray?," # assumes only one gray furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture gray?"") == ""yes"":
            return furniture_patch.simple_query(""What kind of furniture is gray?"")
    return ""no furniture is gray"""
5370528,Is the hair white and long?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    hair_patch = hair_patches[0]
    is_white = hair_patch.verify_property(""hair"", ""white"")
    is_long = hair_patch.verify_property(""hair"", ""long"")
    return bool_to_yesno(is_white and is_long)"
781153,Do you see trains near the lamp post that looks white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")"
5543456,Is the container to the left of the person that wears bracelets?," # assumes only one person wearing bracelets
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
    for container_patch in container_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center < container_patch.horizontal_center:
                return ""yes""
    return ""no"""
163134,What do you think is on the roof?," # assumes only one roof patch
    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    if len(roof_patches) == 0:
        # If no roof is found, query the image directly
        return image_patch.simple_query(""What do you think is on the roof?"")
    return roof_patches[0].simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?," # shoe is a noun, so go step by step
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
5511395,What is wrapped in paper?," # assumes only one object wrapped in paper
    image_patch = ImagePatch(image)
    wrapped_patches = image_patch.find(""wrapped"")
    # Question assumes only one wrapped patch
    if len(wrapped_patches) == 0:
        # If no wrapped is found, query the image directly
        return image_patch.simple_query(""What is wrapped in paper?"")
    for wrapped_patch in wrapped_patches:
        paper_patches = image_patch.find(""paper"")
        for paper_patch in paper_patches:
            if paper_patch.horizontal_center > wrapped_patch.horizontal_center:
                return wrapped_patch.simple_query(""What is wrapped in paper?"")
    return ""no"""
5611256,Are there any couches in the picture?," # assumes only one couch
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    return bool_to_yesno(len(couch_patches) > 0)"
1162826,The man is in what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is in what?"")"
81020685,Which color is the small house?," # assumes only one small house
    image_patch = ImagePatch(image)
    small_house_patches = image_patch.find(""small house"")
    if len(small_house_patches) == 0:
        return image_patch.simple_query(""Which color is the small house?"")
    small_house_patch = small_house_patches[0]
    return small_house_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""black"", ""white""])"
19640724,Who is in the bathroom?," # assumes only one person in the bathroom
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person in the bathroom?"") == ""yes"":
            return person_patch.simple_query(""Who is in the bathroom?"")
    return ""no one"""
289960,Do you see a racket to the right of the boy that is looking at the tie?," # racket is a relational verb
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    boy_patch = boy_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    racket_patch = racket_patches[0]
    if racket_patch.horizontal_center > boy_patch.horizontal_center:
        return ""yes""
    return ""no"""
9957748,Does the hair appear to be long and brown?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair appear to be long and brown?"")
    hair_patch = hair_patches[0]
    return bool_to_yesno(hair_patch.verify_property(""hair"", ""long"") and hair_patch.verify_property(""hair"", ""brown""))"
21031610,What is the shoe that looks black and white resting on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?," # assumes only one pillow and one animal
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    animal_patches = image_patch.find(""animal"")
    if len(pillow_patches) == 0 or len(animal_patches) == 0:
        # If no pillow or animal is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    pillow_patch = pillow_patches[0]
    animal_patch = animal_patches[0]
    if pillow_patch.vertical_center > animal_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
457770,What kind of clothing is striped?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing striped?"") == ""yes"":
            return clothing_patch.simple_query(""What kind of clothing is striped?"")
    return ""no clothing is striped"""
12603153,Are the child's eyes blue and open?," # assumes only one child
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    child_patch = child_patches[0]
    is_blue = child_patch.verify_property(""eyes"", ""blue"")
    is_open = child_patch.verify_property(""eyes"", ""open"")
    return bool_to_yesno(is_blue and is_open)"
9480973,What is located on top of the tub?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?," # assumes only one fork and one white plate
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    for fork_patch in fork_patches:
        white_plate_patches = image_patch.find(""white plate"")
        for white_plate_patch in white_plate_patches:
            if fork_patch.horizontal_center > white_plate_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
13420253,On which side of the photo is the chair?," # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?," # assumes only one label
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    if len(label_patches) == 0:
        return image_patch.simple_query(""What is the label on?"")
    label_patch = label_patches[0]
    return label_patch.best_text_match([""bottle"", ""can"", ""cup"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", ""jar"", """
3322787,What bird is to the left of the person that is wearing a shirt?," # assumes only one person wearing a shirt
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            bird_patches = image_patch.find(""bird"")
            # Question assumes only one bird patch
            if len(bird_patches) == 0:
                return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
            for bird_patch in bird_patches:
                if bird_patch.horizontal_center < person_patch.horizontal_center:
                    return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")"
6399594,On which side is the man?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6930120,Is the glass bowl on the right or on the left?," # assumes only one glass bowl
    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    # Question assumes only one glass bowl patch
    if len(glass_bowl_patches) == 0:
        # If no glass bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    glass_bowl_patch = glass_bowl_patches[0]
    if glass_bowl_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
12619961,What vehicles are to the left of the taxi?," # assumes only one taxi
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    for taxi_patch in taxi_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            return ""no""
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < taxi_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicles are to the left of the taxi?"")
    return ""no"""
13362315,Is the basket on the shelf black and empty?," # TODO: add color
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    for basket_patch in basket_patches:
        is_on_shelf = basket_patch.simple_query(""Is the basket on the shelf?"") == ""yes""
        is_empty = basket_patch.simple_query(""Is the basket empty?"") == ""yes""
        if is_on_shelf and is_empty:
            return ""yes""
    return ""no"""
3830854,What is the animal that is standing next to the donkey that is standing in the hay?," # TODO: add more animals
    image_patch = ImagePatch(image)
    donkey_patches = image_patch.find(""donkey"")
    # Question assumes only one donkey patch
    if len(donkey_patches) == 0:
        # If no donkey is found, query the image directly
        return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    for donkey_patch in donkey_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return ""no""
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > donkey_patch.horizontal_center:
                return animal_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    return ""no"""
18382324,Is this a bed or a table?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""bed"", ""table""])"
18104571,"Which animal is that, a bird or a cat?"," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    animal_patch = animal_patches[0]
    return animal_patch.best_text_match([""bird"", ""cat""])"
2913379,Do you see any fence or pot?," # fence or pot
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)"
9294271,What is in front of the fence the zebra is kept in?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")"
10741434,What is the vegetable that is on top of the plate called?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    plate_patch = plate_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.vertical_center < plate_patch.vertical_center:
            return vegetable_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    return ""no"""
765962,Where is the car?," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""Where is the car?"")
    car_patch = car_patches[0]
    return car_patch.simple_query(""Where is the car?"")"
12399262,Is there either a yellow truck or airplane?," # yellow is a property
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)"
13964213,Is the man on the left of the photo?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    man_patch = man_patches[0]
    if man_patch.left < image_patch.left:
        return ""yes""
    return ""no"""
16171369,What is covered in the snow?," # snow is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?," # assumes only one plastic bottle
    image_patch = ImagePatch(image)
    plastic_bottle_patches = image_patch.find(""plastic bottle"")
    if len(plastic_bottle_patches) == 0:
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    plastic_bottle_patch = plastic_bottle_patches[0]
    if plastic_bottle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5858491,Do you see any ropes on the fence that is on the left of the picture?," # fence is on the left of the picture
    image_patch = ImagePatch(image)
    rope_patches = image_patch.find(""rope"")
    # Question assumes only one rope patch
    if len(rope_patches) == 0:
        # If no rope is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    for rope_patch in rope_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center < image_patch.horizontal_center:
                return ""yes""
    return ""no"""
17834539,Are there any lamps in the scene?," # assumes only one lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    return bool_to_yesno(len(lamp_patches) > 0)"
15658176,Who is wearing a helmet?," # helmet is a property
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        is_wearing_helmet = (person_patch.simple_query(""Is the person wearing a helmet?"") == ""yes"")
        if is_wearing_helmet:
            return person_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no person is wearing a helmet, pick the first person
    return person_patches[0].simple_query(""Who is wearing a helmet?"")"
14372400,Does that coat have red color?," # assumes only one coat
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red""))"
411886,Are there any curtains or blankets in this scene?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    remote_patches = image_patch.find(""remote"")
    # Question assumes only one remote patch
    if len(remote_patches) == 0:
        return ""no""
    for remote_patch in remote_patches:
        if remote_patch.horizontal_center < man_patch.horizontal_center:
            return man_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    return ""no"""
51039491,Is the fence black or red?," # fence is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the fence black or red?"")"
7425912,What animal is standing in the field?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing in the field?"")
    return animal_patches[0].simple_query(""What animal is standing in the field?"")"
13136338,What animal is in front of the dog which is to the right of the bird?," # assumes only one dog and one bird
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one dog and one bird patch
    if len(dog_patches) == 0 or len(bird_patches) == 0:
        # If no dog or bird is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    dog_patch = dog_patches[0]
    bird_patch = bird_patches[0]
    if dog_patch.horizontal_center > bird_patch.horizontal_center:
        return dog_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    else:
        return bird_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")"
3775066,Which color are the cabinets in the bottom of the picture?," # assumes only one cabinet patch
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.vertical_center < image_patch.vertical_center:
        return cabinet_patch.best_text_match([""blue"", ""green"", ""red"", ""yellow""])
    else:
        return cabinet_patch.best_text_match([""blue"", ""green"", ""red"", ""yellow""])"
17206239,Is the happy girl to the right of a player?," # assumes only one happy girl and one player
    image_patch = ImagePatch(image)
    happy_girl_patches = image_patch.find(""happy girl"")
    player_patches = image_patch.find(""player"")
    for happy_girl_patch in happy_girl_patches:
        for player_patch in player_patches:
            if player_patch.horizontal_center > happy_girl_patch.horizontal_center:
                return ""yes""
    return ""no"""
2992517,"What piece of furniture is not wooden, the table or the chair?"," # assumes only one table and one chair
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    for table_patch in table_patches:
        is_wooden = table_patch.verify_property(""table"", ""wooden"")
        if not is_wooden:
            return table_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    # If no table is wooden, query the chair
    for chair_patch in chair_patches:
        is_wooden = chair_patch.verify_property(""chair"", ""wooden"")
        if not is_wooden:
            return chair_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    # If no chair is wooden, query the image directly
    return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")"
1827558,Which side of the image is the kettle on?," # assumes only one kettle
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    for kettle_patch in kettle_patches:
        if kettle_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
2785208,Where is the man?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""Where is the man?"")"
6623967,Is the baby near the countertop chewing a computer mouses?," # TODO: add mouse
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouses?"")
    for baby_patch in baby_patches:
        is_near_countertop = (baby_patch.simple_query(""Is the baby near the countertop?"") == ""yes"")
        is_chewing_mouse = (baby_patch.simple_query(""Is the baby chewing a computer mouses?"") == ""yes"")
        if is_near_countertop and is_chewing_mouse:
            return ""yes""
    return ""no"""
12804807,Is the small bottle open or closed?," # bottle is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the small bottle open or closed?"")"
18437691,Is the clock small or large?," # TODO: add a way to check if the clock is small or large
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    return clock_patches[0].best_text_match([""small"", ""large""])"
9482318,Are there either any glasses or bottles in this photo?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_glass = image_patch.exists(""glass"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glass or is_bottle)"
12362819,Is the sky blue or dark?," # sky is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""blue"", ""dark""])"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?," # TODO: add a way to check if the cup is on the shelf
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    for shelf_patch in shelf_patches:
        cup_patches = image_patch.find(""cup"")
        # Question assumes only one cup patch
        if len(cup_patches) == 0:
            return ""no""
        for cup_patch in cup_patches:
            if cup_patch.horizontal_center > shelf_patch.horizontal_center:
                return shelf_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    return ""no"""
1416636,Are there both bridges and chandeliers in this photograph?," # assumes only one bridge and one chandelier
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?"," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?," # plate or orange
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?," # assumes only one door
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    if len(door_patches) == 0:
        return ""no""
    return ""yes"""
13562221,What's the bear on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the bear on?"")"
9536851,Is the woman in front of the trees holding scissors?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")"
9682405,What is on the machine?," # assumes only one machine
    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    # Question assumes only one machine patch
    if len(machine_patches) == 0:
        # If no machine is found, query the image directly
        return image_patch.simple_query(""What is on the machine?"")
    return machine_patches[0].simple_query(""What is on the machine?"")"
8649435,What is on the white wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?," # assumes only one logo
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    if len(logo_patches) == 0:
        return ""no""
    logo_patch = logo_patches[0]
    return bool_to_yesno(logo_patch.verify_property(""logo"", ""red""))"
14301289,What type of vehicle is to the left of the white vehicle?," # assumes only one white vehicle
    image_patch = ImagePatch(image)
    white_vehicle_patches = image_patch.find(""white vehicle"")
    # Question assumes only one white vehicle patch
    if len(white_vehicle_patches) == 0:
        # If no white vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    for white_vehicle_patch in white_vehicle_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < white_vehicle_patch.horizontal_center:
                return vehicle_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    return ""no vehicle to the left"""
523976,Which kind of vehicle is large?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    for vehicle_patch in vehicle_patches:
        is_large = (vehicle_patch.simple_query(""Is the vehicle large?"") == ""yes"")
        if is_large:
            return vehicle_patch.simple_query(""Which kind of vehicle is large?"") # crop would include the vehicle so keep it in the query
    # If no vehicle is large, pick the first vehicle
    return vehicle_patches[0].simple_query(""Which kind of vehicle is large?"")"
3423213,Who is in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?," # assumes only one ottoman and one brown chair
    image_patch = ImagePatch(image)
    ottoman_patches = image_patch.find(""ottoman"")
    brown_chair_patches = image_patch.find(""brown chair"")
    for ottoman_patch in ottoman_patches:
        for brown_chair_patch in brown_chair_patches:
            if ottoman_patch.horizontal_center > brown_chair_patch.horizontal_center:
                return ""right""
    return ""left"""
5716578,Is there a laptop on the bed near the magazines?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")"
8215791,Is the porcelain toilet to the left or to the right of the small trash can?," # assumes only one porcelain toilet and one small trash can
    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    small_trash_can_patches = image_patch.find(""small trash can"")
    porcelain_toilet_patch = porcelain_toilet_patches[0]
    small_trash_can_patch = small_trash_can_patches[0]
    if porcelain_toilet_patch.horizontal_center < small_trash_can_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17528455,What is in front of the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?," # goggles and gloves are the same object
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles is found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"")
    goggles_patch = goggles_patches[0]
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one gloves patch
    if len(gloves_patches) == 0:
        return ""no""
    gloves_patch = gloves_patches[0]
    return bool_to_yesno(goggles_patch.color != gloves_patch.color)"
947724,Is there any purple pillow or kite in this photograph?," # TODO: add a way to check if there is a kite
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is there any purple pillow or kite in this photograph?"")
    for pillow_patch in pillow_patches:
        is_purple = pillow_patch.verify_property(""pillow"", ""purple"")
        if is_purple:
            return ""yes""
    return ""no"""
5679522,"What are the people to the right of the man doing, standing or sitting?"," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > man_patch.horizontal_center:
            return people_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    return ""no"""
15492262,Which kind of furniture is white?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture white?"") == ""yes"":
            return furniture_patch.simple_query(""Which kind of furniture is white?"") # crop would include the white so keep it in the query
    return furniture_patches[0].simple_query(""Which kind of furniture is white?"")"
151032547,Is the bear on the right side?," # assumes only one bear patch
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    bear_patch = bear_patches[0]
    if bear_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
5698674,Are there either any planters or benches?," # assumes only one planter or bench
    image_patch = ImagePatch(image)
    is_planters = image_patch.exists(""planter"")
    is_benches = image_patch.exists(""bench"")
    return bool_to_yesno(is_planters or is_benches)"
19397103,What is the person that is standing staring at?," # asks for the predicate of a relational verb (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person that is standing staring at?"")"
11630681,What is the color of the necklace?," # assumes only one necklace
    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    if len(necklace_patches) == 0:
        return image_patch.simple_query(""What is the color of the necklace?"")
    return necklace_patches[0].best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""pink"", ""orange"", ""brown"", ""black"", ""white"", ""gray"", ""silver"", ""gold"", ""beige"", ""tan"", ""maroon"", ""navy"", ""aqua"", ""lime"", ""olive"", ""teal"", ""fuchsia"", ""lavender"", ""coral"", ""salmon"", ""chocolate"", ""plum"", ""turquoise"", ""indigo"", ""magenta"", ""violet"", ""rose"", ""auburn"", ""ivory"", ""cream"", ""tan"", ""beige"", ""khaki"", ""mustard"", ""copper"", ""bronze"", ""cinnamon"", ""caramel"", ""cocoa"", ""chocolate"", ""mocha"", ""espresso"", ""latte"", ""cappuccino"", ""vanilla"", ""strawberry"", ""raspberry"", ""cherry"", ""peach"", ""apricot"", ""orange"", ""lemon"", ""lime"", ""grape"", ""grapefruit"", ""watermelon"", ""melon"", ""pineapple"", ""kiwi"", ""mango"", ""papaya"", ""pomegranate"", ""pear"", ""plum"", ""peach"", ""nectarine"", ""apricot"", ""cherry"", ""strawberry"", ""raspberry"", ""blueberry"", ""blackberry"", ""cranberry"", ""gooseberry"", ""currant"", ""fig"", ""date"", ""prune"", ""raisin"", ""grape"", ""grapefruit"", ""orange"", ""lemon"", ""lime"", ""tangerine"", ""clementine"", ""mandarin"", ""pomegranate"", ""watermelon"", ""melon"", ""pineapple"", ""kiwi"", ""mango"", ""papaya"", ""pomegranate"", ""pear"", ""plum"", ""peach"", ""nectarine"", ""apricot"", ""cherry"", ""strawberry"", ""raspberry"", ""blueberry"", ""blackberry"", ""cranberry"", ""gooseberry"", ""currant"", """
248245,Is the table to the left or to the right of the fence?," # assumes only one table and one fence
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    fence_patches = image_patch.find(""fence"")
    if len(table_patches) == 0 or len(fence_patches) == 0:
        # If no table or fence is found, query the image directly
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    table_patch = table_patches[0]
    fence_patch = fence_patches[0]
    if table_patch.horizontal_center < fence_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
837033,Are there round windows or doors?," # round windows or doors
    image_patch = ImagePatch(image)
    is_round_window = image_patch.exists(""round window"")
    is_round_door = image_patch.exists(""round door"")
    return bool_to_yesno(is_round_window or is_round_door)"
5249150,Are there any bears or napkins in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    person_patch = person_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < person_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    return ""no"""
61006749,Who is dressed in pink?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is dressed in pink?"")
    for person_patch in person_patches:
        is_dressed_in_pink = (person_patch.simple_query(""Is the person dressed in pink?"") == ""yes"")
        if is_dressed_in_pink:
            return person_patch.simple_query(""Who is dressed in pink?"") # crop would include the shirt so keep it in the query
    # If no person is dressed in pink, pick the first person
    return person_patches[0].simple_query(""Who is dressed in pink?"")"
6122955,Does the pillow have yellow color?," # assumes only one pillow
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return bool_to_yesno(pillow_patches[0].verify_property(""pillow"", ""yellow""))"
6861738,Is the old woman to the right or to the left of the faucet?," # assumes only one old woman and one faucet
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    faucet_patches = image_patch.find(""faucet"")
    if len(old_woman_patches) == 0 or len(faucet_patches) == 0:
        # If no old woman or faucet is found, query the image directly
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    old_woman_patch = old_woman_patches[0]
    faucet_patch = faucet_patches[0]
    if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15833048,Which kind of animal is on the road?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal on the road?"") == ""yes"":
            return animal_patch.simple_query(""Which kind of animal is on the road?"")
    return ""no animal is on the road"""
9524339,What animal is large?," # assumes only one large animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""large""):
            return animal_patch.simple_query(""What animal is large?"")
    return ""no animal is large"""
18255749,How clean are the sheets the pillow is to the right of?," # pillow is to the right of sheets
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheets_patches = image_patch.find(""sheets"")
    # Question assumes only one sheets patch
    if len(sheets_patches) == 0:
        return ""no""
    sheets_patch = sheets_patches[0]
    if pillow_patch.horizontal_center > sheets_patch.horizontal_center:
        return sheets_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    return ""no"""
19797097,What's the man wearing?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What's the man wearing?"")"
6899090,Is the man to the right or to the left of the appliance that looks white?," # assumes only one appliance patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""no""
    appliance_patch = appliance_patches[0]
    if appliance_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
3357701,Does the dog to the right of the other dog have white color?," # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    for dog_patch in dog_patches:
        other_dog_patches = image_patch.find(""dog"")
        for other_dog_patch in other_dog_patches:
            if other_dog_patch.horizontal_center > dog_patch.horizontal_center:
                return bool_to_yesno(dog_patch.verify_property(""dog"", ""white""))
    return ""no"""
2829418,What's the girl holding?," # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What's the girl holding?"")
    girl_patch = girl_patches[0]
    holding_patches = image_patch.find(""holding"")
    # Question assumes only one holding patch
    if len(holding_patches) == 0:
        return ""nothing""
    holding_patch = holding_patches[0]
    return holding_patch.simple_query(""What's the girl holding?"")"
15930109,Which kind of vehicle is blue?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""blue""):
            return vehicle_patch.simple_query(""Which kind of vehicle is blue?"")
    return ""no vehicle is blue"""
1525382,What type of vegetable is on the food with the cheese?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")"
8548980,Are there either players or hand soaps?," # TODO: add a way to check if there are both players and hand soaps
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?"," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""made""):
            return food_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    return ""no"""
6423906,Which kind of food is on the plate?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    plate_patch = plate_patches[0]
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        return ""no""
    for food_patch in food_patches:
        if food_patch.horizontal_center > plate_patch.horizontal_center:
            return food_patch.simple_query(""Which kind of food is on the plate?"")
    return ""no"""
1993231,Are the animals in the image of different types?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    for animal_patch in animal_patches:
        is_different_type = (animal_patch.simple_query(""Is the animal a different type?"") == ""yes"")
        if is_different_type:
            return ""yes""
    return ""no"""
13949656,Are there any people to the left of the tray?," # assumes only one tray
    image_patch = ImagePatch(image)
    tray_patches = image_patch.find(""tray"")
    # Question assumes only one tray patch
    if len(tray_patches) == 0:
        # If no tray is found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for tray_patch in tray_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center < tray_patch.horizontal_center:
                return ""yes""
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?," # TODO: add more properties
    image_patch = ImagePatch(image)
    pineapple_patches = image_patch.find(""fresh pineapple"")
    # Question assumes only one pineapple patch
    if len(pineapple_patches) == 0:
        # If no pineapple is found, query the image directly
        return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")
    return bool_to_yesno(pineapple_patches[0].verify_property(""fresh pineapple"", ""ripe""))"
9392591,Are there chairs or smoothies?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?," # assumes only one sheep patch
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    sheep_patch = sheep_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > sheep_patch.horizontal_center:
            return animal_patch.simple_query(""Which kind of animal is to the right of the sheep?"") # crop would include the sheep so keep it in the query
    # If no animal is to the right of the sheep, query the image directly
    return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")"
9896138,Are there any boxes to the left of the screen in the picture?," # TODO: check if this is correct
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in box_patches:
        if box_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1400333,What do you think is the man on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the boot white or orange?"")"
3659880,Does the wood boat have silver color?," # assumes only one wood boat
    image_patch = ImagePatch(image)
    wood_boat_patches = image_patch.find(""wood boat"")
    if len(wood_boat_patches) == 0:
        # If no wood boat is found, query the image directly
        return image_patch.simple_query(""Does the wood boat have silver color?"")
    return bool_to_yesno(wood_boat_patches[0].verify_property(""wood boat"", ""silver""))"
1827802,Is the red pot on the appliance to the right of the mixer?," # assumes only one red pot
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    for red_pot_patch in red_pot_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center > red_pot_patch.horizontal_center:
                mixer_patches = image_patch.find(""mixer"")
                for mixer_patch in mixer_patches:
                    if mixer_patch.horizontal_center > appliance_patch.horizontal_center:
                        return ""yes""
    return ""no"""
14809102,The phone that is in front of the camera is of what color?," # TODO: add color
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # Question assumes only one phone patch
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    for phone_patch in phone_patches:
        if phone_patch.horizontal_center < image_patch.horizontal_center:
            return phone_patch.simple_query(""The phone that is in front of the camera is of what color?"") # crop would include the camera so keep it in the query
    return ""no"""
61001545,What type of food is to the left of the silver spoon?," # assumes only one silver spoon
    image_patch = ImagePatch(image)
    silver_spoon_patches = image_patch.find(""silver spoon"")
    # Question assumes only one silver spoon patch
    if len(silver_spoon_patches) == 0:
        # If no silver spoon is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    for silver_spoon_patch in silver_spoon_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < silver_spoon_patch.horizontal_center:
                return food_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    return ""no food"""
799463,Are there both a window and a door in the picture?," # assumes only one window and one door
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
11260725,Does the water have small size and white color?," # water is a noun, so go step by step
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Does the water have small size and white color?"")
    for water_patch in water_patches:
        is_small = water_patch.simple_query(""Is the water small?"") == ""yes""
        is_white = water_patch.simple_query(""Is the water white?"") == ""yes""
        if is_small and is_white:
            return ""yes""
    return ""no"""
2397653,Are there any fences that are white?," # assumes only one fence
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any fences that are white?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""yes""
    return ""no"""
1554603,Who is holding the animal?," # assumes only one animal and one person
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    person_patches = image_patch.find(""person"")
    for animal_patch in animal_patches:
        for person_patch in person_patches:
            if animal_patch.horizontal_center < person_patch.horizontal_center:
                return person_patch.simple_query(""Who is holding the animal?"")
    return ""no one"""
11606818,Is the man to the right or to the left of the people the stroller is to the right of?," # TODO: fix
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    people_patch = people_patches[0]
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        return ""no""
    stroller_patch = stroller_patches[0]
    if stroller_patch.horizontal_center > people_patch.horizontal_center:
        if man_patch.horizontal_center > people_patch.horizontal_center:
            return ""right""
        else:
            return ""left""
    else:
        if man_patch.horizontal_center > people_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
8988476,What kind of furniture is presented in this photo?," # furniture is a class of objects
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes one backpack patch
    if len(backpack_patches) == 0:
        return ""no""
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center > man_patch.horizontal_center:
            return man_patch.simple_query(""What is the man with the backpack holding?"")
    return ""no"""
91058050,Are there both mouse pads and computer mice in the photograph?," # mouse pad and computer mouse
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_computer_mouse = image_patch.exists(""computer mouse"")
    return bool_to_yesno(is_mouse_pad and is_computer_mouse)"
1972064,Is the person in front of the tree wearing jeans?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")"
167162,Is there a bike to the right of the purse that is to the right of the woman?," # assumes only one woman, purse, and bike
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    woman_patch = woman_patches[0]
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        return ""no""
    purse_patch = purse_patches[0]
    bike_patches = image_patch.find(""bike"")
    # Question assumes only one bike patch
    if len(bike_patches) == 0:
        return ""no""
    bike_patch = bike_patches[0]
    if bike_patch.horizontal_center > purse_patch.horizontal_center and purse_patch.horizontal_center > woman_patch.horizontal_center:
        return ""yes""
    return ""no"""
1695388,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?," # assumes only one woman and one man
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    # Question assumes only one woman and one man patch
    if len(woman_patches) == 0 or len(man_patches) == 0:
        # If no woman or man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    woman_patch = woman_patches[0]
    man_patch = man_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16921984,What is the bent man to the right of the other men doing?," # assumes only one bent man
    image_patch = ImagePatch(image)
    bent_man_patches = image_patch.find(""bent man"")
    # Question assumes only one bent man patch
    if len(bent_man_patches) == 0:
        # If no bent man is found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    bent_man_patch = bent_man_patches[0]
    other_man_patches = image_patch.find(""man"")
    # Question assumes only one other man patch
    if len(other_man_patches) == 0:
        return ""no""
    for other_man_patch in other_man_patches:
        if other_man_patch.horizontal_center > bent_man_patch.horizontal_center:
            return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return ""no"""
12175564,What animal are the men to the right of the girl leading?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    girl_patch = girl_patches[0]
    men_patches = image_patch.find(""men"")
    # Question assumes only one men patch
    if len(men_patches) == 0:
        return ""no""
    for men_patch in men_patches:
        if men_patch.horizontal_center > girl_patch.horizontal_center:
            return men_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    return ""no"""
1219606,On which side of the image is the house?," # left or right
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1770499,Is the black suitcase to the right or to the left of the person on the left?," # assumes only one suitcase and one person
    image_patch = ImagePatch(image)
    suitcase_patches = image_patch.find(""suitcase"")
    person_patches = image_patch.find(""person"")
    # Question assumes only one suitcase patch
    if len(suitcase_patches) == 0:
        # If no suitcase is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    for suitcase_patch in suitcase_patches:
        for person_patch in person_patches:
            if suitcase_patch.horizontal_center > person_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
5282406,Is the pot to the left of a chair?," # assumes only one pot and one chair
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    chair_patches = image_patch.find(""chair"")
    if len(pot_patches) == 0 or len(chair_patches) == 0:
        return ""no""
    pot_patch = pot_patches[0]
    chair_patch = chair_patches[0]
    if pot_patch.horizontal_center < chair_patch.horizontal_center:
        return ""yes""
    return ""no"""
10914401,Where are the people?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    person_patch = person_patches[0]
    if person_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
1919722,What animal is eating the grass?," # assumes only one animal and one grass patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal eating the grass?"") == ""yes"":
            return animal_patch.simple_query(""What animal is eating the grass?"")
    return ""no animal is eating the grass"""
9681008,Who is wearing a helmet?," # helmet is a property
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        is_wearing_helmet = (person_patch.simple_query(""Is the person wearing a helmet?"") == ""yes"")
        if is_wearing_helmet:
            return person_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no person is wearing a helmet, pick the first person
    return person_patches[0].simple_query(""Who is wearing a helmet?"")"
16861675,Who is on the surfboard in the middle of the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")"
10947426,What is the color of the lizard beside the banana?," # assumes only one lizard and one banana
    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    for lizard_patch in lizard_patches:
        banana_patches = image_patch.find(""banana"")
        for banana_patch in banana_patches:
            if banana_patch.horizontal_center > lizard_patch.horizontal_center:
                return lizard_patch.best_text_match([""green"", ""yellow"", ""red"", ""blue"", ""purple"", ""orange"", ""brown"", ""pink"", ""gray"", ""black"", ""white""])
    return ""no"""
18200684,Is the wine glass in the top or in the bottom part?," # assumes only one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?," # assumes only one vehicle and one people patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    people_patches = image_patch.find(""people"")
    for vehicle_patch in vehicle_patches:
        for people_patch in people_patches:
            if vehicle_patch.horizontal_center < people_patch.horizontal_center:
                return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    return ""no"""
171012637,Is the teddy bear to the right of a suitcase?," # teddy bear is a relational verb
    image_patch = ImagePatch(image)
    teddy_bear_patches = image_patch.find(""teddy bear"")
    # Question assumes only one teddy bear patch
    if len(teddy_bear_patches) == 0:
        # If no teddy bear is found, query the image directly
        return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"")
    for teddy_bear_patch in teddy_bear_patches:
        suitcase_patches = image_patch.find(""suitcase"")
        for suitcase_patch in suitcase_patches:
            if suitcase_patch.horizontal_center > teddy_bear_patch.horizontal_center:
                return ""yes""
    return ""no"""
19861372,Is the woman's hair long or short?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    return woman_patch.best_text_match([""long"", ""short""])"
623889,Are both the television and the armchair the same color?," # assumes only one armchair and one television
    image_patch = ImagePatch(image)
    is_television = image_patch.exists(""television"")
    is_armchair = image_patch.exists(""armchair"")
    if is_television and is_armchair:
        television_patch = image_patch.find(""television"")[0]
        armchair_patch = image_patch.find(""armchair"")[0]
        return bool_to_yesno(television_patch.verify_property(""television"", ""color"") == armchair_patch.verify_property(""armchair"", ""color""))
    return ""no"""
4917605,Is the shoe white or brown?," # shoe is a noun, so go step by step
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
91055143,What is on the table?," # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    table_patch = table_patches[0]
    return table_patch.simple_query(""What is on the table?"")"
5430643,What do you think sits on the plate to the left of the tomato?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")"
523936,Is the woman in the top part of the picture?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    if woman_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?," # assumes only one bottle and one nightstand
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    nightstand_patches = image_patch.find(""nightstand"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    for bottle_patch in bottle_patches:
        for nightstand_patch in nightstand_patches:
            if nightstand_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""yes""
    return ""no"""
14292161,The pot is of which color?," # TODO: add color
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""black"", ""white""])"
17495150,"What device is black, the microphone or the laptop?"," # assumes only one microphone and one laptop
    image_patch = ImagePatch(image)
    microphone_patches = image_patch.find(""microphone"")
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one microphone patch
    if len(microphone_patches) == 0:
        # If no microphone is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    for microphone_patch in microphone_patches:
        if microphone_patch.verify_property(""microphone"", ""black""):
            return ""microphone""
    for laptop_patch in laptop_patches:
        if laptop_patch.verify_property(""laptop"", ""black""):
            return ""laptop""
    return ""microphone"""
1521847,Is the cat on a desk?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the cat on a desk?"")"
16465081,The man is holding what?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    holding_patches = image_patch.find(""holding"")
    # Question assumes only one holding patch
    if len(holding_patches) == 0:
        return ""nothing""
    for holding_patch in holding_patches:
        if holding_patch.horizontal_center > man_patch.horizontal_center:
            return holding_patch.simple_query(""The man is holding what?"")
    return ""nothing"""
17387032,What is on the post?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")"
18906705,How big is the crowd?," # TODO: add more options
    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""crowd"")
    # Question assumes only one crowd patch
    if len(crowd_patches) == 0:
        # If no crowd is found, query the image directly
        return image_patch.simple_query(""How big is the crowd?"")
    return crowd_patches[0].simple_query(""How big is the crowd?"")"
6157200,Does the sign on the pole have white color?," # assumes only one sign
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    sign_patch = sign_patches[0]
    return bool_to_yesno(sign_patch.verify_property(""sign"", ""white""))"
16760226,What's the laptop in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?," # TODO: add more options
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    return bed_patches[0].simple_query(""How large is the bed?"")"
14143886,Where is the person with the luggage standing on?," # assumes only one person with luggage
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        luggage_patches = image_patch.find(""luggage"")
        for luggage_patch in luggage_patches:
            if luggage_patch.horizontal_center > person_patch.horizontal_center:
                return ""right""
            elif luggage_patch.horizontal_center < person_patch.horizontal_center:
                return ""left""
    return ""center"""
19872633,Are there either any fire extinguishers or pepper shakers?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)"
12755010,Is the bottle to the right of a napkin?," # assumes only one bottle and one napkin
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    napkin_patches = image_patch.find(""napkin"")
    if len(bottle_patches) == 0 or len(napkin_patches) == 0:
        return ""no""
    bottle_patch = bottle_patches[0]
    napkin_patch = napkin_patches[0]
    if bottle_patch.horizontal_center > napkin_patch.horizontal_center:
        return ""yes""
    return ""no"""
2747001,Are there any soaps or bombs?," # bomb is a synonym for soap
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?," # TODO: add more options
    image_patch = ImagePatch(image)
    is_giraffe = image_patch.exists(""giraffe"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_giraffe or is_elephant)"
6898877,What is the sign on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"")"
15862812,What is the sticker on?," # assumes only one sticker
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    if len(sticker_patches) == 0:
        return image_patch.simple_query(""What is the sticker on?"")
    sticker_patch = sticker_patches[0]
    return sticker_patch.simple_query(""What is the sticker on?"")"
141031470,On which side of the image is the white towel?," # assumes only one white towel
    image_patch = ImagePatch(image)
    white_towel_patches = image_patch.find(""white towel"")
    if len(white_towel_patches) == 0:
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    white_towel_patch = white_towel_patches[0]
    if white_towel_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
41026846,Who rides a motorcycle?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who rides a motorcycle?"")
    for person_patch in person_patches:
        is_riding_motorcycle = (person_patch.simple_query(""Is the person riding a motorcycle?"") == ""yes"")
        if is_riding_motorcycle:
            return person_patch.simple_query(""Who rides a motorcycle?"") # crop would include the motorcycle so keep it in the query
    # If no person is riding a motorcycle, pick the first person
    return person_patches[0].simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the bathtub the towel is on?"")"
7469617,Is the man to the left or to the right of the person that is to the left of the people?," # TODO: fix
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    people_patch = people_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return ""no""
    person_patch = person_patches[0]
    if person_patch.horizontal_center < man_patch.horizontal_center:
        if person_patch.horizontal_center < people_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
    else:
        return ""right"""
64308,What's located on top of the soup?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?," # assumes only one fence and one bench
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    for fence_patch in fence_patches:
        for bench_patch in bench_patches:
            is_same_material = fence_patch.verify_property(""fence"", ""material"") == bench_patch.verify_property(""bench"", ""material"")
            return bool_to_yesno(is_same_material)"
3196255,Are there helmets that are not white?," # helmet is a noun, so go step by step
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmet_patches:
        is_white = helmet_patch.simple_query(""Is the helmet white?"") == ""yes""
        if not is_white:
            return ""yes""
    return ""no"""
2992630,Is the bowl to the right or to the left of the man that is drinking?," # assumes only one man and one bowl
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return ""no""
    bowl_patch = bowl_patches[0]
    if bowl_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
513894,Is the person above the sand wearing glasses?," # assumes only one person and one sand patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    sand_patches = image_patch.find(""sand"")
    for person_patch in person_patches:
        for sand_patch in sand_patches:
            if person_patch.vertical_center < sand_patch.vertical_center:
                return bool_to_yesno(person_patch.verify_property(""person"", ""glasses""))
    return ""no"""
14167599,Is the color of the life preserver the same as that of the house?," # TODO: add color
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    # Question assumes only one life preserver patch
    if len(life_preserver_patches) == 0:
        # If no life preserver is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    life_preserver_patch = life_preserver_patches[0]
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        return ""no""
    house_patch = house_patches[0]
    return bool_to_yesno(life_preserver_patch.cropped_image[0, 0, 0] == house_patch.cropped_image[0, 0, 0])"
18264755,How is the weather?," # TODO: add weather
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        is_toilet = animal_patch.simple_query(""Is the animal looking into a toilet?"")
        is_closed = animal_patch.simple_query(""Is the toilet closed?"")
        if is_toilet and not is_closed:
            return animal_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    return ""no animal"""
8641613,Do you see any helmets in the picture that are not red?," # helmet is a noun, so go step by step
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        is_red = helmet_patch.simple_query(""Is the helmet red?"") == ""yes""
        if not is_red:
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?," # assumes only one happy person
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    for happy_patch in happy_patches:
        return happy_patch.simple_query(""What does the happy person hold?"") # crop would include the object so keep it in the query"
8461507,Are there either tissue boxes or lamps in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        return animal_patch.simple_query(""Which kind of animal is it?"")"
19102906,What type of drink is to the left of the plate?," # assumes only one plate
    image_patch = ImagePatch(image)
    drink_patches = image_patch.find(""drink"")
    # Question assumes only one drink patch
    if len(drink_patches) == 0:
        # If no drink is found, query the image directly
        return image_patch.simple_query(""What type of drink is to the left of the plate?"")
    for drink_patch in drink_patches:
        if drink_patch.horizontal_center < image_patch.horizontal_center:
            return drink_patch.simple_query(""What type of drink is to the left of the plate?"")
    return ""no"""
18315440,Is the sky cloudy and blue?," # assumes only one sky patch
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky cloudy and blue?"")
    sky_patch = sky_patches[0]
    is_cloudy = sky_patch.verify_property(""sky"", ""cloudy"")
    is_blue = sky_patch.verify_property(""sky"", ""blue"")
    return bool_to_yesno(is_cloudy and is_blue)"
453061,Is the fork on the right of the image?," # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        return ""no""
    for fork_patch in fork_patches:
        if fork_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
71002567,"What is the broccoli on, a table or a nightstand?"," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")"
17465089,Is the field green and small?," # TODO: add a way to check if the field is green
    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Is the field green and small?"")
    field_patch = field_patches[0]
    is_small = field_patch.simple_query(""Is the field small?"") == ""yes""
    return bool_to_yesno(is_small)"
16150157,What is on the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?," # TODO: add a way to specify the side of the SUV
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    for van_patch in van_patches:
        SUV_patches = image_patch.find(""SUV"")
        # Question assumes only one SUV patch
        if len(SUV_patches) == 0:
            return ""no""
        SUV_patch = SUV_patches[0]
        if van_patch.horizontal_center < SUV_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
15101358,Is the girl to the left of the boy?," # assumes only one girl and one boy
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    boy_patches = image_patch.find(""boy"")
    for girl_patch in girl_patches:
        for boy_patch in boy_patches:
            if girl_patch.horizontal_center < boy_patch.horizontal_center:
                return ""yes""
    return ""no"""
12785181,What animals are in the grass?," # assumes only one grass patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""What animals are in the grass?"")
    for grass_patch in grass_patches:
        animal_patches = grass_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return ""no animals""
        return animal_patches[0].simple_query(""What animals are in the grass?"")"
348093,Are there both an apple and a bag in the picture?," # assumes only one apple and one bag
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)"
314181,Which sign is shown?," # assumes only one sign
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    if len(sign_patches) == 0:
        return image_patch.simple_query(""Which sign is shown?"")
    return sign_patches[0].best_text_match([""stop"", ""yield"", ""speed limit"", ""no parking"", ""no entry"", ""no left turn"", ""no right turn"", ""no u-turn"", ""no bicycles"", ""no trucks"", ""no motorcycles"", ""no pedestrians"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"", ""no parking"
16275314,"On which side is the woman, the right or the left?"," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19535592,Who runs on the sand?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person running?"") == ""yes"":
            return person_patch.simple_query(""Who runs on the sand?"")
    return ""no one"""
156886,Is there a giraffe near the bush?," # giraffe is not a relational verb so go step by step
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    for giraffe_patch in giraffe_patches:
        is_near_bush = (giraffe_patch.simple_query(""Is the giraffe near the bush?"") == ""yes"")
        if is_near_bush:
            return ""yes""
    return ""no"""
1756642,Which place is it?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    for shirt_patch in shirt_patches:
        return shirt_patch.simple_query(""Who wears the shirt?"") # crop would include the shirt so keep it in the query"
1972390,What type of animal is standing in the field?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal standing in the field?"") == ""yes"":
            return animal_patch.simple_query(""What type of animal is standing in the field?"")
    return ""no animal"""
14579439,Is the stuffed animal on the right?," # assumes only one stuffed animal
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    for stuffed_animal_patch in stuffed_animal_patches:
        if stuffed_animal_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6645395,Is the gray building behind the passengers that are boarding the airplane?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")"
19610200,Is the fence metallic?," # fence is a common noun
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return bool_to_yesno(fence_patches[0].verify_property(""fence"", ""metallic""))"
5299471,What does the girl that to the left of the trashcan carry?," # trashcan is a relational verb
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    for girl_patch in girl_patches:
        trashcan_patches = image_patch.find(""trashcan"")
        for trashcan_patch in trashcan_patches:
            if trashcan_patch.horizontal_center < girl_patch.horizontal_center:
                return girl_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    return ""no"""
7548203,Which kind of vegetable is on the pizza?," # assumes only one pizza patch
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    for pizza_patch in pizza_patches:
        vegetable_patches = pizza_patch.find(""vegetable"")
        if len(vegetable_patches) == 0:
            return ""no""
        for vegetable_patch in vegetable_patches:
            return vegetable_patch.simple_query(""Which kind of vegetable is on the pizza?"")"
91027737,On which side is the pan?," # assumes only one pan
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) == 0:
        return image_patch.simple_query(""On which side is the pan?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?," # TODO: check if this is correct
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    for black_car_patch in black_car_patches:
        if black_car_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no"""
6144031,Who is in the living room?," # assumes only one living room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?," # assumes only one sink
    image_patch = ImagePatch(image)
    sink_patches = image_patch.find(""sink"")
    if len(sink_patches) == 0:
        return image_patch.simple_query(""What is the sink made of?"")
    return sink_patches[0].simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?," # bird is a synonym of cat
    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?," # assumes only one biker
    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return bool_to_yesno(is_bicycle or is_biker)"
844747,Are there both a pillow and a kitten in the image?," # assumes only one pillow and one kitten
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)"
1104500,What kind of food is in the box?," # assumes only one box
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What kind of food is in the box?"")
    for box_patch in box_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if box_patch.horizontal_center > food_patch.horizontal_center:
                return food_patch.simple_query(""What kind of food is in the box?"") # crop would include the food so keep it in the query
    # If no food is in the box, query the image directly
    return image_patch.simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?," # assumes only one kid patch
    image_patch = ImagePatch(image)
    kid_patches = image_patch.find(""kid"")
    if len(kid_patches) == 0:
        # If no kid is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    kid_patch = kid_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < kid_patch.horizontal_center:
            return food_patch.simple_query(""What is the food that is to the left of the kid called?"") # crop would include the food so keep it in the query
    return ""no food"""
11820726,"What device is the desk in front of, a television or a printer?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")"
18114588,Do you see a helmet there?," # helmet is a noun
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""helmet""))"
11950874,What animal is standing on the ground?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal standing on the ground?"") == ""yes"":
            return animal_patch.simple_query(""What animal is standing on the ground?"")
    return ""no animal is standing on the ground"""
10216953,Is the small car to the left of the fork on the right?," # TODO: check if this is correct
    image_patch = ImagePatch(image)
    small_car_patches = image_patch.find(""small car"")
    # Question assumes only one small car patch
    if len(small_car_patches) == 0:
        # If no small car is found, query the image directly
        return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")
    for small_car_patch in small_car_patches:
        fork_patches = image_patch.find(""fork"")
        # Question assumes only one fork patch
        if len(fork_patches) == 0:
            return ""no""
        for fork_patch in fork_patches:
            if fork_patch.horizontal_center > small_car_patch.horizontal_center:
                return ""yes""
    return ""no"""
16184942,Does that grass look brown and short?," # grass is a property of the image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""grass"", ""brown"") and image_patch.verify_property(""grass"", ""short""))"
6312238,Is the hydrant to the left of the car?," # assumes only one hydrant and one car
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    car_patches = image_patch.find(""car"")
    for hydrant_patch in hydrant_patches:
        for car_patch in car_patches:
            if hydrant_patch.horizontal_center < car_patch.horizontal_center:
                return ""yes""
    return ""no"""
16646227,On which side of the picture is the gray car?," # assumes only one gray car
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    if len(gray_car_patches) == 0:
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    gray_car_patch = gray_car_patches[0]
    if gray_car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?," # assumes only one person wearing sneakers
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for ball_patch in ball_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > ball_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
3443704,What is the woman wearing?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is the woman wearing?"")"
19313572,What is the color of the tent to the left of the vehicles?," # assumes only one tent and one vehicle
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    for tent_patch in tent_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            return ""no""
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < tent_patch.horizontal_center:
                return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    return ""no"""
10885675,What is the toilet seat made of?," # assumes only one toilet seat
    image_patch = ImagePatch(image)
    toilet_seat_patches = image_patch.find(""toilet seat"")
    if len(toilet_seat_patches) == 0:
        return image_patch.simple_query(""What is the toilet seat made of?"")
    return toilet_seat_patches[0].simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal resting on the blanket?"") == ""yes"":
            return animal_patch.simple_query(""What animal is resting on the blanket?"") # crop would include the blanket so keep it in the query
    # If no animal is resting on the blanket, pick the first animal
    return animal_patches[0].simple_query(""What animal is resting on the blanket?"")"
14561612,What color do you think the bikini that the woman is wearing is?," # TODO: add bikini
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    woman_patch = woman_patches[0]
    bikini_patches = image_patch.find(""bikini"")
    # Question assumes only one bikini patch
    if len(bikini_patches) == 0:
        return ""no""
    for bikini_patch in bikini_patches:
        if woman_patch.horizontal_center > bikini_patch.horizontal_center:
            return bikini_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""pink"", ""orange"", ""brown"", ""black"", ""white"", ""gray"", ""silver"", ""gold""])
    return ""no"""
6587755,Are both the room and the bowl the same color?," # assumes only one room and one bowl
    image_patch = ImagePatch(image)
    is_room = image_patch.exists(""room"")
    is_bowl = image_patch.exists(""bowl"")
    if is_room and is_bowl:
        room_patch = image_patch.find(""room"")[0]
        bowl_patch = image_patch.find(""bowl"")[0]
        return bool_to_yesno(room_patch.verify_property(""room"", ""color"") == bowl_patch.verify_property(""bowl"", ""color""))
    return ""no"""
4479543,Is the barn white or brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the barn white or brown?"")"
972522,Does the box look white or brown?," # TODO: add color
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].best_text_match([""white"", ""brown""])"
3948528,What is the bowl made of?," # assumes only one bowl
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    if len(bowl_patches) == 0:
        return image_patch.simple_query(""What is the bowl made of?"")
    bowl_patch = bowl_patches[0]
    return bowl_patch.simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?," # assumes only one bench and one rock
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    rock_patches = image_patch.find(""rock"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    for bench_patch in bench_patches:
        for rock_patch in rock_patches:
            if rock_patch.horizontal_center > bench_patch.horizontal_center:
                return bench_patch.best_text_match([""gray"", ""red""])
    return ""no"""
866459,On which side is the couch?," # assumes only one couch
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    if len(couch_patches) == 0:
        return image_patch.simple_query(""On which side is the couch?"")
    couch_patch = couch_patches[0]
    if couch_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8614812,Is the person that is playing wearing shorts?," # assumes only one person playing
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Is the person that is playing wearing shorts?"") # crop would include the shorts so keep it in the query
    return ""no"""
167438,What is wearing the ground?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""Which kind of furniture is wooden?"")"
1042377,Who is standing beside the person that is wearing a dress?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?," # TODO: add more options
    image_patch = ImagePatch(image)
    long_ski_patches = image_patch.find(""long ski"")
    # Question assumes only one long ski patch
    if len(long_ski_patches) == 0:
        # If no long ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    return long_ski_patches[0].simple_query(""How fat are the long skis?"")"
2211743,Is the sky clear or overcast?," # sky is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?," # assumes only one bottle and one pencil
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    pencil_patches = image_patch.find(""pencil"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
    for bottle_patch in bottle_patches:
        # Question assumes only one pencil patch
        if len(pencil_patches) == 0:
            return ""no""
        for pencil_patch in pencil_patches:
            if pencil_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""yes""
    return ""no"""
15478302,Is there any dark door or window in the image?," # dark door or window
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    window_patches = image_patch.find(""window"")
    for door_patch in door_patches:
        if door_patch.verify_property(""door"", ""dark""):
            return ""yes""
    for window_patch in window_patches:
        if window_patch.verify_property(""window"", ""dark""):
            return ""yes""
    return ""no"""
18414234,Do you see either a knife or a chair in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)"
19779815,Is the book red or yellow?," # assumes only one book patch
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    book_patch = book_patches[0]
    return book_patch.best_text_match([""red"", ""yellow""])"
7257283,Are there men to the left of the picture?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there men to the left of the picture?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6621625,On which side of the picture is the bench?," # assumes only one bench
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    if bench_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19311589,Are there both fences and horses in this picture?," # assumes only one fence and one horse
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?," # TODO: add more examples
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    person_patch = person_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    device_patch = device_patches[0]
    if device_patch.horizontal_center > person_patch.horizontal_center:
        return ""yes""
    return ""no"""
171031333,Do you see blankets in the picture that are not black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Do you see blankets in the picture that are not black?"")
    for blanket_patch in blanket_patches:
        if not blanket_patch.verify_property(""blanket"", ""black""):
            return ""yes""
    return ""no"""
16695341,What is the fence made of?," # fence is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?," # bottle or child
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)"
5111363,Are there chairs or tables that are not blue?," # assumes only one chair and one table
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    table_patches = image_patch.find(""table"")
    # Question assumes only one chair and one table patch
    if len(chair_patches) == 0 or len(table_patches) == 0:
        # If no chair or table is found, query the image directly
        return image_patch.simple_query(""Are there chairs or tables that are not blue?"")
    for chair_patch in chair_patches:
        if not chair_patch.verify_property(""chair"", ""blue""):
            return ""yes""
    for table_patch in table_patches:
        if not table_patch.verify_property(""table"", ""blue""):
            return ""yes""
    return ""no"""
9230971,Which place is it?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    hair_patch = hair_patches[0]
    is_short = hair_patch.verify_property(""hair"", ""short"")
    is_white = hair_patch.verify_property(""hair"", ""white"")
    return bool_to_yesno(is_short and is_white)"
4822200,Do you see any lettuce on the food with the meat?," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    for food_patch in food_patches:
        lettuce_patches = image_patch.find(""lettuce"")
        for lettuce_patch in lettuce_patches:
            if lettuce_patch.horizontal_center > food_patch.horizontal_center:
                return ""yes""
    return ""no"""
3726666,What device is to the left of the curtain that is to the left of the glasses?," # assumes only one device, curtain, and glasses
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    device_patch = device_patches[0]
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        return ""no""
    curtain_patch = curtain_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if device_patch.horizontal_center < curtain_patch.horizontal_center and curtain_patch.horizontal_center < glasses_patch.horizontal_center:
        return device_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    return ""no"""
9954849,What kind of furniture is it?," # furniture is a class, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?," # assumes only one train and one bus
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one train patch and one bus patch
    if len(train_patches) == 0 or len(bus_patches) == 0:
        # If no train or bus is found, query the image directly
        return image_patch.simple_query(""Are there any red trains or buses?"")
    train_patch = train_patches[0]
    bus_patch = bus_patches[0]
    is_red_train = train_patch.verify_property(""train"", ""red"")
    is_red_bus = bus_patch.verify_property(""bus"", ""red"")
    return bool_to_yesno(is_red_train or is_red_bus)"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?," # TODO: check if this is correct
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    for vegetable_patch in vegetable_patches:
        crate_patches = image_patch.find(""crate"")
        for crate_patch in crate_patches:
            if crate_patch.horizontal_center > vegetable_patch.horizontal_center:
                return vegetable_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"") # crop would include the crate so keep it in the query
    # If no vegetable is to the left of the crate, pick the first vegetable
    return vegetable_patches[0].simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")"
623393,"What type of clothing is tan, the hat or the vest?"," # assumes only one hat and one vest
    image_patch = ImagePatch(image)
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        # If no hat is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    hat_patch = hat_patches[0]
    vest_patches = image_patch.find(""vest"")
    # Question assumes only one vest patch
    if len(vest_patches) == 0:
        return ""hat""
    vest_patch = vest_patches[0]
    if hat_patch.simple_query(""Is the hat tan?"") == ""yes"":
        return ""hat""
    if vest_patch.simple_query(""Is the vest tan?"") == ""yes"":
        return ""vest""
    return ""hat"""
6436448,Is the color of the skirt the same as the scarf?," # assumes only one scarf and one skirt
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    skirt_patches = image_patch.find(""skirt"")
    if len(scarf_patches) == 0 or len(skirt_patches) == 0:
        return ""no""
    scarf_patch = scarf_patches[0]
    skirt_patch = skirt_patches[0]
    return bool_to_yesno(scarf_patch.simple_query(""Is the color of the scarf the same as the skirt?""))"
3303313,Is the blanket under a cat?," # contains a relation (under, on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blanket under a cat?"")"
443663,What color is the picture?," # TODO: add color
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        return ""no""
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1885406,What is the toy on the bed?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toy on the bed?"")"
5557965,On which side is the bag?," # assumes only one bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?," # assumes only one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    banana_patch = banana_patches[0]
    if banana_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3196355,What does the batter hold?," # batter is a verb
    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    return batter_patches[0].simple_query(""What does the batter hold?"") # crop would include the batter so keep it in the query"
14470748,Who wears a jacket?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for person_patch in person_patches:
        is_wearing_jacket = (person_patch.simple_query(""Is the person wearing a jacket?"") == ""yes"")
        if is_wearing_jacket:
            return person_patch.simple_query(""Who wears a jacket?"") # crop would include the jacket so keep it in the query
    # If no person is wearing a jacket, pick the first person
    return person_patches[0].simple_query(""Who wears a jacket?"")"
16537736,Are there any houses behind the shrubs?," # shrubs is a plural
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    for house_patch in house_patches:
        shrub_patches = image_patch.find(""shrub"")
        for shrub_patch in shrub_patches:
            if shrub_patch.horizontal_center > house_patch.horizontal_center:
                return ""yes""
    return ""no"""
1129541,What piece of furniture is made of wood?," # TODO: add furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        is_wood = furniture_patch.verify_property(""furniture"", ""wood"")
        if is_wood:
            return furniture_patch.simple_query(""What piece of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""What piece of furniture is made of wood?"")"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?," # assumes only one man and one racket
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    racket_patch = racket_patches[0]
    if racket_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
12416703,Where is that cat?," # assumes only one cat
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    if len(cat_patches) == 0:
        return image_patch.simple_query(""Where is that cat?"")
    cat_patch = cat_patches[0]
    return cat_patch.simple_query(""Where is that cat?"")"
15603088,The animal to the right of the envelope is lying on what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")"
5329077,Is the man on a bench?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on a bench?"")
    man_patch = man_patches[0]
    bench_patches = image_patch.find(""bench"")
    for bench_patch in bench_patches:
        if bench_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1945705,What kind of device is to the left of the device that looks silver and gray?," # device is a relational verb so ask directly
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")"
17520003,What vehicle is to the right of the pine tree?," # assumes only one pine tree
    image_patch = ImagePatch(image)
    pine_tree_patches = image_patch.find(""pine tree"")
    # Question assumes only one pine tree patch
    if len(pine_tree_patches) == 0:
        # If no pine tree is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    for pine_tree_patch in pine_tree_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > pine_tree_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    return ""no"""
1259983,Who is wearing pants?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    for person_patch in person_patches:
        is_wearing_pants = (person_patch.simple_query(""Is the person wearing pants?"") == ""yes"")
        if is_wearing_pants:
            return person_patch.simple_query(""Who is wearing pants?"") # crop would include the pants so keep it in the query
    # If no person is wearing pants, pick the first person
    return person_patches[0].simple_query(""Who is wearing pants?"")"
6413378,Is there a black keyboard or camera?," # keyboard or camera
    image_patch = ImagePatch(image)
    is_keyboard = image_patch.exists(""keyboard"")
    is_camera = image_patch.exists(""camera"")
    return bool_to_yesno(is_keyboard or is_camera)"
947305,Is the sunny water blue and high?," # water is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sunny water blue and high?"")"
4367817,What type of animal in this scene is brown?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal brown?"") == ""yes"":
            return animal_patch.simple_query(""What type of animal in this scene is brown?"")
    return ""no animal is brown"""
15485572,What is the vegetable on the hot dog with the cheese?," # assumes only one hot dog patch
    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    hot_dog_patch = hot_dog_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > hot_dog_patch.horizontal_center:
            return ""no""
    return vegetable_patches[0].simple_query(""What is the vegetable on the hot dog with the cheese?"") # crop would include the hot dog and cheese so keep it in the query"
12661142,What is the appliance in the kitchen called?," # assumes only one appliance
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    return appliance_patches[0].simple_query(""What is the appliance in the kitchen called?"")"
41012743,The arrow is on what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The arrow is on what?"")"
4777414,What color is the bicycle in the bottom of the photo?," # assumes only one bicycle
    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    # Question assumes only one bicycle patch
    if len(bicycle_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    bicycle_patch = bicycle_patches[0]
    if bicycle_patch.vertical_center < image_patch.vertical_center:
        return bicycle_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    else:
        return bicycle_patch.simple_query(""What color is the bicycle in the top of the photo?"")"
1185988,What is the device on top of the table that is to the right of the trashcan?," # TODO: add a way to ask for the predicate of a relational verb (on top of, to the right of, etc)
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    for device_patch in device_patches:
        table_patches = image_patch.find(""table"")
        for table_patch in table_patches:
            trashcan_patches = image_patch.find(""trashcan"")
            for trashcan_patch in trashcan_patches:
                if trashcan_patch.horizontal_center < device_patch.horizontal_center and table_patch.horizontal_center < device_patch.horizontal_center:
                    return device_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    return ""no"""
13582968,Was granite used to make that floor?," # assumes only one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""Was granite used to make that floor?"")
    for floor_patch in floor_patches:
        return bool_to_yesno(floor_patch.verify_property(""floor"", ""granite""))"
6235273,Are there women in the photo?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    return bool_to_yesno(len(woman_patches) > 0)"
5377974,What is the girl playing with?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    girl_patch = girl_patches[0]
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        return ""no""
    for toy_patch in toy_patches:
        if toy_patch.horizontal_center > girl_patch.horizontal_center:
            return toy_patch.simple_query(""What is the girl playing with?"")
    return ""no"""
51037065,On which side of the image is the fridge?," # assumes only one fridge
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    if len(fridge_patches) == 0:
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    fridge_patch = fridge_patches[0]
    if fridge_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5299477,Which kind of bag does the girl carry?," # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    girl_patch = girl_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""no""
    for bag_patch in bag_patches:
        if bag_patch.horizontal_center > girl_patch.horizontal_center:
            return bag_patch.simple_query(""Which kind of bag does the girl carry?"")
    return ""no"""
15135617,Is the white dog on a bench?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white dog on a bench?"")"
1111583,Is the male person to the right of a person?," # assumes only one male person and one person
    image_patch = ImagePatch(image)
    male_person_patches = image_patch.find(""male person"")
    # Question assumes only one male person patch
    if len(male_person_patches) == 0:
        # If no male person is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_person_patch in male_person_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > male_person_patch.horizontal_center:
                return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?," # assumes only one window and one door
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
15610844,What kind of place is shown?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")"
11869032,Is the banana below a bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the banana below a bird?"")"
9878360,What color is the vehicle to the left of the fence?," # assumes only one vehicle and one fence
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    for vehicle_patch in vehicle_patches:
        # Question assumes only one fence patch
        if len(fence_patches) == 0:
            return ""no""
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center > vehicle_patch.horizontal_center:
                return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"") # crop would include the fence so keep it in the query
    return ""no"""
481765,Are there either any buses or trains in the image?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?," # fence is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?," # assumes one man and one traffic cone
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes only one traffic cone patch
    if len(traffic_cone_patches) == 0:
        return ""no""
    traffic_cone_patch = traffic_cone_patches[0]
    if man_patch.horizontal_center < traffic_cone_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
11981238,What is common to the blazer and the suit?," # assumes only one blazer and one suit
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one blazer patch
    if len(blazer_patches) == 0:
        # If no blazer is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    blazer_patch = blazer_patches[0]
    # Question assumes only one suit patch
    if len(suit_patches) == 0:
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    suit_patch = suit_patches[0]
    return blazer_patch.best_text_match([""blazer"", ""suit""])"
16245,Is the shirt white or green?," # shirt is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shirt white or green?"")"
2595103,"In which part of the image are the cars, the bottom or the top?"," # TODO: check if this works
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?"," # TODO: add more options
    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""How does the sand look, dry or wet?"")
    return sand_patches[0].best_text_match([""dry"", ""wet""])"
4325920,Are there fruits to the right of the banana which is on the table?," # assumes only one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    for banana_patch in banana_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if fruit_patch.horizontal_center > banana_patch.horizontal_center:
                return ""yes""
    return ""no"""
6376614,What color is the car in the middle?," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center == image_patch.horizontal_center:
        return car_patch.simple_query(""What color is the car in the middle?"")
    return car_patch.simple_query(""What color is the car to the left of the middle?"")"
712063,What's the lamp made of?," # assumes only one lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        return image_patch.simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What's the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?," # assumes only one pillow
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    for pillow_patch in pillow_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    return ""no"""
9647343,What type of material is the patio made of?," # patio is a material
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the suit?"")
    for person_patch in person_patches:
        is_wearing_suit = (person_patch.simple_query(""Is the person wearing a suit?"") == ""yes"")
        if is_wearing_suit:
            return person_patch.simple_query(""Who is wearing the suit?"") # crop would include the suit so keep it in the query
    # If no person is wearing a suit, pick the first person
    return person_patches[0].simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?," # assumes only one cloud patch
    image_patch = ImagePatch(image)
    cloud_patches = image_patch.find(""cloud"")
    if len(cloud_patches) == 0:
        # If no cloud is found, query the image directly
        return image_patch.simple_query(""What is the color of the clouds in the sky?"")
    return cloud_patches[0].best_text_match([""white"", ""gray"", ""blue"", ""black"", ""red"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""beige"", ""tan"", ""silver"", ""gold"", ""white"", ""gray"", ""blue"", ""black"", ""red"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""beige"", ""tan"", ""silver"", ""gold""])"
9843309,Do the flowers look orange?," # TODO: add color
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flower"", ""orange""))"
618996,Is there a chair or a bed in this image?," # assumes only one chair or bed
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?," # assumes only one umbrella patch
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    for umbrella_patch in umbrella_patches:
        truck_patches = image_patch.find(""truck"")
        for truck_patch in truck_patches:
            if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
                return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?," # TODO: add color
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return ""no""
    pants_patch = pants_patches[0]
    return pants_patch.simple_query(""What color are the pants the man is wearing?"") # crop would include the pants so keep it in the query"
551601,Are there any pillows or chairs in the image?," # assumes only one pillow or chair
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?," # assumes only one person with a bag
    image_patch = ImagePatch(image)
    person_with_bag_patches = image_patch.find(""person with a bag"")
    # Question assumes only one person with a bag patch
    if len(person_with_bag_patches) == 0:
        # If no person with a bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    person_with_bag_patch = person_with_bag_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < person_with_bag_patch.horizontal_center:
            return ""yes""
    return ""no"""
5925408,What is the bike in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?," # assumes only one bed and one desk
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)"
13778498,What type of vehicle is behind the green tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"")"
41019603,What is the child standing on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?," # assumes only one wooden item of furniture
    image_patch = ImagePatch(image)
    wooden_item_of_furniture_patches = image_patch.find(""wooden item of furniture"")
    if len(wooden_item_of_furniture_patches) == 0:
        return image_patch.simple_query(""What is the wooden item of furniture called?"")
    return wooden_item_of_furniture_patches[0].simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?," # shirt is not a relational verb so go step by step
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for shirt_patch in shirt_patches:
        is_wearing_shirt = (shirt_patch.simple_query(""Is the shirt wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query
    # If no shirt is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?," # fence is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?," # kite is a shape, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is drinking?"")
    for person_patch in person_patches:
        is_drinking = (person_patch.simple_query(""Is the person drinking?"") == ""yes"")
        if is_drinking:
            return person_patch.simple_query(""Who is drinking?"") # crop would include the drink so keep it in the query
    # If no person is drinking, pick the first person
    return person_patches[0].simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?," # TODO: add a way to check if the building is behind the tree
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    building_patch = building_patches[0]
    return building_patch.best_text_match([""white"", ""brown""])"
5749240,Are the glove and the undershirt both black?," # glove and undershirt are the same object
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    glove_patch = glove_patches[0]
    is_black = glove_patch.verify_property(""glove"", ""black"")
    return bool_to_yesno(is_black)"
18573157,Is the juice in a cup?," # TODO: add a check for the existence of the juice
    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    # Question assumes only one juice patch
    if len(juice_patches) == 0:
        # If no juice is found, query the image directly
        return image_patch.simple_query(""Is the juice in a cup?"")
    for juice_patch in juice_patches:
        is_in_cup = juice_patch.simple_query(""Is the juice in a cup?"") == ""yes""
        if is_in_cup:
            return ""yes""
    return ""no"""
3445929,Is the brown horse on the right side of the photo?," # assumes only one horse
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    for horse_patch in horse_patches:
        if horse_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
16541709,Where is the grass?," # assumes only one grass patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    grass_patch = grass_patches[0]
    if grass_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
15764335,Are there any dogs on the tan sand?," # tan sand is a property
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Are there any dogs on the tan sand?"")
    for dog_patch in dog_patches:
        if dog_patch.verify_property(""dog"", ""on"") and dog_patch.verify_property(""dog"", ""tan sand""):
            return ""yes""
    return ""no"""
1478089,Are the door and the garage door made of the same material?," # material is a property
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_patch = door_patches[0]
    garage_door_patches = image_patch.find(""garage door"")
    # Question assumes only one garage door patch
    if len(garage_door_patches) == 0:
        return ""no""
    garage_door_patch = garage_door_patches[0]
    return bool_to_yesno(door_patch.verify_property(""door"", ""material"") == garage_door_patch.verify_property(""garage door"", ""material""))"
1250685,Was this picture taken in a bathroom or at a dining room?," # bathroom or dining room
    image_patch = ImagePatch(image)
    is_bathroom = image_patch.exists(""bathroom"")
    is_dining_room = image_patch.exists(""dining room"")
    return bool_to_yesno(is_bathroom and is_dining_room)"
10436844,Is the zebra's nose soft and brown?," # assumes only one zebra
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    zebra_patch = zebra_patches[0]
    is_soft = zebra_patch.simple_query(""Is the zebra's nose soft?"")
    is_brown = zebra_patch.simple_query(""Is the zebra's nose brown?"")
    return bool_to_yesno(is_soft and is_brown)"
10683765,Does the shirt have blue color?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""blue""))"
1593352,Do the draperies look white and striped?," # draperies is a plural noun
    image_patch = ImagePatch(image)
    draperies_patches = image_patch.find(""draperies"")
    # Question assumes only one draperies patch
    if len(draperies_patches) == 0:
        # If no draperies is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    draperies_patch = draperies_patches[0]
    is_white = draperies_patch.verify_property(""draperies"", ""white"")
    is_striped = draperies_patch.verify_property(""draperies"", ""striped"")
    return bool_to_yesno(is_white and is_striped)"
16553304,Are the trunks both long and wide?," # assumes only one trunk
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    trunk_patch = trunk_patches[0]
    is_long = trunk_patch.verify_property(""trunk"", ""long"")
    is_wide = trunk_patch.verify_property(""trunk"", ""wide"")
    return bool_to_yesno(is_long and is_wide)"
7165102,Is the car on the left of the photo?," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the car on the left of the photo?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?," # TODO: fix
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for banana_patch in banana_patches:
        is_yellow = banana_patch.simple_query(""Is the banana yellow?"") == ""yes""
        is_green = banana_patch.simple_query(""Is the banana green?"") == ""yes""
        is_short = banana_patch.simple_query(""Is the banana short?"") == ""yes""
        if is_yellow and is_green and is_short:
            return ""yes""
    return ""no"""
19279872,What is the man to the right of the helmet wearing?," # helmet is a relational verb
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        return ""no""
    for helmet_patch in helmet_patches:
        if helmet_patch.horizontal_center > man_patch.horizontal_center:
            return helmet_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    return ""no"""
4285513,What is the color of the floor?," # assumes only one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor?"")
    return floor_patches[0].simple_query(""What is the color of the floor?"")"
3974266,Do the trousers look tan?," # assumes only one trousers patch
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan""))"
11595009,What are the devices to the right of the device that is to the right of the remote control?," # assumes only one remote control
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    remote_control_patch = remote_control_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    device_patch = device_patches[0]
    if device_patch.horizontal_center > remote_control_patch.horizontal_center:
        return ""no""
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    device_patch = device_patches[0]
    if device_patch.horizontal_center > device_patch.horizontal_center:
        return ""no""
    return ""yes"""
6183000,Are there nightstands or beds?," # assumes only one nightstand or bed
    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_nightstand or is_bed)"
14143982,Is it an outdoors scene?," # TODO: add more properties
    image_patch = ImagePatch(image)
    is_outdoors = image_patch.verify_property(""scene"", ""outdoors"")
    return bool_to_yesno(is_outdoors)"
6123160,Are the speakers to the left of a Wii controller?," # TODO: add a way to check if the object is in the image
    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    # Question assumes only one speaker patch
    if len(speaker_patches) == 0:
        # If no speaker is found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    for speaker_patch in speaker_patches:
        wii_controller_patches = image_patch.find(""wii controller"")
        for wii_controller_patch in wii_controller_patches:
            if wii_controller_patch.horizontal_center > speaker_patch.horizontal_center:
                return ""yes""
    return ""no"""
3681634,Is the plastic fork in the top or in the bottom part of the photo?," # TODO: check if this is correct
    image_patch = ImagePatch(image)
    plastic_fork_patches = image_patch.find(""plastic fork"")
    # Question assumes only one plastic fork patch
    if len(plastic_fork_patches) == 0:
        # If no plastic fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    if plastic_fork_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
13629530,What is the vehicle on the street?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle on the street?"")
    return vehicle_patches[0].simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""no""
    for hat_patch in hat_patches:
        if hat_patch.horizontal_center > man_patch.horizontal_center:
            return hat_patch.simple_query(""What color is the hat the man is in?"")
    return ""no"""
1849976,What vegetables are to the left of the spoon?," # assumes only one spoon
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    for spoon_patch in spoon_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        # Question assumes only one vegetable patch
        if len(vegetable_patches) == 0:
            return ""no""
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < spoon_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetables are to the left of the spoon?"")
    return ""no"""
14827816,Is the statue made of bronze or stone?," # bronze or stone
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    return statue_patches[0].best_text_match([""bronze"", ""stone""])"
857204,What's the woman wearing?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"")"
2201105,Is the ball pink?," # assumes only one ball
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return bool_to_yesno(ball_patches[0].verify_property(""ball"", ""pink""))"
14616023,What piece of furniture are the cords in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?," # assumes only one door and one window
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?," # left or right
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    if black_car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?," # assumes only one striped animal
    image_patch = ImagePatch(image)
    striped_animal_patches = image_patch.find(""striped animal"")
    if len(striped_animal_patches) == 0:
        return image_patch.simple_query(""What is the striped animal called?"")
    striped_animal_patch = striped_animal_patches[0]
    return striped_animal_patch.best_text_match([""zebra"", ""tiger"", ""lion"", ""cheetah"", ""jaguar"", ""leopard"", ""pangolin"", ""giraffe"", ""kangaroo"", ""koala"", ""panda"", ""monkey"", ""chimpanzee"", ""gorilla"", ""orangutan"", ""hyena"", ""fox"", ""wolf"", ""bear"", ""polar bear"", ""koala"", ""otter"", ""seal"", ""walrus"", ""whale"", ""dolphin"", ""shark"", ""snake"", ""lizard"", ""turtle"", ""crocodile"", ""alligator"", ""frog"", ""toad"", ""newt"", ""salamander"", ""fish"", ""octopus"", ""squid"", ""crab"", ""lobster"", ""shrimp"", ""clam"", ""oyster"", ""mussel"", ""scallop"", ""snail"", ""slug"", ""worm"", ""butterfly"", ""moth"", ""bee"", ""wasp"", ""ant"", ""termite"", ""cockroach"", ""beetle"", ""fly"", ""mosquito"", ""dragonfly"", ""grasshopper"", ""cricket"", ""spider"", ""scorpion"", ""centipede"", ""millipede"", ""cockroach"", ""ladybug"", ""firefly"", ""butterfly"", ""moth"", ""bee"", ""wasp"", ""ant"", ""termite"", ""cockroach"", ""beetle"", ""fly"", ""mosquito"", ""dragonfly"", ""grasshopper"", ""cricket"", ""spider"", ""scorpion"", ""centipede"", ""millipede"", ""cockroach"", ""ladybug"", ""firefly"", ""butterfly"", ""moth"", ""bee"", ""wasp"", ""ant"", ""termite"", ""cockroach"", ""beetle"", ""fly"", ""mosquito"", ""dragonfly"", ""grasshopper"", ""cricket"", ""spider"", ""scorpion"", ""centipede"", ""millipede"", ""cockroach"", ""ladybug"","
1479068,Is it outdoors?," # assumes only one image patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it outdoors?""))"
16155046,Is the dry grass below a zebra?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the dry grass below a zebra?"")"
16515071,What is the person in the water wearing?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""What is the person in the water wearing?"") # crop would include the water so keep it in the query"
161015042,Who is wearing the goggles?," # goggles is a relational verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the goggles?"")"
19149868,What is pulled by the lady?," # assumes only one lady patch
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""What is pulled by the lady?"")
    lady_patch = lady_patches[0]
    pulled_patches = image_patch.find(""pulled"")
    # Question assumes only one pulled patch
    if len(pulled_patches) == 0:
        return ""no""
    pulled_patch = pulled_patches[0]
    if pulled_patch.horizontal_center < lady_patch.horizontal_center:
        return ""no""
    return pulled_patch.simple_query(""What is pulled by the lady?"")"
5199994,What's the man wearing?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What's the man wearing?"")"
19184475,Are the man glasses on the left side of the image?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
7149602,Is the shirt orange or blue?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    return shirt_patches[0].best_text_match([""orange"", ""blue""])"
19479555,What is the person to the right of the benches holding?," # assumes only one person and one bench
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        bench_patches = image_patch.find(""bench"")
        for bench_patch in bench_patches:
            if bench_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the benches holding?"")
    return ""no"""
19273393,Are there both a door and a window in this photo?," # assumes only one door and one window
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
6481656,What is the man doing?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"")"
13127703,What kind of drink is to the left of the bottle the woman is pouring?," # assumes only one bottle
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    bottle_patch = bottle_patches[0]
    drink_patches = image_patch.find(""drink"")
    # Question assumes only one drink patch
    if len(drink_patches) == 0:
        return ""no""
    for drink_patch in drink_patches:
        if drink_patch.horizontal_center < bottle_patch.horizontal_center:
            return drink_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    return ""no"""
2378018,What is the toilet in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"")"
8430841,Is the frisbee to the left of the guy?," # assumes one frisbee and one guy
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    guy_patches = image_patch.find(""guy"")
    for frisbee_patch in frisbee_patches:
        for guy_patch in guy_patches:
            if frisbee_patch.horizontal_center < guy_patch.horizontal_center:
                return ""yes""
    return ""no"""
18616818,The man is watching who?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is watching who?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""The man is watching who?"")"
179526,Is the white dog behind a girl?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white dog behind a girl?"")"
21018827,Is the river murky and calm?," # assumes only one river patch
    image_patch = ImagePatch(image)
    river_patches = image_patch.find(""river"")
    if len(river_patches) == 0:
        # If no river is found, query the image directly
        return image_patch.simple_query(""Is the river murky and calm?"")
    river_patch = river_patches[0]
    is_murky = river_patch.verify_property(""river"", ""murky"")
    is_calm = river_patch.verify_property(""river"", ""calm"")
    return bool_to_yesno(is_murky and is_calm)"
3697449,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?," # assumes only one racket and one toothbrush
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?," # assumes only one car and one sign
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        return ""no""
    sign_patch = sign_patches[0]
    return car_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""orange"", ""purple"", ""pink"", ""brown"", ""gray"", ""black"", ""white"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""silver"", ""gold"", ""white"", ""black"","
11764476,Which place is it?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    for plate_patch in plate_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > plate_patch.horizontal_center:
                return furniture_patch.simple_query(""On what kind of furniture is the plate?"")
    return ""no"""
61022361,What is the painting that is to the left of the clock hanging on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")"
1527392,"What color is the fence, tan or black?"," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    fence_patch = fence_patches[0]
    return fence_patch.best_text_match([""tan"", ""black""])"
19229351,Do you see both bowls and carrots?," # assumes only one bowl and one carrot
    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)"
1297082,On which side is the silver fork?," # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    for fork_patch in fork_patches:
        if fork_patch.simple_query(""Is the fork silver?"") == ""yes"":
            return fork_patch.simple_query(""On which side is the silver fork?"") # crop would include the fork so keep it in the query
    return ""no"""
16757832,Are there any blue helmets or napkins?," # assumes only one helmet and one napkin
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    napkin_patches = image_patch.find(""napkin"")
    if len(helmet_patches) == 0 and len(napkin_patches) == 0:
        return ""no""
    if len(helmet_patches) == 0:
        return bool_to_yesno(image_patch.exists(""napkin""))
    if len(napkin_patches) == 0:
        return bool_to_yesno(image_patch.exists(""helmet""))
    for helmet_patch in helmet_patches:
        for napkin_patch in napkin_patches:
            if helmet_patch.verify_property(""helmet"", ""blue"") or napkin_patch.verify_property(""napkin"", ""blue""):
                return ""yes""
    return ""no"""
839816,"In which part of the photo is the racket, the top or the bottom?"," # racket is a synonym for tennis racket
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12385226,Is there a mirror in the bathroom?," # bathroom is a room
    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        # If no mirror is found, query the image directly
        return image_patch.simple_query(""Is there a mirror in the bathroom?"")
    for mirror_patch in mirror_patches:
        is_in_bathroom = mirror_patch.simple_query(""Is the mirror in the bathroom?"") == ""yes""
        if is_in_bathroom:
            return ""yes""
    return ""no"""
18720852,Are there either blankets or tents in this picture?," # assumes only one tent
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    cardboard_box_patches = image_patch.find(""cardboard box"")
    # Question assumes only one cardboard box patch
    if len(cardboard_box_patches) == 0:
        # If no cardboard box is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    for cardboard_box_patch in cardboard_box_patches:
        woman_patches = image_patch.find(""woman"")
        # Question assumes only one woman patch
        if len(woman_patches) == 0:
            # If no woman is found, query the image directly
            return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
        woman_patch = woman_patches[0]
        if cardboard_box_patch.horizontal_center > woman_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
19453453,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?," # TODO: check if this is correct
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    if house_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the flowers that look red?"")"
15710688,Is the shirt short sleeved or sleeveless?," # TODO: add sleeveless
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    for shirt_patch in shirt_patches:
        is_short_sleeved = (shirt_patch.simple_query(""Is the shirt short sleeved?"") == ""yes"")
        if is_short_sleeved:
            return shirt_patch.simple_query(""Is the shirt short sleeved or sleeveless?"") # crop would include the sleeves so keep it in the query
    # If no shirt is short sleeved, pick the first shirt
    return shirt_patches[0].simple_query(""Is the shirt short sleeved or sleeveless?"")"
5533952,What are the white wires connected to?," # assumes only one white wire
    image_patch = ImagePatch(image)
    white_wire_patches = image_patch.find(""white wire"")
    # Question assumes only one white wire patch
    if len(white_wire_patches) == 0:
        # If no white wire is found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    white_wire_patch = white_wire_patches[0]
    connected_patches = image_patch.find(""connected"")
    # Question assumes only one connected patch
    if len(connected_patches) == 0:
        return ""no""
    connected_patch = connected_patches[0]
    return connected_patch.simple_query(""What are the white wires connected to?"") # crop would include the connected wires so keep it in the query"
11313555,"What type of furniture is that, a table or a nightstand?"," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.best_text_match([""table"", ""nightstand""])"
10508893,What animals are in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in front of the trees?"")"
14501997,What is the gate made of?," # assumes only one gate
    image_patch = ImagePatch(image)
    gate_patches = image_patch.find(""gate"")
    if len(gate_patches) == 0:
        return image_patch.simple_query(""What is the gate made of?"")
    return gate_patches[0].simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?," # device is a general term
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    for device_patch in device_patches:
        if device_patch.simple_query(""Is the device on top of the table?"") == ""yes"":
            return device_patch.simple_query(""What color is the device on top of the table?"") # crop would include the table so keep it in the query
    # If no device is on top of the table, pick the first device
    return device_patches[0].simple_query(""What color is the device on top of the table?"")"
181032044,Are these closed drawers?," # assumes only one drawer
    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    return bool_to_yesno(drawer_patches[0].verify_property(""drawer"", ""closed""))"
383,What kind of furniture is made of wood?," # furniture is a class, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is made of wood?"")"
101054962,What is the person by the bananas wearing?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    person_patch = person_patches[0]
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        return ""no""
    for banana_patch in banana_patches:
        if banana_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.simple_query(""What is the person by the bananas wearing?"") # crop would include the bananas so keep it in the query
    return ""no"""
759165,What is the color of the tower in the middle of the picture?," # assumes only one tower
    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    # Question assumes only one tower patch
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    tower_patch = tower_patches[0]
    return tower_patch.simple_query(""What is the color of the tower in the middle of the picture?"")"
10775539,Is this giraffe tall and white?," # giraffe is a relational verb
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is this giraffe tall and white?"")
    giraffe_patch = giraffe_patches[0]
    is_tall = giraffe_patch.verify_property(""giraffe"", ""tall"")
    is_white = giraffe_patch.verify_property(""giraffe"", ""white"")
    return bool_to_yesno(is_tall and is_white)"
19981804,On which side of the photo is the colorful screen?," # assumes only one screen
    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""screen"")
    if len(screen_patches) == 0:
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    screen_patch = screen_patches[0]
    if screen_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7903654,Is the tap on the left side or on the right?," # assumes only one tap
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6206183,Which place is it?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?," # assumes only one coat
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    return coat_patches[0].best_text_match([""black"", ""beige""])"
13123207,Does the kite near the field look high and red?," # kite is near the field
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    kite_patch = kite_patches[0]
    is_high = kite_patch.simple_query(""Is the kite high?"") == ""yes""
    is_red = kite_patch.simple_query(""Is the kite red?"") == ""yes""
    return bool_to_yesno(is_high and is_red)"
7740092,Are there any utensils in this picture?," # assumes only one utensil
    image_patch = ImagePatch(image)
    utensil_patches = image_patch.find(""utensil"")
    if len(utensil_patches) == 0:
        return ""no""
    return ""yes"""
8774975,What is around the guy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?," # assumes only one staircase and one sky patch
    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    if len(staircase_patches) == 0:
        return ""no""
    staircase_patch = staircase_patches[0]
    sky_patches = image_patch.find(""sky"")
    if len(sky_patches) == 0:
        return ""no""
    sky_patch = sky_patches[0]
    return bool_to_yesno(staircase_patch.verify_property(""staircase"", ""color"") != sky_patch.verify_property(""sky"", ""color""))"
1605874,What color are the containers that are on the right?," # assumes only one container
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center > image_patch.horizontal_center:
            return container_patch.simple_query(""What color are the containers that are on the right?"")
    return ""no"""
12495781,Are the people to the right or to the left of the cone that is orange?," # assumes only one cone patch
    image_patch = ImagePatch(image)
    cone_patches = image_patch.find(""cone"")
    # Question assumes only one cone patch
    if len(cone_patches) == 0:
        # If no cone is found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    for cone_patch in cone_patches:
        if cone_patch.simple_query(""Is the cone orange?"") == ""yes"":
            people_patches = image_patch.find(""people"")
            # Question assumes only one people patch
            if len(people_patches) == 0:
                return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
            for people_patch in people_patches:
                if people_patch.horizontal_center > cone_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left"""
14165681,"What type of clothing is light, the sweater or the cap?"," # TODO: add color
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    for clothing_patch in clothing_patches:
        is_light = clothing_patch.simple_query(""Is the clothing light?"") == ""yes""
        if is_light:
            return clothing_patch.best_text_match([""sweater"", ""cap""])
    # If no clothing is light, pick the first clothing
    return clothing_patches[0].best_text_match([""sweater"", ""cap""])"
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?," # assumes only one girl wearing jeans
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    for chair_patch in chair_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if girl_patch.horizontal_center > chair_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
5617223,"What color is the container to the left of the horse, green or silver?"," # assumes only one container and one horse
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    for container_patch in container_patches:
        for horse_patch in horse_patches:
            if horse_patch.horizontal_center > container_patch.horizontal_center:
                return container_patch.best_text_match([""green"", ""silver""])
    return ""no"""
2428964,Is the water gray or teal?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""gray"", ""teal""])"
19620769,Which place is it?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?," # assumes only one lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    lamp_patch = lamp_patches[0]
    if lamp_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?," # assumes only one brown animal
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    if len(brown_animal_patches) == 0:
        return ""no""
    brown_animal_patch = brown_animal_patches[0]
    return bool_to_yesno(brown_animal_patch.simple_query(""Does the brown animal look tiny?""))"
5672532,Does that shirt look long sleeved?," # TODO: add a way to check if the shirt is long sleeved
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    return shirt_patches[0].simple_query(""Does that shirt look long sleeved?"")"
6146439,Does the box look green?," # assumes only one box
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look green?"")
    return bool_to_yesno(box_patches[0].verify_property(""box"", ""green""))"
1910285,Is the white container on the left of the image?," # assumes only one white container
    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    # Question assumes only one white container patch
    if len(white_container_patches) == 0:
        # If no white container is found, query the image directly
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    for white_container_patch in white_container_patches:
        if white_container_patch.left < image_patch.left:
            return ""yes""
    return ""no"""
13362134,Is that shower curtain to the left of a toilet?," # TODO: add shower curtain
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center < shower_curtain_patch.horizontal_center:
                return ""yes""
    return ""no"""
161060488,Is there any cabinet to the right of the stove?," # assumes only one stove patch
    image_patch = ImagePatch(image)
    stove_patches = image_patch.find(""stove"")
    # Question assumes only one stove patch
    if len(stove_patches) == 0:
        # If no stove is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for stove_patch in stove_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > stove_patch.horizontal_center:
                return ""yes""
    return ""no"""
111055042,Is the chair on the right?," # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
151068,Which kind of clothing is white?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    clothing_patch = clothing_patches[0]
    return clothing_patch.best_text_match([""white"", ""black"", ""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""silver"", ""gold""])"
19387951,Is this place the forest or the garden?," # forest and garden are not in the same image
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""forest"", ""garden""])"
1781695,What's on the blanket?," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What's on the blanket?"")
    return blanket_patches[0].simple_query(""What's on the blanket?"")"
17699779,Is she on a bed?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is she on a bed?"")
    for woman_patch in woman_patches:
        is_on_bed = woman_patch.simple_query(""Is she on a bed?"")
        if is_on_bed == ""yes"":
            return ""yes""
    return ""no"""
464441,"What piece of furniture is the blanket on, a bed or a sofa?"," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    for blanket_patch in blanket_patches:
        bed_patches = image_patch.find(""bed"")
        sofa_patches = image_patch.find(""sofa"")
        if len(bed_patches) > 0:
            return ""bed""
        if len(sofa_patches) > 0:
            return ""sofa""
    return ""no"""
9505496,Are the wires above a man?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    man_patch = man_patches[0]
    wire_patches = image_patch.find(""wire"")
    for wire_patch in wire_patches:
        if wire_patch.vertical_center < man_patch.vertical_center:
            return ""yes""
    return ""no"""
4625512,What is the woman doing?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the woman doing?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""What is the woman doing?"")"
9441941,Is the woman's hair red or black?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    woman_patch = woman_patches[0]
    return woman_patch.best_text_match([""red"", ""black""])"
2387432,What's on the table?," # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What's on the table?"")
    table_patch = table_patches[0]
    return table_patch.simple_query(""What's on the table?"")"
10534717,What is the pillow on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pillow on?"")"
19335685,"What fruits is the container behind of, apples or bananas?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")"
3127817,The goat is standing in what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    goat_patches = image_patch.find(""goat"")
    # Question assumes only one goat patch
    if len(goat_patches) == 0:
        # If no goat is found, query the image directly
        return image_patch.simple_query(""The goat is standing in what?"")
    for goat_patch in goat_patches:
        is_standing = (goat_patch.simple_query(""Is the goat standing?"") == ""yes"")
        if is_standing:
            return goat_patch.simple_query(""The goat is standing in what?"") # crop would include the goat so keep it in the query
    # If no goat is standing, pick the first goat
    return goat_patches[0].simple_query(""The goat is standing in what?"")"
1588567,Where does the man that to the right of the mirror sit?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    man_patch = man_patches[0]
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        return ""no""
    mirror_patch = mirror_patches[0]
    if man_patch.horizontal_center > mirror_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
7399543,What is the floor made of?," # assumes only one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the floor made of?"")
    return floor_patches[0].simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is the house behind of?"")"
1174904,Is the cobblestone sidewalk both large and gray?," # cobblestone sidewalk is a compound noun
    image_patch = ImagePatch(image)
    cobblestone_sidewalk_patches = image_patch.find(""cobblestone sidewalk"")
    # Question assumes only one cobblestone sidewalk patch
    if len(cobblestone_sidewalk_patches) == 0:
        # If no cobblestone sidewalk is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    for cobblestone_sidewalk_patch in cobblestone_sidewalk_patches:
        is_large = cobblestone_sidewalk_patch.simple_query(""Is the cobblestone sidewalk large?"") == ""yes""
        is_gray = cobblestone_sidewalk_patch.simple_query(""Is the cobblestone sidewalk gray?"") == ""yes""
        return bool_to_yesno(is_large and is_gray)"
13375231,What is the lettuce on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lettuce on?"")"
1194027,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    clothing_patch = clothing_patches[0]
    return clothing_patch.best_text_match([""black"", ""white"", ""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""silver"", ""gold"", ""white"", ""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""silver"", ""gold""])"
9963477,Is the statue wearing a dress?," # assumes only one statue
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    for statue_patch in statue_patches:
        is_wearing_dress = (statue_patch.simple_query(""Is the statue wearing a dress?"") == ""yes"")
        if is_wearing_dress:
            return ""yes""
    return ""no"""
1151995,Which side of the photo is the yellow vase on?," # assumes only one yellow vase
    image_patch = ImagePatch(image)
    yellow_vase_patches = image_patch.find(""yellow vase"")
    if len(yellow_vase_patches) == 0:
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    yellow_vase_patch = yellow_vase_patches[0]
    if yellow_vase_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
712821,What is common to the bear and the belt?," # assumes only one bear and one belt
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    bear_patch = bear_patches[0]
    belt_patches = image_patch.find(""belt"")
    # Question assumes only one belt patch
    if len(belt_patches) == 0:
        return ""no""
    belt_patch = belt_patches[0]
    return bear_patch.best_text_match([""brown"", ""black"", ""red"", ""blue"", ""yellow"", ""green"", ""purple"", ""pink"", ""gray"", ""white"", ""orange"", ""brown"", ""black"", ""red"", ""blue"", ""yellow"", ""green"", ""purple"", ""pink"", ""gray"", ""white"", ""orange""]) # crop would include the color so keep it in the query"
1757418,What is the vehicle to the right of the car?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    car_patch = car_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > car_patch.horizontal_center:
            return vehicle_patch.simple_query(""What is the vehicle to the right of the car?"") # crop would include the car so keep it in the query
    return ""no"""
7624100,Are the trunks that are gray wet and large?," # TODO: add wet and large
    image_patch = ImagePatch(image)
    trunks_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunks_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunks_patches:
        is_gray = trunk_patch.verify_property(""trunk"", ""gray"")
        is_wet = trunk_patch.verify_property(""trunk"", ""wet"")
        is_large = trunk_patch.verify_property(""trunk"", ""large"")
        return bool_to_yesno(is_gray and is_wet and is_large)"
1125474,"On which side of the photo is the iron fence, the right or the left?"," # assumes only one iron fence
    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    # Question assumes only one iron fence patch
    if len(iron_fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    iron_fence_patch = iron_fence_patches[0]
    if iron_fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1300375,What is the name of the item of furniture that the printer is on?," # assumes only one printer patch
    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    if len(printer_patches) == 0:
        # If no printer is found, query the image directly
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    printer_patch = printer_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > printer_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the name of the item of furniture that the printer is on?"") # crop would include the printer so keep it in the query
    return ""no"""
5925196,What's the building covered by?," # assumes only one building
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    if len(building_patches) == 0:
        return image_patch.simple_query(""What's the building covered by?"")
    building_patch = building_patches[0]
    return building_patch.best_text_match([""tree"", ""grass"", ""sky"", ""clouds"", ""water"", ""snow"", ""rock"", ""sand"", ""dirt"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", ""plants"", ""grass"", ""leaves"", ""flowers"", ""bushes"", ""trees"", """
1948055,What watercraft is the white rope tying?," # assumes only one watercraft
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    for watercraft_patch in watercraft_patches:
        white_rope_patches = image_patch.find(""white rope"")
        # Question assumes only one white rope patch
        if len(white_rope_patches) == 0:
            return ""no""
        for white_rope_patch in white_rope_patches:
            if watercraft_patch.horizontal_center > white_rope_patch.horizontal_center:
                return watercraft_patch.simple_query(""What watercraft is the white rope tying?"")
    return ""no"""
8540582,What kind of animal is in front of the leafy trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?," # walking woman by the bus
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    for woman_patch in woman_patches:
        bus_patches = image_patch.find(""bus"")
        for bus_patch in bus_patches:
            if bus_patch.horizontal_center > woman_patch.horizontal_center:
                return woman_patch.simple_query(""What does the walking woman by the bus wear?"")
    return ""no"""
1129508,Is the controller to the left of a pillow?," # assumes only one pillow
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center < controller_patch.horizontal_center:
                return ""yes""
    return ""no"""
18664084,Is there any sheep by the fence?," # assumes only one sheep
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    if len(sheep_patches) == 0:
        return ""no""
    for sheep_patch in sheep_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center > sheep_patch.horizontal_center:
                return ""yes""
    return ""no"""
6912079,What animal is this?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is this?"")
    return animal_patches[0].simple_query(""What animal is this?"")"
3412029,Where is the person?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Where is the person?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif person_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
14161122,What animal is in the water?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal in the water?"") == ""yes"":
            return animal_patch.simple_query(""What animal is in the water?"")
    return ""no animal is in the water"""
1781542,What is the item of furniture to the right of the baby the parent is to the left of?," # TODO: add more examples
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    for baby_patch in baby_patches:
        parent_patches = image_patch.find(""parent"")
        # Question assumes only one parent patch
        if len(parent_patches) == 0:
            return ""no""
        for parent_patch in parent_patches:
            if parent_patch.horizontal_center < baby_patch.horizontal_center:
                furniture_patches = image_patch.find(""furniture"")
                # Question assumes only one furniture patch
                if len(furniture_patches) == 0:
                    return ""no""
                for furniture_patch in furniture_patches:
                    if furniture_patch.horizontal_center > baby_patch.horizontal_center:
                        return furniture_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    return ""no"""
15699496,What is the cup that looks clean made of?," # assumes only one cup
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    for cup_patch in cup_patches:
        if cup_patch.simple_query(""Is the cup clean?"") == ""yes"":
            return cup_patch.simple_query(""What is the cup that looks clean made of?"")
    # If no cup is clean, pick the first cup
    return cup_patches[0].simple_query(""What is the cup that looks clean made of?"")"
12765451,What animals are to the right of the ladder?," # assumes only one ladder
    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for ladder_patch in ladder_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return ""no""
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > ladder_patch.horizontal_center:
                return animal_patch.simple_query(""What animals are to the right of the ladder?"")
    return ""no"""
191044307,What animal is black?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What animal is black?"")
    return ""no animal is black"""
12639181,Who is wearing shorts?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, pick the first person
    return person_patches[0].simple_query(""Who is wearing shorts?"")"
10630949,Is the person that is not male wearing an elbow pad?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for person_patch in person_patches:
        is_male = person_patch.simple_query(""Is the person male?"") == ""yes""
        if not is_male:
            return person_patch.simple_query(""Is the person that is not male wearing an elbow pad?"") # crop would include the elbow pad so keep it in the query
    # If no person is not male, pick the first person
    return person_patches[0].simple_query(""Is the person that is not male wearing an elbow pad?"")"
14544602,What is the boy holding?," # assumes only one boy
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    holding_patches = image_patch.find(""holding"")
    # Question assumes only one holding patch
    if len(holding_patches) == 0:
        return ""nothing""
    holding_patch = holding_patches[0]
    return holding_patch.simple_query(""What is the boy holding?"")"
2986699,Of what material the dish?," # material is a property
    image_patch = ImagePatch(image)
    dish_patches = image_patch.find(""dish"")
    # Question assumes only one dish patch
    if len(dish_patches) == 0:
        # If no dish is found, query the image directly
        return image_patch.simple_query(""Of what material the dish?"")
    return dish_patches[0].simple_query(""Of what material the dish?"")"
161013513,What kind of animal is on the street?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal on the street?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is on the street?"")
    return ""no animal"""
15143936,What animal is before the roof?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is before the roof?"")"
1955043,Who is playing with the ball?," # assumes only one person and one ball
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    ball_patches = image_patch.find(""ball"")
    for person_patch in person_patches:
        for ball_patch in ball_patches:
            if person_patch.horizontal_center > ball_patch.horizontal_center:
                return person_patch.simple_query(""Who is playing with the ball?"")
    return ""no one"""
91044150,What is the name of the animals in front of the trees beside the river?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?," # assumes only one fruit patch
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is hanging?"")
    return fruit_patches[0].simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?," # assumes only one kangaroo and one bird
    image_patch = ImagePatch(image)
    kangaroo_patches = image_patch.find(""kangaroo"")
    bird_patches = image_patch.find(""bird"")
    if len(kangaroo_patches) == 0 and len(bird_patches) == 0:
        return ""no""
    if len(kangaroo_patches) == 0:
        return ""bird""
    if len(bird_patches) == 0:
        return ""kangaroo""
    return ""kangaroo and bird"""
10457241,What is the color of the trousers?," # trousers is a plural noun
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers is found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"")"
2913850,Is the placemat in the bottom or in the top part?," # TODO: check if this is correct
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What is covered with blanket?"")
    for blanket_patch in blanket_patches:
        return blanket_patch.simple_query(""What is covered with blanket?"") # crop would include the blanket so keep it in the query"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?," # TODO: add a way to check if the man is wearing a sweater
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    man_patch = man_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    furniture_patch = furniture_patches[0]
    if furniture_patch.horizontal_center > man_patch.horizontal_center:
        return furniture_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"") # crop would include the sweater so keep it in the query
    return furniture_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?"," # TODO: check if this works
    image_patch = ImagePatch(image)
    desk_drawer_patches = image_patch.find(""desk drawer"")
    # Question assumes only one desk drawer patch
    if len(desk_drawer_patches) == 0:
        # If no desk drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    if desk_drawer_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?," # assumes only one napkin and one tablecloth
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    tablecloth_patches = image_patch.find(""tablecloth"")
    if len(napkin_patches) == 0 and len(tablecloth_patches) == 0:
        # If no napkin or tablecloth is found, query the image directly
        return image_patch.simple_query(""Are there napkins or tablecloths?"")
    if len(napkin_patches) == 0:
        return bool_to_yesno(image_patch.exists(""tablecloth""))
    if len(tablecloth_patches) == 0:
        return bool_to_yesno(image_patch.exists(""napkin""))
    return bool_to_yesno(image_patch.exists(""napkin"") and image_patch.exists(""tablecloth""))"
19737232,Is the book on the right of the picture?," # assumes only one book
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book on the right of the picture?"")
    for book_patch in book_patches:
        if book_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
475064,Who is wearing the glasses?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        is_wearing_glasses = (person_patch.simple_query(""Is the person wearing glasses?"") == ""yes"")
        if is_wearing_glasses:
            return person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no person is wearing glasses, pick the first person
    return person_patches[0].simple_query(""Who is wearing the glasses?"")"
8594579,Is there a woman to the right of the orange object that is to the right of the person?," # TODO: add more tests
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    for woman_patch in woman_patches:
        orange_patches = image_patch.find(""orange"")
        # Question assumes only one orange patch
        if len(orange_patches) == 0:
            return ""no""
        for orange_patch in orange_patches:
            person_patches = image_patch.find(""person"")
            # Question assumes only one person patch
            if len(person_patches) == 0:
                return ""no""
            for person_patch in person_patches:
                if person_patch.horizontal_center < orange_patch.horizontal_center and orange_patch.horizontal_center < woman_patch.horizontal_center:
                    return ""yes""
    return ""no"""
14602992,Which side of the image is the couch on?," # assumes only one couch
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    for couch_patch in couch_patches:
        if couch_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
9944587,How tall is the man that is wearing a shirt?," # TODO: add height
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    man_patch = man_patches[0]
    is_wearing_shirt = (man_patch.simple_query(""Is the man wearing a shirt?"") == ""yes"")
    if is_wearing_shirt:
        return man_patch.simple_query(""How tall is the man that is wearing a shirt?"") # crop would include the shirt so keep it in the query
    return ""no"""
13736712,Are there any giraffes?," # assumes only one giraffe
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    return bool_to_yesno(len(giraffe_patches) > 0)"
6996118,The young girl is wearing what?," # TODO: add more options
    image_patch = ImagePatch(image)
    young_girl_patches = image_patch.find(""young girl"")
    # Question assumes only one young girl patch
    if len(young_girl_patches) == 0:
        # If no young girl is found, query the image directly
        return image_patch.simple_query(""The young girl is wearing what?"")
    young_girl_patch = young_girl_patches[0]
    return young_girl_patch.simple_query(""The young girl is wearing what?"")"
19992576,Is the basket on the floor small and brown?," # TODO: add color
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    for basket_patch in basket_patches:
        is_on_floor = basket_patch.simple_query(""Is the basket on the floor?"") == ""yes""
        is_small = basket_patch.simple_query(""Is the basket small?"") == ""yes""
        return bool_to_yesno(is_on_floor and is_small)"
17332401,What is the boy in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"")"
15586294,Which side is the leather armchair on?," # assumes only one armchair
    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""armchair"")
    if len(armchair_patches) == 0:
        # If no armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    armchair_patch = armchair_patches[0]
    if armchair_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15658324,What is the horse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?," # TODO: add color
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        return ""no""
    controller_patch = controller_patches[0]
    item_of_furniture_patches = image_patch.find(""item of furniture"")
    # Question assumes only one item of furniture patch
    if len(item_of_furniture_patches) == 0:
        return ""no""
    item_of_furniture_patch = item_of_furniture_patches[0]
    if item_of_furniture_patch.color == controller_patch.color:
        return item_of_furniture_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    return ""no"""
2531874,Who is playing?," # assumes only one person playing
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is playing?"")
    for person_patch in person_patches:
        is_playing = (person_patch.simple_query(""Is the person playing?"") == ""yes"")
        if is_playing:
            return person_patch.simple_query(""Who is playing?"")
    return ""no one"""
3112009,Is the plate on the left side?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    plate_patch = plate_patches[0]
    if plate_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
1527613,On which side of the picture is the bag?," # assumes only one bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?," # assumes only one road and one roof
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    if len(road_patches) == 0:
        return ""no""
    road_patch = road_patches[0]
    roof_patches = image_patch.find(""roof"")
    if len(roof_patches) == 0:
        return ""no""
    roof_patch = roof_patches[0]
    return bool_to_yesno(road_patch.verify_property(""road"", ""color"") == roof_patch.verify_property(""roof"", ""color""))"
161027384,What is the green rug hanging on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is using the laptop?"")
    for person_patch in person_patches:
        is_using_laptop = (person_patch.simple_query(""Is the person using a laptop?"") == ""yes"")
        if is_using_laptop:
            return person_patch.simple_query(""Who is using the laptop?"") # crop would include the laptop so keep it in the query
    # If no person is using a laptop, pick the first person
    return person_patches[0].simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who in the photo is standing?"")
    for person_patch in person_patches:
        is_standing = (person_patch.simple_query(""Is the person standing?"") == ""yes"")
        if is_standing:
            return person_patch.simple_query(""Who in the photo is standing?"") # crop would include the standing so keep it in the query
    # If no person is standing, pick the first person
    return person_patches[0].simple_query(""Who in the photo is standing?"")"
693318,Do you see any plates in the photo?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        return ""no""
    return ""yes"""
19613394,The person on the skateboard is wearing what?," # assumes only one person on the skateboard
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person on a skateboard?"") == ""yes"":
            return person_patch.simple_query(""The person on the skateboard is wearing what?"")
    return ""no"""
19927237,Is the blue car in front of the white van?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue car in front of the white van?"")"
31054022,What is the box sitting on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?," # ground is a property of the image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""ground"", ""snowy"") and image_patch.verify_property(""ground"", ""brown""))"
15185768,Does the sky look blue and clear?," # sky is a property of the image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""blue"") and image_patch.verify_property(""sky"", ""clear""))"
1589160,Does the person that is sitting lean against a fire hydrant?," # TODO: add a way to check if the person is sitting
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    for person_patch in person_patches:
        firehydrant_patches = image_patch.find(""fire hydrant"")
        for firehydrant_patch in firehydrant_patches:
            if firehydrant_patch.horizontal_center > person_patch.horizontal_center:
                return ""yes""
    return ""no"""
2142522,Are there any shopping carts or mannequins in this photo?," # shopping cart and mannequin are both nouns
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)"
17362234,Are there cages or scrub brushes in this picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)"
4955854,Is the lamp below the chain?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the lamp below the chain?"")"
10463545,Is the computer to the right of the other computer silver or black?," # assumes only one computer patch
    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    if len(computer_patches) == 0:
        # If no computer is found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    computer_patch = computer_patches[0]
    other_computer_patches = image_patch.find(""computer"")
    for other_computer_patch in other_computer_patches:
        if other_computer_patch.horizontal_center > computer_patch.horizontal_center:
            return computer_patch.best_text_match([""silver"", ""black""])
    return ""no"""
2265037,What is the girl wearing?," # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What is the girl wearing?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?," # assumes only one number or letter
    image_patch = ImagePatch(image)
    number_patches = image_patch.find(""number"")
    letter_patches = image_patch.find(""letter"")
    if len(number_patches) == 0 and len(letter_patches) == 0:
        return ""no""
    for number_patch in number_patches:
        if number_patch.verify_property(""number"", ""blue""):
            return ""yes""
    for letter_patch in letter_patches:
        if letter_patch.verify_property(""letter"", ""blue""):
            return ""yes""
    return ""no"""
3483992,Is the long bus to the left or to the right of the person with the backpack?," # assumes only one bus and one person with backpack
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    person_patches = image_patch.find(""person with backpack"")
    if len(bus_patches) == 0 or len(person_patches) == 0:
        return ""no""
    bus_patch = bus_patches[0]
    person_patch = person_patches[0]
    if bus_patch.horizontal_center < person_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
13598461,What is the device that is not on called?," # assumes only one device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    for device_patch in device_patches:
        is_on = device_patch.simple_query(""Is the device on?"") == ""yes""
        if not is_on:
            return device_patch.simple_query(""What is the device that is not on called?"") # crop would include the device so keep it in the query
    # If no device is not on, pick the first device
    return device_patches[0].simple_query(""What is the device that is not on called?"")"
13885436,The sky has what color?," # sky is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"")"
7432467,Is the black container to the left of the man that is on the motorcycle?," # TODO: add motorcycle
    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        # If no black container is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    for black_container_patch in black_container_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return ""no""
        for man_patch in man_patches:
            if man_patch.horizontal_center < black_container_patch.horizontal_center:
                return ""yes""
    return ""no"""
19540096,Is the fire in an oven?," # assumes only one fire patch
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    for fire_patch in fire_patches:
        is_in_oven = fire_patch.simple_query(""Is the fire in an oven?"") == ""yes""
        if is_in_oven:
            return ""yes""
    return ""no"""
18291107,The horse is where?," # assumes only one horse
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        return image_patch.simple_query(""The horse is where?"")
    horse_patch = horse_patches[0]
    return horse_patch.simple_query(""The horse is where?"")"
5435474,Is the man that is to the left of the motorbike wearing a hat?," # assumes only one man and one motorbike
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    motorbike_patches = image_patch.find(""motorbike"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    for man_patch in man_patches:
        for motorbike_patch in motorbike_patches:
            if motorbike_patch.horizontal_center > man_patch.horizontal_center:
                return man_patch.simple_query(""Is the man wearing a hat?"")"
226307,Are there any tables in the photo?," # assumes only one table
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))"
1944826,Who is reflected in the mirror?," # assumes only one mirror
    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        # If no mirror is found, query the image directly
        return image_patch.simple_query(""Who is reflected in the mirror?"")
    for mirror_patch in mirror_patches:
        return mirror_patch.simple_query(""Who is reflected in the mirror?"") # crop would include the reflection so keep it in the query"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?," # TODO: add a way to check if the cooking utensil is on top of the stove
    image_patch = ImagePatch(image)
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        # If no cooking utensil is found, query the image directly
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    cooking_utensil_patch = cooking_utensil_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if cooking_utensil_patch.horizontal_center > woman_patch.horizontal_center:
        return cooking_utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    return cooking_utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the left of the woman called?"")"
18435846,What is the color of the balloon that is to the right of the backpack?," # assumes only one balloon and one backpack
    image_patch = ImagePatch(image)
    balloon_patches = image_patch.find(""balloon"")
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one balloon patch
    if len(balloon_patches) == 0:
        # If no balloon is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    for balloon_patch in balloon_patches:
        for backpack_patch in backpack_patches:
            if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
                return balloon_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"") # crop would include the backpack so keep it in the query
    # If no balloon is to the right of the backpack, pick the first balloon
    return balloon_patches[0].simple_query(""What is the color of the balloon that is to the right of the backpack?"")"
8390894,Is the woman to the right of the man sitting on a sofa?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")"
18896007,Which side of the image is the pot on?," # assumes only one pot
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19323898,Is that pillow on a couch?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is that pillow on a couch?"")"
1281034,Where are the trees?," # assumes only one tree patch
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Where are the trees?"")
    tree_patch = tree_patches[0]
    if tree_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
13515147,What is on the cow?," # assumes only one cow
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        return image_patch.simple_query(""What is on the cow?"")
    cow_patch = cow_patches[0]
    return cow_patch.best_text_match([""hat"", ""helmet"", ""mask"", ""glasses"", ""goggles"", ""helmet"", ""mask"", ""glasses"", ""goggles""])"
91036716,What is the skater doing?," # assumes only one skater
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    # Question assumes only one skater patch
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    skater_patch = skater_patches[0]
    return skater_patch.simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?," # assumes only one person and one boy carrying
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    boy_carrying_patches = image_patch.find(""boy carrying"")
    if len(person_patches) == 0 or len(boy_carrying_patches) == 0:
        # If no person or boy carrying is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    person_patch = person_patches[0]
    boy_carrying_patch = boy_carrying_patches[0]
    if person_patch.horizontal_center < boy_carrying_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the left of the boy carrying?"")
    return boy_carrying_patch.simple_query(""What is the person to the left of the boy carrying?"")"
13152020,Is the ground wet or dry?," # assumes only one ground patch
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Is the ground wet or dry?"")
    return ground_patches[0].best_text_match([""wet"", ""dry""])"
19312096,"On which side is the purse, the left or the right?"," # assumes only one purse
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    if purse_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?," # assumes plural
    image_patch = ImagePatch(image)
    is_bread = image_patch.exists(""bread"")
    return bool_to_yesno(is_bread)"
9113663,Do you see either any snow or sand that are white?," # snow and sand are both white
    image_patch = ImagePatch(image)
    is_snow = image_patch.exists(""snow"")
    is_sand = image_patch.exists(""sand"")
    return bool_to_yesno(is_snow or is_sand)"
10243612,Which place is it?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?," # assumes only one napkin patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What vegetable is to the left of the napkin?"")
    for napkin_patch in napkin_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < napkin_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetable is to the left of the napkin?"")
    return ""no"""
15599523,Is the dog on the right side?," # assumes only one dog
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    dog_patch = dog_patches[0]
    if dog_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
101019673,What is the man wearing?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"")"
333047,Do you see any men to the right of the orange tent?," # assumes only one orange tent
    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""men"")
    # Question assumes only one men patch
    if len(men_patches) == 0:
        # If no men are found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for men_patch in men_patches:
        orange_tent_patches = image_patch.find(""orange tent"")
        for orange_tent_patch in orange_tent_patches:
            if orange_tent_patch.horizontal_center > men_patch.horizontal_center:
                return ""yes""
    return ""no"""
13907796,Is the shirt striped and green?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    for shirt_patch in shirt_patches:
        is_striped = shirt_patch.verify_property(""shirt"", ""striped"")
        is_green = shirt_patch.verify_property(""shirt"", ""green"")
        if is_striped and is_green:
            return ""yes""
    return ""no"""
17207604,Are there either bottles or shelves?," # assumes only one bottle and one shelf
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?," # assumes only one train patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    train_patch = train_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > train_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"") # crop would include the train so keep it in the query
    return ""no"""
7165131,Is that train engine small or large?," # TODO: add a way to check if the train is small or large
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    train_patch = train_patches[0]
    return train_patch.best_text_match([""small"", ""large""])"
21049362,Where are the railroad tracks?," # assumes only one railroad track
    image_patch = ImagePatch(image)
    railroad_patches = image_patch.find(""railroad track"")
    if len(railroad_patches) == 0:
        return image_patch.simple_query(""Where are the railroad tracks?"")
    railroad_patch = railroad_patches[0]
    return railroad_patch.simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?," # asks for the predicate of a relational verb (looking at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?," # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What are the children playing?"")
    child_patch = child_patches[0]
    return child_patch.simple_query(""What are the children playing?"")"
598297,Are there combs or figurines in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)"
16409127,What is the wire on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?," # tunnel is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tunnel small or large?"")"
17560468,Do you see trains or windows?," # trains or windows
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person near the man wearing?"")"
12352375,Is the vehicle that is sitting down black or blue?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    vehicle_patch = vehicle_patches[0]
    is_sitting_down = (vehicle_patch.simple_query(""Is the vehicle sitting down?"") == ""yes"")
    if is_sitting_down:
        return vehicle_patch.best_text_match([""black"", ""blue""])
    return ""no"""
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?," # assumes only one trash can and one white thing
    image_patch = ImagePatch(image)
    trash_can_patches = image_patch.find(""trash can"")
    # Question assumes only one trash can patch
    if len(trash_can_patches) == 0:
        # If no trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    trash_can_patch = trash_can_patches[0]
    white_thing_patches = image_patch.find(""white thing"")
    # Question assumes only one white thing patch
    if len(white_thing_patches) == 0:
        return ""no""
    white_thing_patch = white_thing_patches[0]
    if trash_can_patch.horizontal_center < white_thing_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5800248,Is it outdoors?," # assumes only one image patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it outdoors?""))"
4604785,Does the pizza slice to the left of the pizza have large size?," # assumes only one pizza slice
    image_patch = ImagePatch(image)
    pizza_slice_patches = image_patch.find(""pizza slice"")
    # Question assumes only one pizza slice patch
    if len(pizza_slice_patches) == 0:
        # If no pizza slice is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    for pizza_slice_patch in pizza_slice_patches:
        if pizza_slice_patch.horizontal_center < image_patch.horizontal_center:
            return bool_to_yesno(pizza_slice_patch.verify_property(""pizza slice"", ""large""))
    return ""no"""
15185845,What's the man wearing?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What's the man wearing?"")"
2282232,Where is the snow?," # assumes only one snow patch
    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    if len(snow_patches) == 0:
        # If no snow is found, query the image directly
        return image_patch.simple_query(""Where is the snow?"")
    snow_patch = snow_patches[0]
    if snow_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
7889197,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)"
154682,Where does the bird stand on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where does the bird stand on?"")"
10435315,Is the man holding a racket?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
121035887,Do the man shorts have white color?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man shorts"", ""white""))"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?," # assumes only one man and one vehicle
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.horizontal_center < man_patch.horizontal_center:
        return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    return vehicle_patch.simple_query(""What kind of vehicle is to the right of the man that is to the left of the cows?"")"
19659501,What is the color of the umbrella the bird is on?," # assumes only one bird and one umbrella
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    umbrella_patches = image_patch.find(""umbrella"")
    for bird_patch in bird_patches:
        for umbrella_patch in umbrella_patches:
            if bird_patch.horizontal_center > umbrella_patch.horizontal_center:
                return umbrella_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    return ""no"""
10595217,Where is the grass?," # assumes only one grass patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    grass_patch = grass_patches[0]
    if grass_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
14803743,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    clothing_patch = clothing_patches[0]
    return clothing_patch.best_text_match([""black"", ""white""])"
19743238,Is the man on the right side?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
3965204,Are the mountains covered with snow?," # assumes only one mountain patch
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    for mountain_patch in mountain_patches:
        is_covered_with_snow = mountain_patch.verify_property(""mountain"", ""snow"")
        return bool_to_yesno(is_covered_with_snow)"
141024710,Are there both windows and cars in the picture?," # assumes only one window and one car
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?," # TODO: add color
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    return shirt_patches[0].best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""black"", ""white"", ""gray"", ""silver"", ""gold"", ""beige"", ""tan"", ""navy"", ""maroon"", ""olive"", ""teal"", ""aqua"", ""lime"", ""fuchsia"", ""lavender"", ""salmon"", ""coral"", ""chocolate"", ""plum"", ""mustard"", ""turquoise"", ""indigo"", ""violet"", ""mauve"", ""aubergine"", ""copper"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"", ""cocoa"", ""cinnamon"", ""caramel"
3623367,What's he doing?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What's he doing?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""What's he doing?"")"
15634950,Where is the giraffe in front of the hay eating from?," # assumes only one giraffe and one hay patch
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    for giraffe_patch in giraffe_patches:
        hay_patches = image_patch.find(""hay"")
        for hay_patch in hay_patches:
            if giraffe_patch.horizontal_center > hay_patch.horizontal_center:
                return ""right""
            elif giraffe_patch.horizontal_center < hay_patch.horizontal_center:
                return ""left""
    return ""center"""
16644500,What animal is the log pulled by?," # assumes only one log
    image_patch = ImagePatch(image)
    log_patches = image_patch.find(""log"")
    # Question assumes only one log patch
    if len(log_patches) == 0:
        # If no log is found, query the image directly
        return image_patch.simple_query(""What animal is the log pulled by?"")
    for log_patch in log_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > log_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is the log pulled by?"")
    return ""no animal"""
3202108,Which side is the car on?," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""Which side is the car on?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10137201,Are the papers in the bottom part of the picture?," # TODO: check if this is correct
    image_patch = ImagePatch(image)
    papers_patches = image_patch.find(""papers"")
    # Question assumes only one papers patch
    if len(papers_patches) == 0:
        # If no papers is found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    if papers_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?," # assumes only one person on the left
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    for boy_patch in boy_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            return ""no""
        for person_patch in person_patches:
            if person_patch.horizontal_center < image_patch.horizontal_center:
                if boy_patch.horizontal_center < person_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right""
    return ""no"""
8438091,The picture is what color?," # TODO: add color
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The picture is what color?"")"
4325939,On which side of the photo is the banana?," # assumes only one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    banana_patch = banana_patches[0]
    if banana_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1425189,What is the name of the brown piece of furniture?," # assumes only one brown piece of furniture
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown"")
    # Question assumes only one brown patch
    if len(brown_patches) == 0:
        # If no brown is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    for brown_patch in brown_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.simple_query(""Is the furniture brown?"") == ""yes"":
                return furniture_patch.simple_query(""What is the name of the brown piece of furniture?"") # crop would include the brown so keep it in the query
    # If no brown furniture is found, pick the first brown patch
    return brown_patches[0].simple_query(""What is the name of the brown piece of furniture?"")"
5119962,Is the man to the right of glasses?," # assumes only one man and one glasses patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    glasses_patches = image_patch.find(""glasses"")
    if len(man_patches) == 0 or len(glasses_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    glasses_patch = glasses_patches[0]
    if man_patch.horizontal_center > glasses_patch.horizontal_center:
        return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?," # assumes only one toilet
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    for toilet_patch in toilet_patches:
        lid_patches = image_patch.find(""lid"")
        # Question assumes only one lid patch
        if len(lid_patches) == 0:
            return ""no""
        for lid_patch in lid_patches:
            if lid_patch.vertical_center > toilet_patch.vertical_center:
                return ""up""
    return ""down"""
6522554,Which kind of device does the man hold?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    for device_patch in device_patches:
        if device_patch.horizontal_center > man_patch.horizontal_center:
            return device_patch.simple_query(""Which kind of device does the man hold?"")
    return ""no"""
870619,What is the device to the left of the person that is to the left of the television?," # TODO: add a way to check if the person is to the left of the television
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    for person_patch in person_patches:
        device_patches = image_patch.find(""device"")
        # Question assumes only one device patch
        if len(device_patches) == 0:
            return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < person_patch.horizontal_center:
                return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    return ""no"""
12713794,Does the woman to the left of the man wear a necklace?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one man and one woman patch
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return bool_to_yesno(woman_patch.verify_property(""woman"", ""necklace""))
    else:
        return bool_to_yesno(man_patch.verify_property(""man"", ""necklace""))"
824070,What is the man doing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"")"
11593733,Which kind of furniture is right to the pillow?," # assumes only one pillow
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    for pillow_patch in pillow_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    return ""no"""
3357821,Does the dog to the left of the other dog look small or large?," # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    for dog_patch in dog_patches:
        other_dog_patches = image_patch.find(""dog"")
        for other_dog_patch in other_dog_patches:
            if other_dog_patch.horizontal_center > dog_patch.horizontal_center:
                return dog_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    return ""no"""
338026,Are the white candles short or tall?," # assumes only one candle patch
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    candle_patch = candle_patches[0]
    is_short = candle_patch.simple_query(""Are the candles short or tall?"") == ""short""
    is_white = candle_patch.simple_query(""Are the candles white or black?"") == ""white""
    return bool_to_yesno(is_short and is_white)"
15346232,What kind of fruit is the girl holding?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    girl_patch = girl_patches[0]
    fruit_patches = image_patch.find(""fruit"")
    for fruit_patch in fruit_patches:
        if fruit_patch.horizontal_center > girl_patch.horizontal_center:
            return fruit_patch.simple_query(""What kind of fruit is the girl holding?"") # crop would include the fruit so keep it in the query
    return ""no fruit"""
13553098,"On which side of the photo is the yellow vehicle, the right or the left?"," # assumes only one yellow vehicle
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    yellow_vehicle_patch = yellow_vehicle_patches[0]
    if yellow_vehicle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
81030271,Is the gray car to the right or to the left of the cart?," # assumes only one gray car and one cart
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    cart_patches = image_patch.find(""cart"")
    if len(gray_car_patches) == 0 or len(cart_patches) == 0:
        return ""no""
    gray_car_patch = gray_car_patches[0]
    cart_patch = cart_patches[0]
    if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?," # cooking utensil is a relation so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")"
8240699,What animal is in front of the bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the bird?"")"
10105081,Is the fence white or green?," # fence is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the fence white or green?"")"
13613689,Is there a train or a fence in the picture?," # train or fence
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)"
10662521,What is the bottle made of?," # bottle is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    plate_patch = plate_patches[0]
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        return ""no""
    for fruit_patch in fruit_patches:
        if fruit_patch.horizontal_center > plate_patch.horizontal_center:
            return fruit_patch.simple_query(""Which kind of fruit is on the plate?"")
    return ""no"""
16701575,What device is to the right of the cake?," # cake is in the crop
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > image_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the right of the cake?"")
    return ""no"""
6572516,What material is the ceiling?," # ceiling is a property of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?," # assumes only one magazine and one umbrella
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?," # assumes only one egg
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    egg_patch = egg_patches[0]
    return egg_patch.simple_query(""What is the color of the egg in the middle of the picture?"") # crop would include the egg so keep it in the query"
14371534,Are the gold pans on the right part or on the left?," # assumes only one gold pan
    image_patch = ImagePatch(image)
    gold_pan_patches = image_patch.find(""gold pan"")
    # Question assumes only one gold pan patch
    if len(gold_pan_patches) == 0:
        # If no gold pan is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    gold_pan_patch = gold_pan_patches[0]
    if gold_pan_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16538076,What does the man that is not tall wear?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if not man_patch.verify_property(""man"", ""tall""):
            return man_patch.simple_query(""What does the man that is not tall wear?"") # crop would include the shirt so keep it in the query
    # If no man is not tall, pick the first man
    return man_patches[0].simple_query(""What does the man that is not tall wear?"")"
5483644,"On which side is the woman, the left or the right?"," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal in this photograph?"")
    return animal_patches[0].simple_query(""What is the animal in this photograph?"")"
1290926,Are there either any life vests or flags?," # assumes only one life vest and one flag
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)"
18273738,Do you see a cup?," # assumes only one cup
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        return ""no""
    return ""yes"""
4211922,Who is sitting on the table?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is sitting on the table?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person sitting on the table?"") == ""yes"":
            return person_patch.simple_query(""Who is sitting on the table?"") # crop would include the table so keep it in the query
    return ""no one"""
6587526,What is the color of the girl to the left of the other girl?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    for girl_patch in girl_patches:
        other_girl_patches = image_patch.find(""girl"")
        for other_girl_patch in other_girl_patches:
            if other_girl_patch.horizontal_center > girl_patch.horizontal_center:
                return girl_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    return ""no"""
6599090,What is the person to the right of the car holding?," # assumes only one person and one car
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    car_patches = image_patch.find(""car"")
    # Question assumes only one person and one car patch
    if len(person_patches) == 0 or len(car_patches) == 0:
        # If no person or car is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    person_patch = person_patches[0]
    car_patch = car_patches[0]
    if person_patch.horizontal_center > car_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the right of the car holding?"")
    return car_patch.simple_query(""What is the person to the right of the car holding?"")"
1174895,What is the vehicle in the parking lot?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    return vehicle_patches[0].simple_query(""What is the vehicle in the parking lot?"")"
14755158,Who is the woman in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the woman in front of?"")"
18349161,Where does the cow that is standing stand?," # TODO: add a way to check if the cow is standing
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    cow_patch = cow_patches[0]
    return cow_patch.simple_query(""Where does the cow that is standing stand?"")"
7472884,On which side is the tap?," # left or right
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
111051831,On which side of the image is the cabinet?," # assumes only one cabinet
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    if len(cabinet_patches) == 0:
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?," # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        return image_patch.simple_query(""On which side of the image is the fork?"")
    fork_patch = fork_patches[0]
    if fork_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?," # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    person_patch = person_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""no""
    for bag_patch in bag_patches:
        if bag_patch.horizontal_center > person_patch.horizontal_center:
            man_patches = image_patch.find(""man"")
            # Question assumes only one man patch
            if len(man_patches) == 0:
                return ""no""
            for man_patch in man_patches:
                if man_patch.horizontal_center > person_patch.horizontal_center:
                    return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?," # material is a property
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    artwork_patch = artwork_patches[0]
    computer_desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one computer desk patch
    if len(computer_desk_patches) == 0:
        return ""no""
    computer_desk_patch = computer_desk_patches[0]
    return bool_to_yesno(artwork_patch.verify_property(""artwork"", ""material"") == computer_desk_patch.verify_property(""computer desk"", ""material""))"
14298125,Who is playing Wii?," # assumes only one person playing Wii
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        is_playing_wii = (person_patch.simple_query(""Is the person playing Wii?"") == ""yes"")
        if is_playing_wii:
            return person_patch.simple_query(""Who is playing Wii?"") # crop would include the Wii so keep it in the query
    return ""no one"""
9382689,What's the floor made of?," # assumes only one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What's the floor made of?"")
    return floor_patches[0].simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the dress?"")
    for person_patch in person_patches:
        is_wearing_dress = (person_patch.simple_query(""Is the person wearing a dress?"") == ""yes"")
        if is_wearing_dress:
            return person_patch.simple_query(""Who is wearing the dress?"") # crop would include the dress so keep it in the query
    # If no person is wearing a dress, pick the first person
    return person_patches[0].simple_query(""Who is wearing the dress?"")"
15127108,Does the tea pot above the receipt look short and white?," # TODO: add a way to check if the tea pot is above the receipt
    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    # Question assumes only one tea pot patch
    if len(tea_pot_patches) == 0:
        # If no tea pot is found, query the image directly
        return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")
    tea_pot_patch = tea_pot_patches[0]
    is_short = tea_pot_patch.simple_query(""Is the tea pot short?"") == ""yes""
    is_white = tea_pot_patch.simple_query(""Is the tea pot white?"") == ""yes""
    return bool_to_yesno(is_short and is_white)"
15632653,Which room is it?," # assumes only one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query
    return ""no clothing is black"""
490992,Is the fence on the left side or on the right of the picture?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?," # TODO: add mountain patches
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""mountain"", ""rocky""))"
17573742,Is the woman to the right of the camera wearing a coat?," # assumes only one woman and one camera
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    camera_patches = image_patch.find(""camera"")
    # Question assumes only one woman and one camera patch
    if len(woman_patches) == 0 or len(camera_patches) == 0:
        # If no woman or camera is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    woman_patch = woman_patches[0]
    camera_patch = camera_patches[0]
    if woman_patch.horizontal_center > camera_patch.horizontal_center:
        return bool_to_yesno(woman_patch.verify_property(""woman"", ""coat""))
    return ""no"""
3395780,Is the vehicle to the left of the parking meter covered in rain?," # assumes one vehicle and one parking meter
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    for vehicle_patch in vehicle_patches:
        parking_meter_patches = image_patch.find(""parking meter"")
        # Question assumes only one parking meter patch
        if len(parking_meter_patches) == 0:
            return ""no""
        for parking_meter_patch in parking_meter_patches:
            if parking_meter_patch.horizontal_center < vehicle_patch.horizontal_center:
                return bool_to_yesno(vehicle_patch.verify_property(""vehicle"", ""rain""))
    return ""no"""
1542668,Is there a black laptop or desk?," # assumes only one laptop and one desk
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    desk_patches = image_patch.find(""desk"")
    if len(laptop_patches) == 0 and len(desk_patches) == 0:
        return image_patch.simple_query(""Is there a black laptop or desk?"")
    if len(laptop_patches) == 0:
        return ""no""
    if len(desk_patches) == 0:
        return ""no""
    for laptop_patch in laptop_patches:
        for desk_patch in desk_patches:
            if laptop_patch.color == ""black"" or desk_patch.color == ""black"":
                return ""yes""
    return ""no"""
1655442,What type of food is to the right of the waffles that are to the right of the person?," # TODO: fix
    image_patch = ImagePatch(image)
    waffles_patches = image_patch.find(""waffles"")
    # Question assumes only one waffles patch
    if len(waffles_patches) == 0:
        # If no waffles are found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for waffles_patch in waffles_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
        for person_patch in person_patches:
            food_patches = image_patch.find(""food"")
            # Question assumes only one food patch
            if len(food_patches) == 0:
                # If no food is found, query the image directly
                return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
            for food_patch in food_patches:
                if food_patch.horizontal_center > waffles_patch.horizontal_center and food_patch.horizontal_center < person_patch.horizontal_center:
                    return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    return ""no"""
395290,How large is the bag?," # TODO: add more options
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"")"
16138893,Are there both motorcycles and cars in this scene?," # assumes only one motorcycle and one car
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, pick the first person
    return person_patches[0].simple_query(""Who is wearing shorts?"")"
171032184,What hangs from the windows?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?," # assumes only one spoon and one plate
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")"
8197176,What color is the jacket that the man wears?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return ""no""
    for jacket_patch in jacket_patches:
        if man_patch.horizontal_center > jacket_patch.horizontal_center:
            return jacket_patch.simple_query(""What color is the jacket that the man wears?"") # crop would include the jacket so keep it in the query
    return ""no"""
3440931,What are that pieces of furniture called?," # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What are that pieces of furniture called?"")
    return furniture_patches[0].best_text_match([""chair"", ""table"", ""sofa"", ""bed"", ""desk"", ""bookshelf"", ""dresser"", ""couch"", ""armchair"", ""coffee table"", ""end table"", ""nightstand"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"", ""bookcase"", ""bookshelf"
337924,What is the fruit that is to the left of the chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?," # assumes only one bowl
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    if len(bowl_patches) == 0:
        return image_patch.simple_query(""What do you think are the bowls on?"")
    bowl_patch = bowl_patches[0]
    return bowl_patch.simple_query(""What do you think are the bowls on?"")"
18330260,Is the sky above the trees open and clear?," # sky is above trees
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky above the trees open and clear?"")
    sky_patch = sky_patches[0]
    trees_patches = image_patch.find(""trees"")
    # Question assumes only one trees patch
    if len(trees_patches) == 0:
        return ""no""
    trees_patch = trees_patches[0]
    is_open = sky_patch.simple_query(""Is the sky open?"") == ""yes""
    is_clear = sky_patch.simple_query(""Is the sky clear?"") == ""yes""
    return bool_to_yesno(is_open and is_clear)"
14119691,Does the squirrel to the right of the stuffed dog look white?," # assumes only one squirrel and one stuffed dog
    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    stuffed_dog_patches = image_patch.find(""stuffed dog"")
    # Question assumes only one squirrel patch
    if len(squirrel_patches) == 0:
        # If no squirrel is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for squirrel_patch in squirrel_patches:
        # Question assumes only one stuffed dog patch
        if len(stuffed_dog_patches) == 0:
            return ""no""
        for stuffed_dog_patch in stuffed_dog_patches:
            if stuffed_dog_patch.horizontal_center > squirrel_patch.horizontal_center:
                return bool_to_yesno(squirrel_patch.verify_property(""squirrel"", ""white""))
    return ""no"""
18437694,Does the clock to the right of the statue have gold color and tiny size?," # assumes only one clock patch
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Does the clock to the right of the statue have gold color and tiny size?"")
    for clock_patch in clock_patches:
        is_gold = clock_patch.verify_property(""clock"", ""gold"")
        is_tiny = clock_patch.verify_property(""clock"", ""tiny"")
        if is_gold and is_tiny:
            return ""yes""
    return ""no"""
1252960,Where was the photo taken?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?," # assumes only one frisbee
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is there a frisbee on the grass?"")
    for frisbee_patch in frisbee_patches:
        is_on_grass = (frisbee_patch.simple_query(""Is the frisbee on the grass?"") == ""yes"")
        if is_on_grass:
            return ""yes""
    return ""no"""
13180513,Are there either cakes or containers in the photo?," # contains a disjunction (either, or, etc), so ask directly
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?," # assumes only one car and one motorcycle
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_black_motorcycle = image_patch.exists(""black motorcycle"")
    return bool_to_yesno(is_black_car or is_black_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?," # assumes only one police officer
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    for blue_car_patch in blue_car_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            return ""no""
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < image_patch.horizontal_center:
                return ""in front of""
            else:
                return ""behind"""
5785831,What is in the glass?," # contains a relation (in, on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the glass?"")"
19246241,Are there any brown benches or buckets?," # assumes only one brown bench or bucket
    image_patch = ImagePatch(image)
    brown_bench_patches = image_patch.find(""brown bench"")
    brown_bucket_patches = image_patch.find(""brown bucket"")
    return bool_to_yesno(len(brown_bench_patches) > 0 or len(brown_bucket_patches) > 0)"
3243803,"Where in the picture is the spoon, on the right or on the left?"," # assumes only one spoon
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6952486,Does the shirt look white?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))"
17401425,Is there a bag that is not brown?," # assumes only one bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if not bag_patch.verify_property(""bag"", ""brown""):
            return ""yes""
    return ""no"""
481240,"Which kind of furniture is large, the shelf or the cupboard?"," # assumes only one shelf and one cupboard
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    for shelf_patch in shelf_patches:
        is_large = shelf_patch.simple_query(""Is the shelf large?"") == ""yes""
        if is_large:
            return ""shelf""
    # If no shelf is large, query the cupboard
    for cupboard_patch in cupboard_patches:
        is_large = cupboard_patch.simple_query(""Is the cupboard large?"") == ""yes""
        if is_large:
            return ""cupboard""
    return ""no"""
8531943,Are there any screens or bags?," # assumes only one screen and one bag
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)"
1969545,What is she wearing?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    return woman_patches[0].simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?"," # freezer and ice maker are the same object
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    for appliance_patch in appliance_patches:
        if not appliance_patch.verify_property(""appliance"", ""white""):
            return appliance_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    return ""no"""
1051870,Are there chairs or tables that are not green?," # not green
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    if is_chair and is_table:
        return ""yes""
    if is_chair:
        return ""no""
    if is_table:
        return ""no""
    return ""yes"""
1366363,Does the taxi have a different color than the truck?," # taxi and truck are the same color
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    taxi_patch = taxi_patches[0]
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        return ""no""
    truck_patch = truck_patches[0]
    return bool_to_yesno(taxi_patch.color != truck_patch.color)"
5460839,In which part of the image is the dog?," # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    dog_patch = dog_patches[0]
    if dog_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
18899476,What type of vegetable is to the right of the rice that is on the plate?," # TODO: add a way to check if the rice is on the plate
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > image_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    return ""no"""
8606903,What food item is not wide?," # assumes only one food item
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""wide""):
            return food_patch.simple_query(""What food item is not wide?"")
    return ""no food item is not wide"""
18394861,Are there any folding chairs or skateboards?," # assumes only one folding chair or skateboard
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there an elephant near the pond?"")"
1575941,Which place is it?," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?," # contains a relation (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")"
16654241,Is the TV on the left or on the right?," # assumes only one TV patch
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    tv_patch = tv_patches[0]
    if tv_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
18685233,Which kind of vehicle is to the left of the flags?," # assumes only one vehicle and one flag
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    flag_patches = image_patch.find(""flag"")
    for vehicle_patch in vehicle_patches:
        for flag_patch in flag_patches:
            if vehicle_patch.horizontal_center < flag_patch.horizontal_center:
                return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    return ""no"""
9796068,Are there both a fence and a sheep in the picture?," # assumes only one fence and one sheep
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?," # assumes only one blue blanket or towel
    image_patch = ImagePatch(image)
    blue_blanket_patches = image_patch.find(""blue blanket"")
    blue_towel_patches = image_patch.find(""blue towel"")
    if len(blue_blanket_patches) == 0 and len(blue_towel_patches) == 0:
        return ""no""
    for blue_blanket_patch in blue_blanket_patches:
        if blue_blanket_patch.verify_property(""blue blanket"", ""blue""):
            return ""yes""
    for blue_towel_patch in blue_towel_patches:
        if blue_towel_patch.verify_property(""blue towel"", ""blue""):
            return ""yes""
    return ""no"""
1110330,Is the pillow to the left of the frog cream colored or green?," # pillow is cream colored
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center < image_patch.horizontal_center:
            return pillow_patch.best_text_match([""cream colored"", ""green""])
    return ""no"""
511507,Is the antenna on the aircraft?," # assumes only one aircraft
    image_patch = ImagePatch(image)
    aircraft_patches = image_patch.find(""aircraft"")
    # Question assumes only one aircraft patch
    if len(aircraft_patches) == 0:
        # If no aircraft is found, query the image directly
        return image_patch.simple_query(""Is the antenna on the aircraft?"")
    for aircraft_patch in aircraft_patches:
        is_antenna = aircraft_patch.simple_query(""Is the antenna on the aircraft?"")
        if is_antenna == ""yes"":
            return ""yes""
    return ""no"""
10464417,"In which part is the tent, the top or the bottom?"," # assumes only one tent
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
10816730,Is the tree in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tree in front of the building?"")"
18766115,Who is walking?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is walking?"")
    return person_patches[0].simple_query(""Who is walking?"")"
10625851,Are there either any fruits or plates in the image?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    for person_patch in person_patches:
        is_wearing_coat = (person_patch.simple_query(""Is the person wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return ""yes""
    return ""no"""
4194722,Is the man wearing a helmet?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""helmet""))"
414248,"What animal are the women near the ocean riding, a pig or a horse?"," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")
    woman_patch = woman_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > woman_patch.horizontal_center:
            return animal_patch.best_text_match([""pig"", ""horse""])"
683094,Who is wearing the shirt?," # shirt is not a relational verb so go step by step
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for shirt_patch in shirt_patches:
        is_wearing_shirt = (shirt_patch.simple_query(""Is the shirt wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query
    # If no shirt is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")"
12140603,What device is to the left of the headphones?," # assumes only one headphone patch
    image_patch = ImagePatch(image)
    headphone_patches = image_patch.find(""headphones"")
    # Question assumes only one headphone patch
    if len(headphone_patches) == 0:
        # If no headphone is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for headphone_patch in headphone_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < headphone_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the headphones?"")
    return ""no"""
5575209,The flowers are where?," # TODO: add more options
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    flower_patch = flower_patches[0]
    return flower_patch.simple_query(""The flowers are where?"")"
8773829,Which kind of furniture is made of wood?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""Which kind of furniture is made of wood?"")"
12636428,Which kind of animal is black?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal black?"") == ""yes"":
            return animal_patch.simple_query(""Which kind of animal is black?"")
    return ""no animal is black"""
1020584,What animals is the car behind of?," # TODO: check if this is correct
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What animals is the car behind of?"")
    for car_patch in car_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return ""no""
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center < car_patch.horizontal_center:
                return animal_patch.simple_query(""What animals is the car behind of?"")
    return ""no"""
11879418,The man is standing on what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is standing on what?"")"
12334288,What device is to the left of the cabinet?," # assumes only one device and one cabinet
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > device_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the cabinet?"")
    return ""no"""
691610,Is the monitor to the left of a book?," # assumes only one monitor and one book
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    book_patches = image_patch.find(""book"")
    if len(monitor_patches) == 0 or len(book_patches) == 0:
        return ""no""
    monitor_patch = monitor_patches[0]
    book_patch = book_patches[0]
    if monitor_patch.horizontal_center < book_patch.horizontal_center:
        return ""yes""
    return ""no"""
7552714,Is the color of the jacket black?," # assumes only one jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return bool_to_yesno(jacket_patches[0].verify_property(""jacket"", ""black""))"
8492422,Is the man to the left of a boy?," # assumes only one man and one boy
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    boy_patches = image_patch.find(""boy"")
    if len(man_patches) == 0 or len(boy_patches) == 0:
        # If no man or boy is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    man_patch = man_patches[0]
    boy_patch = boy_patches[0]
    if man_patch.horizontal_center < boy_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
13248061,What type of device is to the left of the keyboard in the bottom of the image?," # TODO: add more options
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    keyboard_patch = keyboard_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    device_patch = device_patches[0]
    if device_patch.horizontal_center < keyboard_patch.horizontal_center:
        return device_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    return ""no"""
18252454,What is common to the roof and the sky?," # common to the roof and the sky
    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    # Question assumes only one roof patch
    if len(roof_patches) == 0:
        # If no roof is found, query the image directly
        return image_patch.simple_query(""What is common to the roof and the sky?"")
    for roof_patch in roof_patches:
        sky_patches = image_patch.find(""sky"")
        # Question assumes only one sky patch
        if len(sky_patches) == 0:
            return ""no""
        for sky_patch in sky_patches:
            if roof_patch.horizontal_center == sky_patch.horizontal_center:
                return ""color""
    return ""no"""
14443687,What do the cat and the book have in common?," # assumes only one cat and one book
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    cat_patch = cat_patches[0]
    # Question assumes only one book patch
    if len(book_patches) == 0:
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    book_patch = book_patches[0]
    # If the cat and the book are in the same patch, query the patch directly
    if cat_patch == book_patch:
        return cat_patch.simple_query(""What do the cat and the book have in common?"")
    # If the cat and the book are in different patches, query the image directly
    return image_patch.simple_query(""What do the cat and the book have in common?"")"
14571335,Who is wearing trousers?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing trousers?"")
    for person_patch in person_patches:
        is_wearing_trousers = (person_patch.simple_query(""Is the person wearing trousers?"") == ""yes"")
        if is_wearing_trousers:
            return person_patch.simple_query(""Who is wearing trousers?"") # crop would include the trousers so keep it in the query
    # If no person is wearing trousers, pick the first person
    return person_patches[0].simple_query(""Who is wearing trousers?"")"
474885,Who wears a cap?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    for person_patch in person_patches:
        is_wearing_cap = (person_patch.simple_query(""Is the person wearing a cap?"") == ""yes"")
        if is_wearing_cap:
            return person_patch.simple_query(""Who wears a cap?"") # crop would include the cap so keep it in the query
    # If no person is wearing a cap, pick the first person
    return person_patches[0].simple_query(""Who wears a cap?"")"
141013015,"What color is the toilet, brown or white?"," # toilet is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the toilet, brown or white?"")"
5515816,On which side of the image is the fence?," # left or right
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16774696,What is the surfer wearing?," # assumes only one surfer
    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    # Question assumes only one surfer patch
    if len(surfer_patches) == 0:
        # If no surfer is found, query the image directly
        return image_patch.simple_query(""What is the surfer wearing?"")
    surfer_patch = surfer_patches[0]
    return surfer_patch.simple_query(""What is the surfer wearing?"") # crop would include the surfer so keep it in the query"
13701956,Is there any grass or sand that is not dry?," # not dry
    image_patch = ImagePatch(image)
    is_grass = image_patch.exists(""grass"")
    is_sand = image_patch.exists(""sand"")
    if is_grass or is_sand:
        return ""yes""
    return ""no"""
11606870,Is there a cow or a zebra in the picture?," # TODO: add a way to check if the animal is in the picture
    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?," # TODO: add modern
    image_patch = ImagePatch(image)
    firehydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(firehydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    return bool_to_yesno(firehydrant_patches[0].verify_property(""fire hydrant"", ""modern""))"
942308,Is the cup empty or full?," # assumes only one cup
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    for cup_patch in cup_patches:
        is_empty = cup_patch.simple_query(""Is the cup empty?"") == ""yes""
        is_full = cup_patch.simple_query(""Is the cup full?"") == ""yes""
        return bool_to_yesno(is_empty or is_full)"
15815976,Is the woman wearing a scarf?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    for woman_patch in woman_patches:
        is_wearing_scarf = (woman_patch.simple_query(""Is the woman wearing a scarf?"") == ""yes"")
        if is_wearing_scarf:
            return ""yes""
    return ""no"""
3193231,Do you see either parking meters or brooms in the picture?," # parking meters or brooms
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)"
314218,Is the sign in front of the bridge small and white?," # TODO: add a way to check if the sign is in front of the bridge
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    sign_patch = sign_patches[0]
    is_small = sign_patch.simple_query(""Is the sign small?"") == ""yes""
    is_white = sign_patch.simple_query(""Is the sign white?"") == ""yes""
    return bool_to_yesno(is_small and is_white)"
18130465,Does the umbrella that is not dry look orange and open?," # assumes only one umbrella
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    for umbrella_patch in umbrella_patches:
        if not umbrella_patch.verify_property(""umbrella"", ""dry""):
            return bool_to_yesno(umbrella_patch.simple_query(""Does the umbrella that is not dry look orange and open?""))
    return ""no"""
7920817,What's in the paper?," # assumes only one paper patch
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""What's in the paper?"")
    return paper_patches[0].simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?," # assumes only one bun
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    return bun_patches[0].simple_query(""What is on the bun in the top?"")"
16929928,What is the fence made of?," # fence is a relational verb so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?," # assumes only one woman and one lady
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    lady_patches = image_patch.find(""lady"")
    if len(woman_patches) == 0 or len(lady_patches) == 0:
        # If no woman or lady is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    woman_patch = woman_patches[0]
    lady_patch = lady_patches[0]
    if woman_patch.horizontal_center < lady_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17993299,Is the horse to the left of a car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the horse to the left of a car?"")"
8717022,Is the small animal to the left of the vehicle that looks silver?," # assumes only one small animal and one vehicle
    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        # If no small animal is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    small_animal_patch = small_animal_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.simple_query(""Is the vehicle silver?"") == ""yes"":
        if small_animal_patch.horizontal_center < vehicle_patch.horizontal_center:
            return ""yes""
    return ""no"""
2998707,Which color is the chair that is on the right?," # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            return chair_patch.simple_query(""Which color is the chair that is on the right?"")
    return ""no"""
171017786,Do you see any cups to the left of the monitor?," # assumes only one monitor
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    for cup_patch in cup_patches:
        if cup_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?," # assumes only one man and one girl
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        return ""no""
    girl_patch = girl_patches[0]
    if girl_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1941568,What animal is in the water?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal in the water?"") == ""yes"":
            return animal_patch.simple_query(""What animal is in the water?"")
    return ""no animal is in the water"""
17577787,Does the man's hair look short and white?," # TODO: add more properties
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""short"") and man_patch.verify_property(""man"", ""white""))"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?," # TODO: fix
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    for chair_patch in chair_patches:
        bottle_patches = image_patch.find(""bottle"")
        # Question assumes only one bottle patch
        if len(bottle_patches) == 0:
            return ""no""
        for bottle_patch in bottle_patches:
            toilet_patches = image_patch.find(""toilet"")
            # Question assumes only one toilet patch
            if len(toilet_patches) == 0:
                return ""no""
            for toilet_patch in toilet_patches:
                if toilet_patch.horizontal_center > bottle_patch.horizontal_center:
                    return ""yes""
    return ""no"""
9825336,Which kind of furniture is the mat lying on?," # assumes only one mat
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    return mat_patches[0].simple_query(""Which kind of furniture is the mat lying on?"")"
11222427,Do you see fences or elephants?," # TODO: add a way to check if the image is a photo or a drawing
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?"," # assumes only one bed and one entertainment center
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if not furniture_patch.verify_property(""furniture"", ""white""):
            if furniture_patch.simple_query(""What kind of furniture is not white?"") == ""entertainment center"":
                return ""bed""
            elif furniture_patch.simple_query(""What kind of furniture is not white?"") == ""bed"":
                return ""entertainment center""
    return ""no furniture"""
1152020,Do you see either any plate or tomato that are red?," # plate or tomato
    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""plate"", ""red"")
    is_red_tomato = image_patch.exists(""tomato"", ""red"")
    return bool_to_yesno(is_red_plate or is_red_tomato)"
8961520,Who is surfing?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is surfing?"")
    for person_patch in person_patches:
        is_surfing = person_patch.simple_query(""Is the person surfing?"") == ""yes""
        if is_surfing:
            return person_patch.simple_query(""Who is surfing?"")
    return ""no one"""
18106780,Which room is it?," # assumes only one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
1892692,What color do you think the bowl that is to the right of the person is?," # bowl is to the right of the person
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > image_patch.horizontal_center:
            return bowl_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"") # crop would include the bowl so keep it in the query
    # If no bowl is to the right of the person, pick the first bowl
    return bowl_patches[0].simple_query(""What color do you think the bowl that is to the right of the person is?"")"
6952082,What color is the hair?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].best_text_match([""brown"", ""black"", ""blonde"", ""red"", ""gray"", ""white"", ""blue"", ""purple"", ""green"", ""yellow"", ""orange"", ""pink"", ""brownish"", ""blackish"", ""blondish"", ""redish"", ""grayish"", ""whitish"", ""blueish"", ""purpleish"", ""greenish"", ""yellowish"", ""orangish"", ""pinkish""])"
3768067,What color is the pot the statue is to the right of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the pot the statue is to the right of?"")"
17866761,Is the clear glass on the shelf of the table?," # TODO: add table
    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    for clear_glass_patch in clear_glass_patches:
        shelf_patches = image_patch.find(""shelf"")
        for shelf_patch in shelf_patches:
            if clear_glass_patch.horizontal_center > shelf_patch.horizontal_center:
                return ""yes""
    return ""no"""
798020,Does the skirt look black or yellow?," # TODO: add color
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].best_text_match([""black"", ""yellow""])"
828981,How old is he?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""How old is he?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""How old is he?"")"
7236463,Of what color is the book?," # assumes only one book patch
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""black"", ""white"", ""gray"", ""silver"", ""gold""])"
6376684,What color is the car to the left of the train car?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    for car_patch in car_patches:
        train_car_patches = image_patch.find(""train car"")
        # Question assumes only one train car patch
        if len(train_car_patches) == 0:
            return ""no""
        for train_car_patch in train_car_patches:
            if train_car_patch.horizontal_center < car_patch.horizontal_center:
                return car_patch.simple_query(""What color is the car to the left of the train car?"")
    return ""no"""
786798,Is this a photo of a beach?," # beach is a property
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""photo"", ""beach""))"
19836753,What vehicles are to the left of the fence?," # assumes only one fence
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    for fence_patch in fence_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            return ""no""
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicles are to the left of the fence?"")
    return ""no"""
15284615,Who is playing?," # assumes only one person playing
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is playing?"")
    for person_patch in person_patches:
        is_playing = (person_patch.simple_query(""Is the person playing?"") == ""yes"")
        if is_playing:
            return person_patch.simple_query(""Who is playing?"")
    return ""no one"""
16785170,Is the man that is walking holding a remote control?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    remote_control_patches = image_patch.find(""remote control"")
    for remote_control_patch in remote_control_patches:
        if remote_control_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
17746396,What's the boy wearing?," # assumes only one boy
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    boy_patch = boy_patches[0]
    return boy_patch.simple_query(""What's the boy wearing?"")"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?," # assumes only one tap, bottle, and mug
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    bottle_patches = image_patch.find(""bottle"")
    mug_patches = image_patch.find(""mug"")
    # Question assumes only one tap, bottle, and mug patch
    if len(tap_patches) == 0 or len(bottle_patches) == 0 or len(mug_patches) == 0:
        # If no tap, bottle, or mug is found, query the image directly
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    tap_patch = tap_patches[0]
    bottle_patch = bottle_patches[0]
    mug_patch = mug_patches[0]
    if mug_patch.horizontal_center > bottle_patch.horizontal_center and bottle_patch.horizontal_center > tap_patch.horizontal_center:
        return ""yes""
    return ""no"""
13826837,What color is the door?," # assumes only one door
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    if len(door_patches) == 0:
        return image_patch.simple_query(""What color is the door?"")
    return door_patches[0].simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?," # assumes only one field
    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Are there any horses in the field?"")
    field_patch = field_patches[0]
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        return ""no""
    for horse_patch in horse_patches:
        if horse_patch.horizontal_center > field_patch.horizontal_center:
            return ""yes""
    return ""no"""
2964690,What is in front of the mountains?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?," # assumes only one truck patch
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for truck_patch in truck_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
                return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?," # TODO: add a way to check if the scarf is long
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    scarf_patch = scarf_patches[0]
    is_wood = scarf_patch.verify_property(""scarf"", ""wool"")
    is_long = scarf_patch.simple_query(""Is the scarf long?"") == ""yes""
    is_blue = scarf_patch.simple_query(""Is the scarf blue?"") == ""yes""
    return bool_to_yesno(is_wood and is_long and is_blue)"
1189986,Is the man behind the elephant holding a surfboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")"
8792466,Which color is the closed window?," # assumes only one closed window
    image_patch = ImagePatch(image)
    closed_window_patches = image_patch.find(""closed window"")
    if len(closed_window_patches) == 0:
        return image_patch.simple_query(""Which color is the closed window?"")
    closed_window_patch = closed_window_patches[0]
    return closed_window_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""black"", ""white""])"
10188423,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    girl_patch = girl_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > girl_patch.horizontal_center:
            return vegetable_patch.simple_query(""What kind of vegetable is to the right of the girl?"") # crop would include the vegetable so keep it in the query
    return ""no"""
4929965,Is there a black racket or clock in the picture?," # TODO: add a way to check if the object is in the image
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_clock = image_patch.exists(""clock"")
    return bool_to_yesno(is_black_racket or is_clock)"
4782038,What kind of animal is white?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What kind of animal is white?"") == ""white"":
            return animal_patch.simple_query(""What kind of animal is white?"")
    return ""no animal is white"""
14658201,Is the sheep that looks white and brown made of plastic?," # assumes only one sheep
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    sheep_patch = sheep_patches[0]
    is_white = sheep_patch.simple_query(""Is the sheep white?"") == ""yes""
    is_brown = sheep_patch.simple_query(""Is the sheep brown?"") == ""yes""
    is_plastic = sheep_patch.simple_query(""Is the sheep made of plastic?"") == ""yes""
    return bool_to_yesno(is_white and is_brown and is_plastic)"
1441865,Do you see any boxes on the table under the grill?," # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    table_patch = table_patches[0]
    box_patches = image_patch.find(""box"")
    for box_patch in box_patches:
        if box_patch.vertical_center > table_patch.vertical_center:
            return ""yes""
    return ""no"""
1424926,What is the tag on?," # assumes only one tag
    image_patch = ImagePatch(image)
    tag_patches = image_patch.find(""tag"")
    if len(tag_patches) == 0:
        return image_patch.simple_query(""What is the tag on?"")
    return tag_patches[0].simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")"
3635257,Is there any freezer in this photo?," # freezer is a noun
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer""))"
8821026,Are there either any bags or chairs?," # assumes only one bag and one chair
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?," # assumes only one bus driver
    image_patch = ImagePatch(image)
    bus_driver_patches = image_patch.find(""bus driver"")
    if len(bus_driver_patches) == 0:
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    bus_driver_patch = bus_driver_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > bus_driver_patch.horizontal_center:
            return vehicle_patch.simple_query(""In what vehicle is the bus driver?"")
    return ""no vehicle"""
17204662,What is that man in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that man in front of?"")"
380866,Are there any girls or radios?," # assumes only one girl and one radio
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The girl is sitting on what?"")"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for lamp_patch in lamp_patches:
        pillow_patches = image_patch.find(""pillow"")
        # Question assumes only one pillow patch
        if len(pillow_patches) == 0:
            # If no pillow is found, query the image directly
            return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
        pillow_patch = pillow_patches[0]
        if lamp_patch.horizontal_center < pillow_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
16545552,What color do you think is the vehicle the girl is washing?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    vehicle_patch = vehicle_patches[0]
    return vehicle_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""black"", ""white""])"
16719872,Are there motorcycles to the left of the man who is wearing a hat?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?," # assumes only one garbage can and one person pushing a stroller
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    person_patches = image_patch.find(""person pushing a stroller"")
    garbage_can_patch = garbage_can_patches[0]
    person_patch = person_patches[0]
    if garbage_can_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13711589,What do the truck and the street sign have in common?," # assumes only one truck and one street sign
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    truck_patch = truck_patches[0]
    street_sign_patches = image_patch.find(""street sign"")
    # Question assumes only one street sign patch
    if len(street_sign_patches) == 0:
        return ""no""
    street_sign_patch = street_sign_patches[0]
    return truck_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"", ""black"", ""gray"", ""brown"", ""orange"", ""purple"", ""pink"", ""silver"", ""gold"", ""white"","
10227573,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is the man leading?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the man leading?"")
    return ""no animal"""
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?," # TODO: add a way to check if the object is in front of another object
    image_patch = ImagePatch(image)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
    for curtain_patch in curtain_patches:
        dresser_patches = image_patch.find(""dresser"")
        # Question assumes only one dresser patch
        if len(dresser_patches) == 0:
            return ""no""
        for dresser_patch in dresser_patches:
            if dresser_patch.horizontal_center > curtain_patch.horizontal_center:
                return dresser_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
    return ""no"""
7190226,Does the puddle look large?," # assumes only one puddle
    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    return bool_to_yesno(puddle_patches[0].verify_property(""puddle"", ""large""))"
11675152,Who throws the frisbee?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who throws the frisbee?"")
    for person_patch in person_patches:
        is_throwing = (person_patch.simple_query(""Is the person throwing the frisbee?"") == ""yes"")
        if is_throwing:
            return person_patch.simple_query(""Who throws the frisbee?"") # crop would include the frisbee so keep it in the query
    # If no person is throwing the frisbee, pick the first person
    return person_patches[0].simple_query(""Who throws the frisbee?"")"
8723676,Which kind of animal is the water on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is the water on?"")"
61046657,Do you think that traffic light is tall?," # TODO: add height
    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    # Question assumes only one traffic light patch
    if len(traffic_light_patches) == 0:
        # If no traffic light is found, query the image directly
        return image_patch.simple_query(""Do you think that traffic light is tall?"")
    return bool_to_yesno(traffic_light_patches[0].verify_property(""traffic light"", ""tall""))"
9581034,On which side is the wine glass?," # assumes only one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?," # assumes only one pizza patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        pizza_patches = image_patch.find(""pizza"")
        for pizza_patch in pizza_patches:
            if pizza_patch.horizontal_center > napkin_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
18535266,Is the face mask made of the same material as the mask?," # assumes only one face mask and one mask
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    mask_patches = image_patch.find(""mask"")
    if len(face_mask_patches) == 0 or len(mask_patches) == 0:
        return ""no""
    face_mask_patch = face_mask_patches[0]
    mask_patch = mask_patches[0]
    return bool_to_yesno(face_mask_patch.verify_property(""face mask"", ""material"") == mask_patch.verify_property(""mask"", ""material""))"
11254215,What is the tan item of furniture?," # assumes only one tan item of furniture
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    for tan_patch in tan_patches:
        if tan_patch.simple_query(""Is the item of furniture tan?"") == ""yes"":
            return tan_patch.simple_query(""What is the tan item of furniture?"") # crop would include the tan color so keep it in the query
    return ""no"""
1852010,How is the device to the right of the device on the desk called?," # assumes only one device on the desk
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    device_patch = device_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    device_patch = device_patches[0]
    if device_patch.horizontal_center > device_patch.horizontal_center:
        return device_patch.simple_query(""How is the device to the right of the device on the desk called?"") # crop would include the device on the desk so keep it in the query
    return device_patch.simple_query(""How is the device to the right of the device on the desk called?"")"
1587534,Is the device on the floor black and large?," # TODO: add a way to check if the device is on the floor
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    device_patch = device_patches[0]
    is_black = device_patch.verify_property(""device"", ""black"")
    is_large = device_patch.verify_property(""device"", ""large"")
    return bool_to_yesno(is_black and is_large)"
8470757,Are there any surfboards?," # assumes only one surfboard
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))"
11273949,Is the shirt white?," # shirt is a property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))"
7475238,What's the airplane in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?," # assumes only one horse patch
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        if horse_patch.horizontal_center > image_patch.horizontal_center:
            return horse_patch.simple_query(""Where does the horse to the right of the hose run?"") # crop would include the hose so keep it in the query
    return ""no"""
3932624,Are there either any gray chairs or laptops?," # not sure if this is the right way to do it
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?," # water is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the water brown or blue?"")"
9256263,Which kind of furniture is brown?," # assumes only one brown furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture brown?"") == ""yes"":
            return furniture_patch.simple_query(""Which kind of furniture is brown?"")
    return ""no furniture is brown"""
18719769,Is the man wearing glasses?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""glasses""))"
18342439,What animal is white?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal white?"") == ""yes"":
            return animal_patch.simple_query(""What animal is white?"")
    return ""no animal is white"""
8665725,Who is wearing a coat?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a coat?"")
    for person_patch in person_patches:
        is_wearing_coat = (person_patch.simple_query(""Is the person wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return person_patch.simple_query(""Who is wearing a coat?"") # crop would include the coat so keep it in the query
    # If no person is wearing a coat, pick the first person
    return person_patches[0].simple_query(""Who is wearing a coat?"")"
5440407,What vehicle isn't black?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicle_patches:
        if not vehicle_patch.verify_property(""vehicle"", ""black""):
            return vehicle_patch.simple_query(""What vehicle isn't black?"")
    return ""no"""
4104707,On which side of the picture is the oven?," # assumes only one oven
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3126763,What is common to the logo and the letter?," # assumes only one logo and one letter
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    letter_patches = image_patch.find(""letter"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    for logo_patch in logo_patches:
        for letter_patch in letter_patches:
            if logo_patch.simple_query(""Is the logo red?"") == ""yes"":
                return ""red""
            if logo_patch.simple_query(""Is the logo blue?"") == ""yes"":
                return ""blue""
            if logo_patch.simple_query(""Is the logo green?"") == ""yes"":
                return ""green""
            if logo_patch.simple_query(""Is the logo yellow?"") == ""yes"":
                return ""yellow""
            if logo_patch.simple_query(""Is the logo orange?"") == ""yes"":
                return ""orange""
            if logo_patch.simple_query(""Is the logo purple?"") == ""yes"":
                return ""purple""
            if logo_patch.simple_query(""Is the logo pink?"") == ""yes"":
                return ""pink""
            if logo_patch.simple_query(""Is the logo brown?"") == ""yes"":
                return ""brown""
            if logo_patch.simple_query(""Is the logo black?"") == ""yes"":
                return ""black""
            if logo_patch.simple_query(""Is the logo white?"") == ""yes"":
                return ""white""
            if logo_patch.simple_query(""Is the logo gray?"") == ""yes"":
                return ""gray""
            if logo_patch.simple_query(""Is the logo silver?"") == ""yes"":
                return ""silver""
            if logo_patch.simple_query(""Is the logo gold?"") == ""yes"":
                return ""gold""
            if logo_patch.simple_query(""Is the logo red?"") == ""yes"":
                return ""red""
            if logo_patch.simple_query(""Is the logo blue?"") == ""yes"":
                return ""blue""
            if logo_patch.simple_query(""Is the logo green?"") == ""yes"":
                return ""green""
            if logo_patch.simple_query(""Is the logo yellow?"") == ""yes"":
                return ""yellow""
            if logo_patch.simple_query(""Is the logo orange?"") == ""yes"":
                return ""orange""
            if logo_patch.simple_query(""Is the logo purple?"")"
18640925,What animal is in the water the man is walking through?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in the water the man is walking through?"") # crop would include the water so keep it in the query
    return ""no animal"""
125488,What is the man wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"")"
5925435,What is the sidewalk made of?," # sidewalk is a material
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?," # assumes only one coat
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].best_text_match([""stripes"", ""polka dots"", ""plaid"", ""solid""])"
4819547,What kind of furniture is white?," # assumes only one white furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What kind of furniture is white?"")
    return ""no furniture is white"""
14263174,What color do you think the chair that is to the right of the other chair is?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    for chair_patch in chair_patches:
        other_chair_patches = image_patch.find(""chair"")
        for other_chair_patch in other_chair_patches:
            if other_chair_patch.horizontal_center > chair_patch.horizontal_center:
                return chair_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    return ""no"""
7515210,Is the man that is to the left of the person riding the green train in front of the fence?," # TODO: add fence
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    man_patch = man_patches[0]
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        return ""no""
    train_patch = train_patches[0]
    if train_patch.horizontal_center < man_patch.horizontal_center:
        return ""no""
    return ""yes"""
9239936,Do the cows near the trees have white color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    cows_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cows_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    for cow_patch in cows_patches:
        if cow_patch.simple_query(""Is the cow near the trees?"") == ""yes"":
            return bool_to_yesno(cow_patch.verify_property(""cow"", ""white""))
    return ""no"""
1885178,"In which part of the image is the remote control, the bottom or the top?"," # assumes only one remote control
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    remote_control_patch = remote_control_patches[0]
    if remote_control_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12341631,Which color is the bag in the top part?," # assumes only one bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    if bag_patch.vertical_center < image_patch.vertical_center:
        return bag_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""black"", ""white""])
    else:
        return bag_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""black"", ""white""])"
5532909,"What is the weather like, cloudless or maybe rainy?"," # TODO: add more options
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""cloudless"", ""rainy""])"
2618222,What is connected to the open laptop?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is connected to the open laptop?"")"
3252220,Of which color is the shirt the man wears?," # TODO: add color
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no""
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""black"", ""white"", ""gray"", ""silver"", ""gold"", ""beige"", ""tan"", ""navy"", ""maroon"", ""olive"", ""teal"", ""aqua"", ""lime"", ""fuchsia"", ""lavender"", ""salmon"", ""coral"", ""chocolate"", ""plum"", ""turquoise"", ""indigo"", ""violet"", ""magenta"", ""cyan"", ""chartreuse"", ""moss"", ""auburn"", ""sandy"", ""ivory"", ""mustard"", ""cinnamon"", ""caramel"", ""copper"", ""bronze"", ""rose"", ""lilac"", ""mauve"", ""taupe"", ""ochre"", ""caramel"", ""copper"", ""bronze"", ""rose"", ""lilac"", ""mauve"", ""taupe"", ""ochre"", ""caramel"", ""copper"", ""bronze"", ""rose"", ""lilac"", ""mauve"", ""taupe"", ""ochre"", ""caramel"", ""copper"", ""bronze"", ""rose"", ""lilac"", ""mauve"", ""taupe"", ""ochre"", ""caramel"", ""copper"", ""bronze"", ""rose"", ""lilac"", ""mauve"", ""taupe"", ""ochre"", ""caramel"", ""copper"", ""bronze"", ""rose"", ""lilac"", ""mauve"", ""taupe"", ""ochre"", ""caramel"", ""copper"", ""bronze"", ""rose"", ""lilac"", ""mauve"", ""taupe"", ""ochre"", ""caramel"", ""copper"", ""bronze"", ""rose"", ""lilac"", ""mauve"
8947801,What is in the vase?," # vase is a container
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the vase?"")"
10841562,Is the color of the pants the same as the shorts?," # assumes only one pants patch and one shorts patch
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    for pants_patch in pants_patches:
        shorts_patches = image_patch.find(""shorts"")
        for shorts_patch in shorts_patches:
            if pants_patch.simple_query(""Is the color of the pants the same as the shorts?"") == ""yes"":
                return ""yes""
    return ""no"""
15511838,What kind of furniture is to the left of the bucket?," # assumes only one bucket
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    for bucket_patch in bucket_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    return ""no"""
14495306,Is there any racket to the right of the person that the woman is to the left of?," # TODO: add a way to check if the person is to the left of the woman
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    for racket_patch in racket_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
        for person_patch in person_patches:
            woman_patches = image_patch.find(""woman"")
            # Question assumes only one woman patch
            if len(woman_patches) == 0:
                # If no woman is found, query the image directly
                return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
            for woman_patch in woman_patches:
                if woman_patch.horizontal_center < person_patch.horizontal_center:
                    return ""yes""
    return ""no"""
14841932,Do the tiles have square shape and black color?," # assumes only one tile patch
    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    tile_patch = tile_patches[0]
    return bool_to_yesno(tile_patch.verify_property(""tile"", ""square"") and tile_patch.verify_property(""tile"", ""black""))"
41029381,What is the vehicle that is the same color as the shirt called?," # assumes only one vehicle and one shirt
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    vehicle_patch = vehicle_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no""
    shirt_patch = shirt_patches[0]
    if vehicle_patch.simple_query(""Is the vehicle the same color as the shirt?"") == ""yes"":
        return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"") # crop would include the shirt so keep it in the query
    return ""no"""
161027428,Are there both windows and doors in the image?," # assumes only one window and one door
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
16478246,Does the pillow to the right of the man have green color and large size?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        return ""no""
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""))
    return ""no"""
9450308,Is the happy person wearing a hat?," # assumes only one happy person
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    for happy_patch in happy_patches:
        is_wearing_hat = (happy_patch.simple_query(""Is the happy person wearing a hat?"") == ""yes"")
        if is_wearing_hat:
            return ""yes""
    return ""no"""
11850389,What place is this?," # TODO: add more places
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
17250452,What kind of appliance is on the right of the drawer?," # assumes only one appliance and one drawer
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    appliance_patch = appliance_patches[0]
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        return ""no""
    drawer_patch = drawer_patches[0]
    if appliance_patch.horizontal_center > drawer_patch.horizontal_center:
        return appliance_patch.simple_query(""What kind of appliance is on the right of the drawer?"") # crop would include the drawer so keep it in the query
    return ""no"""
14857961,Is the lady to the right of a woman?," # assumes only one lady and one woman
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    woman_patches = image_patch.find(""woman"")
    for lady_patch in lady_patches:
        for woman_patch in woman_patches:
            if lady_patch.horizontal_center > woman_patch.horizontal_center:
                return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?," # assumes only one pan
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    pan_patch = pan_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        return ""no""
    cooking_utensil_patch = cooking_utensil_patches[0]
    if cooking_utensil_patch.horizontal_center < pan_patch.horizontal_center:
        return cooking_utensil_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return ""no"""
9745131,Which color is the truck that is to the left of the lamps?," # assumes only one truck and one lamp
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    truck_patch = truck_patches[0]
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        return ""no""
    lamp_patch = lamp_patches[0]
    if truck_patch.horizontal_center < lamp_patch.horizontal_center:
        return truck_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""brown"", ""gray"", ""black"", ""white""])
    else:
        return ""no"""
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?," # TODO: add motorcycle color
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    for bird_patch in bird_patches:
        if bird_patch.simple_query(""Is the bird the same color as the motorcycle in the bottom of the image?"") == ""yes"":
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"") # crop would include the motorcycle so keep it in the query
    # If no bird is the same color as the motorcycle, pick the first bird
    return bird_patches[0].simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")"
867818,Is the man on the skateboard?," # assumes only one man and one skateboard
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    skateboard_patches = image_patch.find(""skateboard"")
    for man_patch in man_patches:
        for skateboard_patch in skateboard_patches:
            if man_patch.horizontal_center > skateboard_patch.horizontal_center:
                return ""yes""
    return ""no"""
13896221,What is on the table?," # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    table_patch = table_patches[0]
    return table_patch.simple_query(""What is on the table?"")"
1964517,What is the food that is above the white paper?," # contains a relation (above, below, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the food that is above the white paper?"")"
15705231,Is the shelf to the left of a cabinet?," # assumes only one shelf and one cabinet
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if shelf_patch.horizontal_center < cabinet_patch.horizontal_center:
                return ""yes""
    return ""no"""
15693846,Is the motorcycle parked on the grass?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the motorcycle parked on the grass?"")"
13872995,Who is jumping?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is jumping?"")
    for person_patch in person_patches:
        is_jumping = (person_patch.simple_query(""Is the person jumping?"") == ""yes"")
        if is_jumping:
            return person_patch.simple_query(""Who is jumping?"") # crop would include the jumping so keep it in the query
    # If no person is jumping, pick the first person
    return person_patches[0].simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?," # assumes only one dog and one cat
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    cat_patches = image_patch.find(""cat"")
    if len(dog_patches) == 0:
        return ""cat""
    if len(cat_patches) == 0:
        return ""dog""
    dog_patch = dog_patches[0]
    cat_patch = cat_patches[0]
    if dog_patch.horizontal_center < cat_patch.horizontal_center:
        return ""dog""
    else:
        return ""cat"""
12584623,What is the person with the bag wearing?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    person_patch = person_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""no""
    for bag_patch in bag_patches:
        if bag_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.simple_query(""What is the person with the bag wearing?"") # crop would include the bag so keep it in the query
    return ""no"""
7202064,"What is this, a bus or a truck?"," # bus or truck
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""bus"", ""truck""])"
16542208,Do you see either any beds or blankets there?," # TODO: add a way to check if the object is in the image
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)"
11700224,Do you see both lettuce and salad?," # assumes only one lettuce patch
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)"
1067136,Is the ball on the tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball on the tree?"")"
364079,What kind of furniture is to the right of the blanket?," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for blanket_patch in blanket_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    return ""no"""
2533062,How large is the ground the zebra is standing on?," # TODO: add a way to ask for the size of an object
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    zebra_patch = zebra_patches[0]
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        return ""no""
    ground_patch = ground_patches[0]
    return ground_patch.simple_query(""How large is the ground the zebra is standing on?"") # crop would include the zebra so keep it in the query"
19683710,The clock is inside what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The clock is inside what?"")"
15674863,Is the racket in the top part?," # assumes only one racket patch
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    racket_patch = racket_patches[0]
    if racket_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?," # TODO: add a way to check if the person is wearing a shirt
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    skateboard_patches = image_patch.find(""skateboard"")
    # Question assumes only one skateboard patch
    if len(skateboard_patches) == 0:
        return ""no""
    for skateboard_patch in skateboard_patches:
        if skateboard_patch.horizontal_center > person_patch.horizontal_center:
            return ""yes""
    return ""no"""
2292637,What is the color of the shirt that the passenger is wearing?," # assumes only one passenger
    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    for passenger_patch in passenger_patches:
        shirt_patches = image_patch.find(""shirt"")
        for shirt_patch in shirt_patches:
            if shirt_patch.horizontal_center > passenger_patch.horizontal_center:
                return shirt_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    return ""no shirt"""
9175259,What is the chair made of?," # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?," # TODO: add a way to ask for the size of an object
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    carrot_patch = carrot_patches[0]
    if carrot_patch.vertical_center < image_patch.vertical_center:
        return ""small""
    else:
        return ""big"""
1638685,What is the name of the vegetable that is on the yellow food?," # assumes only one yellow food patch
    image_patch = ImagePatch(image)
    yellow_food_patches = image_patch.find(""yellow food"")
    # Question assumes only one yellow food patch
    if len(yellow_food_patches) == 0:
        # If no yellow food is found, query the image directly
        return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    yellow_food_patch = yellow_food_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > yellow_food_patch.horizontal_center:
            return vegetable_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    return ""no"""
5828256,Is the clock on a tower?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the clock on a tower?"")"
18937563,What kind of animal is orange?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What kind of animal is orange?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is orange?"") # crop would include the orange so keep it in the query
    return ""no"""
14360113,What is the smiling woman holding?," # assumes only one smiling woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    woman_patch = woman_patches[0]
    holding_patches = image_patch.find(""holding"")
    # Question assumes only one holding patch
    if len(holding_patches) == 0:
        return ""nothing""
    holding_patch = holding_patches[0]
    return holding_patch.simple_query(""What is the smiling woman holding?"")"
593188,Is the hair short?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    for person_patch in person_patches:
        is_short = person_patch.simple_query(""Is the hair short?"")
        if is_short == ""yes"":
            return ""yes""
    return ""no"""
10824666,Are there ladies to the left of the man that is wearing shorts?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    ladies_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(ladies_patches) == 0:
        return ""no""
    for lady_patch in ladies_patches:
        if lady_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?," # assumes only one gray car and one garbage bin
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    garbage_bin_patches = image_patch.find(""garbage bin"")
    for gray_car_patch in gray_car_patches:
        for garbage_bin_patch in garbage_bin_patches:
            if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
7574939,Is there any table or plate that is white?," # table or plate is a disjunction
    image_patch = ImagePatch(image)
    is_table = image_patch.exists(""table"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_table or is_plate)"
12252101,Is it outdoors?," # assumes only one image patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it outdoors?""))"
6943442,What cooking utensil is on the oven?," # assumes only one cooking utensil and one oven
    image_patch = ImagePatch(image)
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    oven_patches = image_patch.find(""oven"")
    for cooking_utensil_patch in cooking_utensil_patches:
        for oven_patch in oven_patches:
            if cooking_utensil_patch.horizontal_center > oven_patch.horizontal_center:
                return cooking_utensil_patch.simple_query(""What cooking utensil is on the oven?"")
    return ""no"""
2977077,The propeller that looks red is what pattern?," # assumes only one propeller
    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    propeller_patch = propeller_patches[0]
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    propeller_patch = propeller_patches[0]
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    propeller_patch = propeller_patches[0]
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    propeller_patch = propeller_patches[0]
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    propeller_patch = propeller_patches[0]
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    propeller_patch = propeller_patches[0]
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
"
11190306,Which kind of animal is to the left of the train?," # assumes only one train patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""Which kind of animal is to the left of the train?"")
    # If no animal is to the left of the train, query the image directly
    return image_patch.simple_query(""Which kind of animal is to the left of the train?"")"
5107190,Do you see both an airplane and a truck?," # airplane and truck are not related
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?," # assumes only one child
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"")"
12536783,What kind of animal is in front of the pole?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?," # assumes only one man and one glasses patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    glasses_patches = image_patch.find(""glasses"")
    if len(man_patches) == 0 or len(glasses_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
18655269,Which room is it?," # assumes only one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?," # assumes only one image patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it indoors?""))"
1705569,Does the pot on top of the stove look black?," # assumes only one pot
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    pot_patch = pot_patches[0]
    stove_patches = image_patch.find(""stove"")
    # Question assumes only one stove patch
    if len(stove_patches) == 0:
        return ""no""
    stove_patch = stove_patches[0]
    if pot_patch.vertical_center < stove_patch.vertical_center:
        return ""yes"" if pot_patch.verify_property(""pot"", ""black"") else ""no""
    else:
        return ""no"""
1028569,Are there both a cyclist and a helmet in the photo?," # assumes only one cyclist and one helmet
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)"
13954115,Are there any men to the left of the person in the crowd?," # assumes only one person in the crowd
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    person_patch = person_patches[0]
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < person_patch.horizontal_center:
            return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?," # assumes only one keyboard patch
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    keyboard_patch = keyboard_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < keyboard_patch.horizontal_center:
            return device_patch.simple_query(""What kind of device is to the left of the keyboard?"") # crop would include the keyboard so keep it in the query
    return ""no"""
1017626,Who is inside the train?," # contains a relation (inside), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is inside the train?"")"
7650014,Which place is it?," # TODO: add more places
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the left of the car doing?"")"
1310985,Is the yellow vehicle to the left of a lamp?," # TODO: check if this is correct
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        lamp_patches = image_patch.find(""lamp"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center > yellow_vehicle_patch.horizontal_center:
                return ""yes""
    return ""no"""
646935,Which room is it?," # assumes only one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
9495263,Is the woman to the left or to the right of the man that wears a cap?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one man and one woman patch
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center > woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
946016,Do you think the animal that is sitting-down is small or large?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    animal_patch = animal_patches[0]
    is_sitting_down = animal_patch.simple_query(""Is the animal sitting down?"") == ""yes""
    if is_sitting_down:
        return animal_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    return ""no"""
9617920,Do the garbage can and the pan have the same color?," # assumes only one garbage can and one pan
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    for garbage_can_patch in garbage_can_patches:
        for pan_patch in pan_patches:
            if garbage_can_patch.verify_property(""garbage can"", ""color"") == pan_patch.verify_property(""pan"", ""color""):
                return ""yes""
    return ""no"""
3578781,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query
    return ""no clothing is black"""
4695656,What is the lamp on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lamp on?"")"
13696926,The homes that are to the left of the people have what color?," # assumes only one person and one home
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    person_patch = person_patches[0]
    home_patches = image_patch.find(""home"")
    # Question assumes only one home patch
    if len(home_patches) == 0:
        return ""no""
    home_patch = home_patches[0]
    if home_patch.horizontal_center < person_patch.horizontal_center:
        return home_patch.simple_query(""The homes that are to the left of the people have what color?"")
    return ""no"""
16946079,What is on the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?," # assumes only one napkin
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    for napkin_patch in napkin_patches:
        if napkin_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
11513897,What appliance is the label on?," # assumes only one appliance
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    for appliance_patch in appliance_patches:
        label_patches = image_patch.find(""label"")
        # Question assumes only one label patch
        if len(label_patches) == 0:
            return ""no""
        for label_patch in label_patches:
            if label_patch.horizontal_center > appliance_patch.horizontal_center:
                return appliance_patch.simple_query(""What appliance is the label on?"") # crop would include the label so keep it in the query
    return ""no"""
8240644,What is the color of the bird's tail?," # assumes only one bird
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What is the color of the bird's tail?"") # crop would include the tail so keep it in the query"
5245080,Is he to the right or to the left of the camera?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17800894,Are there both a window and a door in the picture?," # assumes only one window and one door
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
191027873,Where is the snowboard?," # assumes only one snowboard
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    if len(snowboard_patches) == 0:
        return image_patch.simple_query(""Where is the snowboard?"")
    snowboard_patch = snowboard_patches[0]
    return snowboard_patch.simple_query(""Where is the snowboard?"")"
1964079,Are the box and the paper the same color?," # assumes only one box and one paper
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    paper_patches = image_patch.find(""paper"")
    if len(box_patches) == 0 or len(paper_patches) == 0:
        return ""no""
    box_patch = box_patches[0]
    paper_patch = paper_patches[0]
    return bool_to_yesno(box_patch.verify_property(""box"", ""color"") == paper_patch.verify_property(""paper"", ""color""))"
