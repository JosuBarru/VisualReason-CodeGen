sample_id,query,generated_code
13151559,Is the large hair both white and soft?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    for hair_patch in hair_patches:
        if hair_patch.verify_property(""hair"", ""white"") and hair_patch.verify_property(""hair"", ""soft""):
            return ""yes""
    return ""no"""
18370956,Who is eating the cupcake?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is eating the cupcake?"")"
6436809,What is the guy wearing?,"    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    # Question assumes only one guy patch
    if len(guy_patches) == 0:
        # If no guy is found, query the image directly
        return image_patch.simple_query(""What is the guy wearing?"")
    return guy_patches[0].simple_query(""What is the guy wearing?"")"
117037,Which kind of food is to the right of the cabbage?,"    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    # Question assumes only one cabbage patch
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    for cabbage_patch in cabbage_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center > cabbage_patch.horizontal_center:
                return food_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    return ""no"""
758936,Who wears the cap?,"    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    return cap_patches[0].simple_query(""Who wears the cap?"")"
111046440,Who is pointing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is pointing?"")"
15804389,Is the woman's hair short or long?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    return woman_patches[0].best_text_match([""short"", ""long""])"
11445636,The women are watching who?,"    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""women"")
    # Question assumes only one women patch
    if len(women_patches) == 0:
        # If no women are found, query the image directly
        return image_patch.simple_query(""The women are watching who?"")
    for women_patch in women_patches:
        is_watching = women_patch.simple_query(""Is the women watching?"")
        if is_watching == ""yes"":
            return women_patch.simple_query(""The women are watching who?"")
    return ""no one"""
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?,"    image_patch = ImagePatch(image)
    dishwasher_patches = image_patch.find(""dishwasher"")
    # Question assumes only one dishwasher patch
    if len(dishwasher_patches) == 0:
        # If no dishwasher is found, query the image directly
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    for dishwasher_patch in dishwasher_patches:
        if dishwasher_patch.horizontal_center < image_patch.horizontal_center:
            gas_stove_patches = image_patch.find(""gas stove"")
            # Question assumes only one gas stove patch
            if len(gas_stove_patches) == 0:
                # If no gas stove is found, query the image directly
                return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
            for gas_stove_patch in gas_stove_patches:
                if gas_stove_patch.horizontal_center < image_patch.horizontal_center:
                    return bool_to_yesno(dishwasher_patch.verify_property(""dishwasher"", ""white"") and gas_stove_patch.verify_property(""gas stove"", ""white""))
    return ""no"""
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?,"    image_patch = ImagePatch(image)
    bed_sheet_patches = image_patch.find(""bed sheet"")
    # Question assumes only one bed sheet patch
    if len(bed_sheet_patches) == 0:
        # If no bed sheet is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    for bed_sheet_patch in bed_sheet_patches:
        baby_patches = image_patch.find(""baby"")
        for baby_patch in baby_patches:
            if baby_patch.horizontal_center > bed_sheet_patch.horizontal_center:
                furniture_patches = image_patch.find(""furniture"")
                for furniture_patch in furniture_patches:
                    if furniture_patch.simple_query(""What color is the furniture?"") == bed_sheet_patch.simple_query(""What color is the bed sheet?""):
                        return furniture_patch.simple_query(""What is the name of the piece of furniture?"")
    return ""no"""
758958,Is there either any red pillow or snowboard?,"    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)"
143816,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?,"    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    # Question assumes only one knife patch
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Which side is the knife on?"")
    if knife_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17829769,What is the computer mouse in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?,"    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    # Question assumes only one toddler patch
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    for toddler_patch in toddler_patches:
        is_holding = toddler_patch.verify_property(""toddler"", ""holding"")
        if is_holding:
            return toddler_patch.simple_query(""What is the toddler holding?"") # crop would include the object so keep it in the query
    # If no toddler is holding anything, pick the first toddler
    return toddler_patches[0].simple_query(""What is the toddler holding?"")"
2951242,Is the gray shirt sleeveless or short sleeved?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""gray shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    return shirt_patches[0].best_text_match([""sleeveless"", ""short sleeved""])"
15241795,Is the tank top red?,"    image_patch = ImagePatch(image)
    tank_top_patches = image_patch.find(""tank top"")
    # Question assumes only one tank top patch
    if len(tank_top_patches) == 0:
        # If no tank top is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    return bool_to_yesno(tank_top_patches[0].verify_property(""tank top"", ""red""))"
13885234,Which kind of animal is in front of the rocks?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")
    for animal_patch in animal_patches:
        rocks_patches = image_patch.find(""rocks"")
        for rocks_patch in rocks_patches:
            if rocks_patch.horizontal_center > animal_patch.horizontal_center:
                return animal_patch.simple_query(""Which kind of animal is in front of the rocks?"")
    return ""no"""
19335715,Do you see any grapes?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""grapes""))"
6455591,What type of furniture is white?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What type of furniture is white?"") # crop would include the furniture so keep it in the query
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""What type of furniture is white?"")"
1033761,What is the blue clothing item?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""blue""):
            return clothing_patch.simple_query(""What is the blue clothing item?"") # crop would include the color so keep it in the query
    # If no clothing is blue, pick the first clothing
    return clothing_patches[0].simple_query(""What is the blue clothing item?"")"
17726504,Who is wearing the glasses?,"    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    return glasses_patches[0].simple_query(""Who is wearing the glasses?"")"
13112902,Is the woman wearing a bracelet?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    for woman_patch in woman_patches:
        is_wearing_bracelet = (woman_patch.simple_query(""Is the woman wearing a bracelet?"") == ""yes"")
        if is_wearing_bracelet:
            return ""yes""
    return ""no"""
698766,What is the food that is not white?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""white""):
            return food_patch.simple_query(""What is the food that is not white?"") # crop would include the food so keep it in the query
    # If no food is not white, pick the first food
    return food_patches[0].simple_query(""What is the food that is not white?"")"
1332276,Are there both a cup and a bottle in the picture?,"    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?,"    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?,"    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for helmet_patch in helmet_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > helmet_patch.horizontal_center:
                return person_patch.simple_query(""Who is holding the helmet?"")
    return ""no one"""
2143247,What is the name of the food to the left of the donut that looks little?,"    image_patch = ImagePatch(image)
    donut_patches = image_patch.find(""donut"")
    # Question assumes only one donut patch
    if len(donut_patches) == 0:
        # If no donut is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for donut_patch in donut_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < donut_patch.horizontal_center:
                return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    # If no food is to the left of the donut, query the image directly
    return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")"
3767951,Is the clock to the right or to the left of the man on the left?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        return ""no""
    clock_patch = clock_patches[0]
    if clock_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17655180,What's the sticker on?,"    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What's the sticker on?"")
    return sticker_patches[0].simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?,"    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""In front of what is this table?"")
    return table_patches[0].simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    for car_patch in car_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center > car_patch.horizontal_center:
                return ""yes""
    return ""no"""
7188981,Does the giraffe look adult?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""adult""))"
16852802,Of what color are the pants?,"    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"")"
9619158,What kind of watercraft is full of men?,"    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    for watercraft_patch in watercraft_patches:
        men_patches = image_patch.find(""men"")
        for men_patch in men_patches:
            if men_patch.horizontal_center > watercraft_patch.horizontal_center:
                return watercraft_patch.simple_query(""What kind of watercraft is full of men?"")
    return ""no"""
3625225,On which side of the picture are the boats?,"    image_patch = ImagePatch(image)
    boats = image_patch.find(""boat"")
    if not boats:
        return ""no boats found""
    image_center = (image_patch.left + image_patch.right) / 2
    for boat in boats:
        if boat.horizontal_center < image_center:
            return ""left""
        elif boat.horizontal_center > image_center:
            return ""right""
    return ""no boats found""
"
7126345,Does the elephant to the left of the other elephant have large size?,"    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only two elephant patches
    if len(elephant_patches) < 2:
        # If no two elephants are found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_elephant_patch = elephant_patches[0]
    right_elephant_patch = elephant_patches[1]
    if left_elephant_patch.horizontal_center > right_elephant_patch.horizontal_center:
        return bool_to_yesno(left_elephant_patch.verify_property(""elephant"", ""large""))
    else:
        return bool_to_yesno(right_elephant_patch.verify_property(""elephant"", ""large""))"
19834124,What is the girl holding?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    for girl_patch in girl_patches:
        is_holding = (girl_patch.simple_query(""Is the girl holding something?"") == ""yes"")
        if is_holding:
            return girl_patch.simple_query(""What is the girl holding?"") # crop would include the object so keep it in the query
    # If no girl is holding anything, pick the first girl
    return girl_patches[0].simple_query(""What is the girl holding?"")"
4617704,Does the toilet seat that is not down appear to be white and open?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")
    toilet_patch = toilet_patches[0]
    is_white = toilet_patch.verify_property(""toilet seat"", ""white"")
    is_open = toilet_patch.verify_property(""toilet seat"", ""open"")
    is_not_down = toilet_patch.simple_query(""Is the toilet seat not down?"") == ""yes""
    return bool_to_yesno(is_white and is_open and is_not_down)"
5899539,Are there any bottles or mugs that are not purple?,"    image_patch = ImagePatch(image)
    bottles_patches = image_patch.find(""bottle"")
    mugs_patches = image_patch.find(""mug"")
    # Question assumes only one bottle or mug patch
    if len(bottles_patches) == 0 and len(mugs_patches) == 0:
        # If no bottle or mug is found, query the image directly
        return image_patch.simple_query(""Are there any bottles or mugs that are not purple?"")
    for bottle_patch in bottles_patches:
        if not bottle_patch.verify_property(""bottle"", ""purple""):
            return ""yes""
    for mug_patch in mugs_patches:
        if not mug_patch.verify_property(""mug"", ""purple""):
            return ""yes""
    return ""no"""
2631593,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person in the living room?"") == ""yes"":
            man_patches = image_patch.find(""man"")
            for man_patch in man_patches:
                if man_patch.horizontal_center > person_patch.horizontal_center:
                    return ""yes""
    return ""no"""
111054378,Is the small couch to the right or to the left of the bottle?,"    image_patch = ImagePatch(image)
    small_couch_patches = image_patch.find(""small couch"")
    # Question assumes only one small couch patch
    if len(small_couch_patches) == 0:
        # If no small couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    for small_couch_patch in small_couch_patches:
        bottle_patches = image_patch.find(""bottle"")
        for bottle_patch in bottle_patches:
            if small_couch_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
9392411,Is the bottle to the right or to the left of the appliance on the left?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    bottle_patch = bottle_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    appliance_patch = appliance_patches[0]
    if bottle_patch.horizontal_center > appliance_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16753829,What type of animal is sitting in the container in the bottom of the photo?,"    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    container_patch = container_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""no""
    for animal_patch in animal_patches:
        if animal_patch.lower > container_patch.lower:
            return animal_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    return ""no"""
1345482,What is that train in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    for girl_patch in girl_patches:
        palm_tree_patches = image_patch.find(""palm tree"")
        for palm_tree_patch in palm_tree_patches:
            if palm_tree_patch.horizontal_center > girl_patch.horizontal_center:
                car_patches = image_patch.find(""car"")
                for car_patch in car_patches:
                    if car_patch.horizontal_center > palm_tree_patch.horizontal_center:
                        return ""yes""
    return ""no"""
459445,In which part is the silver device?,"    image_patch = ImagePatch(image)
    silver_patches = image_patch.find(""silver"")
    # Question assumes only one silver patch
    if len(silver_patches) == 0:
        # If no silver is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if silver_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11786203,What is the man on?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man on?"")
    return man_patches[0].simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?,"    image_patch = ImagePatch(image)
    is_brown_door = image_patch.exists(""brown door"")
    is_brown_chair = image_patch.exists(""brown chair"")
    return bool_to_yesno(is_brown_door or is_brown_chair)"
131031372,What is the napkin in?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What is the napkin in?"")
    return napkin_patches[0].simple_query(""What is the napkin in?"")"
1241681,Are there any people behind the white dessert?,"    image_patch = ImagePatch(image)
    dessert_patches = image_patch.find(""dessert"")
    # Question assumes only one dessert patch
    if len(dessert_patches) == 0:
        # If no dessert is found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    for dessert_patch in dessert_patches:
        if dessert_patch.simple_query(""Is the dessert white?"") == ""yes"":
            people_patches = image_patch.find(""people"")
            for people_patch in people_patches:
                if people_patch.horizontal_center > dessert_patch.horizontal_center:
                    return ""yes""
    return ""no"""
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")"
8553578,What is the Pikachu doing?,"    image_patch = ImagePatch(image)
    pikachu_patches = image_patch.find(""pikachu"")
    # Question assumes only one pikachu patch
    if len(pikachu_patches) == 0:
        # If no pikachu is found, query the image directly
        return image_patch.simple_query(""What is the Pikachu doing?"")
    return pikachu_patches[0].simple_query(""What is the Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?,"    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""What is on the large mountains?"")
    return mountain_patches[0].simple_query(""What is on the large mountains?"")"
5107295,What is in the sky?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?,"    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is the fruit on?"")
    for watercraft_patch in watercraft_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if fruit_patch.horizontal_center > watercraft_patch.horizontal_center:
                return watercraft_patch.simple_query(""What kind of watercraft is the fruit on?"")
    return ""no"""
1827218,Is the bottle in the bottom of the image?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    if bottle_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
10938155,What color is the sky?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?,"    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    return sail_patches[0].best_text_match([""white"", ""red""])"
3662784,Do you see either any traffic lights or cars?,"    image_patch = ImagePatch(image)
    has_traffic_light = image_patch.exists(""traffic light"")
    has_car = image_patch.exists(""car"")
    return bool_to_yesno(has_traffic_light or has_car)
"
15515711,Are there any girls to the right of the yellow helmet?,"    image_patch = ImagePatch(image)
    yellow_helmet_patches = image_patch.find(""yellow helmet"")
    # Question assumes only one yellow helmet patch
    if len(yellow_helmet_patches) == 0:
        # If no yellow helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    for yellow_helmet_patch in yellow_helmet_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if girl_patch.horizontal_center > yellow_helmet_patch.horizontal_center:
                return ""yes""
    return ""no"""
6315316,Which kind of furniture is in front of the window?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is in front of the window?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture in front of the window?"") == ""yes"":
            return furniture_patch.simple_query(""Which kind of furniture is in front of the window?"")
    return ""no"""
17736488,What appliance is to the left of the faucet?,"    image_patch = ImagePatch(image)
    faucet_patches = image_patch.find(""faucet"")
    # Question assumes only one faucet patch
    if len(faucet_patches) == 0:
        # If no faucet is found, query the image directly
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    for faucet_patch in faucet_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center < faucet_patch.horizontal_center:
                return appliance_patch.simple_query(""What appliance is to the left of the faucet?"")
    return ""no"""
41050828,What is the color of the jacket?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"")"
610914,Is the green boat to the right or to the left of the wood house?,"    image_patch = ImagePatch(image)
    green_boat_patches = image_patch.find(""green boat"")
    # Question assumes only one green boat patch
    if len(green_boat_patches) == 0:
        # If no green boat is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    wood_house_patches = image_patch.find(""wood house"")
    # Question assumes only one wood house patch
    if len(wood_house_patches) == 0:
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    for green_boat_patch in green_boat_patches:
        for wood_house_patch in wood_house_patches:
            if green_boat_patch.horizontal_center > wood_house_patch.horizontal_center:
                return ""right""
    return ""left"""
13158346,Is the woman in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    if woman_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
16318707,Are there either any colorful bikes or skateboards?,"    image_patch = ImagePatch(image)
    is_colorful_bike = image_patch.exists(""colorful bike"")
    is_colorful_skateboard = image_patch.exists(""colorful skateboard"")
    return bool_to_yesno(is_colorful_bike or is_colorful_skateboard)"
2805654,Is the bag to the right or to the left of the bench?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    for bag_patch in bag_patches:
        bench_patches = image_patch.find(""bench"")
        for bench_patch in bench_patches:
            if bag_patch.horizontal_center > bench_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
15315607,What do you think is in the sky?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What color is the truck near the gas station?"")
    for truck_patch in truck_patches:
        gas_station_patches = image_patch.find(""gas station"")
        for gas_station_patch in gas_station_patches:
            if gas_station_patch.horizontal_center > truck_patch.horizontal_center:
                return truck_patch.simple_query(""What color is the truck?"")
    return ""no"""
12140940,"What are the headphones on, a sofa or a desk?","    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
    for headphones_patch in headphones_patches:
        is_on_sofa = (headphones_patch.simple_query(""Is the headphones on a sofa?"") == ""yes"")
        if is_on_sofa:
            return ""sofa""
        is_on_desk = (headphones_patch.simple_query(""Is the headphones on a desk?"") == ""yes"")
        if is_on_desk:
            return ""desk""
    # If no headphones are on a sofa or desk, pick the first headphones
    return headphones_patches[0].simple_query(""What are the headphones on, a sofa or a desk?"")"
727533,Does the bun look brown and toasted?,"    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    return bool_to_yesno(bun_patches[0].verify_property(""bun"", ""brown"") and bun_patches[0].verify_property(""bun"", ""toasted""))"
61044602,What is in the brown basket?,"    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""brown basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""What is in the brown basket?"")
    return basket_patches[0].simple_query(""What is in the brown basket?"")"
16827204,Is the marker different in color than the paper?,"    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    marker_patch = marker_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    return bool_to_yesno(marker_patch.verify_property(""marker"", ""color"") != paper_patch.verify_property(""paper"", ""color""))"
1284539,Is there a racket to the right of the man on the right side?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center and racket_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1257391,What place is this?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
16223517,What do you think is the color of the large device?,"    image_patch = ImagePatch(image)
    large_device_patches = image_patch.find(""large device"")
    # Question assumes only one large device patch
    if len(large_device_patches) == 0:
        # If no large device is found, query the image directly
        return image_patch.simple_query(""What do you think is the color of the large device?"")
    return large_device_patches[0].simple_query(""What do you think is the color of the large device?"")"
1024280,Does the shirt look long sleeved or sleeveless?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    return shirt_patches[0].best_text_match([""long sleeved"", ""sleeveless""])"
2769463,Which kind of animal is lying in the chair?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal lying in the chair?"") == ""yes"":
            return animal_patch.simple_query(""Which kind of animal is lying in the chair?"")
    # If no animal is lying in the chair, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?,"    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    # Question assumes only one white box patch
    if len(white_box_patches) == 0:
        # If no white box is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    for white_box_patch in white_box_patches:
        crate_patches = image_patch.find(""crate"")
        for crate_patch in crate_patches:
            chair_patches = image_patch.find(""chair"")
            for chair_patch in chair_patches:
                if chair_patch.horizontal_center > crate_patch.horizontal_center and chair_patch.horizontal_center > white_box_patch.horizontal_center:
                    return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?,"    image_patch = ImagePatch(image)
    coffee_table_patches = image_patch.find(""coffee table"")
    lamp_patches = image_patch.find(""lamp"")
    return bool_to_yesno(len(coffee_table_patches) > 0 and len(lamp_patches) > 0)"
19201196,Is that flower pot made of clay?,"    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    # Question assumes only one flower pot patch
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return flower_pot_patches[0].verify_property(""flower pot"", ""clay"")"
191006281,Does the sky look clear and gray?,"    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Does the sky look clear and gray?"")
    return bool_to_yesno(sky_patches[0].verify_property(""sky"", ""clear"") and sky_patches[0].verify_property(""sky"", ""gray""))"
681336,Do you see hats or gloves that are white?,"    image_patch = ImagePatch(image)
    hats_patches = image_patch.find(""hat"")
    gloves_patches = image_patch.find(""glove"")
    # Question assumes only one hat and one glove patch
    if len(hats_patches) == 0 or len(gloves_patches) == 0:
        # If no hat or glove is found, query the image directly
        return image_patch.simple_query(""Do you see hats or gloves that are white?"")
    for hat_patch in hats_patches:
        if hat_patch.verify_property(""hat"", ""white""):
            return ""yes""
    for glove_patch in gloves_patches:
        if glove_patch.verify_property(""glove"", ""white""):
            return ""yes""
    return ""no"""
1300368,What is on the cabinet that is to the right of the keyboard?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")"
172394,What is the animal to the left of the tap called?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    for animal_patch in animal_patches:
        tap_patches = image_patch.find(""tap"")
        for tap_patch in tap_patches:
            if tap_patch.horizontal_center > animal_patch.horizontal_center:
                return animal_patch.simple_query(""What is the animal to the left of the tap called?"")
    return ""no"""
738176,Is the chair on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    if chair_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
4194919,Is the child on the right of the picture?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    if child_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
3585327,Who is on the surfboard?,"    image_patch = ImagePatch(image)
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        # If no surfboard is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard?"")
    for surfboard_patch in surfboard_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > surfboard_patch.horizontal_center:
                return person_patch.simple_query(""Who is on the surfboard?"")
    return ""no one"""
1711172,What size are the packages the candle is on top of?,"    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    for candle_patch in candle_patches:
        package_patches = image_patch.find(""package"")
        # Question assumes only one package patch
        if len(package_patches) == 0:
            return ""no""
        package_patch = package_patches[0]
        if package_patch.upper > candle_patch.upper:
            return ""small""
        elif package_patch.lower < candle_patch.lower:
            return ""large""
        else:
            return ""medium"""
4353895,Who is on the snowboard on the right?,"    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    for snowboard_patch in snowboard_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > snowboard_patch.horizontal_center:
                return person_patch.simple_query(""Who is on the snowboard on the right?"")
    return ""no one"""
17929304,What is the vehicle that is on the road?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is on the road?"")
    return vehicle_patches[0].simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?,"    image_patch = ImagePatch(image)
    crust_patches = image_patch.find(""crust"")
    # Question assumes only one crust patch
    if len(crust_patches) == 0:
        # If no crust is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return crust_patches[0].simple_query(""What color is the crust?"")"
5672474,Is the plate to the left or to the right of the beer on the left?,"    image_patch = ImagePatch(image)
    beer_patches = image_patch.find(""beer"")
    # Question assumes only one beer patch
    if len(beer_patches) == 0:
        # If no beer is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    beer_patch = beer_patches[0]
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        return ""no""
    for plate_patch in plate_patches:
        if plate_patch.horizontal_center < beer_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
11341284,What is the pattern of the mattress on the street?,"    image_patch = ImagePatch(image)
    mattress_patches = image_patch.find(""mattress"")
    # Question assumes only one mattress patch
    if len(mattress_patches) == 0:
        # If no mattress is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the mattress on the street?"")
    return mattress_patches[0].simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?,"    image_patch = ImagePatch(image)
    boys = image_patch.find(""boy"")
    fences = image_patch.find(""fence"")
    
    if not boys or not fences:
        return ""no""
    
    for boy in boys:
        for fence in fences:
            if boy.horizontal_center < fence.horizontal_center:
                return ""yes""
    return ""no""
"
19203395,Is the white toilet paper to the right or to the left of the toilet?,"    image_patch = ImagePatch(image)
    toilet_paper_patches = image_patch.find(""white toilet paper"")
    # Question assumes only one toilet paper patch
    if len(toilet_paper_patches) == 0:
        # If no toilet paper is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    for toilet_paper_patch in toilet_paper_patches:
        for toilet_patch in toilet_patches:
            if toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
                return ""right""
    return ""left"""
1194938,Are there any airplanes in front of the building?,"    image_patch = ImagePatch(image)
    airplane_patches = image_patch.find(""airplane"")
    building_patches = image_patch.find(""building"")
    
    if not airplane_patches or not building_patches:
        return ""no""
    
    for airplane in airplane_patches:
        for building in building_patches:
            if airplane.horizontal_center < building.horizontal_center:
                return ""yes""
    return ""no""
"
5350205,How clean is the road that the car is on the side of?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    for road_patch in road_patches:
        if road_patch.horizontal_center > car_patches[0].horizontal_center:
            return road_patch.simple_query(""How clean is the road that the car is on the side of?"")
    return ""no"""
4256016,"In which part of the picture is the black van, the bottom or the top?","    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    for person_patch in person_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center < person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the fence doing?"")
    return ""no"""
16471124,Does the horse have a different color than the boot?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        return ""no""
    for horse_patch in horse_patches:
        for boot_patch in boot_patches:
            if horse_patch.verify_property(""horse"", ""color"") != boot_patch.verify_property(""boot"", ""color""):
                return ""yes""
    return ""no"""
958247,Is the mouse to the right of a chair?,"    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    # Question assumes only one mouse patch
    if len(mouse_patches) == 0:
        # If no mouse is found, query the image directly
        return image_patch.simple_query(""Is the mouse to the right of a chair?"")
    for mouse_patch in mouse_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if chair_patch.horizontal_center > mouse_patch.horizontal_center:
                return ""yes""
    return ""no"""
11179512,The basket made of plastic is what color?,"    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    return basket_patches[0].simple_query(""What color is the basket made of plastic?"")"
8816272,Do you see any elephant to the left of the bird?,"    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    bird_patches = image_patch.find(""bird"")
    
    if not elephant_patches or not bird_patches:
        return ""no""
    
    for elephant in elephant_patches:
        for bird in bird_patches:
            if elephant.horizontal_center < bird.horizontal_center:
                return ""yes""
    return ""no""
"
11168592,What is the animal in front of the lamp?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Who is wearing the jacket?"")
    return jacket_patches[0].simple_query(""Who is wearing the jacket?"")"
7398502,What is the food to the left of the girl in the bottom of the photo?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    girl_patch = girl_patches[0]
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    for food_patch in food_patches:
        if food_patch.vertical_center > girl_patch.vertical_center:
            return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")"
5145864,What is the device that the camera is in front of?,"    image_patch = ImagePatch(image)
    camera_patches = image_patch.find(""camera"")
    # Question assumes only one camera patch
    if len(camera_patches) == 0:
        # If no camera is found, query the image directly
        return image_patch.simple_query(""What is the device that the camera is in front of?"")
    for camera_patch in camera_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center > camera_patch.horizontal_center:
                return device_patch.simple_query(""What is the device that the camera is in front of?"")
    return ""no"""
788143,Is the man on the surfboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the surfboard?"")
    for man_patch in man_patches:
        surfboard_patches = image_patch.find(""surfboard"")
        for surfboard_patch in surfboard_patches:
            if man_patch.horizontal_center > surfboard_patch.horizontal_center:
                return ""yes""
    return ""no"""
15854501,What device has the same color as the device in the box?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    device_patch = device_patches[0]
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    box_patch = box_patches[0]
    device_color = device_patch.simple_query(""What color is the device?"")
    box_color = box_patch.simple_query(""What color is the box?"")
    if device_color == box_color:
        return device_patch.simple_query(""What device has the same color as the device in the box?"")
    else:
        return image_patch.simple_query(""What device has the same color as the device in the box?"")"
3228067,What is the child wearing?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    return child_patches[0].simple_query(""What is the child wearing?"")"
6817336,Is the blue sky behind a cathedral?,"    image_patch = ImagePatch(image)
    blue_sky_patches = image_patch.find(""blue sky"")
    # Question assumes only one blue sky patch
    if len(blue_sky_patches) == 0:
        # If no blue sky is found, query the image directly
        return image_patch.simple_query(""Is the blue sky behind a cathedral?"")
    for blue_sky_patch in blue_sky_patches:
        cathedral_patches = image_patch.find(""cathedral"")
        for cathedral_patch in cathedral_patches:
            if cathedral_patch.horizontal_center > blue_sky_patch.horizontal_center:
                return ""yes""
    return ""no"""
6347271,"In which part of the image is the yellow pepper, the bottom or the top?","    image_patch = ImagePatch(image)
    pepper_patches = image_patch.find(""pepper"")
    # Question assumes only one pepper patch
    if len(pepper_patches) == 0:
        # If no pepper is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    if pepper_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal is the woman feeding?"")
    for woman_patch in woman_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > woman_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is the woman feeding?"")
    return ""no animal is being fed"""
3427727,On which side is the bucket?,"    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    if bucket_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
31050314,Is the small chimney in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    small_chimney_patches = image_patch.find(""small chimney"")
    # Question assumes only one small chimney patch
    if len(small_chimney_patches) == 0:
        # If no small chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    if small_chimney_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3503396,Are the pants purple?,"    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    return bool_to_yesno(pants_patches[0].verify_property(""pants"", ""purple""))"
11742862,Which kind of furniture is to the right of the paper towels?,"    image_patch = ImagePatch(image)
    paper_towels_patches = image_patch.find(""paper towels"")
    # Question assumes only one paper towels patch
    if len(paper_towels_patches) == 0:
        # If no paper towels are found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    for paper_towels_patch in paper_towels_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > paper_towels_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    # If no furniture is to the right of the paper towels, query the image directly
    return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")"
5891809,What kind of furniture is gray?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""gray""):
            return furniture_patch.simple_query(""What kind of furniture is gray?"") # crop would include the color so keep it in the query
    # If no furniture is gray, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is gray?"")"
5370528,Is the hair white and long?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    is_white = hair_patches[0].verify_property(""hair"", ""white"")
    is_long = hair_patches[0].verify_property(""hair"", ""long"")
    return bool_to_yesno(is_white and is_long)"
781153,Do you see trains near the lamp post that looks white?,"    image_patch = ImagePatch(image)
    lamp_post_patches = image_patch.find(""lamp post"")
    # Question assumes only one lamp post patch
    if len(lamp_post_patches) == 0:
        # If no lamp post is found, query the image directly
        return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")
    for lamp_post_patch in lamp_post_patches:
        if lamp_post_patch.verify_property(""lamp post"", ""white""):
            train_patches = image_patch.find(""train"")
            for train_patch in train_patches:
                if train_patch.horizontal_center > lamp_post_patch.horizontal_center:
                    return ""yes""
    return ""no"""
5543456,Is the container to the left of the person that wears bracelets?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
    for person_patch in person_patches:
        bracelet_patches = image_patch.find(""bracelet"")
        for bracelet_patch in bracelet_patches:
            if bracelet_patch.horizontal_center > person_patch.horizontal_center:
                container_patches = image_patch.find(""container"")
                for container_patch in container_patches:
                    if container_patch.horizontal_center < person_patch.horizontal_center:
                        return ""yes""
    return ""no"""
163134,What do you think is on the roof?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?,"    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
5511395,What is wrapped in paper?,"    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""What is wrapped in paper?"")
    for paper_patch in paper_patches:
        wrapped_patches = image_patch.find(""wrapped"")
        for wrapped_patch in wrapped_patches:
            if wrapped_patch.horizontal_center > paper_patch.horizontal_center:
                return wrapped_patch.simple_query(""What is wrapped in paper?"") # crop would include the paper so keep it in the query
    # If no wrapped object is found, pick the first paper patch
    return paper_patches[0].simple_query(""What is wrapped in paper?"")"
5611256,Are there any couches in the picture?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch""))"
1162826,The man is in what?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is in what?"")
    return man_patches[0].simple_query(""The man is in what?"")"
81020685,Which color is the small house?,"    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    return house_patches[0].simple_query(""Which color is the small house?"")"
19640724,Who is in the bathroom?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"")"
289960,Do you see a racket to the right of the boy that is looking at the tie?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    for boy_patch in boy_patches:
        tie_patches = image_patch.find(""tie"")
        for tie_patch in tie_patches:
            if tie_patch.horizontal_center > boy_patch.horizontal_center:
                racket_patches = image_patch.find(""racket"")
                for racket_patch in racket_patches:
                    if racket_patch.horizontal_center > boy_patch.horizontal_center:
                        return ""yes""
    return ""no"""
9957748,Does the hair appear to be long and brown?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair appear to be long and brown?"")
    return hair_patches[0].verify_property(""hair"", ""long and brown"")"
21031610,What is the shoe that looks black and white resting on?,"    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    for shoe_patch in shoe_patches:
        if shoe_patch.verify_property(""shoe"", ""black"") and shoe_patch.verify_property(""shoe"", ""white""):
            return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"") # crop would include the shoe so keep it in the query
    # If no shoe is found, query the image directly
    return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?,"    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    # Question assumes only one glass patch
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is the glass on?"")
    return glass_patches[0].simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?,"    image_patch = ImagePatch(image)
    white_pillow_patches = image_patch.find(""white pillow"")
    # Question assumes only one white pillow patch
    if len(white_pillow_patches) == 0:
        # If no white pillow is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    black_animal_patches = image_patch.find(""black animal"")
    # Question assumes only one black animal patch
    if len(black_animal_patches) == 0:
        return ""no""
    for black_animal_patch in black_animal_patches:
        if black_animal_patch.vertical_center > white_pillow_patches[0].vertical_center:
            return ""yes""
    return ""no"""
457770,What kind of clothing is striped?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""striped""):
            return clothing_patch.simple_query(""What kind of clothing is striped?"") # crop would include the striped so keep it in the query
    # If no clothing is striped, pick the first clothing
    return clothing_patches[0].simple_query(""What kind of clothing is striped?"")"
12603153,Are the child's eyes blue and open?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    child_patch = child_patches[0]
    is_blue = child_patch.verify_property(""eyes"", ""blue"")
    is_open = child_patch.verify_property(""eyes"", ""open"")
    return bool_to_yesno(is_blue and is_open)"
9480973,What is located on top of the tub?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    for fork_patch in fork_patches:
        white_plate_patches = image_patch.find(""white plate"")
        # Question assumes only one white plate patch
        if len(white_plate_patches) == 0:
            # If no white plate is found, query the image directly
            return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
        white_plate_patch = white_plate_patches[0]
        if fork_patch.horizontal_center > white_plate_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
13420253,On which side of the photo is the chair?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    if chair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?,"    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    # Question assumes only one label patch
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What is the label on?"")
    for label_patch in label_patches:
        object_patches = image_patch.find(""object"")
        for object_patch in object_patches:
            if object_patch.horizontal_center > label_patch.horizontal_center:
                return object_patch.simple_query(""What is the label on?"")
    return ""no"""
3322787,What bird is to the left of the person that is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return ""no""
    for bird_patch in bird_patches:
        if bird_patch.horizontal_center < person_patch.horizontal_center:
            return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    return ""no"""
6399594,On which side is the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6930120,Is the glass bowl on the right or on the left?,"    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    # Question assumes only one glass bowl patch
    if len(glass_bowl_patches) == 0:
        # If no glass bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    if glass_bowl_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
12619961,What vehicles are to the left of the taxi?,"    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    for taxi_patch in taxi_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < taxi_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicles are to the left of the taxi?"")
    return ""no"""
13362315,Is the basket on the shelf black and empty?,"    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    for basket_patch in basket_patches:
        is_black = basket_patch.verify_property(""basket"", ""black"")
        is_empty = basket_patch.verify_property(""basket"", ""empty"")
        if is_black and is_empty:
            return ""yes""
    return ""no"""
3830854,What is the animal that is standing next to the donkey that is standing in the hay?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")"
18382324,Is this a bed or a table?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a bed or a table?"")"
18104571,"Which animal is that, a bird or a cat?","    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""bird""):
            return ""bird""
        elif animal_patch.verify_property(""animal"", ""cat""):
            return ""cat""
    return ""bird"""
2913379,Do you see any fence or pot?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    pot_patches = image_patch.find(""pot"")
    if len(fence_patches) > 0 or len(pot_patches) > 0:
        return ""yes""
    else:
        return ""no""
"
9294271,What is in front of the fence the zebra is kept in?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")"
10741434,What is the vegetable that is on top of the plate called?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    for plate_patch in plate_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.vertical_center > plate_patch.vertical_center:
                return vegetable_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    return ""no"""
765962,Where is the car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""Where is the car?"")
    else:
        return car_patches[0].simple_query(""Where is the car?"")
"
12399262,Is there either a yellow truck or airplane?,"    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)"
13964213,Is the man on the left of the photo?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    if man_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
16171369,What is covered in the snow?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?,"    image_patch = ImagePatch(image)
    plastic_bottle_patches = image_patch.find(""plastic bottle"")
    # Question assumes only one plastic bottle patch
    if len(plastic_bottle_patches) == 0:
        # If no plastic bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    if plastic_bottle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5858491,Do you see any ropes on the fence that is on the left of the picture?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center < image_patch.horizontal_center:
            rope_patches = image_patch.find(""rope"")
            for rope_patch in rope_patches:
                if rope_patch.horizontal_center > fence_patch.horizontal_center:
                    return ""yes""
    return ""no"""
17834539,Are there any lamps in the scene?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp""))"
15658176,Who is wearing a helmet?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is wearing a helmet?"")"
14372400,Does that coat have red color?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red""))"
411886,Are there any curtains or blankets in this scene?,"    image_patch = ImagePatch(image)
    curtains_patches = image_patch.find(""curtains"")
    blankets_patches = image_patch.find(""blankets"")
    return bool_to_yesno(len(curtains_patches) > 0 or len(blankets_patches) > 0)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    remote_patches = image_patch.find(""remote"")
    # Question assumes only one remote patch
    if len(remote_patches) == 0:
        return ""no""
    for remote_patch in remote_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center < man_patch.horizontal_center and furniture_patch.vertical_center < man_patch.vertical_center:
                return furniture_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    return ""no"""
51039491,Is the fence black or red?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    return fence_patches[0].best_text_match([""black"", ""red""])"
7425912,What animal is standing in the field?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing in the field?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal standing in the field?"") == ""yes"":
            return animal_patch.simple_query(""What animal is standing in the field?"")
    return ""no"""
13136338,What animal is in front of the dog which is to the right of the bird?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")"
3775066,Which color are the cabinets in the bottom of the picture?,"    image_patch = ImagePatch(image)
    # Find all cabinets in the image
    cabinet_patches = image_patch.find(""cabinet"")
    # If no cabinets are found, query the image directly
    if not cabinet_patches:
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    # Check each cabinet's position relative to the image's center
    image_center = (image_patch.left + image_patch.right) / 2
    for cabinet_patch in cabinet_patches:
        # Determine if the cabinet is in the bottom half of the image
        if cabinet_patch.vertical_center < image_center:
            # Get the color of the cabinet
            color = cabinet_patch.simple_query(""What color is the cabinet?"")
            return color
    # If no cabinets are found in the bottom half, query the image directly
    return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
"
17206239,Is the happy girl to the right of a player?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the happy girl to the right of a player?"")
    for girl_patch in girl_patches:
        player_patches = image_patch.find(""player"")
        for player_patch in player_patches:
            if player_patch.horizontal_center > girl_patch.horizontal_center:
                return ""yes""
    return ""no"""
2992517,"What piece of furniture is not wooden, the table or the chair?","    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one table and one chair patch
    if len(table_patches) == 0 or len(chair_patches) == 0:
        # If no table or chair is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    for table_patch in table_patches:
        if not table_patch.verify_property(""table"", ""wooden""):
            return ""chair""
    for chair_patch in chair_patches:
        if not chair_patch.verify_property(""chair"", ""wooden""):
            return ""table""
    # If no piece of furniture is not wooden, pick the first piece of furniture
    return table_patches[0].simple_query(""What piece of furniture is not wooden, the table or the chair?"")"
1827558,Which side of the image is the kettle on?,"    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    if kettle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2785208,Where is the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    return man_patches[0].simple_query(""Where is the man?"")"
6623967,Is the baby near the countertop chewing a computer mouses?,"    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouses?"")
    for baby_patch in baby_patches:
        is_near_counter = (baby_patch.simple_query(""Is the baby near the countertop?"") == ""yes"")
        if is_near_counter:
            is_chewing_mouse = (baby_patch.simple_query(""Is the baby chewing a computer mouse?"") == ""yes"")
            if is_chewing_mouse:
                return ""yes""
    return ""no"""
12804807,Is the small bottle open or closed?,"    image_patch = ImagePatch(image)
    small_bottle_patches = image_patch.find(""small bottle"")
    # Question assumes only one small bottle patch
    if len(small_bottle_patches) == 0:
        # If no small bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    return small_bottle_patches[0].simple_query(""Is the small bottle open or closed?"")"
18437691,Is the clock small or large?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    if clock_patches[0].width < clock_patches[0].height:
        return ""small""
    else:
        return ""large"""
9482318,Are there either any glasses or bottles in this photo?,"    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    bottles_patches = image_patch.find(""bottles"")
    return bool_to_yesno(len(glasses_patches) > 0 or len(bottles_patches) > 0)"
12362819,Is the sky blue or dark?,"    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky blue or dark?"")
    return sky_patches[0].best_text_match([""blue"", ""dark""])"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?,"    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    cup_patch = cup_patches[0]
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    for shelf_patch in shelf_patches:
        if shelf_patch.horizontal_center > cup_patch.horizontal_center:
            return shelf_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")"
1416636,Are there both bridges and chandeliers in this photograph?,"    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?,"    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""door""))"
13562221,What's the bear on?,"    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What's the bear on?"")
    return bear_patches[0].simple_query(""What's the bear on?"")"
9536851,Is the woman in front of the trees holding scissors?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")
    for woman_patch in woman_patches:
        if woman_patch.simple_query(""Is the woman in front of the trees?"") == ""yes"":
            if woman_patch.simple_query(""Is the woman holding scissors?"") == ""yes"":
                return ""yes""
    return ""no"""
9682405,What is on the machine?,"    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    # Question assumes only one machine patch
    if len(machine_patches) == 0:
        # If no machine is found, query the image directly
        return image_patch.simple_query(""What is on the machine?"")
    return machine_patches[0].simple_query(""What is on the machine?"")"
8649435,What is on the white wall?,"    image_patch = ImagePatch(image)
    wall_patches = image_patch.find(""white wall"")
    # Question assumes only one wall patch
    if len(wall_patches) == 0:
        # If no wall is found, query the image directly
        return image_patch.simple_query(""What is on the white wall?"")
    return wall_patches[0].simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?,"    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""Does the logo look red?"")
    return bool_to_yesno(logo_patches[0].verify_property(""logo"", ""red""))"
14301289,What type of vehicle is to the left of the white vehicle?,"    image_patch = ImagePatch(image)
    white_vehicle_patches = image_patch.find(""white vehicle"")
    # Question assumes only one white vehicle patch
    if len(white_vehicle_patches) == 0:
        # If no white vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    for white_vehicle_patch in white_vehicle_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < white_vehicle_patch.horizontal_center:
                return vehicle_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    return ""no"""
523976,Which kind of vehicle is large?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle large?"") == ""yes"":
            return vehicle_patch.simple_query(""Which kind of vehicle is large?"")
    return ""no"""
3423213,Who is in front of the trees?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?,"    image_patch = ImagePatch(image)
    ottoman_patches = image_patch.find(""ottoman"")
    # Question assumes only one ottoman patch
    if len(ottoman_patches) == 0:
        # If no ottoman is found, query the image directly
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    for ottoman_patch in ottoman_patches:
        brown_chair_patches = image_patch.find(""brown chair"")
        for brown_chair_patch in brown_chair_patches:
            if brown_chair_patch.horizontal_center > ottoman_patch.horizontal_center:
                return ""left""
    return ""right"""
5716578,Is there a laptop on the bed near the magazines?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")"
8215791,Is the porcelain toilet to the left or to the right of the small trash can?,"    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    # Question assumes only one porcelain toilet patch
    if len(porcelain_toilet_patches) == 0:
        # If no porcelain toilet is found, query the image directly
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    small_trash_can_patches = image_patch.find(""small trash can"")
    # Question assumes only one small trash can patch
    if len(small_trash_can_patches) == 0:
        return ""no""
    for porcelain_toilet_patch in porcelain_toilet_patches:
        for small_trash_can_patch in small_trash_can_patches:
            if porcelain_toilet_patch.horizontal_center < small_trash_can_patch.horizontal_center:
                return ""left""
    return ""right"""
17528455,What is in front of the wall?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?,"    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    gloves_patches = image_patch.find(""gloves"")
    
    if len(goggles_patches) == 0 or len(gloves_patches) == 0:
        return image_patch.simple_query(""Do the goggles and the gloves have different colors?"")
    
    goggles_color = goggles_patches[0].simple_query(""What color are the goggles?"")
    gloves_color = gloves_patches[0].simple_query(""What color are the gloves?"")
    
    return ""yes"" if goggles_color != gloves_color else ""no""
"
947724,Is there any purple pillow or kite in this photograph?,"    image_patch = ImagePatch(image)
    is_purple_pillow = image_patch.exists(""purple pillow"")
    is_kite = image_patch.exists(""kite"")
    return bool_to_yesno(is_purple_pillow or is_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?","    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    for people_patch in people_patches:
        if people_patch.horizontal_center > man_patch.horizontal_center:
            if people_patch.verify_property(""people"", ""standing""):
                return ""standing""
            elif people_patch.verify_property(""people"", ""sitting""):
                return ""sitting""
    return ""no"""
15492262,Which kind of furniture is white?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""Which kind of furniture is white?"") # crop would include the furniture so keep it in the query
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is white?"")"
151032547,Is the bear on the right side?,"    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    if bear_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
5698674,Are there either any planters or benches?,"    image_patch = ImagePatch(image)
    is_planter = image_patch.exists(""planter"")
    is_bench = image_patch.exists(""bench"")
    return bool_to_yesno(is_planter or is_bench)"
19397103,What is the person that is standing staring at?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person that is standing staring at?"")
    person_patch = person_patches[0]
    is_standing = person_patch.verify_property(""person"", ""standing"")
    if is_standing:
        return person_patch.simple_query(""What is the person that is standing staring at?"")
    else:
        return person_patch.simple_query(""What is the person that is staring at?"")"
11630681,What is the color of the necklace?,"    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    # Question assumes only one necklace patch
    if len(necklace_patches) == 0:
        # If no necklace is found, query the image directly
        return image_patch.simple_query(""What is the color of the necklace?"")
    return necklace_patches[0].simple_query(""What is the color of the necklace?"")"
248245,Is the table to the left or to the right of the fence?,"    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    for table_patch in table_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if table_patch.horizontal_center < fence_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
837033,Are there round windows or doors?,"    image_patch = ImagePatch(image)
    is_round_window = image_patch.exists(""round window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_round_window or is_door)"
5249150,Are there any bears or napkins in the picture?,"    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    for person_patch in person_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < person_patch.horizontal_center:
                return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    return ""no"""
61006749,Who is dressed in pink?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is dressed in pink?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""pink""):
            return person_patch.simple_query(""Who is dressed in pink?"")
    return ""no one"""
6122955,Does the pillow have yellow color?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return bool_to_yesno(pillow_patches[0].verify_property(""pillow"", ""yellow""))"
6861738,Is the old woman to the right or to the left of the faucet?,"    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    # Question assumes only one old woman patch
    if len(old_woman_patches) == 0:
        # If no old woman is found, query the image directly
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    for old_woman_patch in old_woman_patches:
        faucet_patches = image_patch.find(""faucet"")
        for faucet_patch in faucet_patches:
            if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
15833048,Which kind of animal is on the road?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is on the road?"")
    return animal_patches[0].simple_query(""Which kind of animal is on the road?"")"
9524339,What animal is large?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""large""):
            return animal_patch.simple_query(""What animal is large?"") # crop would include the animal so keep it in the query
    # If no animal is large, pick the first animal
    return animal_patches[0].simple_query(""What animal is large?"")"
18255749,How clean are the sheets the pillow is to the right of?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheets_patches = image_patch.find(""sheets"")
    # Question assumes only one sheets patch
    if len(sheets_patches) == 0:
        return ""no""
    sheets_patch = sheets_patches[0]
    if sheets_patch.horizontal_center > pillow_patch.horizontal_center:
        return sheets_patch.simple_query(""How clean are the sheets?"")
    return ""no"""
19797097,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
6899090,Is the man to the right or to the left of the appliance that looks white?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""no""
    for appliance_patch in appliance_patches:
        if appliance_patch.simple_query(""Is the appliance white?"") == ""yes"":
            if man_patch.horizontal_center > appliance_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
    return ""no"""
3357701,Does the dog to the right of the other dog have white color?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    for dog_patch in dog_patches:
        if dog_patch.horizontal_center > image_patch.horizontal_center:
            return bool_to_yesno(dog_patch.verify_property(""dog"", ""white""))
    return ""no"""
2829418,What's the girl holding?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What's the girl holding?"")
    for girl_patch in girl_patches:
        is_holding = (girl_patch.simple_query(""Is the girl holding something?"") == ""yes"")
        if is_holding:
            return girl_patch.simple_query(""What's the girl holding?"") # crop would include the object so keep it in the query
    # If no girl is holding anything, pick the first girl
    return girl_patches[0].simple_query(""What's the girl holding?"")"
15930109,Which kind of vehicle is blue?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""blue""):
            return vehicle_patch.simple_query(""Which kind of vehicle is blue?"") # crop would include the color so keep it in the query
    # If no vehicle is blue, pick the first vehicle
    return vehicle_patches[0].simple_query(""Which kind of vehicle is blue?"")"
1525382,What type of vegetable is on the food with the cheese?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")"
8548980,Are there either players or hand soaps?,"    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?","    image_patch = ImagePatch(image)
    sandwich_patches = image_patch.find(""sandwich"")
    croissant_patches = image_patch.find(""croissant"")
    
    if len(sandwich_patches) == 0 or len(croissant_patches) == 0:
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    
    for sandwich_patch in sandwich_patches:
        for croissant_patch in croissant_patches:
            if sandwich_patch.horizontal_center > croissant_patch.horizontal_center:
                return ""croissant""
    
    return ""sandwich""
"
6423906,Which kind of food is on the plate?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    return food_patches[0].simple_query(""Which kind of food is on the plate?"")"
1993231,Are the animals in the image of different types?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) < 2:
        return ""no""
    animal_types = set()
    for animal_patch in animal_patches:
        animal_type = animal_patch.simple_query(""What type of animal is this?"")
        animal_types.add(animal_type)
    return ""yes"" if len(animal_types) > 1 else ""no""
"
13949656,Are there any people to the left of the tray?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(people_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for person_patch in people_patches:
        tray_patches = image_patch.find(""tray"")
        for tray_patch in tray_patches:
            if tray_patch.horizontal_center > person_patch.horizontal_center:
                return ""yes""
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?,"    image_patch = ImagePatch(image)
    pineapple_patches = image_patch.find(""pineapple"")
    # Question assumes only one pineapple patch
    if len(pineapple_patches) == 0:
        # If no pineapple is found, query the image directly
        return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")
    return bool_to_yesno(pineapple_patches[0].verify_property(""pineapple"", ""ripe""))"
9392591,Are there chairs or smoothies?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?,"    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    for sheep_patch in sheep_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > sheep_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is to the right of the sheep?"")
    return ""no"""
9896138,Are there any boxes to the left of the screen in the picture?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in box_patches:
        if box_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1400333,What do you think is the man on?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What do you think is the man on?"")
    return man_patches[0].simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?,"    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    return boot_patches[0].best_text_match([""white"", ""orange""])"
3659880,Does the wood boat have silver color?,"    image_patch = ImagePatch(image)
    wood_boat_patches = image_patch.find(""wood boat"")
    # Question assumes only one wood boat patch
    if len(wood_boat_patches) == 0:
        # If no wood boat is found, query the image directly
        return image_patch.simple_query(""Does the wood boat have silver color?"")
    return bool_to_yesno(wood_boat_patches[0].verify_property(""wood boat"", ""silver""))"
1827802,Is the red pot on the appliance to the right of the mixer?,"    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    for red_pot_patch in red_pot_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center > red_pot_patch.horizontal_center:
                mixer_patches = image_patch.find(""mixer"")
                for mixer_patch in mixer_patches:
                    if mixer_patch.horizontal_center > appliance_patch.horizontal_center:
                        return ""yes""
    return ""no"""
14809102,The phone that is in front of the camera is of what color?,"    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # Question assumes only one phone patch
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    for phone_patch in phone_patches:
        if phone_patch.verify_property(""phone"", ""in front of the camera""):
            return phone_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    # If no phone is in front of the camera, query the image directly
    return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")"
61001545,What type of food is to the left of the silver spoon?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")"
799463,Are there both a window and a door in the picture?,"    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    door_patches = image_patch.find(""door"")
    return bool_to_yesno(len(window_patches) > 0 and len(door_patches) > 0)"
11260725,Does the water have small size and white color?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Does the water have small size and white color?"")
    return bool_to_yesno(water_patches[0].verify_property(""water"", ""small"") and water_patches[0].verify_property(""water"", ""white""))"
2397653,Are there any fences that are white?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any fences that are white?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""yes""
    return ""no"""
1554603,Who is holding the animal?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    for animal_patch in animal_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > animal_patch.horizontal_center:
                return person_patch.simple_query(""Who is holding the animal?"")
    return ""no one"""
11606818,Is the man to the right or to the left of the people the stroller is to the right of?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patch = man_patches[0]
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        return ""no""
    for stroller_patch in stroller_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center > stroller_patch.horizontal_center:
                if man_patch.horizontal_center > people_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""no"""
8988476,What kind of furniture is presented in this photo?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is presented in this photo?"")
    return furniture_patches[0].simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        return ""no""
    backpack_patch = backpack_patches[0]
    if man_patch.horizontal_center > backpack_patch.horizontal_center:
        return ""no""
    return man_patch.simple_query(""What is the man with the backpack holding?"")"
91058050,Are there both mouse pads and computer mice in the photograph?,"    image_patch = ImagePatch(image)
    mouse_pad_patches = image_patch.find(""mouse pad"")
    # Question assumes only one mouse pad patch
    if len(mouse_pad_patches) == 0:
        # If no mouse pad is found, query the image directly
        return image_patch.simple_query(""Are there both mouse pads and computer mice in the photograph?"")
    mouse_pad_patch = mouse_pad_patches[0]
    computer_mouse_patches = image_patch.find(""computer mouse"")
    # Question assumes only one computer mouse patch
    if len(computer_mouse_patches) == 0:
        return ""no""
    computer_mouse_patch = computer_mouse_patches[0]
    return bool_to_yesno(mouse_pad_patch.horizontal_center < computer_mouse_patch.horizontal_center)"
1972064,Is the person in front of the tree wearing jeans?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")
    for person_patch in person_patches:
        tree_patches = image_patch.find(""tree"")
        for tree_patch in tree_patches:
            if tree_patch.horizontal_center > person_patch.horizontal_center:
                return bool_to_yesno(person_patch.verify_property(""person"", ""jeans""))
    return ""no"""
167162,Is there a bike to the right of the purse that is to the right of the woman?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    for woman_patch in woman_patches:
        purse_patches = image_patch.find(""purse"")
        # Question assumes only one purse patch
        if len(purse_patches) == 0:
            return ""no""
        for purse_patch in purse_patches:
            if purse_patch.horizontal_center > woman_patch.horizontal_center:
                bike_patches = image_patch.find(""bike"")
                # Question assumes only one bike patch
                if len(bike_patches) == 0:
                    return ""no""
                for bike_patch in bike_patches:
                    if bike_patch.horizontal_center > purse_patch.horizontal_center:
                        return ""yes""
    return ""no"""
1695388,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(people_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in people_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return people_patches[0].simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16921984,What is the bent man to the right of the other men doing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one bent man patch
    if len(man_patches) == 0:
        # If no bent man is found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    for man_patch in man_patches:
        if man_patch.simple_query(""Is the man bent?"") == ""yes"":
            other_men_patches = image_patch.find(""man"")
            for other_man_patch in other_men_patches:
                if other_man_patch.horizontal_center > man_patch.horizontal_center:
                    return man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return ""no"""
12175564,What animal are the men to the right of the girl leading?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    for girl_patch in girl_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center > girl_patch.horizontal_center:
                return man_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    return ""no"""
1219606,On which side of the image is the house?,"    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1770499,Is the black suitcase to the right or to the left of the person on the left?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    person_patch = person_patches[0]
    black_suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one black suitcase patch
    if len(black_suitcase_patches) == 0:
        return ""no""
    for black_suitcase_patch in black_suitcase_patches:
        if black_suitcase_patch.horizontal_center > person_patch.horizontal_center:
            return ""right""
    return ""left"""
5282406,Is the pot to the left of a chair?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    for pot_patch in pot_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if chair_patch.horizontal_center > pot_patch.horizontal_center:
                return ""yes""
    return ""no"""
10914401,Where are the people?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    if len(people_patches) == 0:
        return image_patch.simple_query(""Where are the people?"")
    else:
        return ""yes""
"
1919722,What animal is eating the grass?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is eating the grass?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""eating""):
            return animal_patch.simple_query(""What animal is eating the grass?"") # crop would include eating so keep it in the query
    # If no animal is eating the grass, pick the first animal
    return animal_patches[0].simple_query(""What animal is eating the grass?"")"
9681008,Who is wearing a helmet?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is wearing a helmet?"")"
16861675,Who is on the surfboard in the middle of the photo?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")"
10947426,What is the color of the lizard beside the banana?,"    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    # Question assumes only one lizard patch
    if len(lizard_patches) == 0:
        # If no lizard is found, query the image directly
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    for lizard_patch in lizard_patches:
        banana_patches = image_patch.find(""banana"")
        for banana_patch in banana_patches:
            if lizard_patch.horizontal_center > banana_patch.horizontal_center:
                return lizard_patch.simple_query(""What is the color of the lizard beside the banana?"")
    return ""no"""
18200684,Is the wine glass in the top or in the bottom part?,"    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    if wine_glass_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    people_patch = people_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < people_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    return ""no"""
171012637,Is the teddy bear to the right of a suitcase?,"    image_patch = ImagePatch(image)
    teddy_bear_patches = image_patch.find(""teddy bear"")
    # Question assumes only one teddy bear patch
    if len(teddy_bear_patches) == 0:
        # If no teddy bear is found, query the image directly
        return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"")
    for teddy_bear_patch in teddy_bear_patches:
        suitcase_patches = image_patch.find(""suitcase"")
        for suitcase_patch in suitcase_patches:
            if suitcase_patch.horizontal_center > teddy_bear_patch.horizontal_center:
                return ""yes""
    return ""no"""
19861372,Is the woman's hair long or short?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    return woman_patches[0].best_text_match([""long"", ""short""])"
623889,Are both the television and the armchair the same color?,"    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""television"")
    armchair_patches = image_patch.find(""armchair"")
    
    if len(tv_patches) == 0 or len(armchair_patches) == 0:
        return ""no""
    
    tv_color = tv_patches[0].simple_query(""What color is the television?"")
    armchair_color = armchair_patches[0].simple_query(""What color is the armchair?"")
    
    return ""yes"" if tv_color == armchair_color else ""no""
"
4917605,Is the shoe white or brown?,"    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
91055143,What is on the table?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
5430643,What do you think sits on the plate to the left of the tomato?,"    image_patch = ImagePatch(image)
    tomato_patches = image_patch.find(""tomato"")
    # Question assumes only one tomato patch
    if len(tomato_patches) == 0:
        # If no tomato is found, query the image directly
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    for tomato_patch in tomato_patches:
        plate_patches = image_patch.find(""plate"")
        for plate_patch in plate_patches:
            if plate_patch.horizontal_center < tomato_patch.horizontal_center:
                return plate_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    # If no plate is found to the left of the tomato, query the image directly
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")"
523936,Is the woman in the top part of the picture?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    if woman_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    for bottle_patch in bottle_patches:
        nightstand_patches = image_patch.find(""nightstand"")
        for nightstand_patch in nightstand_patches:
            if bottle_patch.vertical_center > nightstand_patch.vertical_center:
                return ""yes""
    return ""no"""
14292161,The pot is of which color?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].simple_query(""What color is the pot?"")"
17495150,"What device is black, the microphone or the laptop?","    image_patch = ImagePatch(image)
    microphone_patches = image_patch.find(""microphone"")
    # Question assumes only one microphone patch
    if len(microphone_patches) == 0:
        # If no microphone is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    for microphone_patch in microphone_patches:
        if microphone_patch.verify_property(""microphone"", ""black""):
            return ""microphone""
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    for laptop_patch in laptop_patches:
        if laptop_patch.verify_property(""laptop"", ""black""):
            return ""laptop""
    return ""no"""
1521847,Is the cat on a desk?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Is the cat on a desk?"")
    for cat_patch in cat_patches:
        desk_patches = image_patch.find(""desk"")
        for desk_patch in desk_patches:
            if desk_patch.horizontal_center > cat_patch.horizontal_center:
                return ""yes""
    return ""no"""
16465081,The man is holding what?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return ""no""
    for object_patch in object_patches:
        if object_patch.horizontal_center > man_patch.horizontal_center:
            return object_patch.simple_query(""What is the man holding?"")
    return ""no"""
17387032,What is on the post?,"    image_patch = ImagePatch(image)
    post_patches = image_patch.find(""post"")
    # Question assumes only one post patch
    if len(post_patches) == 0:
        # If no post is found, query the image directly
        return image_patch.simple_query(""What is on the post?"")
    return post_patches[0].simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?,"    image_patch = ImagePatch(image)
    kids_patches = image_patch.find(""kids"")
    # Question assumes only one kids patch
    if len(kids_patches) == 0:
        # If no kids are found, query the image directly
        return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")
    kids_patch = kids_patches[0]
    cake_patches = image_patch.find(""cake"")
    # Question assumes only one cake patch
    if len(cake_patches) == 0:
        return ""no""
    cake_patch = cake_patches[0]
    if kids_patch.horizontal_center > cake_patch.horizontal_center:
        return ""kids""
    else:
        return ""cake"""
18906705,How big is the crowd?,"    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""crowd"")
    # Question assumes only one crowd patch
    if len(crowd_patches) == 0:
        # If no crowd is found, query the image directly
        return image_patch.simple_query(""How big is the crowd?"")
    return crowd_patches[0].simple_query(""How big is the crowd?"")"
6157200,Does the sign on the pole have white color?,"    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    return bool_to_yesno(sign_patches[0].verify_property(""sign"", ""white""))"
16760226,What's the laptop in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?,"    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    return bed_patches[0].simple_query(""How large is the bed?"")"
14143886,Where is the person with the luggage standing on?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    for person_patch in person_patches:
        luggage_patches = image_patch.find(""luggage"")
        for luggage_patch in luggage_patches:
            if person_patch.horizontal_center == luggage_patch.horizontal_center:
                return ""ground""
            if person_patch.vertical_center == luggage_patch.vertical_center:
                return ""ceiling""
            if person_patch.horizontal_center > luggage_patch.horizontal_center:
                return ""left""
            if person_patch.horizontal_center < luggage_patch.horizontal_center:
                return ""right""
            if person_patch.vertical_center > luggage_patch.vertical_center:
                return ""top""
            if person_patch.vertical_center < luggage_patch.vertical_center:
                return ""bottom""
    return ""ground"""
19872633,Are there either any fire extinguishers or pepper shakers?,"    image_patch = ImagePatch(image)
    fire_extinguisher_patches = image_patch.find(""fire extinguisher"")
    pepper_shaker_patches = image_patch.find(""pepper shaker"")
    return bool_to_yesno(len(fire_extinguisher_patches) > 0 or len(pepper_shaker_patches) > 0)"
12755010,Is the bottle to the right of a napkin?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    for bottle_patch in bottle_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if napkin_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""yes""
    return ""no"""
2747001,Are there any soaps or bombs?,"    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?,"    image_patch = ImagePatch(image)
    is_baby_giraffe = image_patch.exists(""baby giraffe"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_baby_giraffe or is_elephant)"
6898877,What is the sign on?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"")"
15862812,What is the sticker on?,"    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    return sticker_patches[0].simple_query(""What is the sticker on?"")"
141031470,On which side of the image is the white towel?,"    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    if towel_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
41026846,Who rides a motorcycle?,"    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Who rides a motorcycle?"")
    for motorcycle_patch in motorcycle_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > motorcycle_patch.horizontal_center:
                return person_patch.simple_query(""Who rides a motorcycle?"")
    return ""no one"""
16540391,What is around the bathtub the towel is on?,"    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""What is around the bathtub the towel is on?"")
    towel_patch = towel_patches[0]
    bathtub_patches = image_patch.find(""bathtub"")
    # Question assumes only one bathtub patch
    if len(bathtub_patches) == 0:
        return ""no""
    bathtub_patch = bathtub_patches[0]
    if towel_patch.horizontal_center > bathtub_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
7469617,Is the man to the left or to the right of the person that is to the left of the people?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return ""no""
    person_patch = person_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    people_patch = people_patches[0]
    if person_patch.horizontal_center < people_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
64308,What's located on top of the soup?,"    image_patch = ImagePatch(image)
    soup_patches = image_patch.find(""soup"")
    # Question assumes only one soup patch
    if len(soup_patches) == 0:
        # If no soup is found, query the image directly
        return image_patch.simple_query(""What's located on top of the soup?"")
    for soup_patch in soup_patches:
        is_on_top = (soup_patch.simple_query(""Is the object on top of the soup?"") == ""yes"")
        if is_on_top:
            return soup_patch.simple_query(""What's located on top of the soup?"") # crop would include the object so keep it in the query
    # If no object is on top of the soup, pick the first soup
    return soup_patches[0].simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    bench_patches = image_patch.find(""bench"")
    
    if len(fence_patches) == 0 or len(bench_patches) == 0:
        return ""no""
    
    fence_material = fence_patches[0].simple_query(""What material is the fence made of?"")
    bench_material = bench_patches[0].simple_query(""What material is the bench made of?"")
    
    return ""yes"" if fence_material == bench_material else ""no""
"
3196255,Are there helmets that are not white?,"    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmet_patches:
        if not helmet_patch.verify_property(""helmet"", ""white""):
            return ""yes""
    return ""no"""
2992630,Is the bowl to the right or to the left of the man that is drinking?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return ""no""
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
513894,Is the person above the sand wearing glasses?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    person_patch = person_patches[0]
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        return ""no""
    for sand_patch in sand_patches:
        if sand_patch.vertical_center < person_patch.vertical_center:
            return bool_to_yesno(person_patch.verify_property(""person"", ""wearing glasses""))
    return ""no"""
14167599,Is the color of the life preserver the same as that of the house?,"    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    house_patches = image_patch.find(""house"")
    
    if len(life_preserver_patches) == 0 or len(house_patches) == 0:
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    
    life_preserver_color = life_preserver_patches[0].simple_query(""What is the color of the life preserver?"")
    house_color = house_patches[0].simple_query(""What is the color of the house?"")
    
    return ""yes"" if life_preserver_color == house_color else ""no""
"
18264755,How is the weather?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")"
8641613,Do you see any helmets in the picture that are not red?,"    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        if not helmet_patch.verify_property(""helmet"", ""red""):
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""happy""):
            return person_patch.simple_query(""What does the happy person hold?"") # crop would include the object so keep it in the query
    # If no happy person is found, pick the first person
    return person_patches[0].simple_query(""What does the happy person hold?"")"
8461507,Are there either tissue boxes or lamps in the picture?,"    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is it?"")
    return animal_patches[0].simple_query(""Which kind of animal is it?"")"
19102906,What type of drink is to the left of the plate?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""What type of drink is to the left of the plate?"")
    for plate_patch in plate_patches:
        drink_patches = image_patch.find(""drink"")
        for drink_patch in drink_patches:
            if drink_patch.horizontal_center < plate_patch.horizontal_center:
                return drink_patch.simple_query(""What type of drink is to the left of the plate?"")
    return ""no"""
18315440,Is the sky cloudy and blue?,"    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky cloudy and blue?"")
    is_cloudy = sky_patches[0].verify_property(""sky"", ""cloudy"")
    is_blue = sky_patches[0].verify_property(""sky"", ""blue"")
    return bool_to_yesno(is_cloudy and is_blue)"
453061,Is the fork on the right of the image?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork on the right of the image?"")
    if fork_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
71002567,"What is the broccoli on, a table or a nightstand?","    image_patch = ImagePatch(image)
    broccoli_patches = image_patch.find(""broccoli"")
    # Question assumes only one broccoli patch
    if len(broccoli_patches) == 0:
        # If no broccoli is found, query the image directly
        return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    for broccoli_patch in broccoli_patches:
        is_on_table = (broccoli_patch.simple_query(""Is the broccoli on a table?"") == ""yes"")
        if is_on_table:
            return ""table""
        is_on_nightstand = (broccoli_patch.simple_query(""Is the broccoli on a nightstand?"") == ""yes"")
        if is_on_nightstand:
            return ""nightstand""
    # If no broccoli is on a table or nightstand, pick the first broccoli
    return broccoli_patches[0].simple_query(""What is the broccoli on, a table or a nightstand?"")"
17465089,Is the field green and small?,"    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Is the field green and small?"")
    for field_patch in field_patches:
        if field_patch.verify_property(""field"", ""green"") and field_patch.verify_property(""field"", ""small""):
            return ""yes""
    return ""no"""
16150157,What is on the wall?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?,"    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    for van_patch in van_patches:
        suv_patches = image_patch.find(""SUV"")
        # Question assumes only one SUV patch
        if len(suv_patches) == 0:
            # If no SUV is found, query the image directly
            return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
        for suv_patch in suv_patches:
            if suv_patch.horizontal_center > van_patch.horizontal_center:
                return ""right""
    return ""left"""
15101358,Is the girl to the left of the boy?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    boy_patches = image_patch.find(""boy"")
    
    if len(girl_patches) == 0 or len(boy_patches) == 0:
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    
    for girl in girl_patches:
        for boy in boy_patches:
            if girl.horizontal_center < boy.horizontal_center:
                return ""yes""
    return ""no""
"
12785181,What animals are in the grass?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animals are in the grass?"")
    return animal_patches[0].simple_query(""What animals are in the grass?"")"
348093,Are there both an apple and a bag in the picture?,"    image_patch = ImagePatch(image)
    apple_patches = image_patch.find(""apple"")
    bag_patches = image_patch.find(""bag"")
    return bool_to_yesno(len(apple_patches) > 0 and len(bag_patches) > 0)"
314181,Which sign is shown?,"    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Which sign is shown?"")
    return sign_patches[0].simple_query(""Which sign is shown?"")"
16275314,"On which side is the woman, the right or the left?","    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    if woman_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19535592,Who runs on the sand?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who runs on the sand?"")"
156886,Is there a giraffe near the bush?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    for giraffe_patch in giraffe_patches:
        bush_patches = image_patch.find(""bush"")
        for bush_patch in bush_patches:
            if bush_patch.horizontal_center > giraffe_patch.horizontal_center:
                return ""yes""
    return ""no"""
1756642,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    return shirt_patches[0].simple_query(""Who wears the shirt?"")"
1972390,What type of animal is standing in the field?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal is standing in the field?"")
    return animal_patches[0].simple_query(""What type of animal is standing in the field?"")"
14579439,Is the stuffed animal on the right?,"    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    for stuffed_animal_patch in stuffed_animal_patches:
        if stuffed_animal_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6645395,Is the gray building behind the passengers that are boarding the airplane?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")"
19610200,Is the fence metallic?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return bool_to_yesno(fence_patches[0].verify_property(""fence"", ""metallic""))"
5299471,What does the girl that to the left of the trashcan carry?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    for girl_patch in girl_patches:
        trashcan_patches = image_patch.find(""trashcan"")
        for trashcan_patch in trashcan_patches:
            if trashcan_patch.horizontal_center > girl_patch.horizontal_center:
                return girl_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    return ""no"""
7548203,Which kind of vegetable is on the pizza?,"    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    for pizza_patch in pizza_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center > pizza_patch.horizontal_center:
                return vegetable_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    return ""no"""
91027737,On which side is the pan?,"    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?,"    image_patch = ImagePatch(image)
    black_cars = image_patch.find(""black car"")
    if not black_cars:
        return ""no""
    image_center = image_patch.vertical_center
    for car in black_cars:
        if car.vertical_center < image_center:
            return ""yes""
    return ""no""
"
6144031,Who is in the living room?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?,"    image_patch = ImagePatch(image)
    sink_patches = image_patch.find(""sink"")
    # Question assumes only one sink patch
    if len(sink_patches) == 0:
        # If no sink is found, query the image directly
        return image_patch.simple_query(""What is the sink made of?"")
    return sink_patches[0].simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?,"    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?,"    image_patch = ImagePatch(image)
    has_bicycle = image_patch.exists(""bicycle"")
    has_biker = image_patch.exists(""biker"")
    return bool_to_yesno(has_bicycle or has_biker)
"
844747,Are there both a pillow and a kitten in the image?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    kitten_patches = image_patch.find(""kitten"")
    return bool_to_yesno(len(pillow_patches) > 0 and len(kitten_patches) > 0)"
1104500,What kind of food is in the box?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What kind of food is in the box?"")
    return box_patches[0].simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?,"    image_patch = ImagePatch(image)
    kid_patches = image_patch.find(""kid"")
    # Question assumes only one kid patch
    if len(kid_patches) == 0:
        # If no kid is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    for kid_patch in kid_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < kid_patch.horizontal_center:
                return food_patch.simple_query(""What is the food that is to the left of the kid called?"")
    # If no food is to the left of the kid, query the image directly
    return image_patch.simple_query(""What is the food that is to the left of the kid called?"")"
11820726,"What device is the desk in front of, a television or a printer?","    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    desk_patch = desk_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > desk_patch.horizontal_center:
            return device_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")"
18114588,Do you see a helmet there?,"    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see a helmet there?"")
    return ""yes"""
11950874,What animal is standing on the ground?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""standing""):
            return animal_patch.simple_query(""What animal is standing on the ground?"") # crop would include the ground so keep it in the query
    # If no animal is standing on the ground, pick the first animal
    return animal_patches[0].simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?,"    image_patch = ImagePatch(image)
    small_car_patches = image_patch.find(""small car"")
    fork_patches = image_patch.find(""fork"")
    
    if len(small_car_patches) == 0 or len(fork_patches) == 0:
        return ""no""
    
    for small_car in small_car_patches:
        for fork in fork_patches:
            if small_car.horizontal_center < fork.horizontal_center:
                return ""yes""
    return ""no""
"
16184942,Does that grass look brown and short?,"    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Does that grass look brown and short?"")
    for grass_patch in grass_patches:
        if grass_patch.verify_property(""grass"", ""brown"") and grass_patch.verify_property(""grass"", ""short""):
            return ""yes""
    return ""no"""
6312238,Is the hydrant to the left of the car?,"    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    car_patches = image_patch.find(""car"")
    
    if len(hydrant_patches) == 0 or len(car_patches) == 0:
        return ""no""
    
    for hydrant in hydrant_patches:
        for car in car_patches:
            if hydrant.horizontal_center < car.horizontal_center:
                return ""yes""
    return ""no""
"
16646227,On which side of the picture is the gray car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?,"    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for ball_patch in ball_patches:
        sneakers_patches = image_patch.find(""sneakers"")
        for sneakers_patch in sneakers_patches:
            if sneakers_patch.horizontal_center > ball_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
3443704,What is the woman wearing?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is the woman wearing?"")"
19313572,What is the color of the tent to the left of the vehicles?,"    image_patch = ImagePatch(image)
    # Find all vehicles and tents
    vehicle_patches = image_patch.find(""vehicle"")
    tent_patches = image_patch.find(""tent"")
    
    # If no vehicles or tents found, query directly
    if not vehicle_patches or not tent_patches:
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    
    # Find the first vehicle and tent
    vehicle = vehicle_patches[0]
    tent = tent_patches[0]
    
    # Check if the tent is to the left of the vehicle
    if tent.horizontal_center < vehicle.horizontal_center:
        # Determine the color of the tent
        color = tent.simple_query(""What is the color of the tent?"")
        return color
    else:
        # If no tent is to the left, query directly
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
"
10885675,What is the toilet seat made of?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the toilet seat made of?"")
    toilet_patch = toilet_patches[0]
    return toilet_patch.simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    for blanket_patch in blanket_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > blanket_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is resting on the blanket?"")
    return ""no"""
14561612,What color do you think the bikini that the woman is wearing is?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    for woman_patch in woman_patches:
        bikini_patches = image_patch.find(""bikini"")
        # Question assumes only one bikini patch
        if len(bikini_patches) == 0:
            return ""no""
        bikini_patch = bikini_patches[0]
        return bikini_patch.simple_query(""What color is the bikini?"")"
6587755,Are both the room and the bowl the same color?,"    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    bowl_patches = image_patch.find(""bowl"")
    
    if not room_patches or not bowl_patches:
        return ""no""
    
    room_color = room_patches[0].simple_query(""What color is the room?"")
    bowl_color = bowl_patches[0].simple_query(""What color is the bowl?"")
    
    return ""yes"" if room_color == bowl_color else ""no""
"
4479543,Is the barn white or brown?,"    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    # Question assumes only one barn patch
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    return barn_patches[0].best_text_match([""white"", ""brown""])"
972522,Does the box look white or brown?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].best_text_match([""white"", ""brown""])"
3948528,What is the bowl made of?,"    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What is the bowl made of?"")
    return bowl_patches[0].simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?,"    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    rock_patches = image_patch.find(""rock"")
    # Question assumes only one rock patch
    if len(rock_patches) == 0:
        # If no rock is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    for bench_patch in bench_patches:
        for rock_patch in rock_patches:
            if bench_patch.horizontal_center > rock_patch.horizontal_center:
                return bench_patch.best_text_match([""gray"", ""red""])
    return ""gray"""
866459,On which side is the couch?,"    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8614812,Is the person that is playing wearing shorts?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return ""yes""
    return ""no"""
167438,What is wearing the ground?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wooden""):
            return furniture_patch.simple_query(""Which kind of furniture is wooden?"")
    return ""no"""
1042377,Who is standing beside the person that is wearing a dress?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    for person_patch in person_patches:
        is_wearing_dress = (person_patch.simple_query(""Is the person wearing a dress?"") == ""yes"")
        if is_wearing_dress:
            return person_patch.simple_query(""Who is standing beside the person that is wearing a dress?"") # crop would include the dress so keep it in the query
    # If no person is wearing a dress, pick the first person
    return person_patches[0].simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?,"    image_patch = ImagePatch(image)
    long_ski_patches = image_patch.find(""long ski"")
    # Question assumes only one long ski patch
    if len(long_ski_patches) == 0:
        # If no long ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    return long_ski_patches[0].simple_query(""How fat are the long skis?"")"
2211743,Is the sky clear or overcast?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    pencil_patches = image_patch.find(""pencil"")
    
    if len(bottle_patches) == 0 or len(pencil_patches) == 0:
        return ""no""
    
    for bottle in bottle_patches:
        for pencil in pencil_patches:
            if bottle.horizontal_center < pencil.horizontal_center:
                return ""yes""
    
    return ""no""
"
15478302,Is there any dark door or window in the image?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    window_patches = image_patch.find(""window"")
    for door_patch in door_patches:
        if door_patch.verify_property(""door"", ""dark""):
            return ""yes""
    for window_patch in window_patches:
        if window_patch.verify_property(""window"", ""dark""):
            return ""yes""
    return ""no""
"
18414234,Do you see either a knife or a chair in the picture?,"    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    chair_patches = image_patch.find(""chair"")
    return bool_to_yesno(len(knife_patches) > 0 or len(chair_patches) > 0)"
19779815,Is the book red or yellow?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    return book_patches[0].best_text_match([""red"", ""yellow""])"
7257283,Are there men to the left of the picture?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there men to the left of the picture?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6621625,On which side of the picture is the bench?,"    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    if bench_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19311589,Are there both fences and horses in this picture?,"    image_patch = ImagePatch(image)
    has_fences = image_patch.exists(""fence"")
    has_horses = image_patch.exists(""horse"")
    return bool_to_yesno(has_fences and has_horses)
"
171018070,What device is to the right of the container that the person is to the left of?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    person_patch = person_patches[0]
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        return ""no""
    container_patch = container_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    device_patch = device_patches[0]
    if device_patch.horizontal_center > container_patch.horizontal_center and device_patch.horizontal_center > person_patch.horizontal_center:
        return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    return ""no"""
171031333,Do you see blankets in the picture that are not black?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Do you see blankets in the picture that are not black?"")
    for blanket_patch in blanket_patches:
        if blanket_patch.verify_property(""blanket"", ""black"") == False:
            return ""yes""
    return ""no"""
16695341,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?,"    image_patch = ImagePatch(image)
    has_bottle = image_patch.exists(""bottle"")
    has_child = image_patch.exists(""child"")
    return bool_to_yesno(has_bottle or has_child)
"
5111363,Are there chairs or tables that are not blue?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    if is_chair or is_table:
        is_blue = image_patch.verify_property(""chair"", ""blue"") and image_patch.verify_property(""table"", ""blue"")
        return bool_to_yesno(not is_blue)
    return ""no"""
9230971,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    return hair_patches[0].verify_property(""hair"", ""short length and white color"")"
4822200,Do you see any lettuce on the food with the meat?,"    image_patch = ImagePatch(image)
    meat_patches = image_patch.find(""meat"")
    # Question assumes only one meat patch
    if len(meat_patches) == 0:
        # If no meat is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    for meat_patch in meat_patches:
        lettuce_patches = image_patch.find(""lettuce"")
        for lettuce_patch in lettuce_patches:
            if lettuce_patch.horizontal_center > meat_patch.horizontal_center:
                return ""yes""
    return ""no"""
3726666,What device is to the left of the curtain that is to the left of the glasses?,"    image_patch = ImagePatch(image)
    # Find all curtains and glasses
    curtains = image_patch.find(""curtain"")
    glasses = image_patch.find(""glasses"")
    
    # If either is not found, query directly
    if not curtains or not glasses:
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    
    # Find the first curtain and glasses
    curtain = curtains[0]
    glasses = glasses[0]
    
    # Find all devices to the left of the curtain
    devices = image_patch.find(""device"")
    for device in devices:
        if device.horizontal_center < curtain.horizontal_center:
            # Check if the device is to the left of the glasses
            if device.horizontal_center < glasses.horizontal_center:
                return device.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    
    # If no device found, query directly
    return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
"
9954849,What kind of furniture is it?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is it?"")
    return furniture_patches[0].simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?,"    image_patch = ImagePatch(image)
    is_red_train = image_patch.exists(""red train"")
    is_red_bus = image_patch.exists(""red bus"")
    return bool_to_yesno(is_red_train or is_red_bus)"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?,"    image_patch = ImagePatch(image)
    # Find all lettuce patches
    lettuce_patches = image_patch.find(""lettuce"")
    # If no lettuce is found, query directly
    if not lettuce_patches:
        return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    # For each lettuce, find the crate it's in
    for lettuce in lettuce_patches:
        # Find all crates
        crates = image_patch.find(""crate"")
        # If no crates, query directly
        if not crates:
            return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
        # For each crate, check if it's to the left of the lettuce
        for crate in crates:
            if crate.horizontal_center < lettuce.horizontal_center:
                # Find all vegetables in the crate
                vegetables = image_patch.find(""vegetable"")
                # If no vegetables, query directly
                if not vegetables:
                    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
                # For each vegetable, check if it's the one to the left
                for veg in vegetables:
                    if veg.horizontal_center < crate.horizontal_center:
                        return veg.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    # If no vegetable found to the left, query directly
    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
"
623393,"What type of clothing is tan, the hat or the vest?","    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    for tan_patch in tan_patches:
        hat_patches = image_patch.find(""hat"")
        vest_patches = image_patch.find(""vest"")
        # Question assumes only one hat and one vest patch
        if len(hat_patches) == 0 or len(vest_patches) == 0:
            return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
        for hat_patch in hat_patches:
            for vest_patch in vest_patches:
                if tan_patch.horizontal_center == hat_patch.horizontal_center and tan_patch.vertical_center == hat_patch.vertical_center:
                    return ""hat""
                if tan_patch.horizontal_center == vest_patch.horizontal_center and tan_patch.vertical_center == vest_patch.vertical_center:
                    return ""vest""
    return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")"
6436448,Is the color of the skirt the same as the scarf?,"    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    scarf_patches = image_patch.find(""scarf"")
    
    if not skirt_patches or not scarf_patches:
        return ""no""
    
    skirt_color = skirt_patches[0].simple_query(""What is the color of the skirt?"")
    scarf_color = scarf_patches[0].simple_query(""What is the color of the scarf?"")
    
    return ""yes"" if skirt_color == scarf_color else ""no""
"
3303313,Is the blanket under a cat?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is the blanket under a cat?"")
    for blanket_patch in blanket_patches:
        cat_patches = image_patch.find(""cat"")
        for cat_patch in cat_patches:
            if cat_patch.vertical_center > blanket_patch.vertical_center:
                return ""yes""
    return ""no"""
443663,What color is the picture?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    for man_patch in man_patches:
        umbrella_patches = image_patch.find(""umbrella"")
        for umbrella_patch in umbrella_patches:
            if umbrella_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
1885406,What is the toy on the bed?,"    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What is the toy on the bed?"")
    for toy_patch in toy_patches:
        is_on_bed = (toy_patch.simple_query(""Is the toy on the bed?"") == ""yes"")
        if is_on_bed:
            return toy_patch.simple_query(""What is the toy on the bed?"") # crop would include the bed so keep it in the query
    # If no toy is on the bed, pick the first toy
    return toy_patches[0].simple_query(""What is the toy on the bed?"")"
5557965,On which side is the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3196355,What does the batter hold?,"    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    return batter_patches[0].simple_query(""What does the batter hold?"")"
14470748,Who wears a jacket?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    return jacket_patches[0].simple_query(""Who wears a jacket?"")"
16537736,Are there any houses behind the shrubs?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there any houses behind the shrubs?"")"
1129541,What piece of furniture is made of wood?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wood""):
            return furniture_patch.simple_query(""What piece of furniture is made of wood?"")
    return ""no"""
15270011,Is the racket to the right or to the left of the man that is wearing a hat?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
12416703,Where is that cat?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Where is that cat?"")
    return cat_patches[0].simple_query(""Where is that cat?"")"
15603088,The animal to the right of the envelope is lying on what?,"    image_patch = ImagePatch(image)
    envelope_patches = image_patch.find(""envelope"")
    # Question assumes only one envelope patch
    if len(envelope_patches) == 0:
        # If no envelope is found, query the image directly
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    for envelope_patch in envelope_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > envelope_patch.horizontal_center:
                return animal_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    return ""no"""
5329077,Is the man on a bench?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on a bench?"")
    for man_patch in man_patches:
        bench_patches = image_patch.find(""bench"")
        for bench_patch in bench_patches:
            if man_patch.horizontal_center > bench_patch.horizontal_center:
                return ""yes""
    return ""no"""
1945705,What kind of device is to the left of the device that looks silver and gray?,"    image_patch = ImagePatch(image)
    # Find all devices
    devices = image_patch.find(""device"")
    # If no devices are found, query directly
    if not devices:
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    # Find the silver and gray device
    silver_gray = None
    for device in devices:
        if device.verify_property(""device"", ""silver"") and device.verify_property(""device"", ""gray""):
            silver_gray = device
            break
    if silver_gray is None:
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    # Find all devices to the left of the silver gray device
    left_devices = []
    for device in devices:
        if device.horizontal_center < silver_gray.horizontal_center:
            left_devices.append(device)
    # If no devices to the left, query directly
    if not left_devices:
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    # Determine the most relevant device
    # For simplicity, assume the first device to the left is the relevant one
    left_device = left_devices[0]
    # Ask about the device's type
    return left_device.simple_query(""What kind of device is this?"")
"
17520003,What vehicle is to the right of the pine tree?,"    image_patch = ImagePatch(image)
    pine_tree_patches = image_patch.find(""pine tree"")
    # Question assumes only one pine tree patch
    if len(pine_tree_patches) == 0:
        # If no pine tree is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    for pine_tree_patch in pine_tree_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > pine_tree_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    return ""no"""
1259983,Who is wearing pants?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    for person_patch in person_patches:
        is_wearing_pants = (person_patch.simple_query(""Is the person wearing pants?"") == ""yes"")
        if is_wearing_pants:
            return person_patch.simple_query(""Who is wearing pants?"") # crop would include the pants so keep it in the query
    # If no person is wearing pants, pick the first person
    return person_patches[0].simple_query(""Who is wearing pants?"")"
6413378,Is there a black keyboard or camera?,"    image_patch = ImagePatch(image)
    is_black_keyboard = image_patch.exists(""black keyboard"")
    is_camera = image_patch.exists(""camera"")
    return bool_to_yesno(is_black_keyboard or is_camera)"
947305,Is the sunny water blue and high?,"    image_patch = ImagePatch(image)
    sunny_water_patches = image_patch.find(""sunny water"")
    # Question assumes only one sunny water patch
    if len(sunny_water_patches) == 0:
        # If no sunny water is found, query the image directly
        return image_patch.simple_query(""Is the sunny water blue and high?"")
    is_blue = sunny_water_patches[0].verify_property(""sunny water"", ""blue"")
    is_high = sunny_water_patches[0].verify_property(""sunny water"", ""high"")
    return bool_to_yesno(is_blue and is_high)"
4367817,What type of animal in this scene is brown?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""brown""):
            return animal_patch.simple_query(""What type of animal in this scene is brown?"") # crop would include the color so keep it in the query
    # If no animal is brown, pick the first animal
    return animal_patches[0].simple_query(""What type of animal in this scene is brown?"")"
15485572,What is the vegetable on the hot dog with the cheese?,"    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    for hot_dog_patch in hot_dog_patches:
        is_cheese = hot_dog_patch.simple_query(""Is the hot dog with cheese?"")
        if is_cheese:
            return hot_dog_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"") # crop would include the cheese so keep it in the query
    # If no hot dog with cheese is found, pick the first hot dog
    return hot_dog_patches[0].simple_query(""What is the vegetable on the hot dog with the cheese?"")"
12661142,What is the appliance in the kitchen called?,"    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    return appliance_patches[0].simple_query(""What is the appliance in the kitchen called?"")"
41012743,The arrow is on what?,"    image_patch = ImagePatch(image)
    arrow_patches = image_patch.find(""arrow"")
    # Question assumes only one arrow patch
    if len(arrow_patches) == 0:
        # If no arrow is found, query the image directly
        return image_patch.simple_query(""The arrow is on what?"")
    return arrow_patches[0].simple_query(""The arrow is on what?"")"
4777414,What color is the bicycle in the bottom of the photo?,"    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    # Question assumes only one bicycle patch
    if len(bicycle_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    if bicycle_patches[0].vertical_center < image_patch.vertical_center:
        return bicycle_patches[0].simple_query(""What color is the bicycle in the bottom of the photo?"")
    return ""no"""
1185988,What is the device on top of the table that is to the right of the trashcan?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")"
13582968,Was granite used to make that floor?,"    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""Was granite used to make that floor?"")
    return bool_to_yesno(floor_patches[0].verify_property(""floor"", ""granite""))"
6235273,Are there women in the photo?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""woman""))"
5377974,What is the girl playing with?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    return girl_patches[0].simple_query(""What is the girl playing with?"")"
51037065,On which side of the image is the fridge?,"    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    if fridge_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5299477,Which kind of bag does the girl carry?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    for girl_patch in girl_patches:
        bag_patches = image_patch.find(""bag"")
        # Question assumes only one bag patch
        if len(bag_patches) == 0:
            return ""no""
        for bag_patch in bag_patches:
            if bag_patch.horizontal_center > girl_patch.horizontal_center:
                return bag_patch.simple_query(""What kind of bag is this?"")
    return ""no"""
15135617,Is the white dog on a bench?,"    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog on a bench?"")
    for white_dog_patch in white_dog_patches:
        if white_dog_patch.verify_property(""white dog"", ""on bench""):
            return ""yes""
    return ""no"""
1111583,Is the male person to the right of a person?,"    image_patch = ImagePatch(image)
    male_person_patches = image_patch.find(""male person"")
    # Question assumes only one male person patch
    if len(male_person_patches) == 0:
        # If no male person is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_person_patch in male_person_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > male_person_patch.horizontal_center:
                return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?,"    image_patch = ImagePatch(image)
    windows = image_patch.find(""window"")
    doors = image_patch.find(""door"")
    return bool_to_yesno(len(windows) > 0 and len(doors) > 0)
"
15610844,What kind of place is shown?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")"
11869032,Is the banana below a bird?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Is the banana below a bird?"")
    for banana_patch in banana_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if bird_patch.vertical_center > banana_patch.vertical_center:
                return ""yes""
    return ""no"""
9878360,What color is the vehicle to the left of the fence?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    for vehicle_patch in vehicle_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    return ""no"""
481765,Are there either any buses or trains in the image?,"    image_patch = ImagePatch(image)
    buses = image_patch.find(""bus"")
    trains = image_patch.find(""train"")
    return bool_to_yesno(len(buses) > 0 or len(trains) > 0)
"
6665919,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    for man_patch in man_patches:
        traffic_cone_patches = image_patch.find(""traffic cone"")
        for traffic_cone_patch in traffic_cone_patches:
            if traffic_cone_patch.horizontal_center > man_patch.horizontal_center:
                cap_patches = man_patch.find(""cap"")
                # Question assumes only one cap patch
                if len(cap_patches) == 0:
                    return ""no""
                return bool_to_yesno(cap_patches[0].verify_property(""cap"", ""wearing""))
    return ""no"""
11981238,What is common to the blazer and the suit?,"    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    suit_patches = image_patch.find(""suit"")
    
    common_properties = [""color"", ""style"", ""material""]
    for blazer in blazer_patches:
        for suit in suit_patches:
            for property in common_properties:
                if blazer.verify_property(""blazer"", property) and suit.verify_property(""suit"", property):
                    return blazer.best_text_match([""color"", ""style"", ""material""])
    return ""no""
"
16245,Is the shirt white or green?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    return shirt_patches[0].best_text_match([""white"", ""green""])"
2595103,"In which part of the image are the cars, the bottom or the top?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?","    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""How does the sand look, dry or wet?"")
    return sand_patches[0].simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    for banana_patch in banana_patches:
        if banana_patch.verify_property(""banana"", ""on table""):
            fruit_patches = image_patch.find(""fruit"")
            for fruit_patch in fruit_patches:
                if fruit_patch.horizontal_center > banana_patch.horizontal_center:
                    return ""yes""
    return ""no"""
6376614,What color is the car in the middle?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center == image_patch.horizontal_center:
        return car_patch.simple_query(""What color is the car in the middle?"")
    return ""no"""
712063,What's the lamp made of?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What's the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    for pillow_patch in pillow_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    return ""no"""
9647343,What type of material is the patio made of?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?,"    image_patch = ImagePatch(image)
    cloud_patches = image_patch.find(""cloud"")
    # Question assumes only one cloud patch
    if len(cloud_patches) == 0:
        # If no cloud is found, query the image directly
        return image_patch.simple_query(""What is the color of the clouds in the sky?"")
    return cloud_patches[0].simple_query(""What is the color of the clouds in the sky?"")"
9843309,Do the flowers look orange?,"    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flower"", ""orange""))"
618996,Is there a chair or a bed in this image?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?,"    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    for umbrella_patch in umbrella_patches:
        truck_patches = image_patch.find(""truck"")
        for truck_patch in truck_patches:
            if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
                return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return ""no""
    pants_patch = pants_patches[0]
    return pants_patch.simple_query(""What color are the pants the man is wearing?"")"
551601,Are there any pillows or chairs in the image?,"    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?,"    image_patch = ImagePatch(image)
    person_with_bag_patches = image_patch.find(""person with bag"")
    # Question assumes only one person with bag patch
    if len(person_with_bag_patches) == 0:
        # If no person with bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    for person_with_bag_patch in person_with_bag_patches:
        women_patches = image_patch.find(""woman"")
        for women_patch in women_patches:
            if women_patch.horizontal_center < person_with_bag_patch.horizontal_center:
                return ""yes""
    return ""no"""
5925408,What is the bike in front of?,"    image_patch = ImagePatch(image)
    bike_patches = image_patch.find(""bike"")
    # Question assumes only one bike patch
    if len(bike_patches) == 0:
        # If no bike is found, query the image directly
        return image_patch.simple_query(""What is the bike in front of?"")
    bike_patch = bike_patches[0]
    return bike_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?,"    image_patch = ImagePatch(image)
    fast_food_patches = image_patch.find(""fast food"")
    # Question assumes only one fast food patch
    if len(fast_food_patches) == 0:
        # If no fast food is found, query the image directly
        return image_patch.simple_query(""What type of fast food is shown in this photo?"")
    return fast_food_patches[0].simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?,"    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)"
13778498,What type of vehicle is behind the green tree?,"    image_patch = ImagePatch(image)
    green_tree_patches = image_patch.find(""green tree"")
    # Question assumes only one green tree patch
    if len(green_tree_patches) == 0:
        # If no green tree is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is behind the green tree?"")
    for green_tree_patch in green_tree_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > green_tree_patch.horizontal_center:
                return vehicle_patch.simple_query(""What type of vehicle is behind the green tree?"")
    return ""no"""
41019603,What is the child standing on?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child standing on?"")
    for child_patch in child_patches:
        is_standing_on = child_patch.verify_property(""child"", ""standing on"")
        if is_standing_on:
            return child_patch.simple_query(""What is the child standing on?"") # crop would include the object so keep it in the query
    # If no child is standing on anything, pick the first child
    return child_patches[0].simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What is the wooden item of furniture called?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wooden""):
            return furniture_patch.simple_query(""What is the wooden item of furniture called?"")
    return ""no"""
16817277,Is the man to the left or to the right of the woman?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?,"    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    for kite_patch in kite_patches:
        if kite_patch.verify_property(""kite"", ""triangular""):
            return kite_patch.simple_query(""What color is the kite that looks triangular?"") # crop would include the shape so keep it in the query
    # If no kite is triangular, pick the first kite
    return kite_patches[0].simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is drinking?"")
    for person_patch in person_patches:
        is_drinking = person_patch.verify_property(""person"", ""drinking"")
        if is_drinking:
            return person_patch.simple_query(""Who is drinking?"") # crop would include the drinking so keep it in the query
    # If no person is drinking, pick the first person
    return person_patches[0].simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?,"    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    for building_patch in building_patches:
        for tree_patch in tree_patches:
            if tree_patch.horizontal_center > building_patch.horizontal_center:
                return building_patch.best_text_match([""white"", ""brown""])
    # If no building is behind the tree, query the image directly
    return image_patch.simple_query(""Is the building behind the tree white or brown?"")"
5749240,Are the glove and the undershirt both black?,"    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    for glove_patch in glove_patches:
        if not glove_patch.verify_property(""glove"", ""black""):
            return ""no""
    undershirt_patches = image_patch.find(""undershirt"")
    # Question assumes only one undershirt patch
    if len(undershirt_patches) == 0:
        # If no undershirt is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    for undershirt_patch in undershirt_patches:
        if not undershirt_patch.verify_property(""undershirt"", ""black""):
            return ""no""
    return ""yes"""
18573157,Is the juice in a cup?,"    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    # Question assumes only one juice patch
    if len(juice_patches) == 0:
        # If no juice is found, query the image directly
        return image_patch.simple_query(""Is the juice in a cup?"")
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        return ""no""
    for cup_patch in cup_patches:
        if cup_patch.horizontal_center > juice_patches[0].horizontal_center:
            return ""yes""
    return ""no"""
3445929,Is the brown horse on the right side of the photo?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""brown horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    if horse_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
16541709,Where is the grass?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")"
15764335,Are there any dogs on the tan sand?,"    image_patch = ImagePatch(image)
    tan_sand_patches = image_patch.find(""tan sand"")
    # Question assumes only one tan sand patch
    if len(tan_sand_patches) == 0:
        # If no tan sand is found, query the image directly
        return image_patch.simple_query(""Are there any dogs on the tan sand?"")
    for tan_sand_patch in tan_sand_patches:
        dog_patches = image_patch.find(""dog"")
        for dog_patch in dog_patches:
            if dog_patch.horizontal_center > tan_sand_patch.horizontal_center:
                return ""yes""
    return ""no"""
1478089,Are the door and the garage door made of the same material?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    garage_door_patches = image_patch.find(""garage door"")
    
    if len(door_patches) == 0 or len(garage_door_patches) == 0:
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    
    door_patch = door_patches[0]
    garage_door_patch = garage_door_patches[0]
    
    door_material = door_patch.simple_query(""What material is the door made of?"")
    garage_door_material = garage_door_patch.simple_query(""What material is the garage door made of?"")
    
    return ""yes"" if door_material == garage_door_material else ""no""
"
1250685,Was this picture taken in a bathroom or at a dining room?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"")"
10436844,Is the zebra's nose soft and brown?,"    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    for zebra_patch in zebra_patches:
        is_soft = zebra_patch.verify_property(""zebra"", ""soft"")
        is_brown = zebra_patch.verify_property(""zebra"", ""brown"")
        if is_soft and is_brown:
            return ""yes""
    return ""no"""
10683765,Does the shirt have blue color?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""blue""))"
1593352,Do the draperies look white and striped?,"    image_patch = ImagePatch(image)
    draperies_patches = image_patch.find(""draperies"")
    # Question assumes only one draperies patch
    if len(draperies_patches) == 0:
        # If no draperies are found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    return bool_to_yesno(draperies_patches[0].verify_property(""draperies"", ""white"") and draperies_patches[0].verify_property(""draperies"", ""striped""))"
16553304,Are the trunks both long and wide?,"    image_patch = ImagePatch(image)
    trunks = image_patch.find(""trunk"")
    if not trunks:
        return ""no""
    for trunk in trunks:
        if not trunk.verify_property(""trunk"", ""long"") or not trunk.verify_property(""trunk"", ""wide""):
            return ""no""
    return ""yes""
"
7165102,Is the car on the left of the photo?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the car on the left of the photo?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only two banana patches
    if len(banana_patches) < 2:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    banana_patch1 = banana_patches[0]
    banana_patch2 = banana_patches[1]
    is_short1 = banana_patch1.verify_property(""banana"", ""short"")
    is_short2 = banana_patch2.verify_property(""banana"", ""short"")
    return bool_to_yesno(is_short1 and is_short2)"
19279872,What is the man to the right of the helmet wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    for man_patch in man_patches:
        helmet_patches = image_patch.find(""helmet"")
        for helmet_patch in helmet_patches:
            if man_patch.horizontal_center > helmet_patch.horizontal_center:
                return man_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    return ""no"""
4285513,What is the color of the floor?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor?"")"
3974266,Do the trousers look tan?,"    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan""))"
11595009,What are the devices to the right of the device that is to the right of the remote control?,"    image_patch = ImagePatch(image)
    # Find the remote control
    remote_control_patches = image_patch.find(""remote control"")
    if not remote_control_patches:
        # If no remote control is found, query directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    # Take the first remote control patch
    remote_control = remote_control_patches[0]
    # Find devices to the right of the remote control
    devices_patches = image_patch.find(""device"")
    # Filter devices to the right of the remote control
    right_devices = [dev for dev in devices_patches if dev.horizontal_center > remote_control.horizontal_center]
    # If no devices found, query directly
    if not right_devices:
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    # Get the names of the right devices
    device_names = [dev.simple_query(""What is this?"") for dev in right_devices]
    return "", "".join(device_names)
"
6183000,Are there nightstands or beds?,"    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_nightstand or is_bed)"
14143982,Is it an outdoors scene?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an outdoors scene?"")"
6123160,Are the speakers to the left of a Wii controller?,"    image_patch = ImagePatch(image)
    speakers = image_patch.find(""speakers"")
    controllers = image_patch.find(""Wii controller"")
    
    if not speakers or not controllers:
        return ""no""
    
    for speaker in speakers:
        for controller in controllers:
            if speaker.horizontal_center < controller.horizontal_center:
                return ""yes""
    return ""no""
"
3681634,Is the plastic fork in the top or in the bottom part of the photo?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""plastic fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    if fork_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
13629530,What is the vehicle on the street?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle on the street?"")
    return vehicle_patches[0].simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""no""
    for hat_patch in hat_patches:
        if hat_patch.horizontal_center > man_patch.horizontal_center:
            return hat_patch.simple_query(""What color is the hat the man is in?"")
    return ""no"""
1849976,What vegetables are to the left of the spoon?,"    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    for spoon_patch in spoon_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < spoon_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetables are to the left of the spoon?"")
    return ""no"""
14827816,Is the statue made of bronze or stone?,"    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    return statue_patches[0].best_text_match([""bronze"", ""stone""])"
857204,What's the woman wearing?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"")"
2201105,Is the ball pink?,"    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return ball_patches[0].verify_property(""ball"", ""pink"")"
14616023,What piece of furniture are the cords in front of?,"    image_patch = ImagePatch(image)
    cord_patches = image_patch.find(""cord"")
    # Question assumes only one cord patch
    if len(cord_patches) == 0:
        # If no cord is found, query the image directly
        return image_patch.simple_query(""What piece of furniture are the cords in front of?"")
    for cord_patch in cord_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if cord_patch.horizontal_center < furniture_patch.horizontal_center:
                return furniture_patch.simple_query(""What piece of furniture are the cords in front of?"")
    # If no furniture is found, query the image directly
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?,"    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?,"    image_patch = ImagePatch(image)
    striped_animal_patches = image_patch.find(""striped animal"")
    # Question assumes only one striped animal patch
    if len(striped_animal_patches) == 0:
        # If no striped animal is found, query the image directly
        return image_patch.simple_query(""What is the striped animal called?"")
    return striped_animal_patches[0].simple_query(""What is the striped animal called?"")"
1479068,Is it outdoors?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
16155046,Is the dry grass below a zebra?,"    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the dry grass below a zebra?"")
    for zebra_patch in zebra_patches:
        dry_grass_patches = image_patch.find(""dry grass"")
        for dry_grass_patch in dry_grass_patches:
            if dry_grass_patch.vertical_center > zebra_patch.vertical_center:
                return ""yes""
    return ""no"""
16515071,What is the person in the water wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person in the water?"") == ""yes"":
            return person_patch.simple_query(""What is the person wearing?"")
    return ""no"""
161015042,Who is wearing the goggles?,"    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Who is wearing the goggles?"")
    return goggles_patches[0].simple_query(""Who is wearing the goggles?"")"
19149868,What is pulled by the lady?,"    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""What is pulled by the lady?"")
    for lady_patch in lady_patches:
        is_pulling = (lady_patch.simple_query(""Is the lady pulling something?"") == ""yes"")
        if is_pulling:
            return lady_patch.simple_query(""What is pulled by the lady?"") # crop would include the pulling so keep it in the query
    # If no lady is pulling anything, pick the first lady
    return lady_patches[0].simple_query(""What is pulled by the lady?"")"
5199994,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
19184475,Are the man glasses on the left side of the image?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center < man_patch.horizontal_center:
        return ""yes""
    return ""no"""
7149602,Is the shirt orange or blue?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    return shirt_patches[0].best_text_match([""orange"", ""blue""])"
19479555,What is the person to the right of the benches holding?,"    image_patch = ImagePatch(image)
    benches_patches = image_patch.find(""benches"")
    # Question assumes only one benches patch
    if len(benches_patches) == 0:
        # If no benches are found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    for benches_patch in benches_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > benches_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the benches holding?"")
    return ""no"""
19273393,Are there both a door and a window in this photo?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    window_patches = image_patch.find(""window"")
    return bool_to_yesno(len(door_patches) > 0 and len(window_patches) > 0)"
6481656,What is the man doing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    return man_patches[0].simple_query(""What is the man doing?"")"
13127703,What kind of drink is to the left of the bottle the woman is pouring?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    for woman_patch in woman_patches:
        bottle_patches = image_patch.find(""bottle"")
        for bottle_patch in bottle_patches:
            if bottle_patch.horizontal_center > woman_patch.horizontal_center:
                drink_patches = image_patch.find(""drink"")
                # Question assumes only one drink patch
                if len(drink_patches) == 0:
                    # If no drink is found, query the image directly
                    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
                for drink_patch in drink_patches:
                    if drink_patch.horizontal_center < bottle_patch.horizontal_center:
                        return drink_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    return ""no"""
2378018,What is the toilet in front of?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the toilet in front of?"")
    for toilet_patch in toilet_patches:
        is_in_front_of = toilet_patch.simple_query(""Is the toilet in front of something?"")
        if is_in_front_of == ""yes"":
            return toilet_patch.simple_query(""What is the toilet in front of?"")
    return ""no"""
8430841,Is the frisbee to the left of the guy?,"    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    for frisbee_patch in frisbee_patches:
        guy_patches = image_patch.find(""guy"")
        for guy_patch in guy_patches:
            if guy_patch.horizontal_center > frisbee_patch.horizontal_center:
                return ""no""
    return ""yes"""
18616818,The man is watching who?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is watching who?"")
    return man_patches[0].simple_query(""The man is watching who?"")"
179526,Is the white dog behind a girl?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog behind a girl?"")
    for dog_patch in dog_patches:
        if dog_patch.verify_property(""dog"", ""white""):
            girl_patches = image_patch.find(""girl"")
            for girl_patch in girl_patches:
                if girl_patch.horizontal_center > dog_patch.horizontal_center:
                    return ""yes""
    return ""no"""
21018827,Is the river murky and calm?,"    image_patch = ImagePatch(image)
    river_patches = image_patch.find(""river"")
    # Question assumes only one river patch
    if len(river_patches) == 0:
        # If no river is found, query the image directly
        return image_patch.simple_query(""Is the river murky and calm?"")
    return bool_to_yesno(river_patches[0].verify_property(""river"", ""murky"") and river_patches[0].verify_property(""river"", ""calm""))"
3697449,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(people_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in people_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return people_patches[0].simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?,"    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    sign_patches = image_patch.find(""sign"")
    
    # Check if both exist
    if not car_patches or not sign_patches:
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    
    # Check if any common property exists
    common_property = None
    for car_patch in car_patches:
        for sign_patch in sign_patches:
            if car_patch.verify_property(""car"", ""color"") == sign_patch.verify_property(""sign"", ""color""):
                common_property = ""color""
                break
            if car_patch.verify_property(""car"", ""shape"") == sign_patch.verify_property(""sign"", ""shape""):
                common_property = ""shape""
                break
            if car_patch.verify_property(""car"", ""material"") == sign_patch.verify_property(""sign"", ""material""):
                common_property = ""material""
                break
    
    if common_property:
        return common_property
    else:
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
"
11764476,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.cropped_image.shape[0] > plate_patches[0].cropped_image.shape[0]:
            return furniture_patch.simple_query(""On what kind of furniture is the plate?"")
    return furniture_patches[0].simple_query(""On what kind of furniture is the plate?"")"
61022361,What is the painting that is to the left of the clock hanging on?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    for clock_patch in clock_patches:
        painting_patches = image_patch.find(""painting"")
        for painting_patch in painting_patches:
            if painting_patch.horizontal_center < clock_patch.horizontal_center:
                return painting_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    return ""no"""
1527392,"What color is the fence, tan or black?","    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    return fence_patches[0].best_text_match([""tan"", ""black""])"
19229351,Do you see both bowls and carrots?,"    image_patch = ImagePatch(image)
    bowls = image_patch.find(""bowl"")
    carrots = image_patch.find(""carrot"")
    return bool_to_yesno(len(bowls) > 0 and len(carrots) > 0)
"
1297082,On which side is the silver fork?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16757832,Are there any blue helmets or napkins?,"    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.exists(""blue helmet"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_blue_helmet or is_napkin)"
839816,"In which part of the photo is the racket, the top or the bottom?","    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12385226,Is there a mirror in the bathroom?,"    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        # If no mirror is found, query the image directly
        return image_patch.simple_query(""Is there a mirror in the bathroom?"")
    return ""yes"""
18720852,Are there either blankets or tents in this picture?,"    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    woman_patch = woman_patches[0]
    cardboard_box_patches = image_patch.find(""cardboard box"")
    # Question assumes only one cardboard box patch
    if len(cardboard_box_patches) == 0:
        return ""no""
    for cardboard_box_patch in cardboard_box_patches:
        if cardboard_box_patch.horizontal_center > woman_patch.horizontal_center:
            return ""right""
    return ""left"""
19453453,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(people_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in people_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return people_patches[0].simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?,"    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    if house_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the flowers that look red?"")"
15710688,Is the shirt short sleeved or sleeveless?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    return shirt_patches[0].best_text_match([""short sleeved"", ""sleeveless""])"
5533952,What are the white wires connected to?,"    image_patch = ImagePatch(image)
    white_wires_patches = image_patch.find(""white wires"")
    # Question assumes only one white wires patch
    if len(white_wires_patches) == 0:
        # If no white wires are found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    return white_wires_patches[0].simple_query(""What are the white wires connected to?"")"
11313555,"What type of furniture is that, a table or a nightstand?","    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture a table?"") == ""yes"":
            return ""table""
        if furniture_patch.simple_query(""Is the furniture a nightstand?"") == ""yes"":
            return ""nightstand""
    return ""table"""
10508893,What animals are in front of the trees?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animals are in front of the trees?"")"
14501997,What is the gate made of?,"    image_patch = ImagePatch(image)
    gate_patches = image_patch.find(""gate"")
    # Question assumes only one gate patch
    if len(gate_patches) == 0:
        # If no gate is found, query the image directly
        return image_patch.simple_query(""What is the gate made of?"")
    return gate_patches[0].simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    for device_patch in device_patches:
        for table_patch in table_patches:
            if device_patch.vertical_center > table_patch.vertical_center:
                return device_patch.simple_query(""What color is the device on top of the table?"")
    return ""no"""
181032044,Are these closed drawers?,"    image_patch = ImagePatch(image)
    drawers = image_patch.find(""drawer"")
    if not drawers:
        return ""no""
    for drawer in drawers:
        if not drawer.verify_property(""drawer"", ""open""):
            return ""yes""
    return ""no""
"
383,What kind of furniture is made of wood?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wood""):
            return furniture_patch.simple_query(""What kind of furniture is made of wood?"")
    return ""no"""
101054962,What is the person by the bananas wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    for person_patch in person_patches:
        bananas_patches = image_patch.find(""bananas"")
        for bananas_patch in bananas_patches:
            if bananas_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person by the bananas wearing?"")
    return ""no"""
759165,What is the color of the tower in the middle of the picture?,"    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    # Question assumes only one tower patch
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    return tower_patches[0].simple_query(""What is the color of the tower in the middle of the picture?"")"
10775539,Is this giraffe tall and white?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is this giraffe tall and white?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""tall"") and giraffe_patches[0].verify_property(""giraffe"", ""white""))"
19981804,On which side of the photo is the colorful screen?,"    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""colorful screen"")
    # Question assumes only one screen patch
    if len(screen_patches) == 0:
        # If no screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    if screen_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7903654,Is the tap on the left side or on the right?,"    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6206183,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    return coat_patches[0].best_text_match([""black"", ""beige""])"
13123207,Does the kite near the field look high and red?,"    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    for kite_patch in kite_patches:
        if kite_patch.verify_property(""kite"", ""high"") and kite_patch.verify_property(""kite"", ""red""):
            return ""yes""
    return ""no"""
7740092,Are there any utensils in this picture?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""utensil""))"
8774975,What is around the guy?,"    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    # Question assumes only one guy patch
    if len(guy_patches) == 0:
        # If no guy is found, query the image directly
        return image_patch.simple_query(""What is around the guy?"")
    guy_patch = guy_patches[0]
    return guy_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?,"    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?,"    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    # Question assumes only one staircase patch
    if len(staircase_patches) == 0:
        # If no staircase is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    for staircase_patch in staircase_patches:
        for sky_patch in sky_patches:
            if staircase_patch.verify_property(""staircase"", ""color"") != sky_patch.verify_property(""sky"", ""color""):
                return ""yes""
    return ""no"""
1605874,What color are the containers that are on the right?,"    image_patch = ImagePatch(image)
    containers = image_patch.find(""container"")
    if not containers:
        return ""no containers found""
    right_containers = [c for c in containers if c.horizontal_center > image_patch.horizontal_center]
    if not right_containers:
        return ""no containers on the right""
    colors = set()
    for container in right_containers:
        color = container.simple_query(""What color is this container?"")
        colors.add(color)
    if len(colors) == 1:
        return colors.pop()
    else:
        return ""multiple colors found""
"
12495781,Are the people to the right or to the left of the cone that is orange?,"    image_patch = ImagePatch(image)
    cone_patches = image_patch.find(""cone"")
    # Question assumes only one cone patch
    if len(cone_patches) == 0:
        # If no cone is found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    for cone_patch in cone_patches:
        if cone_patch.simple_query(""Is the cone orange?"") == ""yes"":
            people_patches = image_patch.find(""people"")
            for people_patch in people_patches:
                if people_patch.horizontal_center > cone_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""left"""
14165681,"What type of clothing is light, the sweater or the cap?","    image_patch = ImagePatch(image)
    sweater_patches = image_patch.find(""sweater"")
    cap_patches = image_patch.find(""cap"")
    
    if len(sweater_patches) == 0 or len(cap_patches) == 0:
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    
    sweater_patch = sweater_patches[0]
    cap_patch = cap_patches[0]
    
    sweater_color = sweater_patch.simple_query(""What color is the sweater?"")
    cap_color = cap_patch.simple_query(""What color is the cap?"")
    
    if sweater_color == ""light"":
        return ""sweater""
    elif cap_color == ""light"":
        return ""cap""
    else:
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
"
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    girl_patch = girl_patches[0]
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        return ""no""
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > girl_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
5617223,"What color is the container to the left of the horse, green or silver?","    image_patch = ImagePatch(image)
    # Find all possible containers and horses
    containers = image_patch.find(""container"")
    horses = image_patch.find(""horse"")
    
    # If either is not found, query directly
    if not containers or not horses:
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    
    # Check each container against each horse
    for container in containers:
        for horse in horses:
            # Determine if the container is to the left of the horse
            if container.horizontal_center < horse.horizontal_center:
                # Verify the color
                is_green = container.verify_property(""container"", ""green"")
                is_silver = container.verify_property(""container"", ""silver"")
                if is_green:
                    return ""green""
                elif is_silver:
                    return ""silver""
    
    # If no matching container found, query directly
    return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
"
2428964,Is the water gray or teal?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].best_text_match([""gray"", ""teal""])"
19620769,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    if lamp_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""brown"") and animal_patch.verify_property(""animal"", ""tiny""):
            return ""yes""
    return ""no"""
5672532,Does that shirt look long sleeved?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""long sleeved""))"
6146439,Does the box look green?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look green?"")
    return bool_to_yesno(box_patches[0].verify_property(""box"", ""green""))"
1910285,Is the white container on the left of the image?,"    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    # Question assumes only one white container patch
    if len(white_container_patches) == 0:
        # If no white container is found, query the image directly
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    if white_container_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
13362134,Is that shower curtain to the left of a toilet?,"    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center > shower_curtain_patch.horizontal_center:
                return ""yes""
    return ""no"""
161060488,Is there any cabinet to the right of the stove?,"    image_patch = ImagePatch(image)
    stove_patches = image_patch.find(""stove"")
    # Question assumes only one stove patch
    if len(stove_patches) == 0:
        # If no stove is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for stove_patch in stove_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > stove_patch.horizontal_center:
                return ""yes""
    return ""no"""
111055042,Is the chair on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    if chair_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
151068,Which kind of clothing is white?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""white""):
            return clothing_patch.simple_query(""Which kind of clothing is white?"") # crop would include the color so keep it in the query
    # If no clothing is white, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is white?"")"
19387951,Is this place the forest or the garden?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"")"
1781695,What's on the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What's on the blanket?"")
    return blanket_patches[0].simple_query(""What's on the blanket?"")"
17699779,Is she on a bed?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is she on a bed?"")"
464441,"What piece of furniture is the blanket on, a bed or a sofa?","    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    for blanket_patch in blanket_patches:
        bed_patches = image_patch.find(""bed"")
        for bed_patch in bed_patches:
            if bed_patch.horizontal_center > blanket_patch.horizontal_center:
                return ""bed""
        sofa_patches = image_patch.find(""sofa"")
        for sofa_patch in sofa_patches:
            if sofa_patch.horizontal_center > blanket_patch.horizontal_center:
                return ""sofa""
    return ""sofa"""
9505496,Are the wires above a man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    for man_patch in man_patches:
        wires_patches = image_patch.find(""wires"")
        for wires_patch in wires_patches:
            if wires_patch.vertical_center > man_patch.vertical_center:
                return ""yes""
    return ""no"""
4625512,What is the woman doing?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman doing?"")
    return woman_patches[0].simple_query(""What is the woman doing?"")"
9441941,Is the woman's hair red or black?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    return woman_patches[0].best_text_match([""red"", ""black""])"
2387432,What's on the table?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's on the table?"")"
10534717,What is the pillow on?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""What is the pillow on?"")
    return pillow_patches[0].simple_query(""What is the pillow on?"")"
19335685,"What fruits is the container behind of, apples or bananas?","    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")
    for container_patch in container_patches:
        fruits_patches = image_patch.find(""fruits"")
        for fruits_patch in fruits_patches:
            if fruits_patch.horizontal_center > container_patch.horizontal_center:
                return fruits_patch.best_text_match([""apples"", ""bananas""])
    return ""no"""
3127817,The goat is standing in what?,"    image_patch = ImagePatch(image)
    goat_patches = image_patch.find(""goat"")
    # Question assumes only one goat patch
    if len(goat_patches) == 0:
        # If no goat is found, query the image directly
        return image_patch.simple_query(""The goat is standing in what?"")
    return goat_patches[0].simple_query(""The goat is standing in what?"")"
1588567,Where does the man that to the right of the mirror sit?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    mirror_patches = image_patch.find(""mirror"")
    
    if not man_patches or not mirror_patches:
        return ""no""
    
    for man in man_patches:
        for mirror in mirror_patches:
            if man.horizontal_center > mirror.horizontal_center:
                return man.simple_query(""Where does the man sit?"")
    
    return ""no""
"
7399543,What is the floor made of?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?,"    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""What kind of animal is the house behind of?"")
    for house_patch in house_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > house_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is the house behind of?"")
    return ""no"""
1174904,Is the cobblestone sidewalk both large and gray?,"    image_patch = ImagePatch(image)
    cobblestone_patches = image_patch.find(""cobblestone"")
    # Question assumes only one cobblestone patch
    if len(cobblestone_patches) == 0:
        # If no cobblestone is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    for cobblestone_patch in cobblestone_patches:
        if cobblestone_patch.verify_property(""cobblestone"", ""large"") and cobblestone_patch.verify_property(""cobblestone"", ""gray""):
            return ""yes""
    return ""no"""
13375231,What is the lettuce on?,"    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What is the lettuce on?"")
    return lettuce_patches[0].simple_query(""What is the lettuce on?"")"
1194027,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the color so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
9963477,Is the statue wearing a dress?,"    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    return statue_patches[0].verify_property(""statue"", ""dress"")"
1151995,Which side of the photo is the yellow vase on?,"    image_patch = ImagePatch(image)
    vase_patches = image_patch.find(""vase"")
    # Question assumes only one vase patch
    if len(vase_patches) == 0:
        # If no vase is found, query the image directly
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    if vase_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
712821,What is common to the bear and the belt?,"    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    belt_patches = image_patch.find(""belt"")
    
    # Check if both objects exist
    if not bear_patches or not belt_patches:
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    
    # Check if any bear has a belt
    for bear in bear_patches:
        for belt in belt_patches:
            if bear.horizontal_center == belt.horizontal_center:
                return ""belt""
    
    # If no common found, query directly
    return image_patch.simple_query(""What is common to the bear and the belt?"")
"
1757418,What is the vehicle to the right of the car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    for car_patch in car_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > car_patch.horizontal_center:
                return vehicle_patch.simple_query(""What is the vehicle to the right of the car?"")
    return ""no"""
7624100,Are the trunks that are gray wet and large?,"    image_patch = ImagePatch(image)
    trunks = image_patch.find(""trunk"")
    if not trunks:
        return ""no""
    for trunk in trunks:
        if trunk.verify_property(""trunk"", ""gray"") and trunk.verify_property(""trunk"", ""wet"") and trunk.verify_property(""trunk"", ""large""):
            return ""yes""
    return ""no""
"
1125474,"On which side of the photo is the iron fence, the right or the left?","    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    # Question assumes only one iron fence patch
    if len(iron_fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    if iron_fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1300375,What is the name of the item of furniture that the printer is on?,"    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    # Question assumes only one printer patch
    if len(printer_patches) == 0:
        # If no printer is found, query the image directly
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    return printer_patches[0].simple_query(""What is the name of the item of furniture that the printer is on?"")"
5925196,What's the building covered by?,"    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""What's the building covered by?"")
    for building_patch in building_patches:
        is_covered = building_patch.verify_property(""building"", ""covered"")
        if is_covered:
            return building_patch.simple_query(""What's the building covered by?"") # crop would include the covering so keep it in the query
    # If no building is covered, pick the first building
    return building_patches[0].simple_query(""What's the building covered by?"")"
1948055,What watercraft is the white rope tying?,"    image_patch = ImagePatch(image)
    white_rope_patches = image_patch.find(""white rope"")
    # Question assumes only one white rope patch
    if len(white_rope_patches) == 0:
        # If no white rope is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        return ""no""
    for watercraft_patch in watercraft_patches:
        if watercraft_patch.simple_query(""Is the white rope tying the watercraft?"") == ""yes"":
            return watercraft_patch.simple_query(""What watercraft is the white rope tying?"")
    return ""no"""
8540582,What kind of animal is in front of the leafy trees?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?,"    image_patch = ImagePatch(image)
    walking_woman_patches = image_patch.find(""walking woman"")
    # Question assumes only one walking woman patch
    if len(walking_woman_patches) == 0:
        # If no walking woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    for walking_woman_patch in walking_woman_patches:
        bus_patches = image_patch.find(""bus"")
        # Question assumes only one bus patch
        if len(bus_patches) == 0:
            return walking_woman_patch.simple_query(""What does the walking woman by the bus wear?"")
        for bus_patch in bus_patches:
            if walking_woman_patch.horizontal_center < bus_patch.horizontal_center:
                return walking_woman_patch.simple_query(""What does the walking woman by the bus wear?"")
    return walking_woman_patch.simple_query(""What does the walking woman by the bus wear?"")"
1129508,Is the controller to the left of a pillow?,"    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > controller_patch.horizontal_center:
                return ""no""
    return ""yes"""
18664084,Is there any sheep by the fence?,"    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is there any sheep by the fence?"")
    for sheep_patch in sheep_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center > sheep_patch.horizontal_center:
                return ""yes""
    return ""no"""
6912079,What animal is this?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is this?"")"
3412029,Where is the person?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person?"")
    return person_patches[0].simple_query(""Where is the person?"")"
14161122,What animal is in the water?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""in water""):
            return animal_patch.simple_query(""What animal is in the water?"")
    return ""no animal is in the water"""
1781542,What is the item of furniture to the right of the baby the parent is to the left of?,"    image_patch = ImagePatch(image)
    # Find all babies and parents
    babies = image_patch.find(""baby"")
    parents = image_patch.find(""parent"")
    
    # Check if there are any babies and parents
    if not babies or not parents:
        return ""no""
    
    # Find the first baby and parent
    baby = babies[0]
    parent = parents[0]
    
    # Find all furniture items
    furniture = image_patch.find(""furniture"")
    
    # Check each furniture item to see if it's to the right of the baby
    for furniture_patch in furniture:
        if furniture_patch.horizontal_center > baby.horizontal_center:
            return furniture_patch.simple_query(""What is this?"")
    
    # If no furniture found to the right of the baby
    return ""no""
"
15699496,What is the cup that looks clean made of?,"    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    return cup_patches[0].simple_query(""What is the cup that looks clean made of?"")"
12765451,What animals are to the right of the ladder?,"    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for ladder_patch in ladder_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > ladder_patch.horizontal_center:
                return animal_patch.simple_query(""What animals are to the right of the ladder?"")
    return ""no"""
191044307,What animal is black?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What animal is black?"") # crop would include the color so keep it in the query
    # If no animal is black, pick the first animal
    return animal_patches[0].simple_query(""What animal is black?"")"
12639181,Who is wearing shorts?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, pick the first person
    return person_patches[0].simple_query(""Who is wearing shorts?"")"
10630949,Is the person that is not male wearing an elbow pad?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for person_patch in person_patches:
        if not person_patch.verify_property(""person"", ""male""):
            is_wearing_elbow_pad = person_patch.verify_property(""person"", ""elbow pad"")
            return bool_to_yesno(is_wearing_elbow_pad)
    return ""no"""
14544602,What is the boy holding?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    for boy_patch in boy_patches:
        is_holding = (boy_patch.simple_query(""Is the boy holding something?"") == ""yes"")
        if is_holding:
            return boy_patch.simple_query(""What is the boy holding?"") # crop would include the object so keep it in the query
    # If no boy is holding anything, pick the first boy
    return boy_patches[0].simple_query(""What is the boy holding?"")"
2986699,Of what material the dish?,"    image_patch = ImagePatch(image)
    dish_patches = image_patch.find(""dish"")
    # Question assumes only one dish patch
    if len(dish_patches) == 0:
        # If no dish is found, query the image directly
        return image_patch.simple_query(""Of what material the dish?"")
    return dish_patches[0].simple_query(""Of what material the dish?"")"
161013513,What kind of animal is on the street?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    return animal_patches[0].simple_query(""What kind of animal is on the street?"")"
15143936,What animal is before the roof?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is before the roof?"")
    for animal_patch in animal_patches:
        roof_patches = image_patch.find(""roof"")
        for roof_patch in roof_patches:
            if animal_patch.horizontal_center < roof_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is before the roof?"")
    return ""no"""
1955043,Who is playing with the ball?,"    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Who is playing with the ball?"")
    for ball_patch in ball_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > ball_patch.horizontal_center:
                return person_patch.simple_query(""Who is playing with the ball?"")
    return ""no one"""
91044150,What is the name of the animals in front of the trees beside the river?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?,"    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is hanging?"")
    return fruit_patches[0].simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?,"    image_patch = ImagePatch(image)
    kangaroo_patches = image_patch.find(""kangaroo"")
    bird_patches = image_patch.find(""bird"")
    return bool_to_yesno(len(kangaroo_patches) > 0 or len(bird_patches) > 0)"
10457241,What is the color of the trousers?,"    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"")"
2913850,Is the placemat in the bottom or in the top part?,"    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What is covered with blanket?"")
    return blanket_patches[0].simple_query(""What is covered with blanket?"")"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    man_patch = man_patches[0]
    sweater_patches = image_patch.find(""sweater"")
    # Question assumes only one sweater patch
    if len(sweater_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    for sweater_patch in sweater_patches:
        if sweater_patch.horizontal_center > man_patch.horizontal_center:
            furniture_patches = image_patch.find(""furniture"")
            # Question assumes only one furniture patch
            if len(furniture_patches) == 0:
                return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
            return furniture_patches[0].simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?","    image_patch = ImagePatch(image)
    desk_drawer_patches = image_patch.find(""desk drawer"")
    # Question assumes only one desk drawer patch
    if len(desk_drawer_patches) == 0:
        # If no desk drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    if desk_drawer_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?,"    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)"
19737232,Is the book on the right of the picture?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book on the right of the picture?"")
    for book_patch in book_patches:
        if book_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
475064,Who is wearing the glasses?,"    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    return glasses_patches[0].simple_query(""Who is wearing the glasses?"")"
8594579,Is there a woman to the right of the orange object that is to the right of the person?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    for person_patch in person_patches:
        orange_patches = image_patch.find(""orange"")
        # Question assumes only one orange patch
        if len(orange_patches) == 0:
            return ""no""
        for orange_patch in orange_patches:
            if orange_patch.horizontal_center > person_patch.horizontal_center:
                woman_patches = image_patch.find(""woman"")
                # Question assumes only one woman patch
                if len(woman_patches) == 0:
                    return ""no""
                for woman_patch in woman_patches:
                    if woman_patch.horizontal_center > orange_patch.horizontal_center:
                        return ""yes""
    return ""no"""
14602992,Which side of the image is the couch on?,"    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
9944587,How tall is the man that is wearing a shirt?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""How tall is the man that is wearing a shirt?"")"
13736712,Are there any giraffes?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe""))"
6996118,The young girl is wearing what?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""young girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The young girl is wearing what?"")
    return girl_patches[0].simple_query(""The young girl is wearing what?"")"
19992576,Is the basket on the floor small and brown?,"    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    for basket_patch in basket_patches:
        if basket_patch.verify_property(""basket"", ""on the floor"") and basket_patch.verify_property(""basket"", ""small"") and basket_patch.verify_property(""basket"", ""brown""):
            return ""yes""
    return ""no"""
17332401,What is the boy in front of?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy in front of?"")
    return boy_patches[0].simple_query(""What is the boy in front of?"")"
15586294,Which side is the leather armchair on?,"    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""leather armchair"")
    # Question assumes only one armchair patch
    if len(armchair_patches) == 0:
        # If no armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    if armchair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15658324,What is the horse in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    controller_patch = controller_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    furniture_patch = furniture_patches[0]
    if furniture_patch.verify_property(""furniture"", ""same color as controller""):
        return furniture_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")"
2531874,Who is playing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
3112009,Is the plate on the left side?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    if plate_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
1527613,On which side of the picture is the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?,"    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    roof_patches = image_patch.find(""roof"")
    
    if len(road_patches) == 0 or len(roof_patches) == 0:
        return ""no""
    
    road_color = road_patches[0].simple_query(""What color is the road?"")
    roof_color = roof_patches[0].simple_query(""What color is the roof?"")
    
    return ""yes"" if road_color == roof_color else ""no""
"
161027384,What is the green rug hanging on?,"    image_patch = ImagePatch(image)
    rug_patches = image_patch.find(""rug"")
    # Question assumes only one rug patch
    if len(rug_patches) == 0:
        # If no rug is found, query the image directly
        return image_patch.simple_query(""What is the green rug hanging on?"")
    for rug_patch in rug_patches:
        if rug_patch.verify_property(""rug"", ""hanging""):
            return rug_patch.simple_query(""What is the green rug hanging on?"") # crop would include the hanging so keep it in the query
    # If no rug is hanging, pick the first rug
    return rug_patches[0].simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?,"    image_patch = ImagePatch(image)
    # contains a relation (using), so ask directly
    return image_patch.simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(people_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who in the photo is standing?"")
    for person_patch in people_patches:
        if person_patch.verify_property(""person"", ""standing""):
            return person_patch.simple_query(""Who in the photo is standing?"")
    return ""no one"""
693318,Do you see any plates in the photo?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate""))"
19613394,The person on the skateboard is wearing what?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    for person_patch in person_patches:
        is_wearing_skateboard = (person_patch.simple_query(""Is the person wearing a skateboard?"") == ""yes"")
        if is_wearing_skateboard:
            return person_patch.simple_query(""The person on the skateboard is wearing what?"") # crop would include the skateboard so keep it in the query
    # If no person is wearing a skateboard, pick the first person
    return person_patches[0].simple_query(""The person on the skateboard is wearing what?"")"
19927237,Is the blue car in front of the white van?,"    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    white_van_patches = image_patch.find(""white van"")
    
    if len(blue_car_patches) == 0 or len(white_van_patches) == 0:
        return image_patch.simple_query(""Is the blue car in front of the white van?"")
    
    for blue_car in blue_car_patches:
        for white_van in white_van_patches:
            if blue_car.horizontal_center < white_van.horizontal_center:
                return ""yes""
    
    return ""no""
"
31054022,What is the box sitting on?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What is the box sitting on?"")
    for box_patch in box_patches:
        is_sitting_on = (box_patch.simple_query(""Is the box sitting on something?"") == ""yes"")
        if is_sitting_on:
            return box_patch.simple_query(""What is the box sitting on?"") # crop would include the object so keep it in the query
    # If no box is sitting on anything, pick the first box
    return box_patches[0].simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?,"    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Does the ground look snowy and brown?"")
    return bool_to_yesno(ground_patches[0].verify_property(""ground"", ""snowy"") and ground_patches[0].verify_property(""ground"", ""brown""))"
15185768,Does the sky look blue and clear?,"    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Does the sky look blue and clear?"")
    return bool_to_yesno(sky_patches[0].verify_property(""sky"", ""blue"") and sky_patches[0].verify_property(""sky"", ""clear""))"
1589160,Does the person that is sitting lean against a fire hydrant?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""leaning""):
            return ""yes""
    return ""no"""
2142522,Are there any shopping carts or mannequins in this photo?,"    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)"
17362234,Are there cages or scrub brushes in this picture?,"    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)"
4955854,Is the lamp below the chain?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    for lamp_patch in lamp_patches:
        chain_patches = image_patch.find(""chain"")
        for chain_patch in chain_patches:
            if chain_patch.vertical_center > lamp_patch.vertical_center:
                return ""yes""
    return ""no"""
10463545,Is the computer to the right of the other computer silver or black?,"    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    # Question assumes only one computer patch
    if len(computer_patches) == 0:
        # If no computer is found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    for computer_patch in computer_patches:
        if computer_patch.horizontal_center > image_patch.horizontal_center:
            return computer_patch.best_text_match([""silver"", ""black""])
    return ""no"""
2265037,What is the girl wearing?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?,"    image_patch = ImagePatch(image)
    blue_numbers = image_patch.find(""blue numbers"")
    blue_letters = image_patch.find(""blue letters"")
    return bool_to_yesno(len(blue_numbers) > 0 or len(blue_letters) > 0)"
3483992,Is the long bus to the left or to the right of the person with the backpack?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    person_patch = person_patches[0]
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        return ""no""
    for bus_patch in bus_patches:
        if bus_patch.horizontal_center < person_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
13598461,What is the device that is not on called?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    for device_patch in device_patches:
        if not device_patch.verify_property(""device"", ""on""):
            return device_patch.simple_query(""What is the device that is not on called?"")
    # If no device is not on, query the image directly
    return image_patch.simple_query(""What is the device that is not on called?"")"
13885436,The sky has what color?,"    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""The sky has what color?"")
    return sky_patches[0].simple_query(""What color is the sky?"")"
7432467,Is the black container to the left of the man that is on the motorcycle?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    man_patch = man_patches[0]
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        return ""no""
    for black_container_patch in black_container_patches:
        if black_container_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
19540096,Is the fire in an oven?,"    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    # Question assumes only one fire patch
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    for fire_patch in fire_patches:
        oven_patches = image_patch.find(""oven"")
        for oven_patch in oven_patches:
            if oven_patch.horizontal_center > fire_patch.horizontal_center:
                return ""yes""
    return ""no"""
18291107,The horse is where?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""The horse is where?"")
    return horse_patches[0].simple_query(""The horse is where?"")"
5435474,Is the man that is to the left of the motorbike wearing a hat?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    for man_patch in man_patches:
        motorbike_patches = image_patch.find(""motorbike"")
        for motorbike_patch in motorbike_patches:
            if man_patch.horizontal_center < motorbike_patch.horizontal_center:
                return bool_to_yesno(man_patch.verify_property(""man"", ""hat""))
    return ""no"""
226307,Are there any tables in the photo?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))"
1944826,Who is reflected in the mirror?,"    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        # If no mirror is found, query the image directly
        return image_patch.simple_query(""Who is reflected in the mirror?"")
    for mirror_patch in mirror_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > mirror_patch.horizontal_center:
                return person_patch.simple_query(""Who is reflected in the mirror?"")
    return ""no one"""
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")"
18435846,What is the color of the balloon that is to the right of the backpack?,"    image_patch = ImagePatch(image)
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        # If no backpack is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    for backpack_patch in backpack_patches:
        balloon_patches = image_patch.find(""balloon"")
        for balloon_patch in balloon_patches:
            if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
                return balloon_patch.simple_query(""What is the color of the balloon?"")
    return ""no"""
8390894,Is the woman to the right of the man sitting on a sofa?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
18896007,Which side of the image is the pot on?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    if pot_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19323898,Is that pillow on a couch?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is that pillow on a couch?"")
    for pillow_patch in pillow_patches:
        couch_patches = image_patch.find(""couch"")
        for couch_patch in couch_patches:
            if pillow_patch.vertical_center > couch_patch.vertical_center:
                return ""yes""
    return ""no"""
1281034,Where are the trees?,"    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    if len(tree_patches) == 0:
        return image_patch.simple_query(""Where are the trees?"")
    else:
        return ""yes""
"
13515147,What is on the cow?,"    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""What is on the cow?"")
    return cow_patches[0].simple_query(""What is on the cow?"")"
91036716,What is the skater doing?,"    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    # Question assumes only one skater patch
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    for boy_patch in boy_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center < boy_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the left of the boy carrying?"")
    return ""no"""
13152020,Is the ground wet or dry?,"    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Is the ground wet or dry?"")
    return ground_patches[0].simple_query(""Is the ground wet or dry?"")"
19312096,"On which side is the purse, the left or the right?","    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    if purse_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bread""))"
9113663,Do you see either any snow or sand that are white?,"    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one snow or sand patch
    if len(snow_patches) == 0 and len(sand_patches) == 0:
        # If no snow or sand is found, query the image directly
        return image_patch.simple_query(""Do you see either any snow or sand that are white?"")
    for snow_patch in snow_patches:
        if snow_patch.verify_property(""snow"", ""white""):
            return ""yes""
    for sand_patch in sand_patches:
        if sand_patch.verify_property(""sand"", ""white""):
            return ""yes""
    return ""no"""
10243612,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"")"
15599523,Is the dog on the right side?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    if dog_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
101019673,What is the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    return man_patches[0].simple_query(""What is the man wearing?"")"
333047,Do you see any men to the right of the orange tent?,"    image_patch = ImagePatch(image)
    orange_tent_patches = image_patch.find(""orange tent"")
    # Question assumes only one orange tent patch
    if len(orange_tent_patches) == 0:
        # If no orange tent is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for orange_tent_patch in orange_tent_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center > orange_tent_patch.horizontal_center:
                return ""yes""
    return ""no"""
13907796,Is the shirt striped and green?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""striped"") and shirt_patches[0].verify_property(""shirt"", ""green""))"
17207604,Are there either bottles or shelves?,"    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?,"    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    for train_patch in train_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > train_patch.horizontal_center and vehicle_patch.horizontal_center < image_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    return ""no"""
7165131,Is that train engine small or large?,"    image_patch = ImagePatch(image)
    engine_patches = image_patch.find(""train engine"")
    # Question assumes only one engine patch
    if len(engine_patches) == 0:
        # If no engine is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    return engine_patches[0].best_text_match([""small"", ""large""])"
21049362,Where are the railroad tracks?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal looking at?"")
    return animal_patches[0].simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?,"    image_patch = ImagePatch(image)
    children_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(children_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What are the children playing?"")
    return children_patches[0].simple_query(""What are the children playing?"")"
598297,Are there combs or figurines in the picture?,"    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)"
16409127,What is the wire on?,"    image_patch = ImagePatch(image)
    wire_patches = image_patch.find(""wire"")
    # Question assumes only one wire patch
    if len(wire_patches) == 0:
        # If no wire is found, query the image directly
        return image_patch.simple_query(""What is the wire on?"")
    return wire_patches[0].simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?,"    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    # Question assumes only one tunnel patch
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    return tunnel_patches[0].best_text_match([""small"", ""large""])"
17560468,Do you see trains or windows?,"    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return ""no""
    for person_patch in person_patches:
        if person_patch.horizontal_center > man_patch.horizontal_center:
            return person_patch.simple_query(""What is the person near the man wearing?"")
    return ""no"""
12352375,Is the vehicle that is sitting down black or blue?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""sitting down""):
            return vehicle_patch.best_text_match([""black"", ""blue""])
    return ""no"""
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?,"    image_patch = ImagePatch(image)
    metal_trash_can_patches = image_patch.find(""metal trash can"")
    # Question assumes only one metal trash can patch
    if len(metal_trash_can_patches) == 0:
        # If no metal trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    for metal_trash_can_patch in metal_trash_can_patches:
        white_thing_patches = image_patch.find(""white thing"")
        # Question assumes only one white thing patch
        if len(white_thing_patches) == 0:
            # If no white thing is found, query the image directly
            return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
        for white_thing_patch in white_thing_patches:
            if white_thing_patch.horizontal_center > metal_trash_can_patch.horizontal_center:
                return ""right""
    return ""left"""
5800248,Is it outdoors?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
4604785,Does the pizza slice to the left of the pizza have large size?,"    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    for pizza_patch in pizza_patches:
        pizza_slice_patches = image_patch.find(""pizza slice"")
        for pizza_slice_patch in pizza_slice_patches:
            if pizza_slice_patch.horizontal_center < pizza_patch.horizontal_center:
                return bool_to_yesno(pizza_slice_patch.verify_property(""pizza slice"", ""large""))
    return ""no"""
15185845,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
2282232,Where is the snow?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"")"
7889197,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(people_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in people_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return people_patches[0].simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?,"    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)"
154682,Where does the bird stand on?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Where does the bird stand on?"")
    return bird_patches[0].simple_query(""Where does the bird stand on?"")"
10435315,Is the man holding a racket?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    for man_patch in man_patches:
        is_holding_racket = (man_patch.simple_query(""Is the man holding a racket?"") == ""yes"")
        if is_holding_racket:
            return ""yes""
    return ""no"""
121035887,Do the man shorts have white color?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    shorts_patches = man_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    return bool_to_yesno(shorts_patches[0].verify_property(""shorts"", ""white""))"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    cows_patches = image_patch.find(""cows"")
    # Question assumes only one cows patch
    if len(cows_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    for cows_patch in cows_patches:
        if cows_patch.horizontal_center < man_patch.horizontal_center:
            vehicle_patches = image_patch.find(""vehicle"")
            # Question assumes only one vehicle patch
            if len(vehicle_patches) == 0:
                return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
            for vehicle_patch in vehicle_patches:
                if vehicle_patch.horizontal_center < cows_patch.horizontal_center:
                    return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")"
19659501,What is the color of the umbrella the bird is on?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    for bird_patch in bird_patches:
        umbrella_patches = image_patch.find(""umbrella"")
        for umbrella_patch in umbrella_patches:
            if umbrella_patch.horizontal_center > bird_patch.horizontal_center:
                return umbrella_patch.simple_query(""What is the color of the umbrella?"")
    return ""no"""
10595217,Where is the grass?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")"
14803743,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the color so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
19743238,Is the man on the right side?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    if man_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
3965204,Are the mountains covered with snow?,"    image_patch = ImagePatch(image)
    mountains_patches = image_patch.find(""mountains"")
    # Question assumes only one mountains patch
    if len(mountains_patches) == 0:
        # If no mountains are found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    for mountains_patch in mountains_patches:
        if mountains_patch.verify_property(""mountains"", ""snow""):
            return ""yes""
    return ""no"""
141024710,Are there both windows and cars in the picture?,"    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    return shirt_patches[0].simple_query(""What color do you think the shirt is?"")"
3623367,What's he doing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's he doing?"")"
15634950,Where is the giraffe in front of the hay eating from?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    for giraffe_patch in giraffe_patches:
        hay_patches = image_patch.find(""hay"")
        for hay_patch in hay_patches:
            if hay_patch.horizontal_center > giraffe_patch.horizontal_center:
                return giraffe_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    return ""no"""
16644500,What animal is the log pulled by?,"    image_patch = ImagePatch(image)
    log_patches = image_patch.find(""log"")
    # Question assumes only one log patch
    if len(log_patches) == 0:
        # If no log is found, query the image directly
        return image_patch.simple_query(""What animal is the log pulled by?"")
    for log_patch in log_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > log_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is the log pulled by?"")
    return ""no"""
3202108,Which side is the car on?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10137201,Are the papers in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    papers_patches = image_patch.find(""papers"")
    # Question assumes only one papers patch
    if len(papers_patches) == 0:
        # If no papers are found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    papers_patch = papers_patches[0]
    if papers_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    for boy_patch in boy_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
        for person_patch in person_patches:
            if person_patch.horizontal_center < boy_patch.horizontal_center:
                return ""right""
    return ""left"""
8438091,The picture is what color?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")"
4325939,On which side of the photo is the banana?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1425189,What is the name of the brown piece of furniture?,"    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown"")
    # Question assumes only one brown patch
    if len(brown_patches) == 0:
        # If no brown is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    for brown_patch in brown_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > brown_patch.horizontal_center:
                return furniture_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return ""no"""
5119962,Is the man to the right of glasses?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    for man_patch in man_patches:
        glasses_patches = image_patch.find(""glasses"")
        for glasses_patch in glasses_patches:
            if glasses_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    toilet_patch = toilet_patches[0]
    lid_patches = toilet_patch.find(""lid"")
    # Question assumes only one lid patch
    if len(lid_patches) == 0:
        return ""no""
    lid_patch = lid_patches[0]
    return lid_patch.simple_query(""Is the toilet lid down or up?"")"
6522554,Which kind of device does the man hold?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    for device_patch in device_patches:
        if device_patch.horizontal_center > man_patch.horizontal_center:
            return device_patch.simple_query(""Which kind of device does the man hold?"")
    return ""no"""
870619,What is the device to the left of the person that is to the left of the television?,"    image_patch = ImagePatch(image)
    # Find all people and televisions
    people = image_patch.find(""person"")
    if not people:
        return ""no device to the left of a person""
    
    # Find the first person
    person = people[0]
    
    # Find all televisions
    televisions = image_patch.find(""television"")
    if not televisions:
        return ""no device to the left of a person""
    
    # Find the first television
    television = televisions[0]
    
    # Check if the person is to the left of the television
    if person.horizontal_center < television.horizontal_center:
        # Find all devices to the left of the person
        devices = image_patch.find(""device"")
        if not devices:
            return ""no device to the left of a person""
        
        # Check each device to see if it's to the left of the person
        for device in devices:
            if device.horizontal_center < person.horizontal_center:
                return device.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    
    # If no device is found
    return ""no device to the left of a person""
"
12713794,Does the woman to the left of the man wear a necklace?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    for man_patch in man_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center < man_patch.horizontal_center:
                return bool_to_yesno(woman_patch.verify_property(""woman"", ""necklace""))
    return ""no"""
824070,What is the man doing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    return man_patches[0].simple_query(""What is the man doing?"")"
11593733,Which kind of furniture is right to the pillow?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patches[0].horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    return ""no"""
3357821,Does the dog to the left of the other dog look small or large?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If no dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    for dog_patch in dog_patches:
        if dog_patch.horizontal_center < dog_patches[0].horizontal_center:
            return dog_patch.simple_query(""Does the dog look small or large?"")
    return dog_patches[0].simple_query(""Does the dog look small or large?"")"
338026,Are the white candles short or tall?,"    image_patch = ImagePatch(image)
    candles_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candles_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    for candle_patch in candles_patches:
        if candle_patch.simple_query(""Is the candle white?"") == ""yes"":
            if candle_patch.height < 100:
                return ""short""
            else:
                return ""tall""
    return ""tall"""
15346232,What kind of fruit is the girl holding?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    for girl_patch in girl_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if fruit_patch.horizontal_center > girl_patch.horizontal_center:
                return fruit_patch.simple_query(""What kind of fruit is the girl holding?"")
    return ""no fruit"""
13553098,"On which side of the photo is the yellow vehicle, the right or the left?","    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    if yellow_vehicle_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
81030271,Is the gray car to the right or to the left of the cart?,"    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    for gray_car_patch in gray_car_patches:
        cart_patches = image_patch.find(""cart"")
        for cart_patch in cart_patches:
            if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?,"    image_patch = ImagePatch(image)
    chrome_patches = image_patch.find(""chrome canister"")
    # Question assumes only one chrome canister patch
    if len(chrome_patches) == 0:
        # If no chrome canister is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    for chrome_patch in chrome_patches:
        cooking_utensil_patches = image_patch.find(""cooking utensil"")
        for cooking_utensil_patch in cooking_utensil_patches:
            if cooking_utensil_patch.horizontal_center > chrome_patch.horizontal_center:
                return cooking_utensil_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    # If no cooking utensil is to the right of the chrome canister, query the image directly
    return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")"
8240699,What animal is in front of the bird?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the bird?"")
    for bird_patch in bird_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > bird_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is in front of the bird?"")
    return ""no"""
10105081,Is the fence white or green?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].best_text_match([""white"", ""green""])"
13613689,Is there a train or a fence in the picture?,"    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)"
10662521,What is the bottle made of?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    fruit_patches = plate_patches[0].find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        return ""no fruit""
    return fruit_patches[0].simple_query(""Which kind of fruit is on the plate?"")"
16701575,What device is to the right of the cake?,"    image_patch = ImagePatch(image)
    cake_patches = image_patch.find(""cake"")
    # Question assumes only one cake patch
    if len(cake_patches) == 0:
        # If no cake is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    for cake_patch in cake_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center > cake_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the right of the cake?"")
    return ""no"""
6572516,What material is the ceiling?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?,"    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?,"    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    egg_patch = egg_patches[0]
    return egg_patch.simple_query(""What is the color of the egg in the middle of the picture?"")"
14371534,Are the gold pans on the right part or on the left?,"    image_patch = ImagePatch(image)
    gold_pans = image_patch.find(""gold pan"")
    if not gold_pans:
        return ""no""
    image_center = image_patch.horizontal_center
    for pan in gold_pans:
        if pan.horizontal_center > image_center:
            return ""right""
    return ""left""
"
16538076,What does the man that is not tall wear?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if not man_patch.verify_property(""man"", ""tall""):
            return man_patch.simple_query(""What does the man that is not tall wear?"")
    # If no man is not tall, query the image directly
    return image_patch.simple_query(""What does the man that is not tall wear?"")"
5483644,"On which side is the woman, the left or the right?","    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    if woman_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What is the animal in this photograph?"")
    else:
        return animal_patches[0].simple_query(""What is the animal in this photograph?"")
"
1290926,Are there either any life vests or flags?,"    image_patch = ImagePatch(image)
    life_vests = image_patch.find(""life vest"")
    flags = image_patch.find(""flag"")
    return bool_to_yesno(len(life_vests) > 0 or len(flags) > 0)
"
18273738,Do you see a cup?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see a cup?"")"
4211922,Who is sitting on the table?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only two girl patches
    if len(girl_patches) < 2:
        # If no two girls are found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    left_girl_patch = girl_patches[0]
    right_girl_patch = girl_patches[1]
    if left_girl_patch.horizontal_center < right_girl_patch.horizontal_center:
        return left_girl_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    else:
        return right_girl_patch.simple_query(""What is the color of the girl to the left of the other girl?"")"
6599090,What is the person to the right of the car holding?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    for car_patch in car_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > car_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the car holding?"")
    return ""no"""
1174895,What is the vehicle in the parking lot?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    return vehicle_patches[0].simple_query(""What is the vehicle in the parking lot?"")"
14755158,Who is the woman in front of?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Who is the woman in front of?"")
    for woman_patch in woman_patches:
        is_in_front_of = (woman_patch.simple_query(""Is the woman in front of something?"") == ""yes"")
        if is_in_front_of:
            return woman_patch.simple_query(""Who is the woman in front of?"") # crop would include the object so keep it in the query
    # If no woman is in front of something, pick the first woman
    return woman_patches[0].simple_query(""Who is the woman in front of?"")"
18349161,Where does the cow that is standing stand?,"    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    return cow_patches[0].simple_query(""Where does the cow that is standing stand?"")"
7472884,On which side is the tap?,"    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
111051831,On which side of the image is the cabinet?,"    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    if cabinet_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    for bag_patch in bag_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center > bag_patch.horizontal_center:
                return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?,"    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    computer_desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one computer desk patch
    if len(computer_desk_patches) == 0:
        return ""no""
    for computer_desk_patch in computer_desk_patches:
        if computer_desk_patch.verify_property(""computer desk"", ""made of the same material as the artwork""):
            return ""yes""
    return ""no"""
14298125,Who is playing Wii?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")"
9382689,What's the floor made of?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is wearing the dress?"")"
15127108,Does the tea pot above the receipt look short and white?,"    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    # Question assumes only one tea pot patch
    if len(tea_pot_patches) == 0:
        # If no tea pot is found, query the image directly
        return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")
    for tea_pot_patch in tea_pot_patches:
        receipt_patches = image_patch.find(""receipt"")
        for receipt_patch in receipt_patches:
            if receipt_patch.vertical_center > tea_pot_patch.vertical_center:
                return bool_to_yesno(tea_pot_patch.verify_property(""tea pot"", ""short"") and tea_pot_patch.verify_property(""tea pot"", ""white""))
    return ""no"""
15632653,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the color so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
490992,Is the fence on the left side or on the right of the picture?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?,"    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Do the mountains look rocky?"")
    return bool_to_yesno(mountain_patches[0].verify_property(""mountain"", ""rocky""))"
17573742,Is the woman to the right of the camera wearing a coat?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center > image_patch.horizontal_center:
            coat_patches = image_patch.find(""coat"")
            for coat_patch in coat_patches:
                if coat_patch.horizontal_center > woman_patch.horizontal_center:
                    return ""yes""
    return ""no"""
3395780,Is the vehicle to the left of the parking meter covered in rain?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    for vehicle_patch in vehicle_patches:
        parking_meter_patches = image_patch.find(""parking meter"")
        for parking_meter_patch in parking_meter_patches:
            if parking_meter_patch.horizontal_center > vehicle_patch.horizontal_center:
                return bool_to_yesno(vehicle_patch.verify_property(""vehicle"", ""rain""))
    return ""no"""
1542668,Is there a black laptop or desk?,"    image_patch = ImagePatch(image)
    is_black_laptop = image_patch.exists(""black laptop"")
    is_black_desk = image_patch.exists(""black desk"")
    return bool_to_yesno(is_black_laptop or is_black_desk)"
1655442,What type of food is to the right of the waffles that are to the right of the person?,"    image_patch = ImagePatch(image)
    waffles_patches = image_patch.find(""waffles"")
    # Question assumes only one waffles patch
    if len(waffles_patches) == 0:
        # If no waffles are found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for waffles_patch in waffles_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center > waffles_patch.horizontal_center:
                return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    # If no food is to the right of the waffles, query the image directly
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")"
395290,How large is the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"")"
16138893,Are there both motorcycles and cars in this scene?,"    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    car_patches = image_patch.find(""car"")
    return bool_to_yesno(len(motorcycle_patches) > 0 and len(car_patches) > 0)"
1462176,Who is wearing shorts?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, pick the first person
    return person_patches[0].simple_query(""Who is wearing shorts?"")"
171032184,What hangs from the windows?,"    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""What hangs from the windows?"")
    for window_patch in window_patches:
        is_hanging = (window_patch.simple_query(""Is there something hanging from the window?"") == ""yes"")
        if is_hanging:
            return window_patch.simple_query(""What hangs from the windows?"") # crop would include the hanging object so keep it in the query
    # If no object is hanging, pick the first window
    return window_patches[0].simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?,"    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    for giraffe_patch in giraffe_patches:
        tree_patches = image_patch.find(""tree"")
        for tree_patch in tree_patches:
            if tree_patch.horizontal_center < giraffe_patch.horizontal_center:
                return giraffe_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    return ""no"""
8197176,What color is the jacket that the man wears?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    jacket_patches = man_patches[0].find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return ""no""
    return jacket_patches[0].simple_query(""What color is the jacket that the man wears?"")"
3440931,What are that pieces of furniture called?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What are those pieces of furniture called?"")
    return furniture_patches[0].simple_query(""What are those pieces of furniture called?"")"
337924,What is the fruit that is to the left of the chair?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")
    for chair_patch in chair_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if fruit_patch.horizontal_center < chair_patch.horizontal_center:
                return fruit_patch.simple_query(""What is the fruit that is to the left of the chair?"")
    # If no fruit is to the left of the chair, query the image directly
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?,"    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    return bowl_patches[0].simple_query(""What do you think are the bowls on?"")"
18330260,Is the sky above the trees open and clear?,"    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky above the trees open and clear?"")
    for sky_patch in sky_patches:
        trees_patches = image_patch.find(""trees"")
        for trees_patch in trees_patches:
            if sky_patch.vertical_center > trees_patch.vertical_center:
                return bool_to_yesno(sky_patch.verify_property(""sky"", ""open"") and sky_patch.verify_property(""sky"", ""clear""))
    return ""no"""
14119691,Does the squirrel to the right of the stuffed dog look white?,"    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    # Question assumes only one squirrel patch
    if len(squirrel_patches) == 0:
        # If no squirrel is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for squirrel_patch in squirrel_patches:
        stuffed_dog_patches = image_patch.find(""stuffed dog"")
        for stuffed_dog_patch in stuffed_dog_patches:
            if squirrel_patch.horizontal_center > stuffed_dog_patch.horizontal_center:
                return bool_to_yesno(squirrel_patch.verify_property(""squirrel"", ""white""))
    return ""no"""
18437694,Does the clock to the right of the statue have gold color and tiny size?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Does the clock to the right of the statue have gold color and tiny size?"")
    for clock_patch in clock_patches:
        if clock_patch.horizontal_center > image_patch.horizontal_center:
            is_gold = clock_patch.verify_property(""clock"", ""gold"")
            is_tiny = clock_patch.verify_property(""clock"", ""tiny"")
            return bool_to_yesno(is_gold and is_tiny)
    return ""no"""
1252960,Where was the photo taken?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?,"    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is there a frisbee on the grass?"")
    for frisbee_patch in frisbee_patches:
        if frisbee_patch.verify_property(""frisbee"", ""on the grass""):
            return ""yes""
    return ""no"""
13180513,Are there either cakes or containers in the photo?,"    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?,"    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?,"    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    blue_car_patch = blue_car_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    vehicle_patch = vehicle_patches[0]
    police_officer_patches = image_patch.find(""police officer"")
    # Question assumes only one police officer patch
    if len(police_officer_patches) == 0:
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    police_officer_patch = police_officer_patches[0]
    if vehicle_patch.horizontal_center < police_officer_patch.horizontal_center:
        return ""in front of""
    else:
        return ""behind"""
5785831,What is in the glass?,"    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    # Question assumes only one glass patch
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is in the glass?"")
    return glass_patches[0].simple_query(""What is in the glass?"")"
19246241,Are there any brown benches or buckets?,"    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_bucket = image_patch.exists(""bucket"")
    return bool_to_yesno(is_brown_bench or is_bucket)"
3243803,"Where in the picture is the spoon, on the right or on the left?","    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    if spoon_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
6952486,Does the shirt look white?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))"
17401425,Is there a bag that is not brown?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if not bag_patch.verify_property(""bag"", ""brown""):
            return ""yes""
    return ""no"""
481240,"Which kind of furniture is large, the shelf or the cupboard?","    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    
    if len(shelf_patches) == 0 and len(cupboard_patches) == 0:
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    
    if len(shelf_patches) == 0:
        return ""cupboard""
    if len(cupboard_patches) == 0:
        return ""shelf""
    
    shelf_patch = shelf_patches[0]
    cupboard_patch = cupboard_patches[0]
    
    shelf_area = shelf_patch.width * shelf_patch.height
    cupboard_area = cupboard_patch.width * cupboard_patch.height
    
    if shelf_area > cupboard_area:
        return ""shelf""
    else:
        return ""cupboard""
"
8531943,Are there any screens or bags?,"    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)"
1969545,What is she wearing?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?","    image_patch = ImagePatch(image)
    freezer_patches = image_patch.find(""freezer"")
    # Question assumes only one freezer patch
    if len(freezer_patches) == 0:
        # If no freezer is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    ice_maker_patches = image_patch.find(""ice maker"")
    # Question assumes only one ice maker patch
    if len(ice_maker_patches) == 0:
        return ""freezer""
    for freezer_patch in freezer_patches:
        if not freezer_patch.verify_property(""freezer"", ""white""):
            return ""freezer""
    for ice_maker_patch in ice_maker_patches:
        if not ice_maker_patch.verify_property(""ice maker"", ""white""):
            return ""ice maker""
    return ""freezer"""
1051870,Are there chairs or tables that are not green?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    if is_chair or is_table:
        is_green = image_patch.verify_property(""chair"", ""green"") and image_patch.verify_property(""table"", ""green"")
        return bool_to_yesno(not is_green)
    return ""no"""
1366363,Does the taxi have a different color than the truck?,"    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    truck_patches = image_patch.find(""truck"")
    
    if len(taxi_patches) == 0 or len(truck_patches) == 0:
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    
    taxi_color = taxi_patches[0].simple_query(""What color is the taxi?"")
    truck_color = truck_patches[0].simple_query(""What color is the truck?"")
    
    return ""yes"" if taxi_color != truck_color else ""no""
"
5460839,In which part of the image is the dog?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    if dog_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
18899476,What type of vegetable is to the right of the rice that is on the plate?,"    image_patch = ImagePatch(image)
    # Find all rice patches
    rice_patches = image_patch.find(""rice"")
    # If no rice is found, query directly
    if not rice_patches:
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    
    # For each rice patch, find all vegetable patches to the right
    for rice_patch in rice_patches:
        # Find all vegetable patches to the right of the current rice
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center > rice_patch.horizontal_center:
                # Ask the vegetable about its type
                return vegetable_patch.simple_query(""What type of vegetable is this?"")
    
    # If no vegetable is found to the right of any rice, query directly
    return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
"
8606903,What food item is not wide?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""wide""):
            return food_patch.simple_query(""What food item is not wide?"")
    # If no food is not wide, pick the first food
    return food_patches[0].simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?,"    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?,"    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Is there an elephant near the pond?"")
    for elephant_patch in elephant_patches:
        pond_patches = image_patch.find(""pond"")
        for pond_patch in pond_patches:
            if pond_patch.horizontal_center > elephant_patch.horizontal_center:
                return ""yes""
    return ""no"""
1575941,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?,"    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    for floor_patch in floor_patches:
        if floor_patch.simple_query(""Is the floor on top of the desk?"") == ""yes"":
            return floor_patch.simple_query(""What is the color of the floor?"")
    return ""no"""
16654241,Is the TV on the left or on the right?,"    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    # Question assumes only one TV patch
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    if tv_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
18685233,Which kind of vehicle is to the left of the flags?,"    image_patch = ImagePatch(image)
    flags_patches = image_patch.find(""flags"")
    # Question assumes only one flags patch
    if len(flags_patches) == 0:
        # If no flags are found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    for flags_patch in flags_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < flags_patch.horizontal_center:
                return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    return ""no"""
9796068,Are there both a fence and a sheep in the picture?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?,"    image_patch = ImagePatch(image)
    blue_blanket_patches = image_patch.find(""blue blanket"")
    blue_towel_patches = image_patch.find(""blue towel"")
    # Question assumes only one blue blanket or towel patch
    if len(blue_blanket_patches) == 0 and len(blue_towel_patches) == 0:
        # If no blue blanket or towel is found, query the image directly
        return image_patch.simple_query(""Do you see any blue blanket or towel?"")
    if len(blue_blanket_patches) > 0:
        return ""yes""
    if len(blue_towel_patches) > 0:
        return ""yes""
    return ""no"""
1110330,Is the pillow to the left of the frog cream colored or green?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    for pillow_patch in pillow_patches:
        frog_patches = image_patch.find(""frog"")
        for frog_patch in frog_patches:
            if pillow_patch.horizontal_center < frog_patch.horizontal_center:
                return pillow_patch.best_text_match([""cream"", ""green""])
    return ""no"""
511507,Is the antenna on the aircraft?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the antenna on the aircraft?"")"
10464417,"In which part is the tent, the top or the bottom?","    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
10816730,Is the tree in front of the building?,"    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    building_patches = image_patch.find(""building"")
    
    if not tree_patches or not building_patches:
        return ""no""
    
    for tree in tree_patches:
        for building in building_patches:
            if tree.horizontal_center < building.horizontal_center:
                return ""yes""
    
    return ""no""
"
18766115,Who is walking?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is walking?"")
    return person_patches[0].simple_query(""Who is walking?"")"
10625851,Are there either any fruits or plates in the image?,"    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    return bool_to_yesno(person_patches[0].verify_property(""person"", ""coat""))"
4194722,Is the man wearing a helmet?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    return bool_to_yesno(man_patches[0].verify_property(""man"", ""wearing a helmet""))"
414248,"What animal are the women near the ocean riding, a pig or a horse?","    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(women_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")
    for woman_patch in women_patches:
        ocean_patches = image_patch.find(""ocean"")
        # Question assumes only one ocean patch
        if len(ocean_patches) == 0:
            # If no ocean is found, query the image directly
            return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")
        for ocean_patch in ocean_patches:
            if woman_patch.horizontal_center > ocean_patch.horizontal_center:
                return woman_patch.best_text_match([""pig"", ""horse""])
    return ""no"""
683094,Who is wearing the shirt?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")"
12140603,What device is to the left of the headphones?,"    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for headphones_patch in headphones_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < headphones_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the headphones?"")
    return ""no"""
5575209,The flowers are where?,"    image_patch = ImagePatch(image)
    flowers_patches = image_patch.find(""flowers"")
    # Question assumes only one flowers patch
    if len(flowers_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    return flowers_patches[0].simple_query(""The flowers are where?"")"
8773829,Which kind of furniture is made of wood?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wood""):
            return furniture_patch.simple_query(""Which kind of furniture is made of wood?"")
    return ""no"""
12636428,Which kind of animal is black?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""Which kind of animal is black?"") # crop would include the color so keep it in the query
    # If no animal is black, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is black?"")"
1020584,What animals is the car behind of?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What animals is the car behind of?"")
    for car_patch in car_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > car_patch.horizontal_center:
                return animal_patch.simple_query(""What animals is the car behind of?"")
    return ""no"""
11879418,The man is standing on what?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is standing on what?"")
    return man_patches[0].simple_query(""The man is standing on what?"")"
12334288,What device is to the left of the cabinet?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the left of the cabinet?"")"
691610,Is the monitor to the left of a book?,"    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Is the monitor to the left of a book?"")
    for monitor_patch in monitor_patches:
        book_patches = image_patch.find(""book"")
        for book_patch in book_patches:
            if book_patch.horizontal_center > monitor_patch.horizontal_center:
                return ""yes""
    return ""no"""
7552714,Is the color of the jacket black?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return bool_to_yesno(jacket_patches[0].verify_property(""jacket"", ""black""))"
8492422,Is the man to the left of a boy?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    for man_patch in man_patches:
        boy_patches = image_patch.find(""boy"")
        for boy_patch in boy_patches:
            if boy_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
13248061,What type of device is to the left of the keyboard in the bottom of the image?,"    image_patch = ImagePatch(image)
    # Find all keyboards
    keyboard_patches = image_patch.find(""keyboard"")
    # If no keyboards are found, query directly
    if not keyboard_patches:
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    
    # Find all devices
    device_patches = image_patch.find(""device"")
    
    # Check each device against each keyboard
    for device in device_patches:
        for keyboard in keyboard_patches:
            # Check if device is to the left of the keyboard
            if device.horizontal_center < keyboard.horizontal_center:
                # Determine the type of device
                return device.simple_query(""What type of device is this?"")
    
    # If no device found to the left of any keyboard
    return ""no device found""
"
18252454,What is common to the roof and the sky?,"    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    sky_patches = image_patch.find(""sky"")
    
    if len(roof_patches) == 0 or len(sky_patches) == 0:
        return image_patch.simple_query(""What is common to the roof and the sky?"")
    
    roof_patch = roof_patches[0]
    sky_patch = sky_patches[0]
    
    if roof_patch.verify_property(""roof"", ""color"") and sky_patch.verify_property(""sky"", ""color""):
        return ""color""
    elif roof_patch.verify_property(""roof"", ""shape"") and sky_patch.verify_property(""sky"", ""shape""):
        return ""shape""
    else:
        return image_patch.simple_query(""What is common to the roof and the sky?"")
"
14443687,What do the cat and the book have in common?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    
    if len(cat_patches) == 0 or len(book_patches) == 0:
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    
    cat_patch = cat_patches[0]
    book_patch = book_patches[0]
    
    common_property = None
    for property in [""color"", ""shape"", ""size""]:
        if cat_patch.verify_property(""cat"", property) and book_patch.verify_property(""book"", property):
            common_property = property
            break
    
    if common_property:
        return cat_patch.best_text_match([common_property])
    else:
        return image_patch.simple_query(""What do the cat and the book have in common?"")
"
14571335,Who is wearing trousers?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing trousers?"")
    for person_patch in person_patches:
        is_wearing_trousers = (person_patch.simple_query(""Is the person wearing trousers?"") == ""yes"")
        if is_wearing_trousers:
            return person_patch.simple_query(""Who is wearing trousers?"") # crop would include the trousers so keep it in the query
    # If no person is wearing trousers, pick the first person
    return person_patches[0].simple_query(""Who is wearing trousers?"")"
474885,Who wears a cap?,"    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    return cap_patches[0].simple_query(""Who wears a cap?"")"
141013015,"What color is the toilet, brown or white?","    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].best_text_match([""brown"", ""white""])"
5515816,On which side of the image is the fence?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16774696,What is the surfer wearing?,"    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    # Question assumes only one surfer patch
    if len(surfer_patches) == 0:
        # If no surfer is found, query the image directly
        return image_patch.simple_query(""What is the surfer wearing?"")
    return surfer_patches[0].simple_query(""What is the surfer wearing?"")"
13701956,Is there any grass or sand that is not dry?,"    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one patch of grass or sand
    if len(grass_patches) == 0 and len(sand_patches) == 0:
        # If no grass or sand is found, query the image directly
        return image_patch.simple_query(""Is there any grass or sand that is not dry?"")
    for patch in grass_patches + sand_patches:
        if patch.verify_property(""grass"", ""dry"") or patch.verify_property(""sand"", ""dry""):
            return ""no""
    return ""yes"""
11606870,Is there a cow or a zebra in the picture?,"    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?,"    image_patch = ImagePatch(image)
    fire_hydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(fire_hydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    return bool_to_yesno(fire_hydrant_patches[0].verify_property(""fire hydrant"", ""modern""))"
942308,Is the cup empty or full?,"    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    return cup_patches[0].simple_query(""Is the cup empty or full?"")"
15815976,Is the woman wearing a scarf?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    return bool_to_yesno(woman_patches[0].verify_property(""woman"", ""scarf""))"
3193231,Do you see either parking meters or brooms in the picture?,"    image_patch = ImagePatch(image)
    parking_meter_patches = image_patch.find(""parking meter"")
    broom_patches = image_patch.find(""broom"")
    return bool_to_yesno(len(parking_meter_patches) > 0 or len(broom_patches) > 0)"
314218,Is the sign in front of the bridge small and white?,"    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    sign_patch = sign_patches[0]
    is_small = sign_patch.verify_property(""sign"", ""small"")
    is_white = sign_patch.verify_property(""sign"", ""white"")
    return bool_to_yesno(is_small and is_white)"
18130465,Does the umbrella that is not dry look orange and open?,"    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    for umbrella_patch in umbrella_patches:
        if not umbrella_patch.verify_property(""umbrella"", ""dry""):
            is_orange = umbrella_patch.verify_property(""umbrella"", ""orange"")
            is_open = umbrella_patch.verify_property(""umbrella"", ""open"")
            return bool_to_yesno(is_orange and is_open)
    return ""no"""
7920817,What's in the paper?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?,"    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    return bun_patches[0].simple_query(""What is on the bun in the top?"")"
16929928,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    for woman_patch in woman_patches:
        lady_patches = image_patch.find(""lady"")
        for lady_patch in lady_patches:
            if woman_patch.horizontal_center < lady_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
17993299,Is the horse to the left of a car?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    car_patches = image_patch.find(""car"")
    
    if not horse_patches or not car_patches:
        return ""no""
    
    for horse in horse_patches:
        for car in car_patches:
            if horse.horizontal_center < car.horizontal_center:
                return ""yes""
    
    return ""no""
"
8717022,Is the small animal to the left of the vehicle that looks silver?,"    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        # If no small animal is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    for small_animal_patch in small_animal_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.simple_query(""Is the vehicle silver?"") == ""yes"":
                if small_animal_patch.horizontal_center < vehicle_patch.horizontal_center:
                    return ""yes""
    return ""no"""
2998707,Which color is the chair that is on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            return chair_patch.simple_query(""Which color is the chair that is on the right?"")
    return ""no"""
171017786,Do you see any cups to the left of the monitor?,"    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    for monitor_patch in monitor_patches:
        cup_patches = image_patch.find(""cup"")
        for cup_patch in cup_patches:
            if cup_patch.horizontal_center < monitor_patch.horizontal_center:
                return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        return ""no""
    girl_patch = girl_patches[0]
    if girl_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1941568,What animal is in the water?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""in water""):
            return animal_patch.simple_query(""What animal is in the water?"")
    return ""no animal is in the water"""
17577787,Does the man's hair look short and white?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""short"") and man_patch.verify_property(""man"", ""white""))"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?,"    image_patch = ImagePatch(image)
    # Find all bottles
    bottle_patches = image_patch.find(""bottle"")
    # If no bottles are found, query directly
    if not bottle_patches:
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    
    # Find all toilets
    toilet_patches = image_patch.find(""toilet"")
    if not toilet_patches:
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    
    # Check each bottle against each toilet
    for bottle in bottle_patches:
        for toilet in toilet_patches:
            # Check if the toilet is to the right of the bottle
            if toilet.horizontal_center > bottle.horizontal_center:
                # Find all chairs to the left of the bottle
                chair_patches = image_patch.find(""chair"")
                for chair in chair_patches:
                    if chair.horizontal_center < bottle.horizontal_center:
                        return ""yes""
    return ""no""
"
9825336,Which kind of furniture is the mat lying on?,"    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > mat_patches[0].horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    return ""no"""
11222427,Do you see fences or elephants?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?","    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    for furniture_patch in furniture_patches:
        if not furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    # If all furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")"
1152020,Do you see either any plate or tomato that are red?,"    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""red plate"")
    is_red_tomato = image_patch.exists(""red tomato"")
    return bool_to_yesno(is_red_plate or is_red_tomato)"
8961520,Who is surfing?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is surfing?"")"
18106780,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
1892692,What color do you think the bowl that is to the right of the person is?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for person_patch in person_patches:
        bowl_patches = image_patch.find(""bowl"")
        for bowl_patch in bowl_patches:
            if bowl_patch.horizontal_center > person_patch.horizontal_center:
                return bowl_patch.simple_query(""What color is the bowl?"")
    # If no bowl is to the right of the person, query the image directly
    return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")"
6952082,What color is the hair?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"")"
3768067,What color is the pot the statue is to the right of?,"    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    for statue_patch in statue_patches:
        pot_patches = image_patch.find(""pot"")
        for pot_patch in pot_patches:
            if pot_patch.horizontal_center > statue_patch.horizontal_center:
                return pot_patch.simple_query(""What color is the pot?"")
    return ""no"""
17866761,Is the clear glass on the shelf of the table?,"    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    for clear_glass_patch in clear_glass_patches:
        table_patches = image_patch.find(""table"")
        for table_patch in table_patches:
            if clear_glass_patch.vertical_center > table_patch.vertical_center:
                return ""yes""
    return ""no"""
798020,Does the skirt look black or yellow?,"    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].best_text_match([""black"", ""yellow""])"
828981,How old is he?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""How old is he?"")
    return person_patches[0].simple_query(""How old is he?"")"
7236463,Of what color is the book?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""Of what color is the book?"")"
6376684,What color is the car to the left of the train car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    train_car_patches = image_patch.find(""train car"")
    
    if not car_patches or not train_car_patches:
        return ""no""
    
    for car in car_patches:
        for train_car in train_car_patches:
            if car.horizontal_center < train_car.horizontal_center:
                return car.simple_query(""What color is this car?"")
    
    return ""no""
"
786798,Is this a photo of a beach?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a photo of a beach?"")"
19836753,What vehicles are to the left of the fence?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    for fence_patch in fence_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicles are to the left of the fence?"")
    return ""no"""
15284615,Who is playing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        return ""no""
    for remote_control_patch in remote_control_patches:
        if remote_control_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
17746396,What's the boy wearing?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    return boy_patches[0].simple_query(""What's the boy wearing?"")"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?,"    image_patch = ImagePatch(image)
    # Find all bottles
    bottle_patches = image_patch.find(""bottle"")
    # If no bottles are found, query directly
    if not bottle_patches:
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    
    # Check each bottle to see if it's to the right of the tap
    for bottle in bottle_patches:
        # Find all taps
        tap_patches = image_patch.find(""tap"")
        # If no taps are found, query directly
        if not tap_patches:
            return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
        
        # Check each tap to see if it's to the right of the current bottle
        for tap in tap_patches:
            if bottle.horizontal_center > tap.horizontal_center:
                # Find all mugs
                mug_patches = image_patch.find(""mug"")
                # If no mugs are found, query directly
                if not mug_patches:
                    return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
                
                # Check each mug to see if it's to the right of the current bottle
                for mug in mug_patches:
                    if mug.horizontal_center > bottle.horizontal_center:
                        return ""yes""
    
    # If no mugs are found to the right of any bottle
    return ""no""
"
13826837,What color is the door?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    return door_patches[0].simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse""))"
2964690,What is in front of the mountains?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for truck_patch in truck_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
                return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?,"    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    return scarf_patches[0].verify_property(""scarf"", ""long and blue"")"
1189986,Is the man behind the elephant holding a surfboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    for man_patch in man_patches:
        elephant_patches = image_patch.find(""elephant"")
        for elephant_patch in elephant_patches:
            if man_patch.horizontal_center > elephant_patch.horizontal_center:
                surfboard_patches = image_patch.find(""surfboard"")
                # Question assumes only one surfboard patch
                if len(surfboard_patches) == 0:
                    return ""no""
                return bool_to_yesno(surfboard_patches[0].verify_property(""surfboard"", ""holding""))
    return ""no"""
8792466,Which color is the closed window?,"    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    return window_patches[0].simple_query(""Which color is the closed window?"")"
10188423,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(people_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in people_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return people_patches[0].simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    for girl_patch in girl_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center > girl_patch.horizontal_center:
                return vegetable_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    return ""no"""
4929965,Is there a black racket or clock in the picture?,"    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_clock = image_patch.exists(""clock"")
    return bool_to_yesno(is_black_racket or is_clock)"
4782038,What kind of animal is white?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What kind of animal is white?"") # crop would include the color so keep it in the query
    # If no animal is white, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is white?"")"
14658201,Is the sheep that looks white and brown made of plastic?,"    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    for sheep_patch in sheep_patches:
        if sheep_patch.verify_property(""sheep"", ""white"") and sheep_patch.verify_property(""sheep"", ""brown""):
            return bool_to_yesno(sheep_patch.verify_property(""sheep"", ""plastic""))
    return ""no"""
1441865,Do you see any boxes on the table under the grill?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")"
1424926,What is the tag on?,"    image_patch = ImagePatch(image)
    tag_patches = image_patch.find(""tag"")
    # Question assumes only one tag patch
    if len(tag_patches) == 0:
        # If no tag is found, query the image directly
        return image_patch.simple_query(""What is the tag on?"")
    return tag_patches[0].simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?,"    image_patch = ImagePatch(image)
    # Find all people and laptops
    people = image_patch.find(""person"")
    laptops = image_patch.find(""laptop"")
    
    # Check if there are people and laptops
    if not people or not laptops:
        return ""no""
    
    # Find the person working on a laptop
    for person in people:
        for laptop in laptops:
            if person.simple_query(""Is the person working on the laptop?"") == ""yes"":
                # Find all furniture pieces
                furniture = image_patch.find(""furniture"")
                if not furniture:
                    return ""no""
                
                # Check each furniture piece to see if it's to the right of the person
                for furniture_patch in furniture:
                    if furniture_patch.horizontal_center > person.horizontal_center:
                        return furniture_patch.simple_query(""What is the piece of furniture?"")
    
    # If no furniture found to the right
    return ""no""
"
3635257,Is there any freezer in this photo?,"    image_patch = ImagePatch(image)
    freezer_patches = image_patch.find(""freezer"")
    return bool_to_yesno(len(freezer_patches) > 0)"
8821026,Are there either any bags or chairs?,"    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?,"    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    driver_patches = image_patch.find(""driver"")
    # Question assumes only one driver patch
    if len(driver_patches) == 0:
        # If no driver is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    for driver_patch in driver_patches:
        for bus_patch in bus_patches:
            if driver_patch.horizontal_center > bus_patch.horizontal_center:
                return bus_patch.simple_query(""In what vehicle is the bus driver?"")
    return driver_patches[0].simple_query(""In what vehicle is the bus driver?"")"
17204662,What is that man in front of?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is that man in front of?"")
    man_patch = man_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return ""no""
    for object_patch in object_patches:
        if object_patch.horizontal_center > man_patch.horizontal_center:
            return object_patch.simple_query(""What is that man in front of?"")
    return ""no"""
380866,Are there any girls or radios?,"    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The girl is sitting on what?"")
    for girl_patch in girl_patches:
        is_sitting = (girl_patch.simple_query(""Is the girl sitting?"") == ""yes"")
        if is_sitting:
            return girl_patch.simple_query(""The girl is sitting on what?"") # crop would include the object so keep it in the query
    # If no girl is sitting, pick the first girl
    return girl_patches[0].simple_query(""The girl is sitting on what?"")"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for lamp_patch in lamp_patches:
        pillow_patches = image_patch.find(""pillow"")
        # Question assumes only one pillow patch
        if len(pillow_patches) == 0:
            # If no pillow is found, query the image directly
            return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
        pillow_patch = pillow_patches[0]
        if pillow_patch.horizontal_center == image_patch.horizontal_center:
            if lamp_patch.horizontal_center < pillow_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
    return ""left"""
16545552,What color do you think is the vehicle the girl is washing?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    return vehicle_patches[0].simple_query(""What color is the vehicle?"")"
16719872,Are there motorcycles to the left of the man who is wearing a hat?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        return ""no""
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    person_patch = person_patches[0]
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        return ""no""
    for garbage_can_patch in garbage_can_patches:
        if garbage_can_patch.horizontal_center > person_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
13711589,What do the truck and the street sign have in common?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    street_sign_patches = image_patch.find(""street sign"")
    
    if len(truck_patches) == 0 or len(street_sign_patches) == 0:
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    
    truck_patch = truck_patches[0]
    street_sign_patch = street_sign_patches[0]
    
    if truck_patch.verify_property(""truck"", ""on road"") and street_sign_patch.verify_property(""street sign"", ""on road""):
        return ""both are on the road""
    elif truck_patch.verify_property(""truck"", ""on road"") and street_sign_patch.verify_property(""street sign"", ""in the air""):
        return ""both are on the road and in the air""
    else:
        return ""nothing in common""
"
10227573,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(people_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in people_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return people_patches[0].simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is the man leading?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""no""
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the man leading?"")
    return ""no"""
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?,"    image_patch = ImagePatch(image)
    # Find all curtains and dressers
    curtains = image_patch.find(""curtain"")
    dressers = image_patch.find(""dresser"")
    
    # Check each dresser to see if it's in front of a curtain
    for dresser in dressers:
        # Find all curtains that are to the right of the dresser
        right_curtains = [c for c in curtains if c.horizontal_center > dresser.horizontal_center]
        if not right_curtains:
            continue  # No curtain to the right, move to next dresser
        
        # Check each right curtain to see if there's a piece of furniture in front of it
        for curtain in right_curtains:
            # Find all furniture pieces in the area
            furniture = image_patch.find(""furniture"")
            for furniture_patch in furniture:
                # Check if the furniture is in front of the curtain
                if (furniture_patch.horizontal_center > curtain.horizontal_center and
                    furniture_patch.vertical_center > curtain.vertical_center):
                    # Found a piece of furniture in front of the curtain
                    return furniture_patch.simple_query(""What is this?"")
    
    # If no furniture found in front of a curtain, query the image directly
    return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
"
7190226,Does the puddle look large?,"    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    return bool_to_yesno(puddle_patches[0].verify_property(""puddle"", ""large""))"
11675152,Who throws the frisbee?,"    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Who throws the frisbee?"")
    return frisbee_patches[0].simple_query(""Who throws the frisbee?"")"
8723676,Which kind of animal is the water on?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is the water on?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""water""):
            return animal_patch.simple_query(""Which kind of animal is the water on?"")
    return ""no"""
61046657,Do you think that traffic light is tall?,"    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    # Question assumes only one traffic light patch
    if len(traffic_light_patches) == 0:
        # If no traffic light is found, query the image directly
        return image_patch.simple_query(""Do you think that traffic light is tall?"")
    return bool_to_yesno(traffic_light_patches[0].verify_property(""traffic light"", ""tall""))"
9581034,On which side is the wine glass?,"    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    if wine_glass_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        for pizza_patch in pizza_patches:
            if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
                return ""right""
    return ""left"""
18535266,Is the face mask made of the same material as the mask?,"    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    # Question assumes only one face mask patch
    if len(face_mask_patches) == 0:
        # If no face mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    return face_mask_patches[0].verify_property(""face mask"", ""made of the same material as the mask"")"
11254215,What is the tan item of furniture?,"    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What is the tan item of furniture?"")
    tan_patch = tan_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return ""no""
    furniture_patch = furniture_patches[0]
    if tan_patch.horizontal_center > furniture_patch.horizontal_center:
        return ""yes""
    return ""no"""
1852010,How is the device to the right of the device on the desk called?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    for device_patch in device_patches:
        device_on_desk_patches = image_patch.find(""device on desk"")
        for device_on_desk_patch in device_on_desk_patches:
            if device_on_desk_patch.horizontal_center > device_patch.horizontal_center:
                return device_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    return ""no"""
1587534,Is the device on the floor black and large?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    device_patch = device_patches[0]
    is_black = device_patch.verify_property(""device"", ""black"")
    is_large = device_patch.verify_property(""device"", ""large"")
    is_on_floor = device_patch.verify_property(""device"", ""on the floor"")
    return bool_to_yesno(is_black and is_large and is_on_floor)"
8470757,Are there any surfboards?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))"
11273949,Is the shirt white?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))"
7475238,What's the airplane in front of?,"    image_patch = ImagePatch(image)
    airplane_patches = image_patch.find(""airplane"")
    # Question assumes only one airplane patch
    if len(airplane_patches) == 0:
        # If no airplane is found, query the image directly
        return image_patch.simple_query(""What's the airplane in front of?"")
    return airplane_patches[0].simple_query(""What's in front of the airplane?"")"
16685900,Where does the horse to the right of the hose run?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        hose_patches = image_patch.find(""hose"")
        for hose_patch in hose_patches:
            if hose_patch.horizontal_center > horse_patch.horizontal_center:
                return horse_patch.simple_query(""Where does the horse to the right of the hose run?"")
    return ""no"""
3932624,Are there either any gray chairs or laptops?,"    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water brown or blue?"")
    return water_patches[0].best_text_match([""brown"", ""blue""])"
9256263,Which kind of furniture is brown?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""brown""):
            return furniture_patch.simple_query(""Which kind of furniture is brown?"") # crop would include the furniture so keep it in the query
    # If no furniture is brown, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is brown?"")"
18719769,Is the man wearing glasses?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    return bool_to_yesno(man_patches[0].verify_property(""man"", ""glasses""))"
18342439,What animal is white?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What animal is white?"") # crop would include the color so keep it in the query
    # If no animal is white, pick the first animal
    return animal_patches[0].simple_query(""What animal is white?"")"
8665725,Who is wearing a coat?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(people_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a coat?"")
    for person_patch in people_patches:
        is_wearing_coat = (person_patch.simple_query(""Is the person wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return person_patch.simple_query(""Who is wearing a coat?"") # crop would include the coat so keep it in the query
    # If no person is wearing a coat, pick the first person
    return people_patches[0].simple_query(""Who is wearing a coat?"")"
5440407,What vehicle isn't black?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicle_patches:
        if not vehicle_patch.verify_property(""vehicle"", ""black""):
            return vehicle_patch.simple_query(""What vehicle isn't black?"") # crop would include the color so keep it in the query
    # If no vehicle isn't black, pick the first vehicle
    return vehicle_patches[0].simple_query(""What vehicle isn't black?"")"
4104707,On which side of the picture is the oven?,"    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3126763,What is common to the logo and the letter?,"    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    letter_patches = image_patch.find(""letter"")
    
    # Check if both exist
    if not logo_patches or not letter_patches:
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    
    # Check if any common property exists
    common_property = None
    for logo in logo_patches:
        for letter in letter_patches:
            if logo.verify_property(""logo"", ""color"") == letter.verify_property(""letter"", ""color""):
                common_property = ""color""
                break
            if logo.verify_property(""logo"", ""shape"") == letter.verify_property(""letter"", ""shape""):
                common_property = ""shape""
                break
    
    if common_property:
        return common_property
    else:
        return image_patch.simple_query(""What is common to the logo and the letter?"")
"
18640925,What animal is in the water the man is walking through?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""no""
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in the water the man is walking through?"")
    return ""no"""
125488,What is the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    return man_patches[0].simple_query(""What is the man wearing?"")"
5925435,What is the sidewalk made of?,"    image_patch = ImagePatch(image)
    sidewalk_patches = image_patch.find(""sidewalk"")
    # Question assumes only one sidewalk patch
    if len(sidewalk_patches) == 0:
        # If no sidewalk is found, query the image directly
        return image_patch.simple_query(""What is the sidewalk made of?"")
    return sidewalk_patches[0].simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].simple_query(""What is the pattern of the coat?"")"
4819547,What kind of furniture is white?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What kind of furniture is white?"") # crop would include the furniture so keep it in the query
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is white?"")"
14263174,What color do you think the chair that is to the right of the other chair is?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only two chair patches
    if len(chair_patches) < 2:
        # If no two chairs are found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    right_chair_patch = None
    left_chair_patch = None
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            right_chair_patch = chair_patch
        else:
            left_chair_patch = chair_patch
    if right_chair_patch is None or left_chair_patch is None:
        # If no two chairs are found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    return right_chair_patch.simple_query(""What color is the chair?"")"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return ""no""
    person_patch = person_patches[0]
    green_train_patches = image_patch.find(""green train"")
    # Question assumes only one green train patch
    if len(green_train_patches) == 0:
        return ""no""
    green_train_patch = green_train_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        return ""no""
    fence_patch = fence_patches[0]
    if man_patch.horizontal_center < person_patch.horizontal_center and person_patch.horizontal_center < green_train_patch.horizontal_center and green_train_patch.horizontal_center < fence_patch.horizontal_center:
        return ""yes""
    return ""no"""
9239936,Do the cows near the trees have white color?,"    image_patch = ImagePatch(image)
    cows_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cows_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    for cow_patch in cows_patches:
        if cow_patch.verify_property(""cow"", ""near trees""):
            return bool_to_yesno(cow_patch.verify_property(""cow"", ""white""))
    return ""no"""
1885178,"In which part of the image is the remote control, the bottom or the top?","    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    if remote_control_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12341631,Which color is the bag in the top part?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    if bag_patches[0].vertical_center < image_patch.vertical_center:
        return bag_patches[0].simple_query(""Which color is the bag in the top part?"")
    else:
        return bag_patches[0].simple_query(""Which color is the bag in the bottom part?"")"
5532909,"What is the weather like, cloudless or maybe rainy?","    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")"
2618222,What is connected to the open laptop?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is connected to the open laptop?"")"
3252220,Of which color is the shirt the man wears?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no""
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""Of which color is the shirt the man wears?"")"
8947801,What is in the vase?,"    image_patch = ImagePatch(image)
    vase_patches = image_patch.find(""vase"")
    # Question assumes only one vase patch
    if len(vase_patches) == 0:
        # If no vase is found, query the image directly
        return image_patch.simple_query(""What is in the vase?"")
    return vase_patches[0].simple_query(""What is in the vase?"")"
10841562,Is the color of the pants the same as the shorts?,"    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        # If no shorts are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    pants_color = pants_patches[0].simple_query(""What is the color of the pants?"")
    shorts_color = shorts_patches[0].simple_query(""What is the color of the shorts?"")
    return bool_to_yesno(pants_color == shorts_color)"
15511838,What kind of furniture is to the left of the bucket?,"    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    for bucket_patch in bucket_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    # If no furniture is to the left of the bucket, query the image directly
    return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")"
14495306,Is there any racket to the right of the person that the woman is to the left of?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    for woman_patch in woman_patches:
        racket_patches = image_patch.find(""racket"")
        for racket_patch in racket_patches:
            if racket_patch.horizontal_center > woman_patch.horizontal_center:
                return ""yes""
    return ""no"""
14841932,Do the tiles have square shape and black color?,"    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    # Question assumes only one tile patch
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    for tile_patch in tile_patches:
        if tile_patch.verify_property(""tile"", ""square"") and tile_patch.verify_property(""tile"", ""black""):
            return ""yes""
    return ""no"""
41029381,What is the vehicle that is the same color as the shirt called?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    shirt_color = shirt_patches[0].simple_query(""What color is the shirt?"")
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""What color is the vehicle?"") == shirt_color:
            return vehicle_patch.simple_query(""What is the vehicle called?"")
    return ""no"""
161027428,Are there both windows and doors in the image?,"    image_patch = ImagePatch(image)
    windows = image_patch.find(""window"")
    doors = image_patch.find(""door"")
    return bool_to_yesno(len(windows) > 0 and len(doors) > 0)
"
16478246,Does the pillow to the right of the man have green color and large size?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        return ""no""
    pillow_patch = pillow_patches[0]
    if pillow_patch.horizontal_center > man_patch.horizontal_center:
        return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""))
    return ""no"""
9450308,Is the happy person wearing a hat?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    for person_patch in person_patches:
        is_happy = person_patch.simple_query(""Is the person happy?"") == ""yes""
        is_wearing_hat = person_patch.simple_query(""Is the person wearing a hat?"") == ""yes""
        if is_happy and is_wearing_hat:
            return ""yes""
    return ""no"""
11850389,What place is this?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
17250452,What kind of appliance is on the right of the drawer?,"    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    for drawer_patch in drawer_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center > drawer_patch.horizontal_center:
                return appliance_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    return ""no"""
14857961,Is the lady to the right of a woman?,"    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    for lady_patch in lady_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center > lady_patch.horizontal_center:
                return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?,"    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    pan_patch = pan_patches[0]
    cooking_utensils_patches = image_patch.find(""cooking utensils"")
    # Question assumes only one cooking utensils patch
    if len(cooking_utensils_patches) == 0:
        return ""no""
    for cooking_utensils_patch in cooking_utensils_patches:
        if cooking_utensils_patch.horizontal_center < pan_patch.horizontal_center:
            return cooking_utensils_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return ""no"""
9745131,Which color is the truck that is to the left of the lamps?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    for truck_patch in truck_patches:
        lamps_patches = image_patch.find(""lamps"")
        for lamps_patch in lamps_patches:
            if lamps_patch.horizontal_center > truck_patch.horizontal_center:
                return truck_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    return ""no"""
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?,"    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    motorcycle_patch = motorcycle_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return ""no""
    for bird_patch in bird_patches:
        if bird_patch.verify_property(""bird"", ""color"") == motorcycle_patch.verify_property(""motorcycle"", ""color""):
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    return ""no"""
867818,Is the man on the skateboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the skateboard?"")
    for man_patch in man_patches:
        if man_patch.verify_property(""man"", ""skateboard""):
            return ""yes""
    return ""no"""
13896221,What is on the table?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
1964517,What is the food that is above the white paper?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is above the white paper?"")
    for food_patch in food_patches:
        if food_patch.vertical_center > image_patch.vertical_center:
            return food_patch.simple_query(""What is the food that is above the white paper?"") # crop would include the white paper so keep it in the query
    # If no food is above the white paper, pick the first food
    return food_patches[0].simple_query(""What is the food that is above the white paper?"")"
15705231,Is the shelf to the left of a cabinet?,"    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > shelf_patch.horizontal_center:
                return ""yes""
    return ""no"""
15693846,Is the motorcycle parked on the grass?,"    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Is the motorcycle parked on the grass?"")
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.verify_property(""motorcycle"", ""parked""):
            return ""yes""
    return ""no"""
13872995,Who is jumping?,"    image_patch = ImagePatch(image)
    jumping_patches = image_patch.find(""jumping"")
    # Question assumes only one jumping patch
    if len(jumping_patches) == 0:
        # If no jumping is found, query the image directly
        return image_patch.simple_query(""Who is jumping?"")
    return jumping_patches[0].simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    cat_patches = image_patch.find(""cat"")
    
    if len(dog_patches) > 0 and len(cat_patches) > 0:
        return ""neither""
    elif len(dog_patches) > 0:
        return ""dog""
    elif len(cat_patches) > 0:
        return ""cat""
    else:
        return ""neither""
"
12584623,What is the person with the bag wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    for person_patch in person_patches:
        bag_patches = image_patch.find(""bag"")
        for bag_patch in bag_patches:
            if bag_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person with the bag wearing?"")
    return person_patches[0].simple_query(""What is the person with the bag wearing?"")"
7202064,"What is this, a bus or a truck?","    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    truck_patches = image_patch.find(""truck"")
    if len(bus_patches) > 0 and len(truck_patches) > 0:
        return image_patch.simple_query(""What is this, a bus or a truck?"")
    elif len(bus_patches) > 0:
        return ""bus""
    elif len(truck_patches) > 0:
        return ""truck""
    else:
        return image_patch.simple_query(""What is this, a bus or a truck?"")
"
16542208,Do you see either any beds or blankets there?,"    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)"
11700224,Do you see both lettuce and salad?,"    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    salad_patches = image_patch.find(""salad"")
    return bool_to_yesno(len(lettuce_patches) > 0 and len(salad_patches) > 0)"
1067136,Is the ball on the tree?,"    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball on the tree?"")
    for ball_patch in ball_patches:
        tree_patches = image_patch.find(""tree"")
        for tree_patch in tree_patches:
            if tree_patch.vertical_center > ball_patch.vertical_center:
                return ""yes""
    return ""no"""
364079,What kind of furniture is to the right of the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for blanket_patch in blanket_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    return ""no"""
2533062,How large is the ground the zebra is standing on?,"    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    zebra_patch = zebra_patches[0]
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        return ""no""
    ground_patch = ground_patches[0]
    if ground_patch.left < zebra_patch.left and ground_patch.right > zebra_patch.right and ground_patch.lower < zebra_patch.lower and ground_patch.upper > zebra_patch.upper:
        return ""large""
    return ""small"""
19683710,The clock is inside what?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""The clock is inside what?"")
    return clock_patches[0].simple_query(""The clock is inside what?"")"
15674863,Is the racket in the top part?,"    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            skateboard_patches = image_patch.find(""skateboard"")
            for skateboard_patch in skateboard_patches:
                if skateboard_patch.horizontal_center > person_patch.horizontal_center:
                    return ""yes""
    return ""no"""
2292637,What is the color of the shirt that the passenger is wearing?,"    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    for passenger_patch in passenger_patches:
        shirt_patches = image_patch.find(""shirt"")
        for shirt_patch in shirt_patches:
            if shirt_patch.horizontal_center > passenger_patch.horizontal_center:
                return shirt_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    # If no shirt is found, query the image directly
    return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")"
9175259,What is the chair made of?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?,"    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    carrot_patch = carrot_patches[0]
    if carrot_patch.vertical_center > image_patch.vertical_center:
        return ""big""
    else:
        return ""small"""
1638685,What is the name of the vegetable that is on the yellow food?,"    image_patch = ImagePatch(image)
    yellow_patches = image_patch.find(""yellow"")
    # Question assumes only one yellow patch
    if len(yellow_patches) == 0:
        # If no yellow is found, query the image directly
        return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    for yellow_patch in yellow_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center > yellow_patch.horizontal_center:
                return vegetable_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    # If no vegetable is on the yellow, pick the first yellow
    return yellow_patches[0].simple_query(""What is the name of the vegetable that is on the yellow food?"")"
5828256,Is the clock on a tower?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock on a tower?"")
    for clock_patch in clock_patches:
        tower_patches = image_patch.find(""tower"")
        for tower_patch in tower_patches:
            if tower_patch.vertical_center > clock_patch.vertical_center:
                return ""yes""
    return ""no"""
18937563,What kind of animal is orange?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is orange?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""orange""):
            return animal_patch.simple_query(""What kind of animal is orange?"") # crop would include the color so keep it in the query
    # If no animal is orange, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is orange?"")"
14360113,What is the smiling woman holding?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    for woman_patch in woman_patches:
        if woman_patch.verify_property(""woman"", ""smiling""):
            return woman_patch.simple_query(""What is the smiling woman holding?"") # crop would include the object so keep it in the query
    # If no woman is smiling, pick the first woman
    return woman_patches[0].simple_query(""What is the smiling woman holding?"")"
593188,Is the hair short?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    return bool_to_yesno(hair_patches[0].verify_property(""hair"", ""short""))"
10824666,Are there ladies to the left of the man that is wearing shorts?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        return ""no""
    for lady_patch in lady_patches:
        if lady_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?,"    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    for gray_car_patch in gray_car_patches:
        garbage_bin_patches = image_patch.find(""garbage bin"")
        for garbage_bin_patch in garbage_bin_patches:
            if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
7574939,Is there any table or plate that is white?,"    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one table or plate patch
    if len(table_patches) == 0 and len(plate_patches) == 0:
        # If no table or plate is found, query the image directly
        return image_patch.simple_query(""Is there any table or plate that is white?"")
    for table_patch in table_patches:
        if table_patch.verify_property(""table"", ""white""):
            return ""yes""
    for plate_patch in plate_patches:
        if plate_patch.verify_property(""plate"", ""white""):
            return ""yes""
    return ""no"""
12252101,Is it outdoors?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
6943442,What cooking utensil is on the oven?,"    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""What cooking utensil is on the oven?"")
    for oven_patch in oven_patches:
        cooking_utensil_patches = image_patch.find(""cooking utensil"")
        for cooking_utensil_patch in cooking_utensil_patches:
            if cooking_utensil_patch.horizontal_center > oven_patch.horizontal_center:
                return cooking_utensil_patch.simple_query(""What cooking utensil is on the oven?"")
    return ""no"""
2977077,The propeller that looks red is what pattern?,"    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    for propeller_patch in propeller_patches:
        if propeller_patch.verify_property(""propeller"", ""red""):
            return propeller_patch.simple_query(""The propeller that looks red is what pattern?"")
    return ""no"""
11190306,Which kind of animal is to the left of the train?,"    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the left of the train?"")
    for train_patch in train_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center < train_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is to the left of the train?"")
    return ""no"""
5107190,Do you see both an airplane and a truck?,"    image_patch = ImagePatch(image)
    airplane_patches = image_patch.find(""airplane"")
    truck_patches = image_patch.find(""truck"")
    return bool_to_yesno(len(airplane_patches) > 0 and len(truck_patches) > 0)"
4360982,How old is the child?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"")"
12536783,What kind of animal is in front of the pole?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
18655269,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it indoors?"")"
1705569,Does the pot on top of the stove look black?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    stove_patches = image_patch.find(""stove"")
    # Question assumes only one stove patch
    if len(stove_patches) == 0:
        # If no stove is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    for pot_patch in pot_patches:
        for stove_patch in stove_patches:
            if pot_patch.vertical_center > stove_patch.vertical_center:
                return bool_to_yesno(pot_patch.verify_property(""pot"", ""black""))
    return ""no"""
1028569,Are there both a cyclist and a helmet in the photo?,"    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)"
13954115,Are there any men to the left of the person in the crowd?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    for person_patch in person_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center < person_patch.horizontal_center:
                return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?,"    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    for keyboard_patch in keyboard_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < keyboard_patch.horizontal_center:
                return device_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    return ""no"""
1017626,Who is inside the train?,"    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Who is inside the train?"")
    for train_patch in train_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > train_patch.horizontal_center:
                return person_patch.simple_query(""Who is inside the train?"")
    return ""no one"""
7650014,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    car_patches = image_patch.find(""car"")
    
    if not person_patches or not car_patches:
        return image_patch.simple_query(""What is the person to the left of the car doing?"")
    
    for person in person_patches:
        for car in car_patches:
            if person.horizontal_center < car.horizontal_center:
                return person.simple_query(""What is the person to the left of the car doing?"")
    
    return ""no""
"
1310985,Is the yellow vehicle to the left of a lamp?,"    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        lamp_patches = image_patch.find(""lamp"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center > yellow_vehicle_patch.horizontal_center:
                return ""yes""
    return ""no"""
646935,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
9495263,Is the woman to the left or to the right of the man that wears a cap?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
946016,Do you think the animal that is sitting-down is small or large?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""sitting-down""):
            return animal_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    # If no animal is sitting-down, query the image directly
    return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")"
9617920,Do the garbage can and the pan have the same color?,"    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    pan_patches = image_patch.find(""pan"")
    
    if len(garbage_can_patches) == 0 or len(pan_patches) == 0:
        return ""no""
    
    garbage_can_color = garbage_can_patches[0].simple_query(""What color is the garbage can?"")
    pan_color = pan_patches[0].simple_query(""What color is the pan?"")
    
    return ""yes"" if garbage_can_color == pan_color else ""no""
"
3578781,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the color so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
4695656,What is the lamp on?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the lamp on?"")"
13696926,The homes that are to the left of the people have what color?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    for people_patch in people_patches:
        home_patches = image_patch.find(""home"")
        for home_patch in home_patches:
            if home_patch.horizontal_center < people_patch.horizontal_center:
                return home_patch.simple_query(""What color is the home?"")
    return ""no"""
16946079,What is on the wall?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    if napkin_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
11513897,What appliance is the label on?,"    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    # Question assumes only one label patch
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    for label_patch in label_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if label_patch.horizontal_center > appliance_patch.horizontal_center:
                return appliance_patch.simple_query(""What appliance is the label on?"")
    return ""no"""
8240644,What is the color of the bird's tail?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    return bird_patches[0].simple_query(""What is the color of the bird's tail?"")"
5245080,Is he to the right or to the left of the camera?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    man_patch = man_patches[0]
    camera_patches = image_patch.find(""camera"")
    # Question assumes only one camera patch
    if len(camera_patches) == 0:
        return ""no""
    camera_patch = camera_patches[0]
    if man_patch.horizontal_center > camera_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17800894,Are there both a window and a door in the picture?,"    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    door_patches = image_patch.find(""door"")
    return bool_to_yesno(len(window_patches) > 0 and len(door_patches) > 0)"
191027873,Where is the snowboard?,"    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Where is the snowboard?"")
    return snowboard_patches[0].simple_query(""Where is the snowboard?"")"
1964079,Are the box and the paper the same color?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    paper_patches = image_patch.find(""paper"")
    
    if len(box_patches) == 0 or len(paper_patches) == 0:
        return ""no""
    
    box_color = box_patches[0].simple_query(""What color is the box?"")
    paper_color = paper_patches[0].simple_query(""What color is the paper?"")
    
    return ""yes"" if box_color == paper_color else ""no""
"
