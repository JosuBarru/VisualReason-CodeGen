sample_id,query,generated_code
13151559,Is the large hair both white and soft?,"
    image_patch = ImagePatch(image)
    large_hair_patches = image_patch.find(""hair"")
    # Question assumes only one large hair patch
    if len(large_hair_patches) == 0:
        # If no large hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    large_hair_patch = large_hair_patches[0]
    is_white = large_hair_patch.verify_property(""hair"", ""white"")
    is_soft = large_hair_patch.verify_property(""hair"", ""soft"")
    return bool_to_yesno(is_white and is_soft)"
18370956,Who is eating the cupcake?,"
    image_patch = ImagePatch(image)
    cupcake_patches = image_patch.find(""cupcake"")
    # Question assumes only one cupcake patch
    if len(cupcake_patches) == 0:
        # If no cupcake is found, query the image directly
        return image_patch.simple_query(""Who is eating the cupcake?"")
    for cupcake_patch in cupcake_patches:
        eater_patches = image_patch.find(""eater"")
        for eater_patch in eater_patches:
            if cupcake_patch.horizontal_center > eater_patch.horizontal_center:
                return eater_patch.simple_query(""Who is eating the cupcake?"")
    return image_patch.simple_query(""Who is eating the cupcake?"")"
6436809,What is the guy wearing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the guy wearing?"")
    return man_patches[0].simple_query(""What is the guy wearing?"")"
117037,Which kind of food is to the right of the cabbage?,"
    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    # Question assumes only one cabbage patch
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    for cabbage_patch in cabbage_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center > cabbage_patch.horizontal_center:
                return food_patch.simple_query(""What kind of food is?"") # crop would include the food so keep it in the query
    # If no food is to the right of the cabbage, pick the first food
    return food_patches[0].simple_query(""What kind of food is?"")"
758936,Who wears the cap?,"
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    return cap_patches[0].simple_query(""Who wears the cap?"")"
111046440,Who is pointing?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is pointing?"")"
15804389,Is the woman's hair short or long?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        return ""long""
    for hair_patch in hair_patches:
        if hair_patch.horizontal_center > woman_patch.horizontal_center:
            return ""short""
    return ""long"""
11445636,The women are watching who?,"
    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(women_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""The women are watching who?"")
    for woman_patch in women_patches:
        watching_patches = woman_patch.find(""watching"")
        # Question assumes only one watching patch
        if len(watching_patches) == 0:
            return ""them""
        return watching_patches[0].simple_query(""Who are the women watching?"")"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?,"
    image_patch = ImagePatch(image)
    dishwasher_patches = image_patch.find(""dishwasher"")
    # Question assumes only one dishwasher patch
    if len(dishwasher_patches) == 0:
        # If no dishwasher is found, query the image directly
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    for dishwasher_patch in dishwasher_patches:
        gas_stove_patches = image_patch.find(""gas stove"")
        # Question assumes only one gas stove patch
        if len(gas_stove_patches) == 0:
            # If no gas stove is found, query the image directly
            return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
        for gas_stove_patch in gas_stove_patches:
            if dishwasher_patch.horizontal_center > gas_stove_patch.horizontal_center:
                return bool_to_yesno(dishwasher_patch.verify_property(""dishwasher"", ""white"") and gas_"
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?,"
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    baby_patch = baby_patches[0]
    bed_sheet_patches = image_patch.find(""bed sheet"")
    # Question assumes only one bed sheet patch
    if len(bed_sheet_patches) == 0:
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    for bed_sheet_patch in bed_sheet_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.verify_property(""furniture"", ""same color as bed sheet"") and furniture_patch.horizontal_center > baby_patch.horizontal_center:
                return furniture_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet"
758958,Is there either any red pillow or snowboard?,"
    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)"
143816,Which place is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?,"
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    # Question assumes only one knife patch
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Which side is the knife on?"")
    return ""left"" if knife_patches[0].horizontal_center < image_patch.horizontal_center else ""right"""
17829769,What is the computer mouse in front of?,"
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    # Question assumes only one mouse patch
    if len(mouse_patches) == 0:
        # If no mouse is found, query the image directly
        return image_patch.simple_query(""What is the computer mouse in front of?"")
    mouse_patch = mouse_patches[0]
    objects_in_front_of_mouse = image_patch.find(""object"")
    for object_patch in objects_in_front_of_mouse:
        if object_patch.horizontal_center > mouse_patch.horizontal_center:
            return object_patch.simple_query(""What is the computer mouse in front of?"") # crop would include the object so keep it in the query
    # If no object is in front of the mouse, pick the first object
    return objects_in_front_of_mouse[0].simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?,"
    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    # Question assumes only one toddler patch
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    toddler_patch = toddler_patches[0]
    object_patches = image_patch.find(""object"")
    for object_patch in object_patches:
        if object_patch.horizontal_center > toddler_patch.horizontal_center:
            return object_patch.simple_query(""What is the toddler holding?"") # crop would include the object so keep it in the query
    # If no object is found, pick the first object
    return object_patches[0].simple_query(""What is the toddler holding?"")"
2951242,Is the gray shirt sleeveless or short sleeved?,"
    image_patch = ImagePatch(image)
    gray_shirt_patches = image_patch.find(""gray shirt"")
    # Question assumes only one gray shirt patch
    if len(gray_shirt_patches) == 0:
        # If no gray shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    gray_shirt_patch = gray_shirt_patches[0]
    sleeveless_patches = gray_shirt_patch.find(""sleeveless"")
    # Question assumes only one sleeveless patch
    if len(sleeveless_patches) == 0:
        return ""short sleeved""
    return ""sleeveless"""
15241795,Is the tank top red?,"
    image_patch = ImagePatch(image)
    tank_patches = image_patch.find(""tank"")
    # Question assumes only one tank patch
    if len(tank_patches) == 0:
        # If no tank is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    return tank_patches[0].verify_property(""tank"", ""red"")"
13885234,Which kind of animal is in front of the rocks?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")
    for animal_patch in animal_patches:
        rocks_patches = image_patch.find(""rocks"")
        for rocks_patch in rocks_patches:
            if animal_patch.horizontal_center > rocks_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is in front of the rocks?"") # crop would include the rocks so keep it in the query
    # If no animal is in front of the rocks, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any grapes?"")"
6455591,What type of furniture is white?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of furniture is white?"")"
1033761,What is the blue clothing item?,"
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""blue""):
            return clothing_patch.simple_query(""What is the blue clothing item?"") # crop would include the blue so keep it in the query
    # If no blue clothing is found, pick the first clothing
    return clothing_patches[0].simple_query(""What is the blue clothing item?"")"
17726504,Who is wearing the glasses?,"
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    return glasses_patches[0].simple_query(""Who is wearing the glasses?"")"
13112902,Is the woman wearing a bracelet?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    woman_patch = woman_patches[0]
    bracelet_patches = image_patch.find(""bracelet"")
    # Question assumes only one bracelet patch
    if len(bracelet_patches) == 0:
        return ""no""
    for bracelet_patch in bracelet_patches:
        if bracelet_patch.horizontal_center > woman_patch.horizontal_center:
            return ""yes""
    return ""no"""
698766,What is the food that is not white?,"
    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white"")
    # Question assumes only one white patch
    if len(white_patches) == 0:
        # If no white is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for white_patch in white_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center != white_patch.horizontal_center:
                return food_patch.simple_query(""What is the food that is not white?"") # crop would include white so keep it in the query
    # If no food is not white, pick the first food
    return food_patches[0].simple_query(""What is the food that is not white?"")"
1332276,Are there both a cup and a bottle in the picture?,"
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?,"
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?,"
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for helmet_patch in helmet_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.upper > helmet_patch.lower:
                return man_patch.simple_query(""Who is holding the helmet?"") # crop would include the man so keep it in the query
    # If no man is holding the helmet, pick the first man
    return man_patches[0].simple_query(""Who is holding the helmet?"")"
2143247,What is the name of the food to the left of the donut that looks little?,"
    image_patch = ImagePatch(image)
    donut_patches = image_patch.find(""donut"")
    # Question assumes only one donut patch
    if len(donut_patches) == 0:
        # If no donut is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for donut_patch in donut_patches:
        little_food_patches = image_patch.find(""food"")
        for little_food_patch in little_food_patches:
            if little_food_patch.horizontal_center < donut_patch.horizontal_center:
                return little_food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"") # crop would include the donut so keep it in the query
    # If no little food is found, pick the first little food
    return little_food_patches[0].simple_query(""What is the name of the food to the left of the donut that looks little?"")"
3767951,Is the clock to the right or to the left of the man on the left?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    clock_patch = clock_patches[0]
    if clock_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17655180,What's the sticker on?,"
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What's the sticker on?"")
    return sticker_patches[0].simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?,"
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""In front of what is this table?"")
    return table_patches[0].simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    car_patch = car_patches[0]
    people_patches = image_patch.find(""people"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > car_patch.horizontal_center:
            return ""yes""
    return ""no"""
7188981,Does the giraffe look adult?,"
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""adult""))"
16852802,Of what color are the pants?,"
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"")"
9619158,What kind of watercraft is full of men?,"
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    for watercraft_patch in watercraft_patches:
        men_patches = image_patch.find(""man"")
        for man_patch in men_patches:
            if man_patch.horizontal_center > watercraft_patch.horizontal_center:
                return watercraft_patch.simple_query(""What kind of watercraft is full of men?"") # crop would include the men so keep it in the query
    # If no watercraft is full of men, pick the first watercraft
    return watercraft_patches[0].simple_query(""What kind of watercraft is full of men?"")"
3625225,On which side of the picture are the boats?,"
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    for boat_patch in boat_patches:
        if boat_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?,"
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only two elephant patches
    if len(elephant_patches) != 2:
        # If no two elephants are found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_elephant_patch = elephant_patches[0]
    right_elephant_patch = elephant_patches[1]
    if left_elephant_patch.verify_property(""elephant"", ""large size"") and right_elephant_patch.verify_property(""elephant"", ""large size""):
        return ""yes""
    return ""no"""
19834124,What is the girl holding?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    girl_patch = girl_patches[0]
    object_patches = image_patch.find(""object"")
    for object_patch in object_patches:
        if object_patch.horizontal_center > girl_patch.horizontal_center:
            return object_patch.simple_query(""What is the object?"") # crop would include the object so keep it in the query
    return ""nothing"""
4617704,Does the toilet seat that is not down appear to be white and open?,"
    image_patch = ImagePatch(image)
    toilet_seat_patches = image_patch.find(""toilet seat"")
    # Question assumes only one toilet seat patch
    if len(toilet_seat_patches) == 0:
        # If no toilet seat is found, query the image directly
        return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")
    for toilet_seat_patch in toilet_seat_patches:
        is_white = (toilet_seat_patch.simple_query(""Is the toilet seat white?"") == ""yes"")
        is_open = (toilet_seat_patch.simple_query(""Is the toilet seat open?"") == ""yes"")
        if is_white and is_open:
            return ""yes""
    return ""no"""
5899539,Are there any bottles or mugs that are not purple?,"
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_mug = image_patch.exists(""mug"")
    is_purple = image_patch.exists(""purple"")
    return bool_to_yesno(is_bottle or is_mug) and not is_purple"
2631593,Which place is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    person_patch = person_patches[0]
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center > person_patch.horizontal_center:
            return ""yes""
    return ""no"""
111054378,Is the small couch to the right or to the left of the bottle?,"
    image_patch = ImagePatch(image)
    small_couch_patches = image_patch.find(""small couch"")
    # Question assumes only one small couch patch
    if len(small_couch_patches) == 0:
        # If no small couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    for small_couch_patch in small_couch_patches:
        bottle_patches = image_patch.find(""bottle"")
        for bottle_patch in bottle_patches:
            if small_couch_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
    # If no bottle is found, query the image directly
    return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")"
9392411,Is the bottle to the right or to the left of the appliance on the left?,"
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    for bottle_patch in bottle_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center < bottle_patch.horizontal_center:
                return ""left""
    return ""right"""
16753829,What type of animal is sitting in the container in the bottom of the photo?,"
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    container_patch = container_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    for animal_patch in animal_patches:
        if animal_patch.lower < container_patch.lower:
            return animal_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"") # crop would include the animal so keep it in the query
    # If no animal is in the container, pick the first animal
    return animal_patches[0].simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")"
1345482,What is that train in front of?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    for car_patch in car_patches:
        palm_tree_patches = image_patch.find(""palm tree"")
        for palm_tree_patch in palm_tree_patches:
            if car_patch.horizontal_center > palm_tree_patch.horizontal_center:
                girl_patches = image_patch.find(""girl"")
                # Question assumes only one girl patch
                if len(girl_patches) == 0:
                    # If no girl is found, query the image directly
                    return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
                for girl_patch in girl_patches:
                    if car_patch.horizontal_center > girl_patch.horizontal_center:
                        return ""yes""
    return ""no"""
459445,In which part is the silver device?,"
    image_patch = ImagePatch(image)
    silver_device_patches = image_patch.find(""silver device"")
    # Question assumes only one silver device patch
    if len(silver_device_patches) == 0:
        # If no silver device is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if silver_device_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""
    else:
        return ""right"""
11786203,What is the man on?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man on?"")
    return man_patches[0].simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?,"
    image_patch = ImagePatch(image)
    is_brown_door = image_patch.exists(""brown door"")
    is_brown_chair = image_patch.exists(""brown chair"")
    return bool_to_yesno(is_brown_door or is_brown_chair)"
131031372,What is the napkin in?,"
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What is the napkin in?"")
    return napkin_patches[0].simple_query(""What is the napkin in?"")"
1241681,Are there any people behind the white dessert?,"
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    for people_patch in people_patches:
        if people_patch.verify_property(""people"", ""white dessert""):
            return ""yes""
    return ""no"""
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")
    for animal_patch in animal_patches:
        curtain_patches = image_patch.find(""curtain"")
        for curtain_patch in curtain_patches:
            if curtain_patch.horizontal_center > animal_patch.horizontal_center:
                return animal_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")
    # If no animal is in front of the curtain, pick the first animal
    return animal_patches[0].simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")"
8553578,What is the Pikachu doing?,"
    image_patch = ImagePatch(image)
    pikachu_patches = image_patch.find(""Pikachu"")
    # Question assumes only one Pikachu patch
    if len(pikachu_patches) == 0:
        # If no Pikachu is found, query the image directly
        return image_patch.simple_query(""What is the Pikachu doing?"")
    return pikachu_patches[0].simple_query(""What is the Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?","
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the large mountains?"")"
5107295,What is in the sky?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?,"
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is the fruit on?"")
    for watercraft_patch in watercraft_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if watercraft_patch.horizontal_center > fruit_patch.horizontal_center:
                return watercraft_patch.simple_query(""What kind of watercraft is the fruit on?"") # crop would include the fruit so keep it in the query
    # If no watercraft is the fruit on, pick the first watercraft
    return watercraft_patches[0].simple_query(""What kind of watercraft is the fruit on?"")"
1827218,Is the bottle in the bottom of the image?,"
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    return ""yes"" if bottle_patches[0].vertical_center < image_patch.vertical_center else ""no"""
10938155,What color is the sky?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?,"
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    return sail_patches[0].best_text_match([""white"", ""red""])"
3662784,Do you see either any traffic lights or cars?,"
    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    car_patches = image_patch.find(""car"")
    return bool_to_yesno(len(traffic_light_patches) > 0 or len(car_patches) > 0)"
15515711,Are there any girls to the right of the yellow helmet?,"
    image_patch = ImagePatch(image)
    yellow_helmet_patches = image_patch.find(""yellow helmet"")
    # Question assumes only one yellow helmet patch
    if len(yellow_helmet_patches) == 0:
        # If no yellow helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    for yellow_helmet_patch in yellow_helmet_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if girl_patch.horizontal_center > yellow_helmet_patch.horizontal_center:
                return ""yes""
    return ""no"""
6315316,Which kind of furniture is in front of the window?,"
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is in front of the window?"")
    return furniture_patches[0].simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?,"
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    for appliance_patch in appliance_patches:
        faucet_patches = image_patch.find(""faucet"")
        for faucet_patch in faucet_patches:
            if appliance_patch.horizontal_center < faucet_patch.horizontal_center:
                return appliance_patch.simple_query(""What appliance is to the left of the faucet?"") # crop would include the faucet so keep it in the query
    # If no appliance is to the left of the faucet, pick the first appliance
    return appliance_patches[0].simple_query(""What appliance is to the left of the faucet?"")"
41050828,What is the color of the jacket?,"
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"")"
610914,Is the green boat to the right or to the left of the wood house?,"
    image_patch = ImagePatch(image)
    green_boat_patches = image_patch.find(""green boat"")
    # Question assumes only one green boat patch
    if len(green_boat_patches) == 0:
        # If no green boat is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    for green_boat_patch in green_boat_patches:
        wood_house_patches = image_patch.find(""wood house"")
        # Question assumes only one wood house patch
        if len(wood_house_patches) == 0:
            return ""right""
        for wood_house_patch in wood_house_patches:
            if green_boat_patch.horizontal_center > wood_house_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
13158346,Is the woman in the bottom part of the picture?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    return bool_to_yesno(woman_patches[0].vertical_center < image_patch.vertical_center)"
16318707,Are there either any colorful bikes or skateboards?,"
    image_patch = ImagePatch(image)
    colorful_bikes = image_patch.exists(""colorful bike"")
    colorful_skateboards = image_patch.exists(""colorful skateboard"")
    return bool_to_yesno(colorful_bikes or colorful_skateboards)"
2805654,Is the bag to the right or to the left of the bench?,"
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    for bag_patch in bag_patches:
        bench_patches = image_patch.find(""bench"")
        # Question assumes only one bench patch
        if len(bench_patches) == 0:
            return ""left""
        for bench_patch in bench_patches:
            if bag_patch.horizontal_center > bench_patch.horizontal_center:
                return ""right""
    return ""left"""
15315607,What do you think is in the sky?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?,"
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What color is the truck near the gas station?"")
    for truck_patch in truck_patches:
        if truck_patch.verify_property(""truck"", ""near gas station""):
            return truck_patch.simple_query(""What color is the truck near the gas station?"") # crop would include the gas station so keep it in the query
    # If no truck is near the gas station, pick the first truck
    return truck_patches[0].simple_query(""What color is the truck near the gas station?"")"
12140940,"What are the headphones on, a sofa or a desk?","
    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
    for headphones_patch in headphones_patches:
        sofa_patches = image_patch.find(""sofa"")
        for sofa_patch in sofa_patches:
            if headphones_patch.horizontal_center > sofa_patch.horizontal_center:
                return ""right""
        desk_patches = image_patch.find(""desk"")
        for desk_patch in desk_patches:
            if headphones_patch.horizontal_center > desk_patch.horizontal_center:
                return ""right""
    return ""left"""
727533,Does the bun look brown and toasted?,"
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    return bun_patches[0].verify_property(""bun"", ""brown and toasted"")"
61044602,What is in the brown basket?,"
    image_patch = ImagePatch(image)
    brown_basket_patches = image_patch.find(""brown basket"")
    # Question assumes only one brown basket patch
    if len(brown_basket_patches) == 0:
        # If no brown basket is found, query the image directly
        return image_patch.simple_query(""What is in the brown basket?"")
    return brown_basket_patches[0].simple_query(""What is in the brown basket?"")"
16827204,Is the marker different in color than the paper?,"
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    return bool_to_yesno(marker_patches[0].verify_property(""marker"", ""color"") != image_patch.verify_property(""paper"", ""color""))"
1284539,Is there a racket to the right of the man on the right side?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1257391,What place is this?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
16223517,What do you think is the color of the large device?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the color of the large device?"")"
1024280,Does the shirt look long sleeved or sleeveless?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    return shirt_patches[0].simple_query(""Does the shirt look long sleeved or sleeveless?"")"
2769463,Which kind of animal is lying in the chair?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    return animal_patches[0].simple_query(""What kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?,"
    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    # Question assumes only one white box patch
    if len(white_box_patches) == 0:
        # If no white box is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    white_box_patch = white_box_patches[0]
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > white_box_patch.horizontal_center:
        return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?,"
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?,"
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    # Question assumes only one flower pot patch
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return flower_pot_patches[0].verify_property(""flower pot"", ""clay"")"
191006281,Does the sky look clear and gray?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Does the sky look clear and gray?"")"
681336,Do you see hats or gloves that are white?,"
    image_patch = ImagePatch(image)
    is_white_hat = image_patch.exists(""white hat"")
    is_white_glove = image_patch.exists(""white glove"")
    return bool_to_yesno(is_white_hat or is_white_glove)"
1300368,What is on the cabinet that is to the right of the keyboard?,"
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    for cabinet_patch in cabinet_patches:
        keyboard_patches = image_patch.find(""keyboard"")
        for keyboard_patch in keyboard_patches:
            if cabinet_patch.horizontal_center > keyboard_patch.horizontal_center:
                return cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    return cabinet_patches[0].simple_query(""What is on the cabinet that is to the right of the keyboard?"")"
172394,What is the animal to the left of the tap called?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""What is the animal to the left of the tap called?"") # crop would include the animal so keep it in the query
    # If no animal is to the left of the tap, pick the first animal
    return animal_patches[0].simple_query(""What is the animal to the left of the tap called?"")"
738176,Is the chair on the right?,"
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    return bool_to_yesno(chair_patches[0].horizontal_center > image_patch.horizontal_center)"
4194919,Is the child on the right of the picture?,"
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    return bool_to_yesno(child_patches[0].horizontal_center > image_patch.horizontal_center)"
3585327,Who is on the surfboard?,"
    image_patch = ImagePatch(image)
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        # If no surfboard is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard?"")
    surfboard_patch = surfboard_patches[0]
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center > surfboard_patch.horizontal_center:
            return man_patch.simple_query(""Who is on the surfboard?"")
    return image_patch.simple_query(""Who is on the surfboard?"")"
1711172,What size are the packages the candle is on top of?,"
    image_patch = ImagePatch(image)
    # contains a relation (on top of), so ask directly
    return image_patch.simple_query(""What size are the packages the candle is on top of?"")"
4353895,Who is on the snowboard on the right?,"
    image_patch = ImagePatch(image)
    snowboarder_patches = image_patch.find(""snowboarder"")
    # Question assumes only one snowboarder patch
    if len(snowboarder_patches) == 0:
        # If no snowboarder is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    for snowboarder_patch in snowboarder_patches:
        if snowboarder_patch.horizontal_center > image_patch.horizontal_center:
            return snowboarder_patch.simple_query(""Who is on the snowboard?"") # crop would include the snowboarder so keep it in the query
    # If no snowboarder is on the right, pick the first snowboarder
    return snowboarder_patches[0].simple_query(""Who is on the snowboard?"")"
17929304,What is the vehicle that is on the road?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?,"
    image_patch = ImagePatch(image)
    crust_patches = image_patch.find(""crust"")
    # Question assumes only one crust patch
    if len(crust_patches) == 0:
        # If no crust is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return crust_patches[0].simple_query(""What color is the crust?"")"
5672474,Is the plate to the left or to the right of the beer on the left?,"
    image_patch = ImagePatch(image)
    beer_patches = image_patch.find(""beer"")
    # Question assumes only one beer patch
    if len(beer_patches) == 0:
        # If no beer is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    beer_patch = beer_patches[0]
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        return ""right""
    for plate_patch in plate_patches:
        if plate_patch.horizontal_center > beer_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
11341284,What is the pattern of the mattress on the street?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?,"
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Are there any boys behind the fence?"")
    for boy_patch in boy_patches:
        fence_patches = image_patch.find(""fence"")
        # Question assumes only one fence patch
        if len(fence_patches) == 0:
            # If no fence is found, query the image directly
            return image_patch.simple_query(""Are there any boys behind the fence?"")
        for fence_patch in fence_patches:
            if boy_patch.horizontal_center > fence_patch.horizontal_center:
                return ""yes""
    return ""no"""
19203395,Is the white toilet paper to the right or to the left of the toilet?,"
    image_patch = ImagePatch(image)
    white_toilet_paper_patches = image_patch.find(""white toilet paper"")
    # Question assumes only one white toilet paper patch
    if len(white_toilet_paper_patches) == 0:
        # If no white toilet paper is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    for white_toilet_paper_patch in white_toilet_paper_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if white_toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
1194938,Are there any airplanes in front of the building?,"
    image_patch = ImagePatch(image)
    airplane_patches = image_patch.find(""airplane"")
    # Question assumes only one airplane patch
    if len(airplane_patches) == 0:
        # If no airplane is found, query the image directly
        return image_patch.simple_query(""Are there any airplanes in front of the building?"")
    for airplane_patch in airplane_patches:
        if airplane_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no"""
5350205,How clean is the road that the car is on the side of?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    car_patch = car_patches[0]
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    road_patch = road_patches[0]
    if car_patch.horizontal_center > road_patch.horizontal_center:
        return road_patch.simple_query(""How clean is the road that the car is on the side of?"")
    else:
        return ""dirty"""
4256016,"In which part of the picture is the black van, the bottom or the top?","
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""black van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    person_patch = person_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    fence_patch = fence_patches[0]
    if person_patch.horizontal_center > fence_patch.horizontal_center:
        return person_patch.simple_query(""What are you doing?"")
    else:
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")"
16471124,Does the horse have a different color than the boot?,"
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    horse_patch = horse_patches[0]
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        return ""no""
    boot_patch = boot_patches[0]
    return bool_to_yesno(horse_patch.verify_property(""horse"", ""color"") and horse_patch.verify_property(""horse"", ""color"") != boot_patch.verify_property(""boot"", ""color""))"
958247,Is the mouse to the right of a chair?,"
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    # Question assumes only one mouse patch
    if len(mouse_patches) == 0:
        # If no mouse is found, query the image directly
        return image_patch.simple_query(""Is the mouse to the right of a chair?"")
    for mouse_patch in mouse_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if chair_patch.horizontal_center > mouse_patch.horizontal_center:
                return ""yes""
    return ""no"""
11179512,The basket made of plastic is what color?,"
    image_patch = ImagePatch(image)
    plastic_basket_patches = image_patch.find(""basket made of plastic"")
    # Question assumes only one plastic basket patch
    if len(plastic_basket_patches) == 0:
        # If no plastic basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    return plastic_basket_patches[0].simple_query(""What color is the basket made of plastic?"")"
8816272,Do you see any elephant to the left of the bird?,"
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
    for elephant_patch in elephant_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if elephant_patch.horizontal_center < bird_patch.horizontal_center:
                return ""yes""
    return ""no"""
11168592,What is the animal in front of the lamp?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal in front of the lamp?"")
    return animal_patches[0].simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?,"
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Who is wearing the jacket?"")
    return jacket_patches[0].simple_query(""Who is wearing the jacket?"")"
7398502,What is the food to the left of the girl in the bottom of the photo?,"
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    for food_patch in food_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if food_patch.vertical_center < girl_patch.vertical_center:
                return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"") # crop would include the girl so keep it in the query
    # If no food is to the left of the girl in the bottom of the photo, pick the first food
    return food_patches[0].simple_query(""What is the food to the left of the girl in the bottom of the photo?"")"
5145864,What is the device that the camera is in front of?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What is the device that the camera is in front of?"")"
788143,Is the man on the surfboard?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the surfboard?"")
    for man_patch in man_patches:
        surfboard_patches = image_patch.find(""surfboard"")
        # Question assumes only one surfboard patch
        if len(surfboard_patches) == 0:
            return ""no""
        for surfboard_patch in surfboard_patches:
            if man_patch.upper == surfboard_patch.lower:
                return ""yes""
    return ""no"""
15854501,What device has the same color as the device in the box?,"
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    for device_patch in device_patches:
        box_patches = image_patch.find(""box"")
        # Question assumes only one box patch
        if len(box_patches) == 0:
            # If no box is found, query the image directly
            return image_patch.simple_query(""What device has the same color as the device in the box?"")
        for box_patch in box_patches:
            if device_patch.verify_property(""device"", ""color"") == box_patch.verify_property(""box"", ""color""):
                return device_patch.simple_query(""What device has the same color as the device in the box?"") # crop would include the color so keep it in the query
    # If no device has the same color as the device in the box, pick the first device
    return device_patches[0].simple_query(""What device has the same color as the device in the box?"")"
3228067,What is the child wearing?,"
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    return child_patches[0].simple_query(""What is the child wearing?"")"
6817336,Is the blue sky behind a cathedral?,"
    image_patch = ImagePatch(image)
    blue_sky_patches = image_patch.find(""blue sky"")
    # Question assumes only one blue sky patch
    if len(blue_sky_patches) == 0:
        # If no blue sky is found, query the image directly
        return image_patch.simple_query(""Is the blue sky behind a cathedral?"")
    cathedral_patches = image_patch.find(""cathedral"")
    # Question assumes only one cathedral patch
    if len(cathedral_patches) == 0:
        return ""no""
    for blue_sky_patch in blue_sky_patches:
        for cathedral_patch in cathedral_patches:
            if blue_sky_patch.horizontal_center > cathedral_patch.horizontal_center:
                return ""yes""
    return ""no"""
6347271,"In which part of the image is the yellow pepper, the bottom or the top?","
    image_patch = ImagePatch(image)
    yellow_pepper_patches = image_patch.find(""yellow pepper"")
    # Question assumes only one yellow pepper patch
    if len(yellow_pepper_patches) == 0:
        # If no yellow pepper is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    if yellow_pepper_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal is the woman feeding?"")
    woman_patch = woman_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > woman_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the woman feeding?"")
    return ""cow"""
3427727,On which side is the bucket?,"
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    bucket_patch = bucket_patches[0]
    if bucket_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
31050314,Is the small chimney in the bottom part of the picture?,"
    image_patch = ImagePatch(image)
    small_chimney_patches = image_patch.find(""small chimney"")
    # Question assumes only one small chimney patch
    if len(small_chimney_patches) == 0:
        # If no small chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    return ""yes"" if small_chimney_patches[0].vertical_center < image_patch.vertical_center else ""no"""
3503396,Are the pants purple?,"
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    return bool_to_yesno(pants_patches[0].verify_property(""pants"", ""purple""))"
11742862,Which kind of furniture is to the right of the paper towels?,"
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    for furniture_patch in furniture_patches:
        paper_towel_patches = image_patch.find(""paper towel"")
        for paper_towel_patch in paper_towel_patches:
            if furniture_patch.horizontal_center > paper_towel_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is?"") # crop would include the furniture so keep it in the query
    # If no furniture is to the right of the paper towel, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is?"")"
5891809,What kind of furniture is gray?,"
    image_patch = ImagePatch(image)
    gray_furniture_patches = image_patch.find(""gray furniture"")
    # Question assumes only one gray furniture patch
    if len(gray_furniture_patches) == 0:
        # If no gray furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    return gray_furniture_patches[0].simple_query(""What kind of furniture is gray?"")"
5370528,Is the hair white and long?,"
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    for hair_patch in hair_patches:
        is_white = (hair_patch.simple_query(""Is the hair white?"") == ""yes"")
        is_long = (hair_patch.simple_query(""Is the hair long?"") == ""yes"")
        if is_white and is_long:
            return ""yes""
    return ""no"""
781153,Do you see trains near the lamp post that looks white?,"
    image_patch = ImagePatch(image)
    # contains a relation (near), so ask directly
    return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")"
5543456,Is the container to the left of the person that wears bracelets?,"
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
    for container_patch in container_patches:
        bracelet_patches = image_patch.find(""bracelet"")
        for bracelet_patch in bracelet_patches:
            if container_patch.horizontal_center < bracelet_patch.horizontal_center:
                return ""yes""
    return ""no"""
163134,What do you think is on the roof?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?,"
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
5511395,What is wrapped in paper?,"
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""What is wrapped in paper?"")
    for paper_patch in paper_patches:
        wrapped_patches = image_patch.find(""wrapped"")
        for wrapped_patch in wrapped_patches:
            if paper_patch.horizontal_center == wrapped_patch.horizontal_center and paper_patch.vertical_center == wrapped_patch.vertical_center:
                return wrapped_patch.simple_query(""What is wrapped in paper?"") # crop would include the paper so keep it in the query
    # If no wrapped patch is found, pick the first paper patch
    return paper_patches[0].simple_query(""What is wrapped in paper?"")"
5611256,Are there any couches in the picture?,"
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch""))"
1162826,The man is in what?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is in what?"")
    return man_patches[0].simple_query(""The man is in what?"")"
81020685,Which color is the small house?,"
    image_patch = ImagePatch(image)
    small_house_patches = image_patch.find(""small house"")
    # Question assumes only one small house patch
    if len(small_house_patches) == 0:
        # If no small house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    return small_house_patches[0].simple_query(""Which color is the small house?"")"
19640724,Who is in the bathroom?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"")"
289960,Do you see a racket to the right of the boy that is looking at the tie?,"
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    boy_patch = boy_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > boy_patch.horizontal_center:
            return ""yes""
    return ""no"""
9957748,Does the hair appear to be long and brown?,"
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair appear to be long and brown?"")
    return hair_patches[0].verify_property(""hair"", ""long and brown"")"
21031610,What is the shoe that looks black and white resting on?,"
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    for shoe_patch in shoe_patches:
        if shoe_patch.verify_property(""shoe"", ""black"") and shoe_patch.verify_property(""shoe"", ""white""):
            return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"") # crop would include the shoe so keep it in the query
    # If no shoe is black and white, pick the first shoe
    return shoe_patches[0].simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?,"
    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    # Question assumes only one glass patch
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is the glass on?"")
    return glass_patches[0].simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?,"
    image_patch = ImagePatch(image)
    white_pillow_patches = image_patch.find(""white pillow"")
    # Question assumes only one white pillow patch
    if len(white_pillow_patches) == 0:
        # If no white pillow is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    black_animal_patches = image_patch.find(""black animal"")
    # Question assumes only one black animal patch
    if len(black_animal_patches) == 0:
        # If no black animal is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    for white_pillow_patch in white_pillow_patches:
        for black_animal_patch in black_animal_patches:
            if white_pillow_patch.vertical_center < black_animal_patch.vertical_center:
                return ""yes""
    return ""no"""
457770,What kind of clothing is striped?,"
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    for clothing_patch in clothing_patches:
        is_striped = (clothing_patch.simple_query(""Is the clothing striped?"") == ""yes"")
        if is_striped:
            return clothing_patch.simple_query(""What kind of clothing is striped?"") # crop would include the striping so keep it in the query
    # If no clothing is striped, pick the first clothing
    return clothing_patches[0].simple_query(""What kind of clothing is striped?"")"
12603153,Are the child's eyes blue and open?,"
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    child_patch = child_patches[0]
    blue_eyes_patches = child_patch.find(""blue eyes"")
    # Question assumes only one blue eyes patch
    if len(blue_eyes_patches) == 0:
        return ""no""
    blue_eyes_patch = blue_eyes_patches[0]
    open_eyes_patches = child_patch.find(""open eyes"")
    # Question assumes only one open eyes patch
    if len(open_eyes_patches) == 0:
        return ""no""
    open_eyes_patch = open_eyes_patches[0]
    return bool_to_yesno(blue_eyes_patch.horizontal_center == open_eyes_patch.horizontal_center)"
9480973,What is located on top of the tub?,"
    image_patch = ImagePatch(image)
    # contains a relation (on top of), so ask directly
    return image_patch.simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?,"
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    for fork_patch in fork_patches:
        white_plate_patches = image_patch.find(""white plate"")
        # Question assumes only one white plate patch
        if len(white_plate_patches) == 0:
            return ""right""
        for white_plate_patch in white_plate_patches:
            if fork_patch.horizontal_center > white_plate_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
13420253,On which side of the photo is the chair?,"
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    if chair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?,"
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    # Question assumes only one label patch
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What is the label on?"")
    return label_patches[0].simple_query(""What is the label on?"")"
3322787,What bird is to the left of the person that is wearing a shirt?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    for person_patch in person_patches:
        shirt_patches = image_patch.find(""shirt"")
        for shirt_patch in shirt_patches:
            if shirt_patch.horizontal_center > person_patch.horizontal_center:
                bird_patches = image_patch.find(""bird"")
                for bird_patch in bird_patches:
                    if bird_patch.horizontal_center < person_patch.horizontal_center:
                        return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no bird is to the left of the person that is wearing a shirt, pick the first bird
    return bird_patches[0].simple_query(""What bird is to the left of the person that is wearing a shirt?"")"
6399594,On which side is the man?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6930120,Is the glass bowl on the right or on the left?,"
    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    # Question assumes only one glass bowl patch
    if len(glass_bowl_patches) == 0:
        # If no glass bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    glass_bowl_patch = glass_bowl_patches[0]
    if glass_bowl_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
12619961,What vehicles are to the left of the taxi?,"
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    for taxi_patch in taxi_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        left_vehicle_patches = [vehicle_patch for vehicle_patch in vehicle_patches if vehicle_patch.horizontal_center < taxi_patch.horizontal_center]
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"") # crop would include the vehicles so keep it in the query
    # If no vehicle is to the left of the taxi, pick the first vehicle
    return vehicle_patches[0].simple_query(""What vehicles are to the left of the taxi?"")"
13362315,Is the basket on the shelf black and empty?,"
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    for basket_patch in basket_patches:
        is_black = (basket_patch.simple_query(""Is the basket black?"") == ""yes"")
        is_empty = (basket_patch.simple_query(""Is the basket empty?"") == ""yes"")
        if is_black and is_empty:
            return ""yes""
    return ""no"""
3830854,What is the animal that is standing next to the donkey that is standing in the hay?,"
    image_patch = ImagePatch(image)
    donkey_patches = image_patch.find(""donkey"")
    # Question assumes only one donkey patch
    if len(donkey_patches) == 0:
        # If no donkey is found, query the image directly
        return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    donkey_patch = donkey_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > donkey_patch.horizontal_center:
            return animal_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    return ""none"""
18382324,Is this a bed or a table?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a bed or a table?"")"
18104571,"Which animal is that, a bird or a cat?","
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    return ""bird"" if len(bird_patches) > len(cat_patches) else ""cat"""
2913379,Do you see any fence or pot?,"
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)"
9294271,What is in front of the fence the zebra is kept in?,"
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")
    zebra_patch = zebra_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        return ""nothing""
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center > zebra_patch.horizontal_center:
            return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"") # crop would include the fence so keep it in the query
    return ""nothing"""
10741434,What is the vegetable that is on top of the plate called?,"
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    return vegetable_patches[0].simple_query(""What is the vegetable that is on top of the plate called?"")"
765962,Where is the car?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Where is the car?"")
    return ""left"""
12399262,Is there either a yellow truck or airplane?,"
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)"
13964213,Is the man on the left of the photo?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    return bool_to_yesno(man_patches[0].horizontal_center < image_patch.horizontal_center)"
16171369,What is covered in the snow?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?,"
    image_patch = ImagePatch(image)
    plastic_bottle_patches = image_patch.find(""plastic bottle"")
    # Question assumes only one plastic bottle patch
    if len(plastic_bottle_patches) == 0:
        # If no plastic bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    plastic_bottle_patch = plastic_bottle_patches[0]
    if plastic_bottle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5858491,Do you see any ropes on the fence that is on the left of the picture?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")"
17834539,Are there any lamps in the scene?,"
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp""))"
15658176,Who is wearing a helmet?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is wearing a helmet?"")"
14372400,Does that coat have red color?,"
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red""))"
411886,Are there any curtains or blankets in this scene?,"
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    remote_patches = image_patch.find(""remote"")
    # Question assumes only one remote patch
    if len(remote_patches) == 0:
        return ""man""
    remote_patch = remote_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center < remote_patch.horizontal_center and furniture_patch.horizontal_center > man_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    return ""man"""
51039491,Is the fence black or red?,"
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""black""):
            return ""black""
        else:
            return ""red"""
7425912,What animal is standing in the field?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing in the field?"")
    return animal_patches[0].simple_query(""What animal is standing in the field?"")"
13136338,What animal is in front of the dog which is to the right of the bird?,"
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    dog_patch = dog_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return ""no animal""
    bird_patch = bird_patches[0]
    if dog_patch.horizontal_center > bird_patch.horizontal_center:
        for animal_patch in image_patch.find(""animal""):
            if animal_patch.horizontal_center > dog_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    return ""no animal"""
3775066,Which color are the cabinets in the bottom of the picture?,"
    image_patch = ImagePatch(image)
    cabinets_patches = image_patch.find(""cabinets"")
    # Question assumes only one cabinets patch
    if len(cabinets_patches) == 0:
        # If no cabinets are found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    return cabinets_patches[0].simple_query(""Which color are the cabinets in the bottom of the picture?"")"
17206239,Is the happy girl to the right of a player?,"
    image_patch = ImagePatch(image)
    happy_girl_patches = image_patch.find(""happy girl"")
    # Question assumes only one happy girl patch
    if len(happy_girl_patches) == 0:
        # If no happy girl is found, query the image directly
        return image_patch.simple_query(""Is the happy girl to the right of a player?"")
    for happy_girl_patch in happy_girl_patches:
        player_patches = image_patch.find(""player"")
        for player_patch in player_patches:
            if player_patch.horizontal_center > happy_girl_patch.horizontal_center:
                return ""yes""
    return ""no"""
2992517,"What piece of furniture is not wooden, the table or the chair?","
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")"
1827558,Which side of the image is the kettle on?,"
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    kettle_patch = kettle_patches[0]
    if kettle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2785208,Where is the man?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    return ""center"""
6623967,Is the baby near the countertop chewing a computer mouses?,"
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouse?"")
    for baby_patch in baby_patches:
        countertop_patches = image_patch.find(""countertop"")
        # Question assumes only one countertop patch
        if len(countertop_patches) == 0:
            return ""no""
        for countertop_patch in countertop_patches:
            if countertop_patch.horizontal_center > baby_patch.horizontal_center:
                mouse_patches = image_patch.find(""mouse"")
                # Question assumes only one mouse patch
                if len(mouse_patches) == 0:
                    return ""no""
                for mouse_patch in mouse_patches:
                    if mouse_patch.horizontal_center > baby_patch.horizontal_center:
                        return ""yes""
    return ""no"""
12804807,Is the small bottle open or closed?,"
    image_patch = ImagePatch(image)
    small_bottle_patches = image_patch.find(""small bottle"")
    # Question assumes only one small bottle patch
    if len(small_bottle_patches) == 0:
        # If no small bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    return small_bottle_patches[0].simple_query(""Is the small bottle open or closed?"")"
18437691,Is the clock small or large?,"
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    if clock_patches[0].width < 100 or clock_patches[0].height < 100:
        return ""small""
    else:
        return ""large"""
9482318,Are there either any glasses or bottles in this photo?,"
    image_patch = ImagePatch(image)
    is_glass = image_patch.exists(""glass"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glass or is_bottle)"
12362819,Is the sky blue or dark?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue or dark?"")"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?,"
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    cup_patch = cup_patches[0]
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    for shelf_patch in shelf_patches:
        if shelf_patch.horizontal_center > cup_patch.horizontal_center:
            right_piece_of_furniture_patches = image_patch.find(""right piece of furniture"")
            # Question assumes only one right piece of furniture patch
            if len(right_piece_of_furniture_patches) == 0:
                # If no right piece of furniture is found, query the image directly
                return image_patch.simple_"
1416636,Are there both bridges and chandeliers in this photograph?,"
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?","
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?,"
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any doors?"")"
13562221,What's the bear on?,"
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What's the bear on?"")
    return bear_patches[0].simple_query(""What's the bear on?"")"
9536851,Is the woman in front of the trees holding scissors?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")
    woman_patch = woman_patches[0]
    scissors_patches = image_patch.find(""scissors"")
    # Question assumes only one scissors patch
    if len(scissors_patches) == 0:
        return ""no""
    for scissors_patch in scissors_patches:
        if scissors_patch.horizontal_center > woman_patch.horizontal_center:
            return ""yes""
    return ""no"""
9682405,What is on the machine?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the machine?"")"
8649435,What is on the white wall?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?,"
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""Does the logo look red?"")
    return bool_to_yesno(logo_patches[0].verify_property(""logo"", ""red""))"
14301289,What type of vehicle is to the left of the white vehicle?,"
    image_patch = ImagePatch(image)
    white_vehicle_patches = image_patch.find(""white vehicle"")
    # Question assumes only one white vehicle patch
    if len(white_vehicle_patches) == 0:
        # If no white vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    white_vehicle_patch = white_vehicle_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""none""
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < white_vehicle_patch.horizontal_center:
            return vehicle_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"") # crop would include the white vehicle so keep it in the query
    # If no vehicle is to the left of the white vehicle, pick the first vehicle
    return vehicle_patches[0].simple_query(""What type of vehicle is to the left of the white vehicle?"")"
523976,Which kind of vehicle is large?,"
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""large""):
            return vehicle_patch.simple_query(""Which kind of vehicle is large?"") # crop would include large so keep it in the query
    # If no vehicle is large, pick the first vehicle
    return vehicle_patches[0].simple_query(""Which kind of vehicle is large?"")"
3423213,Who is in front of the trees?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?,"
    image_patch = ImagePatch(image)
    brown_chair_patches = image_patch.find(""brown chair"")
    # Question assumes only one brown chair patch
    if len(brown_chair_patches) == 0:
        # If no brown chair is found, query the image directly
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    brown_chair_patch = brown_chair_patches[0]
    ottoman_patches = image_patch.find(""ottoman"")
    # Question assumes only one ottoman patch
    if len(ottoman_patches) == 0:
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    for ottoman_patch in ottoman_patches:
        if ottoman_patch.horizontal_center > brown_chair_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
5716578,Is there a laptop on the bed near the magazines?,"
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")
    for laptop_patch in laptop_patches:
        magazine_patches = image_patch.find(""magazine"")
        for magazine_patch in magazine_patches:
            if laptop_patch.horizontal_center > magazine_patch.horizontal_center:
                return ""yes""
    return ""no"""
8215791,Is the porcelain toilet to the left or to the right of the small trash can?,"
    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    # Question assumes only one porcelain toilet patch
    if len(porcelain_toilet_patches) == 0:
        # If no porcelain toilet is found, query the image directly
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    small_trash_can_patches = image_patch.find(""small trash can"")
    # Question assumes only one small trash can patch
    if len(small_trash_can_patches) == 0:
        # If no small trash can is found, query the image directly
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    for porcelain_toilet_patch in porcelain_toilet_patches:
        for small_trash_can_patch in small_trash_can_patches:
            if porcelain_toilet_patch.horizontal_center < small_trash_can_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
17528455,What is in front of the wall?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?,"
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"")
    goggles_patch = goggles_patches[0]
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one gloves patch
    if len(gloves_patches) == 0:
        return ""no""
    gloves_patch = gloves_patches[0]
    return bool_to_yesno(goggles_patch.verify_property(""goggles"", ""color"") and gloves_patch.verify_property(""gloves"", ""color"") and goggles_patch.verify_property(""goggles"", ""color"") != gloves_patch.verify_property(""gloves"", ""color""))"
947724,Is there any purple pillow or kite in this photograph?,"
    image_patch = ImagePatch(image)
    is_purple = image_patch.verify_property(""pillow"", ""purple"")
    is_kite = image_patch.verify_property(""kite"", ""flying"")
    return bool_to_yesno(is_purple or is_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?","
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > man_patch.horizontal_center:
            if people_patch.verify_property(""people"", ""standing""):
                return ""standing""
            else:
                return ""sitting""
    # If no people are found, query the image directly
    return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")"
15492262,Which kind of furniture is white?,"
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""Which kind of furniture is white?"") # crop would include white so keep it in the query
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is white?"")"
151032547,Is the bear on the right side?,"
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    return bool_to_yesno(bear_patches[0].horizontal_center > image_patch.horizontal_center)"
5698674,Are there either any planters or benches?,"
    image_patch = ImagePatch(image)
    is_planter = image_patch.exists(""planter"")
    is_bench = image_patch.exists(""bench"")
    return bool_to_yesno(is_planter or is_bench)"
19397103,What is the person that is standing staring at?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person that is standing staring at?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""standing""):
            return person_patch.simple_query(""What is the person that is standing staring at?"") # crop would include standing so keep it in the query
    # If no person is standing, pick the first person
    return person_patches[0].simple_query(""What is the person that is standing staring at?"")"
11630681,What is the color of the necklace?,"
    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    # Question assumes only one necklace patch
    if len(necklace_patches) == 0:
        # If no necklace is found, query the image directly
        return image_patch.simple_query(""What is the color of the necklace?"")
    return necklace_patches[0].simple_query(""What is the color of the necklace?"")"
248245,Is the table to the left or to the right of the fence?,"
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    for table_patch in table_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if table_patch.horizontal_center < fence_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
    # If no fence is found, query the image directly
    return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")"
837033,Are there round windows or doors?,"
    image_patch = ImagePatch(image)
    is_round_window = image_patch.exists(""round window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_round_window or is_door)"
5249150,Are there any bears or napkins in the picture?,"
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    for person_patch in person_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            return ""no vehicle""
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < person_patch.horizontal_center:
                return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"") # crop would include the vehicle so keep it in the query
    # If no vehicle is to the left of the person, pick the first vehicle
    return vehicle_patches[0].simple_query(""What kind of vehicle is to the left of the person?"")"
61006749,Who is dressed in pink?,"
    image_patch = ImagePatch(image)
    pink_patches = image_patch.find(""pink"")
    # Question assumes only one pink patch
    if len(pink_patches) == 0:
        # If no pink is found, query the image directly
        return image_patch.simple_query(""Who is dressed in pink?"")
    for pink_patch in pink_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if pink_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is dressed in pink?"") # crop would include the pink so keep it in the query
    # If no pink is found, pick the first pink
    return pink_patches[0].simple_query(""Who is dressed in pink?"")"
6122955,Does the pillow have yellow color?,"
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return pillow_patches[0].verify_property(""pillow"", ""yellow"")"
6861738,Is the old woman to the right or to the left of the faucet?,"
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    # Question assumes only one old woman patch
    if len(old_woman_patches) == 0:
        # If no old woman is found, query the image directly
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    for old_woman_patch in old_woman_patches:
        faucet_patches = image_patch.find(""faucet"")
        # Question assumes only one faucet patch
        if len(faucet_patches) == 0:
            return ""right""
        for faucet_patch in faucet_patches:
            if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
15833048,Which kind of animal is on the road?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is on the road?"")
    return animal_patches[0].simple_query(""What kind of animal is on the road?"")"
9524339,What animal is large?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""large""):
            return animal_patch.simple_query(""What animal is large?"") # crop would include large so keep it in the query
    # If no animal is large, pick the first animal
    return animal_patches[0].simple_query(""What animal is large?"")"
18255749,How clean are the sheets the pillow is to the right of?,"
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheets_patches = image_patch.find(""sheets"")
    # Question assumes only one sheets patch
    if len(sheets_patches) == 0:
        # If no sheets are found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    for sheets_patch in sheets_patches:
        if sheets_patch.horizontal_center > pillow_patch.horizontal_center:
            return sheets_patch.simple_query(""How clean are the sheets?"")
    return ""clean"""
19797097,What's the man wearing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
6899090,Is the man to the right or to the left of the appliance that looks white?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    white_appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one white appliance patch
    if len(white_appliance_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    for white_appliance_patch in white_appliance_patches:
        if white_appliance_patch.verify_property(""appliance"", ""white""):
            if man_patch.horizontal_center > white_appliance_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
    return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")"
3357701,Does the dog to the right of the other dog have white color?,"
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    for dog_patch in dog_patches:
        if dog_patch.horizontal_center < image_patch.horizontal_center:
            return ""no""
        white_patches = image_patch.find(""white"")
        # Question assumes only one white patch
        if len(white_patches) == 0:
            return ""no""
        for white_patch in white_patches:
            if white_patch.horizontal_center > dog_patch.horizontal_center:
                return ""yes""
    return ""no"""
2829418,What's the girl holding?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What's the girl holding?"")
    for girl_patch in girl_patches:
        holding_patches = image_patch.find(""holding"")
        # Question assumes only one holding patch
        if len(holding_patches) == 0:
            return girl_patch.simple_query(""What's the girl holding?"")
        for holding_patch in holding_patches:
            if holding_patch.horizontal_center > girl_patch.horizontal_center:
                return holding_patch.simple_query(""What's the girl holding?"") # crop would include the girl so keep it in the query
    # If no holding is found, pick the first girl
    return girl_patches[0].simple_query(""What's the girl holding?"")"
15930109,Which kind of vehicle is blue?,"
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""blue""):
            return vehicle_patch.simple_query(""Which kind of vehicle is blue?"") # crop would include blue so keep it in the query
    # If no vehicle is blue, pick the first vehicle
    return vehicle_patches[0].simple_query(""Which kind of vehicle is blue?"")"
1525382,What type of vegetable is on the food with the cheese?,"
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    for food_patch in food_patches:
        is_veggie = food_patch.verify_property(""veggie"", ""veggie"")
        if is_veggie:
            return food_patch.simple_query(""What type of vegetable is on the food with the cheese?"") # crop would include the cheese so keep it in the query
    # If no food is veggie, pick the first food
    return food_patches[0].simple_query(""What type of vegetable is on the food with the cheese?"")"
8548980,Are there either players or hand soaps?,"
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?","
    image_patch = ImagePatch(image)
    sandwich_patches = image_patch.find(""sandwich"")
    # Question assumes only one sandwich patch
    if len(sandwich_patches) == 0:
        # If no sandwich is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    croissant_patches = image_patch.find(""croissant"")
    # Question assumes only one croissant patch
    if len(croissant_patches) == 0:
        return ""sandwich""
    for sandwich_patch in sandwich_patches:
        for croissant_patch in croissant_patches:
            if sandwich_patch.horizontal_center > croissant_patch.horizontal_center:
                return ""croissant""
    return ""sandwich"""
6423906,Which kind of food is on the plate?,"
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    return food_patches[0].simple_query(""What kind of food is on the plate?"")"
1993231,Are the animals in the image of different types?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    animal_names = set()
    for animal_patch in animal_patches:
        animal_name = animal_patch.simple_query(""What type of animal is it?"")
        animal_names.add(animal_name)
    return bool_to_yesno(len(animal_names) > 1)"
13949656,Are there any people to the left of the tray?,"
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")"
9392591,Are there chairs or smoothies?,"
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?,"
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    for sheep_patch in sheep_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > sheep_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is to the right of the sheep?"") # crop would include the sheep so keep it in the query
    # If no animal is to the right of the sheep, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is to the right of the sheep?"")"
9896138,Are there any boxes to the left of the screen in the picture?,"
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in box_patches:
        if box_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1400333,What do you think is the man on?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What do you think is the man on?"")
    return man_patches[0].simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?,"
    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    return boot_patches[0].best_text_match([""white"", ""orange""])"
3659880,Does the wood boat have silver color?,"
    image_patch = ImagePatch(image)
    wood_patches = image_patch.find(""wood"")
    # Question assumes only one wood patch
    if len(wood_patches) == 0:
        # If no wood is found, query the image directly
        return image_patch.simple_query(""Does the wood boat have silver color?"")
    for wood_patch in wood_patches:
        is_silver = (wood_patch.simple_query(""Is the wood boat silver?"") == ""yes"")
        if is_silver:
            return ""yes""
    return ""no"""
1827802,Is the red pot on the appliance to the right of the mixer?,"
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    for red_pot_patch in red_pot_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center > red_pot_patch.horizontal_center:
                return ""yes""
    return ""no"""
14809102,The phone that is in front of the camera is of what color?,"
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # Question assumes only one phone patch
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    return phone_patches[0].simple_query(""What color is the phone that is in front of the camera?"")"
61001545,What type of food is to the left of the silver spoon?,"
    image_patch = ImagePatch(image)
    silver_spoon_patches = image_patch.find(""silver spoon"")
    # Question assumes only one silver spoon patch
    if len(silver_spoon_patches) == 0:
        # If no silver spoon is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    silver_spoon_patch = silver_spoon_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < silver_spoon_patch.horizontal_center:
            return food_patch.simple_query(""What type of food is to the left of the silver spoon?"") # crop would include the spoon so keep it in the query
    # If no food is to the left of the silver spoon, pick the first food
    return food_patches[0].simple_query(""What type of food is to the left of the silver spoon?"")"
799463,Are there both a window and a door in the picture?,"
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
11260725,Does the water have small size and white color?,"
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Does the water have small size and white color?"")
    return water_patches[0].verify_property(""water"", ""small"") and water_patches[0].verify_property(""water"", ""white"")"
2397653,Are there any fences that are white?,"
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any fences that are white?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""yes""
    return ""no"""
1554603,Who is holding the animal?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    animal_patch = animal_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > animal_patch.horizontal_center:
            return person_patch.simple_query(""Who is holding the animal?"")
    return ""no one"""
11606818,Is the man to the right or to the left of the people the stroller is to the right of?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patch = man_patches[0]
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        return ""left""
    for stroller_patch in stroller_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center > stroller_patch.horizontal_center:
                if man_patch.horizontal_center > people_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""left"""
8988476,What kind of furniture is presented in this photo?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        return ""nothing""
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center > man_patch.horizontal_center:
            return backpack_patch.simple_query(""What is the man with the backpack holding?"") # crop would include the backpack so keep it in the query
    return ""nothing"""
91058050,Are there both mouse pads and computer mice in the photograph?,"
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_mouse = image_patch.exists(""mouse"")
    return bool_to_yesno(is_mouse_pad and is_mouse)"
1972064,Is the person in front of the tree wearing jeans?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")
    for person_patch in person_patches:
        jeans_patches = person_patch.find(""jeans"")
        # Question assumes only one jeans patch
        if len(jeans_patches) == 0:
            return ""no""
        return ""yes"""
167162,Is there a bike to the right of the purse that is to the right of the woman?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    woman_patch = woman_patches[0]
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        return ""no""
    for purse_patch in purse_patches:
        if purse_patch.horizontal_center > woman_patch.horizontal_center:
            bike_patches = image_patch.find(""bike"")
            # Question assumes only one bike patch
            if len(bike_patches) == 0:
                return ""no""
            for bike_patch in bike_patches:
                if bike_patch.horizontal_center > purse_patch.horizontal_center:
                    return ""yes""
    return ""no"""
1695388,Who is wearing a shirt?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""left""
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
16921984,What is the bent man to the right of the other men doing?,"
    image_patch = ImagePatch(image)
    bent_man_patches = image_patch.find(""man"")
    # Question assumes only one bent man patch
    if len(bent_man_patches) == 0:
        # If no bent man is found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    bent_man_patch = bent_man_patches[0]
    other_man_patches = image_patch.find(""man"")
    for other_man_patch in other_man_patches:
        if other_man_patch.horizontal_center < bent_man_patch.horizontal_center:
            return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"") # crop would include the other men so keep it in the query
    # If no other man is to the left of the bent man, pick the first bent man
    return bent_man_patches[0].simple_query(""What is the bent man to the right of the other men doing?"")"
12175564,What animal are the men to the right of the girl leading?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    man_patch = man_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    girl_patch = girl_patches[0]
    for man_patch in man_patches:
        if man_patch.horizontal_center > girl_patch.horizontal_center:
            return man_patch.simple_query(""What animal are the men to the right of the girl leading?"") # crop would include the girl so keep it in the query
    return man_patches[0].simple_query(""What animal are the men to the right of the girl leading?"")"
1219606,On which side of the image is the house?,"
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1770499,Is the black suitcase to the right or to the left of the person on the left?,"
    image_patch = ImagePatch(image)
    black_suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one black suitcase patch
    if len(black_suitcase_patches) == 0:
        # If no black suitcase is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    black_suitcase_patch = black_suitcase_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < black_suitcase_patch.horizontal_center:
            return ""left""
    return ""right"""
5282406,Is the pot to the left of a chair?,"
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    for pot_patch in pot_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if pot_patch.horizontal_center < chair_patch.horizontal_center:
                return ""yes""
    return ""no"""
10914401,Where are the people?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the people?"")"
1919722,What animal is eating the grass?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is eating the grass?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""grass""):
            return animal_patch.simple_query(""What animal is eating the grass?"") # crop would include the grass so keep it in the query
    # If no animal is eating grass, pick the first animal
    return animal_patches[0].simple_query(""What animal is eating the grass?"")"
9681008,Who is wearing a helmet?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is wearing a helmet?"")"
16861675,Who is on the surfboard in the middle of the photo?,"
    image_patch = ImagePatch(image)
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        # If no surfboard is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    surfboard_patch = surfboard_patches[0]
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center == surfboard_patch.horizontal_center:
            return man_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")"
10947426,What is the color of the lizard beside the banana?,"
    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    # Question assumes only one lizard patch
    if len(lizard_patches) == 0:
        # If no lizard is found, query the image directly
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    for lizard_patch in lizard_patches:
        for banana_patch in banana_patches:
            if lizard_patch.horizontal_center > banana_patch.horizontal_center:
                return lizard_patch.best_text_match([""green"", ""yellow"", ""brown"", ""black""])
    return image_patch.simple_query(""What is the color of the lizard beside the banana?"")"
18200684,Is the wine glass in the top or in the bottom part?,"
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    for wine_glass_patch in wine_glass_patches:
        if wine_glass_patch.vertical_center > image_patch.vertical_center:
            return ""top""
        else:
            return ""bottom"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?,"
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < image_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    return vehicle_patches[0].simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")"
171012637,Is the teddy bear to the right of a suitcase?,"
    image_patch = ImagePatch(image)
    teddy_bear_patches = image_patch.find(""teddy bear"")
    # Question assumes only one teddy bear patch
    if len(teddy_bear_patches) == 0:
        # If no teddy bear is found, query the image directly
        return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"")
    for teddy_bear_patch in teddy_bear_patches:
        suitcase_patches = image_patch.find(""suitcase"")
        for suitcase_patch in suitcase_patches:
            if suitcase_patch.horizontal_center > teddy_bear_patch.horizontal_center:
                return ""yes""
    return ""no"""
19861372,Is the woman's hair long or short?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        return ""long""
    for hair_patch in hair_patches:
        if hair_patch.horizontal_center > woman_patch.horizontal_center:
            return ""short""
    return ""long"""
623889,Are both the television and the armchair the same color?,"
    image_patch = ImagePatch(image)
    is_television = image_patch.exists(""television"")
    is_armchair = image_patch.exists(""armchair"")
    # Question assumes both objects are found
    if not is_television or not is_armchair:
        # If one or both objects are not found, query the image directly
        return image_patch.simple_query(""Are both the television and the armchair the same color?"")
    television_patches = image_patch.find(""television"")
    armchair_patches = image_patch.find(""armchair"")
    # Question assumes only one television and armchair patch
    if len(television_patches) == 0 or len(armchair_patches) == 0:
        return image_patch.simple_query(""Are both the television and the armchair the same color?"")
    television_patch = television_patches[0]
    armchair_patch = armchair_patches[0]
    return bool_to_yesno(television_patch.verify_property(""television"", ""color"") == armchair_patch.verify_property(""armchair"", ""color""))"
4917605,Is the shoe white or brown?,"
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
91055143,What is on the table?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
5430643,What do you think sits on the plate to the left of the tomato?,"
    image_patch = ImagePatch(image)
    tomato_patches = image_patch.find(""tomato"")
    # Question assumes only one tomato patch
    if len(tomato_patches) == 0:
        # If no tomato is found, query the image directly
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    for tomato_patch in tomato_patches:
        plate_patches = image_patch.find(""plate"")
        # Question assumes only one plate patch
        if len(plate_patches) == 0:
            return ""nothing""
        for plate_patch in plate_patches:
            if plate_patch.horizontal_center > tomato_patch.horizontal_center:
                left_of_tomato_patches = plate_patch.find(""left of the tomato"")
                # Question assumes only one left-of-tomato patch
                if len(left_of_tomato_patches) == 0:
                    return ""nothing""
                return left_of_tomato_patches[0].simple_query(""What do you think sits on the plate to the left of the tomato?"")
    return ""nothing"""
523936,Is the woman in the top part of the picture?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    return ""yes"" if woman_patches[0].vertical_center > image_patch.vertical_center else ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?,"
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    for bottle_patch in bottle_patches:
        nightstand_patches = image_patch.find(""nightstand"")
        # Question assumes only one nightstand patch
        if len(nightstand_patches) == 0:
            return ""no""
        for nightstand_patch in nightstand_patches:
            if bottle_patch.vertical_center < nightstand_patch.vertical_center:
                bed_patches = image_patch.find(""bed"")
                # Question assumes only one bed patch
                if len(bed_patches) == 0:
                    return ""no""
                for bed_patch in bed_patches:
                    if bottle_patch.horizontal_center < bed_patch.horizontal_center:
                        return ""yes""
    return ""no"""
14292161,The pot is of which color?,"
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].simple_query(""What color is the pot?"")"
17495150,"What device is black, the microphone or the laptop?","
    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    # Question assumes only one black patch
    if len(black_patches) == 0:
        # If no black is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    black_patch = black_patches[0]
    microphone_patches = image_patch.find(""microphone"")
    for microphone_patch in microphone_patches:
        if microphone_patch.horizontal_center > black_patch.horizontal_center:
            return ""microphone""
    laptop_patches = image_patch.find(""laptop"")
    for laptop_patch in laptop_patches:
        if laptop_patch.horizontal_center > black_patch.horizontal_center:
            return ""laptop""
    # If no microphone or laptop is found, pick the first black patch
    return black_patches[0].simple_query(""What device is black, the microphone or the laptop?"")"
1521847,Is the cat on a desk?,"
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Is the cat on a desk?"")
    for cat_patch in cat_patches:
        desk_patches = image_patch.find(""desk"")
        # Question assumes only one desk patch
        if len(desk_patches) == 0:
            return ""no""
        for desk_patch in desk_patches:
            if cat_patch.upper < desk_patch.lower:
                return ""yes""
    return ""no"""
16465081,The man is holding what?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    object_patches = image_patch.find(""object"")
    for object_patch in object_patches:
        if object_patch.horizontal_center > man_patch.horizontal_center:
            return object_patch.simple_query(""What is the man holding?"") # crop would include the object so keep it in the query
    return man_patch.simple_query(""What is the man holding?"")"
17387032,What is on the post?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?,"
    image_patch = ImagePatch(image)
    kids_patches = image_patch.find(""kid"")
    # Question assumes only one kid patch
    if len(kids_patches) == 0:
        # If no kids are found, query the image directly
        return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")
    kids_patch = kids_patches[0]
    looking_at_cake_patches = image_patch.find(""looking at cake"")
    # Question assumes only one looking at cake patch
    if len(looking_at_cake_patches) == 0:
        return ""nothing""
    looking_at_cake_patch = looking_at_cake_patches[0]
    for looking_at_cake_patch in looking_at_cake_patches:
        if looking_at_cake_patch.horizontal_center > kids_patch.horizontal_center:
            return looking_at_cake_patch.simple_query(""What is in front of the kids that are looking at the cake?"") # crop would include the kids so keep it in the query
    return ""nothing"""
18906705,How big is the crowd?,"
    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""crowd"")
    # Question assumes only one crowd patch
    if len(crowd_patches) == 0:
        # If no crowd is found, query the image directly
        return image_patch.simple_query(""How big is the crowd?"")
    return crowd_patches[0].simple_query(""How big is the crowd?"")"
6157200,Does the sign on the pole have white color?,"
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    return sign_patches[0].verify_property(""sign"", ""white"")"
16760226,What's the laptop in front of?,"
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""What's the laptop in front of?"")
    for laptop_patch in laptop_patches:
        object_patches = image_patch.find(""object"")
        for object_patch in object_patches:
            if object_patch.horizontal_center > laptop_patch.horizontal_center:
                return object_patch.simple_query(""What is the laptop in front of?"") # crop would include the object so keep it in the query
    # If no object is in front of the laptop, pick the first object
    return object_patches[0].simple_query(""What is the laptop in front of?"")"
111054070,How large is the bed?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How large is the bed?"")"
14143886,Where is the person with the luggage standing on?,"
    image_patch = ImagePatch(image)
    luggage_patches = image_patch.find(""luggage"")
    # Question assumes only one luggage patch
    if len(luggage_patches) == 0:
        # If no luggage is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    for luggage_patch in luggage_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.lower > luggage_patch.lower:
                return ""left""
            elif person_patch.lower < luggage_patch.lower:
                return ""right""
    return ""center"""
19872633,Are there either any fire extinguishers or pepper shakers?,"
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)"
12755010,Is the bottle to the right of a napkin?,"
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    for bottle_patch in bottle_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if napkin_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""yes""
    return ""no"""
2747001,Are there any soaps or bombs?,"
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?,"
    image_patch = ImagePatch(image)
    baby_giraffe_patches = image_patch.find(""baby giraffe"")
    # Question assumes only one baby giraffe patch
    if len(baby_giraffe_patches) == 0:
        # If no baby giraffe is found, query the image directly
        return image_patch.simple_query(""Do you see baby giraffes or elephants?"")
    baby_elephant_patches = image_patch.find(""baby elephant"")
    # Question assumes only one baby elephant patch
    if len(baby_elephant_patches) == 0:
        # If no baby elephant is found, query the image directly
        return image_patch.simple_query(""Do you see baby giraffes or elephants?"")
    return ""both"""
6898877,What is the sign on?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"")"
15862812,What is the sticker on?,"
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    return sticker_patches[0].simple_query(""What is the sticker on?"") # crop would include the sticker so keep it in the query"
141031470,On which side of the image is the white towel?,"
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    if towel_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
41026846,Who rides a motorcycle?,"
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Who rides a motorcycle?"")
    for motorcycle_patch in motorcycle_patches:
        rider_patches = image_patch.find(""rider"")
        for rider_patch in rider_patches:
            if rider_patch.verify_property(""rider"", ""riding""):
                return rider_patch.simple_query(""Who rides a motorcycle?"") # crop would include the rider so keep it in the query
    # If no rider is found, query the image directly
    return image_patch.simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?,"
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""What is around the bathtub the towel is on?"")
    towel_patch = towel_patches[0]
    bathtub_patches = image_patch.find(""bathtub"")
    # Question assumes only one bathtub patch
    if len(bathtub_patches) == 0:
        return ""water""
    bathtub_patch = bathtub_patches[0]
    if towel_patch.horizontal_center < bathtub_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7469617,Is the man to the left or to the right of the person that is to the left of the people?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
    return ""right"""
64308,What's located on top of the soup?,"
    image_patch = ImagePatch(image)
    soup_patches = image_patch.find(""soup"")
    # Question assumes only one soup patch
    if len(soup_patches) == 0:
        # If no soup is found, query the image directly
        return image_patch.simple_query(""What's located on top of the soup?"")
    for soup_patch in soup_patches:
        top_patches = image_patch.find(""top"")
        for top_patch in top_patches:
            if top_patch.horizontal_center > soup_patch.horizontal_center:
                return top_patch.simple_query(""What's located on top of the soup?"") # crop would include the soup so keep it in the query
    # If no top is found, pick the first top
    return top_patches[0].simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?,"
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    for fence_patch in fence_patches:
        for bench_patch in bench_patches:
            if fence_patch.verify_property(""fence"", ""material"") == bench_patch.verify_property(""bench"", ""material""):
                return ""yes""
    return ""no"""
3196255,Are there helmets that are not white?,"
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmets"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmets are found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.verify_property(""helmets"", ""white"") == False:
            return ""yes""
    return ""no"""
2992630,Is the bowl to the right or to the left of the man that is drinking?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
    return ""left"""
513894,Is the person above the sand wearing glasses?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    person_patch = person_patches[0]
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    sand_patch = sand_patches[0]
    if sand_patch.vertical_center > person_patch.vertical_center:
        return person_patch.verify_property(""person"", ""glasses"")
    return ""no"""
14167599,Is the color of the life preserver the same as that of the house?,"
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    # Question assumes only one life preserver patch
    if len(life_preserver_patches) == 0:
        # If no life preserver is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    life_preserver_patch = life_preserver_patches[0]
    house_patch = house_patches[0]
    return bool_to_yesno(life_preserver_patch.verify_property(""life preserver"", ""color"") == house_patch.verify_property(""house"", ""color""))"
18264755,How is the weather?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?,"
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    for toilet_patch in toilet_patches:
        if not toilet_patch.verify_property(""toilet"", ""closed""):
            animal_patches = image_patch.find(""animal"")
            # Question assumes only one animal patch
            if len(animal_patches) == 0:
                # If no animal is found, query the image directly
                return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
            for animal_patch in animal_patches:
                if animal_patch.lower < toilet_patch.lower:
                    return animal_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"") # crop would include the toilet so keep it in the query
    # If no animal is looking into a non-closed toilet, pick the first animal
    return"
8641613,Do you see any helmets in the picture that are not red?,"
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.verify_property(""helmet"", ""red"") == False:
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?,"
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    for happy_patch in happy_patches:
        object_patches = image_patch.find(""object"")
        for object_patch in object_patches:
            if object_patch.horizontal_center > happy_patch.horizontal_center:
                return object_patch.simple_query(""What does the happy person hold?"") # crop would include the object so keep it in the query
    # If no object is held by the happy person, pick the first object
    return object_patches[0].simple_query(""What does the happy person hold?"")"
8461507,Are there either tissue boxes or lamps in the picture?,"
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is it?"")
    return animal_patches[0].simple_query(""What kind of animal is it?"")"
19102906,What type of drink is to the left of the plate?,"
    image_patch = ImagePatch(image)
    drink_patches = image_patch.find(""drink"")
    # Question assumes only one drink patch
    if len(drink_patches) == 0:
        # If no drink is found, query the image directly
        return image_patch.simple_query(""What type of drink is to the left of the plate?"")
    for drink_patch in drink_patches:
        if drink_patch.horizontal_center < image_patch.horizontal_center:
            return drink_patch.simple_query(""What type of drink is to the left of the plate?"") # crop would include the drink so keep it in the query
    # If no drink is to the left of the plate, pick the first drink
    return drink_patches[0].simple_query(""What type of drink is to the left of the plate?"")"
18315440,Is the sky cloudy and blue?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Is the sky cloudy and blue?"")"
453061,Is the fork on the right of the image?,"
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork on the right of the image?"")
    return bool_to_yesno(fork_patches[0].horizontal_center > image_patch.horizontal_center)"
71002567,"What is the broccoli on, a table or a nightstand?","
    image_patch = ImagePatch(image)
    broccoli_patches = image_patch.find(""broccoli"")
    # Question assumes only one broccoli patch
    if len(broccoli_patches) == 0:
        # If no broccoli is found, query the image directly
        return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    for broccoli_patch in broccoli_patches:
        table_patches = image_patch.find(""table"")
        for table_patch in table_patches:
            if table_patch.horizontal_center > broccoli_patch.horizontal_center:
                return ""table""
        nightstand_patches = image_patch.find(""nightstand"")
        for nightstand_patch in nightstand_patches:
            if nightstand_patch.horizontal_center > broccoli_patch.horizontal_center:
                return ""nightstand""
    # If no table or nightstand is found, pick the first one
    return table_patches[0].simple_query(""What is the broccoli on, a table or a nightstand?"")"
17465089,Is the field green and small?,"
    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Is the field green and small?"")
    for field_patch in field_patches:
        is_green = field_patch.verify_property(""field"", ""green"")
        is_small = field_patch.verify_property(""field"", ""small"")
        if is_green and is_small:
            return ""yes""
    return ""no"""
16150157,What is on the wall?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?,"
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    van_patch = van_patches[0]
    suv_patches = image_patch.find(""SUV"")
    for suv_patch in suv_patches:
        if suv_patch.horizontal_center > van_patch.horizontal_center:
            return ""left""
    return ""right"""
15101358,Is the girl to the left of the boy?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        return ""no""
    for boy_patch in boy_patches:
        for girl_patch in girl_patches:
            if girl_patch.horizontal_center < boy_patch.horizontal_center:
                return ""yes""
    return ""no"""
12785181,What animals are in the grass?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in the grass?"")"
348093,Are there both an apple and a bag in the picture?,"
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)"
314181,Which sign is shown?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which sign is shown?"")"
16275314,"On which side is the woman, the right or the left?","
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19535592,Who runs on the sand?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Who runs on the sand?"")"
156886,Is there a giraffe near the bush?,"
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    for giraffe_patch in giraffe_patches:
        bush_patches = image_patch.find(""bush"")
        for bush_patch in bush_patches:
            if giraffe_patch.horizontal_center > bush_patch.horizontal_center:
                return ""yes""
    return ""no"""
1756642,Which place is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    return shirt_patches[0].simple_query(""Who wears the shirt?"")"
1972390,What type of animal is standing in the field?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal is standing in the field?"")
    return animal_patches[0].simple_query(""What type of animal is standing in the field?"")"
14579439,Is the stuffed animal on the right?,"
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    return bool_to_yesno(stuffed_animal_patches[0].horizontal_center > image_patch.horizontal_center)"
6645395,Is the gray building behind the passengers that are boarding the airplane?,"
    image_patch = ImagePatch(image)
    gray_building_patches = image_patch.find(""gray building"")
    # Question assumes only one gray building patch
    if len(gray_building_patches) == 0:
        # If no gray building is found, query the image directly
        return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")
    for gray_building_patch in gray_building_patches:
        airplane_patches = image_patch.find(""airplane"")
        for airplane_patch in airplane_patches:
            if gray_building_patch.horizontal_center < airplane_patch.horizontal_center:
                return ""yes""
    return ""no"""
19610200,Is the fence metallic?,"
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return bool_to_yesno(fence_patches[0].verify_property(""fence"", ""metallic""))"
5299471,What does the girl that to the left of the trashcan carry?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    for girl_patch in girl_patches:
        trashcan_patches = image_patch.find(""trashcan"")
        for trashcan_patch in trashcan_patches:
            if girl_patch.horizontal_center < trashcan_patch.horizontal_center:
                return girl_patch.simple_query(""What does the girl that to the left of the trashcan carry?"") # crop would include the trashcan so keep it in the query
    # If no girl is to the left of the trashcan, pick the first girl
    return girl_patches[0].simple_query(""What does the girl that to the left of the trashcan carry?"")"
7548203,Which kind of vegetable is on the pizza?,"
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    return vegetable_patches[0].simple_query(""What kind of vegetable is on the pizza?"")"
91027737,On which side is the pan?,"
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?,"
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    for black_car_patch in black_car_patches:
        if black_car_patch.vertical_center > image_patch.vertical_center:
            return ""yes""
    return ""no"""
6144031,Who is in the living room?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?,"
    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?,"
    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return bool_to_yesno(is_bicycle or is_biker)"
844747,Are there both a pillow and a kitten in the image?,"
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)"
1104500,What kind of food is in the box?,"
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What kind of food is in the box?"")
    for box_patch in box_patches:
        food_patches = box_patch.find(""food"")
        # Question assumes only one food patch
        if len(food_patches) == 0:
            return ""box""
        return food_patches[0].simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?,"
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < image_patch.horizontal_center:
            return food_patch.simple_query(""What is the food that is to the left of the kid called?"") # crop would include the food so keep it in the query
    # If no food is to the left of the kid, pick the first food
    return food_patches[0].simple_query(""What is the food that is to the left of the kid called?"")"
11820726,"What device is the desk in front of, a television or a printer?","
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    for desk_patch in desk_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.verify_property(""device"", ""television"") and desk_patch.horizontal_center > device_patch.horizontal_center:
                return ""television""
            elif device_patch.verify_property(""device"", ""printer"") and desk_patch.horizontal_center > device_patch.horizontal_center:
                return ""printer""
    # If no device is found, query the image directly
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")"
18114588,Do you see a helmet there?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see a helmet there?"")"
11950874,What animal is standing on the ground?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""standing""):
            return animal_patch.simple_query(""What animal is standing on the ground?"") # crop would include standing so keep it in the query
    # If no animal is standing on the ground, pick the first animal
    return animal_patches[0].simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?,"
    image_patch = ImagePatch(image)
    small_car_patches = image_patch.find(""small car"")
    # Question assumes only one small car patch
    if len(small_car_patches) == 0:
        # If no small car is found, query the image directly
        return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")
    for small_car_patch in small_car_patches:
        fork_patches = image_patch.find(""fork"")
        for fork_patch in fork_patches:
            if small_car_patch.horizontal_center < fork_patch.horizontal_center:
                return ""yes""
    return ""no"""
16184942,Does that grass look brown and short?,"
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Does that grass look brown and short?"")
    for grass_patch in grass_patches:
        is_brown = (grass_patch.simple_query(""Is the grass brown?"") == ""yes"")
        is_short = (grass_patch.simple_query(""Is the grass short?"") == ""yes"")
        if is_brown and is_short:
            return ""yes""
    return ""no"""
6312238,Is the hydrant to the left of the car?,"
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    # Question assumes only one hydrant patch
    if len(hydrant_patches) == 0:
        # If no hydrant is found, query the image directly
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    for hydrant_patch in hydrant_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if hydrant_patch.horizontal_center < car_patch.horizontal_center:
                return ""yes""
    return ""no"""
16646227,On which side of the picture is the gray car?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    for car_patch in car_patches:
        if car_patch.verify_property(""car"", ""gray""):
            if car_patch.horizontal_center < image_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
    # If no gray car is found, pick the first car
    return car_patches[0].simple_query(""On which side of the picture is the gray car?"")"
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?,"
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    sneaker_patches = image_patch.find(""sneaker"")
    # Question assumes only one sneaker patch
    if len(sneaker_patches) == 0:
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for sneaker_patch in sneaker_patches:
        for ball_patch in ball_patches:
            if ball_patch.horizontal_center > sneaker_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
3443704,What is the woman wearing?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is the woman wearing?"")"
19313572,What is the color of the tent to the left of the vehicles?,"
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    for tent_patch in tent_patches:
        if tent_patch.left < image_patch.left + (image_patch.right - image_patch.left) / 2:
            return tent_patch.simple_query(""What is the color of the tent?"")
    return ""red"""
10885675,What is the toilet seat made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?,"
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    blanket_patch = blanket_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > blanket_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is resting on the blanket?"") # crop would include the blanket so keep it in the query
    # If no animal is on the blanket, pick the first animal
    return animal_patches[0].simple_query(""What animal is resting on the blanket?"")"
14561612,What color do you think the bikini that the woman is wearing is?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    woman_patch = woman_patches[0]
    bikini_patches = image_patch.find(""bikini"")
    # Question assumes only one bikini patch
    if len(bikini_patches) == 0:
        return ""red""
    for bikini_patch in bikini_patches:
        if bikini_patch.horizontal_center > woman_patch.horizontal_center:
            return bikini_patch.simple_query(""What color is the bikini?"") # crop would include the bikini so keep it in the query
    # If no bikini is found, pick the first bikini
    return bikini_patches[0].simple_query(""What color is the bikini?"")"
6587755,Are both the room and the bowl the same color?,"
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    # Question assumes only one room patch
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""Are both the room and the bowl the same color?"")
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return ""yes""
    for room_patch in room_patches:
        for bowl_patch in bowl_patches:
            if room_patch.verify_property(""room"", ""color"") == bowl_patch.verify_property(""bowl"", ""color""):
                return ""yes""
    return ""no"""
4479543,Is the barn white or brown?,"
    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    # Question assumes only one barn patch
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    return barn_patches[0].best_text_match([""white"", ""brown""])"
972522,Does the box look white or brown?,"
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].best_text_match([""white"", ""brown""])"
3948528,What is the bowl made of?,"
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What is the bowl made of?"")
    return bowl_patches[0].simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?,"
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    for bench_patch in bench_patches:
        rock_patches = image_patch.find(""rock"")
        for rock_patch in rock_patches:
            if bench_patch.horizontal_center < rock_patch.horizontal_center:
                return bench_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    return bench_patches[0].simple_query(""Is the bench in front of the rock gray or red?"")"
866459,On which side is the couch?,"
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8614812,Is the person that is playing wearing shorts?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return ""yes""
    return ""no"""
167438,What is wearing the ground?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?,"
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wooden""):
            return furniture_patch.simple_query(""Which kind of furniture is wooden?"") # crop would include the furniture so keep it in the query
    # If no furniture is wooden, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is wooden?"")"
1042377,Who is standing beside the person that is wearing a dress?,"
    image_patch = ImagePatch(image)
    dress_patches = image_patch.find(""dress"")
    # Question assumes only one dress patch
    if len(dress_patches) == 0:
        # If no dress is found, query the image directly
        return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    dress_patch = dress_patches[0]
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center > dress_patch.horizontal_center:
            return man_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?,"
    image_patch = ImagePatch(image)
    long_ski_patches = image_patch.find(""long ski"")
    # Question assumes only one long ski patch
    if len(long_ski_patches) == 0:
        # If no long ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    return long_ski_patches[0].simple_query(""How fat are the long skis?"") # crop would include the fat so keep it in the query"
2211743,Is the sky clear or overcast?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?,"
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
    for bottle_patch in bottle_patches:
        pencil_patches = image_patch.find(""pencil"")
        for pencil_patch in pencil_patches:
            if pencil_patch.vertical_center < bottle_patch.vertical_center:
                return ""yes""
    return ""no"""
15478302,Is there any dark door or window in the image?,"
    image_patch = ImagePatch(image)
    dark_door_patches = image_patch.find(""dark door"")
    dark_window_patches = image_patch.find(""dark window"")
    return bool_to_yesno(len(dark_door_patches) > 0 or len(dark_window_patches) > 0)"
18414234,Do you see either a knife or a chair in the picture?,"
    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)"
19779815,Is the book red or yellow?,"
    image_patch = ImagePatch(image)
    red_patches = image_patch.find(""red book"")
    yellow_patches = image_patch.find(""yellow book"")
    # Question assumes only one red or yellow book patch
    if len(red_patches) > 0:
        return ""red""
    elif len(yellow_patches) > 0:
        return ""yellow""
    else:
        # If no red or yellow book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")"
7257283,Are there men to the left of the picture?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    return bool_to_yesno(len(man_patches) > 0)"
6621625,On which side of the picture is the bench?,"
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    if bench_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19311589,Are there both fences and horses in this picture?,"
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?,"
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    for device_patch in device_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center < device_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"") # crop would include the person so keep it in the query
    # If no device is to the right of the container that the person is to the left of, pick the first device
    return device_patches[0].simple_query(""What device is to the right of the container that the person is to the left of?"")"
171031333,Do you see blankets in the picture that are not black?,"
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Do you see blankets in the picture that are not black?"")
    for blanket_patch in blanket_patches:
        if blanket_patch.verify_property(""blanket"", ""black"") == False:
            return ""yes""
    return ""no"""
16695341,What is the fence made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?,"
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)"
5111363,Are there chairs or tables that are not blue?,"
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    is_blue = image_patch.verify_property(""furniture"", ""blue"")
    return bool_to_yesno(is_chair or is_table)"
9230971,Which place is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?,"
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    return hair_patches[0].verify_property(""hair"", ""short"") and hair_patches[0].verify_property(""hair"", ""white"")"
4822200,Do you see any lettuce on the food with the meat?,"
    image_patch = ImagePatch(image)
    meat_patches = image_patch.find(""meat"")
    # Question assumes only one meat patch
    if len(meat_patches) == 0:
        # If no meat is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    lettuce_patches = image_patch.find(""lettuce"")
    for meat_patch in meat_patches:
        for lettuce_patch in lettuce_patches:
            if lettuce_patch.horizontal_center > meat_patch.horizontal_center:
                return ""yes""
    return ""no"""
3726666,What device is to the left of the curtain that is to the left of the glasses?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")"
9954849,What kind of furniture is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?,"
    image_patch = ImagePatch(image)
    red_train_patches = image_patch.find(""red train"")
    red_bus_patches = image_patch.find(""red bus"")
    return bool_to_yesno(len(red_train_patches) > 0 or len(red_bus_patches) > 0)"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?,"
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    lettuce_patch = lettuce_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center < lettuce_patch.horizontal_center:
            return vegetable_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"") # crop would include the lettuce so keep it in the query
    # If no vegetable is to the left of the lettuce, pick the first vegetable
    return vegetable_patches[0].simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")"
623393,"What type of clothing is tan, the hat or the vest?","
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    for tan_patch in tan_patches:
        hat_patches = image_patch.find(""hat"")
        for hat_patch in hat_patches:
            if tan_patch.horizontal_center > hat_patch.horizontal_center:
                return ""vest""
    return ""hat"""
6436448,Is the color of the skirt the same as the scarf?,"
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        return ""no""
    for skirt_patch in skirt_patches:
        for scarf_patch in scarf_patches:
            if skirt_patch.verify_property(""skirt"", ""color"") == scarf_patch.verify_property(""scarf"", ""color""):
                return ""yes""
    return ""no"""
3303313,Is the blanket under a cat?,"
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is the blanket under a cat?"")
    blanket_patch = blanket_patches[0]
    cat_patches = image_patch.find(""cat"")
    for cat_patch in cat_patches:
        if blanket_patch.upper > cat_patch.lower:
            return ""yes""
    return ""no"""
443663,What color is the picture?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        return ""no""
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1885406,What is the toy on the bed?,"
    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What is the toy on the bed?"")
    return toy_patches[0].simple_query(""What is the toy on the bed?"") # crop would include the toy so keep it in the query"
5557965,On which side is the bag?,"
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?,"
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3196355,What does the batter hold?,"
    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    return batter_patches[0].simple_query(""What does the batter hold?"")"
14470748,Who wears a jacket?,"
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    return jacket_patches[0].simple_query(""Who wears a jacket?"")"
16537736,Are there any houses behind the shrubs?,"
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    for house_patch in house_patches:
        shrub_patches = image_patch.find(""shrub"")
        for shrub_patch in shrub_patches:
            if house_patch.horizontal_center > shrub_patch.horizontal_center:
                return ""yes""
    return ""no"""
1129541,What piece of furniture is made of wood?,"
    image_patch = ImagePatch(image)
    wood_patches = image_patch.find(""wood"")
    # Question assumes only one wood patch
    if len(wood_patches) == 0:
        # If no wood is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    for wood_patch in wood_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.verify_property(""furniture"", ""made of wood""):
                return furniture_patch.simple_query(""What piece of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, pick the first wood patch
    return wood_patches[0].simple_query(""What piece of furniture is made of wood?"")"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
12416703,Where is that cat?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Where is that cat?"")"
15603088,The animal to the right of the envelope is lying on what?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.find(""envelope"")[0].horizontal_center:
            return animal_patch.simple_query(""The animal to the right of the envelope is lying on what?"") # crop would include the envelope so keep it in the query
    # If no animal is to the right of the envelope, pick the first animal
    return animal_patches[0].simple_query(""The animal to the right of the envelope is lying on what?"")"
5329077,Is the man on a bench?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on a bench?"")
    for man_patch in man_patches:
        bench_patches = image_patch.find(""bench"")
        # Question assumes only one bench patch
        if len(bench_patches) == 0:
            return ""no""
        for bench_patch in bench_patches:
            if man_patch.upper == bench_patch.lower:
                return ""yes""
    return ""no"""
1945705,What kind of device is to the left of the device that looks silver and gray?,"
    image_patch = ImagePatch(image)
    silver_gray_patches = image_patch.find(""device"")
    # Question assumes only one silver gray patch
    if len(silver_gray_patches) == 0:
        # If no silver gray device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    silver_gray_patch = silver_gray_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < silver_gray_patch.horizontal_center:
            return device_patch.simple_query(""What kind of device?"")
    # If no device is to the left of the silver gray device, pick the first device
    return device_patches[0].simple_query(""What kind of device?"")"
17520003,What vehicle is to the right of the pine tree?,"
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > image_patch.find(""pine tree"")[0].horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is to the right of the pine tree?"") # crop would include the pine tree so keep it in the query
    # If no vehicle is to the right of the pine tree, pick the first vehicle
    return vehicle_patches[0].simple_query(""What vehicle is to the right of the pine tree?"")"
1259983,Who is wearing pants?,"
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    for pants_patch in pants_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.verify_property(""man"", ""standing""):
                return man_patch.simple_query(""Who is wearing pants?"") # crop would include the man so keep it in the query
    # If no man is standing, pick the first pants patch
    return pants_patches[0].simple_query(""Who is wearing pants?"")"
6413378,Is there a black keyboard or camera?,"
    image_patch = ImagePatch(image)
    black_keyboard_patches = image_patch.find(""black keyboard"")
    # Question assumes only one black keyboard patch
    if len(black_keyboard_patches) == 0:
        # If no black keyboard is found, query the image directly
        return image_patch.simple_query(""Is there a black keyboard or camera?"")
    black_camera_patches = image_patch.find(""black camera"")
    # Question assumes only one black camera patch
    if len(black_camera_patches) == 0:
        return ""no""
    return ""yes"""
947305,Is the sunny water blue and high?,"
    image_patch = ImagePatch(image)
    sunny_water_patches = image_patch.find(""sunny water"")
    # Question assumes only one sunny water patch
    if len(sunny_water_patches) == 0:
        # If no sunny water is found, query the image directly
        return image_patch.simple_query(""Is the sunny water blue and high?"")
    for sunny_water_patch in sunny_water_patches:
        is_blue = (sunny_water_patch.simple_query(""Is the sunny water blue?"") == ""yes"")
        is_high = (sunny_water_patch.simple_query(""Is the sunny water high?"") == ""yes"")
        if is_blue and is_high:
            return ""yes""
    return ""no"""
4367817,What type of animal in this scene is brown?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""brown""):
            return animal_patch.simple_query(""What type of animal in this scene is brown?"") # crop would include the brown so keep it in the query
    # If no animal is brown, pick the first animal
    return animal_patches[0].simple_query(""What type of animal in this scene is brown?"")"
15485572,What is the vegetable on the hot dog with the cheese?,"
    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    for hot_dog_patch in hot_dog_patches:
        cheese_patches = image_patch.find(""cheese"")
        # Question assumes only one cheese patch
        if len(cheese_patches) == 0:
            return ""veggie""
        for cheese_patch in cheese_patches:
            if cheese_patch.horizontal_center > hot_dog_patch.horizontal_center:
                return hot_dog_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"") # crop would include the cheese so keep it in the query
    # If no cheese is found, pick the first hot dog
    return hot_dog_patches[0].simple_query(""What is the vegetable on the hot dog with the cheese?"")"
12661142,What is the appliance in the kitchen called?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the appliance in the kitchen called?"")"
41012743,The arrow is on what?,"
    image_patch = ImagePatch(image)
    arrow_patches = image_patch.find(""arrow"")
    # Question assumes only one arrow patch
    if len(arrow_patches) == 0:
        # If no arrow is found, query the image directly
        return image_patch.simple_query(""The arrow is on what?"")
    return arrow_patches[0].simple_query(""The arrow is on what?"")"
4777414,What color is the bicycle in the bottom of the photo?,"
    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    # Question assumes only one bicycle patch
    if len(bicycle_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    return bicycle_patches[0].simple_query(""What color is the bicycle in the bottom of the photo?"")"
1185988,What is the device on top of the table that is to the right of the trashcan?,"
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    for device_patch in device_patches:
        trashcan_patches = image_patch.find(""trashcan"")
        for trashcan_patch in trashcan_patches:
            if trashcan_patch.horizontal_center > device_patch.horizontal_center:
                return device_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"") # crop would include the trashcan so keep it in the query
    # If no device is to the right of the trashcan, pick the first device
    return device_patches[0].simple_query(""What is the device on top of the table that is to the right of the trashcan?"")"
13582968,Was granite used to make that floor?,"
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""Was granite used to make that floor?"")
    for floor_patch in floor_patches:
        if floor_patch.verify_property(""floor"", ""granite""):
            return ""yes""
    return ""no"""
6235273,Are there women in the photo?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there women in the photo?"")"
5377974,What is the girl playing with?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    return girl_patches[0].simple_query(""What is the girl playing with?"")"
51037065,On which side of the image is the fridge?,"
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    fridge_patch = fridge_patches[0]
    if fridge_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5299477,Which kind of bag does the girl carry?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    for bag_patch in bag_patches:
        for girl_patch in girl_patches:
            if bag_patch.horizontal_center > girl_patch.horizontal_center:
                return bag_patch.simple_query(""What kind of bag is it?"") # crop would include the bag so keep it in the query
    # If no bag is to the right of the girl, pick the first bag
    return bag_patches[0].simple_query(""What kind of bag is it?"")"
15135617,Is the white dog on a bench?,"
    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog on a bench?"")
    for white_dog_patch in white_dog_patches:
        bench_patches = image_patch.find(""bench"")
        # Question assumes only one bench patch
        if len(bench_patches) == 0:
            return ""no""
        for bench_patch in bench_patches:
            if white_dog_patch.upper == bench_patch.lower:
                return ""yes""
    return ""no"""
1111583,Is the male person to the right of a person?,"
    image_patch = ImagePatch(image)
    male_person_patches = image_patch.find(""male person"")
    # Question assumes only one male person patch
    if len(male_person_patches) == 0:
        # If no male person is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_person_patch in male_person_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > male_person_patch.horizontal_center:
                return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?,"
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
15610844,What kind of place is shown?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")"
11869032,Is the banana below a bird?,"
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Is the banana below a bird?"")
    for banana_patch in banana_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if banana_patch.vertical_center < bird_patch.vertical_center:
                return ""yes""
    return ""no"""
9878360,What color is the vehicle to the left of the fence?,"
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.left < image_patch.left:
            return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"") # crop would include the fence so keep it in the query
    # If no vehicle is to the left of the fence, pick the first vehicle
    return vehicle_patches[0].simple_query(""What color is the vehicle to the left of the fence?"")"
481765,Are there either any buses or trains in the image?,"
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes only one traffic cone patch
    if len(traffic_cone_patches) == 0:
        # If no traffic cone is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    traffic_cone_patch = traffic_cone_patches[0]
    if traffic_cone_patch.horizontal_center > man_patch.horizontal_center:
        return man_patch.verify_property(""man"", ""cap"")
    return ""no"""
11981238,What is common to the blazer and the suit?,"
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    # Question assumes only one blazer patch
    if len(blazer_patches) == 0:
        # If no blazer is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one suit patch
    if len(suit_patches) == 0:
        return ""suit""
    for suit_patch in suit_patches:
        for blazer_patch in blazer_patches:
            if suit_patch.horizontal_center == blazer_patch.horizontal_center:
                return ""collar""
    return ""pocket"""
16245,Is the shirt white or green?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    return shirt_patches[0].best_text_match([""white"", ""green""])"
2595103,"In which part of the image are the cars, the bottom or the top?","
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?","
    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""How does the sand look, dry or wet?"")
    return sand_patches[0].simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?,"
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    banana_patch = banana_patches[0]
    fruit_patches = image_patch.find(""fruit"")
    for fruit_patch in fruit_patches:
        if fruit_patch.horizontal_center > banana_patch.horizontal_center:
            return ""yes""
    return ""no"""
6376614,What color is the car in the middle?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    return car_patches[0].simple_query(""What color is the car in the middle?"")"
712063,What's the lamp made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?,"
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    for furniture_patch in furniture_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the right of the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is to the right of the pillow, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is to the right of the pillow?"")"
9647343,What type of material is the patio made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?,"
    image_patch = ImagePatch(image)
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one suit patch
    if len(suit_patches) == 0:
        # If no suit is found, query the image directly
        return image_patch.simple_query(""Who is wearing the suit?"")
    return suit_patches[0].simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?,"
    image_patch = ImagePatch(image)
    clouds_patches = image_patch.find(""clouds"")
    # Question assumes only one clouds patch
    if len(clouds_patches) == 0:
        # If no clouds are found, query the image directly
        return image_patch.simple_query(""What is the color of the clouds in the sky?"")
    return clouds_patches[0].simple_query(""What is the color of the clouds in the sky?"")"
9843309,Do the flowers look orange?,"
    image_patch = ImagePatch(image)
    flowers_patches = image_patch.find(""flowers"")
    # Question assumes only one flowers patch
    if len(flowers_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return flowers_patches[0].verify_property(""flowers"", ""orange"")"
618996,Is there a chair or a bed in this image?,"
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?,"
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    for truck_patch in truck_patches:
        umbrella_patches = image_patch.find(""umbrella"")
        for umbrella_patch in umbrella_patches:
            if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
                return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = man_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return man_patch.simple_query(""What color are the pants the man is wearing?"")
    return pants_patches[0].simple_query(""What color are the pants the man is wearing?"")"
551601,Are there any pillows or chairs in the image?,"
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?,"
    image_patch = ImagePatch(image)
    person_with_bag_patches = image_patch.find(""person with bag"")
    # Question assumes only one person with bag patch
    if len(person_with_bag_patches) == 0:
        # If no person with bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    for person_with_bag_patch in person_with_bag_patches:
        women_patches = image_patch.find(""woman"")
        for women_patch in women_patches:
            if women_patch.horizontal_center < person_with_bag_patch.horizontal_center:
                return ""yes""
    return ""no"""
5925408,What is the bike in front of?,"
    image_patch = ImagePatch(image)
    bike_patches = image_patch.find(""bike"")
    # Question assumes only one bike patch
    if len(bike_patches) == 0:
        # If no bike is found, query the image directly
        return image_patch.simple_query(""What is the bike in front of?"")
    bike_patch = bike_patches[0]
    for object_patch in image_patch.find(""object""):
        if object_patch.horizontal_center > bike_patch.horizontal_center:
            return object_patch.simple_query(""What is the bike in front of?"") # crop would include the object so keep it in the query
    return ""nothing"""
11328059,What type of fast food is shown in this photo?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?,"
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)"
13778498,What type of vehicle is behind the green tree?,"
    image_patch = ImagePatch(image)
    green_tree_patches = image_patch.find(""green tree"")
    # Question assumes only one green tree patch
    if len(green_tree_patches) == 0:
        # If no green tree is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is behind the green tree?"")
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""none""
    for vehicle_patch in vehicle_patches:
        for green_tree_patch in green_tree_patches:
            if vehicle_patch.horizontal_center > green_tree_patch.horizontal_center:
                return vehicle_patch.simple_query(""What type of vehicle is behind the green tree?"") # crop would include the green tree so keep it in the query
    # If no vehicle is behind the green tree, pick the first vehicle
    return vehicle_patches[0].simple_query(""What type of vehicle is behind the green tree?"")"
41019603,What is the child standing on?,"
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child standing on?"")
    for child_patch in child_patches:
        standing_on_patches = image_patch.find(""standing on"")
        for standing_on_patch in standing_on_patches:
            if child_patch.horizontal_center == standing_on_patch.horizontal_center and child_patch.vertical_center == standing_on_patch.vertical_center:
                return standing_on_patch.simple_query(""What is the child standing on?"") # crop would include the child so keep it in the query
    # If no child is standing on anything, pick the first standing on patch
    return standing_on_patches[0].simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?,"
    image_patch = ImagePatch(image)
    wooden_patches = image_patch.find(""wooden item of furniture"")
    # Question assumes only one wooden patch
    if len(wooden_patches) == 0:
        # If no wooden item of furniture is found, query the image directly
        return image_patch.simple_query(""What is the wooden item of furniture called?"")
    return wooden_patches[0].simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?,"
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    for kite_patch in kite_patches:
        is_triangular = (kite_patch.simple_query(""Is the kite triangular?"") == ""yes"")
        if is_triangular:
            return kite_patch.simple_query(""What color is the kite that looks triangular?"") # crop would include the kite so keep it in the query
    # If no triangular kite is found, pick the first kite
    return kite_patches[0].simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?,"
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    for building_patch in building_patches:
        tree_patches = image_patch.find(""tree"")
        for tree_patch in tree_patches:
            if building_patch.horizontal_center > tree_patch.horizontal_center:
                return building_patch.simple_query(""Is the building behind the tree white or brown?"")
    return ""brown"""
5749240,Are the glove and the undershirt both black?,"
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    glove_patch = glove_patches[0]
    undershirt_patches = image_patch.find(""undershirt"")
    # Question assumes only one undershirt patch
    if len(undershirt_patches) == 0:
        # If no undershirt is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    undershirt_patch = undershirt_patches[0]
    return bool_to_yesno(glove_patch.verify_property(""glove"", ""black"") and undershirt_patch.verify_property(""undershirt"", ""black""))"
18573157,Is the juice in a cup?,"
    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    # Question assumes only one juice patch
    if len(juice_patches) == 0:
        # If no juice is found, query the image directly
        return image_patch.simple_query(""Is the juice in a cup?"")
    for juice_patch in juice_patches:
        if juice_patch.verify_property(""juice"", ""in a cup""):
            return ""yes""
    return ""no"""
3445929,Is the brown horse on the right side of the photo?,"
    image_patch = ImagePatch(image)
    brown_horse_patches = image_patch.find(""brown horse"")
    # Question assumes only one brown horse patch
    if len(brown_horse_patches) == 0:
        # If no brown horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    return bool_to_yesno(brown_horse_patches[0].horizontal_center > image_patch.horizontal_center)"
16541709,Where is the grass?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")"
15764335,Are there any dogs on the tan sand?,"
    image_patch = ImagePatch(image)
    is_dog = image_patch.exists(""dog"")
    is_tan = image_patch.verify_property(""sand"", ""tan"")
    return bool_to_yesno(is_dog and is_tan)"
1478089,Are the door and the garage door made of the same material?,"
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    garage_door_patches = image_patch.find(""garage door"")
    # Question assumes only one garage door patch
    if len(garage_door_patches) == 0:
        return ""yes""
    for door_patch in door_patches:
        for garage_door_patch in garage_door_patches:
            if door_patch.verify_property(""material"", garage_door_patch.simple_query(""What is the material of the garage door?"")):
                return ""yes""
    return ""no"""
1250685,Was this picture taken in a bathroom or at a dining room?,"
    image_patch = ImagePatch(image)
    bathroom_patches = image_patch.find(""bathroom"")
    # Question assumes only one bathroom patch
    if len(bathroom_patches) == 0:
        # If no bathroom is found, query the image directly
        return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"")
    dining_room_patches = image_patch.find(""dining room"")
    # Question assumes only one dining room patch
    if len(dining_room_patches) == 0:
        return ""bathroom""
    return ""dining room"""
10436844,Is the zebra's nose soft and brown?,"
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    zebra_patch = zebra_patches[0]
    nose_patches = zebra_patch.find(""nose"")
    # Question assumes only one nose patch
    if len(nose_patches) == 0:
        # If no nose is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    nose_patch = nose_patches[0]
    is_soft = nose_patch.verify_property(""nose"", ""soft"")
    is_brown = nose_patch.verify_property(""nose"", ""brown"")
    return bool_to_yesno(is_soft and is_brown)"
10683765,Does the shirt have blue color?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""blue""))"
1593352,Do the draperies look white and striped?,"
    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""drapery"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    for drapery_patch in drapery_patches:
        if drapery_patch.verify_property(""drapery"", ""white"") and drapery_patch.verify_property(""drapery"", ""striped""):
            return ""yes""
    return ""no"""
16553304,Are the trunks both long and wide?,"
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    for trunk_patch in trunk_patches:
        is_long = trunk_patch.verify_property(""trunk"", ""long"")
        is_wide = trunk_patch.verify_property(""trunk"", ""wide"")
        if is_long and is_wide:
            return ""yes""
    return ""no"""
7165102,Is the car on the left of the photo?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the car on the left of the photo?"")
    return bool_to_yesno(car_patches[0].horizontal_center < image_patch.horizontal_center)"
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?,"
    image_patch = ImagePatch(image)
    yellow_green_banana_patches = image_patch.find(""yellow green banana"")
    # Question assumes only one yellow green banana patch
    if len(yellow_green_banana_patches) == 0:
        # If no yellow green banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for yellow_green_banana_patch in yellow_green_banana_patches:
        is_short = (yellow_green_banana_patch.simple_query(""Is the banana short?"") == ""yes"")
        if not is_short:
            return ""no""
    return ""yes"""
19279872,What is the man to the right of the helmet wearing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        return ""nothing""
    for helmet_patch in helmet_patches:
        if man_patch.horizontal_center > helmet_patch.horizontal_center:
            return man_patch.simple_query(""What is the man to the right of the helmet wearing?"") # crop would include the helmet so keep it in the query
    return ""nothing"""
4285513,What is the color of the floor?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor?"")"
3974266,Do the trousers look tan?,"
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan""))"
11595009,What are the devices to the right of the device that is to the right of the remote control?,"
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    remote_control_patch = remote_control_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    device_patch = device_patches[0]
    for device_patch in device_patches:
        if device_patch.horizontal_center > remote_control_patch.horizontal_center:
            return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"") # crop would include the remote control so keep it in the query
    # If no device is to the right of the remote control, pick the first device
    return device_patches"
6183000,Are there nightstands or beds?,"
    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_nightstand or is_bed)"
14143982,Is it an outdoors scene?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an outdoors scene?"")"
6123160,Are the speakers to the left of a Wii controller?,"
    image_patch = ImagePatch(image)
    speakers_patches = image_patch.find(""speakers"")
    # Question assumes only one speakers patch
    if len(speakers_patches) == 0:
        # If no speakers are found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    for speakers_patch in speakers_patches:
        wii_controller_patches = image_patch.find(""Wii controller"")
        for wii_controller_patch in wii_controller_patches:
            if speakers_patch.horizontal_center < wii_controller_patch.horizontal_center:
                return ""yes""
    return ""no"""
3681634,Is the plastic fork in the top or in the bottom part of the photo?,"
    image_patch = ImagePatch(image)
    plastic_fork_patches = image_patch.find(""plastic fork"")
    # Question assumes only one plastic fork patch
    if len(plastic_fork_patches) == 0:
        # If no plastic fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    if plastic_fork_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
13629530,What is the vehicle on the street?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?,"
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return man_patch.simple_query(""What color is the hat the man is in?"")
    for hat_patch in hat_patches:
        if hat_patch.horizontal_center > man_patch.horizontal_center:
            return hat_patch.simple_query(""What color is the hat the man is in?"") # crop would include the man so keep it in the query
    return man_patch.simple_query(""What color is the hat the man is in?"")"
1849976,What vegetables are to the left of the spoon?,"
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center < image_patch.horizontal_center:
            return vegetable_patch.simple_query(""What vegetables are to the left of the spoon?"") # crop would include the spoon so keep it in the query
    # If no vegetable is to the left of the spoon, pick the first vegetable
    return vegetable_patches[0].simple_query(""What vegetables are to the left of the spoon?"")"
14827816,Is the statue made of bronze or stone?,"
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    for statue_patch in statue_patches:
        is_bronze = (statue_patch.simple_query(""Is the statue made of bronze?"") == ""yes"")
        if is_bronze:
            return ""bronze""
    return ""stone"""
857204,What's the woman wearing?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"")"
2201105,Is the ball pink?,"
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return ball_patches[0].verify_property(""ball"", ""pink"")"
14616023,What piece of furniture are the cords in front of?,"
    image_patch = ImagePatch(image)
    cord_patches = image_patch.find(""cord"")
    # Question assumes only one cord patch
    if len(cord_patches) == 0:
        # If no cord is found, query the image directly
        return image_patch.simple_query(""What piece of furniture are the cords in front of?"")
    for cord_patch in cord_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.upper > cord_patch.lower:
                return furniture_patch.simple_query(""What piece of furniture are the cords in front of?"") # crop would include the cord so keep it in the query
    # If no furniture is in front of the cord, pick the first furniture
    return furniture_patches[0].simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?,"
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""black car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What is the striped animal called?"")"
1479068,Is it outdoors?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
16155046,Is the dry grass below a zebra?,"
    image_patch = ImagePatch(image)
    dry_grass_patches = image_patch.find(""dry grass"")
    # Question assumes only one dry grass patch
    if len(dry_grass_patches) == 0:
        # If no dry grass is found, query the image directly
        return image_patch.simple_query(""Is the dry grass below a zebra?"")
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        return ""no""
    for zebra_patch in zebra_patches:
        for dry_grass_patch in dry_grass_patches:
            if dry_grass_patch.lower > zebra_patch.lower:
                return ""yes""
    return ""no"""
16515071,What is the person in the water wearing?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""swimming""):
            return person_patch.simple_query(""What is the person in the water wearing?"") # crop would include the swimming so keep it in the query
    # If no person is swimming, pick the first person
    return person_patches[0].simple_query(""What is the person in the water wearing?"")"
161015042,Who is wearing the goggles?,"
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Who is wearing the goggles?"")
    for goggles_patch in goggles_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center == goggles_patch.horizontal_center:
                return ""man""
    return ""person"""
19149868,What is pulled by the lady?,"
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""What is pulled by the lady?"")
    for lady_patch in lady_patches:
        pulled_patches = image_patch.find(""pulled"")
        for pulled_patch in pulled_patches:
            if lady_patch.horizontal_center > pulled_patch.horizontal_center:
                return pulled_patch.simple_query(""What is pulled by the lady?"") # crop would include the lady so keep it in the query
    # If no pulled is found, pick the first lady
    return lady_patches[0].simple_query(""What is pulled by the lady?"")"
5199994,What's the man wearing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        return man_patch.simple_query(""What's the man wearing?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.horizontal_center > man_patch.horizontal_center:
            return clothing_patch.simple_query(""What's the man wearing?"") # crop would include the clothing so keep it in the query
    return man_patch.simple_query(""What's the man wearing?"")"
19184475,Are the man glasses on the left side of the image?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
7149602,Is the shirt orange or blue?,"
    image_patch = ImagePatch(image)
    orange_patches = image_patch.find(""orange"")
    # Question assumes only one orange patch
    if len(orange_patches) == 0:
        # If no orange is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    blue_patches = image_patch.find(""blue"")
    # Question assumes only one blue patch
    if len(blue_patches) == 0:
        # If no blue is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    return image_patch.best_text_match([""orange"", ""blue""])"
19479555,What is the person to the right of the benches holding?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    person_patch = person_patches[0]
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    for bench_patch in bench_patches:
        if bench_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.best_text_match([""book"", ""phone"", ""ball"", ""frisbee"", ""snowball"", ""snowman"", ""snowflake"", ""snow"", ""sled"", ""snowshoes"", ""snowboard"", ""snowplow"", ""snowman without a hat"", ""snowman with a hat"", ""snowman with a red hat"", ""snowman with a blue hat"
19273393,Are there both a door and a window in this photo?,"
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
6481656,What is the man doing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    return man_patches[0].simple_query(""What is the man doing?"")"
13127703,What kind of drink is to the left of the bottle the woman is pouring?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")"
2378018,What is the toilet in front of?,"
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the toilet in front of?"")
    toilet_patch = toilet_patches[0]
    for object_patch in image_patch.find(""object""):
        if object_patch.horizontal_center > toilet_patch.horizontal_center:
            return object_patch.simple_query(""What is the toilet in front of?"") # crop would include the object so keep it in the query
    return ""sink"""
8430841,Is the frisbee to the left of the guy?,"
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    for frisbee_patch in frisbee_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if frisbee_patch.horizontal_center < man_patch.horizontal_center:
                return ""yes""
    return ""no"""
18616818,The man is watching who?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is watching who?"")
    man_patch = man_patches[0]
    watch_patches = image_patch.find(""watch"")
    # Question assumes only one watch patch
    if len(watch_patches) == 0:
        return ""himself""
    for watch_patch in watch_patches:
        if watch_patch.horizontal_center > man_patch.horizontal_center:
            return image_patch.simple_query(""The man is watching who?"") # crop would include the man so keep it in the query
    return ""the woman"""
179526,Is the white dog behind a girl?,"
    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog behind a girl?"")
    for white_dog_patch in white_dog_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if white_dog_patch.horizontal_center > girl_patch.horizontal_center:
                return ""yes""
    return ""no"""
21018827,Is the river murky and calm?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Is the river murky and calm?"")"
3697449,Who is wearing a shirt?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?,"
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        return ""none""
    for sign_patch in sign_patches:
        if car_patches[0].vertical_center == sign_patch.vertical_center:
            return ""their vertical center""
    return ""their horizontal center"""
11764476,Which place is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?,"
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    return plate_patches[0].simple_query(""On what kind of furniture is the plate?"")"
61022361,What is the painting that is to the left of the clock hanging on?,"
    image_patch = ImagePatch(image)
    painting_patches = image_patch.find(""painting"")
    # Question assumes only one painting patch
    if len(painting_patches) == 0:
        # If no painting is found, query the image directly
        return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    for painting_patch in painting_patches:
        clock_patches = image_patch.find(""clock"")
        for clock_patch in clock_patches:
            if painting_patch.horizontal_center < clock_patch.horizontal_center:
                return painting_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"") # crop would include the clock so keep it in the query
    # If no painting is to the left of a clock, pick the first painting
    return painting_patches[0].simple_query(""What is the painting that is to the left of the clock hanging on?"")"
1527392,"What color is the fence, tan or black?","
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    black_patches = image_patch.find(""black"")
    # Question assumes only one black patch
    if len(black_patches) == 0:
        # If no black is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    return image_patch.best_text_match([""tan"", ""black""])"
19229351,Do you see both bowls and carrots?,"
    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)"
1297082,On which side is the silver fork?,"
    image_patch = ImagePatch(image)
    silver_fork_patches = image_patch.find(""silver fork"")
    # Question assumes only one silver fork patch
    if len(silver_fork_patches) == 0:
        # If no silver fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    if silver_fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16757832,Are there any blue helmets or napkins?,"
    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.exists(""blue helmet"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_blue_helmet or is_napkin)"
839816,"In which part of the photo is the racket, the top or the bottom?","
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12385226,Is there a mirror in the bathroom?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a mirror in the bathroom?"")"
18720852,Are there either blankets or tents in this picture?,"
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    woman_patch = woman_patches[0]
    cardboard_box_patches = image_patch.find(""cardboard box"")
    # Question assumes only one cardboard box patch
    if len(cardboard_box_patches) == 0:
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    cardboard_box_patch = cardboard_box_patches[0]
    if cardboard_box_patch.horizontal_center > woman_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
19453453,Who is wearing a shirt?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?,"
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    if house_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?,"
    image_patch = ImagePatch(image)
    red_flower_patches = image_patch.find(""red flower"")
    # Question assumes only one red flower patch
    if len(red_flower_patches) == 0:
        # If no red flower is found, query the image directly
        return image_patch.simple_query(""What is in front of the flowers that look red?"")
    red_flower_patch = red_flower_patches[0]
    other_flower_patches = image_patch.find(""flower"")
    for other_flower_patch in other_flower_patches:
        if other_flower_patch.horizontal_center > red_flower_patch.horizontal_center:
            return other_flower_patch.simple_query(""What is in front of the flowers that look red?"") # crop would include the red flower so keep it in the query
    # If no other flower is in front of the red flower, pick the first other flower
    return other_flower_patches[0].simple_query(""What is in front of the flowers that look red?"")"
15710688,Is the shirt short sleeved or sleeveless?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    return shirt_patches[0].simple_query(""Is the shirt short sleeved or sleeveless?"")"
5533952,What are the white wires connected to?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What are the white wires connected to?"")"
11313555,"What type of furniture is that, a table or a nightstand?","
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    for furniture_patch in furniture_patches:
        is_table = furniture_patch.verify_property(""furniture"", ""table"")
        is_nightstand = furniture_patch.verify_property(""furniture"", ""nightstand"")
        if is_table:
            return ""table""
        elif is_nightstand:
            return ""nightstand""
    # If no furniture is found, query the image directly
    return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")"
10508893,What animals are in front of the trees?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What animals are in front of the trees?"")"
14501997,What is the gate made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?,"
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    return device_patches[0].simple_query(""What color is the device on top of the table?"")"
181032044,Are these closed drawers?,"
    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    for drawer_patch in drawer_patches:
        is_closed = (drawer_patch.simple_query(""Is the drawer closed?"") == ""yes"")
        if not is_closed:
            return ""no""
    return ""yes"""
383,What kind of furniture is made of wood?,"
    image_patch = ImagePatch(image)
    wood_furniture_patches = image_patch.find(""wood furniture"")
    # Question assumes only one wood furniture patch
    if len(wood_furniture_patches) == 0:
        # If no wood furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    return wood_furniture_patches[0].simple_query(""What kind of furniture is made of wood?"")"
101054962,What is the person by the bananas wearing?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    person_patch = person_patches[0]
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    for banana_patch in banana_patches:
        if banana_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.best_text_match([""dress"", ""shirt"", ""pants"", ""skirt"", ""coat"", ""jacket"", ""hat"", ""socks"", ""boots"", ""shoes""])
    return person_patch.best_text_match([""dress"", ""shirt"", ""pants"", ""skirt"", ""coat"", ""jacket"", ""hat"", ""socks"", ""boots"", ""shoes""])"
759165,What is the color of the tower in the middle of the picture?,"
    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    # Question assumes only one tower patch
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    return tower_patches[0].simple_query(""What is the color of the tower in the middle of the picture?"")"
10775539,Is this giraffe tall and white?,"
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is this giraffe tall and white?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""tall"") and giraffe_patches[0].verify_property(""giraffe"", ""white""))"
19981804,On which side of the photo is the colorful screen?,"
    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""colorful screen"")
    # Question assumes only one screen patch
    if len(screen_patches) == 0:
        # If no screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    if screen_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7903654,Is the tap on the left side or on the right?,"
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    for tap_patch in tap_patches:
        if tap_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
6206183,Which place is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?,"
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    for coat_patch in coat_patches:
        is_black = (coat_patch.simple_query(""Is the coat black?"") == ""yes"")
        if is_black:
            return ""black""
    return ""beige"""
13123207,Does the kite near the field look high and red?,"
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    kite_patch = kite_patches[0]
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    field_patch = field_patches[0]
    is_high = kite_patch.verify_property(""kite"", ""high"")
    is_red = kite_patch.verify_property(""kite"", ""red"")
    is_near_field = kite_patch.exists(""kite"") and kite_patch.exists(""field"")
    return bool_to_yesno(is_high and is_red and is_near_field)"
7740092,Are there any utensils in this picture?,"
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""utensil""))"
8774975,What is around the guy?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?,"
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?,"
    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    # Question assumes only one staircase patch
    if len(staircase_patches) == 0:
        # If no staircase is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    for staircase_patch in staircase_patches:
        if not staircase_patch.verify_property(""staircase"", ""same color as sky""):
            return ""yes""
    return ""no"""
1605874,What color are the containers that are on the right?,"
    image_patch = ImagePatch(image)
    containers_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(containers_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    containers_patch = containers_patches[0]
    right_containers_patches = image_patch.find(""container"")
    for right_container_patch in right_containers_patches:
        if right_container_patch.horizontal_center > containers_patch.horizontal_center:
            return right_container_patch.simple_query(""What color are the containers?"")
    return containers_patch.simple_query(""What color are the containers that are on the right?"")"
12495781,Are the people to the right or to the left of the cone that is orange?,"
    image_patch = ImagePatch(image)
    orange_cone_patches = image_patch.find(""orange cone"")
    # Question assumes only one orange cone patch
    if len(orange_cone_patches) == 0:
        # If no orange cone is found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    for orange_cone_patch in orange_cone_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center > orange_cone_patch.horizontal_center:
                return ""right""
            elif people_patch.horizontal_center < orange_cone_patch.horizontal_center:
                return ""left""
    # If no people are found, query the image directly
    return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")"
14165681,"What type of clothing is light, the sweater or the cap?","
    image_patch = ImagePatch(image)
    sweater_patches = image_patch.find(""sweater"")
    # Question assumes only one sweater patch
    if len(sweater_patches) == 0:
        # If no sweater is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        return ""sweater""
    for cap_patch in cap_patches:
        if cap_patch.verify_property(""cap"", ""light""):
            return ""cap""
    return ""sweater"""
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?,"
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    for girl_patch in girl_patches:
        jeans_patches = image_patch.find(""jeans"")
        # Question assumes only one jeans patch
        if len(jeans_patches) == 0:
            # If no jeans are found, query the image directly
            return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
        for jeans_patch in jeans_patches:
            if jeans_patch.horizontal_center > girl_patch.horizontal_center:
                return """
5617223,"What color is the container to the left of the horse, green or silver?","
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center < image_patch.horizontal_center:
            return container_patch.simple_query(""What color is the container to the left of the horse, green or silver?"") # crop would include the color so keep it in the query
    # If no container is to the left of the horse, pick the first container
    return container_patches[0].simple_query(""What color is the container to the left of the horse, green or silver?"")"
2428964,Is the water gray or teal?,"
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].best_text_match([""gray"", ""teal""])"
19620769,Which place is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?,"
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    if lamp_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?,"
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    # Question assumes only one brown animal patch
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    return bool_to_yesno(brown_animal_patches[0].verify_property(""brown animal"", ""tiny""))"
5672532,Does that shirt look long sleeved?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    return shirt_patches[0].verify_property(""shirt"", ""long sleeved"")"
6146439,Does the box look green?,"
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look green?"")
    return bool_to_yesno(box_patches[0].verify_property(""box"", ""green""))"
1910285,Is the white container on the left of the image?,"
    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    # Question assumes only one white container patch
    if len(white_container_patches) == 0:
        # If no white container is found, query the image directly
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    return bool_to_yesno(white_container_patches[0].horizontal_center < image_patch.horizontal_center)"
13362134,Is that shower curtain to the left of a toilet?,"
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center > shower_curtain_patch.horizontal_center:
                return ""yes""
    return ""no"""
161060488,Is there any cabinet to the right of the stove?,"
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for cabinet_patch in cabinet_patches:
        stove_patches = image_patch.find(""stove"")
        for stove_patch in stove_patches:
            if cabinet_patch.horizontal_center > stove_patch.horizontal_center:
                return ""yes""
    return ""no"""
111055042,Is the chair on the right?,"
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    return bool_to_yesno(chair_patches[0].horizontal_center > image_patch.horizontal_center)"
151068,Which kind of clothing is white?,"
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""white""):
            return clothing_patch.simple_query(""Which kind of clothing is white?"") # crop would include white so keep it in the query
    # If no clothing is white, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is white?"")"
19387951,Is this place the forest or the garden?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"")"
1781695,What's on the blanket?,"
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What's on the blanket?"")
    blanket_patch = blanket_patches[0]
    return blanket_patch.best_text_match([""baby"", ""child"", ""dog"", ""cat"", ""bunny"", ""horse"", ""cow"", ""sheep"", ""goat"", ""chicken"", ""turkey"", ""duck"", ""goose"", ""cowboy"", ""cowgirl"", ""bear"", ""pig"", ""panda"", ""monkey"", ""elephant"", ""octopus"", ""turtle"", ""fish"", ""bird"", ""butterfly"", ""bee"", ""honey"", ""bees"", ""flower"", ""flowers"", ""plant"", ""plants"", ""tree"", ""trees"", ""house"", ""houses"", ""building"", ""buildings"", ""car"", ""cars"", ""bus"", ""train"", ""boat"", ""ship"", ""robot"", ""robots"", ""spacecraft"", ""alien"", ""aliens"", ""rocket"", ""space"", ""universe"", ""cosmos"", """
17699779,Is she on a bed?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is she on a bed?"")
    woman_patch = woman_patches[0]
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        return ""no""
    for bed_patch in bed_patches:
        if bed_patch.horizontal_center > woman_patch.horizontal_center:
            return ""yes""
    return ""no"""
464441,"What piece of furniture is the blanket on, a bed or a sofa?","
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    blanket_patch = blanket_patches[0]
    bed_patches = image_patch.find(""bed"")
    for bed_patch in bed_patches:
        if blanket_patch.horizontal_center > bed_patch.horizontal_center:
            return ""left""
    sofa_patches = image_patch.find(""sofa"")
    for sofa_patch in sofa_patches:
        if blanket_patch.horizontal_center > sofa_patch.horizontal_center:
            return ""left""
    return ""right"""
9505496,Are the wires above a man?,"
    image_patch = ImagePatch(image)
    wires_patches = image_patch.find(""wires"")
    # Question assumes only one wires patch
    if len(wires_patches) == 0:
        # If no wires are found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    for wires_patch in wires_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.vertical_center < wires_patch.vertical_center:
                return ""no""
    return ""yes"""
4625512,What is the woman doing?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman doing?"")
    return woman_patches[0].simple_query(""What is the woman doing?"")"
9441941,Is the woman's hair red or black?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    woman_patch = woman_patches[0]
    red_hair_patches = woman_patch.find(""red hair"")
    # Question assumes only one red hair patch
    if len(red_hair_patches) == 0:
        return ""red""
    black_hair_patches = woman_patch.find(""black hair"")
    # Question assumes only one black hair patch
    if len(black_hair_patches) == 0:
        return ""black""
    return ""black"""
2387432,What's on the table?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's on the table?"")"
10534717,What is the pillow on?,"
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""What is the pillow on?"")
    return pillow_patches[0].simple_query(""What is the pillow on?"")"
19335685,"What fruits is the container behind of, apples or bananas?","
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")
    for container_patch in container_patches:
        fruits_patches = image_patch.find(""fruits"")
        for fruit_patch in fruits_patches:
            if fruit_patch.verify_property(""fruits"", ""apples"") and container_patch.horizontal_center > fruit_patch.horizontal_center:
                return ""left""
            elif fruit_patch.verify_property(""fruits"", ""bananas"") and container_patch.horizontal_center > fruit_patch.horizontal_center:
                return ""right""
    return ""left"""
3127817,The goat is standing in what?,"
    image_patch = ImagePatch(image)
    goat_patches = image_patch.find(""goat"")
    # Question assumes only one goat patch
    if len(goat_patches) == 0:
        # If no goat is found, query the image directly
        return image_patch.simple_query(""The goat is standing in what?"")
    return goat_patches[0].simple_query(""The goat is standing in what?"")"
1588567,Where does the man that to the right of the mirror sit?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    man_patch = man_patches[0]
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        # If no mirror is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    mirror_patch = mirror_patches[0]
    if man_patch.horizontal_center > mirror_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7399543,What is the floor made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?,"
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""What kind of animal is the house behind of?"")
    house_patch = house_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > house_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is the house behind of?"") # crop would include the house so keep it in the query
    # If no animal is behind the house, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is the house behind of?"")"
1174904,Is the cobblestone sidewalk both large and gray?,"
    image_patch = ImagePatch(image)
    cobblestone_patches = image_patch.find(""cobblestone sidewalk"")
    # Question assumes only one cobblestone sidewalk patch
    if len(cobblestone_patches) == 0:
        # If no cobblestone sidewalk is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    for cobblestone_patch in cobblestone_patches:
        if cobblestone_patch.verify_property(""cobblestone sidewalk"", ""large"") and cobblestone_patch.verify_property(""cobblestone sidewalk"", ""gray""):
            return ""yes""
    return ""no"""
13375231,What is the lettuce on?,"
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What is the lettuce on?"")
    return lettuce_patches[0].simple_query(""What is the lettuce on?"") # crop would include the lettuce so keep it in the query"
1194027,Which kind of clothing is black?,"
    image_patch = ImagePatch(image)
    black_clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(black_clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for black_clothing_patch in black_clothing_patches:
        if black_clothing_patch.verify_property(""clothing"", ""black""):
            return black_clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include black so keep it in the query
    # If no clothing is black, pick the first clothing
    return black_clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
9963477,Is the statue wearing a dress?,"
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    for statue_patch in statue_patches:
        is_wearing_dress = (statue_patch.simple_query(""Is the statue wearing a dress?"") == ""yes"")
        if is_wearing_dress:
            return ""yes""
    return ""no"""
1151995,Which side of the photo is the yellow vase on?,"
    image_patch = ImagePatch(image)
    yellow_vase_patches = image_patch.find(""yellow vase"")
    # Question assumes only one yellow vase patch
    if len(yellow_vase_patches) == 0:
        # If no yellow vase is found, query the image directly
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    yellow_vase_patch = yellow_vase_patches[0]
    if yellow_vase_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
712821,What is common to the bear and the belt?,"
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    belt_patches = image_patch.find(""belt"")
    # Question assumes only one belt patch
    if len(belt_patches) == 0:
        return ""bear""
    for bear_patch in bear_patches:
        for belt_patch in belt_patches:
            if bear_patch.horizontal_center == belt_patch.horizontal_center:
                return ""bear and belt""
    return ""bear"""
1757418,What is the vehicle to the right of the car?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    car_patch = car_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > car_patch.horizontal_center:
            return vehicle_patch.simple_query(""What is the vehicle to the right of the car?"") # crop would include the car so keep it in the query
    # If no vehicle is to the right of the car, pick the first vehicle
    return vehicle_patches[0].simple_query(""What is the vehicle to the right of the car?"")"
7624100,Are the trunks that are gray wet and large?,"
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunk_patches:
        is_gray = (trunk_patch.simple_query(""What color is the trunk?"") == ""gray"")
        is_wet = (trunk_patch.simple_query(""Is the trunk wet?"") == ""yes"")
        is_large = (trunk_patch.simple_query(""Is the trunk large?"") == ""yes"")
        if is_gray and is_wet and is_large:
            return ""yes""
    return ""no"""
1125474,"On which side of the photo is the iron fence, the right or the left?","
    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    # Question assumes only one iron fence patch
    if len(iron_fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    if iron_fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1300375,What is the name of the item of furniture that the printer is on?,"
    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    # Question assumes only one printer patch
    if len(printer_patches) == 0:
        # If no printer is found, query the image directly
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    return printer_patches[0].simple_query(""What is the name of the item of furniture that the printer is on?"")"
5925196,What's the building covered by?,"
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""What's the building covered by?"")
    return building_patches[0].simple_query(""What's the building covered by?"")"
1948055,What watercraft is the white rope tying?,"
    image_patch = ImagePatch(image)
    white_rope_patches = image_patch.find(""white rope"")
    # Question assumes only one white rope patch
    if len(white_rope_patches) == 0:
        # If no white rope is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    for white_rope_patch in white_rope_patches:
        watercraft_patches = image_patch.find(""watercraft"")
        for watercraft_patch in watercraft_patches:
            if white_rope_patch.horizontal_center > watercraft_patch.horizontal_center:
                return watercraft_patch.simple_query(""What watercraft is the white rope tying?"") # crop would include the rope so keep it in the query
    # If no watercraft is tied by the white rope, pick the first watercraft
    return watercraft_patches[0].simple_query(""What watercraft is the white rope tying?"")"
8540582,What kind of animal is in front of the leafy trees?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""brown""):
            return animal_patch.simple_query(""What kind of animal is in front of the leafy trees?"") # crop would include brown so keep it in the query
    return animal_patches[0].simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?,"
    image_patch = ImagePatch(image)
    walking_woman_patches = image_patch.find(""walking woman"")
    # Question assumes only one walking woman patch
    if len(walking_woman_patches) == 0:
        # If no walking woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    walking_woman_patch = walking_woman_patches[0]
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.horizontal_center > walking_woman_patch.horizontal_center:
            return clothing_patch.simple_query(""What does the walking woman by the bus wear?"") # crop would include the clothing so keep it in the query
    # If no clothing is found, pick the first clothing
    return clothing_patches[0].simple_query(""What does the walking woman by the bus wear?"")"
1129508,Is the controller to the left of a pillow?,"
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > controller_patch.horizontal_center:
                return ""yes""
    return ""no"""
18664084,Is there any sheep by the fence?,"
    image_patch = ImagePatch(image)
    is_sheep = image_patch.exists(""sheep"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_sheep and is_fence)"
6912079,What animal is this?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is this?"")"
3412029,Where is the person?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person?"")
    return ""center"""
14161122,What animal is in the water?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"")"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?,"
    image_patch = ImagePatch(image)
    parent_patches = image_patch.find(""parent"")
    # Question assumes only one parent patch
    if len(parent_patches) == 0:
        # If no parent is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    parent_patch = parent_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > parent_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"") # crop would include the parent so keep it in the query
    # If no furniture is to the right of the parent, pick the first furniture
    return furniture_patches[0].simple_query(""What is the item of furniture to the right of the baby the parent is to the"
15699496,What is the cup that looks clean made of?,"
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    for cup_patch in cup_patches:
        is_clean = (cup_patch.simple_query(""Is the cup clean?"") == ""yes"")
        if is_clean:
            return cup_patch.simple_query(""What is the cup that looks clean made of?"") # crop would include the clean so keep it in the query
    # If no clean cup is found, pick the first cup
    return cup_patches[0].simple_query(""What is the cup that looks clean made of?"")"
12765451,What animals are to the right of the ladder?,"
    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for ladder_patch in ladder_patches:
        animal_patches = image_patch.find(""animal"")
        right_of_ladder = []
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > ladder_patch.horizontal_center:
                right_of_ladder.append(animal_patch)
        if len(right_of_ladder) > 0:
            return right_of_ladder[0].simple_query(""What animals are to the right of the ladder?"") # crop would include the ladder so keep it in the query
    # If no animals are to the right of the ladder, pick the first animal
    return animal_patches[0].simple_query(""What animals are to the right of the ladder?"")"
191044307,What animal is black?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What animal is black?"") # crop would include black so keep it in the query
    # If no animal is black, pick the first animal
    return animal_patches[0].simple_query(""What animal is black?"")"
12639181,Who is wearing shorts?,"
    image_patch = ImagePatch(image)
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        # If no shorts are found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    return shorts_patches[0].simple_query(""Who is wearing shorts?"")"
10630949,Is the person that is not male wearing an elbow pad?,"
    image_patch = ImagePatch(image)
    male_patches = image_patch.find(""male"")
    # Question assumes only one male patch
    if len(male_patches) == 0:
        # If no male is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for male_patch in male_patches:
        if not male_patch.verify_property(""male"", ""elbow pad""):
            return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    # If no non-male is found, query the image directly
    return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")"
14544602,What is the boy holding?,"
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    object_patches = image_patch.find(""object"")
    for object_patch in object_patches:
        if object_patch.horizontal_center > boy_patch.horizontal_center:
            return object_patch.simple_query(""What is the object?"") # crop would include the object so keep it in the query
    return ""nothing"""
2986699,Of what material the dish?,"
    image_patch = ImagePatch(image)
    dish_patches = image_patch.find(""dish"")
    # Question assumes only one dish patch
    if len(dish_patches) == 0:
        # If no dish is found, query the image directly
        return image_patch.simple_query(""Of what material the dish?"")
    return dish_patches[0].simple_query(""Of what material the dish?"")"
161013513,What kind of animal is on the street?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    return animal_patches[0].simple_query(""What kind of animal is on the street?"")"
15143936,What animal is before the roof?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is before the roof?"")
    for animal_patch in animal_patches:
        if animal_patch.vertical_center < image_patch.vertical_center:
            return animal_patch.simple_query(""What animal is before the roof?"") # crop would include the roof so keep it in the query
    return animal_patches[0].simple_query(""What animal is before the roof?"")"
1955043,Who is playing with the ball?,"
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Who is playing with the ball?"")
    ball_patch = ball_patches[0]
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center > ball_patch.horizontal_center:
            return man_patch.simple_query(""Who is playing with the ball?"")
    return image_patch.simple_query(""Who is playing with the ball?"")"
91044150,What is the name of the animals in front of the trees beside the river?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")
    for animal_patch in animal_patches:
        is_tree_patch = (animal_patch.simple_query(""Is the animal a tree?"") == ""no"")
        is_river_patch = (animal_patch.simple_query(""Is the animal a river?"") == ""no"")
        if is_tree_patch and is_river_patch:
            return animal_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"") # crop would include the trees and river so keep it in the query
    # If no animal is a tree or a river, pick the first animal
    return animal_patches[0].simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?,"
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is hanging?"")
    return fruit_patches[0].simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?,"
    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)"
10457241,What is the color of the trousers?,"
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers is found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"")"
2913850,Is the placemat in the bottom or in the top part?,"
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?,"
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What is covered with blanket?"")
    blanket_patch = blanket_patches[0]
    covered_patches = blanket_patch.find(""covered"")
    # Question assumes only one covered patch
    if len(covered_patches) == 0:
        # If no covered is found, query the image directly
        return image_patch.simple_query(""What is covered with blanket?"")
    return covered_patches[0].simple_query(""What is covered with blanket?"") # crop would include the blanket so keep it in the query"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    man_patch = man_patches[0]
    sweater_patches = image_patch.find(""sweater"")
    # Question assumes only one sweater patch
    if len(sweater_patches) == 0:
        return ""table""
    for sweater_patch in sweater_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > man_patch.horizontal_center and furniture_patch.horizontal_center > sweater_patch.horizontal_center:
                return furniture_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"") # crop would include the sweater so keep it in the query
    # If no furniture is to the right of the man and sweater, pick the first furniture
   "
18673671,"In which part of the picture is the desk drawer, the bottom or the top?","
    image_patch = ImagePatch(image)
    desk_drawer_patches = image_patch.find(""desk drawer"")
    # Question assumes only one desk drawer patch
    if len(desk_drawer_patches) == 0:
        # If no desk drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    if desk_drawer_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?,"
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)"
19737232,Is the book on the right of the picture?,"
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book on the right of the picture?"")
    return bool_to_yesno(book_patches[0].horizontal_center > image_patch.horizontal_center)"
475064,Who is wearing the glasses?,"
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    return glasses_patches[0].simple_query(""Who is wearing the glasses?"")"
8594579,Is there a woman to the right of the orange object that is to the right of the person?,"
    image_patch = ImagePatch(image)
    orange_patches = image_patch.find(""orange object"")
    # Question assumes only one orange patch
    if len(orange_patches) == 0:
        # If no orange object is found, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    orange_patch = orange_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center > orange_patch.horizontal_center:
            return ""yes""
    return ""no"""
14602992,Which side of the image is the couch on?,"
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    couch_patch = couch_patches[0]
    if couch_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
9944587,How tall is the man that is wearing a shirt?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    for man_patch in man_patches:
        is_wearing_shirt = (man_patch.simple_query(""Is the man wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return man_patch.simple_query(""How tall is the man that is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no man is wearing a shirt, pick the first man
    return man_patches[0].simple_query(""How tall is the man that is wearing a shirt?"")"
13736712,Are there any giraffes?,"
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe""))"
6996118,The young girl is wearing what?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""young girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The young girl is wearing what?"")
    return girl_patches[0].simple_query(""The young girl is wearing what?"")"
19992576,Is the basket on the floor small and brown?,"
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    for basket_patch in basket_patches:
        if basket_patch.verify_property(""basket"", ""on the floor"") and basket_patch.verify_property(""basket"", ""small"") and basket_patch.verify_property(""basket"", ""brown""):
            return ""yes""
    return ""no"""
17332401,What is the boy in front of?,"
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy in front of?"")
    return boy_patches[0].simple_query(""What is the boy in front of?"")"
15586294,Which side is the leather armchair on?,"
    image_patch = ImagePatch(image)
    leather_armchair_patches = image_patch.find(""leather armchair"")
    # Question assumes only one leather armchair patch
    if len(leather_armchair_patches) == 0:
        # If no leather armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    for leather_armchair_patch in leather_armchair_patches:
        if leather_armchair_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
15658324,What is the horse in front of?,"
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""What is the horse in front of?"")
    for horse_patch in horse_patches:
        return horse_patch.simple_query(""What is the horse in front of?"") # crop would include the horse so keep it in the query
    return ""nothing"""
18453709,What is the item of furniture that has the same color as the controller the man is holding called?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    controller_patch = controller_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""same color as the controller""):
            return furniture_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")"
2531874,Who is playing?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
3112009,Is the plate on the left side?,"
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    return bool_to_yesno(plate_patches[0].horizontal_center < image_patch.horizontal_center)"
1527613,On which side of the picture is the bag?,"
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?,"
    image_patch = ImagePatch(image)
    is_road = image_patch.exists(""road"")
    is_roof = image_patch.exists(""roof"")
    return bool_to_yesno(is_road and is_roof)"
161027384,What is the green rug hanging on?,"
    image_patch = ImagePatch(image)
    green_rug_patches = image_patch.find(""green rug"")
    # Question assumes only one green rug patch
    if len(green_rug_patches) == 0:
        # If no green rug is found, query the image directly
        return image_patch.simple_query(""What is the green rug hanging on?"")
    return green_rug_patches[0].simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?,"
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Who is using the laptop?"")
    for laptop_patch in laptop_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.lower > laptop_patch.lower:
                return man_patch.simple_query(""Who is using the laptop?"") # crop would include the man so keep it in the query
    # If no man is using the laptop, pick the first man
    return man_patches[0].simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?,"
    image_patch = ImagePatch(image)
    standing_patches = image_patch.find(""standing"")
    # Question assumes only one standing patch
    if len(standing_patches) == 0:
        # If no standing is found, query the image directly
        return image_patch.simple_query(""Who in the photo is standing?"")
    return standing_patches[0].simple_query(""Who in the photo is standing?"")"
693318,Do you see any plates in the photo?,"
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate""))"
19613394,The person on the skateboard is wearing what?,"
    image_patch = ImagePatch(image)
    skateboard_patches = image_patch.find(""skateboard"")
    # Question assumes only one skateboard patch
    if len(skateboard_patches) == 0:
        # If no skateboard is found, query the image directly
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    for skateboard_patch in skateboard_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.lower > skateboard_patch.lower:
                return person_patch.simple_query(""The person on the skateboard is wearing what?"") # crop would include the person so keep it in the query
    # If no person is on the skateboard, pick the first person
    return person_patches[0].simple_query(""The person on the skateboard is wearing what?"")"
19927237,Is the blue car in front of the white van?,"
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car in front of the white van?"")
    white_van_patches = image_patch.find(""white van"")
    # Question assumes only one white van patch
    if len(white_van_patches) == 0:
        return ""no""
    for blue_car_patch in blue_car_patches:
        for white_van_patch in white_van_patches:
            if blue_car_patch.vertical_center < white_van_patch.vertical_center:
                return ""yes""
    return ""no"""
31054022,What is the box sitting on?,"
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What is the box sitting on?"")
    for box_patch in box_patches:
        object_patches = image_patch.find(""object"")
        for object_patch in object_patches:
            if box_patch.horizontal_center == object_patch.horizontal_center and box_patch.vertical_center == object_patch.vertical_center:
                return object_patch.simple_query(""What is the box sitting on?"") # crop would include the object so keep it in the query
    # If no object is found, pick the first object
    return object_patches[0].simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?,"
    image_patch = ImagePatch(image)
    snowy_patches = image_patch.find(""snowy"")
    brown_patches = image_patch.find(""brown"")
    # Question assumes only one snowy and brown patch
    if len(snowy_patches) == 0 or len(brown_patches) == 0:
        # If no snowy or brown is found, query the image directly
        return image_patch.simple_query(""Does the ground look snowy and brown?"")
    return bool_to_yesno(snowy_patches[0].horizontal_center == brown_patches[0].horizontal_center)"
15185768,Does the sky look blue and clear?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the sky look blue and clear?"")"
1589160,Does the person that is sitting lean against a fire hydrant?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    person_patch = person_patches[0]
    fire_hydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(fire_hydrant_patches) == 0:
        return ""no""
    for fire_hydrant_patch in fire_hydrant_patches:
        if fire_hydrant_patch.horizontal_center > person_patch.horizontal_center:
            return ""yes""
    return ""no"""
2142522,Are there any shopping carts or mannequins in this photo?,"
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)"
17362234,Are there cages or scrub brushes in this picture?,"
    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)"
4955854,Is the lamp below the chain?,"
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    for lamp_patch in lamp_patches:
        chain_patches = image_patch.find(""chain"")
        for chain_patch in chain_patches:
            if chain_patch.vertical_center > lamp_patch.vertical_center:
                return ""yes""
    return ""no"""
10463545,Is the computer to the right of the other computer silver or black?,"
    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    # Question assumes only one computer patch
    if len(computer_patches) == 0:
        # If no computer is found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    for computer_patch in computer_patches:
        if computer_patch.horizontal_center > image_patch.horizontal_center:
            silver_patches = image_patch.find(""silver"")
            black_patches = image_patch.find(""black"")
            # Question assumes only one silver or black patch
            if len(silver_patches) == 0 and len(black_patches) == 0:
                # If no silver or black is found, query the image directly
                return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
            for silver_patch in silver_patches:
                for black_patch in black_patches:
                    if silver_patch.horizontal_center > computer_patch.horizontal_center and black_patch.horizontal_center > computer_patch.horizontal_center:
                        return ""silver""
            return ""black""
    return ""right"""
2265037,What is the girl wearing?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?,"
    image_patch = ImagePatch(image)
    blue_numbers_patches = image_patch.find(""blue numbers"")
    blue_letters_patches = image_patch.find(""blue letters"")
    return bool_to_yesno(len(blue_numbers_patches) > 0 or len(blue_letters_patches) > 0)"
3483992,Is the long bus to the left or to the right of the person with the backpack?,"
    image_patch = ImagePatch(image)
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        # If no backpack is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    backpack_patch = backpack_patches[0]
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    for bus_patch in bus_patches:
        if bus_patch.horizontal_center < backpack_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
13598461,What is the device that is not on called?,"
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    for device_patch in device_patches:
        if not device_patch.verify_property(""device"", ""on""):
            return device_patch.simple_query(""What is the device that is not on called?"") # crop would include the on so keep it in the query
    # If no device is not on, pick the first device
    return device_patches[0].simple_query(""What is the device that is not on called?"")"
13885436,The sky has what color?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
7432467,Is the black container to the left of the man that is on the motorcycle?,"
    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        # If no black container is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    for black_container_patch in black_container_patches:
        motorcycle_patches = image_patch.find(""motorcycle"")
        for motorcycle_patch in motorcycle_patches:
            if motorcycle_patch.horizontal_center > black_container_patch.horizontal_center:
                return ""no""
    return ""yes"""
19540096,Is the fire in an oven?,"
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    # Question assumes only one fire patch
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    return bool_to_yesno(fire_patches[0].verify_property(""fire"", ""oven""))"
18291107,The horse is where?,"
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""The horse is where?"")
    return ""right"""
5435474,Is the man that is to the left of the motorbike wearing a hat?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    man_patch = man_patches[0]
    motorbike_patches = image_patch.find(""motorbike"")
    # Question assumes only one motorbike patch
    if len(motorbike_patches) == 0:
        return ""no""
    motorbike_patch = motorbike_patches[0]
    if man_patch.horizontal_center < motorbike_patch.horizontal_center:
        return man_patch.verify_property(""man"", ""hat"")
    return ""no"""
226307,Are there any tables in the photo?,"
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))"
1944826,Who is reflected in the mirror?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Who is reflected in the mirror?"")"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")"
18435846,What is the color of the balloon that is to the right of the backpack?,"
    image_patch = ImagePatch(image)
    balloon_patches = image_patch.find(""balloon"")
    # Question assumes only one balloon patch
    if len(balloon_patches) == 0:
        # If no balloon is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    for balloon_patch in balloon_patches:
        backpack_patches = image_patch.find(""backpack"")
        # Question assumes only one backpack patch
        if len(backpack_patches) == 0:
            # If no backpack is found, query the image directly
            return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
        for backpack_patch in backpack_patches:
            if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
                return balloon_patch.simple_query(""What is the color of the balloon?"")
    # If no balloon is to the right of the backpack, pick the first balloon
    return balloon_patches[0].simple_query(""What is the color of the balloon?"")"
8390894,Is the woman to the right of the man sitting on a sofa?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    woman_patch = woman_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    if woman_patch.horizontal_center > man_patch.horizontal_center:
        return ""yes""
    return ""no"""
18896007,Which side of the image is the pot on?,"
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    if pot_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19323898,Is that pillow on a couch?,"
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is that pillow on a couch?"")
    for pillow_patch in pillow_patches:
        couch_patches = image_patch.find(""couch"")
        for couch_patch in couch_patches:
            if pillow_patch.upper < couch_patch.lower:
                return ""yes""
    return ""no"""
1281034,Where are the trees?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the trees?"")"
13515147,What is on the cow?,"
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""What is on the cow?"")
    return cow_patches[0].simple_query(""What is on the cow?"")"
91036716,What is the skater doing?,"
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    # Question assumes only one skater patch
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?,"
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    boy_patch = boy_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < boy_patch.horizontal_center:
            return person_patch.simple_query(""What is the person to the left of the boy carrying?"")
    return ""nothing"""
13152020,Is the ground wet or dry?,"
    image_patch = ImagePatch(image)
    wet_patches = image_patch.find(""wet ground"")
    # Question assumes only one wet patch
    if len(wet_patches) == 0:
        # If no wet ground is found, query the image directly
        return image_patch.simple_query(""Is the ground wet or dry?"")
    return ""wet"""
19312096,"On which side is the purse, the left or the right?","
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    for purse_patch in purse_patches:
        if purse_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
71002343,Are there breads in this photograph?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there breads in this photograph?"")"
9113663,Do you see either any snow or sand that are white?,"
    image_patch = ImagePatch(image)
    white_snow_patches = image_patch.find(""snow"")
    white_sand_patches = image_patch.find(""sand"")
    white_patches = white_snow_patches + white_sand_patches
    return bool_to_yesno(len(white_patches) > 0)"
10243612,Which place is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?,"
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What vegetable is to the left of the napkin?"")
    for vegetable_patch in vegetable_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if vegetable_patch.horizontal_center < napkin_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetable is to the left of the napkin?"") # crop would include the napkin so keep it in the query
    # If no vegetable is to the left of the napkin, pick the first vegetable
    return vegetable_patches[0].simple_query(""What vegetable is to the left of the napkin?"")"
15599523,Is the dog on the right side?,"
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    return bool_to_yesno(dog_patches[0].horizontal_center > image_patch.horizontal_center)"
101019673,What is the man wearing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        return man_patch.simple_query(""What is the man wearing?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.horizontal_center > man_patch.horizontal_center:
            return clothing_patch.simple_query(""What is the man wearing?"") # crop would include the clothing so keep it in the query
    return man_patch.simple_query(""What is the man wearing?"")"
333047,Do you see any men to the right of the orange tent?,"
    image_patch = ImagePatch(image)
    orange_tent_patches = image_patch.find(""orange tent"")
    # Question assumes only one orange tent patch
    if len(orange_tent_patches) == 0:
        # If no orange tent is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for orange_tent_patch in orange_tent_patches:
        men_patches = image_patch.find(""man"")
        for man_patch in men_patches:
            if man_patch.horizontal_center > orange_tent_patch.horizontal_center:
                return ""yes""
    return ""no"""
13907796,Is the shirt striped and green?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    for shirt_patch in shirt_patches:
        is_striped = (shirt_patch.simple_query(""Is the shirt striped?"") == ""yes"")
        is_green = (shirt_patch.simple_query(""Is the shirt green?"") == ""yes"")
        if is_striped and is_green:
            return ""yes""
    return ""no"""
17207604,Are there either bottles or shelves?,"
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?,"
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    train_patch = train_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > train_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    return ""none"""
7165131,Is that train engine small or large?,"
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    engine_patches = train_patches[0].find(""engine"")
    # Question assumes only one engine patch
    if len(engine_patches) == 0:
        # If no engine is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    return engine_patches[0].simple_query(""Is that train engine small or large?"")"
21049362,Where are the railroad tracks?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal looking at?"")
    return animal_patches[0].simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the children playing?"")"
598297,Are there combs or figurines in the picture?,"
    image_patch = ImagePatch(image)
    is_combs = image_patch.exists(""combs"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_combs or is_figurine)"
16409127,What is the wire on?,"
    image_patch = ImagePatch(image)
    wire_patches = image_patch.find(""wire"")
    # Question assumes only one wire patch
    if len(wire_patches) == 0:
        # If no wire is found, query the image directly
        return image_patch.simple_query(""What is the wire on?"")
    return wire_patches[0].simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?,"
    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    # Question assumes only one tunnel patch
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    return ""small"" if tunnel_patches[0].width < 100 else ""large"""
17560468,Do you see trains or windows?,"
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > man_patch.horizontal_center:
            return person_patch.simple_query(""What is the person near the man wearing?"") # crop would include the shirt so keep it in the query
    # If no person is near the man, pick the first person
    return person_patches[0].simple_query(""What is the person near the man wearing?"")"
12352375,Is the vehicle that is sitting down black or blue?,"
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    for vehicle_patch in vehicle_patches:
        is_black = (vehicle_patch.simple_query(""Is the vehicle black?"") == ""yes"")
        is_blue = (vehicle_patch.simple_query(""Is the vehicle blue?"") == ""yes"")
        if is_black:
            return ""black""
        elif is_blue:
            return ""blue""
    return ""black"""
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?,"
    image_patch = ImagePatch(image)
    metal_trash_can_patches = image_patch.find(""metal trash can"")
    # Question assumes only one metal trash can patch
    if len(metal_trash_can_patches) == 0:
        # If no metal trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    white_thing_patches = image_patch.find(""white thing"")
    # Question assumes only one white thing patch
    if len(white_thing_patches) == 0:
        # If no white thing is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    for white_thing_patch in white_thing_patches:
        shower_curtain_patches = image_patch.find(""shower curtain"")
        # Question assumes only one shower curtain patch
        if len(shower_curtain_patches) == 0:
            # If no shower curtain is found, query the image directly
            return image_patch.simple_query(""Is the metal trash can to the left or to"
5800248,Is it outdoors?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
4604785,Does the pizza slice to the left of the pizza have large size?,"
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    pizza_patch = pizza_patches[0]
    pizza_slice_patches = image_patch.find(""pizza slice"")
    # Question assumes only one pizza slice patch
    if len(pizza_slice_patches) == 0:
        return ""no""
    for pizza_slice_patch in pizza_slice_patches:
        if pizza_slice_patch.horizontal_center < pizza_patch.horizontal_center:
            return bool_to_yesno(pizza_slice_patch.verify_property(""pizza slice"", ""large""))
    return ""no"""
15185845,What's the man wearing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
2282232,Where is the snow?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"")"
7889197,Who is wearing a shirt?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?,"
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)"
154682,Where does the bird stand on?,"
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Where does the bird stand on?"")
    return bird_patches[0].simple_query(""Where does the bird stand on?"")"
10435315,Is the man holding a racket?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    for man_patch in man_patches:
        racket_patches = image_patch.find(""racket"")
        # Question assumes only one racket patch
        if len(racket_patches) == 0:
            return ""no""
        for racket_patch in racket_patches:
            if racket_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
121035887,Do the man shorts have white color?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    shorts_patches = man_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    for shorts_patch in shorts_patches:
        if shorts_patch.verify_property(""shorts"", ""white""):
            return ""yes""
    return ""no"""
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < man_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")"
19659501,What is the color of the umbrella the bird is on?,"
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    bird_patch = bird_patches[0]
    umbrella_patches = bird_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        return ""black""
    return umbrella_patches[0].simple_query(""What is the color of the umbrella?"")"
10595217,Where is the grass?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")"
14803743,Which kind of clothing is black?,"
    image_patch = ImagePatch(image)
    black_clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(black_clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for black_clothing_patch in black_clothing_patches:
        if black_clothing_patch.verify_property(""clothing"", ""black""):
            return black_clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include black so keep it in the query
    # If no clothing is black, pick the first clothing
    return black_clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
19743238,Is the man on the right side?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    return bool_to_yesno(man_patches[0].horizontal_center > image_patch.horizontal_center)"
3965204,Are the mountains covered with snow?,"
    image_patch = ImagePatch(image)
    mountains_patches = image_patch.find(""mountains"")
    # Question assumes only one mountains patch
    if len(mountains_patches) == 0:
        # If no mountains are found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    for mountains_patch in mountains_patches:
        snow_patches = image_patch.find(""snow"")
        # Question assumes only one snow patch
        if len(snow_patches) == 0:
            return ""no""
        for snow_patch in snow_patches:
            if snow_patch.horizontal_center > mountains_patch.horizontal_center:
                return ""yes""
    return ""no"""
141024710,Are there both windows and cars in the picture?,"
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    return shirt_patches[0].simple_query(""What color do you think the shirt is?"")"
3623367,What's he doing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's he doing?"")
    return man_patches[0].simple_query(""What's he doing?"")"
15634950,Where is the giraffe in front of the hay eating from?,"
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    giraffe_patch = giraffe_patches[0]
    hay_patches = image_patch.find(""hay"")
    # Question assumes only one hay patch
    if len(hay_patches) == 0:
        # If no hay is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    hay_patch = hay_patches[0]
    if giraffe_patch.horizontal_center < hay_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16644500,What animal is the log pulled by?,"
    image_patch = ImagePatch(image)
    log_patches = image_patch.find(""log"")
    # Question assumes only one log patch
    if len(log_patches) == 0:
        # If no log is found, query the image directly
        return image_patch.simple_query(""What animal is the log pulled by?"")
    log_patch = log_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""pulling""):
            return animal_patch.simple_query(""What animal is the log pulled by?"") # crop would include pulling so keep it in the query
    return log_patch.simple_query(""What animal is the log pulled by?"")"
3202108,Which side is the car on?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10137201,Are the papers in the bottom part of the picture?,"
    image_patch = ImagePatch(image)
    papers_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(papers_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    for paper_patch in papers_patches:
        if paper_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?,"
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    boy_patch = boy_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < boy_patch.horizontal_center:
            return ""right""
    return ""left"""
8438091,The picture is what color?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the picture's color?"")"
4325939,On which side of the photo is the banana?,"
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1425189,What is the name of the brown piece of furniture?,"
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown"")
    # Question assumes only one brown patch
    if len(brown_patches) == 0:
        # If no brown is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    for brown_patch in brown_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.verify_property(""furniture"", ""brown""):
                return furniture_patch.simple_query(""What is the name of the brown piece of furniture?"") # crop would include the brown so keep it in the query
    # If no brown furniture is found, pick the first brown patch
    return brown_patches[0].simple_query(""What is the name of the brown piece of furniture?"")"
5119962,Is the man to the right of glasses?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    for man_patch in man_patches:
        glasses_patches = image_patch.find(""glasses"")
        for glasses_patch in glasses_patches:
            if glasses_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?,"
    image_patch = ImagePatch(image)
    toilet_lid_patches = image_patch.find(""toilet lid"")
    # Question assumes only one toilet lid patch
    if len(toilet_lid_patches) == 0:
        # If no toilet lid is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    for toilet_lid_patch in toilet_lid_patches:
        if toilet_lid_patch.verify_property(""toilet lid"", ""down""):
            return ""down""
    return ""up"""
6522554,Which kind of device does the man hold?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return man_patch.simple_query(""Which kind of device does the man hold?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > man_patch.horizontal_center:
            return device_patch.simple_query(""What kind of device is it?"") # crop would include the device so keep it in the query
    return man_patch.simple_query(""Which kind of device does the man hold?"")"
870619,What is the device to the left of the person that is to the left of the television?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    person_patch = person_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < person_patch.horizontal_center:
            return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"") # crop would include the person so keep it in the query
    return device_patches[0].simple_query(""What is the device to the left of the person that is to the left of the television?"")"
12713794,Does the woman to the left of the man wear a necklace?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    for woman_patch in woman_patches:
        for man_patch in man_patches:
            if woman_patch.horizontal_center < man_patch.horizontal_center:
                necklace_patches = woman_patch.find(""necklace"")
                # Question assumes only one necklace patch
                if len(necklace_patches) == 0:
                    return ""no""
                return ""yes""
    return ""no"""
824070,What is the man doing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    return man_patches[0].simple_query(""What is the man doing?"")"
11593733,Which kind of furniture is right to the pillow?,"
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    for furniture_patch in furniture_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is right to the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is right to the pillow, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is right to the pillow?"")"
3357821,Does the dog to the left of the other dog look small or large?,"
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dogs
    if len(dog_patches) != 2:
        # If no dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    for dog_patch in dog_patches:
        if dog_patch.horizontal_center < dog_patches[1].horizontal_center:
            return dog_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    return dog_patches[1].simple_query(""Does the dog to the left of the other dog look small or large?"")"
338026,Are the white candles short or tall?,"
    image_patch = ImagePatch(image)
    white_candle_patches = image_patch.find(""white candle"")
    # Question assumes only one white candle patch
    if len(white_candle_patches) == 0:
        # If no white candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    if white_candle_patches[0].height < white_candle_patches[0].width:
        return ""short""
    else:
        return ""tall"""
15346232,What kind of fruit is the girl holding?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    for girl_patch in girl_patches:
        fruit_patches = image_patch.find(""fruit"")
        # Question assumes only one fruit patch
        if len(fruit_patches) == 0:
            return ""none""
        for fruit_patch in fruit_patches:
            if girl_patch.horizontal_center > fruit_patch.horizontal_center:
                return fruit_patch.simple_query(""What kind of fruit is the girl holding?"")
    return ""none"""
13553098,"On which side of the photo is the yellow vehicle, the right or the left?","
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        if yellow_vehicle_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
81030271,Is the gray car to the right or to the left of the cart?,"
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    gray_car_patch = gray_car_patches[0]
    cart_patches = image_patch.find(""cart"")
    # Question assumes only one cart patch
    if len(cart_patches) == 0:
        # If no cart is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    cart_patch = cart_patches[0]
    if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?,"
    image_patch = ImagePatch(image)
    chrome_canister_patches = image_patch.find(""canister made of chrome"")
    # Question assumes only one chrome canister patch
    if len(chrome_canister_patches) == 0:
        # If no chrome canister is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    for chrome_canister_patch in chrome_canister_patches:
        utensil_patches = image_patch.find(""cooking utensil"")
        for utensil_patch in utensil_patches:
            if utensil_patch.horizontal_center > chrome_canister_patch.horizontal_center:
                return utensil_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"") # crop would include the chrome canister so keep it in the query
    # If no utensil is to the right of the chrome canister, pick the first utensil
    return utensil_patches[0].simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")"
8240699,What animal is in front of the bird?,"
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the bird?"")
    for bird_patch in bird_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > bird_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is in front of the bird?"") # crop would include the bird so keep it in the query
    # If no animal is in front of the bird, pick the first animal
    return animal_patches[0].simple_query(""What animal is in front of the bird?"")"
10105081,Is the fence white or green?,"
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""white""
        elif fence_patch.verify_property(""fence"", ""green""):
            return ""green""
    return ""white"""
13613689,Is there a train or a fence in the picture?,"
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)"
10662521,What is the bottle made of?,"
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?,"
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    return fruit_patches[0].simple_query(""What kind of fruit is on the plate?"")"
16701575,What device is to the right of the cake?,"
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    for device_patch in device_patches:
        cake_patches = image_patch.find(""cake"")
        for cake_patch in cake_patches:
            if device_patch.horizontal_center > cake_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the right of the cake?"") # crop would include the cake so keep it in the query
    # If no device is to the right of the cake, pick the first device
    return device_patches[0].simple_query(""What device is to the right of the cake?"")"
6572516,What material is the ceiling?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?,"
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?,"
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    return egg_patches[0].simple_query(""What is the color of the egg in the middle of the picture?"")"
14371534,Are the gold pans on the right part or on the left?,"
    image_patch = ImagePatch(image)
    gold_pan_patches = image_patch.find(""gold pan"")
    # Question assumes only one gold pan patch
    if len(gold_pan_patches) == 0:
        # If no gold pan is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    for gold_pan_patch in gold_pan_patches:
        if gold_pan_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
    return ""left"""
16538076,What does the man that is not tall wear?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    man_patch = man_patches[0]
    for man_patch in man_patches:
        if not man_patch.verify_property(""man"", ""tall""):
            return man_patch.simple_query(""What does the man that is not tall wear?"")
    return man_patches[0].simple_query(""What does the man that is not tall wear?"")"
5483644,"On which side is the woman, the left or the right?","
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in this photograph?"")"
1290926,Are there either any life vests or flags?,"
    image_patch = ImagePatch(image)
    life_vest_patches = image_patch.find(""life vest"")
    flag_patches = image_patch.find(""flag"")
    return bool_to_yesno(len(life_vest_patches) > 0 or len(flag_patches) > 0)"
18273738,Do you see a cup?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see a cup?"")"
4211922,Who is sitting on the table?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    for girl_patch in girl_patches:
        if girl_patch.left < image_patch.left + (image_patch.right - image_patch.left) / 2:
            return girl_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")"
6599090,What is the person to the right of the car holding?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    person_patch = person_patches[0]
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        return ""nothing""
    car_patch = car_patches[0]
    if person_patch.horizontal_center > car_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the right of the car holding?"")
    return ""nothing"""
1174895,What is the vehicle in the parking lot?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle in the parking lot?"")"
14755158,Who is the woman in front of?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Who is the woman in front of?"")
    woman_patch = woman_patches[0]
    for man_patch in image_patch.find(""man""):
        if man_patch.horizontal_center > woman_patch.horizontal_center:
            return man_patch.simple_query(""Who is the man in front of?"")
    return woman_patch.simple_query(""Who is the woman in front of?"")"
18349161,Where does the cow that is standing stand?,"
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    return cow_patches[0].simple_query(""Where does the cow that is standing stand?"")"
7472884,On which side is the tap?,"
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
111051831,On which side of the image is the cabinet?,"
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?,"
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?,"
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    bag_patch = bag_patches[0]
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center > bag_patch.horizontal_center:
            return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?,"
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    material = artwork_patches[0].simple_query(""What material is the artwork made of?"")
    computer_desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one computer desk patch
    if len(computer_desk_patches) == 0:
        # If no computer desk is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    return bool_to_yesno(material == computer_desk_patches[0].simple_query(""What material is the computer desk made of?""))"
14298125,Who is playing Wii?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")"
9382689,What's the floor made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?,"
    image_patch = ImagePatch(image)
    dress_patches = image_patch.find(""dress"")
    # Question assumes only one dress patch
    if len(dress_patches) == 0:
        # If no dress is found, query the image directly
        return image_patch.simple_query(""Who is wearing the dress?"")
    for dress_patch in dress_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center > dress_patch.horizontal_center:
                return ""man""
    return ""woman"""
15127108,Does the tea pot above the receipt look short and white?,"
    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    # Question assumes only one tea pot patch
    if len(tea_pot_patches) == 0:
        # If no tea pot is found, query the image directly
        return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")
    for tea_pot_patch in tea_pot_patches:
        if tea_pot_patch.verify_property(""tea pot"", ""short"") and tea_pot_patch.verify_property(""tea pot"", ""white""):
            return ""yes""
    return ""no"""
15632653,Which room is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?,"
    image_patch = ImagePatch(image)
    black_clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(black_clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for black_clothing_patch in black_clothing_patches:
        if black_clothing_patch.verify_property(""clothing"", ""black""):
            return black_clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include black so keep it in the query
    # If no clothing is black, pick the first clothing
    return black_clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
490992,Is the fence on the left side or on the right of the picture?,"
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
17133284,Do the mountains look rocky?,"
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Do the mountains look rocky?"")
    return mountain_patches[0].verify_property(""mountain"", ""rocky"")"
17573742,Is the woman to the right of the camera wearing a coat?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    woman_patch = woman_patches[0]
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        return ""no""
    for coat_patch in coat_patches:
        if coat_patch.horizontal_center > woman_patch.horizontal_center:
            return ""yes""
    return ""no"""
3395780,Is the vehicle to the left of the parking meter covered in rain?,"
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    vehicle_patch = vehicle_patches[0]
    rain_patches = image_patch.find(""rain"")
    # Question assumes only one rain patch
    if len(rain_patches) == 0:
        return ""no""
    for rain_patch in rain_patches:
        if vehicle_patch.horizontal_center > rain_patch.horizontal_center:
            return ""yes""
    return ""no"""
1542668,Is there a black laptop or desk?,"
    image_patch = ImagePatch(image)
    is_black_laptop = image_patch.exists(""black laptop"")
    is_black_desk = image_patch.exists(""black desk"")
    return bool_to_yesno(is_black_laptop or is_black_desk)"
1655442,What type of food is to the right of the waffles that are to the right of the person?,"
    image_patch = ImagePatch(image)
    waffles_patches = image_patch.find(""waffle"")
    # Question assumes only one waffle patch
    if len(waffles_patches) == 0:
        # If no waffles are found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    waffle_patch = waffles_patches[0]
    right_of_waffle_patches = image_patch.find(""right of"")
    for right_of_waffle_patch in right_of_waffle_patches:
        food_patches = right_of_waffle_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center > waffle_patch.horizontal_center:
                return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"") # crop would include the waffles so keep it in the query
    # If no food is to the right of the waffles, pick the first food
    return food_patches[0].simple_query(""What type of food is to the right of the waff"
395290,How large is the bag?,"
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"")"
16138893,Are there both motorcycles and cars in this scene?,"
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?,"
    image_patch = ImagePatch(image)
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        # If no shorts are found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    return shorts_patches[0].simple_query(""Who is wearing shorts?"")"
171032184,What hangs from the windows?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?,"
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?,"
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    giraffe_patch = giraffe_patches[0]
    tree_patches = image_patch.find(""tree"")
    for tree_patch in tree_patches:
        if tree_patch.horizontal_center < giraffe_patch.horizontal_center:
            return tree_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"") # crop would include the tree so keep it in the query
    # If no tree is behind the giraffe, pick the first tree
    return tree_patches[0].simple_query(""What is in front of the giraffe that the tree is behind of?"")"
8197176,What color is the jacket that the man wears?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = man_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return ""unknown""
    return jacket_patches[0].simple_query(""What color is the jacket?"")"
3440931,What are that pieces of furniture called?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What are those pieces of furniture called?"")"
337924,What is the fruit that is to the left of the chair?,"
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")
    for chair_patch in chair_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if fruit_patch.horizontal_center < chair_patch.horizontal_center:
                return fruit_patch.simple_query(""What is the fruit that is to the left of the chair?"") # crop would include the chair so keep it in the query
    # If no fruit is to the left of the chair, pick the first fruit
    return fruit_patches[0].simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?,"
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    return bowl_patches[0].simple_query(""What do you think are the bowls on?"") # crop would include the bowl so keep it in the query"
18330260,Is the sky above the trees open and clear?,"
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky above the trees open and clear?"")
    for sky_patch in sky_patches:
        if sky_patch.verify_property(""sky"", ""open"") and sky_patch.verify_property(""sky"", ""clear""):
            return ""yes""
    return ""no"""
14119691,Does the squirrel to the right of the stuffed dog look white?,"
    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    # Question assumes only one squirrel patch
    if len(squirrel_patches) == 0:
        # If no squirrel is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for squirrel_patch in squirrel_patches:
        if squirrel_patch.exists(""white""):
            return ""yes""
    return ""no"""
18437694,Does the clock to the right of the statue have gold color and tiny size?,"
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Does the clock to the right of the statue have gold color and tiny size?"")
    for clock_patch in clock_patches:
        if clock_patch.verify_property(""clock"", ""gold"") and clock_patch.verify_property(""clock"", ""tiny""):
            return ""yes""
    return ""no"""
1252960,Where was the photo taken?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?,"
    image_patch = ImagePatch(image)
    is_frisbee = image_patch.exists(""frisbee"")
    is_grass = image_patch.exists(""grass"")
    return bool_to_yesno(is_frisbee and is_grass)"
13180513,Are there either cakes or containers in the photo?,"
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?,"
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?,"
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    blue_car_patch = blue_car_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < blue_car_patch.horizontal_center:
            return ""left""
    return ""back"""
5785831,What is in the glass?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the glass?"")"
19246241,Are there any brown benches or buckets?,"
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_bucket = image_patch.exists(""bucket"")
    return bool_to_yesno(is_brown_bench or is_bucket)"
3243803,"Where in the picture is the spoon, on the right or on the left?","
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    if spoon_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6952486,Does the shirt look white?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))"
17401425,Is there a bag that is not brown?,"
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if bag_patch.verify_property(""bag"", ""brown"") == False:
            return ""yes""
    return ""no"""
481240,"Which kind of furniture is large, the shelf or the cupboard?","
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    cupboard_patches = image_patch.find(""cupboard"")
    # Question assumes only one cupboard patch
    if len(cupboard_patches) == 0:
        return ""shelf""
    for shelf_patch in shelf_patches:
        for cupboard_patch in cupboard_patches:
            if shelf_patch.width > cupboard_patch.width:
                return ""shelf""
            elif shelf_patch.width < cupboard_patch.width:
                return ""cupboard""
    return ""shelf"""
8531943,Are there any screens or bags?,"
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)"
1969545,What is she wearing?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    return woman_patches[0].simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?","
    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white"")
    # Question assumes only one white patch
    if len(white_patches) == 0:
        # If no white is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    for white_patch in white_patches:
        freezer_patches = image_patch.find(""freezer"")
        for freezer_patch in freezer_patches:
            if white_patch.horizontal_center == freezer_patch.horizontal_center and white_patch.vertical_center == freezer_patch.vertical_center:
                return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
        ice_maker_patches = image_patch.find(""ice maker"")
        for ice_maker_patch in ice_maker_patches:
            if white_patch.horizontal_center == ice_maker_patch.horizontal_center and white_patch.vertical_center == ice_maker_patch.vertical_center:
                return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    return image_patch.simple_query(""Which appliance is"
1051870,Are there chairs or tables that are not green?,"
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    is_green = image_patch.verify_property(""furniture"", ""green"")
    return bool_to_yesno(is_chair or is_table)"
1366363,Does the taxi have a different color than the truck?,"
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        return ""yes""
    for taxi_patch in taxi_patches:
        for truck_patch in truck_patches:
            if taxi_patch.verify_property(""taxi"", ""color"") != truck_patch.verify_property(""truck"", ""color""):
                return ""yes""
    return ""no"""
5460839,In which part of the image is the dog?,"
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    return ""left"" if dog_patches[0].horizontal_center < image_patch.horizontal_center else ""right"""
18899476,What type of vegetable is to the right of the rice that is on the plate?,"
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    for vegetable_patch in vegetable_patches:
        rice_patches = image_patch.find(""rice"")
        for rice_patch in rice_patches:
            if vegetable_patch.horizontal_center > rice_patch.horizontal_center:
                return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"") # crop would include the rice so keep it in the query
    # If no vegetable is to the right of the rice, pick the first vegetable
    return vegetable_patches[0].simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")"
8606903,What food item is not wide?,"
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food item"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food item"", ""wide""):
            return food_patch.simple_query(""What food item is not wide?"") # crop would include the wide so keep it in the query
    # If no food is not wide, pick the first food
    return food_patches[0].simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?,"
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?,"
    image_patch = ImagePatch(image)
    is_elephant = image_patch.exists(""elephant"")
    is_pond = image_patch.exists(""pond"")
    return bool_to_yesno(is_elephant and is_pond)"
1575941,Which place is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?,"
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    return desk_patches[0].simple_query(""What is the color of the floor that the desk is on top of?"")"
16654241,Is the TV on the left or on the right?,"
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    # Question assumes only one TV patch
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    for tv_patch in tv_patches:
        if tv_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
18685233,Which kind of vehicle is to the left of the flags?,"
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    for vehicle_patch in vehicle_patches:
        flags_patches = image_patch.find(""flags"")
        # Question assumes only one flags patch
        if len(flags_patches) == 0:
            # If no flags are found, query the image directly
            return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
        for flags_patch in flags_patches:
            if vehicle_patch.horizontal_center < flags_patch.horizontal_center:
                return vehicle_patch.simple_query(""What kind of vehicle is to the left of the flags?"") # crop would include the flags so keep it in the query
    # If no vehicle is to the left of the flags, pick the first vehicle
    return vehicle_patches[0].simple_query(""What kind of vehicle is to the left of the flags?"")"
9796068,Are there both a fence and a sheep in the picture?,"
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?,"
    image_patch = ImagePatch(image)
    blue_blanket_patches = image_patch.find(""blue blanket"")
    # Question assumes only one blue blanket patch
    if len(blue_blanket_patches) == 0:
        # If no blue blanket is found, query the image directly
        return image_patch.simple_query(""Do you see any blue blanket or towel?"")
    blue_towel_patches = image_patch.find(""blue towel"")
    # Question assumes only one blue towel patch
    if len(blue_towel_patches) == 0:
        # If no blue towel is found, query the image directly
        return image_patch.simple_query(""Do you see any blue blanket or towel?"")
    return ""yes"""
1110330,Is the pillow to the left of the frog cream colored or green?,"
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    pillow_patch = pillow_patches[0]
    frog_patches = image_patch.find(""frog"")
    # Question assumes only one frog patch
    if len(frog_patches) == 0:
        # If no frog is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    frog_patch = frog_patches[0]
    if pillow_patch.horizontal_center < frog_patch.horizontal_center:
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    else:
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")"
511507,Is the antenna on the aircraft?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Is the antenna on the aircraft?"")"
10464417,"In which part is the tent, the top or the bottom?","
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
10816730,Is the tree in front of the building?,"
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Is the tree in front of the building?"")
    for tree_patch in tree_patches:
        building_patches = image_patch.find(""building"")
        for building_patch in building_patches:
            if tree_patch.horizontal_center < building_patch.horizontal_center:
                return ""yes""
    return ""no"""
18766115,Who is walking?,"
    image_patch = ImagePatch(image)
    walking_patches = image_patch.find(""walking"")
    # Question assumes only one walking patch
    if len(walking_patches) == 0:
        # If no walking is found, query the image directly
        return image_patch.simple_query(""Who is walking?"")
    return walking_patches[0].simple_query(""Who is walking?"")"
10625851,Are there either any fruits or plates in the image?,"
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    for person_patch in person_patches:
        coat_patches = image_patch.find(""coat"")
        # Question assumes only one coat patch
        if len(coat_patches) == 0:
            return ""no""
        for coat_patch in coat_patches:
            if coat_patch.horizontal_center > person_patch.horizontal_center:
                return ""yes""
    return ""no"""
4194722,Is the man wearing a helmet?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    for man_patch in man_patches:
        if man_patch.verify_property(""man"", ""wearing helmet""):
            return ""yes""
    return ""no"""
414248,"What animal are the women near the ocean riding, a pig or a horse?","
    image_patch = ImagePatch(image)
    pig_patches = image_patch.find(""pig"")
    # Question assumes only one pig patch
    if len(pig_patches) == 0:
        # If no pig is found, query the image directly
        return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        return ""pig""
    return ""horse"""
683094,Who is wearing the shirt?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")"
12140603,What device is to the left of the headphones?,"
    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    headphones_patch = headphones_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < headphones_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the left of the headphones?"") # crop would include the headphones so keep it in the query
    # If no device is to the left of the headphones, pick the first device
    return device_patches[0].simple_query(""What device is to the left of the headphones?"")"
5575209,The flowers are where?,"
    image_patch = ImagePatch(image)
    flowers_patches = image_patch.find(""flowers"")
    # Question assumes only one flowers patch
    if len(flowers_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    return flowers_patches[0].simple_query(""The flowers are where?"")"
8773829,Which kind of furniture is made of wood?,"
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""made of wood""):
            return furniture_patch.simple_query(""Which kind of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is made of wood?"")"
12636428,Which kind of animal is black?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""Which kind of animal is black?"") # crop would include black so keep it in the query
    # If no animal is black, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is black?"")"
1020584,What animals is the car behind of?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What animals is the car behind of?"")
    car_patch = car_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > car_patch.horizontal_center:
            return animal_patch.simple_query(""What animals is the car behind of?"") # crop would include the car so keep it in the query
    # If no animal is behind the car, pick the first animal
    return animal_patches[0].simple_query(""What animals is the car behind of?"")"
11879418,The man is standing on what?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is standing on what?"")
    return man_patches[0].simple_query(""The man is standing on what?"")"
12334288,What device is to the left of the cabinet?,"
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the cabinet?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < image_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the left of the cabinet?"") # crop would include the cabinet so keep it in the query
    # If no device is to the left of the cabinet, pick the first device
    return device_patches[0].simple_query(""What device is to the left of the cabinet?"")"
691610,Is the monitor to the left of a book?,"
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Is the monitor to the left of a book?"")
    for monitor_patch in monitor_patches:
        book_patches = image_patch.find(""book"")
        for book_patch in book_patches:
            if book_patch.horizontal_center > monitor_patch.horizontal_center:
                return ""yes""
    return ""no"""
7552714,Is the color of the jacket black?,"
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return bool_to_yesno(jacket_patches[0].verify_property(""jacket"", ""black""))"
8492422,Is the man to the left of a boy?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    man_patch = man_patches[0]
    boy_patches = image_patch.find(""boy"")
    for boy_patch in boy_patches:
        if boy_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
13248061,What type of device is to the left of the keyboard in the bottom of the image?,"
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    for device_patch in device_patches:
        if device_patch.lower == 0:
            return device_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"") # crop would include the keyboard so keep it in the query
    # If no device is in the bottom left, pick the first device
    return device_patches[0].simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")"
18252454,What is common to the roof and the sky?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is common to the roof and the sky?"")"
14443687,What do the cat and the book have in common?,"
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        return ""nothing""
    for book_patch in book_patches:
        if book_patch.horizontal_center > cat_patches[0].horizontal_center:
            return ""nothing""
    return ""a common owner"""
14571335,Who is wearing trousers?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Who is wearing trousers?"")"
474885,Who wears a cap?,"
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    return cap_patches[0].simple_query(""Who wears a cap?"")"
141013015,"What color is the toilet, brown or white?","
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].best_text_match([""brown"", ""white""])"
5515816,On which side of the image is the fence?,"
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16774696,What is the surfer wearing?,"
    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    # Question assumes only one surfer patch
    if len(surfer_patches) == 0:
        # If no surfer is found, query the image directly
        return image_patch.simple_query(""What is the surfer wearing?"")
    return surfer_patches[0].simple_query(""What is the surfer wearing?"")"
13701956,Is there any grass or sand that is not dry?,"
    image_patch = ImagePatch(image)
    is_grass = image_patch.exists(""grass"")
    is_sand = image_patch.exists(""sand"")
    is_dry = image_patch.exists(""dry"")
    return bool_to_yesno(is_grass or is_sand and not is_dry)"
11606870,Is there a cow or a zebra in the picture?,"
    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the fire hydrant look modern?"")"
942308,Is the cup empty or full?,"
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    for cup_patch in cup_patches:
        is_empty = (cup_patch.simple_query(""Is the cup empty?"") == ""yes"")
        if is_empty:
            return ""empty""
    return ""full"""
15815976,Is the woman wearing a scarf?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    for woman_patch in woman_patches:
        if woman_patch.verify_property(""woman"", ""scarf""):
            return ""yes""
    return ""no"""
3193231,Do you see either parking meters or brooms in the picture?,"
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)"
314218,Is the sign in front of the bridge small and white?,"
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    for sign_patch in sign_patches:
        if sign_patch.verify_property(""sign"", ""small"") and sign_patch.verify_property(""sign"", ""white""):
            return ""yes""
    return ""no"""
18130465,Does the umbrella that is not dry look orange and open?,"
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    for umbrella_patch in umbrella_patches:
        is_dry = (umbrella_patch.simple_query(""Is the umbrella dry?"") == ""yes"")
        if is_dry:
            continue
        is_orange = (umbrella_patch.simple_query(""Is the umbrella orange?"") == ""yes"")
        is_open = (umbrella_patch.simple_query(""Is the umbrella open?"") == ""yes"")
        if is_orange and is_open:
            return ""yes""
    return ""no"""
7920817,What's in the paper?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?,"
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    return bun_patches[0].simple_query(""What is on the bun in the top?"")"
16929928,What is the fence made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?,"
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    woman_patch = woman_patches[0]
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        return ""left""
    for lady_patch in lady_patches:
        if woman_patch.horizontal_center < lady_patch.horizontal_center:
            return ""left""
    return ""right"""
17993299,Is the horse to the left of a car?,"
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the horse to the left of a car?"")
    for horse_patch in horse_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if car_patch.horizontal_center > horse_patch.horizontal_center:
                return ""yes""
    return ""no"""
8717022,Is the small animal to the left of the vehicle that looks silver?,"
    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        # If no small animal is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    for small_animal_patch in small_animal_patches:
        silver_vehicle_patches = image_patch.find(""vehicle"")
        # Question assumes only one silver vehicle patch
        if len(silver_vehicle_patches) == 0:
            return ""no""
        for silver_vehicle_patch in silver_vehicle_patches:
            if silver_vehicle_patch.horizontal_center > small_animal_patch.horizontal_center:
                return ""no""
    return ""no"""
2998707,Which color is the chair that is on the right?,"
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    right_chair_patches = [chair_patch for chair_patch in chair_patches if chair_patch.horizontal_center == image_patch.right]
    # Question assumes only one right chair patch
    if len(right_chair_patches) == 0:
        # If no right chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    return right_chair_patches[0].simple_query(""What color is the chair?"")"
171017786,Do you see any cups to the left of the monitor?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")"
2220068,Is the girl to the right or to the left of the glasses the man is wearing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    glasses_patches = man_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    glasses_patch = glasses_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    girl_patch = girl_patches[0]
    if girl_patch.horizontal_center > glasses_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1941568,What animal is in the water?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"")"
17577787,Does the man's hair look short and white?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    white_hair_patches = man_patch.find(""white hair"")
    # Question assumes only one white hair patch
    if len(white_hair_patches) == 0:
        return ""no""
    short_hair_patches = man_patch.find(""short hair"")
    # Question assumes only one short hair patch
    if len(short_hair_patches) == 0:
        return ""no""
    return bool_to_yesno(man_patch.verify_property(""man"", ""white hair"") and man_patch.verify_property(""man"", ""short hair""))"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?,"
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        return ""no""
    for toilet_patch in toilet_patches:
        for chair_patch in chair_patches:
            if chair_patch.horizontal_center < toilet_patch.horizontal_center:
                return ""yes""
    return ""no"""
9825336,Which kind of furniture is the mat lying on?,"
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    mat_patch = mat_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""mat""):
            return furniture_patch.simple_query(""Which kind of furniture is the mat lying on?"") # crop would include the mat so keep it in the query
    # If no furniture is lying on a mat, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is the mat lying on?"")"
11222427,Do you see fences or elephants?,"
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?","
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    for furniture_patch in furniture_patches:
        is_white = furniture_patch.verify_property(""furniture"", ""white"")
        if not is_white:
            is_entertainment_center = furniture_patch.verify_property(""furniture"", ""entertainment center"")
            is_bed = furniture_patch.verify_property(""furniture"", ""bed"")
            if is_entertainment_center or is_bed:
                return furniture_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"") # crop would include white so keep it in the query
    # If no furniture is not white, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")"
1152020,Do you see either any plate or tomato that are red?,"
    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""red plate"")
    is_red_tomato = image_patch.exists(""red tomato"")
    return bool_to_yesno(is_red_plate or is_red_tomato)"
8961520,Who is surfing?,"
    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    # Question assumes only one surfer patch
    if len(surfer_patches) == 0:
        # If no surfer is found, query the image directly
        return image_patch.simple_query(""Who is surfing?"")
    return surfer_patches[0].simple_query(""Who is surfing?"")"
18106780,Which room is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
1892692,What color do you think the bowl that is to the right of the person is?,"
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for bowl_patch in bowl_patches:
        right_of_person = (bowl_patch.simple_query(""Is the bowl to the right of the person?"") == ""yes"")
        if right_of_person:
            return bowl_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"") # crop would include the person so keep it in the query
    # If no bowl is to the right of the person, pick the first bowl
    return bowl_patches[0].simple_query(""What color do you think the bowl that is to the right of the person is?"")"
6952082,What color is the hair?,"
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"")"
3768067,What color is the pot the statue is to the right of?,"
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    statue_patch = statue_patches[0]
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        return ""none""
    for pot_patch in pot_patches:
        if pot_patch.horizontal_center > statue_patch.horizontal_center:
            return pot_patch.simple_query(""What color is the pot?"")
    return ""none"""
17866761,Is the clear glass on the shelf of the table?,"
    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    for clear_glass_patch in clear_glass_patches:
        table_patches = image_patch.find(""table"")
        for table_patch in table_patches:
            if clear_glass_patch.upper < table_patch.lower:
                return ""yes""
    return ""no"""
798020,Does the skirt look black or yellow?,"
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    for skirt_patch in skirt_patches:
        is_black = (skirt_patch.simple_query(""Is the skirt black?"") == ""yes"")
        if is_black:
            return ""black""
        else:
            return ""yellow"""
828981,How old is he?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How old is he?"")
    return man_patches[0].simple_query(""How old is he?"")"
7236463,Of what color is the book?,"
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""What color is the book?"")"
6376684,What color is the car to the left of the train car?,"
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    for car_patch in car_patches:
        if car_patch.horizontal_center < image_patch.horizontal_center:
            return car_patch.simple_query(""What color is the car to the left of the train car?"") # crop would include the car so keep it in the query
    # If no car is to the left of the train car, pick the first car
    return car_patches[0].simple_query(""What color is the car to the left of the train car?"")"
786798,Is this a photo of a beach?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a photo of a beach?"")"
19836753,What vehicles are to the left of the fence?,"
    image_patch = ImagePatch(image)
    vehicles_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicles_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    for vehicle_patch in vehicles_patches:
        if vehicle_patch.horizontal_center < image_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicles are to the left of the fence?"") # crop would include the fence so keep it in the query
    # If no vehicle is to the left of the fence, pick the first vehicle
    return vehicles_patches[0].simple_query(""What vehicles are to the left of the fence?"")"
15284615,Who is playing?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        return ""no""
    for remote_control_patch in remote_control_patches:
        if remote_control_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
17746396,What's the boy wearing?,"
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    return boy_patches[0].simple_query(""What's the boy wearing?"")"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?,"
    image_patch = ImagePatch(image)
    mug_patches = image_patch.find(""mug"")
    # Question assumes only one mug patch
    if len(mug_patches) == 0:
        # If no mug is found, query the image directly
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    for mug_patch in mug_patches:
        bottle_patches = image_patch.find(""bottle"")
        # Question assumes only one bottle patch
        if len(bottle_patches) == 0:
            return ""no""
        for bottle_patch in bottle_patches:
            tap_patches = image_patch.find(""tap"")
            # Question assumes only one tap patch
            if len(tap_patches) == 0:
                return ""no""
            for tap_patch in tap_patches:
                if mug_patch.horizontal_center > bottle_patch.horizontal_center and bottle_patch.horizontal_center > tap_patch.horizontal_center:
                    return ""yes""
    return ""no"""
13826837,What color is the door?,"
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    return door_patches[0].simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?,"
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse""))"
2964690,What is in front of the mountains?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?,"
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for truck_patch in truck_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
                return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?,"
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    for scarf_patch in scarf_patches:
        if scarf_patch.verify_property(""scarf"", ""wool"") and scarf_patch.verify_property(""scarf"", ""long"") and scarf_patch.verify_property(""scarf"", ""blue""):
            return ""yes""
    return ""no"""
1189986,Is the man behind the elephant holding a surfboard?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    man_patch = man_patches[0]
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    for elephant_patch in elephant_patches:
        if man_patch.horizontal_center < elephant_patch.horizontal_center:
            surfboard_patches = image_patch.find(""surfboard"")
            # Question assumes only one surfboard patch
            if len(surfboard_patches) == 0:
                # If no surfboard is found, query the image directly
                return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
            for surfboard_"
8792466,Which color is the closed window?,"
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    return window_patches[0].simple_query(""Which color is the closed window?"")"
10188423,Who is wearing a shirt?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?,"
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    for vegetable_patch in vegetable_patches:
        girl_patches = image_patch.find(""girl"")
        # Question assumes only one girl patch
        if len(girl_patches) == 0:
            return ""carrot"" # default answer
        for girl_patch in girl_patches:
            if vegetable_patch.horizontal_center > girl_patch.horizontal_center:
                return vegetable_patch.simple_query(""What kind of vegetable is to the right of the girl?"") # crop would include the girl so keep it in the query
    return ""carrot"" # default answer"
4929965,Is there a black racket or clock in the picture?,"
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_clock = image_patch.exists(""clock"")
    return bool_to_yesno(is_black_racket or is_clock)"
4782038,What kind of animal is white?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What kind of animal is white?"") # crop would include white so keep it in the query
    # If no animal is white, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is white?"")"
14658201,Is the sheep that looks white and brown made of plastic?,"
    image_patch = ImagePatch(image)
    white_sheep_patches = image_patch.find(""white sheep"")
    brown_sheep_patches = image_patch.find(""brown sheep"")
    # Question assumes only one white sheep patch
    if len(white_sheep_patches) == 0:
        # If no white sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    for white_sheep_patch in white_sheep_patches:
        for brown_sheep_patch in brown_sheep_patches:
            if white_sheep_patch.verify_property(""sheep"", ""white"") and brown_sheep_patch.verify_property(""sheep"", ""brown""):
                return white_sheep_patch.verify_property(""sheep"", ""plastic"")
    return ""no"""
1441865,Do you see any boxes on the table under the grill?,"
    image_patch = ImagePatch(image)
    boxes_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(boxes_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    for box_patch in boxes_patches:
        if box_patch.verify_property(""box"", ""under the grill""):
            return ""yes""
    return ""no"""
1424926,What is the tag on?,"
    image_patch = ImagePatch(image)
    tag_patches = image_patch.find(""tag"")
    # Question assumes only one tag patch
    if len(tag_patches) == 0:
        # If no tag is found, query the image directly
        return image_patch.simple_query(""What is the tag on?"")
    return tag_patches[0].simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?,"
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    for laptop_patch in laptop_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > laptop_patch.horizontal_center:
                return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    # If no furniture is found, query the image directly
    return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")"
3635257,Is there any freezer in this photo?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there any freezer in this photo?"")"
8821026,Are there either any bags or chairs?,"
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?,"
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    bus_patch = bus_patches[0]
    driver_patches = image_patch.find(""driver"")
    # Question assumes only one driver patch
    if len(driver_patches) == 0:
        return ""bus""
    for driver_patch in driver_patches:
        if driver_patch.upper > bus_patch.upper:
            return ""truck""
    return ""bus"""
17204662,What is that man in front of?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is that man in front of?"")
    man_patch = man_patches[0]
    other_patches = image_patch.find(""other"")
    # Question assumes only one other patch
    if len(other_patches) == 0:
        return ""a wall""
    for other_patch in other_patches:
        if other_patch.horizontal_center > man_patch.horizontal_center:
            return ""a wall""
    return ""a person"""
380866,Are there any girls or radios?,"
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The girl is sitting on what?"")
    return girl_patches[0].simple_query(""The girl is sitting on what?"")"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?,"
    image_patch = ImagePatch(image)
    white_lamp_patches = image_patch.find(""white lamp"")
    # Question assumes only one white lamp patch
    if len(white_lamp_patches) == 0:
        # If no white lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for white_lamp_patch in white_lamp_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if white_lamp_patch.horizontal_center < pillow_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
16545552,What color do you think is the vehicle the girl is washing?,"
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    girl_patch = girl_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > girl_patch.horizontal_center:
            return vehicle_patch.simple_query(""What color is the vehicle the girl is washing?"") # crop would include the vehicle so keep it in the query
    return vehicle_patches[0].simple_query(""What color is the vehicle the girl is washing?"")"
16719872,Are there motorcycles to the left of the man who is wearing a hat?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        return ""no""
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?,"
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    garbage_can_patch = garbage_can_patches[0]
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        # If no stroller is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    for stroller_patch in stroller_patches:
        if stroller_patch.horizontal_center > garbage_can_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
13711589,What do the truck and the street sign have in common?,"
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    street_sign_patches = image_patch.find(""street sign"")
    # Question assumes only one street sign patch
    if len(street_sign_patches) == 0:
        return ""They are both on the ground.""
    for truck_patch in truck_patches:
        for street_sign_patch in street_sign_patches:
            if truck_patch.horizontal_center == street_sign_patch.horizontal_center:
                return ""They are both centered.""
    return ""They are both on the ground."""
10227573,Who is wearing a shirt?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is the man leading?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""man""
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the man leading?"") # crop would include the man so keep it in the query
    return ""man"""
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?,"
    image_patch = ImagePatch(image)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
    for curtain_patch in curtain_patches:
        dresser_patches = image_patch.find(""dresser"")
        for dresser_patch in dresser_patches:
            if dresser_patch.horizontal_center > curtain_patch.horizontal_center:
                right_piece_of_furniture_patches = image_patch.find(""piece of furniture"")
                # Question assumes only one right piece of furniture patch
                if len(right_piece_of_furniture_patches) == 0:
                    # If no right piece of furniture is found, query the image directly
                    return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
                for right_piece_of_furniture_patch in right_piece_of_furniture_patches:
                    if"
7190226,Does the puddle look large?,"
    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    return bool_to_yesno(puddle_patches[0].verify_property(""puddle"", ""large""))"
11675152,Who throws the frisbee?,"
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Who throws the frisbee?"")
    for frisbee_patch in frisbee_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if frisbee_patch.horizontal_center > man_patch.horizontal_center:
                return man_patch.simple_query(""Who throws the frisbee?"")
    return image_patch.simple_query(""Who throws the frisbee?"")"
8723676,Which kind of animal is the water on?,"
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is the water on?"")
    water_patch = water_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""wet""):
            return animal_patch.simple_query(""What kind of animal is the water on?"") # crop would include the water so keep it in the query
    return water_patch.simple_query(""Which kind of animal is the water on?"")"
61046657,Do you think that traffic light is tall?,"
    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    # Question assumes only one traffic light patch
    if len(traffic_light_patches) == 0:
        # If no traffic light is found, query the image directly
        return image_patch.simple_query(""Do you think that traffic light is tall?"")
    return bool_to_yesno(traffic_light_patches[0].verify_property(""traffic light"", ""tall""))"
9581034,On which side is the wine glass?,"
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    if wine_glass_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?,"
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        for pizza_patch in pizza_patches:
            if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
                return ""right""
    return ""left"""
18535266,Is the face mask made of the same material as the mask?,"
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    # Question assumes only one face mask patch
    if len(face_mask_patches) == 0:
        # If no face mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    for face_mask_patch in face_mask_patches:
        mask_patches = image_patch.find(""mask"")
        for mask_patch in mask_patches:
            if face_mask_patch.verify_property(""material"", mask_patch.simple_query(""What is the material of the mask?"")):
                return ""yes""
    return ""no"""
11254215,What is the tan item of furniture?,"
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan item of furniture"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What is the tan item of furniture?"")
    return tan_patches[0].simple_query(""What is the tan item of furniture?"")"
1852010,How is the device to the right of the device on the desk called?,"
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    for device_patch in device_patches:
        right_device_patches = image_patch.find(""device"")
        for right_device_patch in right_device_patches:
            if right_device_patch.horizontal_center > device_patch.horizontal_center:
                return right_device_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    return device_patches[0].simple_query(""How is the device to the right of the device on the desk called?"")"
1587534,Is the device on the floor black and large?,"
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    for device_patch in device_patches:
        is_black = (device_patch.simple_query(""Is the device black?"") == ""yes"")
        is_large = (device_patch.simple_query(""Is the device large?"") == ""yes"")
        if is_black and is_large:
            return ""yes""
    return ""no"""
8470757,Are there any surfboards?,"
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))"
11273949,Is the shirt white?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))"
7475238,What's the airplane in front of?,"
    image_patch = ImagePatch(image)
    airplane_patches = image_patch.find(""airplane"")
    # Question assumes only one airplane patch
    if len(airplane_patches) == 0:
        # If no airplane is found, query the image directly
        return image_patch.simple_query(""What's the airplane in front of?"")
    for airplane_patch in airplane_patches:
        objects_in_front_of_airplane = image_patch.find(""object"")
        for object_in_front_of_airplane in objects_in_front_of_airplane:
            if object_in_front_of_airplane_is_airplane_in_front_of_airplane(object_in_front_of_airplane=object_in_front_of_airplane_is_airplane_in_front_of_airplane, airplane_patch=airplane_patch):
                return object_in_front_of_airplane_is_airplane_in_front_of_airplane.simple_query(""What's the airplane in front of?"")
    # If no object is in front of the airplane, pick the first object
    return objects_in_front_of_airplane[0].simple_query(""What's the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?,"
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        if horse_patch.horizontal_center > image_patch.horizontal_center:
            return horse_patch.simple_query(""Where does the horse to the right of the hose run?"") # crop would include the hose so keep it in the query
    # If no horse is to the right of the hose, pick the first horse
    return horse_patches[0].simple_query(""Where does the horse to the right of the hose run?"")"
3932624,Are there either any gray chairs or laptops?,"
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?,"
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water brown or blue?"")
    return water_patches[0].best_text_match([""brown"", ""blue""])"
9256263,Which kind of furniture is brown?,"
    image_patch = ImagePatch(image)
    brown_furniture_patches = image_patch.find(""brown furniture"")
    # Question assumes only one brown furniture patch
    if len(brown_furniture_patches) == 0:
        # If no brown furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    return brown_furniture_patches[0].simple_query(""Which kind of furniture is brown?"")"
18719769,Is the man wearing glasses?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    return man_patches[0].verify_property(""man"", ""glasses"")"
18342439,What animal is white?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What animal is white?"") # crop would include white so keep it in the query
    # If no animal is white, pick the first animal
    return animal_patches[0].simple_query(""What animal is white?"")"
8665725,Who is wearing a coat?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Who is wearing a coat?"")"
5440407,What vehicle isn't black?,"
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""black"") == False:
            return vehicle_patch.simple_query(""What vehicle isn't black?"") # crop would include black so keep it in the query
    # If no vehicle isn't black, pick the first vehicle
    return vehicle_patches[0].simple_query(""What vehicle isn't black?"")"
4104707,On which side of the picture is the oven?,"
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3126763,What is common to the logo and the letter?,"
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    letter_patches = image_patch.find(""letter"")
    # Question assumes only one letter patch
    if len(letter_patches) == 0:
        # If no letter is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    for logo_patch in logo_patches:
        for letter_patch in letter_patches:
            if logo_patch.horizontal_center == letter_patch.horizontal_center:
                return ""the center""
    return ""the edges"""
18640925,What animal is in the water the man is walking through?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""swimming""):
            continue
        if animal_patch.horizontal_center > man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in the water the man is walking through?"")
    return ""none"""
125488,What is the man wearing?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        return man_patch.simple_query(""What is the man wearing?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.horizontal_center > man_patch.horizontal_center:
            return clothing_patch.simple_query(""What is the man wearing?"") # crop would include the clothing so keep it in the query
    return man_patch.simple_query(""What is the man wearing?"")"
5925435,What is the sidewalk made of?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?,"
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].simple_query(""What is the pattern of the coat?"")"
4819547,What kind of furniture is white?,"
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What kind of furniture is white?"") # crop would include the white furniture so keep it in the query
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is white?"")"
14263174,What color do you think the chair that is to the right of the other chair is?,"
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    right_chair_patch = chair_patches[0]
    right_chair_color = right_chair_patch.simple_query(""What color is the chair that is to the right of the other chair?"")
    left_chair_patches = image_patch.find(""chair"")
    # Question assumes only one left chair patch
    if len(left_chair_patches) == 0:
        # If no left chair is found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    left_chair_patch = left_chair_patches[0]
    left_chair_color = left_chair_patch.simple_query(""What color is the chair that is to the left of the other chair?"")
    if right_chair_color == left_chair_color:
        return right_chair_color
   "
7515210,Is the man that is to the left of the person riding the green train in front of the fence?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    person_patch = person_patches[0]
    green_train_patches = image_patch.find(""green train"")
    # Question assumes only one green train patch
    if len(green_train_patches) == 0:
        # If no green train is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    green_train_patch = green_train_patches[0]"
9239936,Do the cows near the trees have white color?,"
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    for cow_patch in cow_patches:
        near_tree_patches = cow_patch.find(""tree"")
        # Question assumes only one tree patch
        if len(near_tree_patches) == 0:
            return ""no""
        for near_tree_patch in near_tree_patches:
            if cow_patch.verify_property(""cow"", ""near tree""):
                return cow_patch.simple_query(""Do the cows near the trees have white color?"") # crop would include the tree so keep it in the query
    return ""no"""
1885178,"In which part of the image is the remote control, the bottom or the top?","
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    if remote_control_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12341631,Which color is the bag in the top part?,"
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    for bag_patch in bag_patches:
        if bag_patch.upper > image_patch.upper / 2:
            return bag_patch.simple_query(""Which color is the bag in the top part?"") # crop would include the bag so keep it in the query
    # If no bag is in the top part, pick the first bag
    return bag_patches[0].simple_query(""Which color is the bag in the top part?"")"
5532909,"What is the weather like, cloudless or maybe rainy?","
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")"
2618222,What is connected to the open laptop?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is connected to the open laptop?"")"
3252220,Of which color is the shirt the man wears?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = man_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""white""
    return shirt_patches[0].simple_query(""Of which color is the shirt?"")"
8947801,What is in the vase?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the vase?"")"
10841562,Is the color of the pants the same as the shorts?,"
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        # If no shorts are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    for pants_patch in pants_patches:
        for shorts_patch in shorts_patches:
            if pants_patch.verify_property(""pants"", ""color"") == shorts_patch.verify_property(""shorts"", ""color""):
                return ""yes""
    return ""no"""
15511838,What kind of furniture is to the left of the bucket?,"
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    for furniture_patch in furniture_patches:
        bucket_patches = image_patch.find(""bucket"")
        for bucket_patch in bucket_patches:
            if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"") # crop would include the bucket so keep it in the query
    # If no furniture is to the left of the bucket, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is to the left of the bucket?"")"
14495306,Is there any racket to the right of the person that the woman is to the left of?,"
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    for racket_patch in racket_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center < racket_patch.horizontal_center:
                return ""yes""
    return ""no"""
14841932,Do the tiles have square shape and black color?,"
    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    # Question assumes only one tile patch
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    for tile_patch in tile_patches:
        is_square = (tile_patch.simple_query(""Is the tile square?"") == ""yes"")
        is_black = (tile_patch.simple_query(""What color is the tile?"") == ""black"")
        if not is_square or not is_black:
            return ""no""
    return ""yes"""
41029381,What is the vehicle that is the same color as the shirt called?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""same color as shirt""):
            return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"") # crop would include the shirt so keep it in the query
    # If no vehicle is the same color as the shirt, pick the first vehicle
    return vehicle_patches[0].simple_query(""What is the vehicle that is the same color as the shirt called?"")"
161027428,Are there both windows and doors in the image?,"
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
16478246,Does the pillow to the right of the man have green color and large size?,"
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    pillow_patch = pillow_patches[0]
    is_green = pillow_patch.verify_property(""pillow"", ""green"")
    is_large = pillow_patch.verify_property(""pillow"", ""large"")
    return bool_to_yesno(is_green and is_large)"
9450308,Is the happy person wearing a hat?,"
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    for happy_patch in happy_patches:
        hat_patches = image_patch.find(""hat"")
        # Question assumes only one hat patch
        if len(hat_patches) == 0:
            return ""no""
        for hat_patch in hat_patches:
            if hat_patch.horizontal_center > happy_patch.horizontal_center:
                return ""yes""
    return ""no"""
11850389,What place is this?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
17250452,What kind of appliance is on the right of the drawer?,"
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center > image_patch.horizontal_center:
            return appliance_patch.simple_query(""What kind of appliance is on the right of the drawer?"") # crop would include the appliance so keep it in the query
    # If no appliance is on the right of the drawer, pick the first appliance
    return appliance_patches[0].simple_query(""What kind of appliance is on the right of the drawer?"")"
14857961,Is the lady to the right of a woman?,"
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    for lady_patch in lady_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center > lady_patch.horizontal_center:
                return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?,"
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    pan_patch = pan_patches[0]
    utensil_patches = image_patch.find(""cooking utensil"")
    for utensil_patch in utensil_patches:
        if utensil_patch.horizontal_center < pan_patch.horizontal_center:
            return utensil_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return ""none"""
9745131,Which color is the truck that is to the left of the lamps?,"
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    for truck_patch in truck_patches:
        if truck_patch.horizontal_center < image_patch.horizontal_center:
            return truck_patch.simple_query(""What color is the truck that is to the left of the lamps?"") # crop would include the lamps so keep it in the query
    return ""red"""
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?,"
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    motorcycle_patch = motorcycle_patches[0]
    bird_patches = image_patch.find(""bird"")
    for bird_patch in bird_patches:
        if bird_patch.verify_property(""bird"", ""same color as the motorcycle in the bottom of the image""):
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"") # crop would include the motorcycle so keep it in the query
    # If no bird is the same color as the motorcycle, pick the first bird
    return bird_patches[0].simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")"
867818,Is the man on the skateboard?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the skateboard?"")
    for man_patch in man_patches:
        if man_patch.verify_property(""man"", ""skateboarding""):
            return ""yes""
    return ""no"""
13896221,What is on the table?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
1964517,What is the food that is above the white paper?,"
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is above the white paper?"")
    for food_patch in food_patches:
        if food_patch.verify_property(""food"", ""white""):
            return food_patch.simple_query(""What is the food that is above the white paper?"") # crop would include the white paper so keep it in the query
    # If no food is white, pick the first food
    return food_patches[0].simple_query(""What is the food that is above the white paper?"")"
15705231,Is the shelf to the left of a cabinet?,"
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > shelf_patch.horizontal_center:
                return ""yes""
    return ""no"""
15693846,Is the motorcycle parked on the grass?,"
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Is the motorcycle parked on the grass?"")
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.verify_property(""motorcycle"", ""parked""):
            return motorcycle_patch.verify_property(""motorcycle"", ""grass"")
    return ""no"""
13872995,Who is jumping?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?,"
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is this a dog or a cat?"")
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        return ""dog""
    return ""cat"""
12584623,What is the person with the bag wearing?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""clothes""
    for bag_patch in bag_patches:
        for person_patch in person_patches:
            if bag_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person with the bag wearing?"") # crop would include the bag so keep it in the query
    # If no person is holding the bag, pick the first person
    return person_patches[0].simple_query(""What is the person with the bag wearing?"")"
7202064,"What is this, a bus or a truck?","
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""What is this, a bus or a truck?"")
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        return ""bus""
    for bus_patch in bus_patches:
        for truck_patch in truck_patches:
            if bus_patch.horizontal_center > truck_patch.horizontal_center:
                return ""bus""
            elif bus_patch.horizontal_center < truck_patch.horizontal_center:
                return ""truck""
    return ""bus"""
16542208,Do you see either any beds or blankets there?,"
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)"
11700224,Do you see both lettuce and salad?,"
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    salad_patches = image_patch.find(""salad"")
    return bool_to_yesno(len(lettuce_patches) > 0 and len(salad_patches) > 0)"
1067136,Is the ball on the tree?,"
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball on the tree?"")
    for ball_patch in ball_patches:
        if ball_patch.verify_property(""ball"", ""on the ground""):
            return ""no""
    return ""yes"""
364079,What kind of furniture is to the right of the blanket?,"
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for furniture_patch in furniture_patches:
        for blanket_patch in blanket_patches:
            if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the right of the blanket?"") # crop would include the blanket so keep it in the query
    # If no furniture is to the right of the blanket, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is to the right of the blanket?"")
"
2533062,How large is the ground the zebra is standing on?,"
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    zebra_patch = zebra_patches[0]
    return zebra_patch.simple_query(""How large is the ground the zebra is standing on?"")"
19683710,The clock is inside what?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The clock is inside what?"")"
15674863,Is the racket in the top part?,"
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    return ""yes"" if racket_patches[0].vertical_center > image_patch.vertical_center else ""no"""
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?,"
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    for shirt_patch in shirt_patches:
        skateboard_patches = image_patch.find(""skateboard"")
        for skateboard_patch in skateboard_patches:
            if skateboard_patch.horizontal_center > shirt_patch.horizontal_center:
                return ""yes""
    return ""no"""
2292637,What is the color of the shirt that the passenger is wearing?,"
    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    for passenger_patch in passenger_patches:
        shirt_patches = passenger_patch.find(""shirt"")
        # Question assumes only one shirt patch
        if len(shirt_patches) == 0:
            return ""unknown""
        return shirt_patches[0].simple_query(""What is the color of the shirt?"")"
9175259,What is the chair made of?,"
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?,"
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    return carrot_patches[0].simple_query(""How big is the carrot in the top of the picture?"")"
1638685,What is the name of the vegetable that is on the yellow food?,"
    image_patch = ImagePatch(image)
    yellow_patches = image_patch.find(""yellow"")
    # Question assumes only one yellow patch
    if len(yellow_patches) == 0:
        # If no yellow is found, query the image directly
        return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    for yellow_patch in yellow_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center > yellow_patch.horizontal_center:
                return vegetable_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    # If no vegetable is on the yellow, pick the first vegetable
    return vegetable_patches[0].simple_query(""What is the name of the vegetable that is on the yellow food?"")"
5828256,Is the clock on a tower?,"
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock on a tower?"")
    for clock_patch in clock_patches:
        tower_patches = image_patch.find(""tower"")
        for tower_patch in tower_patches:
            if clock_patch.vertical_center < tower_patch.vertical_center:
                return ""yes""
    return ""no"""
18937563,What kind of animal is orange?,"
    image_patch = ImagePatch(image)
    orange_patches = image_patch.find(""orange"")
    # Question assumes only one orange patch
    if len(orange_patches) == 0:
        # If no orange is found, query the image directly
        return image_patch.simple_query(""What kind of animal is orange?"")
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.exists(""orange""):
            return animal_patch.simple_query(""What kind of animal is orange?"") # crop would include orange so keep it in the query
    # If no animal is orange, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is orange?"")"
14360113,What is the smiling woman holding?,"
    image_patch = ImagePatch(image)
    smiling_woman_patches = image_patch.find(""smiling woman"")
    # Question assumes only one smiling woman patch
    if len(smiling_woman_patches) == 0:
        # If no smiling woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    smiling_woman_patch = smiling_woman_patches[0]
    object_patches = image_patch.find(""object"")
    for object_patch in object_patches:
        if object_patch.horizontal_center > smiling_woman_patch.horizontal_center:
            return object_patch.simple_query(""What is the smiling woman holding?"") # crop would include the object so keep it in the query
    # If no object is found, pick the first object
    return object_patches[0].simple_query(""What is the smiling woman holding?"")"
593188,Is the hair short?,"
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    return bool_to_yesno(hair_patches[0].verify_property(""hair"", ""short""))"
10824666,Are there ladies to the left of the man that is wearing shorts?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    for shorts_patch in shorts_patches:
        if shorts_patch.horizontal_center < man_patch.horizontal_center:
            ladies_patches = image_patch.find(""ladies"")
            for ladies_patch in ladies_patches:
                if ladies_patch.horizontal_center < man_patch.horizontal_center:
                    return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?,"
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    for gray_car_patch in gray_car_patches:
        garbage_bin_patches = image_patch.find(""garbage bin"")
        # Question assumes only one garbage bin patch
        if len(garbage_bin_patches) == 0:
            return ""left""
        for garbage_bin_patch in garbage_bin_patches:
            if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
7574939,Is there any table or plate that is white?,"
    image_patch = ImagePatch(image)
    is_table = image_patch.exists(""table"")
    is_plate = image_patch.exists(""plate"")
    is_white = image_patch.exists(""white"")
    return bool_to_yesno(is_table or is_plate or is_white)"
12252101,Is it outdoors?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
6943442,What cooking utensil is on the oven?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What cooking utensil is on the oven?"")"
2977077,The propeller that looks red is what pattern?,"
    image_patch = ImagePatch(image)
    red_propeller_patches = image_patch.find(""red propeller"")
    # Question assumes only one red propeller patch
    if len(red_propeller_patches) == 0:
        # If no red propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    return red_propeller_patches[0].simple_query(""What pattern is the red propeller?"")"
11190306,Which kind of animal is to the left of the train?,"
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the left of the train?"")
    train_patch = train_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < train_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is to the left of the train?"") # crop would include the train so keep it in the query
    # If no animal is to the left of the train, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is to the left of the train?"")"
5107190,Do you see both an airplane and a truck?,"
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?,"
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"")"
12536783,What kind of animal is in front of the pole?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is in front of the pole?"")
    return animal_patches[0].simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?,"
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    for glasses_patch in glasses_patches:
        t_shirt_patches = image_patch.find(""t-shirt"")
        for t_shirt_patch in t_shirt_patches:
            if glasses_patch.horizontal_center > t_shirt_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
18655269,Which room is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it indoors?"")"
1705569,Does the pot on top of the stove look black?,"
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    for pot_patch in pot_patches:
        if pot_patch.verify_property(""pot"", ""black""):
            return ""yes""
    return ""no"""
1028569,Are there both a cyclist and a helmet in the photo?,"
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)"
13954115,Are there any men to the left of the person in the crowd?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?,"
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < image_patch.horizontal_center:
            return device_patch.simple_query(""What kind of device is to the left of the keyboard?"") # crop would include the keyboard so keep it in the query
    # If no device is to the left of the keyboard, pick the first device
    return device_patches[0].simple_query(""What kind of device is to the left of the keyboard?"")"
1017626,Who is inside the train?,"
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Who is inside the train?"")"
7650014,Which place is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?,"
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the car doing?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""left of car""):
            return person_patch.simple_query(""What is the person to the left of the car doing?"")
    return ""driving"""
1310985,Is the yellow vehicle to the left of a lamp?,"
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        lamp_patches = image_patch.find(""lamp"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center > yellow_vehicle_patch.horizontal_center:
                return ""yes""
    return ""no"""
646935,Which room is it?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
9495263,Is the woman to the left or to the right of the man that wears a cap?,"
    image_patch = ImagePatch(image)
    man_with_cap_patches = image_patch.find(""man with cap"")
    # Question assumes only one man with cap patch
    if len(man_with_cap_patches) == 0:
        # If no man with cap is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    man_with_cap_patch = man_with_cap_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""left""
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < man_with_cap_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
946016,Do you think the animal that is sitting-down is small or large?,"
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""sitting-down""):
            return animal_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"") # crop would include sitting-down so keep it in the query
    # If no animal is sitting-down, pick the first animal
    return animal_patches[0].simple_query(""Do you think the animal that is sitting-down is small or large?"")"
9617920,Do the garbage can and the pan have the same color?,"
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        return ""yes""
    for pan_patch in pan_patches:
        if garbage_can_patches[0].verify_property(""garbage can"", ""color"") == pan_patch.verify_property(""pan"", ""color""):
            return ""yes""
    return ""no"""
3578781,Which kind of clothing is black?,"
    image_patch = ImagePatch(image)
    black_clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(black_clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for black_clothing_patch in black_clothing_patches:
        if black_clothing_patch.verify_property(""clothing"", ""black""):
            return black_clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include black so keep it in the query
    # If no clothing is black, pick the first clothing
    return black_clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
4695656,What is the lamp on?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lamp on?"")"
13696926,The homes that are to the left of the people have what color?,"
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    people_patch = people_patches[0]
    homes_patches = image_patch.find(""homes"")
    # Question assumes only one homes patch
    if len(homes_patches) == 0:
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    for homes_patch in homes_patches:
        if homes_patch.horizontal_center < people_patch.horizontal_center:
            return homes_patch.simple_query(""What color are the homes that are to the left of the people?"")
    return image_patch.simple_query(""The homes that are to the left of the people have what color?"")"
16946079,What is on the wall?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?,"
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    return bool_to_yesno(napkin_patches[0].horizontal_center > image_patch.horizontal_center)"
11513897,What appliance is the label on?,"
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    # Question assumes only one label patch
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    return label_patches[0].simple_query(""What appliance is the label on?"")"
8240644,What is the color of the bird's tail?,"
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    return bird_patches[0].simple_query(""What is the color of the bird's tail?"")"
5245080,Is he to the right or to the left of the camera?,"
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17800894,Are there both a window and a door in the picture?,"
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
191027873,Where is the snowboard?,"
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snowboard?"")"
1964079,Are the box and the paper the same color?,"
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    box_patch = box_patches[0]
    paper_patch = paper_patches[0]
    return bool_to_yesno(box_patch.verify_property(""box"", ""color"") == paper_patch.verify_property(""paper"", ""color""))"
