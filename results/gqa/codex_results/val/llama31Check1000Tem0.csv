sample_id,query,generated_code
13151559,Is the large hair both white and soft?," # assumes only one large hair
    image_patch = ImagePatch(image)
    large_hair_patches = image_patch.find(""large hair"")
    if len(large_hair_patches) == 0:
        return ""no""
    large_hair_patch = large_hair_patches[0]
    is_white = large_hair_patch.verify_property(""large hair"", ""white"")
    is_soft = large_hair_patch.verify_property(""large hair"", ""soft"")
    return bool_to_yesno(is_white and is_soft)"
18370956,Who is eating the cupcake?," # assumes only one cupcake
    image_patch = ImagePatch(image)
    cupcake_patches = image_patch.find(""cupcake"")
    # Question assumes only one cupcake patch
    if len(cupcake_patches) == 0:
        # If no cupcake is found, query the image directly
        return image_patch.simple_query(""Who is eating the cupcake?"")
    for cupcake_patch in cupcake_patches:
        is_eating = (cupcake_patch.simple_query(""Is someone eating the cupcake?"") == ""yes"")
        if is_eating:
            return cupcake_patch.simple_query(""Who is eating the cupcake?"") # crop would include eating so keep it in the query
    # If no one is eating the cupcake, query the image directly
    return image_patch.simple_query(""Who is eating the cupcake?"")"
6436809,What is the guy wearing?," # assumes one guy
    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    if len(guy_patches) == 0:
        return image_patch.simple_query(""What is the guy wearing?"")
    return guy_patches[0].simple_query(""What is the guy wearing?"")"
117037,Which kind of food is to the right of the cabbage?," # assumes only one cabbage
    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    if len(cabbage_patches) == 0:
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    cabbage_patch = cabbage_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center > cabbage_patch.horizontal_center:
            return food_patch.simple_query(""Which kind of food is to the right of the cabbage?"") # crop would include the food so keep it in the query
    return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"") # if no food is to the right, query the image directly"
758936,Who wears the cap?," # assumes only one cap
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    return cap_patches[0].simple_query(""Who wears the cap?"")"
111046440,Who is pointing?," # assumes only one person is pointing
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is pointing?"")"
15804389,Is the woman's hair short or long?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""Is the woman's hair short or long?"")"
11445636,The women are watching who?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""woman"")
    if len(women_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""The women are watching who?"")
    woman_patch = women_patches[0]
    return woman_patch.simple_query(""Who are the women watching?"")"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?," # assumes one woman and one kitchen
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    woman_patch = woman_patches[0]
    dishwasher_patches = image_patch.find(""dishwasher"")
    # Question assumes only one dishwasher patch
    if len(dishwasher_patches) == 0:
        return ""no""
    dishwasher_patch = dishwasher_patches[0]
    if dishwasher_patch.horizontal_center < woman_patch.horizontal_center:
        kitchen_patches = image_patch.find(""kitchen"")
        # Question assumes only one kitchen patch
        if len(kitchen_patches) == 0:
            return ""no""
        kitchen_patch = kitchen_patches[0]
        if not kitchen_patch.verify_property(""kitchen"", ""inside""):
            return ""no""
        return bool_to_yesno(dishwasher_patch.verify_property(""dishwasher"", ""white"") and image_patch.simple_query(""Does the gas stove have white color?"") == ""yes"")
    return ""no"""
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?," # assumes one bed and one baby
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_patch = bed_patches[0]
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    baby_patch = baby_patches[0]
    if baby_patch.horizontal_center > bed_patch.horizontal_center:
        return bed_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    else:
        return bed_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the left of?"")"
758958,Is there either any red pillow or snowboard?," # returns yes or no
    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)"
143816,Which place is it?," # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?," # left or right
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    # Question assumes only one knife patch
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Which side is the knife on?"")
    if knife_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17829769,What is the computer mouse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?," # assumes only one toddler patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toddler holding?"")"
2951242,Is the gray shirt sleeveless or short sleeved?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    shirt_patch = shirt_patches[0]
    if shirt_patch.simple_query(""Is the shirt sleeveless?"") == ""yes"":
        return ""sleeveless""
    else:
        return ""short sleeved"""
15241795,Is the tank top red?," # assumes only one tank top
    image_patch = ImagePatch(image)
    tank_top_patches = image_patch.find(""tank top"")
    if len(tank_top_patches) == 0:
        return image_patch.simple_query(""Is the tank top red?"")
    return bool_to_yesno(tank_top_patches[0].verify_property(""tank top"", ""red""))"
13885234,Which kind of animal is in front of the rocks?," # assumes only one rock patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is in front of the rocks?"")
    # If no animal is in front of the rocks, query the image directly
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""grapes""))"
6455591,What type of furniture is white?," # assumes only one white furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture white?"") == ""yes"":
            return furniture_patch.simple_query(""What type of furniture is white?"")
    return ""no furniture found"""
1033761,What is the blue clothing item?," # returns the first clothing item that is blue
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""blue""):
            return clothing_patch.simple_query(""What is the blue clothing item?"")
    return image_patch.simple_query(""What is the blue clothing item?"")"
17726504,Who is wearing the glasses?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the glasses?"")"
13112902,Is the woman wearing a bracelet?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    return bool_to_yesno(woman_patch.verify_property(""woman"", ""bracelet""))"
698766,What is the food that is not white?," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        if food_patch.simple_query(""Is the food white?"") == ""no"":
            return food_patch.simple_query(""What is the food that is not white?"")
    # If all food is white, query the image directly
    return image_patch.simple_query(""What is the food that is not white?"")"
1332276,Are there both a cup and a bottle in the picture?," # assumes only one cup and one bottle
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?," # glove is a common object
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?," # assumes one helmet patch
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for helmet_patch in helmet_patches:
        return helmet_patch.simple_query(""Who is holding the helmet?"")"
2143247,What is the name of the food to the left of the donut that looks little?," # assumes only one donut patch
    image_patch = ImagePatch(image)
    donut_patches = image_patch.find(""donut"")
    if len(donut_patches) == 0:
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    donut_patch = donut_patches[0]
    for food_patch in image_patch.find(""food""):
        if food_patch.horizontal_center < donut_patch.horizontal_center and food_patch.width < 50:
            return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")"
3767951,Is the clock to the right or to the left of the man on the left?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    if len(clock_patches) == 0:
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    clock_patch = clock_patches[0]
    if clock_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17655180,What's the sticker on?," # assumes only one sticker
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    if len(sticker_patches) == 0:
        return image_patch.simple_query(""What's the sticker on?"")
    return sticker_patches[0].simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?," # assumes only one car
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
7188981,Does the giraffe look adult?," # giraffe is a specific type of animal
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""adult""))"
16852802,Of what color are the pants?," # returns the color of the pants
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"")"
9619158,What kind of watercraft is full of men?," # assumes one watercraft
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    if len(watercraft_patches) == 0:
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    watercraft_patch = watercraft_patches[0]
    is_full_of_men = (watercraft_patch.simple_query(""Is the watercraft full of men?"") == ""yes"")
    if is_full_of_men:
        return watercraft_patch.simple_query(""What kind of watercraft is full of men?"")
    return ""unknown"""
3625225,On which side of the picture are the boats?," # left or right
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    if boat_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?," # assumes only two elephants
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only two elephant patches
    if len(elephant_patches) < 2:
        # If no two elephants are found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_patch = elephant_patches[0]
    right_patch = elephant_patches[1]
    if left_patch.horizontal_center < right_patch.horizontal_center:
        return bool_to_yesno(left_patch.verify_property(""elephant"", ""large""))
    else:
        return bool_to_yesno(right_patch.verify_property(""elephant"", ""large""))"
19834124,What is the girl holding?," # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What is the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What is the girl holding?"")"
4617704,Does the toilet seat that is not down appear to be white and open?," # assumes only one toilet seat
    image_patch = ImagePatch(image)
    toilet_seats_patches = image_patch.find(""toilet seat"")
    if len(toilet_seats_patches) == 0:
        return ""no""
    for toilet_seats_patch in toilet_seats_patches:
        if not toilet_seats_patch.verify_property(""toilet seat"", ""down""):
            return bool_to_yesno(toilet_seats_patch.verify_property(""toilet seat"", ""white"") and toilet_seats_patch.verify_property(""toilet seat"", ""open""))
    return ""no"""
5899539,Are there any bottles or mugs that are not purple?," # bottle or mug
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_mug = image_patch.exists(""mug"")
    if not (is_bottle or is_mug):
        return ""no""
    for bottle_patch in image_patch.find(""bottle""):
        if bottle_patch.verify_property(""bottle"", ""purple"") == False:
            return ""yes""
    for mug_patch in image_patch.find(""mug""):
        if mug_patch.verify_property(""mug"", ""purple"") == False:
            return ""yes""
    return ""no"""
2631593,Which place is it?," # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?," # assumes one living room
    image_patch = ImagePatch(image)
    living_room_patches = image_patch.find(""living room"")
    # Question assumes only one living room patch
    if len(living_room_patches) == 0:
        # If no living room is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    living_room_patch = living_room_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > living_room_patch.horizontal_center:
        return ""yes""
    return ""no"""
111054378,Is the small couch to the right or to the left of the bottle?," # assumes only one bottle and one couch
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    bottle_patches = image_patch.find(""bottle"")
    if len(couch_patches) == 0 or len(bottle_patches) == 0:
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    couch_patch = couch_patches[0]
    bottle_patch = bottle_patches[0]
    if couch_patch.horizontal_center > bottle_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
9392411,Is the bottle to the right or to the left of the appliance on the left?," # assumes only one appliance on the left
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    for bottle_patch in bottle_patches:
        appliance_patches = image_patch.find(""appliance"")
        # Question assumes only one appliance patch
        if len(appliance_patches) == 0:
            return ""left""
        appliance_patch = appliance_patches[0]
        if appliance_patch.horizontal_center < image_patch.horizontal_center / 2:
            return ""left""
        if bottle_patch.horizontal_center < appliance_patch.horizontal_center:
            return ""left""
        return ""right"""
16753829,What type of animal is sitting in the container in the bottom of the photo?," # assumes only one container
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    container_patch = container_patches[0]
    animal_patches = container_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    return animal_patches[0].simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")"
1345482,What is that train in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?," # assumes only one girl and one palm tree
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    girl_patch = girl_patches[0]
    palm_patches = image_patch.find(""palm tree"")
    # Question assumes only one palm tree patch
    if len(palm_patches) == 0:
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    palm_patch = palm_patches[0]
    if palm_patch.horizontal_center < girl_patch.horizontal_center:
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    for car_patch in car_patches:
        if car_patch.horizontal_center > palm_patch.horizontal_center:
            return ""yes""
    return ""no"""
459445,In which part is the silver device?," # assumes only one device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""silver device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""In which part is the silver device?"")
    device_patch = device_patches[0]
    if device_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11786203,What is the man on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_brown_door = image_patch.exists(""brown door"")
    is_brown_chair = image_patch.exists(""brown chair"")
    return bool_to_yesno(is_brown_door or is_brown_chair)"
131031372,What is the napkin in?," # assumes only one napkin
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        return image_patch.simple_query(""What is the napkin in?"")
    return napkin_patches[0].simple_query(""What is the napkin in?"")"
1241681,Are there any people behind the white dessert?," # cake or pie
    image_patch = ImagePatch(image)
    white_dessert_patches = image_patch.find(""white dessert"")
    # Question assumes only one white dessert patch
    if len(white_dessert_patches) == 0:
        # If no white dessert is found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    white_dessert_patch = white_dessert_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    people_patch = people_patches[0]
    if people_patch.horizontal_center < white_dessert_patch.horizontal_center:
        return ""no""
    return ""yes"""
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")"
8553578,What is the Pikachu doing?," # assumes only one Pikachu
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?"," # assumes one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?," # mountain is a general term
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is on the large mountains?"")"
5107295,What is in the sky?," # contains a relation (in the sky), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?," # fruit is on a watercraft
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of watercraft is the fruit on?"")"
1827218,Is the bottle in the bottom of the image?," # assumes only one bottle
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        return ""no""
    return bool_to_yesno(bottle_patches[0].vertical_center > image_patch.height / 2)"
10938155,What color is the sky?," # assumes only one sky patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?," # assumes one sail
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    if len(sail_patches) == 0:
        return image_patch.simple_query(""Does the sail look white or red?"")
    sail_patch = sail_patches[0]
    return sail_patch.best_text_match([""white"", ""red""])"
3662784,Do you see either any traffic lights or cars?," # traffic light is a subset of traffic
    image_patch = ImagePatch(image)
    is_traffic_light = image_patch.exists(""traffic light"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_traffic_light or is_car)"
15515711,Are there any girls to the right of the yellow helmet?," # assumes one yellow helmet
    image_patch = ImagePatch(image)
    yellow_helmet_patches = image_patch.find(""yellow helmet"")
    # Question assumes only one yellow helmet patch
    if len(yellow_helmet_patches) == 0:
        # If no yellow helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    yellow_helmet_patch = yellow_helmet_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        return ""no""
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center > yellow_helmet_patch.horizontal_center:
            return ""yes""
    return ""no"""
6315316,Which kind of furniture is in front of the window?," # assumes only one window
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is in front of the window?"")
    window_patch = window_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""Which kind of furniture is in front of the window?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center < window_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is in front of the window?"")
    return furniture_patches[0].simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?," # assumes only one faucet
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    if len(appliance_patches) == 0:
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center < image_patch.horizontal_center:
            return appliance_patch.simple_query(""What appliance is to the left of the faucet?"")
    return image_patch.simple_query(""What appliance is to the left of the faucet?"")"
41050828,What is the color of the jacket?," # assumes one jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    if len(jacket_patches) == 0:
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"")"
610914,Is the green boat to the right or to the left of the wood house?," # assumes only one boat and one house
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    house_patches = image_patch.find(""house"")
    if len(boat_patches) == 0 or len(house_patches) == 0:
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    boat_patch = boat_patches[0]
    house_patch = house_patches[0]
    if boat_patch.horizontal_center > house_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13158346,Is the woman in the bottom part of the picture?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    return ""no"""
16318707,Are there either any colorful bikes or skateboards?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bike = image_patch.exists(""bike"") and image_patch.verify_property(""bike"", ""colorful"")
    is_skateboard = image_patch.exists(""skateboard"") and image_patch.verify_property(""skateboard"", ""colorful"")
    return bool_to_yesno(is_bike or is_skateboard)"
2805654,Is the bag to the right or to the left of the bench?," # assumes only one bag and one bench
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    bench_patches = image_patch.find(""bench"")
    if len(bag_patches) == 0 or len(bench_patches) == 0:
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    bag = bag_patches[0]
    bench = bench_patches[0]
    if bag.horizontal_center > bench.horizontal_center:
        return ""right""
    else:
        return ""left"""
15315607,What do you think is in the sky?," # image is a PIL Image object
    image = Image.fromarray(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"") # assumes the sky is the entire image"
2995829,What color is the truck near the gas station?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the truck near the gas station?"")"
12140940,"What are the headphones on, a sofa or a desk?"," # assumes only one headphone patch
    image_patch = ImagePatch(image)
    headphone_patches = image_patch.find(""headphones"")
    if len(headphone_patches) == 0:
        return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
    headphone_patch = headphone_patches[0]
    is_on_sofa = headphone_patch.verify_property(""headphones"", ""on sofa"")
    is_on_desk = headphone_patch.verify_property(""headphones"", ""on desk"")
    if is_on_sofa:
        return ""sofa""
    elif is_on_desk:
        return ""desk""
    else:
        return ""unknown"""
727533,Does the bun look brown and toasted?," # assumes one bun patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.find(""bun"")[0].verify_property(""bun"", ""brown"") and image_patch.find(""bun"")[0].verify_property(""bun"", ""toasted""))"
61044602,What is in the brown basket?," # assumes only one basket
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the brown basket?"")"
16827204,Is the marker different in color than the paper?," # assumes only one marker and one paper
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    if len(marker_patches) == 0:
        return ""no""
    marker_patch = marker_patches[0]
    paper_patches = image_patch.find(""paper"")
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    return bool_to_yesno(marker_patch.verify_property(""marker"", ""same color as"") != paper_patch.verify_property(""paper"", ""color""))"
1284539,Is there a racket to the right of the man on the right side?," # assumes only one man on the right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center == image_patch.horizontal_center:
        return ""no""
    rackets_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(rackets_patches) == 0:
        return ""no""
    for racket_patch in rackets_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1257391,What place is this?," # assumes one image patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"") # crop would include the place so keep it in the query"
16223517,What do you think is the color of the large device?," # assumes only one device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""large device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""What do you think is the color of the large device?"")
    return device_patches[0].simple_query(""What do you think is the color of the large device?"")"
1024280,Does the shirt look long sleeved or sleeveless?," # crop would include the sleeves so keep it in the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    return shirt_patches[0].simple_query(""Does the shirt look long sleeved or sleeveless?"")"
2769463,Which kind of animal is lying in the chair?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    chair_patch = chair_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.exists(""lying""):
            return animal_patch.simple_query(""What kind of animal is lying in the chair?"")
    return chair_patch.simple_query(""Which kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?," # assumes one white box and one crate
    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    crate_patches = image_patch.find(""crate"")
    # Question assumes only one white box and one crate patch
    if len(white_box_patches) == 0 or len(crate_patches) == 0:
        # If no white box or crate is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    white_box_patch = white_box_patches[0]
    crate_patch = crate_patches[0]
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        return ""no""
    chair_patch = chair_patches[0]
    if white_box_patch.horizontal_center > crate_patch.horizontal_center and white_box_patch.horizontal_center > chair_patch.horizontal_center:
        return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?," # assumes one coffee table and one lamp
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?," # assumes one flower pot
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    if len(flower_pot_patches) == 0:
        return ""no""
    return bool_to_yesno(flower_pot_patches[0].verify_property(""flower pot"", ""clay""))"
191006281,Does the sky look clear and gray?," # clear and gray are properties of the sky
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""clear and gray""))"
681336,Do you see hats or gloves that are white?," # assumes only one hat or glove
    image_patch = ImagePatch(image)
    hat_patches = image_patch.find(""hat"")
    glove_patches = image_patch.find(""glove"")
    if len(hat_patches) == 0 and len(glove_patches) == 0:
        return image_patch.simple_query(""Do you see hats or gloves that are white?"")
    if len(hat_patches) > 0:
        if hat_patches[0].verify_property(""hat"", ""white""):
            return ""hats""
    if len(glove_patches) > 0:
        if glove_patches[0].verify_property(""glove"", ""white""):
            return ""gloves""
    return ""none"""
1300368,What is on the cabinet that is to the right of the keyboard?," # assumes only one cabinet and one keyboard
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one cabinet and one keyboard patch
    if len(cabinet_patches) == 0 or len(keyboard_patches) == 0:
        # If no cabinet or keyboard is found, query the image directly
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    cabinet_patch = cabinet_patches[0]
    keyboard_patch = keyboard_patches[0]
    if cabinet_patch.horizontal_center < keyboard_patch.horizontal_center:
        return cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    return cabinet_patch.best_text_match([""book"", ""phone"", ""remote control""]) # crop would include the cabinet so keep it in the query"
172394,What is the animal to the left of the tap called?," # assumes only one tap
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    for animal_patch in animal_patches:
        tap_patches = image_patch.find(""tap"")
        for tap_patch in tap_patches:
            if tap_patch.horizontal_center > animal_patch.horizontal_center:
                return animal_patch.simple_query(""What is the animal to the left of the tap called?"")
    # If no tap is found to the right of the animal, query the image directly
    return image_patch.simple_query(""What is the animal to the left of the tap called?"")"
738176,Is the chair on the right?," # assumes one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return ""no""
    return bool_to_yesno(chair_patches[0].horizontal_center > image_patch.horizontal_center)"
4194919,Is the child on the right of the picture?," # assumes only one child
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        return ""no""
    return bool_to_yesno(child_patches[0].horizontal_center > image_patch.horizontal_center)"
3585327,Who is on the surfboard?," # assumes only one surfboard
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard?"")"
1711172,What size are the packages the candle is on top of?," # assumes only one candle patch
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    candle_patch = candle_patches[0]
    packages_patches = image_patch.find(""packages"")
    if len(packages_patches) == 0:
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    for package_patch in packages_patches:
        if package_patch.horizontal_center < candle_patch.horizontal_center:
            return package_patch.simple_query(""What size are you?"")
    return packages_patches[0].simple_query(""What size are the packages the candle is on top of?"")"
4353895,Who is on the snowboard on the right?," # assumes only one snowboard
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    for snowboard_patch in snowboard_patches:
        if snowboard_patch.horizontal_center > image_patch.horizontal_center:
            return snowboard_patch.simple_query(""Who is on the snowboard on the right?"")
    return ""unknown"""
17929304,What is the vehicle that is on the road?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle that is on the road?"")
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.exists(""road""):
        return vehicle_patch.simple_query(""What is the vehicle that is on the road?"")
    return image_patch.simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?," # assumes only one bread patch
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return bread_patches[0].simple_query(""What color is the crust?"")"
5672474,Is the plate to the left or to the right of the beer on the left?," # assumes only one beer patch
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    beer_patches = image_patch.find(""beer"")
    # Question assumes only one beer patch
    if len(beer_patches) == 0:
        # If no beer is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    for plate_patch in plate_patches:
        for beer_patch in beer_patches:
            if beer_patch.horizontal_center < image_patch.horizontal_center:
                if plate_patch.horizontal_center < beer_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right""
    # If no beer is on the left, query the image directly
    return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")"
11341284,What is the pattern of the mattress on the street?," # assumes only one mattress
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?," # assumes only one fence
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any boys behind the fence?"")
    for fence_patch in fence_patches:
        boy_patches = image_patch.find(""boy"")
        for boy_patch in boy_patches:
            if boy_patch.horizontal_center < fence_patch.horizontal_center:
                return ""yes""
    return ""no"""
19203395,Is the white toilet paper to the right or to the left of the toilet?," # assumes only one toilet and one toilet paper
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    toilet_patch = toilet_patches[0]
    toilet_paper_patches = image_patch.find(""toilet paper"")
    # Question assumes only one toilet paper patch
    if len(toilet_paper_patches) == 0:
        return ""no""
    toilet_paper_patch = toilet_paper_patches[0]
    if toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1194938,Are there any airplanes in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""airplane"") and image_patch.exists(""building"") and image_patch.simple_query(""Are there any airplanes in front of the building?"") == ""yes"")"
5350205,How clean is the road that the car is on the side of?," # assumes one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    car_patch = car_patches[0]
    road_patches = image_patch.find(""road"")
    if len(road_patches) == 0:
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    road_patch = road_patches[0]
    return road_patch.simple_query(""How clean is the road that the car is on the side of?"")"
4256016,"In which part of the picture is the black van, the bottom or the top?"," # assumes only one van
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""black van"")
    if len(van_patches) == 0:
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    van_patch = van_patches[0]
    if van_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?," # assumes one fence patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    for person_patch in person_patches:
        fence_patches = image_patch.find(""fence"")
        # Question assumes only one fence patch
        if len(fence_patches) == 0:
            # If no fence is found, query the image directly
            return person_patch.simple_query(""What is the person to the right of the fence doing?"")
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the fence doing?"")
    # If no fence is to the right of the person, query the image directly
    return image_patch.simple_query(""What is the person to the right of the fence doing?"")"
16471124,Does the horse have a different color than the boot?," # assumes one horse and one boot
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    horse_color = horse_patches[0].simple_query(""What color is the horse?"")
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        return ""no""
    boot_color = boot_patches[0].simple_query(""What color is the boot?"")
    return bool_to_yesno(horse_color != boot_color)"
958247,Is the mouse to the right of a chair?," # assumes only one mouse and one chair
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    chair_patches = image_patch.find(""chair"")
    if len(mouse_patches) == 0 or len(chair_patches) == 0:
        return ""no""
    mouse_patch = mouse_patches[0]
    chair_patch = chair_patches[0]
    return bool_to_yesno(mouse_patch.horizontal_center > chair_patch.horizontal_center)"
11179512,The basket made of plastic is what color?," # assumes only one basket patch
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    return basket_patches[0].simple_query(""The basket made of plastic is what color?"")"
8816272,Do you see any elephant to the left of the bird?," # assumes only one bird
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
    for elephant_patch in elephant_patches:
        if elephant_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
11168592,What is the animal in front of the lamp?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?," # assumes only one jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    if len(jacket_patches) == 0:
        return image_patch.simple_query(""Who is wearing the jacket?"")
    return jacket_patches[0].simple_query(""Who is wearing the jacket?"")"
7398502,What is the food to the left of the girl in the bottom of the photo?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    girl_patch = girl_patches[0]
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    food_patches = [food_patch for food_patch in food_patches if food_patch.vertical_center == girl_patch.vertical_center and food_patch.horizontal_center < girl_patch.horizontal_center]
    if len(food_patches) == 0:
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    return food_patches[0].simple_query(""What is the food to the left of the girl in the bottom of the photo?"")"
5145864,What is the device that the camera is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that the camera is in front of?"")"
788143,Is the man on the surfboard?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the surfboard?"")"
15854501,What device has the same color as the device in the box?," # assumes one box and one device in the box
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    if len(box_patches) == 0:
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    box_patch = box_patches[0]
    device_patches = box_patch.find(""device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    device_patch = device_patches[0]
    device_patches = image_patch.find(""device"")
    best_match = device_patch.best_text_match([""red"", ""blue"", ""green"", ""white"", ""black"", ""gray""])
    for device_patch in device_patches:
        if device_patch.best_text_match([""red"", ""blue"", ""green"", ""white"", ""black"", ""gray""]) == best_match:
            return device_patch.best_text_match([""red"", ""blue"", ""green"", ""white"", ""black"", ""gray""])
    return device_patch.best_text_match([""red"", ""blue"", ""green"", ""white"", ""black"", ""gray""])"
3228067,What is the child wearing?," # assumes only one child
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child wearing?"")"
6817336,Is the blue sky behind a cathedral?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue sky behind a cathedral?"")"
6347271,"In which part of the image is the yellow pepper, the bottom or the top?"," # assumes only one yellow pepper
    image_patch = ImagePatch(image)
    yellow_pepper_patches = image_patch.find(""yellow pepper"")
    if len(yellow_pepper_patches) == 0:
        # If no yellow pepper is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    yellow_pepper_patch = yellow_pepper_patches[0]
    if yellow_pepper_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?," # assumes only one woman and one animal
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    animal_patches = image_patch.find(""animal"")
    if len(woman_patches) == 0 or len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is the woman feeding?"")
    woman_patch = woman_patches[0]
    animal_patch = animal_patches[0]
    return animal_patch.simple_query(""What animal is the woman feeding?"")"
3427727,On which side is the bucket?," # left or right
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    if bucket_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
31050314,Is the small chimney in the bottom part of the picture?," # assumes only one chimney
    image_patch = ImagePatch(image)
    chimney_patches = image_patch.find(""chimney"")
    if len(chimney_patches) == 0:
        return ""no""
    chimney_patch = chimney_patches[0]
    if chimney_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    return ""no"""
3503396,Are the pants purple?," # assumes only one patch
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    if len(pants_patches) == 0:
        return ""no""
    return bool_to_yesno(pants_patches[0].verify_property(""pants"", ""purple""))"
11742862,Which kind of furniture is to the right of the paper towels?," # assumes only one paper towel patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    paper_towel_patches = image_patch.find(""paper towel"")
    if len(paper_towel_patches) == 0:
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    for furniture_patch in furniture_patches:
        for paper_towel_patch in paper_towel_patches:
            if furniture_patch.horizontal_center > paper_towel_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the right of the paper towels?"")
    return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")"
5891809,What kind of furniture is gray?," # assumes only one gray furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture gray?"") == ""yes"":
            return furniture_patch.simple_query(""What kind of furniture is gray?"")
    return image_patch.simple_query(""What kind of furniture is gray?"")"
5370528,Is the hair white and long?," # assumes one person
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    is_white = hair_patches[0].verify_property(""hair"", ""white"")
    is_long = hair_patches[0].verify_property(""hair"", ""long"")
    return bool_to_yesno(is_white and is_long)"
781153,Do you see trains near the lamp post that looks white?," # contains a relation (near), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")"
5543456,Is the container to the left of the person that wears bracelets?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")"
163134,What do you think is on the roof?," # assumes only one roof
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?," # assumes one shoe
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
5511395,What is wrapped in paper?," # assumes only one object wrapped in paper
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wrapped in paper?"")"
5611256,Are there any couches in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch""))"
1162826,The man is in what?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is in what?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""The man is in what?"")"
81020685,Which color is the small house?," # house is small, so crop would include the size, so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which color is the small house?"")"
19640724,Who is in the bathroom?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"")"
289960,Do you see a racket to the right of the boy that is looking at the tie?," # assumes only one boy and one tie
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        return ""no""
    boy_patch = boy_patches[0]
    tie_patches = image_patch.find(""tie"")
    if len(tie_patches) == 0:
        return ""no""
    tie_patch = tie_patches[0]
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if (racket_patch.horizontal_center > boy_patch.horizontal_center) and (racket_patch.horizontal_center > tie_patch.horizontal_center):
            return ""yes""
    return ""no"""
9957748,Does the hair appear to be long and brown?," # assumes one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        return ""no""
    hair_patch = hair_patches[0]
    return bool_to_yesno(hair_patch.verify_property(""hair"", ""long"") and hair_patch.verify_property(""hair"", ""brown""))"
21031610,What is the shoe that looks black and white resting on?," # assumes one shoe
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    if len(shoe_patches) == 0:
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    for shoe_patch in shoe_patches:
        if shoe_patch.simple_query(""Is the shoe black and white?"") == ""yes"":
            return shoe_patch.simple_query(""What is the shoe resting on?"")
    return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?," # assumes only one pillow and one animal
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    animal_patches = image_patch.find(""animal"")
    if len(pillow_patches) == 0 or len(animal_patches) == 0:
        return ""no""
    pillow_patch = pillow_patches[0]
    animal_patch = animal_patches[0]
    if pillow_patch.horizontal_center > animal_patch.horizontal_center and pillow_patch.vertical_center < animal_patch.vertical_center:
        return ""yes""
    return ""no"""
457770,What kind of clothing is striped?," # assumes only one striped clothing
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing striped?"") == ""yes"":
            return clothing_patch.simple_query(""What kind of clothing is striped?"")
    return image_patch.simple_query(""What kind of clothing is striped?"")"
12603153,Are the child's eyes blue and open?," # assumes only one child
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    child_patch = child_patches[0]
    is_blue = child_patch.verify_property(""eyes"", ""blue"")
    is_open = child_patch.verify_property(""eyes"", ""open"")
    return bool_to_yesno(is_blue and is_open)"
9480973,What is located on top of the tub?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?," # assumes only one white plate
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    for fork_patch in fork_patches:
        white_plate_patches = image_patch.find(""white plate"")
        # Question assumes only one white plate patch
        if len(white_plate_patches) == 0:
            return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
        white_plate_patch = white_plate_patches[0]
        if fork_patch.horizontal_center > white_plate_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
13420253,On which side of the photo is the chair?," # left or right
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    if chair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?," # assumes only one label
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    if len(label_patches) == 0:
        return image_patch.simple_query(""What is the label on?"")
    return label_patches[0].simple_query(""What is the label on?"")"
3322787,What bird is to the left of the person that is wearing a shirt?," # assumes only one shirt and one bird
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    shirt_patch = shirt_patches[0]
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    bird_patch = bird_patches[0]
    if bird_patch.horizontal_center < shirt_patch.horizontal_center:
        return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")"
6399594,On which side is the man?," # left or right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    image_center = image_patch.horizontal_center
    if man_patch.horizontal_center < image_center:
        return ""left""
    else:
        return ""right"""
6930120,Is the glass bowl on the right or on the left?," # assumes only one glass bowl
    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    if len(glass_bowl_patches) == 0:
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    glass_bowl_patch = glass_bowl_patches[0]
    if glass_bowl_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
12619961,What vehicles are to the left of the taxi?," # assumes only one taxi
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    for taxi_patch in taxi_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < taxi_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicles are to the left of the taxi?"")
    return image_patch.simple_query(""What vehicles are to the left of the taxi?"")"
13362315,Is the basket on the shelf black and empty?," # assumes one basket and one shelf
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    basket_patch = basket_patches[0]
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        return ""no""
    shelf_patch = shelf_patches[0]
    is_on_shelf = (basket_patch.horizontal_center == shelf_patch.horizontal_center)
    is_black = (basket_patch.simple_query(""What color is the basket?"") == ""black"")
    is_empty = (basket_patch.simple_query(""Is the basket empty?"") == ""yes"")
    return bool_to_yesno(is_on_shelf and is_black and is_empty)"
3830854,What is the animal that is standing next to the donkey that is standing in the hay?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")"
18382324,Is this a bed or a table?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""bed"", ""table""])"
18104571,"Which animal is that, a bird or a cat?"," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    animal_patch = animal_patches[0]
    is_bird = animal_patch.simple_query(""Is the animal a bird?"")
    if is_bird:
        return ""bird""
    else:
        return ""cat"""
2913379,Do you see any fence or pot?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)"
9294271,What is in front of the fence the zebra is kept in?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")"
10741434,What is the vegetable that is on top of the plate called?," # assumes one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    plate_patch = plate_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > plate_patch.horizontal_center:
            return vegetable_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")"
765962,Where is the car?," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""Where is the car?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif car_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
12399262,Is there either a yellow truck or airplane?," # contains a disjunction (or), so ask directly
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)"
13964213,Is the man on the left of the photo?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
16171369,What is covered in the snow?," # assumes only one patch of snow
    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    # Question assumes only one snow patch
    if len(snow_patches) == 0:
        # If no snow is found, query the image directly
        return image_patch.simple_query(""What is covered in the snow?"")
    return snow_patches[0].simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?," # left or right
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""On which side is the plastic bottle?"")"
5858491,Do you see any ropes on the fence that is on the left of the picture?," # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return ""no""
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        rope_patches = image_patch.find(""rope"")
        if len(rope_patches) == 0:
            return ""no""
        return ""yes""
    return ""no"""
17834539,Are there any lamps in the scene?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp""))"
15658176,Who is wearing a helmet?," # assumes only one helmet
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    if len(helmet_patches) == 0:
        return image_patch.simple_query(""Who is wearing a helmet?"")
    return helmet_patches[0].simple_query(""Who is wearing a helmet?"")"
14372400,Does that coat have red color?," # assumes only one coat
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red""))"
411886,Are there any curtains or blankets in this scene?," # returns yes or no
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    remote_patches = image_patch.find(""remote"")
    if len(remote_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    for remote_patch in remote_patches:
        if remote_patch.horizontal_center > man_patch.horizontal_center:
            furniture_patches = image_patch.find(""furniture"")
            for furniture_patch in furniture_patches:
                if furniture_patch.horizontal_center < remote_patch.horizontal_center:
                    return furniture_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")"
51039491,Is the fence black or red?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the fence black or red?"")
    fence_patch = fence_patches[0]
    return fence_patch.best_text_match([""black"", ""red""])"
7425912,What animal is standing in the field?," # assumes only one field
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is standing in the field?"")"
13136338,What animal is in front of the dog which is to the right of the bird?," # assumes only one bird, one dog, and one animal in front of the dog
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    bird_patch = bird_patches[0]
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    dog_patch = dog_patches[0]
    if dog_patch.horizontal_center < bird_patch.horizontal_center:
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < dog_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in front of the dog which is to the"
3775066,Which color are the cabinets in the bottom of the picture?," # bottom is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")"
17206239,Is the happy girl to the right of a player?," # assumes only one happy girl and one player
    image_patch = ImagePatch(image)
    happy_girl_patches = image_patch.find(""happy girl"")
    player_patches = image_patch.find(""player"")
    if len(happy_girl_patches) == 0 or len(player_patches) == 0:
        return ""no""
    happy_girl_patch = happy_girl_patches[0]
    player_patch = player_patches[0]
    return ""yes"" if happy_girl_patch.horizontal_center < player_patch.horizontal_center else ""no"""
2992517,"What piece of furniture is not wooden, the table or the chair?"," # assumes only one table and one chair
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one table and one chair patch
    if len(table_patches) == 0 or len(chair_patches) == 0:
        # If no table or chair is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    table_patch = table_patches[0]
    chair_patch = chair_patches[0]
    if not table_patch.verify_property(""table"", ""wooden""):
        return ""table""
    else:
        return ""chair"""
1827558,Which side of the image is the kettle on?," # left or right
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    if kettle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2785208,Where is the man?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""Where is the man?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif man_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
6623967,Is the baby near the countertop chewing a computer mouses?," # assumes only one baby patch
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouses?"")
    baby_patch = baby_patches[0]
    is_near_countertop = baby_patch.simple_query(""Is the baby near the countertop?"") == ""yes""
    is_chewing_mouse = baby_patch.simple_query(""Is the baby chewing a computer mouse?"") == ""yes""
    return bool_to_yesno(is_near_countertop and is_chewing_mouse)"
12804807,Is the small bottle open or closed?," # bottle is a general term, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the small bottle open or closed?"")"
18437691,Is the clock small or large?," # assumes only one clock
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    if len(clock_patches) == 0:
        return image_patch.simple_query(""Is the clock small or large?"")
    clock_patch = clock_patches[0]
    return clock_patch.simple_query(""Is the clock small or large?"")"
9482318,Are there either any glasses or bottles in this photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_glasses = image_patch.exists(""glasses"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glasses or is_bottle)"
12362819,Is the sky blue or dark?," # sky is a special case
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue or dark?"")"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?," # assumes one shelf and one cup
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    for shelf_patch in shelf_patches:
        cup_patches = image_patch.find(""cup"")
        for cup_patch in cup_patches:
            if cup_patch.horizontal_center > shelf_patch.horizontal_center:
                return shelf_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    return ""unknown"""
1416636,Are there both bridges and chandeliers in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?"," # assumes one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?," # contains a disjunction (or), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate"") or image_patch.exists(""orange""))"
612894,Do you see any doors?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""door""))"
13562221,What's the bear on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the bear on?"")"
9536851,Is the woman in front of the trees holding scissors?," # assumes only one woman and one tree
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    tree_patches = image_patch.find(""trees"")
    if len(tree_patches) == 0:
        return ""no""
    tree_patch = tree_patches[0]
    is_in_front = woman_patch.horizontal_center > tree_patch.horizontal_center
    return bool_to_yesno(is_in_front and woman_patch.simple_query(""Is the woman holding scissors?"") == ""yes"")"
9682405,What is on the machine?," # assumes only one machine
    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    if len(machine_patches) == 0:
        return image_patch.simple_query(""What is on the machine?"")
    return machine_patches[0].simple_query(""What is on the machine?"")"
8649435,What is on the white wall?," # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?," # crop would include the logo so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the logo look red?"")"
14301289,What type of vehicle is to the left of the white vehicle?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")"
523976,Which kind of vehicle is large?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    return vehicle_patches[0].simple_query(""Which kind of vehicle is large?"")"
3423213,Who is in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?," # assumes only one brown chair
    image_patch = ImagePatch(image)
    ottoman_patches = image_patch.find(""ottoman"")
    brown_chair_patches = image_patch.find(""brown chair"")
    if len(ottoman_patches) == 0 or len(brown_chair_patches) == 0:
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    ottoman_patch = ottoman_patches[0]
    brown_chair_patch = brown_chair_patches[0]
    if ottoman_patch.horizontal_center > brown_chair_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
5716578,Is there a laptop on the bed near the magazines?," # assumes only one bed and one laptop
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")
    bed_patch = bed_patches[0]
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        return ""no""
    laptop_patch = laptop_patches[0]
    magazine_patches = image_patch.find(""magazine"")
    # Question assumes only one magazine patch
    if len(magazine_patches) == 0:
        return ""no""
    magazine_patch = magazine_patches[0]
    if (abs(laptop_patch.horizontal_center - bed_patch.horizontal_center) < 100) and (abs(magazine_patch.horizontal_center - bed_patch.horizontal_center) < 100):
        return ""yes""
    return ""no"""
8215791,Is the porcelain toilet to the left or to the right of the small trash can?," # assumes only one small trash can
    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    small_trash_can_patches = image_patch.find(""small trash can"")
    # Question assumes only one small trash can patch
    if len(porcelain_toilet_patches) == 0 or len(small_trash_can_patches) == 0:
        # If no porcelain toilet or small trash can is found, query the image directly
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    porcelain_toilet_patch = porcelain_toilet_patches[0]
    small_trash_can_patch = small_trash_can_patches[0]
    if porcelain_toilet_patch.horizontal_center < small_trash_can_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17528455,What is in front of the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?," # assumes only one patch of each
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    gloves_patches = image_patch.find(""gloves"")
    if len(goggles_patches) == 0 or len(gloves_patches) == 0:
        return ""no""
    goggles_patch = goggles_patches[0]
    gloves_patch = gloves_patches[0]
    return bool_to_yesno(goggles_patch.verify_property(""goggles"", ""blue"") != gloves_patch.verify_property(""gloves"", ""blue""))"
947724,Is there any purple pillow or kite in this photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_purple_pillow = image_patch.exists(""purple pillow"")
    is_purple_kite = image_patch.exists(""purple kite"")
    return bool_to_yesno(is_purple_pillow or is_purple_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?"," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > man_patch.horizontal_center:
            return people_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")"
15492262,Which kind of furniture is white?," # assumes only one white furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture white?"") == ""yes"":
            return furniture_patch.simple_query(""What kind of furniture is white?"")
    return image_patch.simple_query(""Which kind of furniture is white?"")"
151032547,Is the bear on the right side?," # assumes only one bear
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    if len(bear_patches) == 0:
        return ""no""
    return bool_to_yesno(bear_patches[0].horizontal_center > image_patch.horizontal_center)"
5698674,Are there either any planters or benches?," # assumes only one planter or bench
    image_patch = ImagePatch(image)
    is_planters = image_patch.exists(""planters"")
    is_benches = image_patch.exists(""benches"")
    return bool_to_yesno(is_planters or is_benches)"
19397103,What is the person that is standing staring at?," # contains a relation (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person that is standing staring at?"")"
11630681,What is the color of the necklace?," # assumes only one necklace
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the necklace?"")"
248245,Is the table to the left or to the right of the fence?," # assumes one table and one fence
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    fence_patches = image_patch.find(""fence"")
    if len(table_patches) == 0 or len(fence_patches) == 0:
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    table_patch = table_patches[0]
    fence_patch = fence_patches[0]
    if table_patch.horizontal_center < fence_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
837033,Are there round windows or doors?," # assumes only one round window or door
    image_patch = ImagePatch(image)
    is_round_window = image_patch.exists(""round window"")
    is_round_door = image_patch.exists(""round door"")
    return bool_to_yesno(is_round_window or is_round_door)"
5249150,Are there any bears or napkins in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?," # assumes one vehicle and one person
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < image_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")"
61006749,Who is dressed in pink?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is dressed in pink?"")"
6122955,Does the pillow have yellow color?," # assumes only one pillow
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return bool_to_yesno(pillow_patches[0].verify_property(""pillow"", ""yellow""))"
6861738,Is the old woman to the right or to the left of the faucet?," # assumes only one old woman and one faucet
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    faucet_patches = image_patch.find(""faucet"")
    if len(old_woman_patches) == 0 or len(faucet_patches) == 0:
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    old_woman_patch = old_woman_patches[0]
    faucet_patch = faucet_patches[0]
    if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15833048,Which kind of animal is on the road?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is on the road?"")
    return animal_patches[0].simple_query(""What kind of animal is on the road?"")"
9524339,What animal is large?," # assumes only one large animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""large""):
            return animal_patch.simple_query(""What animal is large?"")
    return image_patch.simple_query(""What animal is large?"")"
18255749,How clean are the sheets the pillow is to the right of?," # pillow is to the right of the sheets
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheets_patches = image_patch.find(""sheets"")
    # Question assumes only one sheets patch
    if len(sheets_patches) == 0:
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    sheets_patch = sheets_patches[0]
    return sheets_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")"
19797097,What's the man wearing?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
6899090,Is the man to the right or to the left of the appliance that looks white?," # assumes only one appliance that looks white
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patches = image_patch.find(""appliance that looks white"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    appliance_patch = appliance_patches[0]
    if man_patch.horizontal_center > appliance_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
3357701,Does the dog to the right of the other dog have white color?," # assumes only one dog on the right
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    right_dog_patches = [dog for dog in dog_patches if dog.horizontal_center > image_patch.horizontal_center / 2]
    if len(right_dog_patches) == 0:
        return ""no""
    right_dog_patch = right_dog_patches[0]
    return bool_to_yesno(right_dog_patch.verify_property(""dog"", ""white""))"
2829418,What's the girl holding?," # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What's the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What's the girl holding?"")"
15930109,Which kind of vehicle is blue?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    vehicle_patch = vehicle_patches[0]
    return vehicle_patch.simple_query(""Which kind of vehicle is blue?"")"
1525382,What type of vegetable is on the food with the cheese?," # assumes only one food with cheese
    image_patch = ImagePatch(image)
    food_with_cheese_patches = image_patch.find(""food with cheese"")
    # Question assumes only one food with cheese patch
    if len(food_with_cheese_patches) == 0:
        # If no food with cheese is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    food_with_cheese_patch = food_with_cheese_patches[0]
    vegetable_patches = food_with_cheese_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no vegetable""
    return vegetable_patches[0].simple_query(""What type of vegetable is on the food with the cheese?"")"
8548980,Are there either players or hand soaps?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?"," # assumes only one sandwich and one croissant
    image_patch = ImagePatch(image)
    sandwich_patches = image_patch.find(""sandwich"")
    if len(sandwich_patches) == 0:
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    croissant_patches = image_patch.find(""croissant"")
    if len(croissant_patches) == 0:
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    return sandwich_patches[0].simple_query(""Which kind of food is not made, the sandwich or the croissant?"") # crop would include the making so keep it in the query"
6423906,Which kind of food is on the plate?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    plate_patch = plate_patches[0]
    food_patches = plate_patch.find(""food"")
    if len(food_patches) == 0:
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    return food_patches[0].simple_query(""Which kind of food is on the plate?"")"
1993231,Are the animals in the image of different types?," # returns yes or no
    image_patch = ImagePatch(image)
    animals_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animals_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    first_animal = animals_patches[0]
    for animal_patch in animals_patches:
        if animal_patch.simple_query(""What kind of animal is this?"") != first_animal.simple_query(""What kind of animal is this?""):
            return ""yes""
    return ""no"""
13949656,Are there any people to the left of the tray?," # assumes one tray
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one tray patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for people_patch in people_patches:
        tray_patches = image_patch.find(""tray"")
        # Question assumes only one tray patch
        if len(tray_patches) == 0:
            # If no tray is found, query the image directly
            return image_patch.simple_query(""Are there any people to the left of the tray?"")
        if people_patch.horizontal_center < tray_patches[0].horizontal_center:
            return ""yes""
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?," # assumes only one fresh pineapple
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Does the fresh pineapple appear to be ripe?""))"
9392591,Are there chairs or smoothies?," # assumes only one chair or one smoothie
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?," # assumes only one sheep
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.find(""sheep"")[0].horizontal_center:
            return animal_patch.simple_query(""What kind of animal is to the right of the sheep?"")
    return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")"
9896138,Are there any boxes to the left of the screen in the picture?," # assumes the screen is the rightmost object
    image_patch = ImagePatch(image)
    boxes_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(boxes_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in boxes_patches:
        if box_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1400333,What do you think is the man on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?," # assumes one boot
    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    return boot_patches[0].best_text_match([""white"", ""orange""])"
3659880,Does the wood boat have silver color?," # assumes only one boat
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    if len(boat_patches) == 0:
        return ""no""
    return bool_to_yesno(boat_patches[0].verify_property(""wood boat"", ""silver""))"
1827802,Is the red pot on the appliance to the right of the mixer?," # assumes only one appliance to the right of the mixer
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    red_pot_patch = red_pot_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""no""
    appliance_patch = appliance_patches[0]
    appliance_patches_to_right_of_mixer = [appliance for appliance in appliance_patches if appliance.horizontal_center > image_patch.find(""mixer"")[0].horizontal_center]
    if len(appliance_patches_to_right_of_mixer) == 0:
        return ""no""
    appliance_patch = appliance_patches_to_right_of_mixer[0]
    return bool_to_yesno(appliance_patch.verify_property(""appliance"", ""red pot on"")) # crop would include the appliance so keep it in the query"
14809102,The phone that is in front of the camera is of what color?," # assumes one phone and one camera
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    for phone_patch in phone_patches:
        camera_patches = image_patch.find(""camera"")
        for camera_patch in camera_patches:
            if camera_patch.horizontal_center < phone_patch.horizontal_center:
                return phone_patch.simple_query(""What color is the phone?"")
    return ""no answer"""
61001545,What type of food is to the left of the silver spoon?," # assumes only one spoon
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""silver spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    for spoon_patch in spoon_patches:
        food_patches = image_patch.find(""food"")
        # Question assumes only one food patch
        if len(food_patches) == 0:
            return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < spoon_patch.horizontal_center:
                return food_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    # If no food is to the left of the spoon, query the image directly
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")"
799463,Are there both a window and a door in the picture?," # assumes only one window and one door
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
11260725,Does the water have small size and white color?," # assumes only one water patch
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    if len(water_patches) == 0:
        return ""no""
    water_patch = water_patches[0]
    return bool_to_yesno(water_patch.verify_property(""water"", ""small"") and water_patch.verify_property(""water"", ""white""))"
2397653,Are there any fences that are white?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return ""no""
    return bool_to_yesno(fence_patches[0].verify_property(""fence"", ""white""))"
1554603,Who is holding the animal?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    animal_patch = animal_patches[0]
    return animal_patch.simple_query(""Who is holding the animal?"")"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?," # assumes only one stroller patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patch = man_patches[0]
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    stroller_patch = stroller_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    people_patch = people_patches[0]
    if people_patch.horizontal_center < stroller_patch.horizontal_center:
        return ""right""
    else:
        return ""left"" if man_patch.horizontal_center < stroller_patch.horizontal_center else ""right"""
8988476,What kind of furniture is presented in this photo?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What kind of furniture is presented in this photo?"")
    return furniture_patches[0].simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?," # assumes one man and one backpack
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    if len(backpack_patches) == 0:
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    backpack_patch = backpack_patches[0]
    if man_patch.horizontal_center < backpack_patch.horizontal_center:
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    return man_patch.simple_query(""What is the man with the backpack holding?"")"
91058050,Are there both mouse pads and computer mice in the photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_computer_mouse = image_patch.exists(""computer mouse"")
    return bool_to_yesno(is_mouse_pad and is_computer_mouse)"
1972064,Is the person in front of the tree wearing jeans?," # contains a relation (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")"
167162,Is there a bike to the right of the purse that is to the right of the woman?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")"
1695388,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?," # assumes only one woman and one man
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    woman = woman_patches[0]
    man = man_patches[0]
    if woman.horizontal_center < man.horizontal_center:
        return ""left""
    else:
        return ""right"""
16921984,What is the bent man to the right of the other men doing?," # assumes only one bent man
    image_patch = ImagePatch(image)
    bent_man_patches = image_patch.find(""bent man"")
    if len(bent_man_patches) == 0:
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    bent_man_patch = bent_man_patches[0]
    other_men_patches = image_patch.find(""man"")
    other_men_patches = [man_patch for man_patch in other_men_patches if man_patch != bent_man_patch]
    # Question assumes only one other man patch
    if len(other_men_patches) == 0:
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    other_man_patch = other_men_patches[0]
    if bent_man_patch.horizontal_center > other_man_patch.horizontal_center:
        return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return bent_man_patch.simple_query(""What is the bent man to the left of the other men doing?"")"
12175564,What animal are the men to the right of the girl leading?," # assumes only one girl and one patch per animal
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    girl_patch = girl_patches[0]
    men_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(men_patches) == 0:
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    men_patch = men_patches[0]
    if men_patch.horizontal_center > girl_patch.horizontal_center:
        return men_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")"
1219606,On which side of the image is the house?," # left or right
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1770499,Is the black suitcase to the right or to the left of the person on the left?," # assumes only one person on the left
    image_patch = ImagePatch(image)
    black_suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one black_suitcase patch
    if len(black_suitcase_patches) == 0:
        # If no black_suitcase is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    for black_suitcase_patch in black_suitcase_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
        if black_suitcase_patch.horizontal_center > person_patches[0].horizontal_center:
            return ""right""
        else:
            return ""left"""
5282406,Is the pot to the left of a chair?," # assumes one pot and one chair
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    chair_patches = image_patch.find(""chair"")
    if len(pot_patches) == 0 or len(chair_patches) == 0:
        return ""no""
    pot_patch = pot_patches[0]
    chair_patch = chair_patches[0]
    return bool_to_yesno(pot_patch.horizontal_center < chair_patch.horizontal_center)"
10914401,Where are the people?," # assumes only one patch
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    if len(people_patches) == 0:
        return image_patch.simple_query(""Where are the people?"")
    people_patch = people_patches[0]
    if people_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif people_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
1919722,What animal is eating the grass?," # assumes only one animal and one grass
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""eating""):
            return animal_patch.simple_query(""What animal is eating the grass?"")
    # If no animal is eating, query the image directly
    return image_patch.simple_query(""What animal is eating the grass?"")"
9681008,Who is wearing a helmet?," # assumes only one helmet
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    if len(helmet_patches) == 0:
        return image_patch.simple_query(""Who is wearing a helmet?"")
    return helmet_patches[0].simple_query(""Who is wearing a helmet?"")"
16861675,Who is on the surfboard in the middle of the photo?," # assumes only one surfboard
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")"
10947426,What is the color of the lizard beside the banana?," # assumes only one banana and one lizard
    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    banana_patches = image_patch.find(""banana"")
    if len(lizard_patches) == 0 or len(banana_patches) == 0:
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    lizard_patch = lizard_patches[0]
    banana_patch = banana_patches[0]
    if lizard_patch.horizontal_center < banana_patch.horizontal_center:
        return lizard_patch.simple_query(""What is the color of the lizard beside the banana?"")
    return banana_patch.simple_query(""What is the color of the lizard beside the banana?"")"
18200684,Is the wine glass in the top or in the bottom part?," # assumes only one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?," # assumes only one vehicle and one group of people
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    people_patches = image_patch.find(""people"")
    if len(vehicle_patches) == 0 or len(people_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    vehicle_patch = vehicle_patches[0]
    people_patch = people_patches[0]
    if vehicle_patch.horizontal_center < people_patch.horizontal_center:
        return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    return vehicle_patch.simple_query(""What kind of vehicle is to the right of the people that are in the middle of the picture?"")"
171012637,Is the teddy bear to the right of a suitcase?," # assumes only one teddy bear and one suitcase
    image_patch = ImagePatch(image)
    teddy_bear_patches = image_patch.find(""teddy bear"")
    suitcase_patches = image_patch.find(""suitcase"")
    if len(teddy_bear_patches) == 0 or len(suitcase_patches) == 0:
        return ""no""
    teddy_bear_patch = teddy_bear_patches[0]
    suitcase_patch = suitcase_patches[0]
    return bool_to_yesno(teddy_bear_patch.horizontal_center > suitcase_patch.horizontal_center)"
19861372,Is the woman's hair long or short?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""Is the woman's hair long or short?"")"
623889,Are both the television and the armchair the same color?," # returns yes or no
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""television"")
    armchair_patches = image_patch.find(""armchair"")
    if len(tv_patches) == 0 or len(armchair_patches) == 0:
        return ""no""
    tv_patch = tv_patches[0]
    armchair_patch = armchair_patches[0]
    return bool_to_yesno(tv_patch.verify_property(""television"", ""same color as"") == armchair_patch.verify_property(""armchair"", ""same color as""))"
4917605,Is the shoe white or brown?," # assumes one shoe
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
91055143,What is on the table?," # assumes only one table
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
5430643,What do you think sits on the plate to the left of the tomato?," # assumes only one plate and one tomato
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    plate_patch = plate_patches[0]
    tomato_patches = image_patch.find(""tomato"")
    if len(tomato_patches) == 0:
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    tomato_patch = tomato_patches[0]
    if plate_patch.horizontal_center < tomato_patch.horizontal_center:
        return plate_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")"
523936,Is the woman in the top part of the picture?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
3189548,Is there a bottle on the nightstand that is on the bed?," # assumes only one nightstand and one bed
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    for bottle_patch in bottle_patches:
        is_on_nightstand = bottle_patch.simple_query(""Is the bottle on the nightstand?"") == ""yes""
        is_on_bed = bottle_patch.simple_query(""Is the bottle on the bed?"") == ""yes""
        if is_on_nightstand and is_on_bed:
            return ""yes""
    return ""no"""
14292161,The pot is of which color?," # assumes only one pot
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].simple_query(""The pot is of which color?"")"
17495150,"What device is black, the microphone or the laptop?"," # assumes only one black device
    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    # Question assumes only one black patch
    if len(black_patches) == 0:
        # If no black is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    black_patch = black_patches[0]
    microphone_patches = image_patch.find(""microphone"")
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one microphone and one laptop patch
    if len(microphone_patches) == 0 or len(laptop_patches) == 0:
        return black_patch.simple_query(""What device is black, the microphone or the laptop?"")
    if black_patch.simple_query(""Is the device a microphone?"") == ""yes"":
        return ""microphone""
    else:
        return ""laptop"""
1521847,Is the cat on a desk?," # assumes only one cat and one desk
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    desk_patches = image_patch.find(""desk"")
    if len(cat_patches) == 0 or len(desk_patches) == 0:
        return ""no""
    cat_patch = cat_patches[0]
    desk_patch = desk_patches[0]
    if cat_patch.horizontal_center > desk_patch.horizontal_center and cat_patch.horizontal_center < desk_patch.right:
        return ""yes""
    return ""no"""
16465081,The man is holding what?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""The man is holding what?"")"
17387032,What is on the post?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")"
18906705,How big is the crowd?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How big is the crowd?"")"
6157200,Does the sign on the pole have white color?," # assumes only one sign
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign on pole"")
    if len(sign_patches) == 0:
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    return bool_to_yesno(sign_patches[0].verify_property(""sign on pole"", ""white""))"
16760226,What's the laptop in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?," # returns a string
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    bed_patch = bed_patches[0]
    return bed_patch.simple_query(""How large is the bed?"") # crop would include the bed so keep it in the query"
14143886,Where is the person with the luggage standing on?," # assumes only one person with luggage
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person with luggage"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Where is the person with the luggage standing on?"")"
19872633,Are there either any fire extinguishers or pepper shakers?," # assumes only one image patch
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)"
12755010,Is the bottle to the right of a napkin?," # assumes only one bottle and one napkin
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    bottle_patch = bottle_patches[0]
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        return ""no""
    napkin_patch = napkin_patches[0]
    return bool_to_yesno(bottle_patch.horizontal_center > napkin_patch.horizontal_center)"
2747001,Are there any soaps or bombs?," # bomb is a type of soap
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    return bool_to_yesno(is_soap)"
1553845,Do you see baby giraffes or elephants?," # assumes only one giraffe or elephant
    image_patch = ImagePatch(image)
    is_giraffe = image_patch.exists(""giraffe"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_giraffe or is_elephant)"
6898877,What is the sign on?," # assumes only one sign
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    if len(sign_patches) == 0:
        return image_patch.simple_query(""What is the sign on?"")
    return sign_patches[0].simple_query(""What is the sign on?"")"
15862812,What is the sticker on?," # assumes only one sticker
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    if len(sticker_patches) == 0:
        return image_patch.simple_query(""What is the sticker on?"")
    return sticker_patches[0].simple_query(""What is the sticker on?"")"
141031470,On which side of the image is the white towel?," # left or right
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    if towel_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
41026846,Who rides a motorcycle?," # assumes only one motorcycle
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    if len(motorcycle_patches) == 0:
        return image_patch.simple_query(""Who rides a motorcycle?"")
    for motorcycle_patch in motorcycle_patches:
        return motorcycle_patch.simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?," # assumes only one towel patch
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""What is around the bathtub the towel is on?"")
    towel_patch = towel_patches[0]
    return towel_patch.simple_query(""What is around the bathtub the towel is on?"")"
7469617,Is the man to the left or to the right of the person that is to the left of the people?," # assumes only one patch of people
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    people_patch = people_patches[0]
    left_of_people_patches = image_patch.find(""person that is to the left of the people"")
    # Question assumes only one patch
    if len(left_of_people_patches) == 0:
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    left_of_people_patch = left_of_people_patches[0]
    if man_patch.horizontal_center < left_of_people_patch.horizontal_center:
        return ""left""
    elif man_patch.horizontal_center < people_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
64308,What's located on top of the soup?," # assumes only one soup patch
    image_patch = ImagePatch(image)
    soup_patches = image_patch.find(""soup"")
    if len(soup_patches) == 0:
        return image_patch.simple_query(""What's located on top of the soup?"")
    for soup_patch in soup_patches:
        return soup_patch.simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?," # assumes only one fence and one bench
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    bench_patches = image_patch.find(""bench"")
    if len(fence_patches) == 0 or len(bench_patches) == 0:
        return ""no""
    fence_patch = fence_patches[0]
    bench_patch = bench_patches[0]
    return bool_to_yesno(fence_patch.verify_property(""fence"", ""material"") == bench_patch.verify_property(""bench"", ""material""))"
3196255,Are there helmets that are not white?," # helmet is a subclass of headgear
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.simple_query(""Is the helmet white?"") != ""yes"":
            return ""yes""
    return ""no"""
2992630,Is the bowl to the right or to the left of the man that is drinking?," # assumes only one man and one bowl
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    if len(bowl_patches) == 0:
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    bowl_patch = bowl_patches[0]
    if bowl_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
513894,Is the person above the sand wearing glasses?," # assumes only one patch of sand
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    person_patch = person_patches[0]
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        return ""no""
    sand_patch = sand_patches[0]
    return bool_to_yesno(person_patch.vertical_center < sand_patch.vertical_center and person_patch.simple_query(""Is the person wearing glasses?"") == ""yes"") # crop would include the glasses so keep it in the query"
14167599,Is the color of the life preserver the same as that of the house?," # assumes one life preserver and one house
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    house_patches = image_patch.find(""house"")
    if len(life_preserver_patches) == 0 or len(house_patches) == 0:
        return ""no""
    life_preserver_color = life_preserver_patches[0].simple_query(""What color is the life preserver?"")
    house_color = house_patches[0].simple_query(""What color is the house?"")
    return bool_to_yesno(life_preserver_color == house_color)"
18264755,How is the weather?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?," # assumes only one toilet and one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    animal_patch = animal_patches[0]
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    toilet_patch = toilet_patches[0]
    if toilet_patch.simple_query(""Is the toilet closed?"") == ""no"":
        return animal_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")"
8641613,Do you see any helmets in the picture that are not red?," # helmet is a broad category
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        if not helmet_patch.verify_property(""helmet"", ""red""):
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?," # assumes only one happy person
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy"")
    if len(happy_patches) == 0:
        return image_patch.simple_query(""What does the happy person hold?"")
    happy_patch = happy_patches[0]
    return happy_patch.simple_query(""What does the happy person hold?"")"
8461507,Are there either tissue boxes or lamps in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""tissue box"") or image_patch.exists(""lamp""))"
10770916,Which kind of animal is it?," # assumes only one animal
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is it?"")"
19102906,What type of drink is to the left of the plate?," # assumes only one drink and one plate
    image_patch = ImagePatch(image)
    drink_patches = image_patch.find(""drink"")
    plate_patches = image_patch.find(""plate"")
    if len(drink_patches) == 0 or len(plate_patches) == 0:
        return image_patch.simple_query(""What type of drink is to the left of the plate?"")
    for drink_patch in drink_patches:
        for plate_patch in plate_patches:
            if drink_patch.horizontal_center < plate_patch.horizontal_center:
                return drink_patch.simple_query(""What type of drink is to the left of the plate?"")
    return image_patch.simple_query(""What type of drink is to the left of the plate?"")"
18315440,Is the sky cloudy and blue?," # assumes only one sky patch
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    if len(sky_patches) == 0:
        return ""no""
    sky_patch = sky_patches[0]
    is_cloudy = sky_patch.verify_property(""sky"", ""cloudy"")
    is_blue = sky_patch.verify_property(""sky"", ""blue"")
    return bool_to_yesno(is_cloudy and is_blue)"
453061,Is the fork on the right of the image?," # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        return ""no""
    return bool_to_yesno(fork_patches[0].horizontal_center > image_patch.horizontal_center)"
71002567,"What is the broccoli on, a table or a nightstand?"," # assumes only one broccoli
    image_patch = ImagePatch(image)
    broccoli_patches = image_patch.find(""broccoli"")
    if len(broccoli_patches) == 0:
        return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    for broccoli_patch in broccoli_patches:
        is_on_table = broccoli_patch.verify_property(""broccoli"", ""on table"")
        is_on_nightstand = broccoli_patch.verify_property(""broccoli"", ""on nightstand"")
        if is_on_table:
            return ""table""
        elif is_on_nightstand:
            return ""nightstand""
    return ""table"" # default to table if no other surface is found"
17465089,Is the field green and small?," # field is a common object, but can be a different object depending on the context
    image_patch = ImagePatch(image)
    is_green = image_patch.verify_property(""field"", ""green"")
    is_small = image_patch.verify_property(""field"", ""small"")
    return bool_to_yesno(is_green and is_small)"
16150157,What is on the wall?," # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?," # assumes only one van and one SUV
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    van_patch = van_patches[0]
    suv_patches = image_patch.find(""SUV"")
    # Question assumes only one SUV patch
    if len(suv_patches) == 0:
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    suv_patch = suv_patches[0]
    if van_patch.horizontal_center < suv_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15101358,Is the girl to the left of the boy?," # assumes only one girl and one boy
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    boy_patches = image_patch.find(""boy"")
    if len(girl_patches) == 0 or len(boy_patches) == 0:
        return ""no""
    girl_patch = girl_patches[0]
    boy_patch = boy_patches[0]
    return bool_to_yesno(girl_patch.horizontal_center < boy_patch.horizontal_center)"
12785181,What animals are in the grass?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in the grass?"")"
348093,Are there both an apple and a bag in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)"
314181,Which sign is shown?," # assumes only one sign
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which sign is shown?"")"
16275314,"On which side is the woman, the right or the left?"," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19535592,Who runs on the sand?," # assumes only one person running
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who runs on the sand?"")"
156886,Is there a giraffe near the bush?," # giraffe is not eating
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    for giraffe_patch in giraffe_patches:
        is_near_bush = (giraffe_patch.simple_query(""Is the giraffe near the bush?"") == ""yes"")
        if is_near_bush:
            return ""yes""
    return ""no"""
1756642,Which place is it?," # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Who wears the shirt?"")
    return shirt_patches[0].simple_query(""Who wears the shirt?"")"
1972390,What type of animal is standing in the field?," # assumes only one field
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal is standing in the field?"")"
14579439,Is the stuffed animal on the right?," # assumes only one stuffed animal
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    if len(stuffed_animal_patches) == 0:
        return ""no""
    return bool_to_yesno(stuffed_animal_patches[0].horizontal_center > image_patch.horizontal_center)"
6645395,Is the gray building behind the passengers that are boarding the airplane?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")"
19610200,Is the fence metallic?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return bool_to_yesno(fence_patches[0].verify_property(""fence"", ""metallic""))"
5299471,What does the girl that to the left of the trashcan carry?," # assumes only one girl and one trashcan
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    trashcan_patches = image_patch.find(""trashcan"")
    if len(girl_patches) == 0 or len(trashcan_patches) == 0:
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    girl_patch = girl_patches[0]
    trashcan_patch = trashcan_patches[0]
    if girl_patch.horizontal_center < trashcan_patch.horizontal_center:
        return girl_patch.simple_query(""What does the girl carry?"")
    return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")"
7548203,Which kind of vegetable is on the pizza?," # assumes only one pizza
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")"
91027737,On which side is the pan?," # left or right
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?," # assumes only one black car
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    black_car_patch = black_car_patches[0]
    if black_car_patch.vertical_center < image_patch.vertical_center:
        return ""no""
    return ""yes"""
6144031,Who is in the living room?," # assumes one living room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?," # assumes only one sink
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return bool_to_yesno(is_bicycle or is_biker)"
844747,Are there both a pillow and a kitten in the image?," # Pillow is a common object, so it's a good example
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)"
1104500,What kind of food is in the box?," # assumes one box
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    if len(box_patches) == 0:
        return image_patch.simple_query(""What kind of food is in the box?"")
    box_patch = box_patches[0]
    return box_patch.simple_query(""What kind of food is in the box?"") # crop would include the food so keep it in the query"
4204973,What is the food that is to the left of the kid called?," # assumes only one kid and one food
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < image_patch.horizontal_center:
            return food_patch.simple_query(""What is the food that is to the left of the kid called?"")
    return image_patch.simple_query(""What is the food that is to the left of the kid called?"")"
11820726,"What device is the desk in front of, a television or a printer?"," # assumes only one device
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    for desk_patch in desk_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < desk_patch.horizontal_center:
                return device_patch.best_text_match([""television"", ""printer""])
    # If no device is in front of the desk, query the image directly
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")"
18114588,Do you see a helmet there?," # assumes one helmet
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""helmet""))"
11950874,What animal is standing on the ground?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is standing on the ground?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal standing on the ground?"") == ""yes"":
            return animal_patch.simple_query(""What animal is standing on the ground?"")
    return image_patch.simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?," # assumes only one fork patch
    image_patch = ImagePatch(image)
    small_car_patches = image_patch.find(""small car"")
    # Question assumes only one small car patch
    if len(small_car_patches) == 0:
        # If no small car is found, query the image directly
        return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")
    for small_car_patch in small_car_patches:
        fork_patches = image_patch.find(""fork"")
        # Question assumes only one fork patch
        if len(fork_patches) == 0:
            return ""no""
        for fork_patch in fork_patches:
            if fork_patch.horizontal_center > image_patch.horizontal_center and small_car_patch.horizontal_center < image_patch.horizontal_center:
                return ""yes""
    return ""no"""
16184942,Does that grass look brown and short?," # crop would include the grass so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does that grass look brown and short?"")"
6312238,Is the hydrant to the left of the car?," # assumes only one hydrant and one car
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    car_patches = image_patch.find(""car"")
    if len(hydrant_patches) == 0 or len(car_patches) == 0:
        return ""no""
    hydrant_patch = hydrant_patches[0]
    car_patch = car_patches[0]
    return bool_to_yesno(hydrant_patch.horizontal_center < car_patch.horizontal_center)"
16646227,On which side of the picture is the gray car?," # left or right
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    gray_car_patch = gray_car_patches[0]
    if gray_car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?," # assumes one person and one ball
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    person_patches = image_patch.find(""person that is wearing sneakers"")
    # Question assumes only one ball patch and one person patch
    if len(ball_patches) == 0 or len(person_patches) == 0:
        # If no ball or person is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    ball_patch = ball_patches[0]
    person_patch = person_patches[0]
    if ball_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
3443704,What is the woman wearing?," # assumes one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is the woman wearing?"")"
19313572,What is the color of the tent to the left of the vehicles?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    vehicle_patch = vehicle_patches[0]
    tent_patches = image_patch.find(""tent"")
    if len(tent_patches) == 0:
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    for tent_patch in tent_patches:
        if tent_patch.horizontal_center < vehicle_patch.horizontal_center:
            return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"") # crop would include the vehicle so keep it in the query
    return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")"
10885675,What is the toilet seat made of?," # assumes only one toilet
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    for blanket_patch in blanket_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.simple_query(""Is the animal resting on the blanket?"") == ""yes"":
                return animal_patch.simple_query(""What animal is resting on the blanket?"")
    # If no animal is resting on the blanket, query the image directly
    return image_patch.simple_query(""What animal is resting on the blanket?"")"
14561612,What color do you think the bikini that the woman is wearing is?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")"
6587755,Are both the room and the bowl the same color?," # assumes one room and one bowl
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    bowl_patches = image_patch.find(""bowl"")
    if len(room_patches) == 0 or len(bowl_patches) == 0:
        return ""no""
    room_patch = room_patches[0]
    bowl_patch = bowl_patches[0]
    return bool_to_yesno(room_patch.verify_property(""room"", ""same color as"") == bowl_patch.verify_property(""bowl"", ""same color as""))"
4479543,Is the barn white or brown?," # crop would include the barn so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the barn white or brown?"")"
972522,Does the box look white or brown?," # assumes one box
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    if len(box_patches) == 0:
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].best_text_match([""white"", ""brown""])"
3948528,What is the bowl made of?," # assumes only one bowl
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?," # assumes only one bench and one rock
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    rock_patches = image_patch.find(""rock"")
    if len(bench_patches) == 0 or len(rock_patches) == 0:
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    bench_patch = bench_patches[0]
    rock_patch = rock_patches[0]
    if bench_patch.horizontal_center < rock_patch.horizontal_center:
        return bench_patch.best_text_match([""gray"", ""red""])
    else:
        return rock_patch.best_text_match([""gray"", ""red""])"
866459,On which side is the couch?," # left or right
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the couch?"")"
8614812,Is the person that is playing wearing shorts?," # assumes only one person playing
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    person_patch = person_patches[0]
    return bool_to_yesno(person_patch.simple_query(""Is the person that is playing wearing shorts?""))"
167438,What is wearing the ground?," # ground is a special case
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    return furniture_patches[0].simple_query(""Which kind of furniture is wooden?"")"
1042377,Who is standing beside the person that is wearing a dress?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?," # assumes one image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?," # assumes only one ski
    image_patch = ImagePatch(image)
    ski_patches = image_patch.find(""ski"")
    # Question assumes only one ski patch
    if len(ski_patches) == 0:
        # If no ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    return ski_patches[0].simple_query(""How fat are the long skis?"")"
2211743,Is the sky clear or overcast?," # assumes one image patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?," # assumes only one pencil patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    pencil_patches = image_patch.find(""pencil"")
    # Question assumes only one pencil patch
    if len(pencil_patches) == 0:
        # If no pencil is found, query the image directly
        return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
    for bottle_patch in bottle_patches:
        if bottle_patch.horizontal_center < pencil_patches[0].horizontal_center and bottle_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no"""
15478302,Is there any dark door or window in the image?," # door or window
    image_patch = ImagePatch(image)
    is_dark_door = image_patch.exists(""dark door"")
    is_dark_window = image_patch.exists(""dark window"")
    return bool_to_yesno(is_dark_door or is_dark_window)"
18414234,Do you see either a knife or a chair in the picture?," # assumes only one image
    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)"
19779815,Is the book red or yellow?," # assumes only one book
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        return image_patch.simple_query(""Is the book red or yellow?"")
    book_patch = book_patches[0]
    return book_patch.best_text_match([""red"", ""yellow""])"
7257283,Are there men to the left of the picture?," # assumes the image is a photo
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there men to the left of the picture?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6621625,On which side of the picture is the bench?," # left or right
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    if bench_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19311589,Are there both fences and horses in this picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?," # assumes only one container and one person
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    device_patch = device_patches[0]
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    container_patch = container_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    person_patch = person_patches[0]
    if device_patch.horizontal_center > container_patch.horizontal_center and person_patch.horizontal_center < container_patch.horizontal_center:
        return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")"
171031333,Do you see blankets in the picture that are not black?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""blanket"") and not image_patch.verify_property(""blanket"", ""black""))"
16695341,What is the fence made of?," # assumes one fence patch
    image_patch = ImagePatch(image)
    return image_patch.find(""fence"")[0].simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?," # bottle or child
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)"
5111363,Are there chairs or tables that are not blue?," # assumes only one chair or table
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    if is_chair or is_table:
        return bool_to_yesno(not image_patch.verify_property(""chair"", ""blue"") and not image_patch.verify_property(""table"", ""blue""))
    else:
        return ""no"""
9230971,Which place is it?," # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        return ""no""
    hair_patch = hair_patches[0]
    return bool_to_yesno(hair_patch.verify_property(""hair"", ""short"") and hair_patch.verify_property(""hair"", ""white""))"
4822200,Do you see any lettuce on the food with the meat?," # assumes only one meat food
    image_patch = ImagePatch(image)
    meat_patches = image_patch.find(""meat"")
    # Question assumes only one meat patch
    if len(meat_patches) == 0:
        # If no meat is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    meat_patch = meat_patches[0]
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        return ""no""
    for lettuce_patch in lettuce_patches:
        if (meat_patch.horizontal_center + meat_patch.width / 2) > (lettuce_patch.horizontal_center + lettuce_patch.width / 2):
            return ""yes""
    return ""no"""
3726666,What device is to the left of the curtain that is to the left of the glasses?," # assumes only one device, curtain, and glasses
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    device_patch = device_patches[0]
    curtain_patches = image_patch.find(""curtain"")
    if len(curtain_patches) == 0:
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    curtain_patch = curtain_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    if len(glasses_patches) == 0:
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    glasses_patch = glasses_patches[0]
    for device in device_patches:
        if device.horizontal_center < curtain_patch.horizontal_center and curtain_patch.horizontal_center < glasses_patch.horizontal_center:
            return device.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")"
9954849,What kind of furniture is it?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What kind of furniture is it?"")
    return furniture_patches[0].simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""red train"") or image_patch.exists(""red bus""))"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")"
623393,"What type of clothing is tan, the hat or the vest?"," # crop would include the tan so keep it in the query
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    tan_patch = tan_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return tan_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    hat_patch = hat_patches[0]
    if tan_patch.simple_query(""Is the tan a hat?"") == ""yes"":
        return ""hat""
    vest_patches = image_patch.find(""vest"")
    # Question assumes only one vest patch
    if len(vest_patches) == 0:
        return tan_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    vest_patch = vest_patches[0]
    if tan_patch.simple_query(""Is the tan a vest?"") == ""yes"":
        return ""vest""
    return ""hat"""
6436448,Is the color of the skirt the same as the scarf?," # returns yes or no
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    for skirt_patch in skirt_patches:
        scarf_patches = image_patch.find(""scarf"")
        # Question assumes only one scarf patch
        if len(scarf_patches) == 0:
            return ""no""
        for scarf_patch in scarf_patches:
            if skirt_patch.simple_query(""What color is the skirt?"") == scarf_patch.simple_query(""What color is the scarf?""):
                return ""yes""
    return ""no"""
3303313,Is the blanket under a cat?," # assumes only one cat and one blanket
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        return ""no""
    blanket_patch = blanket_patches[0]
    cat_patches = image_patch.find(""cat"")
    if len(cat_patches) == 0:
        return ""no""
    cat_patch = cat_patches[0]
    return bool_to_yesno(blanket_patch.vertical_center > cat_patch.vertical_center)"
443663,What color is the picture?," # image is a PIL Image object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?," # assumes one man
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1885406,What is the toy on the bed?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toy on the bed?"")"
5557965,On which side is the bag?," # left or right
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?," # left or right
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3196355,What does the batter hold?," # batter is a verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What does the batter hold?"")"
14470748,Who wears a jacket?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a jacket?"") == ""yes"":
            return person_patch.simple_query(""Who wears a jacket?"")
    return ""no one"""
16537736,Are there any houses behind the shrubs?," # assumes only one shrub patch
    image_patch = ImagePatch(image)
    shrub_patches = image_patch.find(""shrub"")
    if len(shrub_patches) == 0:
        return ""no""
    shrub_patch = shrub_patches[0]
    house_patches = image_patch.find(""house"")
    for house_patch in house_patches:
        if house_patch.horizontal_center < shrub_patch.horizontal_center:
            return ""no""
    return ""yes"""
1129541,What piece of furniture is made of wood?," # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""What piece of furniture is made of wood?"")"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?," # assumes one man and one racket
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    hat_patch = hat_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    racket_patch = racket_patches[0]
    if racket_patch.horizontal_center > man_patch.horizontal_center and racket_patch.horizontal_center < hat_patch.horizontal_center:
        return ""right""
    elif racket_patch.horizontal_center < man_patch.horizontal_center and racket_patch.horizontal_center > hat_patch.horizontal_center:
        return ""left""
    else:
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")"
12416703,Where is that cat?," # assumes only one cat
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    if len(cat_patches) == 0:
        return image_patch.simple_query(""Where is that cat?"")
    cat_patch = cat_patches[0]
    if cat_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif cat_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
15603088,The animal to the right of the envelope is lying on what?," # assumes only one envelope and one animal
    image_patch = ImagePatch(image)
    envelope_patches = image_patch.find(""envelope"")
    if len(envelope_patches) == 0:
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    envelope_patch = envelope_patches[0]
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    animal_patch = animal_patches[0]
    if animal_patch.horizontal_center > envelope_patch.horizontal_center:
        return animal_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")"
5329077,Is the man on a bench?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on a bench?"")
    man_patch = man_patches[0]
    bench_patches = image_patch.find(""bench"")
    if len(bench_patches) == 0:
        return ""no""
    for bench_patch in bench_patches:
        if bench_patch.horizontal_center == man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1945705,What kind of device is to the left of the device that looks silver and gray?," # assumes only one device that looks silver and gray
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device that looks silver and gray
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    for device_patch in device_patches:
        if device_patch.simple_query(""What kind of device is this?"") == ""silver and gray"":
            left_device_patches = image_patch.find(""device"")
            for left_device_patch in left_device_patches:
                if left_device_patch.horizontal_center < device_patch.horizontal_center:
                    return left_device_patch.simple_query(""What kind of device is this?"")
    # If no device is to the left, query the image directly
    return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")"
17520003,What vehicle is to the right of the pine tree?," # assumes only one vehicle and one pine tree
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    vehicle_patch = vehicle_patches[0]
    pine_tree_patches = image_patch.find(""pine tree"")
    if len(pine_tree_patches) == 0:
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    pine_tree_patch = pine_tree_patches[0]
    if vehicle_patch.horizontal_center > pine_tree_patch.horizontal_center:
        return vehicle_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    return pine_tree_patch.simple_query(""What vehicle is to the right of the pine tree?"")"
1259983,Who is wearing pants?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    return person_patches[0].simple_query(""Who is wearing pants?"")"
6413378,Is there a black keyboard or camera?," # assumes only one keyboard or camera
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    camera_patches = image_patch.find(""camera"")
    if len(keyboard_patches) == 0 and len(camera_patches) == 0:
        return ""no""
    elif len(keyboard_patches) == 0:
        return ""camera""
    elif len(camera_patches) == 0:
        return ""keyboard""
    else:
        keyboard_is_black = image_patch.exists(""black keyboard"")
        camera_is_black = image_patch.exists(""black camera"")
        if keyboard_is_black and camera_is_black:
            return ""both""
        elif keyboard_is_black:
            return ""keyboard""
        elif camera_is_black:
            return ""camera""
        else:
            return ""neither"""
947305,Is the sunny water blue and high?," # water is a common object, so it's safe to assume it's the water in the query
    image_patch = ImagePatch(image)
    is_blue = image_patch.verify_property(""water"", ""blue"")
    is_high = image_patch.verify_property(""water"", ""high"")
    return bool_to_yesno(is_blue and is_high)"
4367817,What type of animal in this scene is brown?," # assumes only one brown animal
    image_patch = ImagePatch(image)
    brown_animals = image_patch.find(""brown animal"")
    if len(brown_animals) == 0:
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    return brown_animals[0].simple_query(""What type of animal in this scene is brown?"")"
15485572,What is the vegetable on the hot dog with the cheese?," # assumes only one hot dog with cheese
    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog with cheese"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    hot_dog_patch = hot_dog_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no vegetable""
    for vegetable_patch in vegetable_patches:
        if (vegetable_patch.horizontal_center > hot_dog_patch.horizontal_center and
            vegetable_patch.horizontal_center < hot_dog_patch.horizontal_center + hot_dog_patch.width):
            return vegetable_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    return ""no vegetable"""
12661142,What is the appliance in the kitchen called?," # kitchen is not a required parameter
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the appliance in the kitchen called?"")"
41012743,The arrow is on what?," # assumes only one arrow
    image_patch = ImagePatch(image)
    arrow_patches = image_patch.find(""arrow"")
    if len(arrow_patches) == 0:
        return image_patch.simple_query(""The arrow is on what?"")
    return arrow_patches[0].simple_query(""The arrow is on what?"")"
4777414,What color is the bicycle in the bottom of the photo?," # assumes only one bicycle
    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    if len(bicycle_patches) == 0:
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    bicycle_patch = bicycle_patches[0]
    if bicycle_patch.lower > image_patch.height / 2:
        return bicycle_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    return bicycle_patch.simple_query(""What color is the bicycle in the top of the photo?"")"
1185988,What is the device on top of the table that is to the right of the trashcan?," # assumes one table and one trashcan
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    table_patch = table_patches[0]
    trashcan_patches = image_patch.find(""trashcan"")
    # Question assumes only one trashcan patch
    if len(trashcan_patches) == 0:
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    trashcan_patch = trashcan_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    device_patch = device_patches[0]
    if device_patch.horizontal_center > trashcan_patch.horizontal_center and device_patch.vertical_center < table_patch.vertical_center:
        return device_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")"
13582968,Was granite used to make that floor?," # assumes one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        return image_patch.simple_query(""Was granite used to make that floor?"")
    return bool_to_yesno(floor_patches[0].verify_property(""floor"", ""granite""))"
6235273,Are there women in the photo?," # assumes only one woman
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""woman""))"
5377974,What is the girl playing with?," # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What is the girl playing with?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What is the girl playing with?"")"
51037065,On which side of the image is the fridge?," # left or right
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    if fridge_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5299477,Which kind of bag does the girl carry?," # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    girl_patch = girl_patches[0]
    bag_patches = girl_patch.find(""bag"")
    if len(bag_patches) == 0:
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    return bag_patches[0].best_text_match([""backpack"", ""handbag"", ""suitcase""]) # crop would include the bag so keep it in the query"
15135617,Is the white dog on a bench?," # assumes only one white dog and one bench
    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    if len(white_dog_patches) == 0:
        return ""no""
    white_dog_patch = white_dog_patches[0]
    bench_patches = image_patch.find(""bench"")
    if len(bench_patches) == 0:
        return ""no""
    bench_patch = bench_patches[0]
    return bool_to_yesno(white_dog_patch.horizontal_center < bench_patch.horizontal_center and white_dog_patch.vertical_center < bench_patch.vertical_center)"
1111583,Is the male person to the right of a person?," # assumes only one male person
    image_patch = ImagePatch(image)
    male_patches = image_patch.find(""male person"")
    if len(male_patches) == 0:
        return ""no""
    male_patch = male_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < male_patch.horizontal_center:
            return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
15610844,What kind of place is shown?," # assumes one image patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")"
11869032,Is the banana below a bird?," # assumes only one bird and one banana
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        return ""no""
    banana_patch = banana_patches[0]
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        return ""no""
    bird_patch = bird_patches[0]
    return bool_to_yesno(banana_patch.vertical_center > bird_patch.vertical_center)"
9878360,What color is the vehicle to the left of the fence?," # assumes only one vehicle and one fence
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    vehicle_patch = vehicle_patches[0]
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < vehicle_patch.horizontal_center:
        return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    return vehicle_patch.simple_query(""What color is the vehicle to the right of the fence?"")"
481765,Are there either any buses or trains in the image?," # bus or train
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?," # assumes one fence patch
    image_patch = ImagePatch(image)
    return image_patch.find(""fence"")[0].simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?," # assumes one traffic cone
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes only one traffic cone patch
    if len(traffic_cone_patches) == 0:
        return ""no""
    traffic_cone_patch = traffic_cone_patches[0]
    if man_patch.horizontal_center < traffic_cone_patch.horizontal_center:
        return bool_to_yesno(man_patch.verify_property(""man"", ""cap""))
    return ""no"""
11981238,What is common to the blazer and the suit?," # assumes only one blazer and one suit
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one blazer and one suit patch
    if len(blazer_patches) == 0 or len(suit_patches) == 0:
        # If no blazer or suit is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    blazer_patch = blazer_patches[0]
    suit_patch = suit_patches[0]
    common_attributes = set(blazer_patch.simple_query(""What is common to the blazer and the suit?"").split("" and ""))
    return common_attributes.pop() # returns one of the common attributes"
16245,Is the shirt white or green?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Is the shirt white or green?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""white"", ""green""])"
2595103,"In which part of the image are the cars, the bottom or the top?"," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    car_patch = car_patches[0]
    if car_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?"," # assumes only one sand patch
    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""How does the sand look, dry or wet?"")
    return sand_patches[0].simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?," # assumes one table
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    for banana_patch in banana_patches:
        if banana_patch.simple_query(""Is the banana on the table?"") == ""yes"":
            fruit_patches = image_patch.find(""fruit"")
            for fruit_patch in fruit_patches:
                if fruit_patch.horizontal_center > banana_patch.horizontal_center:
                    return ""yes""
    return ""no"""
6376614,What color is the car in the middle?," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""What color is the car in the middle?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center == image_patch.horizontal_center:
        return car_patch.simple_query(""What color is the car in the middle?"")
    return car_patch.simple_query(""What color is the car to the left of the middle?"")"
712063,What's the lamp made of?," # assumes only one lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        return image_patch.simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What's the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?," # assumes one pillow
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    return furniture_patches[0].simple_query(""Which kind of furniture is to the right of the pillow?"")"
9647343,What type of material is the patio made of?," # patio is a type of object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?," # assumes only one sky patch
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    if len(sky_patches) == 0:
        return image_patch.simple_query(""What is the color of the clouds in the sky?"")
    return sky_patches[0].simple_query(""What is the color of the clouds in the sky?"")"
9843309,Do the flowers look orange?," # assumes only one flower
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flowers"", ""orange""))"
618996,Is there a chair or a bed in this image?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?," # assumes only one truck and one umbrella
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    umbrella_patches = image_patch.find(""umbrella"")
    if len(truck_patches) == 0 or len(umbrella_patches) == 0:
        return ""no""
    for truck_patch in truck_patches:
        for umbrella_patch in umbrella_patches:
            if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
                return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return ""unknown""
    pants_patch = pants_patches[0]
    return pants_patch.simple_query(""What color are the pants the man is wearing?"") # crop would include the pants so keep it in the query"
551601,Are there any pillows or chairs in the image?," # Pillow or chair?
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?," # assumes one bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    bag_patch = bag_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < bag_patch.horizontal_center:
        return ""yes""
    return ""no"""
5925408,What is the bike in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?," # assumes only one fast food patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)"
13778498,What type of vehicle is behind the green tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"")"
41019603,What is the child standing on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?," # assumes only one wooden item of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) == 0 or len(woman_patches) == 0:
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Who is wearing the shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?," # assumes one fence patch
    image_patch = ImagePatch(image)
    return image_patch.find(""fence"")[0].simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?," # assumes only one kite
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    if len(kite_patches) == 0:
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    for kite_patch in kite_patches:
        if kite_patch.simple_query(""Does the kite look triangular?"") == ""yes"":
            return kite_patch.simple_query(""What color is the kite?"")
    return image_patch.simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?," # assumes only one person is drinking
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is drinking?"")
    return person_patches[0].simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?," # assumes one tree and one building
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    building_patches = image_patch.find(""building"")
    if len(tree_patches) == 0 or len(building_patches) == 0:
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    tree_patch = tree_patches[0]
    building_patch = building_patches[0]
    if building_patch.horizontal_center < tree_patch.horizontal_center:
        return building_patch.best_text_match([""white"", ""brown""])
    else:
        return ""no"""
5749240,Are the glove and the undershirt both black?," # assumes only one glove and one undershirt
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    if len(glove_patches) == 0:
        return ""no""
    glove_patch = glove_patches[0]
    undershirt_patches = image_patch.find(""undershirt"")
    if len(undershirt_patches) == 0:
        return ""no""
    undershirt_patch = undershirt_patches[0]
    return bool_to_yesno(glove_patch.verify_property(""glove"", ""black"") and undershirt_patch.verify_property(""undershirt"", ""black""))"
18573157,Is the juice in a cup?," # assumes only one cup
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        return ""no""
    juice_patches = image_patch.find(""juice"")
    if len(juice_patches) == 0:
        return ""no""
    for juice_patch in juice_patches:
        if juice_patch.exists(""cup""):
            return ""yes""
    return ""no"""
3445929,Is the brown horse on the right side of the photo?," # assumes only one horse
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        return ""no""
    horse_patch = horse_patches[0]
    if horse_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
16541709,Where is the grass?," # assumes only one grass patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    if len(grass_patches) == 0:
        return image_patch.simple_query(""Where is the grass?"")
    grass_patch = grass_patches[0]
    if grass_patch.lower < image_patch.lower and grass_patch.upper > image_patch.upper:
        return ""bottom""
    elif grass_patch.left < image_patch.left and grass_patch.right > image_patch.right:
        return ""left""
    elif grass_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif grass_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
15764335,Are there any dogs on the tan sand?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""dog on tan sand""))"
1478089,Are the door and the garage door made of the same material?," # material is a property
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_patch = door_patches[0]
    garage_door_patches = image_patch.find(""garage door"")
    # Question assumes only one garage door patch
    if len(garage_door_patches) == 0:
        return ""no""
    garage_door_patch = garage_door_patches[0]
    return bool_to_yesno(door_patch.verify_property(""door"", ""same material as garage door"")) # material is a property"
1250685,Was this picture taken in a bathroom or at a dining room?," # assumes only one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"")"
10436844,Is the zebra's nose soft and brown?," # assumes only one zebra
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    if len(zebra_patches) == 0:
        return ""no""
    zebra_patch = zebra_patches[0]
    is_soft = zebra_patch.simple_query(""Is the zebra's nose soft?"")
    is_brown = zebra_patch.simple_query(""Is the zebra's nose brown?"")
    return bool_to_yesno(is_soft and is_brown)"
10683765,Does the shirt have blue color?," # crop would include the shirt so keep it in the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""blue""))"
1593352,Do the draperies look white and striped?," # white and striped are properties
    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""drapery"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    return bool_to_yesno(drapery_patches[0].verify_property(""drapery"", ""white and striped""))"
16553304,Are the trunks both long and wide?," # assumes only one trunk
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    if len(trunk_patches) == 0:
        return ""no""
    trunk_patch = trunk_patches[0]
    is_long = trunk_patch.verify_property(""trunk"", ""long"")
    is_wide = trunk_patch.verify_property(""trunk"", ""wide"")
    return bool_to_yesno(is_long and is_wide)"
7165102,Is the car on the left of the photo?," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return ""no""
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?," # crop would include the color so keep it in the query
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana that looks yellow and green"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for banana_patch in banana_patches:
        is_short = banana_patch.simple_query(""Is the banana that looks yellow and green short?"")
        if is_short:
            return ""yes""
    return ""no"""
19279872,What is the man to the right of the helmet wearing?," # helmet is a type of headgear
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    helmet_patch = helmet_patches[0]
    if helmet_patch.horizontal_center > man_patch.horizontal_center:
        return man_patch.simple_query(""What is the man wearing?"")
    return man_patch.simple_query(""What is the man to the right of the helmet wearing?"")"
4285513,What is the color of the floor?," # returns the color of the floor
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor?"")"
3974266,Do the trousers look tan?," # tan is a color
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan""))"
11595009,What are the devices to the right of the device that is to the right of the remote control?," # assumes only one remote control
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    remote_control_patch = remote_control_patches[0]
    right_patches = image_patch.find(""device"")
    # Question assumes only one right patch
    if len(right_patches) == 0:
        # If no right patch is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    right_patch = right_patches[0]
    if right_patch.horizontal_center < remote_control_patch.horizontal_center:
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    right_of_right_patches = image_patch.find(""device"")
    # Question assumes only one right_of_right patch
    if len(right_of_right_patches) == 0:
        # If no right_of_right patch is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    right_of_right_patch = right_of_right_patches[0]
    if right_of_right_patch.horizontal_center < right"
6183000,Are there nightstands or beds?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""nightstand"") or image_patch.exists(""bed""))"
14143982,Is it an outdoors scene?," # assumes one image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""scene"", ""outdoors""))"
6123160,Are the speakers to the left of a Wii controller?," # assumes only one speaker and one Wii controller
    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    if len(speaker_patches) == 0:
        return ""no""
    speaker_patch = speaker_patches[0]
    wii_controller_patches = image_patch.find(""Wii controller"")
    if len(wii_controller_patches) == 0:
        return ""no""
    wii_controller_patch = wii_controller_patches[0]
    return bool_to_yesno(speaker_patch.horizontal_center < wii_controller_patch.horizontal_center)"
3681634,Is the plastic fork in the top or in the bottom part of the photo?," # assumes only one plastic fork
    image_patch = ImagePatch(image)
    plastic_fork_patches = image_patch.find(""plastic fork"")
    if len(plastic_fork_patches) == 0:
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    plastic_fork_patch = plastic_fork_patches[0]
    if plastic_fork_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
13629530,What is the vehicle on the street?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle on the street?"")
    return vehicle_patches[0].simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?," # crop would include the man so keep it in the query
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return image_patch.simple_query(""What color is the hat the man is in?"")
    return hat_patches[0].simple_query(""What color is the hat the man is in?"")"
1849976,What vegetables are to the left of the spoon?," # assumes only one spoon
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    for spoon_patch in spoon_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        # Question assumes only one vegetable patch
        if len(vegetable_patches) == 0:
            return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < spoon_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetables are to the left of the spoon?"")
    # If no vegetable is to the left of the spoon, query the image directly
    return image_patch.simple_query(""What vegetables are to the left of the spoon?"")"
14827816,Is the statue made of bronze or stone?," # assumes only one statue
    image_patch = ImagePatch(image)
    return image_patch.find(""statue"")[0].best_text_match([""bronze"", ""stone""])"
857204,What's the woman wearing?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"")"
2201105,Is the ball pink?," # assumes only one ball
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    if len(ball_patches) == 0:
        return ""no""
    return bool_to_yesno(ball_patches[0].verify_property(""ball"", ""pink""))"
14616023,What piece of furniture are the cords in front of?," # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    cords_patches = image_patch.find(""cords"")
    # Question assumes only one cords patch
    if len(cords_patches) == 0:
        # If no cords are found, query the image directly
        return image_patch.simple_query(""What piece of furniture are the cords in front of?"")
    cords_patch = cords_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > cords_patch.horizontal_center:
            return furniture_patch.simple_query(""What piece of furniture are the cords in front of?"")
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?," # left or right
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""black car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?," # assumes only one striped animal
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the striped animal called?"")"
1479068,Is it outdoors?," # assumes one image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))"
16155046,Is the dry grass below a zebra?," # assumes only one zebra
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    if len(zebra_patches) == 0:
        return ""no""
    zebra_patch = zebra_patches[0]
    dry_grass_patches = image_patch.find(""dry grass"")
    if len(dry_grass_patches) == 0:
        return ""no""
    dry_grass_patch = dry_grass_patches[0]
    return bool_to_yesno(dry_grass_patch.vertical_center > zebra_patch.vertical_center)"
16515071,What is the person in the water wearing?," # assumes only one person in the water
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person in the water wearing?"")"
161015042,Who is wearing the goggles?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the goggles?"")"
19149868,What is pulled by the lady?," # assumes only one horse
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        return image_patch.simple_query(""What is pulled by the lady?"")
    return horse_patches[0].best_text_match([""carriage"", ""cart"", ""dog"", ""horse""]) # crop would include the horse so keep it in the query"
5199994,What's the man wearing?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
19184475,Are the man glasses on the left side of the image?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    return bool_to_yesno(glasses_patch.horizontal_center < image_patch.horizontal_center)"
7149602,Is the shirt orange or blue?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""orange"", ""blue""])"
19479555,What is the person to the right of the benches holding?," # assumes one person and one bench
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    bench_patches = image_patch.find(""bench"")
    if len(person_patches) == 0 or len(bench_patches) == 0:
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    person_patch = person_patches[0]
    bench_patch = bench_patches[0]
    if person_patch.horizontal_center > bench_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the right of the benches holding?"")
    return image_patch.simple_query(""What is the person to the right of the benches holding?"")"
19273393,Are there both a door and a window in this photo?," # assumes only one door and one window
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
6481656,What is the man doing?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man doing?"")
    return man_patches[0].simple_query(""What is the man doing?"")"
13127703,What kind of drink is to the left of the bottle the woman is pouring?," # assumes only one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    bottle_patch = bottle_patches[0]
    drink_patches = image_patch.find(""drink"")
    for drink_patch in drink_patches:
        if drink_patch.horizontal_center < bottle_patch.horizontal_center:
            return drink_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")"
2378018,What is the toilet in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"")"
8430841,Is the frisbee to the left of the guy?," # assumes one frisbee and one guy
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    guy_patches = image_patch.find(""guy"")
    if len(frisbee_patches) == 0 or len(guy_patches) == 0:
        return ""no""
    frisbee_patch = frisbee_patches[0]
    guy_patch = guy_patches[0]
    return bool_to_yesno(frisbee_patch.horizontal_center < guy_patch.horizontal_center)"
18616818,The man is watching who?," # contains a relation (watching), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is watching who?"")"
179526,Is the white dog behind a girl?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white dog behind a girl?"")"
21018827,Is the river murky and calm?," # assumes only one river patch
    image_patch = ImagePatch(image)
    river_patches = image_patch.find(""river"")
    if len(river_patches) == 0:
        # If no river is found, query the image directly
        return image_patch.simple_query(""Is the river murky and calm?"")
    river_patch = river_patches[0]
    is_murky = river_patch.verify_property(""river"", ""murky"")
    is_calm = river_patch.verify_property(""river"", ""calm"")
    return bool_to_yesno(is_murky and is_calm)"
3697449,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?," # assumes only one image patch
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?," # assumes only one car and one sign
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one car and one sign patch
    if len(car_patches) == 0 or len(sign_patches) == 0:
        # If no car or sign is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patch = sign_patches[0]
    common_properties = set(car_patch.simple_query(""What properties does the car have?"").split("", "")) & set(sign_patch.simple_query(""What properties does the sign have?"").split("", ""))
    common_properties_str = "", "".join(common_properties)
    return common_properties_str"
11764476,Which place is it?," # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    return plate_patches[0].simple_query(""On what kind of furniture is the plate?"")"
61022361,What is the painting that is to the left of the clock hanging on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")"
1527392,"What color is the fence, tan or black?"," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    fence_patch = fence_patches[0]
    return fence_patch.best_text_match([""tan"", ""black""])"
19229351,Do you see both bowls and carrots?," # assumes only one bowl and one carrot
    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)"
1297082,On which side is the silver fork?," # left or right
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16757832,Are there any blue helmets or napkins?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.exists(""blue helmet"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_blue_helmet or is_napkin)"
839816,"In which part of the photo is the racket, the top or the bottom?"," # assumes only one racket
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12385226,Is there a mirror in the bathroom?," # bathroom is not a property of the mirror
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""mirror"") and image_patch.exists(""bathroom""))"
18720852,Are there either blankets or tents in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?," # assumes only one woman on the left
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        cardboard_patches = image_patch.find(""cardboard box"")
        # Question assumes only one cardboard box patch
        if len(cardboard_patches) == 0:
            return ""right""
        for cardboard_patch in cardboard_patches:
            if cardboard_patch.horizontal_center > woman_patch.horizontal_center:
                return ""right""
        return ""left""
    else:
        cardboard_patches = image_patch.find(""cardboard box"")
        # Question assumes only one cardboard box patch
        if len(cardboard_patches) == 0:
            return ""left""
        for cardboard_patch in cardboard_patches:
            if cardboard_patch.horizontal_center < woman_patch.horizontal_center:
                return ""left""
        return ""right"""
19453453,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?," # assumes only one house
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    if len(house_patches) == 0:
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    house_patch = house_patches[0]
    if house_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the flowers that look red?"")"
15710688,Is the shirt short sleeved or sleeveless?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    if shirt_patch.exists(""sleeve""):
        return ""short sleeved""
    else:
        return ""sleeveless"""
5533952,What are the white wires connected to?," # assumes only one white wire
    image_patch = ImagePatch(image)
    white_wire_patches = image_patch.find(""white wire"")
    if len(white_wire_patches) == 0:
        return image_patch.simple_query(""What are the white wires connected to?"")
    white_wire_patch = white_wire_patches[0]
    return white_wire_patch.simple_query(""What are the white wires connected to?"") # crop would include the connection so keep it in the query"
11313555,"What type of furniture is that, a table or a nightstand?"," # assumes only one object
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    furniture_patch = furniture_patches[0]
    is_table = furniture_patch.simple_query(""Is that a table or a nightstand?"") == ""table""
    return ""table"" if is_table else ""nightstand"""
10508893,What animals are in front of the trees?," # assumes only one tree
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""What animals are in front of the trees?"")
    tree_patch = tree_patches[0]
    return image_patch.simple_query(""What animals are in front of the tree?"") # crop would include the tree so keep it in the query"
14501997,What is the gate made of?," # assumes one gate
    image_patch = ImagePatch(image)
    gate_patches = image_patch.find(""gate"")
    if len(gate_patches) == 0:
        return image_patch.simple_query(""What is the gate made of?"")
    return gate_patches[0].simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?," # assumes only one device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    device_patch = device_patches[0]
    return device_patch.simple_query(""What color is the device on top of the table?"")"
181032044,Are these closed drawers?," # assumes only one drawer
    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    return bool_to_yesno(drawer_patches[0].verify_property(""drawer"", ""closed""))"
383,What kind of furniture is made of wood?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""What kind of furniture is made of wood?"")"
101054962,What is the person by the bananas wearing?," # assumes one person and one banana
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    person_patch = person_patches[0]
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    banana_patch = banana_patches[0]
    if (banana_patch.horizontal_center - person_patch.horizontal_center) < 0:
        return person_patch.simple_query(""What is the person by the bananas wearing?"")
    return person_patch.simple_query(""What is the person by the bananas wearing?"") # crop would include the bananas so keep it in the query"
759165,What is the color of the tower in the middle of the picture?," # assumes only one tower
    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    if len(tower_patches) == 0:
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    tower_patch = tower_patches[0]
    return tower_patch.simple_query(""What is the color of the tower in the middle of the picture?"")"
10775539,Is this giraffe tall and white?," # assumes only one giraffe
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    if len(giraffe_patches) == 0:
        return ""no""
    giraffe_patch = giraffe_patches[0]
    return bool_to_yesno(giraffe_patch.verify_property(""giraffe"", ""tall"") and giraffe_patch.verify_property(""giraffe"", ""white""))"
19981804,On which side of the photo is the colorful screen?," # left or right
    image_patch = ImagePatch(image)
    colorful_screen_patches = image_patch.find(""colorful screen"")
    # Question assumes only one colorful screen patch
    if len(colorful_screen_patches) == 0:
        # If no colorful screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    colorful_screen_patch = colorful_screen_patches[0]
    if colorful_screen_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7903654,Is the tap on the left side or on the right?," # assumes only one tap
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    tap_patch = tap_patches[0]
    if tap_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6206183,Which place is it?," # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?," # assumes one coat
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    return coat_patches[0].best_text_match([""black"", ""beige""])"
13123207,Does the kite near the field look high and red?," # assumes one kite and one field
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    field_patches = image_patch.find(""field"")
    # Question assumes only one kite and one field patch
    if len(kite_patches) == 0 or len(field_patches) == 0:
        # If no kite or field is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    kite_patch = kite_patches[0]
    field_patch = field_patches[0]
    if kite_patch.horizontal_center > field_patch.horizontal_center:
        return bool_to_yesno(kite_patch.verify_property(""kite"", ""high and red""))
    else:
        return ""no"""
7740092,Are there any utensils in this picture?," # assumes only one image patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""utensil""))"
8774975,What is around the guy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?," # assumes only one image patch
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?," # assumes only one staircase and one sky
    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    if len(staircase_patches) == 0:
        return ""no""
    staircase_patch = staircase_patches[0]
    sky_patches = image_patch.find(""sky"")
    if len(sky_patches) == 0:
        return ""no""
    sky_patch = sky_patches[0]
    return bool_to_yesno(simple_qa(staircase_patch.cropped_image, ""Is the staircase different in color than the sky?"") == ""yes"")"
1605874,What color are the containers that are on the right?," # assumes only one container
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    container_patch = container_patches[0]
    if container_patch.horizontal_center > image_patch.horizontal_center:
        return container_patch.simple_query(""What color are the containers that are on the right?"")
    return container_patch.simple_query(""What color are the containers that are on the left?"")"
12495781,Are the people to the right or to the left of the cone that is orange?," # assumes only one cone patch
    image_patch = ImagePatch(image)
    cone_patches = image_patch.find(""cone"")
    if len(cone_patches) == 0:
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    cone_patch = cone_patches[0]
    if cone_patch.simple_query(""Is the cone orange?"") == ""yes"":
        people_patches = image_patch.find(""people"")
        if len(people_patches) == 0:
            return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
        for people_patch in people_patches:
            if people_patch.horizontal_center > cone_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
    return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")"
14165681,"What type of clothing is light, the sweater or the cap?"," # assumes only one light clothing patch
    image_patch = ImagePatch(image)
    light_clothing_patches = image_patch.find(""light clothing"")
    if len(light_clothing_patches) == 0:
        # If no light clothing is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    light_clothing_patch = light_clothing_patches[0]
    sweater_patches = image_patch.find(""sweater"")
    cap_patches = image_patch.find(""cap"")
    if len(sweater_patches) == 0:
        return light_clothing_patch.best_text_match([""cap"", ""sweater""])
    if len(cap_patches) == 0:
        return light_clothing_patch.best_text_match([""cap"", ""sweater""])
    if light_clothing_patch.simple_query(""Is the light clothing a sweater?"") == ""yes"":
        return ""sweater""
    else:
        return ""cap"""
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?," # assumes only one girl wearing jeans
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    chair_patch = chair_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    girl_patch = girl_patches[0]
    if girl_patch.simple_query(""Is the girl wearing jeans?"") == ""yes"":
        if chair_patch.horizontal_center > girl_patch.horizontal_center:
            return ""right""
        else:
            return ""left""
    return ""right"" # default to right if girl is not wearing jeans"
5617223,"What color is the container to the left of the horse, green or silver?"," # assumes only one horse patch
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    horse_patch = horse_patches[0]
    container_patches = image_patch.find(""container"")
    for container_patch in container_patches:
        if container_patch.horizontal_center < horse_patch.horizontal_center:
            return container_patch.best_text_match([""green"", ""silver""])
    return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"") # if no container is found, query the image directly"
2428964,Is the water gray or teal?," # assumes only one water patch
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    if len(water_patches) == 0:
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].best_text_match([""gray"", ""teal""])"
19620769,Which place is it?," # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?," # left or right
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    if lamp_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?," # assumes only one brown animal
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    if len(brown_animal_patches) == 0:
        return ""no""
    brown_animal_patch = brown_animal_patches[0]
    return bool_to_yesno(brown_animal_patch.simple_query(""Does the brown animal look tiny?""))"
5672532,Does that shirt look long sleeved?," # crop would include the sleeves so keep it in the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    return shirt_patches[0].simple_query(""Does that shirt look long sleeved?"")"
6146439,Does the box look green?," # crop would include the box so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the box look green?"")"
1910285,Is the white container on the left of the image?," # assumes only one white container
    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    if len(white_container_patches) == 0:
        return ""no""
    white_container_patch = white_container_patches[0]
    if white_container_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
13362134,Is that shower curtain to the left of a toilet?," # assumes only one toilet and one shower curtain
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    if len(shower_curtain_patches) == 0:
        return ""no""
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        if len(toilet_patches) == 0:
            return ""no""
        for toilet_patch in toilet_patches:
            if shower_curtain_patch.horizontal_center < toilet_patch.horizontal_center:
                return ""yes""
    return ""no"""
161060488,Is there any cabinet to the right of the stove?," # assumes one stove
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
111055042,Is the chair on the right?," # assumes one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return ""no""
    return bool_to_yesno(chair_patches[0].horizontal_center > image_patch.horizontal_center)"
151068,Which kind of clothing is white?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        return image_patch.simple_query(""Which kind of clothing is white?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing white?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is white?"")
    return image_patch.simple_query(""Which kind of clothing is white?"")"
19387951,Is this place the forest or the garden?," # assumes only one ImagePatch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"")"
1781695,What's on the blanket?," # assumes only one blanket
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What's on the blanket?"")
    return blanket_patches[0].simple_query(""What's on the blanket?"")"
17699779,Is she on a bed?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    bed_patches = image_patch.find(""bed"")
    if len(bed_patches) == 0:
        return ""no""
    bed_patch = bed_patches[0]
    return bool_to_yesno(woman_patch.horizontal_center < bed_patch.horizontal_center and woman_patch.vertical_center < bed_patch.vertical_center)"
464441,"What piece of furniture is the blanket on, a bed or a sofa?"," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    for blanket_patch in blanket_patches:
        is_bed = blanket_patch.verify_property(""blanket"", ""on bed"")
        is_sofa = blanket_patch.verify_property(""blanket"", ""on sofa"")
        if is_bed:
            return ""bed""
        elif is_sofa:
            return ""sofa""
    # If no blanket is found, query the image directly
    return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")"
9505496,Are the wires above a man?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    wires_patches = image_patch.find(""wires"")
    for wires_patch in wires_patches:
        if wires_patch.vertical_center < man_patch.vertical_center:
            return ""yes""
    return ""no"""
4625512,What is the woman doing?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the woman doing?"")
    return woman_patches[0].simple_query(""What is the woman doing?"")"
9441941,Is the woman's hair red or black?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    woman_patch = woman_patches[0]
    return woman_patch.best_text_match([""red"", ""black""])"
2387432,What's on the table?," # assumes only one table
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's on the table?"")"
10534717,What is the pillow on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pillow on?"")"
19335685,"What fruits is the container behind of, apples or bananas?"," # contains a relation (behind), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")"
3127817,The goat is standing in what?," # assumes only one goat
    image_patch = ImagePatch(image)
    goat_patches = image_patch.find(""goat"")
    if len(goat_patches) == 0:
        return image_patch.simple_query(""The goat is standing in what?"")
    goat_patch = goat_patches[0]
    return goat_patch.simple_query(""The goat is standing in what?"")"
1588567,Where does the man that to the right of the mirror sit?," # assumes one mirror
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    man_patch = man_patches[0]
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes one mirror patch
    if len(mirror_patches) == 0:
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    mirror_patch = mirror_patches[0]
    if mirror_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7399543,What is the floor made of?," # assumes only one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        return image_patch.simple_query(""What is the floor made of?"")
    return floor_patches[0].simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?," # house is behind of the animal
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is the house behind of?"")"
1174904,Is the cobblestone sidewalk both large and gray?," # sidewalk is a common name for cobblestone
    image_patch = ImagePatch(image)
    sidewalk_patches = image_patch.find(""sidewalk"")
    # Question assumes only one sidewalk patch
    if len(sidewalk_patches) == 0:
        # If no sidewalk is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    return bool_to_yesno(sidewalk_patches[0].verify_property(""sidewalk"", ""large"") and sidewalk_patches[0].verify_property(""sidewalk"", ""gray""))"
13375231,What is the lettuce on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lettuce on?"")"
1194027,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What color is the clothing?"") == ""black"":
            return clothing_patch.simple_query(""What kind of clothing is black?"")
    return image_patch.simple_query(""Which kind of clothing is black?"")"
9963477,Is the statue wearing a dress?," # assumes only one statue
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    if len(statue_patches) == 0:
        return ""no""
    return bool_to_yesno(statue_patches[0].verify_property(""statue"", ""wearing a dress""))"
1151995,Which side of the photo is the yellow vase on?," # left or right
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")"
712821,What is common to the bear and the belt?," # common to two objects
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    bear_patch = bear_patches[0]
    belt_patches = image_patch.find(""belt"")
    # Question assumes only one belt patch
    if len(belt_patches) == 0:
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    belt_patch = belt_patches[0]
    common_properties = [""brown"", ""leather"", ""striped""]
    for property in common_properties:
        if bear_patch.verify_property(""bear"", property) and belt_patch.verify_property(""belt"", property):
            return property
    return image_patch.simple_query(""What is common to the bear and the belt?"")"
1757418,What is the vehicle to the right of the car?," # assumes only one car
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > image_patch.horizontal_center:
            return vehicle_patch.simple_query(""What is the vehicle to the right of the car?"")
    return ""no vehicle"""
7624100,Are the trunks that are gray wet and large?," # assumes only one trunk
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    trunk_patch = trunk_patches[0]
    is_gray = trunk_patch.simple_query(""Is the trunk gray?"")
    is_wet = trunk_patch.simple_query(""Is the trunk wet?"")
    is_large = trunk_patch.simple_query(""Is the trunk large?"")
    return bool_to_yesno(is_gray and is_wet and is_large)"
1125474,"On which side of the photo is the iron fence, the right or the left?"," # assumes one iron fence
    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    if len(iron_fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    iron_fence_patch = iron_fence_patches[0]
    if iron_fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1300375,What is the name of the item of furniture that the printer is on?," # assumes only one printer
    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    if len(printer_patches) == 0:
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    printer_patch = printer_patches[0]
    return printer_patch.simple_query(""What is the name of the item of furniture that the printer is on?"") # crop would include the printer so keep it in the query"
5925196,What's the building covered by?," # assumes only one building
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    if len(building_patches) == 0:
        return image_patch.simple_query(""What's the building covered by?"")
    building_patch = building_patches[0]
    return building_patch.simple_query(""What's the building covered by?"")"
1948055,What watercraft is the white rope tying?," # assumes only one watercraft
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What watercraft is the white rope tying?"")"
8540582,What kind of animal is in front of the leafy trees?," # assumes only one leafy tree
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is in front of the leafy trees?"")
    # If no animal is in front of the leafy trees, query the image directly
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?," # assumes one bus and one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one woman and one bus patch
    if len(woman_patches) == 0 or len(bus_patches) == 0:
        # If no woman or bus is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    woman_patch = woman_patches[0]
    bus_patch = bus_patches[0]
    if woman_patch.horizontal_center < bus_patch.horizontal_center:
        return woman_patch.simple_query(""What does the walking woman by the bus wear?"")
    else:
        return woman_patch.simple_query(""What does the walking woman by the bus wear?"")"
1129508,Is the controller to the left of a pillow?," # assumes only one pillow
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        # Question assumes only one pillow patch
        if len(pillow_patches) == 0:
            # If no pillow is found, query the image directly
            return image_patch.simple_query(""Is the controller to the left of a pillow?"")
        pillow_patch = pillow_patches[0]
        if controller_patch.horizontal_center < pillow_patch.horizontal_center:
            return ""yes""
    return ""no"""
18664084,Is there any sheep by the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""sheep"") and image_patch.exists(""fence""))"
6912079,What animal is this?," # assumes only one animal
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is this?"")"
3412029,Where is the person?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Where is the person?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif person_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
14161122,What animal is in the water?," # assumes only one animal
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?," # assumes only one baby and one parent
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    parent_patches = image_patch.find(""parent"")
    # Question assumes only one baby and one parent patch
    if len(baby_patches) == 0 or len(parent_patches) == 0:
        # If no baby or parent is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    baby_patch = baby_patches[0]
    parent_patch = parent_patches[0]
    if parent_patch.horizontal_center < baby_patch.horizontal_center:
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    for item_of_furniture_patch in image_patch.find(""item of furniture""):
        if item_of_furniture_patch.horizontal_center > baby_patch.horizontal_center:
            return item_of_furniture_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")"
15699496,What is the cup that looks clean made of?," # assumes only one cup
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    clean_cup_patch = None
    for cup_patch in cup_patches:
        if cup_patch.simple_query(""Is the cup clean?"") == ""yes"":
            clean_cup_patch = cup_patch
            break
    if clean_cup_patch is None:
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    return clean_cup_patch.best_text_match([""plastic"", ""glass"", ""metal""])"
12765451,What animals are to the right of the ladder?," # assumes only one ladder
    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for ladder_patch in ladder_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            # If no animal is found, query the image directly
            return image_patch.simple_query(""What animals are to the right of the ladder?"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > ladder_patch.horizontal_center:
                return animal_patch.simple_query(""What animals are to the right of the ladder?"")
    # If no animal is to the right of the ladder, query the image directly
    return image_patch.simple_query(""What animals are to the right of the ladder?"")"
191044307,What animal is black?," # assumes only one black animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal black?"") == ""yes"":
            return animal_patch.simple_query(""What animal is black?"")
    return image_patch.simple_query(""What animal is black?"")"
12639181,Who is wearing shorts?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    return person_patches[0].simple_query(""Who is wearing shorts?"")"
10630949,Is the person that is not male wearing an elbow pad?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for person_patch in person_patches:
        if not person_patch.verify_property(""person"", ""male""):
            return bool_to_yesno(person_patch.verify_property(""person"", ""wearing an elbow pad""))
    # If no person that is not male is found, query the image directly
    return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")"
14544602,What is the boy holding?," # assumes only one boy
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    return boy_patch.simple_query(""What is the boy holding?"")"
2986699,Of what material the dish?," # assumes only one dish
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Of what material the dish?"")"
161013513,What kind of animal is on the street?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What kind of animal is on the street?"")
    return animal_patches[0].simple_query(""What kind of animal is on the street?"")"
15143936,What animal is before the roof?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is before the roof?"")"
1955043,Who is playing with the ball?," # assumes only one ball patch
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Who is playing with the ball?"")
    ball_patch = ball_patches[0]
    return ball_patch.simple_query(""Who is playing with the ball?"")"
91044150,What is the name of the animals in front of the trees beside the river?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?," # assumes only one fruit patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?," # contains a relation (under), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""kangaroo"") or image_patch.exists(""bird""))"
10457241,What is the color of the trousers?," # returns the color of the trousers
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"")"
2913850,Is the placemat in the bottom or in the top part?," # assumes only one placemat
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    placemat_patch = placemat_patches[0]
    if placemat_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What is covered with blanket?"")
    return blanket_patches[0].simple_query(""What is covered with blanket?"")"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?"," # assumes only one desk drawer
    image_patch = ImagePatch(image)
    desk_drawer_patches = image_patch.find(""desk drawer"")
    if len(desk_drawer_patches) == 0:
        # If no desk drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    desk_drawer_patch = desk_drawer_patches[0]
    if desk_drawer_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?," # assumes only one tablecloth
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)"
19737232,Is the book on the right of the picture?," # assumes only one book
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        return ""no""
    book_patch = book_patches[0]
    if book_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
475064,Who is wearing the glasses?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the glasses?"")"
8594579,Is there a woman to the right of the orange object that is to the right of the person?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")"
14602992,Which side of the image is the couch on?," # left or right
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
9944587,How tall is the man that is wearing a shirt?," # height in inches
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    man_patch = man_patches[0]
    is_wearing_shirt = (man_patch.simple_query(""Is the man wearing a shirt?"") == ""yes"")
    if is_wearing_shirt:
        return man_patch.simple_query(""How tall is the man that is wearing a shirt?"") # crop would include the shirt so keep it in the query
    return man_patch.simple_query(""How tall is the man that is wearing a shirt?"")"
13736712,Are there any giraffes?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe""))"
6996118,The young girl is wearing what?," # assumes only one young girl
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The young girl is wearing what?"")"
19992576,Is the basket on the floor small and brown?," # assumes only one basket
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    if len(basket_patches) == 0:
        return ""no""
    basket_patch = basket_patches[0]
    is_on_floor = basket_patch.simple_query(""Is the basket on the floor?"")
    is_small = basket_patch.simple_query(""Is the basket small?"")
    is_brown = basket_patch.simple_query(""Is the basket brown?"")
    return bool_to_yesno(is_on_floor and is_small and is_brown)"
17332401,What is the boy in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"")"
15586294,Which side is the leather armchair on?," # left or right
    image_patch = ImagePatch(image)
    leather_armchair_patches = image_patch.find(""leather armchair"")
    # Question assumes only one leather armchair patch
    if len(leather_armchair_patches) == 0:
        # If no leather armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    if leather_armchair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15658324,What is the horse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    if len(controller_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    controller_patch = controller_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    best_match = furniture_patches[0]
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture the same color as the controller?"") == ""yes"":
            best_match = furniture_patch
    return best_match.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")"
2531874,Who is playing?," # assumes only one person playing
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
3112009,Is the plate on the left side?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        return ""no""
    plate_patch = plate_patches[0]
    if plate_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
1527613,On which side of the picture is the bag?," # assumes only one bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?," # road and roof are assumed to be the same color
    image_patch = ImagePatch(image)
    is_road = image_patch.exists(""road"")
    is_roof = image_patch.exists(""roof"")
    if is_road and is_roof:
        return ""yes""
    else:
        return ""no"""
161027384,What is the green rug hanging on?," # contains a relation (hanging on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?," # assumes only one laptop
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who in the photo is standing?"")"
693318,Do you see any plates in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate""))"
19613394,The person on the skateboard is wearing what?," # assumes only one skateboard patch
    image_patch = ImagePatch(image)
    skateboard_patches = image_patch.find(""skateboard"")
    if len(skateboard_patches) == 0:
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    for skateboard_patch in skateboard_patches:
        return skateboard_patch.simple_query(""The person on the skateboard is wearing what?"") # crop would include the person so keep it in the query"
19927237,Is the blue car in front of the white van?," # assumes only one blue car and one white van
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    white_van_patches = image_patch.find(""white van"")
    if len(blue_car_patches) == 0 or len(white_van_patches) == 0:
        return ""no""
    blue_car_patch = blue_car_patches[0]
    white_van_patch = white_van_patches[0]
    if blue_car_patch.horizontal_center < white_van_patch.horizontal_center:
        return ""yes""
    return ""no"""
31054022,What is the box sitting on?," # contains a relation (sitting on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?," # ground is a broad category
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""ground"", ""snowy"") and image_patch.verify_property(""ground"", ""brown""))"
15185768,Does the sky look blue and clear?," # sky is a broad category
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""blue"") and image_patch.verify_property(""sky"", ""clear""))"
1589160,Does the person that is sitting lean against a fire hydrant?," # assumes one person and one fire hydrant
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    firehydrant_patches = image_patch.find(""fire hydrant"")
    if len(person_patches) == 0 or len(firehydrant_patches) == 0:
        return ""no""
    person_patch = person_patches[0]
    firehydrant_patch = firehydrant_patches[0]
    return bool_to_yesno(person_patch.verify_property(""person"", ""leaning against"") and person_patch.simple_query(""What are you leaning against?"") == firehydrant_patch.simple_query(""What are you?""))"
2142522,Are there any shopping carts or mannequins in this photo?," # shopping cart and mannequin are both objects
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)"
17362234,Are there cages or scrub brushes in this picture?," # assumes only one image patch
    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)"
4955854,Is the lamp below the chain?," # assumes only one chain and one lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        return ""no""
    lamp_patch = lamp_patches[0]
    chain_patches = image_patch.find(""chain"")
    if len(chain_patches) == 0:
        return ""no""
    chain_patch = chain_patches[0]
    return bool_to_yesno(chain_patch.vertical_center < lamp_patch.vertical_center)"
10463545,Is the computer to the right of the other computer silver or black?," # assumes only one computer patch
    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    if len(computer_patches) == 0:
        # If no computer is found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    right_computer_patch = None
    for computer_patch in computer_patches:
        if computer_patch.horizontal_center > computer_patches[0].horizontal_center:
            right_computer_patch = computer_patch
    if right_computer_patch is None:
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    return right_computer_patch.best_text_match([""silver"", ""black""])"
2265037,What is the girl wearing?," # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_number = image_patch.exists(""blue number"")
    is_blue_letter = image_patch.exists(""blue letter"")
    return bool_to_yesno(is_blue_number or is_blue_letter)"
3483992,Is the long bus to the left or to the right of the person with the backpack?," # assumes one bus and one person with a backpack
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    person_patches = image_patch.find(""person with a backpack"")
    if len(bus_patches) == 0 or len(person_patches) == 0:
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    bus_patch = bus_patches[0]
    person_patch = person_patches[0]
    if bus_patch.horizontal_center < person_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
13598461,What is the device that is not on called?," # assumes only one device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    for device_patch in device_patches:
        if not device_patch.verify_property(""device"", ""on""):
            return device_patch.simple_query(""What is the device that is not on called?"")
    # If all devices are on, query the image directly
    return image_patch.simple_query(""What is the device that is not on called?"")"
13885436,The sky has what color?," # sky is a special case
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"") # sky is a special case"
7432467,Is the black container to the left of the man that is on the motorcycle?," # assumes only one man on a motorcycle
    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        # If no black container is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    for black_container_patch in black_container_patches:
        man_patches = image_patch.find(""man on motorcycle"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            # If no man is found, query the image directly
            return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
        man_patch = man_patches[0]
        if man_patch.horizontal_center > black_container_patch.horizontal_center:
            return ""no""
    return ""yes"""
19540096,Is the fire in an oven?," # assumes only one fire
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    if len(fire_patches) == 0:
        return ""no""
    fire_patch = fire_patches[0]
    oven_patches = image_patch.find(""oven"")
    if len(oven_patches) == 0:
        return ""no""
    oven_patch = oven_patches[0]
    return bool_to_yesno(fire_patch.exists(""oven"")) and bool_to_yesno(oven_patch.exists(""fire""))"
18291107,The horse is where?," # assumes one horse patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The horse is where?"")"
5435474,Is the man that is to the left of the motorbike wearing a hat?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")"
226307,Are there any tables in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))"
1944826,Who is reflected in the mirror?," # assumes only one mirror
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is reflected in the mirror?"")"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?," # assumes one woman and one cooking utensil
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    woman_patch = woman_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    cooking_utensil_patch = cooking_utensil_patches[0]
    if cooking_utensil_patch.horizontal_center > woman_patch.horizontal_center:
        return cooking_utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    return cooking_utensil_patch.simple_query(""What cooking utensil is on top of the stove?"") # crop would include the stove so keep it in the query"
18435846,What is the color of the balloon that is to the right of the backpack?," # assumes only one balloon and one backpack
    image_patch = ImagePatch(image)
    balloon_patches = image_patch.find(""balloon"")
    backpack_patches = image_patch.find(""backpack"")
    if len(balloon_patches) == 0 or len(backpack_patches) == 0:
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    balloon_patch = balloon_patches[0]
    backpack_patch = backpack_patches[0]
    if balloon_patch.horizontal_center < backpack_patch.horizontal_center:
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    return balloon_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")"
8390894,Is the woman to the right of the man sitting on a sofa?," # assumes one sofa patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    woman_patch = woman_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    man_patch = man_patches[0]
    sofa_patches = image_patch.find(""sofa"")
    # Question assumes only one sofa patch
    if len(sofa_patches) == 0:
        # If no sofa is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    sofa_patch = sofa_patches[0]
    if woman_patch.horizontal_center > man_patch.horizontal_center and woman_patch.simple_query(""Is the woman sitting on a sofa?"") == ""yes"" and sofa_patch.simple_query(""Is the woman sitting on this sofa?"") == ""yes"":
        return ""yes""
    return ""no"""
18896007,Which side of the image is the pot on?," # left or right
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19323898,Is that pillow on a couch?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is that pillow on a couch?"")
    pillow_patch = pillow_patches[0]
    return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""couch""))"
1281034,Where are the trees?," # assumes only one tree
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    if len(tree_patches) == 0:
        return image_patch.simple_query(""Where are the trees?"")
    tree_patch = tree_patches[0]
    if tree_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif tree_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
13515147,What is on the cow?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the cow?"")"
91036716,What is the skater doing?," # assumes one skater patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?," # assumes only one boy carrying
    image_patch = ImagePatch(image)
    boy_carrying_patches = image_patch.find(""boy carrying"")
    if len(boy_carrying_patches) == 0:
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    boy_carrying_patch = boy_carrying_patches[0]
    return image_patch.simple_query(""What is the person to the left of the boy carrying?"") # crop would include the boy carrying so keep it in the query"
13152020,Is the ground wet or dry?," # assumes only one ground patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ground wet or dry?"")"
19312096,"On which side is the purse, the left or the right?"," # assumes only one purse
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    if purse_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?," # assumes only one bread
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bread""))"
9113663,Do you see either any snow or sand that are white?," # snow or sand
    image_patch = ImagePatch(image)
    is_snow = image_patch.exists(""snow"")
    is_sand = image_patch.exists(""sand"")
    if is_snow or is_sand:
        return ""yes""
    return ""no"""
10243612,Which place is it?," # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"")"
15599523,Is the dog on the right side?," # assumes only one dog
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    if len(dog_patches) == 0:
        return ""no""
    return bool_to_yesno(dog_patches[0].horizontal_center > image_patch.horizontal_center)"
101019673,What is the man wearing?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man wearing?"")
    return man_patches[0].simple_query(""What is the man wearing?"")"
333047,Do you see any men to the right of the orange tent?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")"
13907796,Is the shirt striped and green?," # returns yes or no
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    shirt_patch = shirt_patches[0]
    is_striped = shirt_patch.verify_property(""shirt"", ""striped"")
    is_green = shirt_patch.verify_property(""shirt"", ""green"")
    return bool_to_yesno(is_striped and is_green)"
17207604,Are there either bottles or shelves?," # assumes only one shelf
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?," # assumes only one train
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    if len(train_patches) == 0:
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    train_patch = train_patches[0]
    if train_patch.horizontal_center < image_patch.horizontal_center:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > train_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")"
7165131,Is that train engine small or large?," # assumes only one train engine
    image_patch = ImagePatch(image)
    train_engine_patches = image_patch.find(""train engine"")
    if len(train_engine_patches) == 0:
        return image_patch.simple_query(""Is that train engine small or large?"")
    train_engine_patch = train_engine_patches[0]
    return train_engine_patch.simple_query(""Is that train engine small or large?"")"
21049362,Where are the railroad tracks?," # assumes only one railroad track
    image_patch = ImagePatch(image)
    railroad_patches = image_patch.find(""railroad track"")
    if len(railroad_patches) == 0:
        return image_patch.simple_query(""Where are the railroad tracks?"")
    return railroad_patches[0].simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?," # assumes only one child
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the children playing?"")"
598297,Are there combs or figurines in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)"
16409127,What is the wire on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?," # assumes only one tunnel patch
    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    if len(tunnel_patches) == 0:
        return image_patch.simple_query(""Is the tunnel small or large?"")
    tunnel_patch = tunnel_patches[0]
    if tunnel_patch.width < 100:
        return ""small""
    else:
        return ""large"""
17560468,Do you see trains or windows?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?," # assumes one man and one person
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    person_patches = image_patch.find(""person"")
    # Question assumes one man and one person patch
    if len(man_patches) == 0 or len(person_patches) == 0:
        # If no man or person is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    man_patch = man_patches[0]
    person_patch = person_patches[0]
    if abs(person_patch.horizontal_center - man_patch.horizontal_center) < 100: # 100 pixels
        return person_patch.simple_query(""What is the person near the man wearing?"")
    return image_patch.simple_query(""What is the person near the man wearing?"")"
12352375,Is the vehicle that is sitting down black or blue?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.verify_property(""vehicle"", ""sitting down""):
        return vehicle_patch.best_text_match([""black"", ""blue""])
    return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"") # crop would include the sitting so keep it in the query"
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?," # white thing is a towel
    image_patch = ImagePatch(image)
    trash_can_patches = image_patch.find(""trash can"")
    # Question assumes only one trash can patch
    if len(trash_can_patches) == 0:
        # If no trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    trash_can_patch = trash_can_patches[0]
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    towel_patch = towel_patches[0]
    if towel_patch.horizontal_center < trash_can_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5800248,Is it outdoors?," # assumes one image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))"
4604785,Does the pizza slice to the left of the pizza have large size?," # assumes only one pizza patch
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    left_pizza_patch = None
    right_pizza_patch = None
    for pizza_patch in pizza_patches:
        if pizza_patch.horizontal_center < image_patch.horizontal_center:
            left_pizza_patch = pizza_patch
        else:
            right_pizza_patch = pizza_patch
    if left_pizza_patch is None:
        return ""no""
    return bool_to_yesno(left_pizza_patch.verify_property(""pizza"", ""large""))"
15185845,What's the man wearing?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
2282232,Where is the snow?," # assumes only one patch
    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    if len(snow_patches) == 0:
        return image_patch.simple_query(""Where is the snow?"")
    snow_patch = snow_patches[0]
    if snow_patch.lower < image_patch.lower and snow_patch.upper > image_patch.upper:
        return ""bottom""
    elif snow_patch.left < image_patch.left and snow_patch.right > image_patch.right:
        return ""left""
    elif snow_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif snow_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
7889197,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)"
154682,Where does the bird stand on?," # assumes only one bird
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        return image_patch.simple_query(""Where does the bird stand on?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""Where does the bird stand on?"")"
10435315,Is the man holding a racket?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if (racket_patch.horizontal_center - man_patch.horizontal_center) ** 2 + (racket_patch.vertical_center - man_patch.vertical_center) ** 2 < 100:
            return ""yes""
    return ""no"""
121035887,Do the man shorts have white color?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man shorts"", ""white""))"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?," # assumes only one man and one vehicle
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    vehicle_patch = vehicle_patches[0]
    cows_patches = image_patch.find(""cows"")
    # Question assumes only one cows patch
    if len(cows_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    cows_patch = cows_patches[0]
    if man_patch.horizontal_center < cows_patch.horizontal_center:
        return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    else:
        return vehicle_patch.simple_query(""What kind of vehicle is to the right of the man that is to the left of the cows?"")"
19659501,What is the color of the umbrella the bird is on?," # assumes one bird and one umbrella
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    umbrella_patches = image_patch.find(""umbrella"")
    if len(bird_patches) == 0 or len(umbrella_patches) == 0:
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    bird_patch = bird_patches[0]
    umbrella_patch = umbrella_patches[0]
    return umbrella_patch.simple_query(""What is the color of the umbrella the bird is on?"") # crop would include the bird so keep it in the query"
10595217,Where is the grass?," # assumes only one grass patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    if len(grass_patches) == 0:
        return image_patch.simple_query(""Where is the grass?"")
    grass_patch = grass_patches[0]
    if grass_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif grass_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
14803743,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What color is the clothing?"") == ""black"":
            return clothing_patch.simple_query(""What kind of clothing is black?"")
    return image_patch.simple_query(""Which kind of clothing is black?"")"
19743238,Is the man on the right side?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
3965204,Are the mountains covered with snow?," # assumes only one mountain patch
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    return bool_to_yesno(mountain_patches[0].verify_property(""mountain"", ""snow""))"
141024710,Are there both windows and cars in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?," # returns a string
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    return shirt_patches[0].simple_query(""What color do you think the shirt is?"")"
3623367,What's he doing?," # assumes one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's he doing?"")"
15634950,Where is the giraffe in front of the hay eating from?," # assumes only one giraffe and one hay
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    giraffe_patch = giraffe_patches[0]
    hay_patches = image_patch.find(""hay"")
    # Question assumes only one hay patch
    if len(hay_patches) == 0:
        return ""no""
    hay_patch = hay_patches[0]
    return giraffe_patch.simple_query(""Where am I in relation to the hay?"") # crop would include the hay so keep it in the query"
16644500,What animal is the log pulled by?," # assumes only one log patch
    image_patch = ImagePatch(image)
    log_patches = image_patch.find(""log"")
    if len(log_patches) == 0:
        # If no log is found, query the image directly
        return image_patch.simple_query(""What animal is the log pulled by?"")
    log_patch = log_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.exists(""pulling""):
            return animal_patch.simple_query(""What animal is the log pulled by?"")
    return log_patch.simple_query(""What animal is the log pulled by?"") # crop would include the pulling so keep it in the query"
3202108,Which side is the car on?," # left or right
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10137201,Are the papers in the bottom part of the picture?," # assumes only one paper patch
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    paper_patch = paper_patches[0]
    if paper_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?," # assumes only one left person
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    boy_patch = boy_patches[0]
    left_patches = image_patch.find(""left"")
    # Question assumes only one left patch
    if len(left_patches) == 0:
        return ""left""
    left_patch = left_patches[0]
    if boy_patch.horizontal_center < left_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8438091,The picture is what color?," # image is a PIL Image object
    image = Image.fromarray(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The picture is what color?"") # crop would include the whole image so keep it in the query"
4325939,On which side of the photo is the banana?," # left or right
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1425189,What is the name of the brown piece of furniture?," # assumes only one brown piece of furniture
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown piece of furniture"")
    if len(brown_patches) == 0:
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return brown_patches[0].simple_query(""What is the name of the brown piece of furniture?"")"
5119962,Is the man to the right of glasses?," # assumes only one man and one glasses
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    glasses_patches = image_patch.find(""glasses"")
    if len(man_patches) == 0 or len(glasses_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    glasses_patch = glasses_patches[0]
    return bool_to_yesno(man_patch.horizontal_center > glasses_patch.horizontal_center)"
16523418,Is the toilet lid down or up?," # assumes only one toilet
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    return toilet_patches[0].simple_query(""Is the toilet lid down or up?"")"
6522554,Which kind of device does the man hold?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = man_patch.find(""device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    return device_patches[0].simple_query(""Which kind of device does the man hold?"")"
870619,What is the device to the left of the person that is to the left of the television?," # assumes only one patch per object
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    person_patch = person_patches[0]
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    device_patch = device_patches[0]
    if device_patch.horizontal_center < person_patch.horizontal_center:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    television_patches = image_patch.find(""television"")
    if len(television_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    television_patch = television_patches[0]
    if person_patch.horizontal_center < television_patch.horizontal_center:
        return device_patch.best_text_match([""phone"", ""computer"", ""remote control""])
    return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")"
12713794,Does the woman to the left of the man wear a necklace?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one man and one woman patch
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return bool_to_yesno(woman_patch.verify_property(""woman"", ""necklace""))
    return ""no"""
824070,What is the man doing?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man doing?"")
    return man_patches[0].simple_query(""What is the man doing?"")"
11593733,Which kind of furniture is right to the pillow?," # assumes one pillow
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")"
3357821,Does the dog to the left of the other dog look small or large?," # assumes only two dogs
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If not two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog = dog_patches[0]
    right_dog = dog_patches[1]
    if left_dog.horizontal_center < right_dog.horizontal_center:
        return left_dog.simple_query(""Does the dog look small or large?"")
    else:
        return right_dog.simple_query(""Does the dog look small or large?"")"
338026,Are the white candles short or tall?," # assumes only one white candle
    image_patch = ImagePatch(image)
    white_candle_patches = image_patch.find(""white candle"")
    # Question assumes only one white candle patch
    if len(white_candle_patches) == 0:
        # If no white candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    white_candle_patch = white_candle_patches[0]
    return white_candle_patch.simple_query(""Are the white candles short or tall?"")"
15346232,What kind of fruit is the girl holding?," # assumes only one girl
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is the girl holding?"")"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?"," # assumes only one yellow vehicle
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    if len(yellow_vehicle_patches) == 0:
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    yellow_vehicle_patch = yellow_vehicle_patches[0]
    if yellow_vehicle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
81030271,Is the gray car to the right or to the left of the cart?," # assumes only one gray car and one cart
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    cart_patches = image_patch.find(""cart"")
    gray_car_patch = gray_car_patches[0]
    cart_patch = cart_patches[0]
    if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?," # cooking utensil
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")"
8240699,What animal is in front of the bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the bird?"")"
10105081,Is the fence white or green?," # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].best_text_match([""white"", ""green""])"
13613689,Is there a train or a fence in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)"
10662521,What is the bottle made of?," # bottle is a common object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    plate_patch = plate_patches[0]
    fruit_patches = plate_patch.find(""fruit"")
    if len(fruit_patches) == 0:
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    return fruit_patches[0].simple_query(""Which kind of fruit is on the plate?"") # crop would include the fruit so keep it in the query"
16701575,What device is to the right of the cake?," # assumes one cake patch
    image_patch = ImagePatch(image)
    cake_patches = image_patch.find(""cake"")
    if len(cake_patches) == 0:
        # If no cake is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    for cake_patch in cake_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center > cake_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the right of the cake?"")
    return image_patch.simple_query(""What device is to the right of the cake?"")"
6572516,What material is the ceiling?," # ceiling is not a common object, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?," # assumes only one egg
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    if len(egg_patches) == 0:
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    egg_patch = egg_patches[0]
    return egg_patch.simple_query(""What is the color of the egg in the middle of the picture?"")"
14371534,Are the gold pans on the right part or on the left?," # assumes only one pan
    image_patch = ImagePatch(image)
    pans_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pans_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    pan_patch = pans_patches[0]
    if pan_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16538076,What does the man that is not tall wear?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if not man_patch.verify_property(""man"", ""tall""):
            return man_patch.simple_query(""What does the man that is not tall wear?"")
    # If no man is not tall, query the image directly
    return image_patch.simple_query(""What does the man that is not tall wear?"")"
5483644,"On which side is the woman, the left or the right?"," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?," # assumes only one animal
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in this photograph?"")"
1290926,Are there either any life vests or flags?," # assumes only one life vest and one flag
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)"
18273738,Do you see a cup?," # assumes only one cup
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cup""))"
4211922,Who is sitting on the table?," # assumes only one table
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?," # assumes only two girls
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only two girl patches
    if len(girl_patches) < 2:
        # If not two girls are found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    left_girl = girl_patches[0]
    right_girl = girl_patches[1]
    if left_girl.horizontal_center < right_girl.horizontal_center:
        return left_girl.simple_query(""What is your color?"")
    else:
        return right_girl.simple_query(""What is your color?"")"
6599090,What is the person to the right of the car holding?," # assumes one car and one person
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    person_patches = image_patch.find(""person"")
    if len(car_patches) == 0 or len(person_patches) == 0:
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    car_patch = car_patches[0]
    person_patch = person_patches[0]
    if person_patch.horizontal_center > car_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the right of the car holding?"")
    return image_patch.simple_query(""What is the person to the right of the car holding?"")"
1174895,What is the vehicle in the parking lot?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    return vehicle_patches[0].simple_query(""What is the vehicle in the parking lot?"")"
14755158,Who is the woman in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the woman in front of?"")"
18349161,Where does the cow that is standing stand?," # assumes only one cow
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    cow_patch = cow_patches[0]
    if cow_patch.verify_property(""cow"", ""standing""):
        return ""there""
    else:
        return ""here"""
7472884,On which side is the tap?," # left or right
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
111051831,On which side of the image is the cabinet?," # left or right
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?," # left or right
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?," # assumes one bag
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    man_patch = man_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""no""
    bag_patch = bag_patches[0]
    for man in man_patches:
        if man.horizontal_center > bag_patch.horizontal_center:
            return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?," # assumes only one artwork and one computer desk
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    if len(artwork_patches) == 0:
        return ""no""
    artwork_patch = artwork_patches[0]
    computer_desk_patches = image_patch.find(""computer desk"")
    if len(computer_desk_patches) == 0:
        return ""no""
    computer_desk_patch = computer_desk_patches[0]
    return bool_to_yesno(artwork_patch.verify_property(""artwork"", ""material"") == computer_desk_patch.verify_property(""computer desk"", ""material""))"
14298125,Who is playing Wii?," # assumes only one person playing
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")"
9382689,What's the floor made of?," # assumes one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        return image_patch.simple_query(""What's the floor made of?"")
    return floor_patches[0].simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the dress?"")"
15127108,Does the tea pot above the receipt look short and white?," # assumes only one tea pot and one receipt
    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    receipt_patches = image_patch.find(""receipt"")
    if len(tea_pot_patches) == 0 or len(receipt_patches) == 0:
        return ""no""
    tea_pot_patch = tea_pot_patches[0]
    receipt_patch = receipt_patches[0]
    if tea_pot_patch.vertical_center < receipt_patch.vertical_center:
        return bool_to_yesno(tea_pot_patch.verify_property(""tea pot"", ""short and white""))
    else:
        return ""no"""
15632653,Which room is it?," # assumes one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What color is the clothing?"") == ""black"":
            return clothing_patch.simple_query(""What kind of clothing is black?"")
    return image_patch.simple_query(""Which kind of clothing is black?"")"
490992,Is the fence on the left side or on the right of the picture?," # assumes only one fence
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?," # assumes only one mountain patch
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Do the mountains look rocky?"")
    return bool_to_yesno(mountain_patches[0].verify_property(""mountain"", ""rocky""))"
17573742,Is the woman to the right of the camera wearing a coat?," # assumes one woman and one camera
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    woman_patch = woman_patches[0]
    camera_patches = image_patch.find(""camera"")
    # Question assumes only one camera patch
    if len(camera_patches) == 0:
        return ""no""
    camera_patch = camera_patches[0]
    if woman_patch.horizontal_center > camera_patch.horizontal_center:
        return bool_to_yesno(woman_patch.verify_property(""woman"", ""coat""))
    return ""no"""
3395780,Is the vehicle to the left of the parking meter covered in rain?," # assumes one vehicle and one parking meter
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return ""no""
    vehicle_patch = vehicle_patches[0]
    parking_meter_patches = image_patch.find(""parking meter"")
    if len(parking_meter_patches) == 0:
        return ""no""
    parking_meter_patch = parking_meter_patches[0]
    if vehicle_patch.horizontal_center < parking_meter_patch.horizontal_center:
        return bool_to_yesno(image_patch.exists(""rain""))
    return ""no"""
1542668,Is there a black laptop or desk?," # black laptop or desk
    image_patch = ImagePatch(image)
    is_black_laptop = image_patch.exists(""black laptop"")
    is_black_desk = image_patch.exists(""black desk"")
    return bool_to_yesno(is_black_laptop or is_black_desk)"
1655442,What type of food is to the right of the waffles that are to the right of the person?," # assumes only one waffle patch
    image_patch = ImagePatch(image)
    waffle_patches = image_patch.find(""waffles"")
    # Question assumes only one waffle patch
    if len(waffle_patches) == 0:
        # If no waffle is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    waffle_patch = waffle_patches[0]
    # Question assumes only one waffle patch
    if waffle_patch.horizontal_center < image_patch.horizontal_center:
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center > waffle_patch.horizontal_center:
            return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")"
395290,How large is the bag?," # returns a string
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"") # crop would include the bag so keep it in the query"
16138893,Are there both motorcycles and cars in this scene?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing shorts?"")
    return image_patch.simple_query(""Who is wearing shorts?"")"
171032184,What hangs from the windows?," # assumes only one window
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?," # assumes only one spoon and one plate
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")"
8197176,What color is the jacket that the man wears?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return ""unknown""
    jacket_patch = jacket_patches[0]
    return jacket_patch.simple_query(""What color is the jacket that the man wears?"") # crop would include the man so keep it in the query"
3440931,What are that pieces of furniture called?," # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are that pieces of furniture called?"")"
337924,What is the fruit that is to the left of the chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?," # assumes only one table
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    table_patch = table_patches[0]
    return table_patch.simple_query(""What do you think are the bowls on?"") # crop would include the table so keep it in the query"
18330260,Is the sky above the trees open and clear?," # sky is above the trees
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky above the trees open and clear?"")"
14119691,Does the squirrel to the right of the stuffed dog look white?," # assumes only one dog and one squirrel
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""stuffed dog"")
    if len(dog_patches) == 0:
        return ""no""
    dog_patch = dog_patches[0]
    squirrel_patches = image_patch.find(""squirrel"")
    if len(squirrel_patches) == 0:
        return ""no""
    for squirrel_patch in squirrel_patches:
        if squirrel_patch.horizontal_center > dog_patch.horizontal_center:
            return bool_to_yesno(squirrel_patch.simple_query(""Is the squirrel white?"") == ""yes"")
    return ""no"""
18437694,Does the clock to the right of the statue have gold color and tiny size?," # assumes only one clock and one statue
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    for clock_patch in clock_patches:
        if clock_patch.horizontal_center > image_patch.horizontal_center:
            return bool_to_yesno(clock_patch.verify_property(""clock"", ""gold"") and clock_patch.verify_property(""clock"", ""tiny""))
    return ""no"""
1252960,Where was the photo taken?," # assumes one image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a frisbee on the grass?"")"
13180513,Are there either cakes or containers in the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?," # returns yes or no
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?," # assumes only one police officer
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    blue_car_patch = blue_car_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    vehicle_patch = vehicle_patches[0]
    police_officer_patches = image_patch.find(""police officer"")
    # Question assumes only one police officer patch
    if len(police_officer_patches) == 0:
        # If no police officer is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    police_officer_patch = police_officer_patches[0]
    if blue_car_patch.horizontal_center < vehicle_patch.horizontal_center and vehicle_patch.horizontal_center < police_officer_patch.horizontal_center:
        return ""behind""
    else:
        return ""in front of"""
5785831,What is in the glass?," # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the glass?"")"
19246241,Are there any brown benches or buckets?," # returns yes or no
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_brown_bucket = image_patch.exists(""brown bucket"")
    return bool_to_yesno(is_brown_bench or is_brown_bucket)"
3243803,"Where in the picture is the spoon, on the right or on the left?"," # assumes only one spoon
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
6952486,Does the shirt look white?," # crop would include the shirt so keep it in the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    return shirt_patches[0].simple_query(""Does the shirt look white?"")"
17401425,Is there a bag that is not brown?," # bag is a general term, so query directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bag"") and not image_patch.verify_property(""bag"", ""brown""))"
481240,"Which kind of furniture is large, the shelf or the cupboard?"," # assumes only one shelf and one cupboard
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    if len(shelf_patches) == 0 or len(cupboard_patches) == 0:
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    shelf = shelf_patches[0]
    cupboard = cupboard_patches[0]
    if shelf.width > cupboard.width:
        return ""shelf""
    else:
        return ""cupboard"""
8531943,Are there any screens or bags?," # returns yes or no
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)"
1969545,What is she wearing?," # assumes one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    return woman_patches[0].simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?"," # assumes only one freezer and one ice maker
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one freezer and one ice maker
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    freezer_patches = [patch for patch in appliance_patches if patch.simple_query(""Is the appliance a freezer?"") == ""yes""]
    ice_maker_patches = [patch for patch in appliance_patches if patch.simple_query(""Is the appliance an ice maker?"") == ""yes""]
    if len(freezer_patches) == 0 or len(ice_maker_patches) == 0:
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    freezer = freezer_patches[0]
    ice_maker = ice_maker_patches[0]
    if freezer.verify_property(""white""):
        return ice_maker.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    else:
        return freezer.simple_query(""Which appliance is not white, the freezer or the ice maker?"")"
1051870,Are there chairs or tables that are not green?," # assumes only one chair or table
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    table_patches = image_patch.find(""table"")
    # Question assumes only one chair or table patch
    if len(chair_patches) == 0 and len(table_patches) == 0:
        # If no chair or table is found, query the image directly
        return image_patch.simple_query(""Are there chairs or tables that are not green?"")
    for patch in chair_patches + table_patches:
        if patch.simple_query(""Is the chair/table green?"") == ""no"":
            return ""yes""
    return ""no"""
1366363,Does the taxi have a different color than the truck?," # assumes only one taxi and one truck
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    truck_patches = image_patch.find(""truck"")
    if len(taxi_patches) == 0 or len(truck_patches) == 0:
        return ""no""
    taxi_patch = taxi_patches[0]
    truck_patch = truck_patches[0]
    return bool_to_yesno(taxi_patch.simple_query(""What color is the taxi?"") != truck_patch.simple_query(""What color is the truck?""))"
5460839,In which part of the image is the dog?," # assumes only one dog
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    if len(dog_patches) == 0:
        return image_patch.simple_query(""In which part of the image is the dog?"")
    dog_patch = dog_patches[0]
    if dog_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif dog_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        if dog_patch.vertical_center < image_patch.vertical_center:
            return ""bottom""
        else:
            return ""top"""
18899476,What type of vegetable is to the right of the rice that is on the plate?," # assumes one plate
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > image_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    return vegetable_patches[0].simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")"
8606903,What food item is not wide?," # assumes only one food item
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food item"")
    if len(food_patches) == 0:
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food item"", ""wide""):
            return food_patch.simple_query(""What food item is not wide?"")
    return image_patch.simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?," # returns yes or no
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?," # assumes one elephant and one pond
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    pond_patches = image_patch.find(""pond"")
    if len(elephant_patches) == 0 or len(pond_patches) == 0:
        return ""no""
    elephant_patch = elephant_patches[0]
    pond_patch = pond_patches[0]
    return bool_to_yesno((abs(elephant_patch.horizontal_center - pond_patch.horizontal_center) < 100) and (abs(elephant_patch.vertical_center - pond_patch.vertical_center) < 100))"
1575941,Which place is it?," # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?," # assumes one floor and one desk
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one floor and one desk patch
    if len(floor_patches) == 0 or len(desk_patches) == 0:
        # If no floor or desk is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    floor_patch = floor_patches[0]
    desk_patch = desk_patches[0]
    return floor_patch.simple_query(""What is the color of the floor that the desk is on top of?"") # crop would include the desk so keep it in the query"
16654241,Is the TV on the left or on the right?," # assumes only one TV
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    if len(tv_patches) == 0:
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    tv_patch = tv_patches[0]
    if tv_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
18685233,Which kind of vehicle is to the left of the flags?," # assumes only one vehicle and one flag
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    flag_patches = image_patch.find(""flag"")
    if len(vehicle_patches) == 0 or len(flag_patches) == 0:
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    vehicle_patch = vehicle_patches[0]
    flag_patch = flag_patches[0]
    if vehicle_patch.horizontal_center < flag_patch.horizontal_center:
        return vehicle_patch.simple_query(""What kind of vehicle is this?"")
    else:
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")"
9796068,Are there both a fence and a sheep in the picture?," # assumes one patch per object
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_blanket = image_patch.exists(""blue blanket"")
    is_blue_towel = image_patch.exists(""blue towel"")
    return bool_to_yesno(is_blue_blanket or is_blue_towel)"
1110330,Is the pillow to the left of the frog cream colored or green?," # Pillow is cream colored, frog is green
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    for pillow_patch in pillow_patches:
        frog_patches = image_patch.find(""frog"")
        # Question assumes only one frog patch
        if len(frog_patches) == 0:
            # If no frog is found, query the image directly
            return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
        if pillow_patch.horizontal_center < frog_patches[0].horizontal_center:
            return pillow_patch.best_text_match([""cream colored"", ""green""])
    return ""no"""
511507,Is the antenna on the aircraft?," # assumes only one aircraft
    image_patch = ImagePatch(image)
    antenna_patches = image_patch.find(""antenna"")
    if len(antenna_patches) == 0:
        return ""no""
    for antenna_patch in antenna_patches:
        return bool_to_yesno(antenna_patch.verify_property(""antenna"", ""on aircraft""))"
10464417,"In which part is the tent, the top or the bottom?"," # assumes only one tent patch
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
10816730,Is the tree in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tree in front of the building?"")"
18766115,Who is walking?," # assumes only one person walking
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is walking?"")"
10625851,Are there either any fruits or plates in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return ""no""
    return bool_to_yesno(image_patch.exists(""coat""))"
4194722,Is the man wearing a helmet?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""helmet""))"
414248,"What animal are the women near the ocean riding, a pig or a horse?"," # assumes only one woman
    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(women_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")
    woman_patch = women_patches[0]
    animal_patches = woman_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""horse""
    animal_patch = animal_patches[0]
    if animal_patch.exists(""horse""):
        return ""horse""
    else:
        return ""pig"""
683094,Who is wearing the shirt?," # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Who is wearing the shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")"
12140603,What device is to the left of the headphones?," # assumes only one device and one headphones
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    headphones_patches = image_patch.find(""headphones"")
    if len(headphones_patches) == 0:
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for device_patch in device_patches:
        for headphones_patch in headphones_patches:
            if device_patch.horizontal_center < headphones_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the headphones?"")
    return image_patch.simple_query(""What device is to the left of the headphones?"")"
5575209,The flowers are where?," # assumes only one flower patch
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flowers"")
    if len(flower_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    flower_patch = flower_patches[0]
    if flower_patch.lower < image_patch.lower and flower_patch.upper > image_patch.lower:
        return ""middle""
    elif flower_patch.lower < image_patch.lower and flower_patch.upper > image_patch.lower:
        return ""bottom""
    else:
        return ""top"""
8773829,Which kind of furniture is made of wood?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    return furniture_patches[0].simple_query(""Which kind of furniture is made of wood?"")"
12636428,Which kind of animal is black?," # assumes only one black animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What kind of animal is black?"") == ""black"":
            return animal_patch.simple_query(""What kind of animal is black?"")
    return image_patch.simple_query(""Which kind of animal is black?"")"
1020584,What animals is the car behind of?," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What animals is the car behind of?"")
    car_patch = car_patches[0]
    return "", "".join([animal.simple_query(""What kind of animal is this?"") for animal in car_patch.find(""animal"")])"
11879418,The man is standing on what?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is standing on what?"")"
12334288,What device is to the left of the cabinet?," # assumes one cabinet
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the cabinet?"")
    cabinet_patch = cabinet_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""What device is to the left of the cabinet?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < cabinet_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the left of the cabinet?"")
    return image_patch.simple_query(""What device is to the left of the cabinet?"")"
691610,Is the monitor to the left of a book?," # assumes only one monitor and one book
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    book_patches = image_patch.find(""book"")
    if len(monitor_patches) == 0 or len(book_patches) == 0:
        return ""no""
    monitor_patch = monitor_patches[0]
    book_patch = book_patches[0]
    return bool_to_yesno(monitor_patch.horizontal_center < book_patch.horizontal_center)"
7552714,Is the color of the jacket black?," # assumes one jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    if len(jacket_patches) == 0:
        return ""no""
    return bool_to_yesno(jacket_patches[0].verify_property(""jacket"", ""black""))"
8492422,Is the man to the left of a boy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man to the left of a boy?"")"
13248061,What type of device is to the left of the keyboard in the bottom of the image?," # bottom of the image
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    keyboard_patch = keyboard_patches[0]
    if keyboard_patch.lower > image_patch.height / 2:
        # bottom of the image
        device_patches = image_patch.find(""device"")
        # Question assumes only one device patch
        if len(device_patches) == 0:
            # If no device is found, query the image directly
            return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < keyboard_patch.horizontal_center:
                return device_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")"
18252454,What is common to the roof and the sky?," # assumes only one roof and one sky
    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    if len(roof_patches) == 0:
        return image_patch.simple_query(""What is common to the roof and the sky?"")
    sky_patches = image_patch.find(""sky"")
    if len(sky_patches) == 0:
        return image_patch.simple_query(""What is common to the roof and the sky?"")
    roof_patch = roof_patches[0]
    sky_patch = sky_patches[0]
    common_properties = [""blue"", ""cloudy"", ""sunny""]
    for property in common_properties:
        if roof_patch.verify_property(""roof"", property) and sky_patch.verify_property(""sky"", property):
            return property
    return ""unknown"""
14443687,What do the cat and the book have in common?," # assumes only one cat and one book
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    # Question assumes only one cat and one book patch
    if len(cat_patches) == 0 or len(book_patches) == 0:
        # If no cat or book is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    cat_patch = cat_patches[0]
    book_patch = book_patches[0]
    common_properties = set()
    for property in [""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""black"", ""white""]:
        if cat_patch.verify_property(""cat"", property) and book_patch.verify_property(""book"", property):
            common_properties.add(property)
    if len(common_properties) == 0:
        return ""nothing""
    return "", "".join(common_properties)"
14571335,Who is wearing trousers?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing trousers?"")"
474885,Who wears a cap?," # assumes only one cap
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    if len(cap_patches) == 0:
        return image_patch.simple_query(""Who wears a cap?"")
    return cap_patches[0].simple_query(""Who wears a cap?"")"
141013015,"What color is the toilet, brown or white?"," # assumes only one toilet
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].best_text_match([""brown"", ""white""])"
5515816,On which side of the image is the fence?," # left or right
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16774696,What is the surfer wearing?," # assumes only one surfer
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the surfer wearing?"")"
13701956,Is there any grass or sand that is not dry?," # assumes only one image patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    sand_patches = image_patch.find(""sand"")
    for grass_patch in grass_patches:
        if not grass_patch.verify_property(""grass"", ""dry""):
            return ""yes""
    for sand_patch in sand_patches:
        if not sand_patch.verify_property(""sand"", ""dry""):
            return ""yes""
    return ""no"""
11606870,Is there a cow or a zebra in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cow"") or image_patch.exists(""zebra""))"
1589297,Does the fire hydrant look modern?," # assumes one fire hydrant
    image_patch = ImagePatch(image)
    fire_hydrant_patches = image_patch.find(""fire hydrant"")
    if len(fire_hydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    return bool_to_yesno(fire_hydrant_patches[0].verify_property(""fire hydrant"", ""modern""))"
942308,Is the cup empty or full?," # assumes only one cup
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        return image_patch.simple_query(""Is the cup empty or full?"")
    cup_patch = cup_patches[0]
    return cup_patch.simple_query(""Is the cup empty or full?"")"
15815976,Is the woman wearing a scarf?," # crop would include the scarf so keep it in the query
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    return woman_patches[0].simple_query(""Is the woman wearing a scarf?"")"
3193231,Do you see either parking meters or brooms in the picture?," # parking meter or broom
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)"
314218,Is the sign in front of the bridge small and white?," # contains a relation (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")"
18130465,Does the umbrella that is not dry look orange and open?," # assumes only one umbrella patch
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    for umbrella_patch in umbrella_patches:
        if not umbrella_patch.verify_property(""umbrella"", ""dry""):
            return bool_to_yesno(umbrella_patch.best_text_match([""orange"", ""open""]))
    return ""no"""
7920817,What's in the paper?," # paper is a container
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?," # assumes only one bun
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    return bun_patches[0].simple_query(""What is on the bun in the top?"")"
16929928,What is the fence made of?," # assumes one fence patch
    image_patch = ImagePatch(image)
    return image_patch.find(""fence"")[0].simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?," # lady is a more general term than woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    woman_patch = woman_patches[0]
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        return ""left""
    lady_patch = lady_patches[0]
    if woman_patch.horizontal_center < lady_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17993299,Is the horse to the left of a car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the horse to the left of a car?"")"
8717022,Is the small animal to the left of the vehicle that looks silver?," # assumes only one patch of each object
    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        # If no small animal is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    for small_animal_patch in small_animal_patches:
        vehicle_patches = image_patch.find(""vehicle that looks silver"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            return ""no""
        for vehicle_patch in vehicle_patches:
            if small_animal_patch.horizontal_center < vehicle_patch.horizontal_center:
                return ""yes""
    return ""no"""
2998707,Which color is the chair that is on the right?," # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    right_chair_patch = chair_patches[0]
    if right_chair_patch.horizontal_center > image_patch.horizontal_center:
        return right_chair_patch.simple_query(""Which color is the chair that is on the right?"")
    return image_patch.simple_query(""Which color is the chair that is on the right?"")"
171017786,Do you see any cups to the left of the monitor?," # assumes only one monitor
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    monitor_patch = monitor_patches[0]
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        return ""no""
    for cup_patch in cup_patches:
        if cup_patch.horizontal_center < monitor_patch.horizontal_center:
            return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?," # assumes only one man and one girl
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    glasses_patch = glasses_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    girl_patch = girl_patches[0]
    if girl_patch.horizontal_center > glasses_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1941568,What animal is in the water?," # assumes only one animal
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")"
17577787,Does the man's hair look short and white?," # crop would include the hair so keep it in the query
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    return man_patches[0].simple_query(""Does the man's hair look short and white?"")"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")"
9825336,Which kind of furniture is the mat lying on?," # assumes only one mat
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    if len(mat_patches) == 0:
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    return mat_patches[0].simple_query(""Which kind of furniture is the mat lying on?"")"
11222427,Do you see fences or elephants?," # assumes only one image patch
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?"," # assumes only one bed and one entertainment center
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    entertainment_center_patches = image_patch.find(""entertainment center"")
    # Question assumes only one bed and one entertainment center patch
    if len(bed_patches) == 0 or len(entertainment_center_patches) == 0:
        # If no bed or entertainment center is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    bed_patch = bed_patches[0]
    entertainment_center_patch = entertainment_center_patches[0]
    if bed_patch.simple_query(""Is the bed white?"") == ""yes"":
        return entertainment_center_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    else:
        return bed_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")"
1152020,Do you see either any plate or tomato that are red?," # plate or tomato
    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""plate"") and image_patch.verify_property(""plate"", ""red"")
    is_red_tomato = image_patch.exists(""tomato"") and image_patch.verify_property(""tomato"", ""red"")
    return bool_to_yesno(is_red_plate or is_red_tomato)"
8961520,Who is surfing?," # assumes only one person is surfing
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"")"
18106780,Which room is it?," # assumes one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
1892692,What color do you think the bowl that is to the right of the person is?," # assumes one person and one bowl
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    person_patch = person_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > person_patch.horizontal_center:
            return bowl_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")"
6952082,What color is the hair?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"")"
3768067,What color is the pot the statue is to the right of?," # assumes only one pot
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    for statue_patch in statue_patches:
        pot_patches = image_patch.find(""pot"")
        for pot_patch in pot_patches:
            if pot_patch.horizontal_center > statue_patch.horizontal_center:
                return pot_patch.simple_query(""What color is the pot the statue is to the right of?"")
    # If no pot is to the right of the statue, query the image directly
    return image_patch.simple_query(""What color is the pot the statue is to the right of?"")"
17866761,Is the clear glass on the shelf of the table?," # assumes one table and one shelf
    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    clear_glass_patch = clear_glass_patches[0]
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        return ""no""
    shelf_patch = shelf_patches[0]
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        return ""no""
    table_patch = table_patches[0]
    return bool_to_yesno(shelf_patch.left < clear_glass_patch.horizontal_center and clear_glass_patch.horizontal_center < shelf_patch.right and table_patch.left < shelf_patch.lower and shelf_patch.upper < table_patch.upper)"
798020,Does the skirt look black or yellow?," # crop would include the skirt so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the skirt look black or yellow?"")"
828981,How old is he?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How old is he?"")"
7236463,Of what color is the book?," # assumes only one book
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""Of what color is the book?"")"
6376684,What color is the car to the left of the train car?," # assumes only one train car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    for car_patch in car_patches:
        train_car_patches = image_patch.find(""train car"")
        # Question assumes only one train car patch
        if len(train_car_patches) == 0:
            return image_patch.simple_query(""What color is the car to the left of the train car?"")
        train_car_patch = train_car_patches[0]
        if train_car_patch.horizontal_center > car_patch.horizontal_center:
            return car_patch.simple_query(""What color is the car to the left of the train car?"") # crop would include the train car so keep it in the query
    # If no car is to the left of the train car, query the image directly
    return image_patch.simple_query(""What color is the car to the left of the train car?"")"
786798,Is this a photo of a beach?," # image is a PIL Image object
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""beach""))"
19836753,What vehicles are to the left of the fence?," # assumes only one fence
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one fence patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    fence_patch = fence_patches[0]
    result = []
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
            result.append(vehicle_patch.simple_query(""What vehicle is to the left of the fence?""))
    return "", "".join(result)"
15284615,Who is playing?," # assumes only one person playing
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    is_walking = (man_patch.simple_query(""Is the man walking?"") == ""yes"")
    is_holding_remote_control = (man_patch.simple_query(""Is the man holding a remote control?"") == ""yes"")
    return bool_to_yesno(is_walking and is_holding_remote_control)"
17746396,What's the boy wearing?," # assumes only one boy
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        return image_patch.simple_query(""What's the boy wearing?"")
    return boy_patches[0].simple_query(""What's the boy wearing?"")"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?," # assumes only one tap, bottle, and mug
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    tap_patch = tap_patches[0]
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.horizontal_center < tap_patch.horizontal_center:
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    mug_patches = image_patch.find(""mug"")
    # Question assumes only one mug patch
    if len(mug_patches) == 0:
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    for mug_patch in mug_patches:
        if mug_patch.horizontal_center > bottle_patch.horizontal_center:
            return ""yes""
    return ""no"""
13826837,What color is the door?," # door is a common object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?," # field is a common name for a crop of grass
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse""))"
2964690,What is in front of the mountains?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?," # assumes one truck
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    truck_patch = truck_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
            return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?," # assumes only one scarf patch
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    scarf_patch = scarf_patches[0]
    is_long = scarf_patch.simple_query(""Is the scarf long?"")
    is_blue = scarf_patch.simple_query(""Is the scarf blue?"")
    return bool_to_yesno(is_long and is_blue)"
1189986,Is the man behind the elephant holding a surfboard?," # assumes one man and one elephant
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one man and one elephant patch
    if len(man_patches) == 0 or len(elephant_patches) == 0:
        # If no man or elephant is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    man_patch = man_patches[0]
    elephant_patch = elephant_patches[0]
    if man_patch.horizontal_center < elephant_patch.horizontal_center and man_patch.simple_query(""Is the man holding a surfboard?"") == ""yes"":
        return ""yes""
    return ""no"""
8792466,Which color is the closed window?," # assumes only one window
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    if len(window_patches) == 0:
        return image_patch.simple_query(""Which color is the closed window?"")
    window_patch = window_patches[0]
    return window_patch.simple_query(""Which color is the closed window?"")"
10188423,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?," # assumes one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    girl_patch = girl_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    if len(vegetable_patches) == 0:
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > girl_patch.horizontal_center:
            return vegetable_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")"
4929965,Is there a black racket or clock in the picture?," # assumes only one black racket or clock
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_clock = image_patch.exists(""clock"")
    return bool_to_yesno(is_black_racket or is_clock)"
4782038,What kind of animal is white?," # assumes only one white animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal white?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is white?"")
    return ""no animal found"""
14658201,Is the sheep that looks white and brown made of plastic?," # assumes only one sheep
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    if len(sheep_patches) == 0:
        return ""no""
    sheep_patch = sheep_patches[0]
    is_plastic = (sheep_patch.simple_query(""Is the sheep made of plastic?"") == ""yes"")
    is_white_and_brown = (sheep_patch.simple_query(""Is the sheep white and brown?"") == ""yes"")
    return bool_to_yesno(is_plastic and is_white_and_brown)"
1441865,Do you see any boxes on the table under the grill?," # assumes one table and one grill
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    table_patch = table_patches[0]
    grill_patches = image_patch.find(""grill"")
    # Question assumes only one grill patch
    if len(grill_patches) == 0:
        return ""no""
    grill_patch = grill_patches[0]
    if table_patch.lower > grill_patch.lower:
        return ""no""
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        return ""no""
    return ""yes"""
1424926,What is the tag on?," # assumes only one tag
    image_patch = ImagePatch(image)
    tag_patches = image_patch.find(""tag"")
    if len(tag_patches) == 0:
        return image_patch.simple_query(""What is the tag on?"")
    return tag_patches[0].simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?," # assumes one person and one laptop
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    person_patch = person_patches[0]
    laptop_patches = image_patch.find(""laptop"")
    if len(laptop_patches) == 0:
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    laptop_patch = laptop_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > person_patch.horizontal_center and furniture_patch.horizontal_center < laptop_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")"
3635257,Is there any freezer in this photo?," # freezer is a rare object
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer""))"
8821026,Are there either any bags or chairs?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?," # bus driver is a common term
    image_patch = ImagePatch(image)
    bus_driver_patches = image_patch.find(""bus driver"")
    # Question assumes only one bus driver patch
    if len(bus_driver_patches) == 0:
        # If no bus driver is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    return bus_driver_patches[0].simple_query(""In what vehicle is the bus driver?"")"
17204662,What is that man in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that man in front of?"")"
380866,Are there any girls or radios?," # returns yes or no
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The girl is sitting on what?"")"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?," # assumes only one pillow
    image_patch = ImagePatch(image)
    white_lamp_patches = image_patch.find(""white lamp"")
    # Question assumes only one white_lamp patch
    if len(white_lamp_patches) == 0:
        # If no white_lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    white_lamp_patch = white_lamp_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    pillow_patch = pillow_patches[0]
    if white_lamp_patch.horizontal_center < pillow_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16545552,What color do you think is the vehicle the girl is washing?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    vehicle_patch = vehicle_patches[0]
    return vehicle_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")"
16719872,Are there motorcycles to the left of the man who is wearing a hat?," # assumes one man and one hat
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""no""
    hat_patch = hat_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        return ""no""
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.horizontal_center < man_patch.horizontal_center and motorcycle_patch.horizontal_center > hat_patch.horizontal_center:
            return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?," # assumes one garbage can and one person pushing a stroller
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    person_patches = image_patch.find(""person pushing a stroller"")
    if len(garbage_can_patches) == 0 or len(person_patches) == 0:
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    garbage_can_patch = garbage_can_patches[0]
    person_patch = person_patches[0]
    if garbage_can_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13711589,What do the truck and the street sign have in common?," # assumes only one truck and one street sign
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    truck_patch = truck_patches[0]
    street_sign_patches = image_patch.find(""street sign"")
    if len(street_sign_patches) == 0:
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    street_sign_patch = street_sign_patches[0]
    common_properties = truck_patch.verify_property(""truck"", ""color"") and truck_patch.verify_property(""truck"", ""material"") and street_sign_patch.verify_property(""street sign"", ""color"") and street_sign_patch.verify_property(""street sign"", ""material"")
    if common_properties:
        return ""color and material""
    else:
        return ""nothing"""
10227573,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is the man leading?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the man leading?"")
    # If no animal is in front of the man, query the image directly
    return image_patch.simple_query(""What animal is the man leading?"")"
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")"
7190226,Does the puddle look large?," # assumes only one puddle
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Does the puddle look large?""))"
11675152,Who throws the frisbee?," # assumes only one frisbee
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who throws the frisbee?"")"
8723676,Which kind of animal is the water on?," # water is on the ground
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is the water on?"")"
61046657,Do you think that traffic light is tall?," # assumes only one traffic light
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Do you think that traffic light is tall?""))"
9581034,On which side is the wine glass?," # assumes only one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?," # assumes only one pizza
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        if napkin_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
18535266,Is the face mask made of the same material as the mask?," # assumes only one face mask and one mask
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    mask_patches = image_patch.find(""mask"")
    if len(face_mask_patches) == 0 or len(mask_patches) == 0:
        return ""no""
    face_mask_patch = face_mask_patches[0]
    mask_patch = mask_patches[0]
    return bool_to_yesno(face_mask_patch.verify_property(""face mask"", ""same material as"") and face_mask_patch.verify_property(""face mask"", ""same material as mask""))"
11254215,What is the tan item of furniture?," # tan is a color
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tan item of furniture?"")"
1852010,How is the device to the right of the device on the desk called?," # assumes only one device on the desk
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    device_patch = device_patches[0]
    other_device_patches = image_patch.find(""device"")
    # Question assumes only one other device patch
    if len(other_device_patches) == 0:
        return ""no device""
    other_device_patch = other_device_patches[0]
    if other_device_patch.horizontal_center > device_patch.horizontal_center:
        return device_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    return ""no device"""
1587534,Is the device on the floor black and large?," # assumes only one device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    device_patch = device_patches[0]
    if device_patch.lower > image_patch.upper / 2 and device_patch.simple_query(""Is the device black and large?"") == ""yes"":
        return ""yes""
    return ""no"""
8470757,Are there any surfboards?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))"
11273949,Is the shirt white?," # crop would include the shirt so keep it in the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return shirt_patches[0].simple_query(""Is the shirt white?"")"
7475238,What's the airplane in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where does the horse to the right of the hose run?"")"
3932624,Are there either any gray chairs or laptops?," # returns yes or no
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?," # assumes only one water patch
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water brown or blue?"")
    return water_patches[0].best_text_match([""brown"", ""blue""])"
9256263,Which kind of furniture is brown?," # assumes only one brown furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture brown?"") == ""yes"":
            return furniture_patch.simple_query(""Which kind of furniture is brown?"")
    return image_patch.simple_query(""Which kind of furniture is brown?"")"
18719769,Is the man wearing glasses?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    return bool_to_yesno(man_patches[0].verify_property(""man"", ""glasses""))"
18342439,What animal is white?," # assumes only one white animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal white?"") == ""yes"":
            return animal_patch.simple_query(""What animal is white?"")
    return ""no animal is white"""
8665725,Who is wearing a coat?," # assumes one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a coat?"")"
5440407,What vehicle isn't black?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What vehicle isn't black?"")
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.simple_query(""Is the vehicle black?"") == ""yes"":
        return vehicle_patch.simple_query(""What vehicle isn't black?"")
    return vehicle_patch.simple_query(""What vehicle is this?"")"
4104707,On which side of the picture is the oven?," # left or right
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3126763,What is common to the logo and the letter?," # assumes only one logo and one letter
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    letter_patches = image_patch.find(""letter"")
    if len(logo_patches) == 0 or len(letter_patches) == 0:
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    logo_patch = logo_patches[0]
    letter_patch = letter_patches[0]
    common_properties = [""red"", ""blue"", ""green"", ""yellow"", ""orange"", ""purple"", ""black"", ""white""]
    for property in common_properties:
        if logo_patch.verify_property(""logo"", property) and letter_patch.verify_property(""letter"", property):
            return property
    return ""unknown"""
18640925,What animal is in the water the man is walking through?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    water_patches = image_patch.find(""water"")
    if len(water_patches) == 0:
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    water_patch = water_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if (animal_patch.horizontal_center > man_patch.horizontal_center and
            animal_patch.horizontal_center < water_patch.horizontal_center and
            animal_patch.lower < water_patch.upper and
            animal_patch.upper > water_patch.lower):
            return animal_patch.simple_query(""What animal is in the water the man is walking through?"")
    return image_patch.simple_query(""What animal is in the water the man is walking through?"")"
125488,What is the man wearing?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man wearing?"")
    return man_patches[0].simple_query(""What is the man wearing?"")"
5925435,What is the sidewalk made of?," # sidewalk is a common object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?," # assumes one coat
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].best_text_match([""stripes"", ""polka dots"", ""plaid"", ""solid""]) # crop would include the coat so keep it in the query"
4819547,What kind of furniture is white?," # assumes only one white furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture white?"") == ""yes"":
            return furniture_patch.simple_query(""What kind of furniture is white?"")
    return image_patch.simple_query(""What kind of furniture is white?"")"
14263174,What color do you think the chair that is to the right of the other chair is?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?," # assumes one train patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    man_patch = man_patches[0]
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    train_patch = train_patches[0]
    if train_patch.simple_query(""Is the train green?"") != ""green"":
        return ""no""
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center < man_patch.horizontal_center:
        return ""no""
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0"
9239936,Do the cows near the trees have white color?," # assumes only one cow and one tree
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one cow and one tree patch
    if len(cow_patches) == 0 or len(tree_patches) == 0:
        # If no cow or tree is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    cow_patch = cow_patches[0]
    tree_patch = tree_patches[0]
    if (cow_patch.horizontal_center < tree_patch.horizontal_center and
        cow_patch.horizontal_center + cow_patch.width / 2 > tree_patch.horizontal_center and
        cow_patch.simple_query(""Do you see any trees?"") == ""yes""):
        return bool_to_yesno(cow_patch.verify_property(""cow"", ""white""))
    return ""no"""
1885178,"In which part of the image is the remote control, the bottom or the top?"," # assumes only one remote control
    image_patch = ImagePatch(image)
    if len(image_patch.find(""remote control"")) == 0:
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    remote_control_patch = image_patch.find(""remote control"")[0]
    if remote_control_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12341631,Which color is the bag in the top part?," # bag is in the top part
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    if bag_patch.vertical_center < image_patch.vertical_center:
        return bag_patch.simple_query(""Which color is the bag?"")
    return bag_patch.simple_query(""Which color is the bag in the top part?"")"
5532909,"What is the weather like, cloudless or maybe rainy?"," # cloudless or rainy
    image_patch = ImagePatch(image)
    is_cloudless = image_patch.exists(""cloudless"")
    is_rainy = image_patch.exists(""rainy"")
    return ""cloudless"" if is_cloudless else ""rainy"""
2618222,What is connected to the open laptop?," # assumes only one laptop
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is connected to the open laptop?"")"
3252220,Of which color is the shirt the man wears?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""Of which color is the shirt the man wears?"")"
8947801,What is in the vase?," # assumes one vase
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the vase?"")"
10841562,Is the color of the pants the same as the shorts?," # returns yes or no
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    pants_color = pants_patches[0].simple_query(""What color are the pants?"")
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    shorts_color = shorts_patches[0].simple_query(""What color are the shorts?"")
    return bool_to_yesno(pants_color == shorts_color)"
15511838,What kind of furniture is to the left of the bucket?," # assumes only one bucket
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    for bucket_patch in bucket_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    # If no furniture is to the left of the bucket, query the image directly
    return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")"
14495306,Is there any racket to the right of the person that the woman is to the left of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")"
14841932,Do the tiles have square shape and black color?," # assumes only one tile patch
    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    return bool_to_yesno(tile_patches[0].verify_property(""tile"", ""square"") and tile_patches[0].verify_property(""tile"", ""black""))"
41029381,What is the vehicle that is the same color as the shirt called?," # assumes one vehicle and one shirt
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    shirt_patches = image_patch.find(""shirt"")
    if len(vehicle_patches) == 0 or len(shirt_patches) == 0:
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    vehicle_patch = vehicle_patches[0]
    shirt_patch = shirt_patches[0]
    if vehicle_patch.simple_query(""Is the vehicle the same color as the shirt?"") == ""yes"":
        return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    return vehicle_patches[0].simple_query(""What is the vehicle that is the same color as the shirt called?"")"
161027428,Are there both windows and doors in the image?," # assumes only one window and one door
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
16478246,Does the pillow to the right of the man have green color and large size?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        return ""no""
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""))
    return ""no"""
9450308,Is the happy person wearing a hat?," # assumes only one happy person
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy"")
    if len(happy_patches) == 0:
        return ""no""
    happy_patch = happy_patches[0]
    return bool_to_yesno(happy_patch.verify_property(""happy"", ""hat""))"
11850389,What place is this?," # assumes one image patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"") # crop would include the place so keep it in the query"
17250452,What kind of appliance is on the right of the drawer?," # assumes only one appliance and one drawer
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    if len(appliance_patches) == 0:
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    appliance_patch = appliance_patches[0]
    drawer_patches = image_patch.find(""drawer"")
    if len(drawer_patches) == 0:
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    drawer_patch = drawer_patches[0]
    if appliance_patch.horizontal_center > drawer_patch.horizontal_center:
        return appliance_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")"
14857961,Is the lady to the right of a woman?," # lady and woman are the same object
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    for lady_patch in lady_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center < lady_patch.horizontal_center:
                return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?," # assumes only one pan on the right
    image_patch = ImagePatch(image)
    cooking_utensils_patches = image_patch.find(""cooking utensils"")
    # Question assumes only one cooking utensils patch
    if len(cooking_utensils_patches) == 0:
        # If no cooking utensils are found, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    cooking_utensils_patch = cooking_utensils_patches[0]
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center < image_patch.horizontal_center:
        return cooking_utensils_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    for cooking_utensils in cooking_utensils_patches:
        if cooking_utensils.horizontal_center < pan_patch.horizontal_center:
            return cooking_utensils.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return cooking_utensils_patches[0].simple_query(""What cooking utensils are to the left of the pan on the right side?"")"
9745131,Which color is the truck that is to the left of the lamps?," # assumes only one truck and one lamp
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    if len(truck_patches) == 0:
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    truck_patch = truck_patches[0]
    lamp_patches = image_patch.find(""lamps"")
    if len(lamp_patches) == 0:
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    lamp_patch = lamp_patches[0]
    if truck_patch.horizontal_center < lamp_patch.horizontal_center:
        return truck_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    return lamp_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")"
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?," # assumes only one motorcycle
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    bird_patch = bird_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    motorcycle_patch = motorcycle_patches[0]
    if bird_patch.horizontal_center < image_patch.horizontal_center:
        return bird_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""black"", ""white""])
    else:
        return ""no"""
867818,Is the man on the skateboard?," # assumes one man and one skateboard
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    skateboard_patches = image_patch.find(""skateboard"")
    if len(skateboard_patches) == 0:
        return ""no""
    skateboard_patch = skateboard_patches[0]
    return bool_to_yesno(man_patch.horizontal_center > skateboard_patch.horizontal_center and man_patch.horizontal_center + man_patch.width/2 < skateboard_patch.horizontal_center + skateboard_patch.width/2)"
13896221,What is on the table?," # assumes only one table
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
1964517,What is the food that is above the white paper?," # assumes only one white paper patch
    image_patch = ImagePatch(image)
    white_paper_patches = image_patch.find(""white paper"")
    if len(white_paper_patches) == 0:
        return image_patch.simple_query(""What is the food that is above the white paper?"")
    white_paper_patch = white_paper_patches[0]
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        return image_patch.simple_query(""What is the food that is above the white paper?"")
    for food_patch in food_patches:
        if food_patch.vertical_center < white_paper_patch.vertical_center:
            return food_patch.simple_query(""What is the food that is above the white paper?"")
    return image_patch.simple_query(""What is the food that is above the white paper?"")"
15705231,Is the shelf to the left of a cabinet?," # assumes only one shelf and one cabinet
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if shelf_patch.horizontal_center < cabinet_patch.horizontal_center:
                return ""yes""
    return ""no"""
15693846,Is the motorcycle parked on the grass?," # assumes only one motorcycle
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    if len(motorcycle_patches) == 0:
        return ""no""
    motorcycle_patch = motorcycle_patches[0]
    return bool_to_yesno(motorcycle_patch.verify_property(""motorcycle"", ""parked on grass""))"
13872995,Who is jumping?," # assumes only one jumper
    image_patch = ImagePatch(image)
    jumper_patches = image_patch.find(""jumper"")
    if len(jumper_patches) == 0:
        return image_patch.simple_query(""Who is jumping?"")
    return jumper_patches[0].simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""Is this a dog or a cat?"")
    animal_patch = animal_patches[0]
    return animal_patch.best_text_match([""dog"", ""cat""])"
12584623,What is the person with the bag wearing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    person_patch = person_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return person_patch.simple_query(""What is the person with the bag wearing?"")
    bag_patch = bag_patches[0]
    if person_patch.horizontal_center < bag_patch.horizontal_center:
        return person_patch.simple_query(""What is the person with the bag wearing?"")
    return bag_patch.simple_query(""What is the person with the bag wearing?"")"
7202064,"What is this, a bus or a truck?"," # bus or truck
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_truck = image_patch.exists(""truck"")
    if is_bus and is_truck:
        return ""bus""
    elif is_bus:
        return ""bus""
    elif is_truck:
        return ""truck""
    else:
        return ""neither"""
16542208,Do you see either any beds or blankets there?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)"
11700224,Do you see both lettuce and salad?," # assumes only one lettuce and one salad
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)"
1067136,Is the ball on the tree?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball on the tree?"")"
364079,What kind of furniture is to the right of the blanket?," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for blanket_patch in blanket_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")"
2533062,How large is the ground the zebra is standing on?," # ground is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How large is the ground the zebra is standing on?"")"
19683710,The clock is inside what?," # assumes only one clock
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    if len(clock_patches) == 0:
        return image_patch.simple_query(""The clock is inside what?"")
    clock_patch = clock_patches[0]
    return clock_patch.simple_query(""The clock is inside what?"") # crop would include the clock so keep it in the query"
15674863,Is the racket in the top part?," # assumes only one racket
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        return ""no""
    return ""top"" if racket_patches[0].vertical_center > image_patch.vertical_center else ""bottom"""
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?," # assumes only one person wearing a shirt
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no""
    for shirt_patch in shirt_patches:
        if shirt_patch.horizontal_center > person_patch.horizontal_center:
            return ""yes""
    return ""no"""
2292637,What is the color of the shirt that the passenger is wearing?," # assumes one patch
    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    for passenger_patch in passenger_patches:
        shirt_patches = image_patch.find(""shirt"")
        # Question assumes only one shirt patch
        if len(shirt_patches) == 0:
            return ""no shirt""
        for shirt_patch in shirt_patches:
            if shirt_patch.horizontal_center == passenger_patch.horizontal_center:
                return shirt_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    return ""no shirt"""
9175259,What is the chair made of?," # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?," # crop would include the top so keep it in the query
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    return carrot_patches[0].simple_query(""How big is the carrot in the top of the picture?"")"
1638685,What is the name of the vegetable that is on the yellow food?," # yellow food is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")"
5828256,Is the clock on a tower?," # assumes one clock and one tower
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    tower_patches = image_patch.find(""tower"")
    if len(clock_patches) == 0 or len(tower_patches) == 0:
        return ""no""
    clock_patch = clock_patches[0]
    tower_patch = tower_patches[0]
    if (clock_patch.horizontal_center - tower_patch.horizontal_center) ** 2 + (clock_patch.vertical_center - tower_patch.vertical_center) ** 2 <= 100 ** 2:
        return ""yes""
    return ""no"""
18937563,What kind of animal is orange?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal orange?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is orange?"")
    return image_patch.simple_query(""What kind of animal is orange?"")"
14360113,What is the smiling woman holding?," # assumes only one smiling woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""smiling woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the smiling woman holding?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""What is the smiling woman holding?"")"
593188,Is the hair short?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    return bool_to_yesno(person_patches[0].verify_property(""hair"", ""short""))"
10824666,Are there ladies to the left of the man that is wearing shorts?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    is_wearing_shorts = (man_patch.simple_query(""Is the man wearing shorts?"") == ""yes"")
    if not is_wearing_shorts:
        return ""no""
    ladies_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(ladies_patches) == 0:
        return ""no""
    for lady_patch in ladies_patches:
        if lady_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?," # assumes one garbage bin
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    gray_car_patch = gray_car_patches[0]
    garbage_bin_patches = image_patch.find(""garbage bin"")
    # Question assumes only one garbage bin patch
    if len(garbage_bin_patches) == 0:
        return ""left""
    garbage_bin_patch = garbage_bin_patches[0]
    if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7574939,Is there any table or plate that is white?," # assumes only one table or plate
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    plate_patches = image_patch.find(""plate"")
    for table_patch in table_patches:
        if table_patch.verify_property(""table"", ""white""):
            return ""yes""
    for plate_patch in plate_patches:
        if plate_patch.verify_property(""plate"", ""white""):
            return ""yes""
    return ""no"""
12252101,Is it outdoors?," # assumes one image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))"
6943442,What cooking utensil is on the oven?," # assumes only one oven
    image_patch = ImagePatch(image)
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        # If no cooking utensil is found, query the image directly
        return image_patch.simple_query(""What cooking utensil is on the oven?"")
    for cooking_utensil_patch in cooking_utensil_patches:
        if cooking_utensil_patch.simple_query(""Is the cooking utensil on the oven?"") == ""yes"":
            return cooking_utensil_patch.simple_query(""What cooking utensil is on the oven?"")
    # If no cooking utensil is on the oven, pick the first cooking utensil
    return cooking_utensil_patches[0].simple_query(""What cooking utensil is on the oven?"")"
2977077,The propeller that looks red is what pattern?," # assumes only one propeller
    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    if len(propeller_patches) == 0:
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    for propeller_patch in propeller_patches:
        if propeller_patch.simple_query(""Is the propeller red?"") == ""yes"":
            return propeller_patch.best_text_match([""stripes"", ""polka dots"", ""plaid""])
    return image_patch.simple_query(""The propeller that looks red is what pattern?"")"
11190306,Which kind of animal is to the left of the train?," # assumes only one train
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the left of the train?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is to the left of the train?"")
    # If no animal is to the left of the train, query the image directly
    return image_patch.simple_query(""Which kind of animal is to the left of the train?"")"
5107190,Do you see both an airplane and a truck?," # contains a relation (and, or, etc), so ask directly
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?," # age is a property, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How old is the child?"")"
12536783,What kind of animal is in front of the pole?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?," # assumes only one man and one glasses
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    glasses_patches = image_patch.find(""glasses"")
    if len(man_patches) == 0 or len(glasses_patches) == 0:
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patch = man_patches[0]
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
18655269,Which room is it?," # assumes one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?," # assumes one room
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""room"", ""indoor""))"
1705569,Does the pot on top of the stove look black?," # assumes one pot and one stove
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        return ""no""
    pot_patch = pot_patches[0]
    stove_patches = image_patch.find(""stove"")
    if len(stove_patches) == 0:
        return ""no""
    stove_patch = stove_patches[0]
    if pot_patch.horizontal_center > stove_patch.horizontal_center:
        return ""no""
    return pot_patch.simple_query(""Does the pot look black?"")"
1028569,Are there both a cyclist and a helmet in the photo?," # assumes one patch per object
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)"
13954115,Are there any men to the left of the person in the crowd?," # assumes one person in the crowd
    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""crowd"")
    # Question assumes only one crowd patch
    if len(crowd_patches) == 0:
        # If no crowd is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    for crowd_patch in crowd_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center < crowd_patch.horizontal_center:
                return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?," # assumes only one device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    device_patch = device_patches[0]
    if device_patch.horizontal_center < image_patch.horizontal_center:
        return device_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")"
1017626,Who is inside the train?," # assumes only one train
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is inside the train?"")"
7650014,Which place is it?," # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?," # assumes one car and one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    car_patches = image_patch.find(""car"")
    if len(person_patches) == 0 or len(car_patches) == 0:
        return image_patch.simple_query(""What is the person to the left of the car doing?"")
    person_patch = person_patches[0]
    car_patch = car_patches[0]
    if car_patch.horizontal_center < person_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the left of the car doing?"")
    return image_patch.simple_query(""What is the person to the left of the car doing?"")"
1310985,Is the yellow vehicle to the left of a lamp?," # assumes only one yellow vehicle and one lamp
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    if len(yellow_vehicle_patches) == 0:
        return ""no""
    yellow_vehicle_patch = yellow_vehicle_patches[0]
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        return ""no""
    lamp_patch = lamp_patches[0]
    return bool_to_yesno(yellow_vehicle_patch.horizontal_center < lamp_patch.horizontal_center)"
646935,Which room is it?," # assumes one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
9495263,Is the woman to the left or to the right of the man that wears a cap?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man that wears a cap"")
    if len(woman_patches) == 0 or len(man_patches) == 0:
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    woman_patch = woman_patches[0]
    man_patch = man_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
946016,Do you think the animal that is sitting-down is small or large?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    animal_patch = animal_patches[0]
    if animal_patch.verify_property(""animal"", ""sitting-down""):
        return animal_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    return ""no answer"""
9617920,Do the garbage can and the pan have the same color?," # assumes only one garbage can and one pan
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    pan_patches = image_patch.find(""pan"")
    if len(garbage_can_patches) == 0 or len(pan_patches) == 0:
        return ""no""
    garbage_can_patch = garbage_can_patches[0]
    pan_patch = pan_patches[0]
    return bool_to_yesno(garbage_can_patch.verify_property(""garbage can"", ""same color as"") == pan_patch.verify_property(""pan"", ""same color as""))"
3578781,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What color is the clothing?"") == ""black"":
            return clothing_patch.simple_query(""What kind of clothing is black?"")
    return image_patch.simple_query(""Which kind of clothing is black?"")"
4695656,What is the lamp on?," # assumes only one lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        return image_patch.simple_query(""What is the lamp on?"")
    return lamp_patches[0].simple_query(""What is the lamp on?"")"
13696926,The homes that are to the left of the people have what color?," # assumes only one home and one person
    image_patch = ImagePatch(image)
    home_patches = image_patch.find(""home"")
    person_patches = image_patch.find(""person"")
    if len(home_patches) == 0 or len(person_patches) == 0:
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    home_patch = home_patches[0]
    person_patch = person_patches[0]
    if home_patch.horizontal_center < person_patch.horizontal_center:
        return home_patch.simple_query(""What color are the homes?"")
    return image_patch.simple_query(""The homes that are to the right of the people have what color?"")"
16946079,What is on the wall?," # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?," # assumes only one napkin
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        return ""no""
    return bool_to_yesno(napkin_patches[0].horizontal_center > image_patch.horizontal_center)"
11513897,What appliance is the label on?," # assumes only one appliance
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    if len(appliance_patches) == 0:
        return image_patch.simple_query(""What appliance is the label on?"")
    return appliance_patches[0].simple_query(""What appliance is the label on?"")"
8240644,What is the color of the bird's tail?," # assumes only one bird patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What is the color of the bird's tail?"")"
5245080,Is he to the right or to the left of the camera?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17800894,Are there both a window and a door in the picture?," # assumes only one window and one door
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
191027873,Where is the snowboard?," # assumes one snowboard
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    if len(snowboard_patches) == 0:
        return image_patch.simple_query(""Where is the snowboard?"")
    return snowboard_patches[0].simple_query(""Where is the snowboard?"")"
1964079,Are the box and the paper the same color?," # assumes only one box and one paper
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    paper_patches = image_patch.find(""paper"")
    if len(box_patches) == 0 or len(paper_patches) == 0:
        return ""no""
    box_patch = box_patches[0]
    paper_patch = paper_patches[0]
    return bool_to_yesno(box_patch.verify_property(""box"", ""same color as paper""))"
