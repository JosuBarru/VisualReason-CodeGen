sample_id,query,generated_code
13151559,Is the large hair both white and soft?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    is_white_and_soft = (hair_patches[0].verify_property(""hair"", ""white"") and
                         hair_patches[0].verify_property(""hair"", ""soft""))
    return bool_to_yesno(is_white_and_soft)"
18370956,Who is eating the cupcake?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    cupcake_patches = image_patch.find(""cupcake"")
    # Question assumes one person patch and one cupcake patch
    if len(person_patches) < 1 or len(cupcake_patches) < 1:
        # If no person or cupcake is found, query the image directly
        return image_patch.simple_query(""Who is eating the cupcake?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person eating a cupcake?"") == ""yes"":
            return person_patch.simple_query(""Who is eating the cupcake?"") # crop would include the cupcake so keep it in the query
    # If no person is eating a cupcake, pick the first person
    return person_patches[0].simple_query(""Who is eating the cupcake?"")"
6436809,What is the guy wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the guy wearing?"")
    return person_patches[0].simple_query(""What is the person wearing?"")"
117037,Which kind of food is to the right of the cabbage?,"    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    # Question assumes only one cabbage patch
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    right_of_cabbage = [p for p in image_patch.find(""carrot""), *[p for p in image_patch.find(""carrot, right of cabbage"")] if p for p in image_patch.find(""carrot, right of cabbage"") for c in cabbage_patches] if p for p in image_patch.find(""carrot, right of cabbage"") for c in cabbage_patches
    # right_of_cabbage = [p for p in image_patch.find(""carrot, right of cabbage"") if p.horizontal_center > c.horizontal_center for c in cabbage_patches]
    if len(cabbage_patches) == 1:
        for c in cabbage_patches:
            for p in image_patch.find(""carrot""):
                if p.horizontal_center > c.horizontal_center:
                    right_of_cabbage = p
    if len(cabbage_patches) > 1:
        for c in cabbage_patches[1:]:
            for p in image_patch.find(""carrot""):
                if p.horizontal_center > c.horizontal_center:
                    right_of_cabbage = p
    if len(right_of_cabbage) == 0:
        # If no carrot is found to the right of any cabbage, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    return right_of_cabbage[0].simple_query(""Which kind of food is to the right of the cabbage?"")"
758936,Who wears the cap?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    for person_patch in person_patches:
        who_wears_cap = person_patch.simple_query(""Who wears the cap?"")
    # if len(person_patches) > 1: # if there are multiple people, query each one
    #     for person_patch in person_patches[1:]: # start from the second person
    #         if person_patch.simple_query(""Is the cap present?"") == ""yes"":
    #             who_wears_cap = person_patch.simple_query(""Who wears the cap?"")
    #             return who_wears_cap
    return who_wears_cap"
111046440,Who is pointing?,"    # asks for the predicate of a relational verb (pointing at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is pointing?"")"
15804389,Is the woman's hair short or long?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    return woman_patches[0].simple_query(""Is the woman's hair short or long?"")"
11445636,The women are watching who?,"    # asks for the predicate of a relational verb (watching who), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who are the women watching?"")"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?,"    # check for a property (white color) of objects in a specific location (left of the woman, inside the kitchen)
    # so check each object in that location
    image_patch = ImagePatch(image)
    # check each object to the left of the woman
    for object_to_the_left in image_patch.find(""woman""):
        woman_patch = object_to_the_left
        for object_to_check in image_patch.find(""dishwasher to the left of the woman"") + image_patch.find(""gas stove inside the kitchen""):
            if object_to_check.horizontal_center < woman_patch.horizontal_center:
                return bool_to_yesno(object_to_check.verify_property(""dishwasher to the left of the woman"", ""white color"") or object_to_check.verify_property(""gas stove inside the kitchen"", ""white color"")
    # if no objects to the left of the woman have white color, query the image directly
    return bool_to_yesno(image_patch.simple_query(""Is the dishwasher to the left of the woman white color?"") and image_patch.simple_query(""Is the gas stove inside the kitchen white color?""))"
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?,"    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_patch = bed_patches[0]
    # crop would include the bed sheet so keep it in the query
    bed_sheet_patches = bed_patch.find(""bed sheet"")
    if len(bed_sheet_patches) == 0:
        # If no bed sheet is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    for bed_sheet_patch in bed_sheet_patches:
        is_same_color = bed_patch.simple_query(""Is the piece of furniture the same color as the bed sheet?"") == ""yes""
        if is_same_color:
            return bed_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"") # crop would include the bed sheet so keep it in the query
    # If no piece of furniture is the same color as the bed sheet, pick the first piece of furniture
    return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")"
758958,Is there either any red pillow or snowboard?,"    is_red_or_snowboard = ImagePatch(image).exists(""red pillow"") or ImagePatch(image).exists(""red snowboard"") or ImagePatch(image).exists(""pillow red"") or ImagePatch(image).exists(""snowboard red"") or ImagePatch(image).exists(""red"") or ImagePatch(image).exists(""pillow red snowboard"") or ImagePatch(image).exists(""red snowboard pillow"") or ImagePatch(image).exists(""pillow red snowboard"") or ImagePatch(image).exists(""red pillow snowboard"") or ImagePatch(image).exists(""red snowboard pillow"") or ImagePatch(image).exists(""red snowboard pillow red"") or ImagePatch(image).exists(""red pillow red snowboard"") or ImagePatch(image).exists(""red snowboard red pillow"") or ImagePatch(image).exists(""red pillow snowboard red"") or ImagePatch(image).exists(""red snowboard red pillow"") or ImagePatch(image).exists(""red pillow red snowboard pillow"") or ImagePatch(image).exists(""red pillow red snowboard pillow red"") or ImagePatch(image).exists(""red pillow red snowboard pillow red snowboard"") or ImagePatch(image).exists(""red pillow red snowboard pillow red snowboard pillow red"") or ImagePatch(image).exists(""red pillow red snowboard pillow red snowboard pillow red snowboard pillow red"") or ImagePatch(image).exists(""red pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red"") or ImagePatch(image).exists(""red pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red"") or ImagePatch(image).exists(""red pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard pillow red snowboard"
143816,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?,"    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    if len(knquery =                    # for query
    # for right
        [                                                                                                                                                                                                                                                                                                                                                                                                                                                                      "
17829769,What is the computer mouse in front of?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?,"    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    # Question assumes only one toddler patch
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    return toddler_patches[0].simple_query(""What is the toddler holding?"")"
2951242,Is the gray shirt sleeveless or short sleeved?,"    gray_shirt_patches = ImagePatch(image).find(""gray shirt"")
    if len(gray_shirt_patches) == 0:
        # If no gray shirt is found, query the image directly
        return ImagePatch(image).simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    for shirt_patch in gray_shirt_patches:
        if shirt_patch.simple_query(""Is the shirt sleeveless?"") == ""yes"":
            return ""sleeveless""
        elif shirt_patch.simple_query(""Is the shirt short sleeved?"") == ""yes"":
            return ""short sleeved""
    # If no short or sleeveless, query the image directly
    return ImagePatch(image).simple_query(""Is the gray shirt sleeveless or short sleeved?"")"
15241795,Is the tank top red?,"    image_patch = ImagePatch(image)
    tank_patches = image_patch.find(""tank top"")
    # Question assumes only one tank patch
    if len(tank_patches) == 0:
        # If no tank is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    return tank_patches[0].verify_property(""tank top"", ""red"")"
13885234,Which kind of animal is in front of the rocks?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?,"    image_patch = ImagePatch(image)
    is_grape = image_patch.exists(""grape"")
    return bool_to_yesno(is_grape)"
6455591,What type of furniture is white?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white furniture"")
    if len(white_patches) == 0:
        # If no white furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is white?"")
    for white_patch in white_patches:
        type_of_furniture = white_patch.simple_query(""What type of furniture is it?"")
    # if len(white_patches) > 1: # if there are multiple white objects, ask which one to analyze
        return type_of_furniture
    # else: # if there is only one white object, analyze it
    #     return white_patch.simple_query(""What type of furniture is it?"")"
1033761,What is the blue clothing item?,"    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue clothing item"")
    # Question assumes only one blue clothing item patch
    if len(blue_patches) == 0:
        # If no blue clothing item is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    return blue_patches[0].simple_query(""What is the blue clothing item?"")"
17726504,Who is wearing the glasses?,"    # asks for the predicate of a relational verb (staring at), so ask directly
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        who_wearing_glasses = person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no person is wearing glasses, pick the first person
    return who_wearing_glasses"
13112902,Is the woman wearing a bracelet?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    return woman_patches[0].verify_property(""woman"", ""bracelet"")"
698766,What is the food that is not white?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        food_name = food_patch.simple_query(""What is the food that is not white?"")
        if food_patch.simple_query(""Is the food white?"") != ""yes"":
            return food_name
    # If all foods are white, query the image directly
    return image_patch.simple_query(""What is the food that is not white?"")"
1332276,Are there both a cup and a bottle in the picture?,"    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    is_both = image_patch.exists(""cup and bottle"")
    if is_both:
        return ""yes""
    elif is_cup and is_bottle:
        return ""yes""
    else:
        return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?,"    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?,"    # asks for the predicate of a relational verb (holding a helmet), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is holding the helmet?"")"
2143247,What is the name of the food to the left of the donut that looks little?,"    image_patch = ImagePatch(image)
    donut_patches = image_patch.find(""donut"")
    # Question assumes only one donut patch
    if len(donut_patches) == 0:
        # If no donut is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    donut_patch = donut_patches[0]
    food_patches = image_patch.find(""cake"")
    for cake_patch in food_patches:
        if cake_patch.horizontal_center < donut_patch.horizontal_center:
            if cake_patch.simple_query(""Is the cake little?"") == ""yes"":
                return cake_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for food_patch in image_patch.find(""rabbit food""):
        if food_patch.horizontal_center < donut_patch.horizontal_center:
            if food_patch.simple_query(""Is the rabbit food little?"") == ""yes"":
                return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for food_patch in image_patch.find(""mouse""):
        if food_patch.horizontal_center < donut_patch.horizontal_center:
            if food_patch.simple_query(""Is the mouse little?"") == ""yes"":
                return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for food_patch in image_patch.find(""kitten food""):
        if food_patch.horizontal_center < donut_patch.horizontal_center:
            if food_patch.simple_query(""Is the kitten food little?"") == ""yes"":
                return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for food_patch in image_patch.find(""ladybug""):
        if food_patch.horizontal_center < donut_patch.horizontal_center:
            if food_patch.simple_query(""Is the ladybug little?"") == ""yes"":
                return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for food_patch in image_patch.find(""ladybug food""):
        if food_patch.horizontal_center < donut_patch.horizontal_center:
            if food_patch.simple_query(""Is the ladybug food little?"") == ""yes"":
                return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for food_patch in image"
3767951,Is the clock to the right or to the left of the man on the left?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man on left"")
    if len(man_patches) < 2:
        # If there is no second man, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_on_left = man_patches[0]
    man_on_right = man_patches[1]
    if man_on_right.horizontal_center > man_on_left.horizontal_center:
        return ""right""
    else:
        return ""left"""
17655180,What's the sticker on?,"    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What's the sticker on?"")
    return sticker_patches[0].simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?,"    image_patch = ImagePatch(image)
    still_car_patches = image_patch.find(""still car"")
    # Question assumes only one still car patch
    if len(still_car_patches) == 0:
        # If no still car is found, query the image directly
        return image_patch.simple_query(""Is there someone to the right of the still car?"")
    for still_car_patch in still_car_patches:
        if still_car_patch.simple_query(""Is the car moving?"") == ""no"":
            for other_patch in image_patch.find(""person""):
                if other_patch.horizontal_center > still_car_patch.horizontal_center:
                    return ""yes""
    return ""no""
"
7188981,Does the giraffe look adult?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is the giraffe adult?"")
    return giraffe_patches[0].verify_property(""giraffe"", ""adult"")"
16852802,Of what color are the pants?,"    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""What color are the pants?"")"
9619158,What kind of watercraft is full of men?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of watercraft is full of men?"")"
3625225,On which side of the picture are the boats?,"    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    if boat_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?,"    # assumes there are exactly two elephant patches
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    if len(elephant_patches) < 2:
        # If there is not exactly two elephant patches, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_elephant = elephant_patches[0]
    right_elephant = elephant_patches[1]
    is_large_size = left_elephant.verify_property(""elephant"", ""large size"")
    return bool_to_yesno(is_large_size)"
19834124,What is the girl holding?,"    image_patch = ImagePatch(image)
    item_patches = image_patch.find(""girl"")
    # Question assumes only one item patch
    if len(item_patches) == 0:
        # If no item is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    return item_patches[0].simple_query(""What is the girl holding?"")"
4617704,Does the toilet seat that is not down appear to be white and open?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet seat that is not down"")
    # Question assumes only one toilet seat that is not down
    is_white_and_open = []
    for toilet_patch in toilet_patches:
        is_white_and_open.append((toilet_patch.verify_property(""seat that is not down"", ""white"") and
                                 toilet_patch.verify_property(""seat that is not down"", ""open"")))
    is_white_and_open = bool_to_yesno(all query
5899539,Are there any bottles or mugs that are not purple?,"    is_bottle_or_mug = ImagePatch(image).exists(""bottle"") or ImagePatch(image).exists(""mug"")
    is_purple = ImagePatch(image).exists(""bottle purple"") or ImagePatch(image).exists(""mug purple"")
    is_not_purple = not is_purple
    is_not_bottle_or_mug = not is_bottle_or_mug
    is_not_bottle_or_mug_and_not_purple = is_not_bottle_or_mug and is_not_purple
    is_bottle_or_mug_and_not_purple = ImagePatch(image).exists(""bottle green"") or ImagePatch(image).exists(""mug green"") or ImagePatch(image).exists(""bottle blue"") or ImagePatch(image).exists(""mug blue"") or ImagePatch(image).exists(""bottle red"") or ImagePatch(image).exists(""mug red"")
    is_bottle_or_mug_and_not_purple = bool(is_bottle_or_mug_and_not_purple) or is_bottle_or_mug_and_not_purple
    return bool_to_yesno(is_bottle_or_mug_and_not_purple)"
2631593,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?,"    # assumes a specific spatial relationship (right of) and a specific room (living room)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person in living room"")
    if len(person_patches) == 0:
        # If no person is found in the living room, query the image directly
        return image_patch.simple_query(""Is there a man to the right of the person that is in the living room?"")
    person_in_living_room = person_patches[0]
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center > person_in_living_room.horizontal_center:
            return ""no""
    return bool_to_yesno(any(man_patch.exists(""man"") for man_patch in man_patches))"
111054378,Is the small couch to the right or to the left of the bottle?,"    image_patch = ImagePatch(image)
    small_couch_patches = image_patch.find(""small couch"")
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes one bottle patch and one small couch patch
    if len(bottle_patches) < 1 or len(small_couch_patches) < 1:
        # If no bottle or small couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    small_couch = small_couch_patches[0]
    bottle = bottle_patches[0]
    if small_couch.horizontal_center > bottle.horizontal_center:
        return ""right""
    else:
        return ""left"""
9392411,Is the bottle to the right or to the left of the appliance on the left?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    appliance_patches = image_patch.find(""appliance on left"")
    # Question assumes one bottle patch and one appliance on left patch
    if len(bottle_patches) < 1 or len(appliance_patches) < 1:
        # If no bottle or appliance on left is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    if bottle_patches[0].horizontal_center > appliance_patches[0].horizontal_center:
        return ""right""
    else:
        return ""left"""
16753829,What type of animal is sitting in the container in the bottom of the photo?,"    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    bottom_container_patches = [patch for patch in container_patches if patch.vertical_center < image_patch.vertical_center]
    # Question assumes only one bottom container patch
    if len(bottom_container_patches) == 0:
        # If no bottom container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    bottom_container_patch = bottom_container_patches[0]
    animal_patches = bottom_container_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return bottom_container_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    for animal_patch in animal_patches:
        return animal_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")"
1345482,What is that train in front of?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?,"# check for objects in a specific order (girl, palm tree, car) so ask in that order
# if any object is missing, query the image directly
# if all objects are present, check for the car to the right of the palm tree
image_patch = ImagePatch(image)
# check for the girl
girl_patches = image_patch.find(""girl"")
if len(girl_patches) == 0:
    # If no girl is found, query the image directly
    return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
# check for the palm tree to the right of the girl
for girl_patch in girl_patches:
    # check for the palm tree
    palm_tree_patches = image_patch.find(""palm tree"")
    for palm_tree_patch in palm_tree_patches:
        if palm_tree_patch.horizontal_center > girl_patch.horizontal_center:
            # check for the car to the right of the palm tree
            for palm_tree_patch_2 in palm_tree_patches:
                if palm_tree_patch_2.horizontal_center > palm_tree_patch.horizontal_center:
                    for car_patches in [[p for p in image_patch.find(""car"") if p.horizontal_center < palm_tree_patch_2.horizontal_center], [p for p in image_patch.find(""car"") if p.horizontal_center > palm_tree_patch_2.horizontal_center]]:
                        if len(car_patches) > 0:
                            return bool_to_yesno(True)
    # If no palm tree is found to the right of the girl, query the image directly
    return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")"
459445,In which part is the silver device?,"    image_patch = ImagePatch(image)
    silver_device_patches = image_patch.find(""silver device"")
    if len(silver_device_patches) == 0:
        # If no silver device is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if silver_device_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""right,,,,,,,,,,,,,,,,,,""     #  # ""top""  # for some reason, right is not working, so I added a string to make it work
         # for silver_device in silver_device_patches:  # for each device
        #     if silver_device.vertical_center > image_patch.vertical_center:  # if it's to the right
        #         return ""top""  # return top
    return ""top"""
11786203,What is the man on?,"    # asks for the predicate of a relational verb (man on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?,    is_brown_door_or Chair
131031372,What is the napkin in?,"    image_patch = ImagePatch(image)
    # contains a relation (where it is), so ask directly
    return image_patch.simple_query(""What is the napkin in?"")"
1241681,Are there any people behind the white dessert?,"# asks for the existence of a second object (people) in a scene, so go step by step
white_dessert_patches = ImagePatch(image).find(""white dessert"")
# Question assumes only one white dessert patch
if len(white_dessert_patches) == 0:
    # If no white dessert is found, query the image directly
    return ImagePatch(image).simple_query(""Are there any people behind the white dessert?"")
for white_dessert_patch in white_dessert_patches:
    is_white_dessert = (white_dessert_patch.simple_query(""Is the white dessert on a table?"") == ""yes"")
    if is_white_dessert:
        # If the white dessert is on a table, check the table for people
        return ImagePatch(image).simple_query(""Are there any people behind the white dessert?"") # crop would include the table so keep it in the query
    else:
        # If the white dessert is not on a table, check the scene for people
        return ImagePatch(image).simple_query(""Are there any people behind the white dessert?"")"
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?,"    image_patch = ImagePatch(image)
    # contains multiple relations (right, right, in front of), so ask directly
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")"
8553578,What is the Pikachu doing?,"    image_patch = ImagePatch(image)
    pikachu_patches = image_patch.find(""pikachu"")
    # Question assumes only one pikachu patch
    if len(pikachu_patches) == 0:
        # If no pikachu is found, query the image directly
        return image_patch.simple_query(""What is the Pikachu doing?"")
    return pikachu_patches[0].simple_query(""What is the Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?,"    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""What is on the large mountains?"")
    return mountain_patches[0].simple_query(""What is on the large mountains?"")"
5107295,What is in the sky?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is the fruit on?"")
    for watercraft_patch in watercraft_patches:
        fruit_patches = watercraft_patch.find(""fruit"")
        # Question assumes only one fruit patch
        if len(fruit_patches) == 0:
            # If no fruit is found, query the image directly
            return image_patch.simple_query(""What kind of watercraft is the fruit on?"")
        for fruit_patch in fruit_patches:
            is_on_watercraft = (watercraft_patch.simple_query(""Is the fruit on the watercraft?"") == ""yes"")
            if is_on_watercraft:
                return watercraft_patch.simple_query(""What kind of watercraft is the fruit on?"") # crop would include the fruit so keep it in the query
    # If no fruit is on the watercraft, pick the first watercraft
    return watercraft_patches[0].simple_query(""What kind of watercraft is the fruit on?"")"
1827218,Is the bottle in the bottom of the image?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    if bottle_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"" bottom
10938155,What color is the sky?,"    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""What color is the sky?"")
    return sky_patches[0].simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?,"    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""What color is the sail?"")
    return sail_patches[0].best_text_match([""red"", ""white""])"
3662784,Do you see either any traffic lights or cars?,"    image_patch = ImagePatch(image)
    is_traffic_light_or_car = False
    is_car = image_patch.exists(""car"")
    is_traffic_light = image_patch.exists(""traffic light"")
    is_traffic_light_or_car = is_car or is_traffic_light
    return bool_to_yesno(is_traffic_light_or_car)"
15515711,Are there any girls to the right of the yellow helmet?,"    image_patch = ImagePatch(image)
    yellow_helmets = image_patch.find(""yellow helmet"")
    # Question assumes only one yellow helmet patch
    if len(yellow_helmets) == 0:
        # If no yellow helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    right_helmets = [y for y in yellow_helmets if y.horizontal_center < (image_patch.width / 2)]
    if len(right_helmets) == 0:
        # If all yellow helmets are to the left, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    for right_helmet in right_helmets:
        if right_helmet.exists(""girl""):
            return ""yes""
    return ""no"""
6315316,Which kind of furniture is in front of the window?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    window_patches = image_patch.find(""window"")
    # Question assumes one window patch and one furniture patch
    for furniture_patch in furniture_patches:
        for window_patch in window_patches:
            if furniture_patch.horizontal_center > window_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is in front of the window?"")
            else:
                return furniture_patch.simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?,"    image_patch = ImagePatch(image)
    faucet_patches = image_patch.find(""faucet"")
    if len(faucet_patches) < 2:
        # If there is not two faucets, query the image directly
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    left_faucet = faucet_patches[0]
    right_faucet = faucet_patches[1]
    for object_patch in image_patch.find(""dishwasher"") + image_patch.find(""washing machine"") + image_patch.find(""microwave""):
        if object_patch.horizontal_center < left_faucet.horizontal_center:
            return object_patch.simple_query(""What appliance is to the left of the faucet?"")
    # If no appliance is to the left of the faucet, query the image directly
    return image_patch.simple_query(""What appliance is to the left of the faucet?"")"
41050828,What is the color of the jacket?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"")"
610914,Is the green boat to the right or to the left of the wood house?,"    image_patch = ImagePatch(image)
    green_boats = image_patch.find(""green boat to the right of the wood house"")
    if len(green_boats) == 0:  # if there is no green boat to the right of the wood house
        green_boats = image_patch.find(""green boat to the left of the wood house"")
        if len(green_boats) == 0:  # if there is no green boat to the left of the wood house
            # if there is no green boat to the right or to the left of the wood house
            # we can't determine the relative position, so we ask the user
            return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    # if there is a green boat to the right of the wood house
    for green_boat in green_boats:
        if green_boat.horizontal_center > (image_patch.find(""wood house"")[0].horizontal_center + image_patch.find(""wood house"")[0].width / 2):
            return ""right""
    # if there is a green boat to the left of the wood house
    for green_boat in image_patch.find(""green boat to the left of the wood house""):
        if green_boat.horizontal_center < (image_patch.find(""wood house"")[0].horizontal_center - image_patch.find(""wood house"")[0].width / 2):
            return ""left""
"
13158346,Is the woman in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    if woman_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"" bottom
16318707,Are there either any colorful bikes or skateboards?,"    is_colorful_board = ImagePatch(image).exists(""colorful bike board"")
    is_colorful_bike = ImagePatch(image).exists(""colorful bike"")
    is_colorful_sk8board = ImagePatch(image).exists(""colorful skateboard"")
    is_colorful_bike_frame = ImagePatch(image).exists(""colorful bike frame"")
    is_colorful_bike_wheel = ImagePatch(image).exists(""colorful bike wheel"")
    is_colorful_bike_pedal = ImagePatch(image).exists(""colorful bike pedal"")
    is_colorful_sk8board_truck = ImagePatch(image).exists(""colorful skateboard truck"")
    is_colorful_sk8board_wheels = ImagePatch(image).exists(""colorful skateboard wheels"")
    is_colorful_sk8board_decal = ImagePatch(image).exists(""colorful skateboard decal"")
    is_colorful_sk8board_grip = ImagePatch(image).exists(""colorful skateboard grip"")
    is_colorful_sk8board = is_colorful_sk8board_truck or is_colorful_sk8board_wheels or is_colorful_sk8board_decal or is_colorful_sk8board_grip
    is_colorful_bike = is_colorful_bike_frame or is_colorful_bike_wheel or is_colorful_bike_pedal
    is_colorful_board = ImagePatch(image).exists(""colorful bike board"") or ImagePatch(image).exists(""colorful skateboard board"")
    is_colorful_bike_or_board = ImagePatch(image).exists(""colorful bike"") or ImagePatch(image).exists(""colorful bike board"") or ImagePatch(image).exists(""colorful skateboard"") or ImagePatch(image).exists(""colorful skateboard board"")
    is_colorful_bike_or_sk8board = ImagePatch(image).exists(""colorful bike"") or ImagePatch(image).exists(""colorful bike board"") or ImagePatch(image).exists(""colorful skateboard"") or ImagePatch(image).exists(""colorful skateboard board"") or is_colorful_bike or is_colorful_sk8board
    is_colorful_bike_or_sk8board_or_board = ImagePatch(image).exists(""colorful bike board"") or ImagePatch(image).exists(""colorful bike board with truck"") or ImagePatch(image).exists(""colorful bike board with wheels"") or ImagePatch(image).exists(""colorful bike board with decal"") or ImagePatch(image).exists(""colorful bike board with grip"") or ImagePatch(image).exists(""colorful bike"
2805654,Is the bag to the right or to the left of the bench?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    bench_patches = image_patch.find(""bench"")
    # Question assumes one bag patch and one bench patch
    if len(bag_patches) < len(bench_patches):
        for bag_patch in bag_patches:
            if bag_patch.horizontal_center < bench_patches[0].horizontal_center:
                return ""left""
    else:
        for bag_patch in bag_patches:
            if bag_patch.horizontal_center > bench_patches[0].horizontal_center:
                return ""right""
    # If no bag is found to the right or left of the bench, query the image directly
    return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")"
15315607,What do you think is in the sky?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    gas_station_patches = image_patch.find(""gas station"")
    # Question assumes one truck patch and one gas station patch
    if len(truck_patches) < 1 or len(gas_station_patches) < 1:
        # If no truck or gas station is found, query the image directly
        return image_patch.simple_query(""What color is the truck near the gas station?"")
    truck = truck_patches[0]
    gas_station = gas_station_patches[0]
    # Check if truck is near gas station (for simplicity, within 100 pixels)
    if abs(truck.horizontal_center - gas_station.horizontal_center) < 100:
        return truck.simple_query(""What is the color of the truck?"")
    else:
        return image_patch.simple_query(""What color is the truck near the gas station?"")"
12140940,"What are the headphones on, a sofa or a desk?","    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
    for headphones_patch in headphones_patches:
        surface_patches = image_patch.find(""sofa"") + image_patch.find(""desk"")
        for surface_patch in surface_patches:
            if headphones_patch.vertical_center > surface_patch.horizontal_center:
                return ""desk""
            else:
                return surface_patch.simple_query(""What are the headphones on, a sofa or a desk?"")"
727533,Does the bun look brown and toasted?,"    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    return bool_to_yesno(bun_patches[0].verify_property(""bun"", ""brown_toasted"")"
61044602,What is in the brown basket?,"    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""brown basket"")
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""What is in the brown basket?"")
    basket_patch = basket_patches[0]
    return basket_patch.simple_query(""What is in the brown basket?"")"
16827204,Is the marker different in color than the paper?,"    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    if len(marker_patches) < 2:
        # If there is not at least two markers, query the image directly
        return image_patch.simple_query(""Is the marker color than the paper?"")
    marker1 = marker_patches[0]
    marker2 = marker_patches[1]
    is_color_diff = (marker1.simple_query(""What is the color of the marker?"") !=
                     marker2.simple_query(""What is the color of the marker?""))
    return bool_to_yesno(is_color_diff)"
1284539,Is there a racket to the right of the man on the right side?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    man_on_right = man_patches[0]  # assume one man
    racket_patches = image_patch.find(""racket"")
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_on_right.horizontal_center:
            return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center < man_on_right.horizontal_center:
            return bool_to_yesno(racket_patch.exists(""racket""))"
1257391,What place is this?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
16223517,What do you think is the color of the large device?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""large device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the color of the large device?"")
    return device_patches[0].simple_query(""What is the color of the large device?"")"
1024280,Does the shirt look long sleeved or sleeveless?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    return shirt_patches[0].simple_query(""Is the shirt long sleeved or sleeveless?"")"
2769463,Which kind of animal is lying in the chair?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    animal_patches = image_patch.find(""animal"")
    # Question assumes one animal patch and one chair patch
    for animal_patch in animal_patches:
        for chair_patch in chair_patches:
            if animal_patch.horizontal_center > chair_patch.horizontal_center:
                return animal_patch.simple_query(""Which kind of animal is lying in the chair?"")
            else:
                return animal_patch.simple_query(""Which kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?,"    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box to the right of the chair"")
    if len(white_box_patches) == 0:
        white_box_patches = image_patch.find(""white box to the right of the crate that the chair is to the right of"")
    if len(white_box_patches) == 0:
        white_box_patches = image_patch.find(""white box to the right of the crate that the chair is to the right of, but not on top of"")
    if len(white_box_patches) == 0:
        white_box_patches = image_patch.find(""white box to the right of the crate that the chair is to the right of, but not on top of, and not to the right of"")
    if len(white_box_patches) == 0:
        white_box_patches = image_patch.find(""white box to the right of the crate that the chair is to the right of, but not on top of, and not to the right of, and not on top of"")
    crate_patches = image_patch.find(""crate that the chair is to the right of"")
    if len(crate_patches) == 0:
        crate_patches = image_patch.find(""crate that the chair is to the right of, but not on top of"")
    if len(crate_patches) == 0:
        crate_patches = image_patch.find(""crate that the chair is to the right of, but not on top of, and not to the right of"")
    for white_box_patch in white_box_patches:
        for crate_patch in crate_patches:
            if white_box_patch.horizontal_center > crate_patch.horizontal_center:
                return ""no""
    return ""yes"""
3434581,Are there both a coffee table and a lamp?,"    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    is_redundant_object = image_patch.exists(""lamp on coffee table"")
    is_lamp_on_table = is_redundant_object and is_lamp
    is_lamp_and_table_separate = is_lamp and not is_lamp_on_table
    is_lamp_and_table_separate_or_table = is_lamp_or_table = is_lamp or is_coffee_table
    is_lamp_and_table_separate = is_lamp_or_table and is_lamp_and_table_separate
    return bool_to_yesno(is_lamp_and_table_separate)"
19201196,Is that flower pot made of clay?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""flower pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return pot_patches[0].verify_property(""flower pot"", ""clay"")"
191006281,Does the sky look clear and gray?,"    image_patch = ImagePatch(image)
    weather_patches = image_patch.find(""weather vane"")
    if len(weather_patches) == 0:
        # If no weather vane is found, query the image directly
        return image_patch.simple_query(""Is the sky clear and gray?"")
    for weather_patch in weather_patches:
        is_clear_and_gray = weather_patch.simple_query(""Is the sky clear and gray?"") == ""yes""
    if len(weather_patches) == 0:
        # If no weather vane is found, query the image directly
        return image_patch.simple_query(""Is the sky clear and gray?"")
    return is_clear_and_gray"
681336,Do you see hats or gloves that are white?,"    image_patch = ImagePatch(image)
    is_hat_or_white = image_patch.simple_query(""Is the hat white?"") == ""yes"" if image_patch.find(""hat"") else False
    is_hat_or_white = is_hat_or_white or image_patch.simple_query(""Is the hat white?"") == ""yes"" if image_patch.find(""hat on top of head"") else False
    is_hat_or_white = is_hat_or_white or image_patch.simple_query(""Is the hat white?"") == ""yes"" if image_patch.find(""hat on top of head with string"") else False
    is_hat_or_white = is_hat_or_white or image_patch.simple_query(""Is the hat white?"") == ""yes"" if image_patch.find(""hat on top of head with string and ball"") else False
    is_hat_or_white = is_hat_or_white or image_patch.simple_query(""Is the hat white?"") == ""yes"" if image_patch.find(""hat on top of head with string and ball and stick"") else False
    is_hat_or_white = is_hat_or_white or image_patch.simple_query(""Is the hat white?"") == ""yes"" if image_patch.find(""hat on top of head with string and ball and stick and string"") else False
    is_hat_or_white = is_hat_or_white or image_patch.simple_query(""Is the hat white?"") == ""yes"" if image_patch.find(""hat on top of head with string and ball and stick and string and ball"") else False
    is_hat_or_white = is_hat_or_white or image_patch.simple_query(""Is the hat white?"") == ""yes"" if image_patch.find(""hat on top of head with string and ball and stick and string and ball and string"") else False
    is_hat_or_white = is_hat_or_white or image_patch.simple_query(""Is the hat white?"") == ""yes"" if image_patch.find(""hat on top of head with string and ball and stick and string and ball and string and ball"") else False
    is_hat_or_white = is_hat_or_white or image_patch.simple_query(""Is the hat white?"") == ""yes"" if image_patch.find(""hat on top of head with string and ball and stick and string and ball and string and ball and string"") else False
    is_hat_or_white = is_hat_or_white or image_patch.simple_query(""Is the hat white?"") == ""yes"" if image_patch.find(""hat on top of head with string and ball and"
1300368,What is on the cabinet that is to the right of the keyboard?,"    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes one cabinet patch and one keyboard patch
    if len(cabinet_patches) < 1 or len(keyboard_patches) < 1:
        # If no cabinet or keyboard is found, query the image directly
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.horizontal_center > keyboard_patches[0].horizontal_center:
            return cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"") # crop would include the object on the cabinet so keep it in the query
    # If no cabinet is to the right of the keyboard, pick the first cabinet
    return cabinet_patches[0].simple_query(""What is on the cabinet that is to the right of the keyboard?"")"
172394,What is the animal to the left of the tap called?,"    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    tap_patch = tap_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < tap_patch.horizontal_center:
            return animal_patch.simple_query(""What is the animal to the left of the tap called?"") # crop would include the tap so keep it in the query
    # If no animal is found to the left of the tap, query the image directly
    return image_patch.simple_query(""What is the animal to the left of the tap called?"")"
738176,Is the chair on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    if chair_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
4194919,Is the child on the right of the picture?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    if child_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""no""
    else:
        return ""yes"""
3585327,Who is on the surfboard?,"    # asks for the predicate of a relational verb (riding a surfboard), so ask directly
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard?"")
    for person_patch in person_patches:
        who_on_board = person_patch.simple_query(""Who is on the surfboard?"") # crop would include the board so keep it in the query
    # If no person is on the board, pick the first person
    return who_on_board"
1711172,What size are the packages the candle is on top of?,"    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    top_packages = image_patch.find(""package"")
    # Question assumes one top package patch
    for top_package in top_packages:
        if top_package.vertical_center < candle_patches[0].vertical_center:
            return top_package.simple_query(""What size are the packages the candle is on top of?"") # crop would include the package so keep it in the query
    # If no top package is found, query the image directly
    return image_patch.simple_query(""What size are the packages the candle is on top of?"")"
4353895,Who is on the snowboard on the right?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person on snowboard"")
    # Question assumes only one person on snowboard patch
    if len(person_patches) == 0:
        # If no person on snowboard is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    return person_patches[0].simple_query(""Who is on the snowboard on the right?"")"
17929304,What is the vehicle that is on the road?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is on the road?"")
    return vehicle_patches[0].simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?,"    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return bread_patches[0].simple_query(""What color is the crust?"")"
5672474,Is the plate to the left or to the right of the beer on the left?,"    image_patch = ImagePatch(image)
    beer_patches = image_patch.find(""beer on left"")
    if len(beer_patches) < 2:
        # If there is no second beer, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    for beer_patch in beer_patches:
        if beer_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
    return ""right"""
11341284,What is the pattern of the mattress on the street?,"    image_patch = ImagePatch(image)
    mattress_patches = image_patch.find(""mattress"")
    # Question assumes only one mattress patch
    if len(mattress_patches) == 0:
        # If no mattress is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the mattress on the street?"")
    return mattress_patches[0].simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?,"    image_patch = ImagePatch(image)
    is-boy
19203395,Is the white toilet paper to the right or to the left of the toilet?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white"")
    toilet_patches = image_patch.find(""toilet"")
    if len(white_patches) < 2 or len(toilet_patches) < 2:
        # If there is not at least two objects, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    for white_patch in white_patches:
        for toilet_patch in toilet_patches:
            if white_patch.horizontal_center > toilet_patch.horizontal_center:
                return ""right""
    return ""left"""
1194938,Are there any airplanes in front of the building?,"# asks for a relation (front of) and a second object (building) and a third object (airplane)
# so go step by step
building_patch = ImagePatch(image)
airplane_patches = building_patch.find(""airplane"")
# Question assumes only one building patch
# and one airplane patch
if len(airplane_patches) == 0:
    # If no airplane is found, query the image directly
    return building_patch.simple_query(""Are there any airplanes in front of the building?"")
for airplane_patch in airplane_patches:
    is_front_of_building = (airplane_patch.horizontal_center - building_patch.horizontal_center) > 0
    if is_front_of_building:
        return ""no""
    else:
        return bool_to_yesno(airplane_patch.exists(""airplane""))"
5350205,How clean is the road that the car is on the side of?,"    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    for road_patch in road_patches:
        if road_patch.horizontal_center < image_patch.horizontal_center:
            return road_patch.simple_query(""How clean is the road that the car is on the side of?"")
    # If no road is to the left, query the image directly
    return image_patch.simple_query(""How clean is the road that the car is on the side of?"")"
4256016,"In which part of the picture is the black van, the bottom or the top?","    image_patch = ImagePatch(image)
    black_van_patches = image_patch.find(""black van"")
    # Question assumes only one black van patch
    if len(black_van_patches) == 0:
        # If no black van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if black_van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?,"    # asks for the predicate of a relational verb (right of), so ask directly
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    fence_patches = image_patch.find(""fence"")
    # Question assumes one person patch and one fence patch
    for person_patch in person_patches:
        for fence_patch in fence_patches:
            if person_patch.horizontal_center > fence_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the fence doing?"")
            else:
                return person_patch.simple_query(""What is the person to the right of the fence doing?"")
"
16471124,Does the horse have a different color than the boot?,"    horse_patches = ImagePatch(image).find(""horse"")
    boot_patches = ImagePatch(image).find(""boot"")
    # Question assumes one horse patch and one boot patch
    if len(horse_patches) < 2 or len(boot_patches) < 2:
        # If there is not at least two of each, query the image directly
        return bool_to_yesno(ImagePatch(image).verify_property(""horse"", ""color:"") or ImagePatch(image).verify_property(""boot"", ""color:"")
    # Check each horse and boot for a color difference
    for horse_patch in horse_patches:
        for boot_patch in boot_patches:
            if horse_patch.simple_query(""What is the color of the horse?"") != boot_patch.simple_query(""What is the color of the boot?""):
                return ""yes""
    # If no color difference is found, query the image directly
    return bool_to_yesno(ImagePatch(image).verify_property(""horse"", ""color:"") or ImagePatch(image).verify_property(""boot"", ""color:"")"
958247,Is the mouse to the right of a chair?,"    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    chair_patches = image_patch.find(""chair"")
    is_to_right = ""yes""
    for mouse_patch in mouse_patches:
        for chair_patch in chair_patches:
            if mouse_patch.horizontal_center > chair_patch.horizontal_center:
                is_to_right = ""no""
    return bool_to_yesno(is_to_right)"
11179512,The basket made of plastic is what color?,"    basket_patches = ImagePatch(image).find(""basket made of plastic"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return ImagePatch(image).simple_query(""What color is the basket made of plastic?"")
    return basket_patches[0].simple_query(""What is the color of the basket?"")"
8816272,Do you see any elephant to the left of the bird?,"    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    bird_patches = image_patch.find(""bird"")
    # Question assumes one elephant patch and one bird patch
    is_elephant_and_bird_together = False
    for elephant_patch in elephant_patches:
        for bird_patch in bird_patches:
            if elephant_patch.horizontal_center < bird_patch.horizontal_center:
                is_elephant_and_bird_together = True
    return bool_to_yesno(is_elephant_and_bird_together)"
11168592,What is the animal in front of the lamp?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the jacket?"")
    for person_patch in person_patches:
        who_is_wearing_jacket = person_patch.simple_query(""Who is wearing the jacket?"") # crop would include the jacket so keep it in the query
        if who_is_wearing_jacket != """":
            return who_is_wearing_jacket
    # If no person is wearing a jacket, pick the first person
    return person_patches[0].simple_query(""Who is wearing the jacket?"")"
7398502,What is the food to the left of the girl in the bottom of the photo?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    bottom_girl = girl_patches[0]
    bottom_girl_y = bottom_girl.vertical_center
    for item in image_patch.find(""food""):
        if item.vertical_center < bottom_girl_y:
            return item.simple_query(""What is the food to the left of the girl in the bottom of the photo?"") # crop would include the item so keep it in the query
    # If no item is found to the left of the girl, query the image directly
    return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")"
5145864,What is the device that the camera is in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the device that the camera is in front of?"")"
788143,Is the man on the surfboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man on surfboard"")
    # Question assumes one man on surfboard patch
    if len(man_patches) == 0:
        # If no man on surfboard is found, query the image directly
        return image_patch.simple_query(""Is the man on the surfboard?"")
    return man_patches[0].verify_property(""man on surfboard"", ""riding"")"
15854501,What device has the same color as the device in the box?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    # Question assumes one box patch
    box_patch = box_patches[0]
    device_patches = image_patch.find(""ladder"")
    for device_patch in device_patches:
        if device_patch.simple_query(""What is the color of the device?"") == box_patch.simple_query(""What is the color of the device?""):
            return device_patch.simple_query(""What device has the same color as the device in the box?"")
    # If no device with the same color is found, query the image directly
    return image_patch.simple_query(""What device has the same color as the device in the box?"")"
3228067,What is the child wearing?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    return child_patches[0].simple_query(""What is the child wearing?"")"
6817336,Is the blue sky behind a cathedral?,"    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue"")
    # Question assumes only one blue patch
    if len(blue_patches) == 0:
        # If no blue is found, query the image directly
        return image_patch.simple_query(""Is the blue sky behind a cathedral?"")
    blue_patch = blue_patches[0]
    cathedral_patches = image_patch.find(""cathedral"")
    # Question assumes only one cathedral patch
    for cathedral_patch in cathedral_patches:
        if blue_patch.horizontal_center > cathedral_patch.horizontal_center:
            return ""no""
    # If no blue is found in front of the cathedral, query the image directly
    return bool(image query                   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #                                                                                                                                                                         #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #"
6347271,"In which part of the image is the yellow pepper, the bottom or the top?","    image_patch = ImagePatch(image)
    yellow_pepper_patches = image_patch.find(""yellow pepper"")
    # Question assumes only one yellow pepper patch
    if len(yellow_pepper_patches) == 0:
        # If no yellow pepper is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    if yellow_pepper_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?,"    image_patch = ImagePatch(image)
    # asks for the predicate of a relational verb (feeding), so ask directly
    return image_patch.simple_query(""What animal is the woman feeding?"")"
3427727,On which side is the bucket?,"    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    if bucket_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
31050314,Is the small chimney in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    small_chimney_patches = image_patch.find(""small chimney"")
    if len(small_chimney_patches) == 0:
        # If no small chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    if small_chimney_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"" bottom      # for  #  #  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1 "
3503396,Are the pants purple?,"    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    return pants_patches[0].verify_property(""pants"", ""purple"")"
11742862,Which kind of furniture is to the right of the paper towels?,"    image_patch = ImagePatch(image)
    # first find the paper towels, then the furniture to the right of them
    paper_towel_patches = image_patch.find(""paper towel"")
    if len(paper_towel_patches) < 2:  # need two to find the one between
        # If no two paper towels are found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    # find the one in the middle
    middle_patch = paper_towel_patches[1]  # index 1, because 0 is the one to the left
    # find all the furniture to the right of the middle patch
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > middle_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    # If no furniture is found to the right of the middle patch, query the image directly
    return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")"
5891809,What kind of furniture is gray?,"    image_patch = ImagePatch(image)
    gray_patches = image_patch.find(""gray"")
    # Question assumes only one gray patch
    if len(gray_patches) == 0:
        # If no gray is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    return gray_patches[0].simple_query(""What kind of furniture is gray?"")"
5370528,Is the hair white and long?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    person_patch = person_patches[0]
    is_hair_white_and_long = (person_patch.simple_query(""Is the hair white?"") == ""yes"" and
                              person_patch.simple_query(""Is the hair long?"") == ""yes"")
    return bool_to_yesno(is_hair_white_and_long)"
781153,Do you see trains near the lamp post that looks white?,"    lamp_post_patches = ImagePatch(image).find(""lamp post that looks white"")
    if len(lamp_post_patches) == 0:
        # If no lamp post that looks white is found, query the image directly
        return bool_to_yesno(ImagePatch(image).verify_property(""lamp post that looks white"", ""white"")
        and ImagePatch(image).verify_property(""lamp post that looks white"", ""lamp post"")
        and ImagePatch(image).verify_property(""lamp post that looks white"", ""lamp post that"")
        )
    lamp_post = lamp_post_patches[0]
    is_white = lamp_post.verify_property(""lamp post that looks white"", ""white"")
    is_lamp_post = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that"")
    is_lamp_post_or_that = lamp_post.verify_property(""lamp post that looks white"", ""lamp post"")
    is_lamp_post_or_that_2 = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that 2"")
    is_lamp_post_or_that_3 = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that 3"")
    is_lamp_post_or_that_4 = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that 4"")
    is_lamp_post_or_that_5 = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that 5"")
    is_lamp_post_or_that_6 = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that 6"")
    is_lamp_post_or_that_7 = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that 7"")
    is_lamp_post_or_that_8 = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that 8"")
    is_lamp_post_or_that_9 = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that 9"")
    is_lamp_post_or_that_10 = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that 10"")
    is_lamp_post_or_that_11 = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that 11"")
    is_lamp_post_or_that_12 = lamp_post.verify_property(""lamp post that looks white"", ""lamp post that 12"")
    is_lamp_post_or_that_13 = lamp_post.verify_property(""lamp post that looks white"", """
5543456,Is the container to the left of the person that wears bracelets?,"    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    person_patches = image_patch.find(""person"")
    # Question assumes one person patch and one container patch
    for person_patch in person_patches:
        for container_patch in container_patches:
            if container_patch.horizontal_center < person_patch.horizontal_center:
                # Check if the person is wearing bracelets
                is_wearing_bracelets = (person_patch.simple_query(""Is the person wearing bracelets?"") == ""yes"")
                if is_wearing_bracelets:
                    return ""yes""
    # If no container is to the left of the person that wears bracelets, query the image directly
    return ""no"""
163134,What do you think is on the roof?,"    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    # Question assumes only one roof patch
    if len(roof_patches) == 0:
        # If no roof is found, query the image directly
        return image_patch.simple_query(""What do you think is on the roof?"")
    return roof_patches[0].simple_query(""What is on the roof?"")"
5603075,Is the shoe white or brown?,"    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
5511395,What is wrapped in paper?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is wrapped in paper?"")"
5611256,Are there any couches in the picture?,"    image_patch = ImagePatch(image)
    is_couch = image_patch.exists(""couch"")
    return bool_to_yesno(is_couch)"
1162826,The man is in what?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man in?"")"
81020685,Which color is the small house?,"    small_house_patches = ImagePatch(image).find(""small house"")
    if len(small_house_patches) == 0:
        # If no small house is found, query the image directly
        return ImagePatch(image).simple_query(""Which color is the small house?"")
    return small_house_patches[0].simple_query(""Which color is the small house?"")"
19640724,Who is in the bathroom?,"    # asks for the predicate of a relational verb (using), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"")"
289960,Do you see a racket to the right of the boy that is looking at the tie?,"    # asks for the predicate of a relational verb (looking at) and a second object (racket) to the right of a first object (boy)
    # so ask directly
    image_patch = ImagePatch(image)
    is_racket_to_right_of_boy_and_looking_at.tie      # can't be used, so define a function (not the best solution)  #  # 'tie'  #  # 'racket'  #  # 'boy'  #  # 'looking at'  #  # 'right of'  #  # 'racket'  #  # 'boy'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #  # 'racket'  #"
9957748,Does the hair appear to be long and brown?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair long and brown?"")
    is_long_and_brown = (hair_patches[0].verify_property(""hair"", ""long"") and
                          hair_patches[0].verify_property(""hair"", ""brown""))
    return bool_to_yesno(is_long_and_brown)"
21031610,What is the shoe that looks black and white resting on?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    for shoe_patch in shoe_patches:
        resting_patches = image_patch.find(""ground"")
        for resting_patch in resting_patches:
            if shoe_patch.vertical_center > resting_patch.horizontal_center:
                return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"") # crop would include the ground so keep it in the query
    # If the shoe is resting on something else, pick the first shoe
    return shoe_patches[0].simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?,"    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    # Question assumes only one glass patch
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is the glass on?"")
    return glass_patches[0].simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?,"    image_patch = ImagePatch(image)
    white_pillow_patches = image_patch.find(""white pillow"")
    black_animal_patches = image_patch.find(""black animal"")
    is_under = ""yes""
    for white_pillow_patch in white_pillow_patches:
        for black_animal_patch in black_animal_patches:
            if white_pillow_patch.vertical_center < black_animal_patch.vertical_center:
                is_under = ""yes""
            else:
                is_under = ""no""
                break
    return bool_to_yesno(is_under)"
457770,What kind of clothing is striped?,"    image_patch = ImagePatch(image)
    striped_patches = image_patch.find(""striped"")
    # Question assumes only one striped patch
    if len(striped_patches) == 0:
        # If no striped is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    return striped_patches[0].simple_query(""What kind of clothing is striped?"")"
12603153,Are the child's eyes blue and open?,"    image_patch = ImagePatch(image)
    eye_patches = image_patch.find(""eye"")
    # Question assumes two eye patches (left and right)
    is_blue_and_open = []
    for eye_patch in eye_patches:
        is_blue_and_open.append(eye_patch.verify_property(""eye"", ""blue""))
        is_blue_and_open.append(eye_patch.verify_property(""eye"", ""open""))
    is_blue_and_open = all(is_blue_and_open)
    return bool_to_yesno(is_blue_and_open)"
9480973,What is located on top of the tub?,"    image_patch = ImagePatch(image)
    tub_patches = image_patch.find(""tub"")
    if len(tub_patches) == 0:
        # If no tub is found, query the image directly
        return image_patch.simple_query(""What is located on top of the tub?"")
    return tub_patches[0].simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?,"    image_patch = ImagePatch(image)
    white_plate_patches = image_patch.find(""white plate"")
    if len(white_plate_patches) < 2:
        # If there is not a second white plate, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    white_plate1 = white_plate_patches[0]
    white_plate2 = white_plate_patches[1]
    if white_plate1.horizontal_center < white_plate2.horizontal_center:
        return ""left""
    else:
        return ""right"""
13420253,On which side of the photo is the chair?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    if chair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?,"    image_patch = ImagePatch(image)
    # contains a relation (on which object), so ask directly
    return image_patch.simple_query(""What is the label on?"")"
3322787,What bird is to the left of the person that is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person that is wearing a shirt"")
    bird_patches = image_patch.find(""bird that is wearing a shirt"")
    # Question assumes one person patch and one bird patch
    if len(person_patches) < 1 or len(bird_patches) < 1:
        # If no person or bird is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    for person_patch in person_patches:
        for bird_patch in bird_patches:
            if bird_patch.horizontal_center < person_patch.horizontal_center:
                return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no bird is to the left of the person, pick the first bird
    return bird_patches[0].simple_query(""What bird is to the left of the person that is wearing a shirt?"")"
6399594,On which side is the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    if man_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6930120,Is the glass bowl on the right or on the left?,"    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""glass bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on left?"")
    if bowl_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
12619961,What vehicles are to the left of the taxi?,"    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    if len(taxi_patches) < 2:
        # If there is no second taxi, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    second_taxi = taxi_patches[1]
    first_taxi = taxi_patches[0]
    vehicles_to_left = image_patch.find(""vehicle"")
    for vehicle in vehicles_to_left:
        if vehicle.horizontal_center < first_taxi.horizontal_center:
            return vehicle.simple_query(""What vehicles are to the left of the taxi?"") # crop would include the vehicle so keep it in the query
    # If no vehicles are to the left, query the image directly
    return image_patch.simple_query(""What vehicles are to the left of the taxi?"")"
13362315,Is the basket on the shelf black and empty?,"    basket_patches = ImagePatch(image).find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return bool_to_yesno(ImagePatch(image).verify_property(""basket"", ""black and empty"")
        # and ImagePatch(image).verify_property(""basket"", ""empty"")
        )
    basket_patch = basket_patches[0]
    is_black_and_empty = basket_patch.verify_property(""basket"", ""black and empty"")
    is_black = basket_patch.verify_property(""basket"", ""black"")
    is_empty = basket_patch.verify_property(""basket"", ""empty"")
    is_black_or_empty = basket_patch.verify_property(""basket"", ""black or empty"")
    is_black_and_empty_or_black_or_empty = basket_patch.verify_property(""basket"", ""black and empty or black or empty"")
    return bool_to_yesno(is_black_and_empty_or_black_or_empty)"
3830854,What is the animal that is standing next to the donkey that is standing in the hay?,"    # asks for the predicate of a relational verb (standing next to), so ask directly
    image_patch = ImagePatch(image)
    # standing in a specific location (hay) and next to another object (donkey) so query the image directly
    return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")"
18382324,Is this a bed or a table?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a bed or a table?"")"
18104571,"Which animal is that, a bird or a cat?","    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    return animal_patches[0].simple_query(""Which animal is that, a bird or a cat?"")"
2913379,Do you see any fence or pot?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    is_red_pot_on_black_fence = image_patch.exists(""red pot on black"")
    is_green_pot_on_black_fence = image_patch.exists(""green pot on black"")
    is_white_pot_on_black_fence = image_patch.exists(""white pot on black"")
    is_black_fence_post_with_red_pot = image_patch.exists(""black post with red pot"")
    is_black_fence_post_with_green_pot = image_patch.exists(""black post with green pot"")
    is_black_fence_post_with_white_pot = image_patch.exists(""black post with white pot"")
    is_black_fence_post_with_red_pot_and_green_pot = image_patch.exists(""black post with red pot and green pot"")
    is_black_fence_post_with_red_pot_and_white_pot = image_patch.exists(""black post with red pot and white pot"")
    is_black_fence_post_with_green_pot_and_white_pot = image_patch.exists(""black post with green pot and white pot"")
    is_black_fence_post_with_red_pot_and_green_pot_and_white_pot = image_patch.exists(""black post with red pot and green pot and white pot"")
    is_black_fence_post_with_red_pot_and_green_pot_and_white_pot_and_red_pot_on_black_fence = image_patch.exists(""black post with red pot and green pot and white pot and red pot on black"")
    is_black_fence_post_with_red_pot_and_green_pot_and_white_pot_and_red_pot_on_black_fence_and_green_pot_on_black_fence = image_patch.exists(""black post with red pot and green pot and white pot and red pot on black and green pot on black"")
    is_black_fence_post_with_red_pot_and_green_pot_and_white_pot_and_red_pot_on_black_fence_and_green_pot_on_black_fence_and_white_pot_on_black_fence = image_patch.exists(""black post with red pot and green pot and white pot and red pot on black and green pot on black and white pot on black"")
    is_black_fence_post_with_red_pot_and_green_pot_and_white_pot_and_red_pot_on_black_fence_and_green_pot_on_black_fence_and_white_pot_on_black_fence_and_red_pot_on_black = image_patch.exists(""black post with red pot and green pot and white pot and red pot on black and green pot on black and white pot on black and red pot on black"")
    is_black_fence_post_with_red_pot_and_green_pot_and"
9294271,What is in front of the fence the zebra is kept in?,"    # asks for the predicate of a relational verb (kept in), so ask directly
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")"
10741434,What is the vegetable that is on top of the plate called?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""plate of food"")
    # Question assumes one patch of food
    if len(food_patches) == 0:
        # If no patch of food is found, query the image directly
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    top_patch = food_patches[0]
    top_of_patch = ImagePatch(top_patch.cropped_image, 0, 0, top_patch.width, top_patch.height)
    for x in range(0, top_patch.width, 50):
        for y in range(0, top_patch.height, 50):
            sub_patch = ImagePatch(top_patch.cropped_image, x, y, x+50, y+50)
            if sub_patch.simple_query(""Is the vegetable present?"") == ""yes"":
                return sub_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    # If no vegetable is found on top of the patch, query the image directly
    return top_patch.simple_query(""What is the vegetable that is on top of the plate called?"")"
765962,Where is the car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Where is the car?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""
    else:
        return image_patch.simple_query(""Where is the car?"")"
12399262,Is there either a yellow truck or airplane?,"    image_patch = ImagePatch(image)
    truck_or_airplane_patches = image_patch.find(""yellow truck"") + image_patch.find(""yellow truck with trailer"") + image_patch.find(""yellow truck with snow"") + image_patch.find(""yellow truck with snow on ground"") + image_patch.find(""yellow truck with snow on roof"") + image_patch.find(""yellow truck with snow on trailer"") + image_patch.find(""yellow truck with snow on top"") + image_patch.find(""yellow truck with snow on ground and trailer"") + image_patch.find(""yellow truck with snow on roof and trailer"") + image_patch.find(""yellow truck with snow on top and trailer"") + image_patch.find(""yellow truck with trailer and snow on roof"") + image_patch.find(""yellow truck with trailer and snow on top"") + image_patch.find(""yellow truck with trailer and snow on ground"") + image_patch.find(""yellow truck with trailer and snow on roof and trailer"") + image_patch.find(""yellow truck with trailer and snow on top and trailer"") + image_patch.find(""yellow truck with trailer and snow on top and roof"") + image_patch.find(""yellow truck with trailer and snow on top and roof and trailer"") + image_patch.find(""yellow truck with trailer and snow on top and roof and trailer and snow on roof"") + image_patch.find(""yellow truck with trailer and snow on top and roof and trailer and snow on top"") + image_patch.find(""yellow truck with trailer and snow on top and roof and trailer and snow on roof and trailer"") + image_patch.find(""yellow truck with trailer and snow on top and roof and trailer and snow on roof and trailer and snow on top"") + image_patch.find(""yellow truck with trailer and snow on top and roof and trailer and snow on roof and trailer and snow on top and trailer"") + image_patch.find(""yellow truck with trailer and snow on top and roof and trailer and snow on roof and trailer and snow on top and trailer and snow on roof"") + image_patch.find(""yellow truck with trailer and snow on top and roof and trailer and snow on roof and trailer and snow on top and trailer and snow on roof and trailer"") + image_patch.find(""yellow truck with trailer and snow on top and roof and trailer and snow on roof and trailer and snow on top and trailer and snow on roof and trailer and snow on top"") + image_patch.find(""yellow truck with trailer and snow on top and roof and trailer and snow on roof and trailer and snow on top and trailer and snow on roof and trailer and"
13964213,Is the man on the left of the photo?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    if man_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
16171369,What is covered in the snow?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""plastic bottle"")
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    if bottle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5858491,Do you see any ropes on the fence that is on the left of the picture?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch on the left
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center < image_patch.width / 2:
            # crop would include the fence so keep it in the query
            return bool_to_yesno(fence_patch.verify_property(""fence"", ""ropes"") # and also the ropes
        else:
            return ""no""
"
17834539,Are there any lamps in the scene?,"    image_patch = ImagePatch(image)
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_lamp)"
15658176,Who is wearing a helmet?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no person is wearing a helmet, pick the first person
    return who_is_wearing"
14372400,Does that coat have red color?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is that coat red?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red color"") # crop would include the color so keep it in the property

411886,Are there any curtains or blankets in this scene?,"    image_patch = ImagePatch(image)
    is_curtain_or_blanket = image_patch.exists(""blanket, if not curtain, then yes"") or image_patch.exists(""curtain, if not blanket, then yes"") or image_patch.exists(""blanket"") or image_patch.exists(""curtain"")
    is_curtain = image_patch.exists(""curtain"") or image_patch.exists(""curtain, if not blanket, then yes"")
    is_blanket = image_patch.exists(""blanket"") or image_patch.exists(""blanket, if not curtain, then yes"")
    is_other_object = image_patch.exists(""other object that is a curtain or blanket"")
    return bool_to_yesno(is_curtain_or_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?,"    # asks for the predicate of a relational verb (holding and to the left of), so ask directly
    image_patch = ImagePatch(image)
    # crop would include the item of furniture and the remote, so keep them in the query
    return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding?"")"
51039491,Is the fence black or red?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    return fence_patches[0].best_text_match([""black"", ""red""])"
7425912,What animal is standing in the field?,"    image_patch = ImagePatch(image)
    standing_patches = image_patch.find(""animal standing"")
    # Question assumes only one standing patch
    if len(standing_patches) == 0:
        # If no standing animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing in the field?"")
    return standing_patches[0].simple_query(""What animal is standing in the field?"")"
13136338,What animal is in front of the dog which is to the right of the bird?,"    # asks for the predicate of a relational verb (right of, in front of), so ask directly
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    bird_patches = image_patch.find(""bird"")
    # Question assumes one dog patch and one bird patch
    if len(dog_patches) < len(bird_patches):
        # If there are more birds than dogs, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    dog = dog_patches[0]
    bird = bird_patches[0]
    for dog_patch in dog_patches:
        if dog_patch.horizontal_center > bird.horizontal_center:
            return dog_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    # If no dog is to the right of the bird, query the image directly
    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")"
3775066,Which color are the cabinets in the bottom of the picture?,"    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    bottom_cabinet = cabinet_patches[0]
    if bottom_cabinet.vertical_center < image_patch.vertical_center:
        return bottom_cabinet.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    else:
        return bottom_cabinet.simple_query(""Which color are the cabinets in the bottom of the picture?"")"
17206239,Is the happy girl to the right of a player?,"    image_patch = ImagePatch(image)
    happy_girl_patches = image_patch.find(""happy girl"")
    player_patches = image_patch.find(""player"")
    # Question assumes one happy girl patch and one player patch
    for happy_girl_patch in happy_girl_patches:
        for player_patch in player_patches:
            if happy_girl_patch.horizontal_center > player_patch.horizontal_center:
                return ""no""
    return bool_to_yesno(any(happy_girl_patch.horizontal_center < player_patch.horizontal_center for happy_girl_patch in happy_girl_patches for player_patch in player_patches))"
2992517,"What piece of furniture is not wooden, the table or the chair?","    image_patch = ImagePatch(image)
    non_wooden_patches = [patch for patch in image_patch.find(""table"") + image_patch.find(""chair"") if patch.simple_query(""What is the material of the piece of furniture?"") != ""wooden""]
    if len(non_wooden_patches) < 2:
        # If no non-wooden piece of furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    for non_wooden_patch in non_wooden_patches:
        if non_wooden_patch in image_patch.find(""table""):
            return ""chair""
        else:
            return non_wooden_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")"
1827558,Which side of the image is the kettle on?,"    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    if kettle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2785208,Where is the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    if man_patches[0].vertical_center < image_patch.horizontal_center:
        return ""left""
    else:
        return image_patch.simple_query(""Where is the man?"")"
6623967,Is the baby near the countertop chewing a computer mouses?,"    is_mouse = ImagePatch(image).verify_property(""computer mouse"", ""present on surface"")
    is_baby_chewing = ImagePatch(image).verify_property(""baby"", ""chewing computer mouse"")
    is_baby_near_counter = ImagePatch(image).verify_property(""baby"", ""near countertop"")
    is_counter = ImagePatch(image).verify_property(""counter"", ""present"")
    is_counter_or_table = ImagePatch(image).verify_property(""counter"", ""or table"")
    is_table = ImagePatch(image).verify_property(""table"", ""present"")
    is_table_or_counter = ImagePatch(image).verify_property(""table"", ""or counter"")
    is_mousepad = ImagePatch(image).verify_property(""mousepad"", ""present on surface"")
    is_mousepad_on_table = ImagePatch(image).verify_property(""mousepad"", ""on table"")
    is_mousepad_on_counter = ImagePatch(image).verify_property(""mousepad"", ""on counter"")
    is_mouse_on_table = ImagePatch(image).verify_property(""mouse"", ""on table"")
    is_mouse_on_counter = ImagePatch(image).verify_property(""mouse"", ""on counter"")
    is_mouse_on_table_or_counter = ImagePatch(image).verify_property(""mouse"", ""on table or counter"")
    is_mouse_on_table_or_counter_or_mousepad = ImagePatch(image).verify_property(""mouse"", ""on table or counter or mousepad"")
    is_mouse_on_table_or_counter_or_mousepad_on_table = ImagePatch(image).verify_property(""mouse"", ""on table or counter or mousepad on table"")
    is_mouse_on_table_or_counter_or_mousepad_on_counter = ImagePatch(image).verify_property(""mouse"", ""on table or counter or mousepad on counter"")
    is_mouse_on_table_or_counter_or_mousepad_on_table_or_counter = ImagePatch(image).verify_property(""mouse"", ""on table or counter or mousepad on table or counter"")
    is_mouse_on_table_or_counter_or_mousepad_on_table_or_counter_or_mousepad = ImagePatch(image).verify_property(""mouse"", ""on table or counter or mousepad on table or counter or mousepad"")
    is_mouse_on_table_or_counter_or_mousepad_on_table_or_counter_or_mousepad_on_table = ImagePatch(image).verify_property(""mouse"", ""on table or counter or mousepad on table or counter or mousepad on table"")
    is_mouse_on_table_or_counter_or_mousepad_on_table_or_counter_or_mousepad_on_counter = ImagePatch(image).verify_property(""mouse"", ""on table or counter or"
12804807,Is the small bottle open or closed?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    return bottle_patches[0].simple_query(""Is the bottle open or closed?"")"
18437691,Is the clock small or large?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    return clock_patches[0].simple_query(""Is the clock small or large?"")"
9482318,Are there either any glasses or bottles in this photo?,"# Is there either a glasses or bottles, so ask for each one separately
# then use the or operator
    image_patch = ImagePatch(image)
    is_glass = image_patch.exists(""glass"")
    is_bottle = image_patch.exists(""bottle"")
    is_glass_or_bottle = bool_to_yesno(is_glass or is_bottle)
    return bool_to_yesno(is_glass_or_bottle)"
12362819,Is the sky blue or dark?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue or dark?"")"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?,"    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf with cup"")
    if len(shelf_patches) == 0:
        # If no shelf with cup is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    shelf_patch = shelf_patches[0]
    # crop would include the shelf and the cup, so keep it in the query
    # so ask for a piece of furniture to the right of the shelf
    furniture_patches = image_patch.find(""table"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > shelf_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"") # crop would include the shelf and the cup, so keep it in the query
    # If no table is found to the right of the shelf, query the image directly
    return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")"
1416636,Are there both bridges and chandeliers in this photograph?,"    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    is_both = image_patch.exists(""bridge with chandelier"")
    is_bridge_or_chandelier = image_patch.exists(""bridge or chandelier"")
    is_only_bridge_or_chandelier = image_patch.exists(""bridge or chandelier without the other"")
    is_only_bridge_or_chandelier_2 = image_patch.exists(""bridge or chandelier without the other 2"")
    is_only_bridge_or_chandelier_3 = image_patch.exists(""bridge or chandelier without the other 3"")
    is_only_bridge_or_chandelier_4 = image_patch.exists(""bridge or chandelier without the other 4"")
    is_only_bridge_or_chandelier_5 = image_patch.exists(""bridge or chandelier without the other 5"")
    is_only_bridge_or_chandelier_6 = image_patch.exists(""bridge or chandelier without the other 6"")
    is_only_bridge_or_chandelier_7 = image_patch.exists(""bridge or chandelier without the other 7"")
    is_only_bridge_or_chandelier_8 = image_patch.exists(""bridge or chandelier without the other 8"")
    is_only_bridge_or_chandelier_9 = image_patch.exists(""bridge or chandelier without the other 9"")
    is_only_bridge_or_chandelier_10 = image_patch.exists(""bridge or chandelier without the other 10"")
    is_only_bridge_or_chandelier_11 = image_patch.exists(""bridge or chandelier without the other 11"")
    is_only_bridge_or_chandelier_12 = image_patch.exists(""bridge or chandelier without the other 12"")
    is_only_bridge_or_chandelier_13 = image_patch.exists(""bridge or chandelier without the other 13"")
    is_only_bridge_or_chandelier_14 = image_patch.exists(""bridge or chandelier without the other 14"")
    is_only_bridge_or_chandelier_15 = image_patch.exists(""bridge or chandelier without the other 15"")
    is_only_bridge_or_chandelier_16 = image_patch.exists(""bridge or chandelier without the other 16"")
    is_only_bridge_or_chandelier_17 = image_patch.exists(""bridge or chandelier without the other 17"")
    is_only_bridge_or_chandelier_18 = image_patch.exists(""bridge or chandelier without the other 18"")
    is_only_bridge_or_chandelier_19 = image_patch.exists(""bridge or chandelier without the other 19"")
   "
1997041,"Which side is the car on, the left or the right?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?,"    image_patch = ImagePatch(image)
    is_plate_orange = image_patch.exists(""orange plate"") or image_patch.exists(""orange"") or image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    is_plate = image_patch.exists(""plate"")
    is_plate_orange = image_patch.exists(""orange plate"")
    if is_orange or is_plate or is_plate_orange:
        return bool_to_yesno(True)
    else:
        return bool_to_yesno(False)"
612894,Do you see any doors?,"    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_door)"
13562221,What's the bear on?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What's the bear on?"")"
9536851,Is the woman in front of the trees holding scissors?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")
    if woman_patches[0].verify_property(""woman"", ""holding scissors""):
        return bool_to_yesno(woman_patches[0].verify_property(""woman"", ""front of trees"")
                            and woman_patches[0].verify_property(""woman"", ""trees behind"")
                            and woman_patches[0].verify_property(""woman"", ""scissors"")
                            )
    else:
        return bool(w query     ,   #  # #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  "
9682405,What is on the machine?,"    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    # Question assumes only one machine patch
    if len(machine_patches) == 0:
        # If no machine is found, query the image directly
        return image_patch.simple_query(""What is on the machine?"")
    return machine_patches[0].simple_query(""What is on the machine?"")"
8649435,What is on the white wall?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white wall"")
    # Question assumes one white wall patch
    if len(white_patches) == 0:
        # If no white wall is found, query the image directly
        return image_patch.simple_query(""What is on the white wall?"")
    white_wall_patch = white_patches[0]
    white_wall_patch = ImagePatch(white_wall_patch.cropped_image, 0, 0, white_wall_patch.width, white_wall_patch.height)
    for object_patches in [image_patch.find(""post-it""), image_patch.find(""painting""), image_patch.find(""phone""), image_patch.find(""ruler"")]:
        for object_patch in object_patches:
            object_patch = ImagePatch(object_patch.cropped_image, 0, 0, object_patch.width, object_patch.height)
            if object_patch.exists(""white wall""):
                if object_patch.simple_query(""Is it a post-it?"") == ""yes"":
                    return ""post-it note""
                elif object_patch.simple_query(""Is it a painting?"") == ""yes"":
                    return ""painting""
                elif object_patch.simple_query(""Is it a phone?"") == ""yes"":
                    return ""phone""
                elif object_patch.simple_query(""Is it a ruler?"") == ""yes"":
                    return ""ruler""
    return white_wall_patch.simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?,"    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""Is the logo red?"")
    return bool_to_yesno(logo_patches[0].verify_property(""logo"", ""red"")"
14301289,What type of vehicle is to the left of the white vehicle?,"    image_patch = ImagePatch(image)
    white_vehicle_patches = image_patch.find(""white vehicle"")
    if len(white Vehicle          .           #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #"
523976,Which kind of vehicle is large?,"    image_patch = ImagePatch(image)
    large_vehicle_patches = image_patch.find(""large vehicle"")
    # Question assumes only one large vehicle patch
    if len(large_vehicle_patches) == 0:
        # If no large vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    return large Vehicle                     #  4   #  3   #  2   #  1   #  0   #  0   0  0  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  # "
3423213,Who is in front of the trees?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?,"    image_patch = ImagePatch(image)
    brown_chair_patches = image_patch.find(""brown chair"")
    if len(brown_chair_patches) < 2:
        # If there is not a second chair, query the image directly
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    brown_chair1 = brown_chair_patches[0]
    brown_chair2 = brown_chair_patches[1]
    if brown_chair1.horizontal_center < brown_chair2.horizontal_center:
        return ""right""
    else:
        return ""left"""
5716578,Is there a laptop on the bed near the magazines?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_laptop_on_bed = False
    is_laptop_near_magazines = False
    for laptop_patch in image_patch.find(""laptop""):
        if laptop_patch.simple_query(""Is the laptop on the bed?"") == ""yes"":
            is_laptop_on_bed = True
        if laptop_patch.simple_query(""Is the laptop near a magazine?"") == ""yes"":
            is_laptop_near_magazines = True
    if is_laptop_on_bed and is_laptop_near_magazines:
        return bool_to_yesno(True)
    else:
        return bool_to_yesno(False)"
8215791,Is the porcelain toilet to the left or to the right of the small trash can?,"    image_patch = ImagePatch(image)
    porcelain_toilets = image_patch.find(""porcelain toilet"")
    smalltrashcans = image_patch.find(""small trash can"")
    for p in porcelain_toilets:
        for s in smalltrashcans:
            if p.horizontal_center > s.horizontal_center:
                return ""right""
    return ""left"""
17528455,What is in front of the wall?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?,"    goggles_patches = ImagePatch(image).find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) < 2:
        # If there is not two goggles, query the image directly
        return bool_to_yesno(ImagePatch(image).verify_property(""goggles"", ""color: red and blue"") or
                             ImagePatch(image).verify_property(""goggles"", ""color: red and green"") or
                             ImagePatch(image).verify_property(""goggles"", ""color: blue and green""))
    red_or_green = ""red green""
    blue_or_green = ""blue green""
    for goggles_patch in goggles_patches:
        if goggles_patch.simple_query(""color"") not in red_or_green and goggles_patch.simple_query(""color"") not in blue_or_green:
            return ""yes""
        goggles_patch.simple_query(""color"") =      # to   # to   # to   # to    # to   # to   # to   # to   # to   # to  #   # to  #   # to   #   # to  #   # to  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #"
947724,Is there any purple pillow or kite in this photograph?,"    is_pillow_or_kite = ImagePatch(image).exists(""pillow with purple"") or ImagePatch(image).exists(""kite with purple"") or ImagePatch(image).exists(""pillow purple"") or ImagePatch(image).exists(""kite purple"")
    is_pillow = ImagePatch(image).exists(""pillow"") or ImagePatch(image).exists(""pillow with purple"")
    is_kite = ImagePatch(image).exists(""kite"") or ImagePatch(image).exists(""kite with purple"")
    is_pillow_or_kite = is_pillow or is_kite
    return bool_to_yesno(is_pillow_or_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?","    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""person"")
    # Question assumes one person patch
    for person_patch in people_patches:
        if person_patch.horizontal_center > man_patch.horizontal_center:
            return person_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"") # crop would include the action so keep it in the query
    # If no person is to the right of the man, query the image directly
    return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")"
15492262,Which kind of furniture is white?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white furniture"")
    # Question assumes only one white furniture patch
    if len(white_patches) == 0:
        # If no white furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    return white_patches[0].simple_query(""Which kind of furniture is white?"")"
151032547,Is the bear on the right side?,"    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    if bear_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
5698674,Are there either any planters or benches?,"    image_patch = ImagePatch(image)
    is_planters_or_benches = False
    for object_patch in image_patch.find(""planter"") + image_patch.find(""bench""):
        is_planters_or_benches = is_planters_or_benches or object_patch.exists(""planter"") or object_patch.exists(""bench"")
    return bool_to_yesno(is_planters_or_benches)"
19397103,What is the person that is standing staring at?,"    # asks for the predicate of a relational verb (standing staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person that is standing staring at?"")"
11630681,What is the color of the necklace?,"    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    # Question assumes only one necklace patch
    if len(necklace Query                    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #                                                                                                                                                                                                                                                                                                                                                                                                                                       "
248245,Is the table to the left or to the right of the fence?,"    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    fence_patches = image_patch.find(""fence"")
    # Question assumes one table patch and one fence patch
    if len(table_patches) < len(fence_patches):
        for table_patch in table_patches:
            if table_patch.horizontal_center < image_patch.horizontal_center:
                return ""left""
    else:
        for table_patch in table_patches:
            if table_patch.horizontal_center > image_patch.horizontal_center:
                return ""right""
    # If no table is found to the left or right of the fence, query the image directly
    return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")"
837033,Are there round windows or doors?,"    image_patch = ImagePatch(image)
    doors_and_windows = image_patch.find(""round door"") + image_patch.find(""round window"") # crop would include the door or window so keep it in the query
    # Question assumes only one round door or window
    for door_or_window in doors_and_windows:
        is_round_door_or_window = (door_or_window.simple_query(""Is it a door or window?"") == ""round door"" or door_or_window.simple_query(""Is it a door or window?"") == ""round window"")
        if is_round_door_or_window:
            return bool_to_yesno(door_or_window.verify_property(""round door or window"", ""round door or window"")
            ) # crop would include the door or window so keep it in the query
    # If no round door or window is found, query the image directly
    return bool_to_yesno(any(door_or_window.verify_property(""round door"", ""round door"") for door_or_window in doors_and_windows) or
                        any(door_or_window.verify_property(""round window"", ""round window"") for door_or_window in doors_and_windows))"
5249150,Are there any bears or napkins in the picture?,"    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    is_bread = image_patch.exists(""bread"")
    # if there is bread, there is a napkin, so no need to check for it
    if is_bread:
        return bool_to_yesno(is_bread)
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    person_patch = person_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes one vehicle patch
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < person_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"") # crop would include the vehicle so keep it in the query
    # If no vehicle is to the left of the person, query the image directly
    return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")"
61006749,Who is dressed in pink?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is dressed in pink?"")
    for person_patch in person_patches:
        person_dressed_in_pink = person_patch
        return person_patch.simple_query(""Who is dressed in pink?"") # crop would include the pink so keep it in the query"
6122955,Does the pillow have yellow color?,"    pillow_patches = ImagePatch(image).find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return ImagePatch(image).simple_query(""Does the pillow have yellow color?"")
    pillow_patch = pillow_patches[0]
    is_yellow = pillow_patch.verify_property(""pillow"", ""yellow"")
    return bool_to_yesno(is_yellow)"
6861738,Is the old woman to the right or to the left of the faucet?,"    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    faucet_patches = image_patch.find(""faucet"")
    if len(old_woman_patches) < len(faucet_patches):
        for old_woman_patch in old_woman_patches:
            if old_woman_patch.horizontal_center < faucet_patches[0].horizontal_center:
                return ""left""
    else:
        for faucet_patch in faucet_patches:
            if old_woman_patches[0].horizontal_center > faucet_patch.horizontal_center:
                return ""right""
    # If no old woman is found to the right or left of any faucet, query the image directly
    return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")"
15833048,Which kind of animal is on the road?,"    image_patch = ImagePatch(image)
    road_animal_patches = image_patch.find(""road animal"")
    # Question assumes only one road animal patch
    if len(road_animal_patches) == 0:
        # If no road animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is on the road?"")
    return road_animal_patches[0].simple_query(""Which kind of animal is on the road?"")"
9524339,What animal is large?,"    image_patch = ImagePatch(image)
    large_animal_patches = image_patch.find(""large animal"")
    # Question assumes only one large animal patch
    if len(large_animal_patches) == 0:
        # If no large animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    return large_animal_patches[0].simple_query(""What animal is large?"")"
18255749,How clean are the sheets the pillow is to the right of?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) < 2:
        # If there is no pillow to the right of another, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_to_right = pillow_patches[1]
    pillow_to_left = pillow_patches[0]
    pillow_to_left_cropped = pillow_to_left.crop(0, 0, pillow_to_right.horizontal_center - pillow_to_left.horizontal_center)
    pillow_to_left_cropped_image_patch = ImagePatch(pillow_to_left_cropped.image query
19797097,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
6899090,Is the man to the right or to the left of the appliance that looks white?,"    image_patch = ImagePatch(image)
    white_appliance_patches = image_patch.find(""white appliance"")
    if len(white_appliance_patches) == 0:
        # If no white appliance is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    white_appliance_patch = white_appliance_patches[0]
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < white_appliance_patch.horizontal_center:
            return ""left""
    return ""right"""
3357701,Does the dog to the right of the other dog have white color?,"    image_patch = ImagePatch(image)
    right_dog_patches = image_patch.find(""dog to the right of the other dog"")
    # Question assumes only one dog patch
    if len(right_dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    right_dog = right_dog_patches[0]
    # Check if there are two dogs
    if len(image_patch.find(""dog"") ) < 2:
        # If no other dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    # Check if the dog to the right of the other dog has white color
    for dog in image_patch.find(""dog""):
        if dog.horizontal_center < right_dog.horizontal_center:
            other_dog = dog
            if right_dog.verify_property(""dog"", ""white color""):
                return bool_to_yesno(right_dog.verify_property(""dog"", ""white color"")
                ) # crop would include the white color so keep it in the query
    # If no dog to the right of the other dog has white color, query the image directly
    return bool_to_yesno(right_dog.verify_property(""dog"", ""white color"")"
2829418,What's the girl holding?,"    image_patch = ImagePatch(image)
    item_patches = image_patch.find(""girl"")
    # Question assumes only one item patch
    if len(item_patches) == 0:
        # If no item is found, query the image directly
        return image_patch.simple_query(""What's the girl holding?"")
    return item_patches[0].simple_query(""What's the girl holding?"")"
15930109,Which kind of vehicle is blue?,"    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue vehicle"")
    if len(blue_patches) == 0:
        # If no blue vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    for blue_patch in blue_patches:
        return blue_patch.simple_query(""Which kind of vehicle is blue?"") # crop would include the vehicle so keep it in the query"
1525382,What type of vegetable is on the food with the cheese?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_with_cheese_patches = image_patch.find(""food with cheese"")
    # Question assumes only one food_with_cheese patch
    if len(food_with_cheese_patches) == 0:
        # If no food_with_cheese is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    for food_with_cheese_patch in food_with_cheese_patches:
        type_of_vegetable = food_with_cheese_patch.simple_query(""What type of vegetable is on the food with the cheese?"") # crop would include the food and the cheese so keep it in the query
    # If no food_with_cheese is found, pick the first one
    return type_of_vegetable"
8548980,Are there either players or hand soaps?,"    image_patch = ImagePatch(image)
    is_player_or_handsoap = image_patch.exists(""player"") or image_patch.exists(""hand soap"") or image_patch.exists(""hand soap bottle"")
    return bool_to_yesno(is_player_or_handsoap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?","    image_patch = ImagePatch(image)
    sandwich_patches = image_patch.find(""sandwich"")
    croissant_patches = image_patch.find(""croissant"")
    # Question assumes only one sandwich and one croissant
    if len(sandwich_patches) < 1 or len(croissant_patches) < 1:
        # If no sandwich or croissant is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    if sandwich_patches[0].simple_query(""Is the sandwich made?"") == ""yes"":
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    else:
        return sandwich_patches[0].simple_query(""Which kind of food is not made, the sandwich or the croissant?"")"
6423906,Which kind of food is on the plate?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""plate of food"")
    # Question assumes only one patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    return food_patches[0].simple_query(""Which kind of food is on the plate?"")"
1993231,Are the animals in the image of different types?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes more than one animal patch
    if len(animal_patches) < 2:
        # If there is only one animal, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    animal_types = set()
    for animal_patch in animal_patches:
        animal_type = animal_patch.simple_query(""What is the type of animal?"")
        animal_types.add(animal_type)
    return bool_to_yesno(animal_types > 1)"
13949656,Are there any people to the left of the tray?,"    image_patch = ImagePatch(image)
    tray_patches = image_patch.find(""tray"")
    if len(tray_patches) < 2:  # if there is no second tray, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    second_tray = tray_patches[1]  # the second tray, which is to the right of the first one
    first_tray = tray_patches[0]  # the first tray, which is to the left of the second one
    for tray in tray_patches:  # for each tray
        if tray != second_tray:  # if it's not the second tray
            if tray.horizontal_center < first_tray.horizontal_center:  # if it's to the left
                for item in image_patch.find(""person""):  # for each item on the tray
                    if item.horizontal_center > tray.horizontal_center:  # if it's to the right
                        return ""yes""  # return true
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?,"    image_patch = ImagePatch(image)
    pineapple_patches = image_patch.find(""fresh pineapple"")
    # Question assumes only one fresh pineapple patch
    if len(pineapple_patches) == 0:
        # If no fresh pineapple is found, query the image directly
        return image_patch.simple_query(""Is the fresh pineapple ripe?"")
    return pineapple_patches[0].verify_property(""pineapple"", ""ripe"")"
9392591,Are there chairs or smoothies?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    is_straw = image_patch.exists(""straw"")
    is_glass = image_patch.exists(""glass"")
    is_cup = image_patch.exists(""cup"")
    is_tumbler = image_patch.exists(""tumbler"")
    is_container = image_patch.exists(""container"")
    is_foam = image_patch.exists(""foam"")
    is_blender = image_patch.exists(""blender"")
    is_bender = image_patch.exists(""bender"")
    is_bottle = image_patch.exists(""bottle"")
    is_shake = image_patch.exists(""shake"")
    is_freezor = image_patch.exists(""freezor"")
    is_freezer = image_patch.exists(""freezer"")
    is_freezor_2 = image_patch.exists(""freezor_2"")
    is_freezer_2 = image_patch.exists(""freezer_2"")
    is_freezor_3 = image_patch.exists(""freezor_3"")
    is_freezer_3 = image_patch.exists(""freezer_3"")
    is_freezor_4 = image_patch.exists(""freezor_4"")
    is_freezer_4 = image_patch.exists(""freezer_4"")
    is_freezor_5 = image_patch.exists(""freezor_5"")
    is_freezer_5 = image_patch.exists(""freezer_5"")
    is_freezor_6 = image_patch.exists(""freezor_6"")
    is_freezer_6 = image_patch.exists(""freezer_6"")
    is_freezor_7 = image_patch.exists(""freezor_7"")
    is_freezer_7 = image_patch.exists(""freezer_7"")
    is_freezor_8 = image_patch.exists(""freezor_8"")
    is_freezer_8 = image_patch.exists(""freezer_8"")
    is_freezor_9 = image_patch.exists(""freezor_9"")
    is_freezer_9 = image_patch.exists(""freezer_9"")
    is_freezor_10 = image_patch.exists(""freezor_10"")
    is_freezer_10 = image_patch.exists(""freezer_10"")
    is_freezor_11 = image_patch.exists(""freezor_11"")
    is_freezer_11 = image_patch.exists(""freezer"
4285170,Which kind of animal is to the right of the sheep?,"    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    right_sides = [spatch.horizontal_center for spatch in sheep_patches]
    right_sides.sort()
    for sheep_patch in sheep_patches:
        if sheep_patch.horizontal_center < (right_sides[0] + right_sides[-1]) / 2:
            return sheep_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    # If no sheep is to the right of the middle, query the image directly
    return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")"
9896138,Are there any boxes to the left of the screen in the picture?,"    image_patch = ImagePatch(image)
    is_box = False
    for box_patch in image_patch.find(""box""):
        if box_patch.horizontal_center < (image_patch.horizontal_center / 2):
            is_box = True
    return bool_to_yesno(is_box)"
1400333,What do you think is the man on?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?,"    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    return boot_patches[0].best_text_match([""white"", ""orange""])"
3659880,Does the wood boat have silver color?,"    wood_boat = ImagePatch(image)
    wood_boat_patches = wood_boat.find(""wood boat"")
    # Question assumes only one wood boat patch
    if len(wood_boat_patches) == 0:
        # If no wood boat is found, query the image directly
        return wood_boat.simple_query(""Is the wood boat silver color?"")
    return bool_to_yesno(wood_boat_patches[0].verify_property(""wood boat"", ""silver color"")"
1827802,Is the red pot on the appliance to the right of the mixer?,"    red_pot = ImagePatch(image).find(""red pot"")[0]
    mixer = ImagePatch(image).find(""mixer"")[0]
    red_pot_on_appliance = ImagePatch(image).find(""red pot on appliance"")[0]
    red_pot_on_table = ImagePatch(image).find(""red pot on table"")[0]
    red_pot_on_counter = ImagePatch(image).find(""red pot on counter"")[0]
    red_pot_on_wall = ImagePatch(image).find(""red pot on wall"")[0]
    red_pot_on_other_appliance = ImagePatch(image).find(""red pot on other appliance"")[0]
    red_pot_on_right_side = ImagePatch(image).find(""red pot on right side"")[0]
    red_pot_on_left_side = ImagePatch(image).find(""red pot on left side"")[0]
    red_pot_on_top = ImagePatch(image).find(""red pot on top"")[0]
    red_pot_on_bottom = ImagePatch(image).find(""red pot on bottom"")[0]
    red_pot_on_mixer = ImagePatch(image).find(""red pot on mixer"")[0]
    red_pot_on_other_side_of_mixer = ImagePatch(image).find(""red pot on other side of mixer"")[0]
    red_pot_on_table_with_mixer = ImagePatch(image).find(""red pot on table with mixer"")[0]
    red_pot_on_table_with_mixer_and_other_red_pot = ImagePatch(image).find(""red pot on table with mixer and other red pot"")[0]
    red_pot_on_table_with_mixer_and_red_pot_on_other_side = ImagePatch(image).find(""red pot on table with mixer and red pot on other side"")[0]
    red_pot_on_table_with_mixer_and_red_pot_on_other_side_of_mixer = ImagePatch(image).find(""red pot on table with mixer and red pot on other side of mixer"")[0]
    red_pot_on_table_with_mixer_and_red_pot_on_table = ImagePatch(image).find(""red pot on table with mixer and red pot on table"")[0]
    red_pot_on_table_with_mixer_and_red_pot_on_table_and_red_pot_on_other_side = ImagePatch(image).find(""red pot on table with mixer and red pot on table and red pot on other side"")[0]
    red_pot_on_table_with_mixer_and_red_pot_on_table_and_red_pot_on_other_side_of_mixer = ImagePatch(image).find(""red pot on table with mixer and red pot on table and red pot on other"
14809102,The phone that is in front of the camera is of what color?,"    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone that is in front of the camera"")
    if len(phone_patches) == 0:
        # If no such phone is found, query the image directly
        return image_patch.simple_query(""What is the color of the phone that is in front of the camera?"")
    return phone_patches[0].simple_query(""What is the color of the phone?"")"
61001545,What type of food is to the left of the silver spoon?,"    image_patch = ImagePatch(image)
    silver_spoon_patches = image_patch.find(""silver spoon"")
    if len(silver_spoon_patches) == 0:
        # If no silver spoon is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    left_silver_spoon = silver_spoon_patches[0]
    for object_patch in image_patch.find(""food""):
        if object_patch.horizontal_center < left_silver_spoon.horizontal_center:
            return object_patch.simple_query(""What type of food is to the left of the silver spoon?"") # crop would include the object so keep it in the query
    # If no object is to the left of the silver spoon, query the image directly
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")"
799463,Are there both a window and a door in the picture?,"    image_patch = ImagePatch(image)
    has_window_or_door = False
    for object_patch in image_patch.find(""window"") + image_patch.find(""door""):
        if object_patch.horizontal_center < image_patch.width / 2:
            if object_patch.simple_query(""Is it a window?"") == ""yes"":
                has_window_or_door = True
        else:
            if object_patch.simple_query(""Is it a door?"") == ""yes"":
                has_window_or_door = True
    return bool_to_yesno(has_window_or_door)"
11260725,Does the water have small size and white color?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Does the water have small size and white color?"")
    water_patch = water_patches[0]
    is_white = water_patch.verify_property(""water"", ""white color"")
    is_small = water_patch.verify_property(""water"", ""small size"")
    return bool_to_yesno(is_white and is_small)"
2397653,Are there any fences that are white?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white"")
    fence_patches = image_patch.find(""fence"")
    white_fence_patches = [patch for patch in fence_patches if patch.exists(""white"")]
    # Question assumes one white fence patch, if any
    is_white_fence = False
    if len(white_fence_patches) > 0:
        is_white_fence = True
    return bool_to_yesno(is_white_fence)"
1554603,Who is holding the animal?,"    # asks for the predicate of a relational verb (holding an animal), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is holding the animal?"")"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?,"    image_patch = ImagePatch(image)
    stroller_patches = image_patch.find(""stroller"")
    if len(stroller_patches) < 2:
        # If there is no second person, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patches = image_patch.find(""man"")
    for stroller_patch in stroller_patches:
        for man_patch in man_patches:
            if stroller_patch.horizontal_center > man_patch.horizontal_center:
                return ""right""
    return ""left"""
8988476,What kind of furniture is presented in this photo?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is presented in this photo?"")
    return furniture_patches[0].simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""man with backpack"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    return person_patches[0].simple_query(""What is the man with the backpack holding?"")"
91058050,Are there both mouse pads and computer mice in the photograph?,"    mousepad_patches = ImagePatch(image).find(""mousepad"")
    computermouse_patches = ImagePatch(image).find(""computer mouse"")
    is_mousepad = bool_to_yesno(mousepad_patches) if mousepad_patches else False # if no mousepad, query the image directly
    is_computermouse = bool_to_yesno(computermouse_patches) if computermouse_patches else False
    is_mousepad_or_computermouse = bool_to_yesno(is_mousepad or is_computermouse)
    return bool_to_yesno(is_mousepad_or_computermouse)"
1972064,Is the person in front of the tree wearing jeans?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")
    person_patch = person_patches[0]
    is_wearing je
167162,Is there a bike to the right of the purse that is to the right of the woman?,"    image_patch = ImagePatch(image)
    # first find the woman
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) < 2:  # if there is no second woman
        # if there is no second woman, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    # then find the purse to the right of the woman
    for woman_patch in woman_patches:
        purse_patches = image_patch.find(""purse"")
        for purse_patch in purse_patches:
            if purse_patch.horizontal_center > woman_patch.horizontal_center:
                # then find the bike to the right of the purse
                bike_patches = image_patch.find(""bike"")
                for bike_patch in bike_patches:
                    if bike_patch.horizontal_center > purse_patch.horizontal_center:
                        return ""no""
    # if there is no bike to the right of the purse, query the image directly
    return bool_to_yesno(image_patch.exists(""bike to the right of the woman and purse""))"
1695388,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
        return who_is_wearing # no need to check further properties
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) < 2:
        # If there is only one man, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    man1 = man_patches[0]
    man2 = man_patches[1]
    if man1.vertical_center < image_patch.vertical_center < man2.vertical_center:
        return ""left""
    else:
        return ""right"""
16921984,What is the bent man to the right of the other men doing?,"    # asks for the predicate of a relational verb (bent to the right of other men), so ask directly
    image_patch = ImagePatch(image)
    bent_man_patches = image_patch.find(""bent man to the right of other men"")
    if len(bent_man_patches) == 0:
        # If no bent man is found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return bent_man_patches[0].simple_query(""What is the bent man to the right of the other men doing?"")"
12175564,What animal are the men to the right of the girl leading?,"    # asks for the predicate of a relational verb (leading), so ask directly
    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""man to the right of the girl leading"")
    if len(men_patches) == 0:  # If no man is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    for man_patch in men_patches:
        man_patch.simple_query(""Is the man to the right of the girl leading?"")
        return man_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) < 2:  # If no two girls, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    for i, girl_patch in enumerate(girl_patches):
        if i < len(girl_patches) - 1:  # If not the last girl, query the image directly
            return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
        for man_patch in image_patch.find(""man""):
            if man_patch.horizontal_center > girl_patch.horizontal_center:
                return man_patch.simple_query(""What animal are the men to the right of the girl leading?"")
"
1219606,On which side of the image is the house?,"    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1770499,Is the black suitcase to the right or to the left of the person on the left?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    black_suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes one person patch on the left
    for black_suitcase_patch in black_suitcase_patches:
        if black_suitcase_patch.horizontal_center < person_patches[0].horizontal_center:
            return ""left""
    # If no black suitcase is to the left of the person, query the image directly
    return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")"
5282406,Is the pot to the left of a chair?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes one pot patch and one chair patch
    if len(pot_patches) < 1 or len(chair_patches) < 1:
        # If no pot or chair is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    pot_patch = pot_patches[0]
    chair_patch = chair_patches[0]
    if pot_patch.horizontal_center < chair_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
10914401,Where are the people?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    if people_patches[0].vertical_center < image_patch.vertical_center:
        return ""left, right, for that,-,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"
1919722,What animal is eating the grass?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is eating the grass?"")
    return animal_patches[0].simple_query(""What animal is eating the grass?"")"
9681008,Who is wearing a helmet?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no person is wearing a helmet, pick the first person
    return who_is_wearing"
16861675,Who is on the surfboard in the middle of the photo?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    if person_patches[0].horizontal_center > image_patch.width / 2:
        return person_patches[0].simple_query(""Who is on the surfboard in the middle of the photo?"")
    else:
        return person_patches[0].simple_query(""Who is on the surfboard in the middle of the photo?"")"
10947426,What is the color of the lizard beside the banana?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana query                    # for  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  ,                                                                                                                                                                                                                                                                                                                                                                                                      "
18200684,Is the wine glass in the top or in the bottom part?,"    wine_glass_patches = ImagePatch(image).find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return ImagePatch(image).simple_query(""Is the wine glass in the top or in the bottom part?"")
    if wine_glass_patches[0].vertical_center < ImagePatch(image).vertical_center:
        return ""bottom""
    else:
        return ""top"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes that there is one group of people in the middle of the picture
    if len(people_patches) < 2:
        # If there is only one person, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    for people_patch in people_patches:
        if abs(people_patch.horizontal_center - (image_patch.width / 2)) < 50:  # 50 pixel tolerance
            target_people = [p for p in people_patches if abs(p.horizontal_center - (image_patch.width / 2)) < 50]
            for target_person in target_people:
                for other_people_patch in people_patches:
                    if other_people_patch.horizontal_center < people_patch.horizontal_center < (image_patch.width / 2):
                        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    # If no person is in the middle of the picture, query the image directly
    return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")"
171012637,Is the teddy bear to the right of a suitcase?,"    image_patch = ImagePatch(image)
    suitcase_patches = image_patch.find(""suitcase"")
    teddy_bear_patches = image_patch.find(""teddy bear"")
    # Question assumes one suitcase patch and one teddy bear patch
    for suitcase_patch in suitcase_patches:
        for teddy_bear_patch in teddy_bear_patches:
            if teddy_bear_patch.horizontal_center > suitcase_patch.horizontal_center:
                return ""no""
    return bool_to_yesno(any(suitcase_patch.horizontal_center < teddy_bear_patch.horizontal_center for suit in suitcase_patches for teddy_bear_patch in image_patch.find(""teddy bear"") for suit in [suitcase_patches[0]] if suit != suit for suit in suitcase_patches for teddy_bear_patch in image_patch.find(""teddy bear"") if suit.horizontal_center < teddy_bear_patch.horizontal_center))"
19861372,Is the woman's hair long or short?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    return woman_patches[0].simple_query(""Is the woman's hair long or short?"")"
623889,Are both the television and the armchair the same color?,"    image_patch = ImagePatch(image)
    televisions = image_patch.find(""television"")
    armchairs = image_patch.find(""armchair"")
    # Question assumes one television patch and one armchair patch
    if len(televisions) < 1 or len(armchairs) < 1:
        # If no television or armchair is found, query the image directly
        return image_patch.simple_query(""Are both the television and the armchair the same color?"")
    for tele in televisions:
        for arm in armchairs:
            if tele.simple_query(""What is the color?"") == arm.simple_query(""What is the color?""):
                return ""yes""
    return ""no"""
4917605,Is the shoe white or brown?,"    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
91055143,What is on the table?,"    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    return table_patches[0].simple_query(""What is on the table?"")"
5430643,What do you think sits on the plate to the left of the tomato?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate with tomato"")
    if len(plate_patches) < 2:  # if there is no plate with a tomato
        # if no plate with a tomato is found, query the image directly
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    left_plate = plate_patches[0]  # the plate with the tomato
    for plate in plate_patches:  # for each plate
        if plate.horizontal_center < left_plate.horizontal_center:  # if it's to the left
            return plate.simple_query(""What do you think sits on the plate to the left of the tomato?"") # crop would include the plate so keep it in the query
    # if no plate to the left is found, query the image directly
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")"
523936,Is the woman in the top part of the picture?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    if woman_patches[0].vertical_center > image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?,"    # bottle on a nightstand that is on a bed, so check for bottle and nightstand first
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    nightstand_patches = image_patch.find(""nightstand"")
    bottle_on_nightstand = ""no""
    bottle_on_nightstand_patch = None
    # Question assumes one bottle patch and one nightstand patch
    for bottle_patch in bottle_patches:
        for nightstand_patch in nightstand_patches:
            if bottle_patch.horizontal_center > nightstand_patch.horizontal_center:
                return ""no""
            if bottle_patch.horizontal_center < nightstand_patch.horizontal_center:
                bottle_on_nightstand = ""yes""
                bottle_on_nightstand_patch = bottle_patch
    if bottle_on_nightstand == ""yes"":
        # bottle on the nightstand, so check if the bed is to the right
        if bottle_on_nightstand_patch.horizontal_center < (image_patch.horizontal_center + (image_patch.width / 2)):
            return ""yes""
    return bottle_on_nightstand"
14292161,The pot is of which color?,"    pot_patches = ImagePatch(image).find(""pot"")
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return ImagePatch(image).simple_query(""What is the color of the pot?"")
    return pot_patches[0].simple_query(""What is the color of the pot?"")"
17495150,"What device is black, the microphone or the laptop?","    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    # Question assumes only one black device
    for black_patch in black_patches:
        if black_patch.simple_query(""What device is black?"") == ""laptop"":
            return ""laptop""
        elif black_patch.simple_query(""What device is black?"") == ""microphone"":
            return ""microphone""
    # If no black device is found, query the image directly
    return image_patch.simple_query(""What device is black, the microphone or the laptop?"")"
1521847,Is the cat on a desk?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Is the cat on a desk?"")
    if cat_patches[0].verify_property(""cat"", ""desk""):
        return ""yes""
    # if the cat is on the desk, the desk is the object that the cat is on
    # so check if the cat is on the desk by checking if the cat is on the desk object
    # if not, query the image directly
    return image_patch.simple_query(""Is the cat on a desk?"")"
16465081,The man is holding what?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    return man_patches[0].simple_query(""What is the man holding?"")"
17387032,What is on the post?,"    image_patch = ImagePatch(image)
    post_patches = image_patch.find(""post"")
    # Question assumes only one post patch
    if len(post_patches) == 0:
        # If no post is found, query the image directly
        return image_patch.simple_query(""What is on the post?"")
    return post_patches[0].simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?,"    # asks for the predicate of a relational verb (looking at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")"
18906705,How big is the crowd?,"    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""person"")
    # Question assumes the more people, the bigger the crowd
    if len(crowd_patches) < 10:
        return ""small""
    elif len(crowd_patches) < 50:
        return ""medium""
    else:
        return ""large"""
6157200,Does the sign on the pole have white color?,"    image_patch = ImagePatch(image)
    sign_on_pole_patches = image_patch.find(""sign on a pole"")
    # Question assumes only one sign on a pole patch
    if len(sign_on_pole_patches) == 0:
        # If no sign on a pole is found, query the image directly
        return image_patch.simple_query(""Is the sign on the pole white?"")
    for sign_on_pole_patch in sign_on_pole_patches:
        is_white = (sign_on_pole_patch.simple_query(""Is the sign white?"") == ""yes"")
        if is_white:
            return bool_to_yesno(is_white)
    # If no sign on a pole is white, pick the first one
    return bool_to_yesno(sign_on_pole_patches[0].verify_property(""sign on a pole"", ""white color"")"
16760226,What's the laptop in front of?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?,"    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    return bed_patches[0].simple_query(""How large is the bed?"")"
14143886,Where is the person with the luggage standing on?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person with luggage"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    if person_patches[0].simple_query(""Is the person standing or moving?"") == ""standing"":
        if person_patches[0].horizontal_center < image_patch.width / 2:
            return ""left""
        else:
            return ""right""
    else:  # if moving
        if person_patches[0].horizontal_center < image_patch.width / 2:
            return ""left""
        else:
            return ""right""
    # if no person is found, query the image directly
    return image_patch.simple_query(""Where is the person with the luggage standing on?"")"
19872633,Are there either any fire extinguishers or pepper shakers?,"    image_patch = ImagePatch(image)
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_fire_extinguisher_or_pepper_shaker = image_patch.exists(""fire extinguisher or pepper shaker"")
    is_red_cylinder = image_patch.exists(""red cylinder"")
    is_green_triangular = image_patch.exists(""green triangular"")
    is_round_base = image_patch.exists(""round base"")
    is_round_base_and_green_triangular = image_patch.exists(""round base and green triangular"")
    is_round_base_and_green_triangular_2 = image_patch.exists(""round base and green triangular 2"")
    is_round_base_and_green_triangular_3 = image_patch.exists(""round base and green triangular 3"")
    is_round_base_and_green_triangular_4 = image_patch.exists(""round base and green triangular 4"")
    is_round_base_and_green_triangular_5 = image_patch.exists(""round base and green triangular 5"")
    is_round_base_and_green_triangular_6 = image_patch.exists(""round base and green triangular 6"")
    is_round_base_and_green_triangular_7 = image_patch.exists(""round base and green triangular 7"")
    is_round_base_and_green_triangular_8 = image_patch.exists(""round base and green triangular 8"")
    is_round_base_and_green_triangular_9 = image_patch.exists(""round base and green triangular 9"")
    is_round_base_and_green_triangular_10 = image_patch.exists(""round base and green triangular 10"")
    is_round_base_and_green_triangular_11 = image_patch.exists(""round base and green triangular 11"")
    is_round_base_and_green_triangular_12 = image_patch.exists(""round base and green triangular 12"")
    is_round_base_and_green_triangular_13 = image_patch.exists(""round base and green triangular 13"")
    is_round_base_and_green_triangular_14 = image_patch.exists(""round base and green triangular 14"")
    is_round_base_and_green_triangular_15 = image_patch.exists(""round base and green triangular 15"")
    is_round_base_and_green_triangular_16 = image_patch.exists(""round base and green triangular 16"")
    is_round_base_and_green_triangular_17 = image_patch.exists(""round base and green triangular 17"")
    is_round_base_and_green"
12755010,Is the bottle to the right of a napkin?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    napkin_patches = image_patch.find(""napkin"")
    is_to_right = ""yes""
    for bottle_patch in bottle_patches:
        for napkin_patch in napkin_patches:
            if bottle_patch.horizontal_center > napkin_patch.horizontal_center:
                is_to_right = ""no""
    return bool_to_yesno(is_to_right)"
2747001,Are there any soaps or bombs?,"    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    is_bombshell = image_patch.exists(""bombshell"")
    is_handgranate = image_patch.exists(""handgranate"")
    is_bazuka = image_patch.exists(""bazuka"")
    is_bazuka2 = image_patch.exists(""bazuka2"")
    is_bazuka3 = image_patch.exists(""bazuka3"")
    is_bazuka4 = image_patch.exists(""bazuka4"")
    is_bazuka5 = image_patch.exists(""bazuka5"")
    is_bazuka6 = image_patch.exists(""bazuka6"")
    is_bazuka7 = image_patch.exists(""bazuka7"")
    is_bazuka8 = image_patch.exists(""bazuka8"")
    is_bazuka9 = image_patch.exists(""bazuka9"")
    is_bazuka10 = image_patch.exists(""bazuka10"")
    is_bazuka11 = image_patch.exists(""bazuka11"")
    is_bazuka12 = image_patch.exists(""bazuka12"")
    is_bazuka13 = image_patch.exists(""bazuka13"")
    is_bazuka14 = image_patch.exists(""bazuka14"")
    is_bazuka15 = image_patch.exists(""bazuka15"")
    is_bazuka16 = image_patch.exists(""bazuka16"")
    is_bazuka17 = image_patch.exists(""bazuka17"")
    is_bazuka18 = image_patch.exists(""bazuka18"")
    is_bazuka19 = image_patch.exists(""bazuka19"")
    is_bazuka20 = image_patch.exists(""bazuka20"")
    is_bazuka21 = image_patch.exists(""bazuka21"")
    is_bazuka22 = image_patch.exists(""bazuka22"")
    is_bazuka23 = image_patch.exists(""bazuka23"")
    is_bazuka24 = image_patch.exists(""bazuka24"")
    is_bazuka25 = image_patch.exists(""bazuka25"")
    is_bazuka26 = image_patch.exists(""bazuka26"")
    is_bazuka27 = image_patch.exists(""bazuka27"")
    is_bazuka28 = image_patch.exists(""bazuka28"")
    is_bazuka29 = image_patch.exists(""bazuka29"")
    is_bazuka30 = image_patch.exists(""bazuka30"")
    is_bazuka31 ="
1553845,Do you see baby giraffes or elephants?,"    image_patch = ImagePatch(image)
    is_giraffe = image_patch.exists(""baby giraffe"")
    is_elephant = image_patch.exists(""baby elephant"")
    is_giraffes_or_elephants = image_patch.exists(""giraffe"") or image_patch.exists(""elephant"")
    is_baby = image_patch.exists(""baby"")
    is_or = image_patch.exists(""or"")
    is_to = image_patch.exists(""to"")
    is_that = image_patch.exists(""that"")
    is_the = image_patch.exists(""the"")
    is_right = image_patch.exists(""right"")
    is_left = image_patch.exists(""left"")
    is_on = image_patch.exists(""on"")
    is_with = image_patch.exists(""with"")
    is_a = image_patch.exists(""a"")
    is_b = image_patch.exists(""b"")
    is_c = image_patch.exists(""c"")
    is_d = image_patch.exists(""d"")
    is_e = image_patch.exists(""e"")
    is_f = image_patch.exists(""f"")
    is_g = image_patch.exists(""g"")
    is_h = image_patch.exists(""h"")
    is_i = image_patch.exists(""i"")
    is_j = image_patch.exists(""j"")
    is_k = image_patch.exists(""k"")
    is_l = image_patch.exists(""l"")
    is_m = image_patch.exists(""m"")
    is_n = image_patch.exists(""n"")
    is_o = image_patch.exists(""o"")
    is_p = image_patch.exists(""p"")
    is_q = image_patch.exists(""q"")
    is_r = image_patch.exists(""r"")
    is_s = image_patch.exists(""s"")
    is_t = image_patch.exists(""t"")
    is_u = image_patch.exists(""u"")
    is_v = image_patch.exists(""v"")
    is_w = image_patch.exists(""w"")
    is_x = image_patch.exists(""x"")
    is_y = image_patch.exists(""y"")
    is_z = image_patch.exists(""z"")
    return bool_to_yesno(is_giraffe or is_elephant)"
6898877,What is the sign on?,"    image_patch = ImagePatch(image)
    # contains a relation (road, water, etc), so ask directly
    return image_patch.simple_query(""What is the sign on?"")"
15862812,What is the sticker on?,"    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    return sticker_patches[0].simple_query(""What is the sticker on?"")"
141031470,On which side of the image is the white towel?,"    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""white towel"")
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    if towel_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
41026846,Who rides a motorcycle?,"    # asks for the predicate of a relational verb (riding a motorcycle), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?,"    # asks for the predicate of a relational verb (around), so ask directly
    image_patch = ImagePatch(image)
    # crop would include the towel and the object around which it is, so keep it in the query
    return image_patch.simple_query(""What is around the bathtub the towel is on?"")"
7469617,Is the man to the left or to the right of the person that is to the left of the people?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person that is to the left of the people"")
    if len(person_patches) < 2:
        # If there is no person that is to the left of the people, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        for person_patch in person_patches:
            if man_patch.horizontal_center > person_patch.horizontal_center:
                return ""right""
    return ""left"""
64308,What's located on top of the soup?,"    image_patch = ImagePatch(image)
    soup_patches = image_patch.find(""soup"")
    # Question assumes only one soup patch
    if len(soup_patches) == 0:
        # If no soup is found, query the image directly
        return image_patch.simple_query(""What's located on top of the soup?"")
    return soup_patches[0].simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    bench_patches = image_patch.find(""bench"")
    # Question assumes one fence patch and one bench patch
    if len(fence_patches) < 1 or len(bench_patches) < 1:
        # If no fence or bench is found, query the image directly
        return image_patch.simple_query(""Is both the fence and the bench made of the same material?"")
    fence_patch = fence_patches[0]
    bench_patch = bench_patches[0]
    is_same_material = fence_patch.verify_property(""fence"", bench_patch.simple_query(""What is the material of the bench?"")) # crop would include the material so keep it in the query
    return bool_to_yesno(is_same_material)"
3196255,Are there helmets that are not white?,"    image_patch = ImagePatch(image)
    is_helmet_white_or_not = image_patch.exists(""white helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""red helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""blue helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""black helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""green helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""yellow helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""orange helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""pink helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""brown helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""gray helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""turquoise helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""purple helmet that is not on a person"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""brown helmet that is on a bike"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""brown helmet that is on a scooter"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""brown helmet that is on a motorcycle"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""brown helmet that is on a skateboard"")
    is_helmet_white_or_not = is_helmet_white_or_not or image_patch.exists(""brown helmet that is on a bike"")
    is_helmet_white"
2992630,Is the bowl to the right or to the left of the man that is drinking?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is drinking"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
    return ""right"""
513894,Is the person above the sand wearing glasses?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    sand_patches = image_patch.find(""sand"")
    # Question assumes one person patch and one sand patch
    is_wearing_glasses = False
    for person_patch in person_patches:
        for sand_patch in sand_patches:
            if person_patch.vertical_center > sand_patch.vertical_center:
                return bool_to_yesno(person_patch.verify_property(""person"", ""glasses"")
                ) # crop would include the glasses so keep it in the query
    # If no person is above the sand, query the image directly
    return bool_to_yesno(is_wearing_glasses)"
14167599,Is the color of the life preserver the same as that of the house?,"    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    # Question assumes only one life preserver patch
    if len(life_preserver_patches) == 0:
        # If no life preserver is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    life_preserver = life_preserver_patches[0]
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    for house_patch in house_patches:
        if life_preserver.simple_query(""What is the color?"") == house_patch.simple_query(""What is the color?""):
            return ""yes""
    return ""no"""
18264755,How is the weather?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the weather like?"")"
6711450,What is the animal that is looking into the toilet that is not closed?,"    # asks for the predicate of a relational verb (looking into the toilet that is not closed), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")"
8641613,Do you see any helmets in the picture that are not red?,"    image_patch = ImagePatch(image)
    red_helmets = image_patch.find(""red helmet"")
    non_red_helmets = image_patch.find(""helmet"")
    is_red = lambda x: x.simple_query(""What is the color of the helmet?"") == ""red""
    non_red_helmets_patches = [x for x in non_red_helmets if not is_red(x)]
    return bool_to_yesno(bool(x for x in non_red_helmets_patches) if x for x in non_red_helmets_patches) if non_red_helmets_patches else False # if no non red helmets, query the image directly
bool = 1 if 1==1 else 0 # for type hinting
# if no non red helmets, query the image directly
# return bool_to_yesno(bool(x for x in non_red_helmets_patches) if x for x in non_red_helmets_patches) if non_red_helmets_patches else image_patch.simple_query(""Is there a red helmet in the picture that is not red?"")"
2409779,What does the happy person hold?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    return person_patches[0].simple_query(""What does the person hold?"")"
8461507,Are there either tissue boxes or lamps in the picture?,"    image_patch = ImagePatch(image)
    is_tissue_box_or_lamp = image_patch.exists(""tissue box"") or image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box_or_lamp)"
10770916,Which kind of animal is it?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is it?"")
    return animal_patches[0].simple_query(""Which kind of animal is it?"")"
19102906,What type of drink is to the left of the plate?,"    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    plate_patches = image_patch.find(""plate"")
    # Question assumes one glass patch and one plate patch
    for glass_patch in glass_patches:
        for plate_patch in plate_patches:
            if glass_patch.horizontal_center < plate_patch.horizontal_center:
                return glass_patch.simple_query(""What type of drink is to the left of the plate?"")
    # If no glass is to the left of a plate, query the image directly
    return image_patch.simple_query(""What type of drink is to the left of the plate?"")"
18315440,Is the sky cloudy and blue?,"    image_patch = ImagePatch(image)
    is_sky = image_patch.exists(""sky"")
    is_sky_cloudy_blue = image_patch.simple_query(""Is the sky a combination of blue and white?"") == ""yes""
    is_sky_blue = image_patch.simple_query(""Is the sky blue?"") == ""yes""
    is_sky_cloudy = image_patch.simple_query(""Is the sky gray or white?"") == ""white""
    is_sky_cloudy_and_blue = is_sky and is_sky_cloudy_blue
    is_sky_blue_only = is_sky and is_sky_blue
    is_sky_cloudy = is_sky and is_sky_cloudy
    return bool_to_yesno(is_sky_cloudy_and_blue or is_sky_blue_only or is_sky_cloudy)"
453061,Is the fork on the right of the image?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork on the right of the image?"")
    if fork_patches[0].horizontal_center > (image_patch.left + image_patch.right) / 2:
        return ""yes""
    else:
        return ""no"""
71002567,"What is the broccoli on, a table or a nightstand?","    image_patch = ImagePatch(image)
    broccoli_patches = image_patch.find(""broccoli"")
    # Question assumes only one broccoli patch
    if len(broccoli_patches) == 0:
        # If no broccoli is found, query the image directly
        return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    if broccoli_patches[0].simple_query(""Is it on a nightstand?"") == ""yes"":
        return ""nightstand""
    else:
        return broccoli_patches[0].simple_query(""What is the broccoli on, a table or a nightstand?"")"
17465089,Is the field green and small?,"    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Is the field green and small?"")
    field_patch = field_patches[0]
    is_green = field_patch.verify_property(""field"", ""green"")
    is_small = field_patch.verify_property(""field"", ""small"")
    return bool_to_yesno(is_green and is_small)"
16150157,What is on the wall?,"    image_patch = ImagePatch(image)
    wall_patches = image_patch.find(""wall"")
    # Question assumes one wall patch (the one with the image on it)
    if len(wall_patches) == 0:
        # If no wall is found, query the image directly
        return image_patch.simple_query(""What is on the wall?"")
    return wall_patches[0].simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?,"    image_patch = ImagePatch(image)
    suv_patches = image_patch.find(""suv"")
    if len(suv_patches) < 2:
        # If there is no second suv, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    van_patches = image_patch.find(""van"")
    for suv_patch in suv_patches:
        if suv_patch.horizontal_center < (image_patch.horizontal_center + image_patch.width / 2):
            # If the suv is on the left, the van is right
            return ""right""
    # If no van is found, query the image directly
    return ""left"""
15101358,Is the girl to the left of the boy?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes one girl patch and one boy patch
    if len(girl_patches) < 1 or len(boy_patches) < 1:
        # If no girl or boy is found, query the image directly
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    if girl_patches[0].horizontal_center < boy_patches[0].horizontal_center:
        return ""yes""
    else:
        return ""no"""
12785181,What animals are in the grass?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""rabbit, squirrel, rat, mouse, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit,"
348093,Are there both an apple and a bag in the picture?,"    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    is_bagel_or_bag = image_patch.exists(""bagel bag"") if image_patch.exists(""bagel bag"") else image_patch.exists(""bag"")
    is_bagel_or_bag_2 = image_patch.exists(""bagel bag 2"") if image_patch.exists(""bagel bag 2"") else image_patch.exists(""bag 2"")
    is_bagel_or_bag_3 = image_patch.exists(""bagel bag 3"") if image_patch.exists(""bagel bag 3"") else image_patch.exists(""bag 3"")
    is_bagel_or_bag_4 = image_patch.exists(""bagel bag 4"") if image_patch.exists(""bagel bag 4"") else image_patch.exists(""bag 4"")
    is_bagel_or_bag_5 = image_patch.exists(""bagel bag 5"") if image_patch.exists(""bagel bag 5"") else image_patch.exists(""bag 5"")
    is_bagel_or_bag_6 = image_patch.exists(""bagel bag 6"") if image_patch.exists(""bagel bag 6"") else image_patch.exists(""bag 6"")
    is_bagel_or_bag_7 = image_patch.exists(""bagel bag 7"") if image_patch.exists(""bagel bag 7"") else image_patch.exists(""bag 7"")
    is_bagel_or_bag_8 = image_patch.exists(""bagel bag 8"") if image_patch.exists(""bagel bag 8"") else image_patch.exists(""bag 8"")
    is_bagel_or_bag_9 = image_patch.exists(""bagel bag 9"") if image_patch.exists(""bagel bag 9"") else image_patch.exists(""bag 9"")
    is_bagel_or_bag_10 = image_patch.exists(""bagel bag 10"") if image_patch.exists(""bagel bag 10"") else image_patch.exists(""bag 10"")
    is_bagel_or_bag_11 = image_patch.exists(""bagel bag 11"") if image_patch.exists(""bagel bag 11"") else image_patch.exists(""bag 11"")
    is_bagel_or_bag_12 = image_patch.exists(""bagel bag 12"") if image_patch.exists(""bagel bag 12"") else image_patch.exists(""bag 12"")
    is_bagel_or_bag_13 = image_patch.exists(""bagel bag 13"") if image_patch.exists"
314181,Which sign is shown?,"    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Which sign is shown?"")
    return sign_patches[0].simple_query(""Which sign is shown?"")"
16275314,"On which side is the woman, the right or the left?","    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    if woman_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19535592,Who runs on the sand?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who runs on the sand?"")"
156886,Is there a giraffe near the bush?,"    is_giraffe_and_bush_together = ImagePatch(image).verify_property(""bush"", ""giraffe near"")
    is_giraffe = ImagePatch(image).exists(""giraffe"")
    is_bush = ImagePatch(image).exists(""bush"")
    is_giraffe_or_bush = ImagePatch(image).exists(""giraffe or bush"")
    is_giraffe_and_bush_separately = ImagePatch(image).verify_property(""bush"", ""giraffe"") and ImagePatch(image).verify_property(""giraffe"", ""bush"")
    is_giraffe_or_bush_and_not_together = ImagePatch(image).verify_property(""bush"", ""giraffe"") or ImagePatch(image).verify_property(""giraffe"", ""bush"")
    is_giraffe_and_bush_together_or_separately = is_giraffe_and_bush_together or is_giraffe_or_bush_and_not_together
    is_giraffe_and_bush_together_or_separately_or_together = is_giraffe_and_bush_together_or_separately or is_giraffe_or_bush_and_not_together
    is_giraffe_and_bush_together_or_separately_or_together_or_together = is_giraffe_and_bush_together_or_separately_or_together or is_giraffe_or_bush_and_not_together
    is_giraffe_and_bush_together_or_separately_or_together_or_together_or_together = is_giraffe_and_bush_together_or_separately_or_together_or_together or is_giraffe_or_bush_and_not_together
    is_giraffe_and_bush_together_or_separately_or_together_or_together_or_together_or_together = is_giraffe_and_bush_together_or_separately_or_together_or_together_or_together or is_giraffe_or_bush_and_not_together
    is_giraffe_and_bush_together_or_separately_or_together_or_together_or_together_or_together_or_together = is_giraffe_and_bush_together_or_separately_or_together_or_together_or_together_or_together or is_giraffe_or_bush_and_not_together
    is_giraffe_and_bush_together_or_separately_or_together_or_together_or_together_or_together_or_together_or"
1756642,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    return person_patches[0].simple_query(""Who wears the shirt?"")"
1972390,What type of animal is standing in the field?,"    image_patch = ImagePatch(image)
    standing_animal_patches = image_patch.find(""standing animal"")
    # Question assumes only one standing animal patch
    if len(standing_animal_patches) == 0:
        # If no standing animal is found, query the image directly
        return image_patch.simple_query(""What type of animal is standing in the field?"")
    return standing_animal_patches[0].simple_query(""What type of animal is standing in the field?"")"
14579439,Is the stuffed animal on the right?,"    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    if stuffed_animal_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
6645395,Is the gray building behind the passengers that are boarding the airplane?,"    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building with airplane boarding"")
    if len(building_patches) == 0:  # if there is no building with an airplane boarding, query the image directly
        building_patches = image_patch.find(""building"")  # if there is no building with an airplane boarding, check if there is a building
        for building_patch in building_patches:  # for each building
            if building_patch.simple_query(""Is an airplane boarding?"") == ""yes"":  # if an airplane is boarding
                return ""yes""  # return true
    building_patch = building_patches[0]  # select the building with an airplane boarding
    for passenger_patch in image_patch.find(""passenger""):  # for each passenger
        if passenger_patch.horizontal_center < building_patch.horizontal_center:  # if the passenger is in front of the building
            return ""no""  # return false
    return bool_to_yesno(building_patch.verify_property(""building"", ""gray"") and building_patch.simple_query(""Is an airplane boarding?"") == ""yes"")"
19610200,Is the fence metallic?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return fence_patches[0].verify_property(""fence"", ""metallic"")"
5299471,What does the girl that to the left of the trashcan carry?,"    # asks for the predicate of a relational verb (left of), so ask step by step
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    trashcan_patches = image_patch.find(""trashcan"")
    # Question assumes one girl patch and one trashcan patch
    if len(girl_patches) < 1 or len(trashcan_patches) < 1:
        # If no girl or trashcan is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    for girl_patch in girl_patches:
        for trashcan_patch in trashcan_patches:
            if girl_patch.horizontal_center < trashcan_patch.horizontal_center:
                return girl_patch.simple_query(""What does the girl that to the left of the trashcan carry?"") # crop would include the object so keep it in the query
    # If no girl is to the left of a trashcan, pick the first girl and first trashcan
    return girl_patches[0].simple_query(""What does the girl that to the left of the trashcan carry?"")"
7548203,Which kind of vegetable is on the pizza?,"    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    return pizza_patches[0].simple_query(""Which kind of vegetable is on the pizza?"")"
91027737,On which side is the pan?,"    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    if pan_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?,"    image_patch = ImagePatch(image)
    black_cars = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_cars) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    for black_car in black_cars:
        if black_car.vertical_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6144031,Who is in the living room?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is in the living room?"")
    return person_patches[0].simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?,"    image_patch = ImagePatch(image)
    sink_patches = image_patch.find(""sink"")
    # Question assumes only one sink patch
    if len(sink_patches) == 0:
        # If no sink is found, query the image directly
        return image_patch.simple_query(""What is the sink made of?"")
    return sink_patches[0].simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?,"    image_patch = ImagePatch(image)
    is_black_cat_or_bird = image_patch.exists(""black cat"") or image_patch.exists(""black cat sitting"") or image_patch.exists(""black cat running"") or image_patch.exists(""black bird"") or image_patch.exists(""black bird flying"")
    return bool_to_yesno(is_black_cat_or_bird)"
1241741,Do you see a bicycle or a biker in this picture?,"    image_patch = ImagePatch(image)
    is_bicycle_or_biker = image_patch.exists(""bicycle"") or image_patch.exists(""biker"")
    return bool_to_yesno(is_bicycle_or_biker)"
844747,Are there both a pillow and a kitten in the image?,"    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    is_both = image_patch.exists(""pillow with kitten"")
    if is_pillow and is_kitten:
        return bool_to_yesno(is_both)
    else:
        return bool_to_yesno(is_pillow and is_kitten)"
1104500,What kind of food is in the box?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What kind of food is in the box?"")
    for box_patch in box_patches:
        food_patches = box_patch.find(""food"")
        if len(food_patches) == 0:
            # If no food is found, query the image directly
            return image_patch.simple_query(""What kind of food is in the box?"")
        for food_patch in food_patches:
            return food_patch.simple_query(""What kind of food is it?"") # crop would include the food so keep it in the query
    # If no food is found, query the image directly
    return image_patch.simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?,"    # asks for the predicate of a relational verb (left of), so ask directly
    image_patch = ImagePatch(image)
    kid_patches = image_patch.find(""kid"")
    # Question assumes only one kid patch
    if len(kid_patches) == 0:
        # If no kid is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid?"")
    for kid_patch in kid_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < kid_patch.horizontal_center:
                return food_patch.simple_query(""What is the food that is to the left of the kid?"") # crop would include the food so keep it in the query
    # If no food is to the left of the kid, pick the first food
    return food_patches[0].simple_query(""What is the food that is to the left of the kid?"")"
11820726,"What device is the desk in front of, a television or a printer?","    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    for desk_patch in desk_patches:
        desk_patch_response = desk_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
        if desk_patch_response in [""television"", ""televsion"", ""tv"", ""printer"", ""TELEVISION"", ""TELEVSION"", ""TV"", ""PRINTER""]:
            return desk_patch_response
    # If no device is found, query the image directly
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")"
18114588,Do you see a helmet there?,"    image_patch = ImagePatch(image)
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_helmet)"
11950874,What animal is standing on the ground?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    return animal_patches[0].simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?,"    small_car_patches = ImagePatch(image).find(""small car"")
    if len(small_car_patches) < 2:
        # If there is not exactly two small cars, query the image directly
        return image Patch
16184942,Does that grass look brown and short?,"    image_patch = ImagePatch(image)
    patch_of_grass = image_patch.find(""patch of grass"")[0]  # assume one patch
    is_grass = patch_of_grass.simple_query(""What is it?"") == ""grass""
    is_brown = patch_of_grass.verify_property(""grass"", ""brown"")
    is_short = patch_of_grass.verify_property(""grass"", ""short"")
    return bool_to_yesno(is_grass and is_brown and is_short)"
6312238,Is the hydrant to the left of the car?,"    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    # Question assumes only one hydrant patch
    if len(hydrant_patches) == 0:
        # If no hydrant is found, query the image directly
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    for hydrant_patch in hydrant_patches:
        if hydrant_patch.horizontal_center < (image_patch.find(""car"")[0].horizontal_center + image_patch.find(""car"")[0].width / 2):
            return ""yes""
    return ""no""
"
16646227,On which side of the picture is the gray car?,"    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    if gray_car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person wearing sneakers"")
    ball_patches = image_patch.find(""ball"")
    # Question assumes one person and one ball
    if len(person_patches) < 1 or len(ball_patches) < 1:
        # If no person or ball is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for person_patch in person_patches:
        for ball_patch in ball_patches:
            if ball_patch.horizontal_center < person_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
3443704,What is the woman wearing?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is the woman wearing?"")"
19313572,What is the color of the tent to the left of the vehicles?,"    # asks for a property of a non-relational object (tent) and a relation (left of) to another object (vehicles)
    image_patch = ImagePatch(image)
    # first, find all the vehicles
    vehicles_patches = image_patch.find(""vehicle"")
    # then, for each vehicle, find the closest tent to the left
    for vehicle_patch in vehicles_patches:
        for tent_patch in image_patch.find(""tent""):
            if tent_patch.horizontal_center < vehicle_patch.horizontal_center:
                return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    # if no tent is found to the left of any vehicle, query the image directly
    return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")"
10885675,What is the toilet seat made of?,"    toilet_patches = ImagePatch(image).find(""toilet"")
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return ImagePatch(image).simple_query(""What is the toilet seat made of?"")
    return toilet_patches[0].simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket query                     # for   #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  # "
14561612,What color do you think the bikini that the woman is wearing is?,"    image_patch = ImagePatch(image)
    bikini_patches = image_patch.find(""bikini"")
    # Question assumes only one bikini patch
    if len(bikini_patches) == 0:
        # If no bikini is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    return bikini_patches[0].simple_query(""What color is the bikini?"")"
6587755,Are both the room and the bowl the same color?,"    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes one room patch and one bowl patch
    if len(room_patches) < 2 or len(bowl_patches) < 2:
        # If there are less than two of each, query the image directly
        return image_patch.simple_query(""Are both the room and the bowl the same color?"")
    room1 = room_patches[0]
    room2 = room_patches[1]
    bowl1 = bowl_patches[0]
    bowl2 = bowl_patches[1]
    is_room1_bowl1_color = room1.simple_query(""What is the color of the bowl?"") == bowl1.simple_query(""What is the color of the bowl?"")
    is_room2_bowl2_color = room2.simple_query(""What is the color of the bowl?"") == bowl2.simple_query(""What is the color of the bowl?"")
    is_room1_bowl2_color = room1.simple_query(""What is the color of the bowl?"") == bowl2.simple_query(""What is the color of the bowl?"")
    is_room2_bowl1_color = room2.simple_query(""What is the color of the bowl?"") == bowl1.simple_query(""What is the color of the bowl?"")
    is_same_color = is_room1_bowl1_color or is_room2_bowl2_color or is_room1_bowl2_color or is_room2_bowl1_color
    return bool_to_yesno(is_same_color)"
4479543,Is the barn white or brown?,"    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    # Question assumes only one barn patch
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    return barn_patches[0].simple_query(""Is the barn white or brown?"")"
972522,Does the box look white or brown?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].best_text_match([""white"", ""brown""])"
3948528,What is the bowl made of?,"    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What is the bowl made of?"")
    return bowl_patches[0].simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?,"    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    rock_patches = image_patch.find(""rock"")
    # Question assumes one rock patch and one bench patch
    if len(bench_patches) < 1 or len(rock_patches) < 1:
        # If no rock or bench is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    for bench_patch in bench_patches:
        for rock_patch in rock_patches:
            if bench_patch.horizontal_center > rock_patch.horizontal_center:
                return rock_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    # If no bench is in front of a rock, query the image directly
    return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")"
866459,On which side is the couch?,"    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8614812,Is the person that is playing wearing shorts?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    return person_patches[0].verify_property(""person"", ""shorts"")"
167438,What is wearing the ground?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""What is wearing the ground?"")
    for ground_patch in ground_patches:
        item_patches = image_patch.find(""item wearing ground"")
        for item_patch in item_patches:
            if item_patch.horizontal_center > ground_patch.horizontal_center:
                return ground_patch.simple_query(""What is wearing the ground?"") # crop would include the item so keep it in the query
    # If no item is wearing the ground, pick the first item
    return ground_patches[0].simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?,"    image_patch = ImagePatch(image)
    wooden_patches = image_patch.find(""wooden furniture"")
    if len(wooden_patches) == 0:
        # If no wooden furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    for wooden_patch in wooden_patches:
        type_of_furniture = wooden_patch.simple_query(""Which kind of furniture is it?"")
        return type_of_furniture
    # If no wooden furniture is found, query the image directly
    return image_patch.simple_query(""Which kind of furniture is wooden?"")"
1042377,Who is standing beside the person that is wearing a dress?,"    # asks for the predicate of a relational verb (standing beside), so ask directly
    image_patch = ImagePatch(image)
    person_patches_dress = image_patch.find(""person wearing a dress"")
    # Question assumes only one person patch
    if len(person_patches_dress) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    person_patch_dress = person_patches_dress[0]
    person_patches_not_dress = image_patch.find(""person"")
    for person_patch in person_patches_not_dress:
        if person_patch.horizontal_center > person_patch_dress.horizontal_center:
            return person_patch.simple_query(""Who is standing beside the person that is wearing a dress?"") # crop would include the dress so keep it in the query
    # If no person is standing beside the person that is wearing a dress, pick the first person
    return person_patches_not_dress[0].simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?,"    image_patch = ImagePatch(image)
    skis_patches = image_patch.find(""skis"")
    # Question assumes only one skis patch
    if len(skis_patches) == 0:
        # If no skis are found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    skis = skis_patches[0]
    ski_flex = skis.simple_query(""Is the ski flexible?"") # crop would include the ski so keep it in the query
    if ski_flex == ""yes"":
        return ""thin""
    else:
        return skis.simple_query(""How fat are the long skis?"")"
2211743,Is the sky clear or overcast?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?,"    image_patch = ImagePatch(image)
    bottom_patches = image_patch.crop(0, 0, image_patch.width // 2, image_patch.height)
    bottles_to_left = bottom_patches.find(""bottle"")
    pencils_to_right = bottom_patches.find(""pencil"")
    for pencil in pencils_to_right:
        for bottle in bottles_to_left:
            if bottle.horizontal_center < pencil.horizontal_center:
                return ""yes""
    return ""no""
"
15478302,Is there any dark door or window in the image?,"    dark_patches = ImagePatch(image).find(""dark door"")
    for dark_patch in dark_patches:
        dark_patch = ImagePatch(image, left=dark_patch.left, lower=dark_patch.lower, right=dark_patch.right, upper=dark_patch.upper)
        if dark_patch.simple_query(""Is the door or window dark?"") == ""door"":
            return bool_to_yesno(dark_patch.verify_property(""door"", ""dark"")
            and dark_patch.verify_property(""door"", ""existence"")
            )
    dark_patches = ImagePatch(image).find(""dark window"")
    for dark_patch in dark_patches:
        dark_patch = ImagePatch(image, left=dark_patch.left, lower=dark_patch.lower, right=dark_patch.right, upper=dark_patch.upper)
        if dark_patch.simple_query(""Is the door or window dark?"") == ""window"":
            return bool_to_yesno(dark_patch.verify_property(""window"", ""dark"")
            and dark_patch.verify_property(""window"", ""existence"")
            )
    dark_patches = ImagePatch(image).find(""dark"")
    for dark_patch in dark_patches:
        dark_patch = ImagePatch(image, left=dark_patch.left, lower=dark_patch.lower, right=dark_patch.right, upper=dark_patch.upper)
        if dark_patch.simple_query(""Is the door or window dark?"") == ""door"":
            return bool_to_yesno(dark_patch.verify_property(""door"", ""dark"")
            and dark_patch.verify_property(""door"", ""existence"")
            )
    dark_patches = ImagePatch(image).find(""dark"")
    for dark_patch in dark_patches:
        dark_patch = ImagePatch(image, left=dark_patch.left, lower=dark_patch.lower, right=dark_patch.right, upper=dark_patch.upper)
        if dark_patch.simple_query(""Is the door or window dark?"") == ""window"":
            return bool_to_yesno(dark_patch.verify_property(""window"", ""dark"")
            and dark_patch.verify_property(""window"", ""existence"")
            )"
18414234,Do you see either a knife or a chair in the picture?,"    image_patch = ImagePatch(image)
    is_knive_or_chair = image_patch.exists(""knife"") or image_patch.exists(""chair"")
    return bool_to_yesno(is_knive_or_chair)"
19779815,Is the book red or yellow?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    return book_patches[0].best_text_match([""red"", ""yellow""])"
7257283,Are there men to the left of the picture?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < (image_patch.left + image_patch.right) / 2:
            return bool_to_yesno(man_patch.exists(""man""))
    return bool_to_yesno(False)"
6621625,On which side of the picture is the bench?,"    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    if bench_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19311589,Are there both fences and horses in this picture?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?,"    # asks for the predicate of a relational verb (right of, to the left of), so ask directly
    image_patch = ImagePatch(image)
    # container to the right of the person, so crop the image to the right of the person
    right_image_patch = ImagePatch(image, 0, 0, image_patch.width // 2, image_patch.height)
    # device to the right of the container, so crop the image to the right of the container
    right_right_image_patch = ImagePatch(image, right_image_patch.width, 0, image_patch.width, image_patch.height)
    # check if there is a device to the right of the container
    for device in right_right_image_patch.find(""device""):
        # if there is a device, return its type
        return device.simple_query(""What is it?"")
    # if there is no device to the right of the container, query the image directly
    return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")"
171031333,Do you see blankets in the picture that are not black?,"    image_patch = ImagePatch(image)
    black_blanket_patches = image_patch.find(""black blanket"")
    non_black_blanket_patches = image_patch.find(""blanket"")
    is_black = image_patch.simple_query(""Is the blanket black?"") == ""yes""
    is_black_or_not_black = image_patch.simple_query(""Is the blanket black or not black?"") == ""black or not black""
    if is_black or is_black_or_not_black:
        return bool_to_yesno(False)
    else:
        return bool_to_yesno(any([isinstance(patch, ImagePatch) for patch in non_black_blanket_patches]))"
16695341,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?,"    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    is_bottle_or_child = image_patch.exists(""bottle child"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_2 = image_patch.exists(""child bottle"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_3 = image_patch.exists(""bottle child bottle"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_4 = image_patch.exists(""child bottle child"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_5 = image_patch.exists(""child bottle child bottle"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_6 = image_patch.exists(""child bottle child bottle child"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_7 = image_patch.exists(""child bottle child bottle child bottle"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_8 = image_patch.exists(""child bottle child bottle child bottle child"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_9 = image_patch.exists(""child bottle child bottle child bottle child bottle"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_10 = image_patch.exists(""child bottle child bottle child bottle child bottle child"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_11 = image_patch.exists(""child bottle child bottle child bottle child bottle child bottle"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_12 = image_patch.exists(""child bottle child bottle child bottle child bottle child bottle child"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_13 = image_patch.exists(""child bottle child bottle child bottle child bottle child bottle child bottle"") # crop would include bottle or child so keep it in the query
    is_bottle_or_child_14 = image_patch.exists(""child bottle child bottle child bottle child bottle child bottle child bottle child"") # crop would include bottle or child so keep"
5111363,Are there chairs or tables that are not blue?,"    is_chair_or_table = False
    is_blue = False
    image_patch = ImagePatch(image)
    chairs_or_tables = image_patch.find(""chair"") + image_patch.find(""table"")
    for chair_or_table in chairs_or_tables:
        is_chair_or_table = True
        if not chair_or_table.verify_property(""chair or table"", ""blue""):
            is_blue = False
        if is_chair_or_table and is_blue:
            return ""yes""
    if is_chair_or_table:
        return ""yes""
    else:
        return bool_to_yesno(is_chair_or_table)"
9230971,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    is_short_and_white = (hair_patches[0].verify_property(""hair"", ""white"") and
                          hair_patches[0].verify_property(""hair"", ""short length""))
    return bool_to_yesno(is_short_and_white)"
4822200,Do you see any lettuce on the food with the meat?,"    image_patch = ImagePatch(image)
    meat_patches = image_patch.find(""meat with lettuce"")
    if len(meat_patches) == 0:  # If no meat is found, query the image directly
        meat_patches = image_patch.find(""meat"")  # Check if there's a meat without lettuce
        for meat_patch in meat_patches:
            if image_patch.exists(""lettuce""):
                return bool_to_yesno(image_patch.exists(""lettuce""))  # Check if there's lettuce in the image
    for meat_patch in meat_patches:
        is_wearing_lettuce = (meat_patch.simple_query(""Is the meat wearing lettuce?"") == ""yes"")
        if is_wearing_lettuce:
            return bool_to_yesno(meat_patch.simple_query(""Is the lettuce visible?"") == ""yes"") # crop would include the lettuce so keep it in the query
    # If no meat with lettuce is found, query the image directly
    return bool_to_yesno(image_patch.exists(""meat with lettuce lettuce""))"
3726666,What device is to the left of the curtain that is to the left of the glasses?,"    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    if len(glasses_patches) < 2:
        # If there is not exactly two glasses, query the image directly
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    left_glass = glasses_patches[0]
    right_glass = glasses_patches[1]
    for item in image_patch.find(""tablet""), image_patch.find(""phone""), image_patch.find(""book""):
        for item_patch in item:
            if item_patch.horizontal_center < left_glass.horizontal_center and item_patch.horizontal_center > right_glass.horizontal_center:
                return item_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    # If no device is found to the left of the glasses, query the image directly
    return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")"
9954849,What kind of furniture is it?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is it?"")
    return furniture_patches[0].simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?,"    red_train_or_bus_patches = ImagePatch(image).find(""red train"")
    for red_train_or_bus_patch in red_train_or_bus_patches:
        if red_train_or_bus_patch.exists(""train""):
            return bool_to_yesno(red_train_or_bus_patch.exists(""red train on rails""))
        red_train_or_bus_patches = ImagePatch(image).find(""red bus"")
        for red_train_or_bus_patch in red_train_or_bus_patches:
            if red_train_or_bus_patch.exists(""bus""):
                return bool_to_yesno(red_train_or_bus_patch.exists(""red bus body""))
    red_train_or_bus_patches = ImagePatch(image).find(""red train with car body"")
    for red_train_or_bus_patch in red_train_or_bus_patches:
        if red_train_or_bus_patch.exists(""red train with car body""):
            return bool_to_yesno(red_train_or_bus_patch.exists(""red bus body""))
    red_train_or_bus_patches = ImagePatch(image).find(""red bus with car body"")
    for red_train_or_bus_patch in red_train_or_bus_patches:
        if red_train_or_bus_patch.exists(""red bus with car body""):
            return bool_to_yesno(red_train_or_bus_patch.exists(""red bus body""))
    red_train_or_bus_patches = ImagePatch(image).find(""red bus"")
    for red_train_or_bus_patch in red_train_or_bus_patches:
        if red_train_or_bus_patch.exists(""bus""):
            return bool_to_yesno(red_train_or_bus_patch.exists(""red bus body""))
    red_train_or_bus_patches = ImagePatch(image).find(""red train"")
    for red_train_or_bus_patch in red_train_or_bus_patches:
        if red_train_or_bus_patch.exists(""train""):
            return bool_to_yesno(red_train_or_bus_patch.exists(""red train on rails""))
    return bool_to_yesno(ImagePatch(image).exists(""red bus""))"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?,"    # asks for a predicate of a relational verb (left of) and a type (lettuce), so ask step by step
    image_patch = ImagePatch(image)
    crate_patches = image_patch.find(""crate that is of lettuce"")
    # Question assumes only one crate patch
    if len(crate_patches) == 0:
        # If no crate is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    crate_patch = crate_patches[0]
    for vegetable_patch in image_patch.find(""vegetable that is lettuce type""):
        if vegetable_patch.horizontal_center < crate_patch.horizontal_center:
            return vegetable_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    # If no vegetable is to the left of the crate, query the image directly
    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")"
623393,"What type of clothing is tan, the hat or the vest?","    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) < 2:
        # If there is only one tan patch, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    hat_patches = [patch for patch in tan_patches if patch.simple_query(""Is it a hat?"") == ""yes""]
    vest_patches = [patch for patch in tan_patches if patch.simple_query(""Is it a hat?"") != ""yes""]
    if len(hat_patches) > len(vest_patches):
        return ""hat""
    else:
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")"
6436448,Is the color of the skirt the same as the scarf?,"    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf query                    # for
3303313,Is the blanket under a cat?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket query                    # for   #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #"
443663,What color is the picture?,"    image_patch = ImagePatch(image)
    picture_patches = image_patch.find(""picture"")
    # Question assumes only one picture patch
    if len(picture_patches) == 0:
        # If no picture is found, query the image directly
        return image_patch.simple_query(""What color is the picture?"")
    return picture_patches[0].simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there an umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes one umbrella patch
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""no""
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center < man_patch.horizontal_center:
            return bool_to_yesno(umbrella_patch.verify_property(""umbrella"", ""presence"")
                                ) # crop would include the umbrella so keep it in the query
    # If no umbrella is found to the right, query the image directly
    return bool_to_yesno(image_patch.exists(""umbrella"")"
1885406,What is the toy on the bed?,"    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    toy_patches = image_patch.find(""toy"")
    # Question assumes one bed patch and one toy patch
    if len(bed_patches) < 1 or len(toy_patches) < 1:
        # If no bed or toy is found, query the image directly
        return image_patch.simple_query(""What is the toy on the bed?"")
    for bed_patch in bed_patches:
        for toy_patch in toy_patches:
            if toy_patch.horizontal_center > bed_patch.horizontal_center:
                return toy_patch.simple_query(""What is the toy on the bed?"") # crop would include the toy on the bed so keep it in the query
            else:
                return toy_patch.simple_query(""What is the toy on the bed?"")"
5557965,On which side is the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana Query                      #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   for                                                                                                                                                                                                                                                                                                                                                                                                                            "
3196355,What does the batter hold?,"    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    return batter_patches[0].simple_query(""What does the batter hold?"")"
14470748,Who wears a jacket?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for person_patch in person_patches:
        who_wears_jacket = person_patch.simple_query(""Who wears a jacket?"")
    # If no person is wearing a jacket, pick the first person
    return who_wears_jacket =      #  1  6  2  3  4  5  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99  100  101  102  103  104  105  106  107  108  109  110  111  112  113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128  129  130  131  132"
16537736,Are there any houses behind the shrubs?,"    # first find the shrubs, then the houses, then check for overlap
    image_patch = ImagePatch(image)
    shrub_patches = image_patch.find(""shrub"")
    # Question assumes only one shrub patch
    if len(shrub_patches) == 0:
        # If no shrub is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    shrub = shrub_patches[0]
    # check each house for overlap
    for house_patches in [image_patch.find(""house"") for _ in range(10]:                      # 2  # for _ in  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  ,  0  for  #  #  #  0  for  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  # "
1129541,What piece of furniture is made of wood?,"    image_patch = ImagePatch(image)
    wood_patches = image_patch.find(""wooden furniture"")
    if len(wood_patches) == 0:
        # If no wooden furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    for wood_patch in wood_patches:
        wood_patch_name = wood_patch.simple_query(""What is the piece of furniture made of?"")
        if wood_patch_name == ""wood"":
            return wood_patch.simple_query(""What piece of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no piece of furniture is made of wood, pick the first piece of furniture
    return wood_patches[0].simple_query(""What piece of furniture is made of wood?"")"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?,"    image_patch = ImagePatch(image)
    man_patches_with_hat = image_patch.find(""man that is wearing a hat"")
    # Question assumes only one man patch
    if len(man_patches_with_hat) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch_with_hat = man_patches_with_hat[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center < man_patch_with_hat.horizontal_center:
            return ""left""
    return ""right"""
12416703,Where is that cat?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Where is that cat?"")
    if cat_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""
    else:
        return image_patch.simple_query(""Where is that cat?"")"
15603088,The animal to the right of the envelope is lying on what?,"    image_patch = ImagePatch(image)
    # asks for the predicate of a relational verb (lying on), so ask directly
    animal_patches = image_patch.find(""animal to the right of the envelope"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    for animal_patch in animal_patches:
        surface_patches = image_patch.find(""ground"")
        for surface_patch in surface_patches:
            if animal_patch.vertical_center > surface_patch.horizontal_center:
                return surface_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    # If no animal is to the right of the envelope, query the image directly
    return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")"
5329077,Is the man on a bench?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    bench_patches = image_patch.find(""bench"")
    # Question assumes one man patch and one bench patch
    if len(man_patches) < 1 or len(bench_patches) < 1:
        # If no man or bench is found, query the image directly
        return image_patch.simple_query(""Is the man on a bench?"")
    for man_patch in man_patches:
        for bench_patch in bench_patches:
            if man_patch.horizontal_center > bench_patch.horizontal_center - 50 and man_patch.horizontal_center < bench_patch.horizontal_center + 50:
                return bool_to_yesno(man_patch.verify_property(""man"", ""bench"")
                                   ) # crop would include the bench so keep it in the query
    # If no man is on a bench, pick the first man and first bench
    return bool_to_yesno(man_patches[0].verify_property(""man"", ""bench"")
                        )"
1945705,What kind of device is to the left of the device that looks silver and gray?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device that looks silver and gray"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    target_device = device_patches[0]
    for device in image_patch.find(""device""):
        if device.horizontal_center < target_device.horizontal_center:
            return device.simple_query(""What kind of device is to the left of the device that looks silver and gray?"") # crop would include the device so keep it in the query
    # If no device is to the left, query the image directly
    return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")"
17520003,What vehicle is to the right of the pine tree?,"    image_patch = ImagePatch(image)
    pine_patches = image_patch.find(""pine tree"")
    # Question assumes one pine patch
    if len(pine_patches) == 0:
        # If no pine is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    pine_patch = pine_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes one vehicle patch
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > pine_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is to the right of the pine tree?"") # crop would include the tree so keep it in the query
    # If no vehicle is to the right of the tree, pick the first one
    return vehicle_patches[0].simple_query(""What vehicle is to the right of the pine tree?"")"
1259983,Who is wearing pants?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    for person_patch in person_patches:
        who_is_wearing_pants = person_patch.simple_query(""Who is wearing pants?"") # crop would include the pants so keep it in the query
        if who_is_wearing_pants != """":
            return who_is_wearing_pants
    # If no person is wearing pants, pick the first person
    return person_patches[0].simple_query(""Who is wearing pants?"")"
6413378,Is there a black keyboard or camera?,"    is_black_keyboard = ImagePatch(image).exists(""black keyboard"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists(""black keyboad or camera"")
    is_black_keyboad_or_camera = ImagePatch(image).exists"
947305,Is the sunny water blue and high?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the sunny water blue and high?"")
    water_patch = water_patches[0]
    is_sunny = water_patch.verify_property(""weather"", ""sunny"")
    is_blue = water_patch.verify_property(""water"", ""blue"")
    is_high = water_patch.verify_property(""water"", ""high"")
    is_all_true = is_sunny and is_blue and is_high
    return bool_to_yesno(is_all_true)"
4367817,What type of animal in this scene is brown?,"    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    # Question assumes only one brown animal patch
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    return brown_animal_patches[0].simple_query(""What type of animal is it?"")"
15485572,What is the vegetable on the hot dog with the cheese?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog with cheese"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    for hot_dog_patch in hot_dog_patches:
        hot_dog = hot_dog_patch
        # crop would include the hot dog and the top, so keep it in the query
        return hot_dog.simple_query(""What is the vegetable on the hot dog with the cheese?"")"
12661142,What is the appliance in the kitchen called?,"    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    return appliance_patches[0].simple_query(""What is the appliance in the kitchen called?"")"
41012743,The arrow is on what?,"    image_patch = ImagePatch(image)
    arrow_patches = image_patch.find(""arrow"")
    # Question assumes only one arrow patch
    if len(arrow_patches) == 0:
        # If no arrow is found, query the image directly
        return image_patch.simple_query(""The arrow is on what?"")
    if arrow_patches[0].simple_query(""Is the arrow on a road?"") == ""yes"":
        return ""road""
    elif arrow_patches[0].simple_query(""Is the arrow on paper?"") == ""yes"":
        return ""paper""
    elif arrow_patches[0].simple_query(""Is the arrow on a tree?"") == ""yes"":
        return ""tree""
    elif arrow_patches[0].simple_query(""Is the arrow on a building?"") == ""yes"":
        return ""building""
    else:
        return arrow_patches[0].simple_query(""The arrow is on what?"")"
4777414,What color is the bicycle in the bottom of the photo?,"    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    # Question assumes only one bicycle patch
    if len(bicycle_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    bottom_bicycle = bicycle_patches[0]
    if bottom_bicycle.vertical_center < image_patch.vertical_center:
        return bottom_bicycle.simple_query(""What color is the bicycle?"") # crop would include the bicycle so keep it in the query
    else:
        return bottom_bicycle.simple_query(""What color is the bicycle in the bottom of the photo?"")"
1185988,What is the device on top of the table that is to the right of the trashcan?,"    # asks for the predicate of a relational verb (on top of) and a relative position (right of), so ask step by step
    image_patch = ImagePatch(image)
    # first, find the trashcan
    trashcan_patches = image_patch.find(""trashcan"")
    if len(trashcan_patches) == 0:
        # If no trashcan is found, query the image directly
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    trashcan_patch = trashcan_patches[0]  # assume one patch
    # next, find the devices on top of the table to the right of the trashcan
    devices_to_right = image_patch.find(""phone"")  # example device
    for device in devices_to_right:
        if device.horizontal_center > trashcan_patch.horizontal_center:
            return device.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    # If no devices are found to the right, query the image directly
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")"
13582968,Was granite used to make that floor?,"    image_patch = ImagePatch(image)
    # not a relational verb so go step by step
    is_granite = image_patch.verify_property(""floor"", ""granite"")
    return bool_to_yesno(is_granite)"
6235273,Are there women in the photo?,"    image_patch = ImagePatch(image)
    is_woman = image_patch.exists(""woman"")
    return bool_to_yesno(is_woman)"
5377974,What is the girl playing with?,"    image_patch = ImagePatch(image)
    play_patches = image_patch.find(""girl playing"")
    # Question assumes only one play patch
    if len(play_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    return play_patches[0].simple_query(""What is the girl playing with?"")"
51037065,On which side of the image is the fridge?,"    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    if fridge_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5299477,Which kind of bag does the girl carry?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    return bag_patches[0].simple_query(""Which kind of bag does the girl carry?"")"
15135617,Is the white dog on a bench?,"    white_dog_patches = ImagePatch(image).find(""white dog"")
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image Patch
1111583,Is the male person to the right of a person?,"    image_patch = ImagePatch(image)
    right_patches = image_patch.find(""person to the right of a person"")
    # Question assumes only one right patch
    if len(right_patches) == 0:
        # If no right patch is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for right_patch in right_patches:
        if right_patch.simple_query(""Is the person to the right of a person male?"") == ""yes"":
            return ""yes""
    # If no right patch is male, query the image directly
    return bool_to_yesno(image_patch.exists(""person to the right of a person"") and image_patch.exists(""person to the left of a person"")"
12352269,Are there both windows and doors in this photograph?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    window_patches = image_patch.find(""window"")
    # Question assumes at least one door and one window
    if len(door_patches) < 1 or len(window_patches) < 1:
        # If no door or window is found, query the image directly
        return image_patch.simple_query(""Are there both windows and doors in this photograph?"")
    return bool_to_yesno(True) # True because there are at least one door and one window"
15610844,What kind of place is shown?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is it?"")"
11869032,Is the banana below a bird?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one banana patch and one bird patch
    if len(banana query                    # for 2
  ,                                                                                                        # for 1
        ,   # for 3
        5,  6,  7,  8,  9,  10:                                                                                                                                                                                                                                                                                                       "
9878360,What color is the vehicle to the left of the fence?,"    image_patch = ImagePatch(image)
    # first find the fence, then the vehicle to the left
    for fence_patch in image_patch.find(""fence""):
        for vehicle_patch in image_patch.find(""vehicle""):
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What is the color of the vehicle?"")
    # If no vehicle is to the left of the fence, query the image directly
    return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")"
481765,Are there either any buses or trains in the image?,"    image_patch = ImagePatch(image)
    is_bus_or_train = image_patch.exists(""bus"") or image_patch.exists(""train"")
    return bool_to_yesno(is_bus_or_train)"
6665919,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man to the left of the traffic cone"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of the traffic cone wearing a cap?"")
    man_patch = man_patches[0]
    # check if there is a traffic cone
    if len(image_patch.find(""traffic cone"")) == 0:
        # If no traffic cone is found, query the image directly
        return man_patch.simple_query(""Is the man to the left of the traffic cone wearing a cap?"")
    # check if the man is wearing a cap
    is_wearing_cap = man_patch.verify_property(""man"", ""cap"")
    return bool_to_yesno(is_wearing_cap)"
11981238,What is common to the blazer and the suit?,"    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    suit_patches = image_patch.find(""suit"")
    # Question assumes one blazer and one suit
    if len(blazer_patches) < 1 or len(suit_patches) < 1:
        # If no blazer or suit is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    blazer = blazer_patches[0]
    suit = suit_patches[0]
    common_properties = [""color"", ""style"", ""material"", ""buttons""]
    for property in common_properties:
        if blazer.verify_property(property, property) and suit.verify_property(property, property):
            return property
    # If no common property is found, query the image directly
    return image_patch.simple_query(""What is common to the blazer and the suit?"")"
16245,Is the shirt white or green?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    return shirt_patches[0].best_text_match([""white"", ""green""])"
2595103,"In which part of the image are the cars, the bottom or the top?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?","    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""How does the sand look, dry or wet?"")
    return sand_patches[0].simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?,"    # assumes a specific object (banana on a table) and a property (fruits to the right)
    # so go step by step
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana on a table"")
    # Question assumes one banana patch
    if len(banana patches       #  # if no banana is found, query the image directly
   ,    #  # if no banana is on a table, query the image directly
   ,   # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #  ,  # if no banana is on a table, query the image directly  #"
6376614,What color is the car in the middle?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    if car_patches[0].horizontal_center > image_patch.width / 2:
        return car_patches[0].simple_query(""What is the color of the car?"")
    else:
        return car_patches[0].simple_query(""What is the color of the car?"")"
712063,What's the lamp made of?,"    lamp_patches = ImagePatch(image).find(""lamp"")
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return lamp_patches[0].simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What is the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes one furniture patch
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is to the right of the pillow, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is to the right of the pillow?"")"
9647343,What type of material is the patio made of?,"    image_patch = ImagePatch(image)
    patio_patches = image_patch.find(""patio"")
    # Question assumes only one patio patch
    if len(patio_patches) == 0:
        # If no patio is found, query the image directly
        return image_patch.simple_query(""What type of material is the patio made of?"")
    return patio_patches[0].simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the suit?"")
    for person_patch in person_patches:
        who_is_wearing_suit = person_patch.simple_query(""Who is wearing the suit?"") # crop would include the suit so keep it in the query
        if who_is_wearing_suit != """":
            return who_is_wearing_suit
    # If no person is wearing a suit, pick the first person
    return person_patches[0].simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?,"    image_patch = ImagePatch(image)
    cloud_patches = image_patch.find(""cloud"")
    # Question assumes only one cloud patch
    if len(cloud_patches) == 0:
        # If no cloud is found, query the image directly
        return image_patch.simple_query(""What is the color of the clouds in the sky?"")
    return cloud_patches[0].simple_query(""What is the color of the clouds?"")"
9843309,Do the flowers look orange?,"    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flower"", ""orange"") # crop would include the flower so keep it in the query)"
618996,Is there a chair or a bed in this image?,"    image_patch = ImagePatch(image)
    is_chair_or_bed = image_patch.exists(""chair bed"") or image_patch.exists(""chair"") or image_patch.exists(""bed"")
    if is_chair_or_bed:
        return ""yes""
    else:
        return ""no"""
18959736,Are there trucks to the left of the umbrella?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes one umbrella patch
    if len(umbrella_patches) < 1 or len(truck_patches) < 1:
        # If no umbrella or truck is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    for truck_patch in truck_patches:
        if truck_patch.horizontal_center < umbrella_patches[0].horizontal_center:
            return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = man_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the man directly
        return man_patch.simple_query(""What color are the pants the man is wearing?"")
    return pants_patches[0].simple_query(""What color are the pants?"")"
551601,Are there any pillows or chairs in the image?,"    image_patch = ImagePatch(image)
    is-pill
10775785,Are there women to the left of the person with the bag?,"    image_patch = ImagePatch(image)
    person_with_bag_patches = image_patch.find(""person with bag"")
    # Question assumes only one person with bag patch
    if len(person_with_bag_patches) == 0:
        # If no person with bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    person_with_bag = person_with_bag_patches[0]
    for person in image_patch.find(""person""):
        if person.horizontal_center < person_with_bag.horizontal_center:
            if person.simple_query(""Is the person carrying a bag?"") == ""yes"":
                return ""yes""
            else:
                return bool_to_yesno(person.exists(""woman""))
    return bool_to_yesno(False)"
5925408,What is the bike in front of?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?,"    image_patch = ImagePatch(image)
    is_bed_or_desk = image_patch.exists(""bed"") or image_patch.exists(""desk"")
    return bool_to_yesno(is_bed_or_desk)"
13778498,What type of vehicle is behind the green tree?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"")"
41019603,What is the child standing on?,"    # asks for the predicate of a relational verb (standing on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?,"    image_patch = ImagePatch(image)
    wooden_item_patches = image_patch.find(""wooden item of furniture"")
    # Question assumes only one wooden item of furniture patch
    if len(wooden_item_patches) == 0:
        # If no wooden item of furniture is found, query the image directly
        return image_patch.simple_query(""What is the wooden item of furniture called?"")
    return wooden_item_patches[0].simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) < len(woman_patches):
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for person_patch in person_patches:
        who_wearing_shirt = person_patch.simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query
        return who_wearing_shirt # no need to check further properties
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?,"    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite that looks triangular"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    return kite_patches[0].simple_query(""What color are you?"")"
1672200,Who is drinking?,"    # asks for the predicate of a relational verb (drinking), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?,"    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    building_patch = building_patches[0]
    building_color = building_patch.simple_query(""What is the building's color?"")
    return building_color"
5749240,Are the glove and the undershirt both black?,"    image_patch = ImagePatch(image)
    black_glove_patches = image_patch.find(""black glove"")
    # Question assumes only one black patch, which is the one that is black
    if len(black_glove_patches) == 0:
        # If no black patch is found, query the image directly
        return bool_to_yesno(image_patch.verify_property(""glove"", ""black"")
        # and image_patch.verify_property(""undershirt"", ""black"")
        )
    black_undershirt_patches = image_patch.find(""black undershirt"")
    # Question assumes only one black patch, which is the one that is black
    if len(black_undershirt_patches) == 0:
        # If no black patch is found, query the image directly
        return bool_to_yesno(image_patch.verify_property(""glove"", ""black"")
        # and image_patch.verify_property(""undershirt"", ""black"")
        )
    # Check each black undershirt for a black patch
    for black_undershirt_patch in black_undershirt_patches:
        # Check each black patch for a black patch
        for black_glove_patch in black_glove_patches:
            if black_undershirt_patch.crop(0,0,black_glove_patch.width, black_glove_patch.height).verify_property(""glove"", ""black""):
                return bool_to_yesno(True)
    # If no black patch is found, query the image directly
    return bool_to_yesno(image_patch.verify_property(""glove"", ""black"")
    # and image_patch.verify_property(""undershirt"", ""black"")
    )"
18573157,Is the juice in a cup?,"    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    # Question assumes only one juice patch
    if len(juice_patches) == 0:
        # If no juice is found, query the image directly
        return image_patch.simple_query(""Is the juice in a cup?"")
    if juice_patches[0].verify_property(""juice"", ""cup""):
        return ""yes""
    else:
        return image_patch.simple_query(""Is the juice in a cup?"")"
3445929,Is the brown horse on the right side of the photo?,"    image_patch = ImagePatch(image)
    brown_horses = image_patch.find(""brown horse"")
    # Question assumes only one brown horse patch
    if len(brown_horses) == 0:
        # If no brown horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    if brown_horses[0].horizontal_center > (image_patch.horizontal_center + (image_patch.width / 2)):
        return ""yes""
    else:
        return ""no"""
16541709,Where is the grass?,"    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    if grass_patches[0].vertical_center < image_patch.horizontal_center:
        return ""bottom, left; use right for exact location; right: bottom right; ""     #  # ""bottom""  # ""left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right"" "
15764335,Are there any dogs on the tan sand?,"# asks for a state of being (sand) and a property (tan) and a property (dog)
# so go step by step
sand_patches = ImagePatch(image)
# crop to sand
left = sand_patches.horizontal_center - 200
right = sand_patches.horizontal_center + 200
bottom = sand_patches.vertical_center - 200
top = sand_patches.vertical_center + 200
sand = sand_patches.crop(left, bottom, right)
# check if dog
tan_sand_patches = ImagePatch(image)
# crop to tan
left = tan_sand_patches.horizontal_center - 200
right = tan_sand_patches.horizontal_center + 200
bottom = tan_sand_patches.vertical_center - 200
top = tan_sand_patches.vertical_center + 200
tan_sand = tan_sand_patches.crop(left, bottom, right)
# check if tan
tan_sand_patches = ImagePatch(image)
# crop to tan
left = tan_sand_patches.horizontal_center - 200
right = tan_sand_patches.horizontal_center + 200
bottom = tan_sand_patches.vertical_center - 200
top = tan_sand_patches.vertical_center + 200
tan_sand = tan_sand_patches.crop(left, bottom, right)
# check if dog
left = tan_sand_patches.horizontal_center - 200
right = tan_sand_patches.horizontal_center + 200
bottom = tan_sand_patches.vertical_center - 200
top = tan_sand_patches.vertical_center + 200
sand = sand_patches.crop(left, bottom, right)
# check if tan
left = tan_sand_patches.horizontal_center - 200
right = tan_sand_patches.horizontal_center + 200
bottom = tan_sand_patches.vertical_center - 200
top = tan_sand_patches.vertical_center + 200
tan_sand = tan_sand_patches.crop(left, bottom, right)
# check if dog
left = tan_sand_patches.horizontal_center - 200
right = tan_sand_patches.horizontal_center + 200
bottom = tan_sand_patches.vertical_center - 200
top = tan_sand_patches.vertical_center + 200
sand = sand_patches.crop(left, bottom, right)
# check if tan
left = tan_sand_patches.horizontal_center - 200
right = tan_sand_patches.horizontal_center + 200
bottom = tan_sand_patches.vertical_center - 200
top = tan_sand_patches.vertical_center + 200
tan_sand = tan_sand"
1478089,Are the door and the garage door made of the same material?,"    door_patches = ImagePatch(image).find(""door"")
    garage_door_patches = ImagePatch(image).find(""garage door"")
    # Question assumes one door and one garage door
    if len(door_patches) < 1 or len(garage_door_patches) < 1:
        # If no door or garage door is found, query the image directly
        return ImagePatch(image).simple_query(""Are the door and the garage door made of the same material?"")
    door = door_patches[0]
    garage_door = garage_door_patches[0]
    is_same_material = door.verify_property(""door"", garage_door.simple_query(""What is the door made of?"")) # crop would include the door so keep it in the query
    return bool_to_yesno(is_same_material)"
1250685,Was this picture taken in a bathroom or at a dining room?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"")"
10436844,Is the zebra's nose soft and brown?,"    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    is_nose_soft_and_brown = zebra_patches[0].verify_property(""nose"", ""soft brown"")
    return bool_to_yesno(is_nose_soft_and_brown)"
10683765,Does the shirt have blue color?,"    shirt_patches = ImagePatch(image).find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return ImagePatch(image).simple_query(""Is the shirt blue?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""blue"")"
1593352,Do the draperies look white and striped?,"    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""drapery"")
    # Question assumes only one drapery patch
    is_white_and_striped = ""yes"" in [patch.simple_query(""Is the drapery white?"") for patch in drapery_patches] and ""yes"" in [patch.simple_query(""Is the drapery striped?"") for patch in drapery_patches]
    return bool_to_yesno(is_white_and_striped)"
16553304,Are the trunks both long and wide?,"    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only two trunk patches (left and right)
    if len(trunk_patches) != 2:
        # If there is no second trunk, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    left_trunk = trunk_patches[0]
    right_trunk = trunk_patches[1]
    is_long_and_wide = (left_trunk.simple_query(""Is the trunk long?"") == ""yes"" and
                        left_trunk.simple_query(""Is the trunk wide?"") == ""yes"" and
                        right_trunk.simple_query(""Is the trunk long?"") == ""yes"" and
                        right_trunk.simple_query(""Is the trunk wide?"") == ""yes"")
    return bool_to_yesno(is_long_and_wide)"
7165102,Is the car on the left of the photo?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the car on the left of the photo?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?,"    image_patch = ImagePatch(image)
    bananas_patches = image_patch.find(""banana that looks yellow and green"")
    # Question assumes only one banana patch
    is_short = ""yes""
    for banana_patch in bananas_patches:
        if banana_patch.simple_query(""Is the banana short?"") != is_short:
            is_short = ""no""
    return bool_to_yesno(is_short == ""yes"")"
19279872,What is the man to the right of the helmet wearing?,"    # asks for the predicate of a relational verb (right of), so ask directly
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet query                    # for  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   for                                                                                                                                                                                                                                                                                                                                                                                               "
4285513,What is the color of the floor?,"    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor?"")
    return floor_patches[0].simple_query(""What is the color of the floor?"")"
3974266,Do the trousers look tan?,"    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan"")"
11595009,What are the devices to the right of the device that is to the right of the remote control?,"    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    if len(remote_control_patches) < 2:
        # If there is no device to the right of the remote control, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    rightmost_remote_control = remote_control_patches[0]
    second_rightmost_remote_control = remote_control_patches[1]
    devices_to_the_right = image_patch.find(""laptop"") + image_patch.find(""router"") # crop would include the device so keep it in the query
    for device in devices_to_the_right:
        if device.horizontal_center > rightmost_remote_control.horizontal_center and device.horizontal_center < second_rightmost_remote_control.horizontal_center:
            return device.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    # If no devices are to the right of the second rightmost remote control, query the image directly
    return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")"
6183000,Are there nightstands or beds?,"    image_patch = ImagePatch(image)
    is_nightstand_or_bed = image_patch.exists(""nightstand"") or image_patch.exists(""night bed with headboard"") or image_patch.exists(""night bed with footboard"") or image_patch.exists(""night bed with both head and footboard"") or image_patch.exists(""night bed with only headboard"") or image_patch.exists(""night bed with only footboard"") or image_patch.exists(""night bed with no head or footboard"") or image_patch.exists(""night bed with no head or footboard and no bed frame"") or image_patch.exists(""night bed with no head or footboard and no bed frame and no headboard"") or image_patch.exists(""night bed with no head or footboard and no bed frame and no headboard and no footboard"")
    return bool_to_yesno(is_nightstand_or_bed)"
14143982,Is it an outdoors scene?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an outdoors scene?"")"
6123160,Are the speakers to the left of a Wii controller?,"    image_patch = ImagePatch(image)
    wii_controller_patches = image_patch.find(""wii controller"")
    if len(wii_controller_patches) < 2:  # need at least two for left and right
        # If no wii controller is found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    for wii_controller_patch in wii_controller_patches:
        if wii_controller_patch.horizontal_center > (image_patch.horizontal_center + (image_patch.width / 2)):
            for other_wii_controller_patch in wii_controller_patches:
                if wii_controller_patch.horizontal_center < other_wii_controller_patch.horizontal_center:
                    return bool_to_yesno(image_patch.exists(""speaker"")) # crop would include the speaker so keep it in the query
    # If no wii controller is to the right of the center, query the image directly
    return bool_to_yesno(image_patch.exists(""speaker""))"
3681634,Is the plastic fork in the top or in the bottom part of the photo?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""plastic fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    if fork_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
13629530,What is the vehicle on the street?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle on the street?"")
    return vehicle_patches[0].simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    is_table_or_pillow_with_chair = image_patch.exists(""table with chair on top"") or image_patch.exists(""pillow with chair on top"")
    is_chair_on_table_or_pillow = image_patch.exists(""chair on top of table"") or image_patch.exists(""chair on top of pillow"")
    is_chair_on_table_or_pillow_with_chair = image_patch.exists(""table with chair on top of pillow"") or image_patch.exists(""pillow with chair on top of pillow"")
    is_chair_on_table_or_pillow_with_chair_and_chair_on_table_or_pillow = image_patch.exists(""table with chair on top of pillow with chair on top"") or image_patch.exists(""pillow with chair on top of pillow with chair on top"")
    is_chair_on_table_or_pillow_with_chair_and_chair_on_table_or_pillow = image_patch.exists(""table with chair on top of pillow with chair on top of table"") or image_patch.exists(""pillow with chair on top of pillow with chair on top of pillow"")
    is_chair_on_table_or_pillow_with_chair_and_chair_on_table_or_pillow_with_chair = image_patch.exists(""table with chair on top of pillow with chair on top of table with chair on top"") or image_patch.exists(""pillow with chair on top of pillow with chair on top of pillow with chair on top"")
    is_chair_on_table_or_pillow_with_chair_and_chair_on_table_or_pillow_with_chair_and_chair_on_table_or_pillow = image_patch.exists(""table with chair on top of pillow with chair on top of table with chair on top of pillow"") or image_patch.exists(""pillow with chair on top of pillow with chair on top of pillow with chair on top of pillow"")
    is_chair_on_table_or_pillow_with_chair_and_chair_on_table_or_pillow_with_chair_and_chair_on_table_or_pillow_with_chair = image_patch.exists(""table with chair on top of pillow with chair on top of table with chair on top of pillow with chair on top"") or image_patch.exists(""pillow with chair on top of pillow with chair on top of pillow with chair on top of pillow with chair on top"")
    is_chair_on_table_or_pillow_with_chair_and_chair_on_table_or_pillow_with_ch"
10607062,What color is the hat the man is in?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = man_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        # If no hat is found, query the man directly
        return man_patch.simple_query(""What color is the hat the man is in?"")
    return hat_patches[0].simple_query(""What color is the hat?"")"
1849976,What vegetables are to the left of the spoon?,"    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    spoon_patch = spoon_patches[0]
    veggie_patches = image_patch.find(""vegetable"")
    # Question assumes one veggie patch
    for veggie_patch in veggie_patches:
        if veggie_patch.horizontal_center < spoon_patch.horizontal_center:
            return veggie_patch.simple_query(""What vegetables are to the left of the spoon?"") # crop would include the spoon so keep it in the query
    # If no veggie is to the left of the spoon, pick the first veggie
    return veggie_patches[0].simple_query(""What vegetables are to the left of the spoon?"")"
14827816,Is the statue made of bronze or stone?,"    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    return statue_patches[0].simple_query(""Is the statue made of bronze or stone?"")"
857204,What's the woman wearing?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"")"
2201105,Is the ball pink?,"    ball_patches = ImagePatch(image).find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch =   # for Pylint  # image_patch.simple_query(""Is the ball pink?""  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for Pylint  #  # for"
14616023,What piece of furniture are the cords in front of?,"    image_patch = ImagePatch(image)
    cord_patches = image_patch.find(""cord"")
    # Question assumes only one cord patch
    if len(cord_patches) == 0:
        # If no cord is found, query the image directly
        return image_patch.simple_query(""What piece of furniture are the cords in front of?"")
    for cord_patch in cord_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if cord_patch.horizontal_center > furniture_patch.horizontal_center:
                return furniture_patch.simple_query(""What piece of furniture are the cords in front of?"")
            else:
                return furniture_patch.simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?,"    image_patch = ImagePatch(image)
    doors_and_windows = image_patch.find(""door"") + image_patch.find(""window"")
    # Question assumes at least one door or window
    if len(doors_and_windows) < 2:
        # If there is only one door or window, query the image directly
        return image_patch.simple_query(""Are there both doors and windows in this photo?"")
    else:
        return bool_to_yesno(True) # True because there is more than one door or window"
8249677,On which side of the image is the black car?,"    image_patch = ImagePatch(image)
    black_cars = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_cars) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    if black_cars[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?,"    image_patch = ImagePatch(image)
    striped_animal_patches = image_patch.find(""striped animal"")
    # Question assumes only one striped animal patch
    if len(striped_animal_patches) == 0:
        # If no striped animal is found, query the image directly
        return image_patch.simple_query(""What is the striped animal called?"")
    return striped_animal_patches[0].simple_query(""What is the striped animal called?"")"
1479068,Is it outdoors?,"    image_patch = ImagePatch(image)
    is_outdoors = image_patch.simple_query(""Is it outdoors?"")
    return is_outdoors"
16155046,Is the dry grass below a zebra?,"    image_patch = ImagePatch(image)
    is_grass = image_patch.exists(""dry grass"")
    is_zebra = image_patch.exists(""zebra"")
    is_below = image_patch.exists(""zebra with dry grass below"")
    is_grass_on_zebra = image_patch.verify_property(""zebra"", ""dry grass on back"")
    is_zebra_head = image_patch.verify_property(""zebra"", ""head with dry grass below"")
    is_zebra_body = image_patch.verify_property(""zebra"", ""body with dry grass below"")
    is_zebra_leg = image_patch.verify_property(""zebra"", ""leg with dry grass below"")
    is_zebra_foot = image_patch.verify_property(""zebra"", ""foot with dry grass below"")
    is_zebra_strand = image_patch.verify_property(""zebra"", ""strand of hair with dry grass below"")
    is_zebra_string = image_patch.verify_property(""zebra"", ""string of saliva with dry grass below"")
    is_zebra = is_zebra_head or is_zebra_body or is_zebra_leg or is_zebra_foot or is_zebra_strand or is_zebra_string
    return bool_to_yesno(is_zebra)"
16515071,What is the person in the water wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    return person_patches[0].simple_query(""What is the person wearing?"")"
161015042,Who is wearing the goggles?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the goggles?"")
    for person_patch in person_patches:
        who_wearing_goggles = person_patch.simple_query(""Who is wearing the goggles?"") # crop would include the goggles so keep it in the query
        if who_wearing_goggles != ""no one"":
            return who_wearing_goggles
    # If no person is wearing goggles, pick the first person
    return person_patches[0].simple_query(""Who is wearing the goggles?"")"
19149868,What is pulled by the lady?,"    # asks for the predicate of a relational verb (pulled by), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is pulled by the lady?"")"
5199994,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
19184475,Are the man glasses on the left side of the image?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man glasses"")
    # Question assumes only one man glasses patch
    if len(man_patches) == 0:
        # If no man glasses are found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    man_glass = man_patches[0]
    if man_glass.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
7149602,Is the shirt orange or blue?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    return shirt_patches[0].best_text_match([""orange"", ""blue""])"
19479555,What is the person to the right of the benches holding?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    bench_patches = image_patch.find(""bench"")
    # Question assumes one person patch and one bench patch
    for person_patch in person_patches:
        for bench_patch in bench_patches:
            if person_patch.horizontal_center > bench_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the bench holding?"")
    # If no person is to the right of a bench, query the image directly
    return image_patch.simple_query(""What is the person to the right of the bench holding?"")"
19273393,Are there both a door and a window in this photo?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    window_patches = image_patch.find(""window"")
    # Question assumes at least one door and one window
    if len(door_patches) < 1 or len(window_patches) < 1:
        # If no door or window is found, query the image directly
        return image_patch.simple_query(""Are there both a door and a window in this photo?"")
    return bool_to_yesno(True) # True because there is at least one of each"
6481656,What is the man doing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man doing?"")"
13127703,What kind of drink is to the left of the bottle the woman is pouring?,"    # asks for the predicate of a relational verb (pouring to the left of), so ask directly
    image_patch = ImagePatch(image)
    bottle_and_woman_patches = image_patch.find(""woman pouring bottle"")
    # Question assumes only one bottle and woman patch
    if len(bottle_and_woman_patches) == 0:
        # If no bottle and woman are found, query the image directly
        return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    bottle_and_woman_patch = bottle_and_woman_patches[0]
    bottle_patches = image_patch.find(""bottle"")
    for bottle_patch in bottle_patches:
        if bottle_patch.horizontal_center > bottle_and_woman_patch.horizontal_center:
            return bottle_and_woman_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    # If no bottle is found to the right of the woman, query the image directly
    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")"
2378018,What is the toilet in front of?,"    # asks for the predicate of a relational verb (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"")"
8430841,Is the frisbee to the left of the guy?,"    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    guy_patches = image_patch.find(""guy"")
    # Question assumes one guy patch and one frisbee patch
    if len(guy_patches) < 1 or len(frisbee_patches) < 1:
        # If no guy or frisbee is found, query the image directly
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    for frisbee_patch in frisbee_patches:
        for guy_patch in guy_patches:
            if frisbee_patch.horizontal_center < guy_patch.horizontal_center:
                return ""yes""
    return ""no""
"
18616818,The man is watching who?,"    # asks for the predicate of a relational verb (watching who), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the man watching?"")"
179526,Is the white dog behind a girl?,"    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog behind a girl?"")
    white_dog_patch = white_dog_patches[0]
    for girl_patch in image_patch.find(""girl""):
        # Question assumes only one girl patch
        if white_dog_patch.horizontal_center > girl_patch.horizontal_center:
            return ""no""
    return bool_to_yesno(image_patch.verify_property(""white dog"", ""girl behind"") or white_dog_patch.simple_query(""Is the white dog behind a girl?"") == ""yes"")"
21018827,Is the river murky and calm?,"    image_patch = ImagePatch(image)
    river_patches = image_patch.find(""river"")
    # Question assumes only one river patch
    if len(river_patches) == 0:
        # If no river is found, query the image directly
        return image_patch.simple_query(""Is the river murky and calm?"")
    return bool_to_yesno(river_patches[0].verify_property(""river"", ""murky calm"") or river_patches[0].verify_property(""river"", ""murky calm sea"") or river_patches[0].verify_property(""river"", ""calm sea"")"
3697449,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
        return who_is_wearing # no need to check further properties
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?,"    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    is_both = image_patch.exists(""racket and toothbrush"")
    if is_both:
        return bool_to_yesno(is_both)
    else:
        return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    sign_patches = image_patch.find(""sign"")
    # Question assumes one car patch and one sign patch
    if len(car_patches) < 1 or len(sign_patches) < 1:
        # If no car or sign is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    for car_patch in car_patches:
        for sign_patch in sign_patches:
            common_property = set()
            if car_patch.horizontal_center < sign_patch.horizontal_center:
                # if the car is to the left of the sign
                common_property.add(""road"")
            if car_patch.simple_query(""Is the car red?"") == ""yes"":
                common_property.add(""red"")
            if car_patch.simple_query(""Is the sign red?"") == ""yes"":
                common_property.add(""red"")
            if len(common_property) > 0:
                return image_patch.simple_query(""What do both the car and the sign have in common?"") in common_property
            else:
                return ""shape""
    # If no common property is found, query the image directly
    return image_patch.simple_query(""What do both the car and the sign have in common?"")"
11764476,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    return plate_patches[0].simple_query(""On what kind of furniture is the plate?"")"
61022361,What is the painting that is to the left of the clock hanging on?,"    # asks for the predicate of a relational verb (hanging on), so ask directly
    image_patch = ImagePatch(image)
    # crop would include the objects hanging on, so keep it in the query
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")"
1527392,"What color is the fence, tan or black?","    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    return fence_patches[0].best_text_match([""tan"", ""black""])"
19229351,Do you see both bowls and carrots?,"    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)"
1297082,On which side is the silver fork?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16757832,Are there any blue helmets or napkins?,"    is_blue_helmethad = ImagePatch(image).verify_property(""blue helmet"", ""blue"")
    is_blue_helmethad_and_helmet = ImagePatch(image).verify_property(""blue helmet"", ""blue helmet"")
    is_blue_helmethad_and_had = ImagePatch(image).verify_property(""blue helmet"", ""blue had"")
    is_blue_helmethad_and_helm = ImagePatch(image).verify_property(""blue helmet"", ""blue helm"")
    is_blue_helmethad_and_hel = ImagePatch(image).verify_property(""blue helmet"", ""blue hel"")
    is_blue_helmethad_and_helme = ImagePatch(image).verify_property(""blue helmet"", ""blue helme"")
    is_blue_helmethad_and_helmet = ImagePatch(image).verify_property(""blue helmet"", ""blue helmet"")
    is_blue_helmethad_and_helmett = ImagePatch(image).verify_property(""blue helmet"", ""blue helmett"")
    is_blue_helmethad_and_helmetr = ImagePatch(image).verify_property(""blue helmet"", ""blue helmetr"")
    is_blue_helmethad_and_helmetl = ImagePatch(image).verify_property(""blue helmet"", ""blue helmetl"")
    is_blue_helmethad_and_helmeto = ImagePatch(image).verify_property(""blue helmet"", ""blue helmeto"")
    is_blue_helmethad_and_helmet = ImagePatch(image).verify_property(""blue helmet"", ""blue helmet"")
    is_blue_helmethad_and_hel = ImagePatch(image).verify_property(""blue helmet"", ""blue hel"")
    is_blue_helmethad_and_helme = ImagePatch(image).verify_property(""blue helmet"", ""blue helme"")
    is_blue_helmethad_and_helmeo = ImagePatch(image).verify_property(""blue helmet"", ""blue helmeo"")
    is_blue_helmethad_and_helmeo = ImagePatch(image).verify_property(""blue helmet"", ""blue helmeo"")
    is_blue_helmethad_and_helmeot = ImagePatch(image).verify_property(""blue helmet"", ""blue helmeot"")
    is_blue_helmethad_and_helmeot = ImagePatch(image).verify_property(""blue helmet"", ""blue helmeot"")
    is_blue_helmethad_and_helmeoto = ImagePatch(image).verify_property(""blue helmet"", ""blue helmeoto"")
    is_blue_helmeth"
839816,"In which part of the photo is the racket, the top or the bottom?","    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12385226,Is there a mirror in the bathroom?,"    image_patch = ImagePatch(image)
    is_mirror = image_patch.exists(""mirror"")
    is_bathroom = image_patch.exists(""bathroom"")
    if is_bathroom:
        return bool_to_yesno(is_mirror)
    else:
        # If no bathroom is found, query the image directly
        return image_patch.simple_query(""Is there a mirror in the bathroom?"")"
18720852,Are there either blankets or tents in this picture?,"    image_patch = ImagePatch(image)
    is_blanket_or_tent = image_patch.exists(""blanket"") or image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket_or_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman that is on left"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    if woman_patches[0].horizontal_center < image_patch.width / 2:
        if woman_patches[0].horizontal_center < (image_patch.find(""cardboard box"")[0].horizontal_center + image_patch.width / 2):
            return ""left""
    else:
        return ""right""
"
19453453,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        who_wearing_shirt = person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
        if who_wearing_shirt != ""no one"":
            return who_wearing_shirt
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?,"    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    if house_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?,"    # asks for the predicate of a relational verb (look red), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the flowers that look red?"")"
15710688,Is the shirt short sleeved or sleeveless?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    if shirt_patches[0].verify_property(""shirt"", ""sleeveless""):
        return ""sleeveless""
    elif shirt_patches[0].verify_property(""shirt"", ""short sleeved""):
        return ""short sleeved""
    else:
        return shirt_patches[0].simple_query(""Is the shirt short sleeved or sleeveless?"")"
5533952,What are the white wires connected to?,"    image_patch = ImagePatch(image)
    white_wire_patches = image_patch.find(""white wire"")
    if len(white_wire_patches) == 0:
        # If no white wire is found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    white_wire_patch = white_wire_patches[0]
    connection_patches = image_patch.find(""car""), image_patch.find(""lamp""), image_patch.find(""door"") if image_patch.exists(""car""), image_patch.exists(""lamp""), image_patch.exists(""door"") else []
    for object_patches in connection_patches:
        for object_patch in object_patches:
            if white_wire_patch.horizontal_center > object_patch.horizontal_center:
                return object_patch.simple_query(""What are the white wires connected to?"")
    return white_wire_patch.simple_query(""What are the white wires connected to?"")"
11313555,"What type of furniture is that, a table or a nightstand?","    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    return furniture_patches[0].simple_query(""What type of furniture is that, a table or a nightstand?"")"
10508893,What animals are in front of the trees?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in front of the trees?"")"
14501997,What is the gate made of?,"    image_patch = ImagePatch(image)
    gate_patches = image_patch.find(""gate"")
    # Question assumes only one gate patch
    if len(gate_patches) == 0:
        # If no gate is found, query the image directly
        return image_patch.simple_query(""What is the gate made of?"")
    return gate_patches[0].simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device on top of table"")
    if len(device_patches) == 0:
        # If no device is found on top of the table, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    # Question assumes only one device patch
    return device_patches[0].simple_query(""What color is the device on top of the table?"")"
181032044,Are these closed drawers?,"    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    is_closed = (drawer_patches[0].simple_query(""Is the drawer closed?"") == ""yes"")
    return bool_to_yesno(is_closed)"
383,What kind of furniture is made of wood?,"    image_patch = ImagePatch(image)
    wood_furniture_patches = image_patch.find(""wooden furniture"")
    if len(wood_furniture_patches) == 0:
        # If no wooden furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    for wood_furniture_patch in wood_furniture_patches:
        wood_furniture_name = wood_furniture_patch.simple_query(""What is the type of furniture?"")
        if wood_furniture_name == ""table"" or wood_furniture_name == ""chair"" or wood_furniture_name == ""bench"":
            return wood_furniture_name
    # If no specific type of furniture is found, query the image directly
    return image_patch.simple_query(""What kind of furniture is made of wood?"")"
101054962,What is the person by the bananas wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    banana_patches = image_patch.find(""banana"")
    # Question assumes one person patch and one banana patch
    if len(person_patches) < 1 or len(banana_patches) < 1:
        # If no person or banana is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    for person_patch in person_patches:
        for banana_patch in banana_patches:
            if abs(person_patch.horizontal_center - banana_patch.horizontal_center) < 50:  # 50 pixel tolerance
                return person_patch.simple_query(""What is the person wearing?"") # crop would include the person and banana so keep it in the query
    # If no banana is nearby, pick the first person
    return person_patches[0].simple_query(""What is the person wearing?"")"
759165,What is the color of the tower in the middle of the picture?,"    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    # Question assumes only one tower patch
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    return tower_patches[0].simple_query(""What is the color of the tower?"")"
10775539,Is this giraffe tall and white?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is the animal tall and white?"")
    is_tall_and_white = (giraffe_patches[0].verify_property(""giraffe"", ""tall"") and
                          giraffe_patches[0].verify_property(""giraffe"", ""white""))
    return bool_to_yesno(is_tall_and_white)"
19981804,On which side of the photo is the colorful screen?,"    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""colorful screen"")
    if len(screen_patches) == 0:
        # If no screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    if screen_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7903654,Is the tap on the left side or on the right?,"    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6206183,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    return coat_patches[0].best_text_match([""black"", ""beige""])"
13123207,Does the kite near the field look high and red?,"    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    field_patches = image_patch.find(""field"")
    # Question assumes one kite patch and one field patch
    is_red_and_high = ""yes"" in [""yes"" for kite_patch in kite_patches if kite_patch.simple_query(""Is the kite red?"") == ""yes"" and kite_patch.simple_query(""Is the kite high?"") == ""yes""]
    is_red_and_high_kite = ""yes"" if is_red_and_high else ""no""
    is_on_field = ""yes"" in [1 for kite_patch in kite_patches if kite_patch.simple_query(""Is the kite on a field?"") == ""yes""]
    is_on_field_kite = ""yes"" if is_on_field else ""no""
    is_red_and_high_kite_and_on_field = is_red_and_high_kite and is_on_field_kite
    return bool_to_yesno(is_red_and_high_kite_and_on_field)"
7740092,Are there any utensils in this picture?,"    image_patch = ImagePatch(image)
    is_utensil = image_patch.exists(""utensil"")
    is_knive = image_patch.exists(""knife"")
    is_spoon = image_patch.exists(""spoon"")
    is_fork = image_patch.exists(""fork"")
    is_scissors = image_patch.exists(""scissors"")
    is_other = image_patch.exists(""utensil (other)"")
    is_other2 = image_patch.exists(""utensil (other2)"")
    is_other3 = image_patch.exists(""utensil (other3)"")
    is_other4 = image_patch.exists(""utensil (other4)"")
    is_other5 = image_patch.exists(""utensil (other5)"")
    is_other6 = image_patch.exists(""utensil (other6)"")
    is_other7 = image_patch.exists(""utensil (other7)"")
    is_other8 = image_patch.exists(""utensil (other8)"")
    is_other9 = image_patch.exists(""utensil (other9)"")
    is_other10 = image_patch.exists(""utensil (other10)"")
    is_other11 = image_patch.exists(""utensil (other11)"")
    is_other12 = image_patch.exists(""utensil (other12)"")
    is_other13 = image_patch.exists(""utensil (other13)"")
    is_other14 = image_patch.exists(""utensil (other14)"")
    is_other15 = image_patch.exists(""utensil (other15)"")
    is_other16 = image_patch.exists(""utensil (other16)"")
    is_other17 = image_patch.exists(""utensil (other17)"")
    is_other18 = image_patch.exists(""utensil (other18)"")
    is_other19 = image_patch.exists(""utensil (other19)"")
    is_other20 = image_patch.exists(""utensil (other20)"")
    is_other21 = image_patch.exists(""utensil (other21)"")
    is_other22 = image_patch.exists(""utensil (other22)"")
    is_other23 = image_patch.exists(""utensil (other23)"")
    is_other24 = image_patch.exists(""utensil (other24)"")
    is_other25 = image_patch.exists(""utensil (other25)"")
    is_other26 = image_patch.exists(""utensil (other26)"")
    is_other27 = image_patch.exists(""utensil (other27)"")
    is_other28 = image_patch.exists(""utensil ("
8774975,What is around the guy?,"    # asks for the predicate of a relational verb (around), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?,"    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?,"    image_patch = ImagePatch(image)
    staircases = image_patch.find(""staircase"")
    if len(staircases) < 2:
        # If there is not at least two staircases, query the image directly
        return image_patch.simple_query(""Is the staircase colorized?"")
    first_staircase = staircases[0]
    second_staircase = staircases[1]
    is_color_diff = False
    for pixel in first_staircase.cropped_image.flatten():
        pixel = pixel.reshape((3,))
        if pixel[0] != second_staircase.cropped_image[0,0,0] or pixel[1] != second_staircase.cropped_image[0,0,1] or pixel[2] != second_staircase.cropped_image[0,0,2]:
            is_color_diff = True
            break
    return bool_to_yesno(is_color_diff)"
1605874,What color are the containers that are on the right?,"    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only the rightmost container is of interest
    rightmost_container = max(container_patches, key=lambda x: x.horizontal_center)
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    return rightmost_container.simple_query(""What color are you?"")"
12495781,Are the people to the right or to the left of the cone that is orange?,"    image_patch = ImagePatch(image)
    orange_cone_patches = image_patch.find(""orange cone"")
    if len(orange_cone_patches) == 0:
        # If no orange cone is found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    orange_cone = orange_cone_patches[0]
    people_patches = image_patch.find(""person"")
    for person in people_patches:
        if person.horizontal_center < orange_cone.horizontal_center:
            return ""left""
    return ""right"""
14165681,"What type of clothing is light, the sweater or the cap?","    image_patch = ImagePatch(image)
    light_objects = [obj for obj in image_patch.find(""sweater"") + image_patch.find(""cap"") if obj.simple_query(""Is the object light?"") == ""yes""]
    if len(light_objects) < 2:
        # If there is only one light object, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    for light_object in light_objects:
        if light_object.simple_query(""Is the object a sweater?"") == ""yes"":
            return ""sweater""
        elif light_object.simple_query(""Is the object a cap?"") == ""yes"":
            return ""cap""
    # If no light objects are found, query the image directly
    return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")"
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    girl_patches = image_patch.find(""girl that is wearing jeans"")
    # Question assumes one chair patch and one girl patch
    if len(girl_patches) == 0 or len(chair_patches) == 0:
        # If no chair or girl is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    for chair_patch in chair_patches:
        for girl_patch in girl_patches =       # for  #  #  #  1  1  1  1  1  1  1  1  1  1  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  2  2  2  2  2  2  2  2  2  2  #  #  3  3  3  3  3  3  3  3  3  3  #  #  #  4  4  4  4  4  4  4  4  4  4  #  #  #  #  # 5  5  5  5  5  5  5  5  5  5  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  1  1  1  1  1  1  1  1  1  "
5617223,"What color is the container to the left of the horse, green or silver?","    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container to the left of the horse"")
    if len(container_patches) < 1:  # if there is no container to the left of the horse
        container_patches = image_patch.find(""container to the right of the horse"")
    if len(container_patches) < 1:  # if there is no container to the right of the horse
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    container_patch = container_patches[0]
    return container_patch.best_text_match([""green"", ""silver""])"
2428964,Is the water gray or teal?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].best_text_match([""gray"", ""teal""])"
19620769,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    if lamp_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?,"    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    # Question assumes only one brown animal patch
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    return bool_to_yesno(brown_animal_patches[0].verify_property(""brown animal"", ""tiny"") or brown_animal_patches[0].verify_property(""brown animal"", ""rabbit""))"
5672532,Does that shirt look long sleeved?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt long sleeved?"")
    return shirt_patches[0].verify_property(""shirt"", ""long sleeved"")"
6146439,Does the box look green?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Is the box green?"")
    return bool_to_yesno(box_patches[0].verify_property(""box"", ""green"") # crop would include the box so keep it in the query) # noqa: E501

1910285,Is the white container on the left of the image?,"    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    if len(white_container_patches) == 0:
        # If no white container is found, query the image directly
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    white_container = white_container_patches[0]
    if white_container.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
13362134,Is that shower curtain to the left of a toilet?,"    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes one shower curtain patch and one toilet patch
    for shower_curtain_patch in shower_curtain_patches:
        for toilet_patch in toilet_patches:
            if shower_curtain_patch.horizontal_center < toilet_patch.horizontal_center:
                return ""yes""
    # If no shower curtain is to the left of a toilet, query the image directly
    return ""no"""
161060488,Is there any cabinet to the right of the stove?,"    image_patch = ImagePatch(image)
    stove_patches = image_patch.find(""stove"")
    if len(stove_patches) < 2:
        # If there is no second object to the right, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for i, stove_patch in enumerate(stove_patches):
        if i < len(stove_patches) - 1:
            if stove_patch.horizontal_center < (stove_patches[0].horizontal_center + stove_patches[1].horizontal_center) / 2:
                return bool_to_yesno(image_patch.exists(""cabinet"")) # crop would include the cabinet so keep it in the query
    # If no cabinet is to the right of the stove, query the image directly
    return bool_to_yesno(image_patch.exists(""cabinet""))"
111055042,Is the chair on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    if chair_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
151068,Which kind of clothing is white?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white"")
    # Question assumes only one white patch
    if len(white_patches) == 0:
        # If no white is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    return white_patches[0].simple_query(""Which kind of clothing is white?"")"
19387951,Is this place the forest or the garden?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"")"
1781695,What's on the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket query                    # for   #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #   #  #  #  #  #  #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  # "
17699779,Is she on a bed?,"    image_patch = ImagePatch(image)
    is_on_bed = image_patch.simple_query(""Is she on a bed?"")
    return bool_to_yesno(is_on_bed)"
464441,"What piece of furniture is the blanket on, a bed or a sofa?","    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket query                    # for   #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  "
9505496,Are the wires above a man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    man_patch = man_patches[0]
    wire_patches = image_patch.find(""wire"")
    # Question assumes one wire patch
    for wire_patch in wire_patches:
        if wire_patch.vertical_center > man_patch.vertical_center:
            return ""no""
    return bool_to_yesno(any(man_patch.verify_property(""man"", ""wire"") for man_patch in man_patches) or
                        any(wire_patch.verify_property(""man"", ""wire"") for wire_patch in wire_patches))"
4625512,What is the woman doing?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman doing?"")
    return woman_patches[0].simple_query(""What is the woman doing?"")"
9441941,Is the woman's hair red or black?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    return woman_patches[0].simple_query(""Is the woman's hair red or black?"")"
2387432,What's on the table?,"    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What's on the table?"")
    return table_patches[0].simple_query(""What's on the table?"")"
10534717,What is the pillow on?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""What is the pillow on?"")
    for pillow_patch in pillow_patches:
        on_patches = image_patch.find(""car""), image_patch.find(""truck""), image_patch.find(""boat""), image_patch.find(""road"") if pillow_patch.simple_query(""Is the pillow on a vehicle?"") == ""no"" else (image_patch.find(""car""), image_patch.find(""truck""), image_patch.find(""boat"")
        # , image_patch.find(""van""), image_patch.find(""scooter""), image_patch.find(""scooter 2"")
        # , image_patch.find(""van 2""), image_patch.find(""van 3"")
        # , image_patch.find(""van 4""), image_patch.find(""van 5"")
        # , image_patch.find(""van 6""), image_patch.find(""van 7"")
        # , image_patch.find(""van 8""), image_patch.find(""van 9"")
        # , image_patch.find(""van 10""), image_patch.find(""van 11"")
        # , image_patch.find(""van 12""), image_patch.find(""van 13"")
        # , image_patch.find(""van 14""), image_patch.find(""van 15"")
        # , image_patch.find(""van 16""), image_patch.find(""van 17"")
        # , image_patch.find(""van 18""), image_patch.find(""van 19"")
        # , image_patch.find(""van 20""), image_patch.find(""van 21"")
        # , image_patch.find(""van 22""), image_patch.find(""van 23"")
        # , image_patch.find(""van 24""), image_patch.find(""van 25"")
        # , image_patch.find(""van 26""), image_patch.find(""van 27"")
        # , image_patch.find(""van 28""), image_patch.find(""van 29"")
        # , image_patch.find(""van 30""), image_patch.find(""van 31"")
        # , image_patch.find(""van 32""), image_patch.find(""van 33"")
        # , image_patch.find(""van 34""), image_patch.find(""van 35"")
        # , image_patch.find(""van 36""),"
19335685,"What fruits is the container behind of, apples or bananas?","    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")
    container_patch = container_patches[0]
    container_content_patches = container_patch.find(""apples or bananas"")
    # Question assumes only one container content patch
    if len(container_content_patches) == 0:
        # If no container content is found, query the image directly
        return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")
    for container_content_patch in container_content_patches:
        if container_patch.simple_query(""Is the container content an apple?"") == ""yes"":
            return ""apples""
    for container_content_patch in container_content_patches:
        if container_patch.simple_query(""Is the container content a banana?"") == ""yes"":
            return ""bananas""
    # If no apples or bananas are found, query the image directly
    return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")"
3127817,The goat is standing in what?,"    image_patch = ImagePatch(image)
    # contains a relation (standing in, what it is), so ask directly
    return image_patch.simple_query(""What is the goat standing in?"")"
1588567,Where does the man that to the right of the mirror sit?,"    # asks for the predicate of a relational verb (sitting at), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that to the right of the mirror"")
    if len(man_patches) == 0: # if no man is found, query the image directly
        man_patches = image_patch.find(""man that to the right of the mirror that is not reflected"")
    if len(man_patches) == 0: # if no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    if man_patches[0].horizontal_center < (image_patch.horizontal_center + image_patch.width / 2):
        return ""left""
    else:
        return ""right"""
7399543,What is the floor made of?,"    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    # Question assumes only one room patch
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""What is the floor made of?"")
    return room_patches[0].simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is the house behind of?"")
    return animal_patches[0].simple_query(""What kind of animal is the house behind of?"")"
1174904,Is the cobblestone sidewalk both large and gray?,"    image_patch = ImagePatch(image)
    cobblestone_patches = image_patch.find(""cobblestone"")
    # Question assumes only one cobblestone patch
    if len(cobblestone_patches) == 0:
        # If no cobblestone is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    is_large_and_gray = (cobblestone_patches[0].verify_property(""cobblestone"", ""large"") and
                         cobblestone_patches[0].verify_property(""cobblestone"", ""gray""))
    return bool_to_yesno(is_large_and_gray)"
13375231,What is the lettuce on?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What is the lettuce on?"")
    return lettuce_patches[0].simple_query(""What is the lettuce on?"")"
1194027,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    # Question assumes only one black patch, which is a property of the item (color)
    if len(black_patches) == 0:
        # If no black is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return black_patches[0].simple_query(""Which kind of clothing is black?"")"
9963477,Is the statue wearing a dress?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    for statue_patch in statue_patches:
        is_wearing_dress = (statue_patch.simple_query(""Is the statue wearing a dress?"") == ""yes"")
        if is_wearing_dress:
            return statue_patch.simple_query(""Is the statue wearing a dress?"") # crop would include the dress so keep it in the query
    # If no statue is wearing a dress, pick the first statue
    return statue_patches[0].simple_query(""Is the statue wearing a dress?"")"
1151995,Which side of the photo is the yellow vase on?,"    image_patch = ImagePatch(image)
    vase_patches = image_patch.find(""yellow vase"")
    if len(vase_patches) == 0:
        # If no vase is found, query the image directly
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    if vase_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
712821,What is common to the bear and the belt?,"    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    belt_patches = image_patch.find(""belt"")
    # Question assumes one bear patch and one belt patch
    if len(bear_patches) < 1 or len(belt_patches) < 1:
        # If no bear or belt is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    bear_patch = bear_patches[0]
    belt_patch = belt_patches[0]
    common_properties = [""color"", ""material"", ""shape""]
    for property in common_properties:
        if bear_patch.verify_property(property, property) and belt_patch.verify_property(property, property):
            return property
    # If no common property is found, query the image directly
    return image_patch.simple_query(""What is common to the bear and the belt?"")"
1757418,What is the vehicle to the right of the car?,"    image_patch = ImagePatch(image)
    right_of_car_patches = image_patch.find(""car"")
    # Question assumes one right of car patch
    if len(right_of_car_patches) < 2:
        # If there is no other vehicle to the right of the car, query the image directly
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    for right_of_car_patch in right_of_car_patches[1:]:  # start from the second element (index 1) to get the one to the right
        if right_of_car_patch.horizontal_center > right_of_car_patches[0].horizontal_center:
            return right_of_car_patch.simple_query(""What is the vehicle to the right of the car?"")
    # If no other vehicle is to the right of the car, query the image directly
    return image_patch.simple_query(""What is the vehicle to the right of the car?"")"
7624100,Are the trunks that are gray wet and large?,"    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    is_wet_and_large = ""yes"" * 3 if image_patch.simple_query(""Is the trunk wet?"") == ""yes"" \
        and image_patch.simple_query(""Is the trunk large?"") == ""yes"" \
        and image_patch.simple_query(""Is the trunk gray?"") == ""yes"" \
        else ""no""
    return bool_to_yesno(is_wet_and_large == ""yes"" * 3)"
1125474,"On which side of the photo is the iron fence, the right or the left?","    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    # Question assumes only one iron fence patch
    if len(iron_fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    if iron_fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1300375,What is the name of the item of furniture that the printer is on?,"    # asks for the predicate of a relational verb (on), so ask directly
    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    if len(printer_patches) == 0:
        # If no printer is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that the printer is on?"")
    for printer_patch in printer_patches:
        item_patches = image_patch.find(""table"")
        for item_patch in item_patches:
            if printer_patch.vertical_center > item_patch.horizontal_center:
                return item_patch.simple_query(""What is the item of furniture that the printer is on?"")
    # If no table is found, query the image directly
    return image_patch.simple_query(""What is the item of furniture that the printer is on?"")"
5925196,What's the building covered by?,"    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""What's the building covered by?"")
    return building_patches[0].simple_query(""What's the building covered by?"")"
1948055,What watercraft is the white rope tying?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white rope"")
    if len(white_patches) == 0:
        # If no white rope is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    white_patch = white_patches[0]
    watercraft_patches = image_patch.find(""sailboat"")
    for watercraft_patch in watercraft_patches:
        if white_patch.horizontal_center > watercraft_patch.horizontal_center:
            return white_patch.simple_query(""What watercraft is the white rope tying?"")
    # If no sailboat is found, query the image directly
    return image_patch.simple_query(""What watercraft is the white rope tying?"")"
8540582,What kind of animal is in front of the leafy trees?,"    # asks for the predicate of a relational verb (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?,"    image_patch = ImagePatch(image)
    walking_woman_patches = image_patch.find(""walking woman by bus"")
    if len(walking_woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    # Question assumes only one woman patch
    return walking_woman_patches[0].simple_query(""What does the woman wear?"")"
1129508,Is the controller to the left of a pillow?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for pillow_patch in pillow_patches:
        controller_patches = image_patch.find(""controller"")
        for controller_patch in controller_patches:
            if controller_patch.horizontal_center < pillow_patch.horizontal_center:
                return ""yes""
    return ""no""
"
18664084,Is there any sheep by the fence?,"    image_patch = ImagePatch(image)
    is_sheep_by_fence = False
    fence_patches = image_patch.find(""fence"")
    for fence_patch in fence_patches:
        sheep_patches = image_patch.find(""sheep"")
        for sheep_patch in sheep_patches:
            if sheep_patch.horizontal_center > fence_patch.horizontal_center - 50 and sheep_patch.horizontal_center < fence_patch.horizontal_center + 50:
                is_sheep_by_fence = True
    return bool_to_yesno(is_sheep_by_fence)"
6912079,What animal is this?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is this?"")
    return animal_patches[0].simple_query(""What animal is this?"")"
3412029,Where is the person?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person?"")
    if person_patches[0].vertical_center < image_patch.horizontal_center:
        return ""left""
    elif person_patches[0].vertical_center < (image_patch.horizontal_center + (image_patch.width / 2)):
        return ""left""
    elif person_patches[0].vertical_center < (image_patch.horizontal_center + (image_patch.width / 2) * 2):
        return ""right""
    else:
        return ""right"""
14161122,What animal is in the water?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"")"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?,"    # asks for the predicate of a relational verb (parent to the left of), so ask directly
    image_patch = ImagePatch(image)
    # first, find the baby and the parent
    baby_patches = image_patch.find(""baby"")
    parent_patches = image_patch.find(""parent"")
    # Question assumes one baby patch and one parent patch
    if len(baby_patches) < 1 or len(parent_patches) < 1:
        # If no baby or parent is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    # then, find the item of furniture to the right of the baby
    for baby_patch in baby_patches:
        for parent_patch in parent_patches:
            if baby_patch.horizontal_center > parent_patch.horizontal_center:
                return parent_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    # If no baby is to the right of a parent, query the image directly
    return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")"
15699496,What is the cup that looks clean made of?,"    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    return cup_patches[0].simple_query(""What is the cup that looks clean made of?"")"
12765451,What animals are to the right of the ladder?,"    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    right_patches = image_patch.find(""rabbit""),  # for example, can be any animal    for patch in image_patch.find(""ladder""):
        #  # for patch in
      # for patch in image_patch.find(""ladder""):
    #     right_patches.append(image_patch.find(""rabbit""))
    for patch in image_patch.find(""ladder""):
        right_patches = image_patch.find(""rabbit"")  # for example, can be any animal
        for right_patch in right_patches:
            if right_patch.horizontal_center > patch.horizontal_center:
                return ""rabbit""  # for example, can be any animal
    for patch in image_patch.find(""ladder""):
        right_patches = image_patch.find(""rabbit"")  # for example, can be any animal
        for right_patch in right_patches:
            if right_patch.horizontal_center < patch.horizontal_center:
                return ""rabbit"",  # for example, can be any animal
        # If no rabbit is found to the right of the patch, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")"
191044307,What animal is black?,"    image_patch = ImagePatch(image)
    black_animal_patches = image_patch.find(""black animal"")
    # Question assumes only one black animal patch
    if len(black_animal_patches) == 0:
        # If no black animal is found, query the image directly
        return image_patch.simple_query(""What animal is black?"")
    return black_animal_patches[0].simple_query(""What animal is black?"")"
12639181,Who is wearing shorts?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        who_wearing_shorts = person_patch.simple_query(""Who is wearing shorts?"")
        return who_wearing_shorts # crop would include the shorts so keep it in the query"
10630949,Is the person that is not male wearing an elbow pad?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    is_person_with_elbow_pad = False
    for person_patch in person_patches:
        is_person_not_male = (person_patch.simple_query(""Is the person male?"") == ""no"")
        is_wearing_elbow_pad = person_patch.verify_property(""person"", ""elbow pad"")
        if is_person_not_male and is_wearing_elbow_pad:
            is_person_with_elbow_pad = True
    return bool_to_yesno(is_person_with_elbow_pad)"
14544602,What is the boy holding?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    return boy_patches[0].simple_query(""What is the boy holding?"")"
2986699,Of what material the dish?,"    image_patch = ImagePatch(image)
    dish_patches = image_patch.find(""dish"")
    # Question assumes only one dish patch
    if len(dish_patches) == 0:
        # If no dish is found, query the image directly
        return image_patch.simple_query(""Of what material is the dish?"")
    return dish_patches[0].simple_query(""Of what material is the dish?"")"
161013513,What kind of animal is on the street?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    return animal_patches[0].simple_query(""What kind of animal is on the street?"")"
15143936,What animal is before the roof?,"    # asks for the predicate of a relational verb (before the roof), so ask directly
    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    if len(roof_patches) == 0:
        # If no roof is found, query the image directly
        return image_patch.simple_query(""What animal is before the roof?"")
    roof_patch = roof_patches[0]
    for animal_patch in image_patch.find(""animal""):
        if animal_patch.horizontal_center < roof_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is before the roof?"") # crop would include the roof so keep it in the query
    # If no animal is found before the roof, query the image directly
    return image_patch.simple_query(""What animal is before the roof?"")"
1955043,Who is playing with the ball?,"    # asks for the predicate of a relational verb (playing with), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing with the ball?"")"
91044150,What is the name of the animals in front of the trees beside the river?,"    # asks for the predicate of a relational verb (front of, beside), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?,"    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is hanging?"")
    return fruit_patches[0].simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?,"    image_patch = ImagePatch(image)
    bush_patches = image_patch.find(""bush"")
    # Question assumes only one bush patch
    if len(bush_patches) == 0:
        # If no bush is found, query the image directly
        return image_patch.simple_query(""What is under the bush?"")
    bush_patch = bush_patches[0]
    under_patches = bush_patch.find(""under bush"")
    # Question assumes only one under bush patch
    if len(under_patches) == 0:
        # If no under bush is found, query the bush directly
        return bush_patch.simple_query(""What is under the bush?"")
    for under_patch in under_patches:
        if bush_patch.vertical_center > under_patch.horizontal_center:
            return under_patch.simple_query(""What is under the bush?"") # crop would include the bush so keep it in the query
    # If no under bush is found to the left of the bush, query the bush directly
    return bush_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?,"    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)"
10457241,What is the color of the trousers?,"    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"")"
2913850,Is the placemat in the bottom or in the top part?,"    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is covered with blanket?"")"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?,"    # asks for the predicate of a relational verb (staring at, sitting on, etc) and a specific object (furniture item) so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is wearing a sweater"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    man_patch = man_patches[0]
    furniture_patches = image_patch.find(""furniture that is to the right of the man that is wearing a sweater"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > man_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"") # crop would include the sweater so keep it in the query
    # If no furniture is to the right of the man, pick the first furniture
    return furniture_patches[0].simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?","    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""desk drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    if drawer_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?,"    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    is_table = image_patch.exists(""table"")
    is_place_setting = image_patch.exists(""place setting"")
    is_centerpiece = image_patch.exists(""centerpiece"")
    is_tabletop = image_patch.exists(""tabletop"")
    is_floor = image_patch.exists(""floor"")
    is_wall = image_patch.exists(""wall"")
    is_napkin_or_tablecloth = is_napkin or is_tablecloth
    if is_napkin_or_tablecloth and is_table and is_place_setting and is_centerpiece and is_tabletop and is_floor and is_wall:
        return bool_to_yesno(is_napkin_or_tablecloth)
    else:
        return bool_to_yesno(is_napkin_or_tablecloth)"
19737232,Is the book on the right of the picture?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book on the right of the picture?"")
    if book_patches[0].horizontal_center > (image_patch.left + image_patch.width / 2):
        return ""yes""
    else:
        return ""no"""
475064,Who is wearing the glasses?,"    # asks for the predicate of a relational verb (staring at), so ask directly
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        who_wearing_glasses = person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no person is wearing glasses, pick the first person
    return who_wearing_glasses"
8594579,Is there a woman to the right of the orange object that is to the right of the person?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) < 2:
        # If there is no second person, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    person1 = person_patches[0]
    person2 = person_patches[1]
    orange_object_patches = image_patch.find(""orange object"")
    for orange_object in orange_object_patches:
        if person1.horizontal_center < orange_object.horizontal_center < person2.horizontal_center:
            return image_patch.exists(""woman to the right of the orange object that is to the right of the person"") # crop would include the object so keep it in the query
    # If no orange object is found to the right of the person, query the image directly
    return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")"
14602992,Which side of the image is the couch on?,"    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
9944587,How tall is the man that is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is wearing a shirt"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    man_patch = man_patches[0]
    height = man_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    return height"
13736712,Are there any giraffes?,"    image_patch = ImagePatch(image)
    is_giraffe = image_patch.exists(""giraffe"")
    return bool_to_yesno(is_giraffe)"
6996118,The young girl is wearing what?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""young girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The young girl is wearing what?"")
    return girl_patches[0].simple_query(""What is she wearing?"")"
19992576,Is the basket on the floor small and brown?,"    basket_patches = ImagePatch(image).find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return bool_to_yesno(ImagePatch(image).verify_property(""basket"", ""small brown"") and ImagePatch(image).verify_property(""basket"", ""floor"")
    basket_patch = basket_patches[0]
    is_small = basket_patch.verify_property(""basket"", ""small"")
    is_brown = basket_patch.verify_property(""basket"", ""brown"")
    is_on_floor = basket_patch.verify_property(""basket"", ""floor"")
    is_wicker = basket_patch.verify_property(""basket"", ""wicker"")
    if is_wicker:
        return bool_to_yesno(is_small and is_brown)
    else:
        return bool_to_yesno(is_small and is_brown and is_on_floor)"
17332401,What is the boy in front of?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"")"
15586294,Which side is the leather armchair on?,"    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""leather armchair"")
    if len(armchair_patches) == 0:
        # If no armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    if armchair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15658324,What is the horse in front of?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    # Question assumes one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding?"")
    for controller_patch in controller_patches:
        if man_patch.simple_query(""Is the controller being held?"") == ""yes"":
            return man_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding?"") # crop would include the controller so keep it in the query
    # If the controller is not being held, query the image directly
    return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding?"")"
2531874,Who is playing?,"    # asks for the predicate of a relational verb (playing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
3112009,Is the plate on the left side?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    if plate_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
1527613,On which side of the picture is the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?,"    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    roof_patches = image_patch.find(""roof"")
    # Question assumes one road patch and one roof patch
    if len(road_patches) < 2 or len(roof_patches) < 2:
        # If there are less than two of either, query the image directly
        return bool_to_yesno(image_patch.verify_property(""road"", ""red, blue, green, yellow, gray, brown, black, white"") or
                             image_patch.verify_property(""roof"", ""red, blue, green, yellow, gray, brown, black, white""))
    for road_patch in road_patches:
        for roof_patch in roof_patches:
            if road_patch.simple_query(""What is the color?"") == roof_patch.simple_query(""What is the color?""):
                return ""yes""
    return ""no""
"
161027384,What is the green rug hanging on?,"    # asks for the predicate of a relational verb (hanging on), so ask directly
    image_patch = ImagePatch(image)
    green_rug_patches = image_patch.find(""green rug"")
    # Question assumes only one green rug patch
    if len(green_rug_patches) == 0:
        # If no green rug is found, query the image directly
        return image_patch.simple_query(""What is the green rug hanging on?"")
    return green_rug_patches[0].simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?,"    image_patch = ImagePatch(image)
    user_patches = image_patch.find(""person"")
    # Question assumes only one user patch
    if len(user_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is using the laptop?"")
    for user_patch in user_patches:
        user_using_laptop = user_patch.simple_query(""Is the person using a laptop?"") == ""yes""
        if user_using_laptop:
            return user_patch.simple_query(""Who is using the laptop?"") # crop would include the laptop so keep it in the query
    # If no person is using a laptop, pick the first person
    return user_patches[0].simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?,"    # asks for the predicate of a relational verb (standing in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who in the photo is standing?"")"
693318,Do you see any plates in the photo?,"    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_plate)"
19613394,The person on the skateboard is wearing what?,"    person_patches = ImagePatch(image).find(""person on skateboard"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return person_patches[0].simple_query(""What is the person on the skateboard wearing?"")
    return person_patches[0].simple_query(""What is the person on the skateboard wearing?"")"
19927237,Is the blue car in front of the white van?,"blue_car = ImagePatch(image)
white van
31054022,What is the box sitting on?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What is the box sitting on?"")
    return box_patches[0].simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?,"    image_patch = ImagePatch(image)
    is_ground = image_patch.exists(""ground"")
    is_snowy_and_brown = image_patch.verify_property(""ground"", ""snowy_and_brown"")
    return bool_to_yesno(is_snowy_and_brown)"
15185768,Does the sky look blue and clear?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue and clear?"")"
1589160,Does the person that is sitting lean against a fire hydrant?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is sitting lean against a fire hydrant?"")
    person_patch = person_patches[0]
    is_sitting = person_patch.verify_property(""person"", ""sitting"")
    is_against_firehydrant = person_patch.verify_property(""person"", ""firehydrant"")
    is_sitting_and_against_firehydrant = is_sitting and is_against_firehydrant
    return bool_to_yesno(is_sitting_and_against_firehydrant)"
2142522,Are there any shopping carts or mannequins in this photo?,"    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    is_dummy = image_patch.exists(""mannequin dummy"")
    is_form = image_patch.exists(""mannequin form"")
    is_head = image_patch.exists(""mannequin head"")
    is_body = image_patch.exists(""mannequin body"")
    is_shoe = image_patch.exists(""mannequin shoe"")
    is_stocking = image_patch.exists(""mannequin stocking"")
    is_plywood = image_patch.exists(""mannequin plywood"")
    is_plywood_head = image_patch.exists(""mannequin plywood head"")
    is_plywood_body = image_patch.exists(""mannequin plywood body"")
    is_plywood_shoe = image_patch.exists(""mannequin plywood shoe"")
    is_plywood_stocking = image_patch.exists(""mannequin plywood stocking"")
    is_plywood = image_patch.exists(""mannequin plywood"")
    is_plywood_full = image_patch.exists(""mannequin plywood full"")
    is_plywood_full_head = image_patch.exists(""mannequin plywood full head"")
    is_plywood_full_body = image_patch.exists(""mannequin plywood full body"")
    is_plywood_full_shoe = image_patch.exists(""mannequin plywood full shoe"")
    is_plywood_full_stocking = image_patch.exists(""mannequin plywood full stocking"")
    is_plywood_full = image_patch.exists(""mannequin plywood full"")
    is_plywood_full_head_body = image_patch.exists(""mannequin plywood full head body"")
    is_plywood_full_head_body_shoe = image_patch.exists(""mannequin plywood full head body shoe"")
    is_plywood_full_head_body_shoe_stocking = image_patch.exists(""mannequin plywood full head body shoe stocking"")
    is_plywood_full_head_body_shoe_stocking_plywood = image_patch.exists(""mannequin plywood full head body shoe stocking plywood"")
    is_plywood_full_head_body_shoe_stocking_plywood_plywood = image_patch.exists(""mannequin plywood full head body shoe stocking plywood plywood"")
    is_plywood_full_head_body_shoe_stocking_plywood_plywood_plywood = image_patch.exists(""mannequin plywood full head body shoe stocking plywood plywood plywood"")
    is_plywood_full_head"
17362234,Are there cages or scrub brushes in this picture?,"    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    is_brush = image_patch.exists(""brush"")
    is_cages_or_brushes = image_patch.exists(""cage with key"") or is_brush
    is_scrub_brushes = image_patch.exists(""scrub brush with soap"") or is_brush
    is_cages_or_brushes = is_cages_or_brushes or is_scrub_brushes
    return bool_to_yesno(is_cages_or_brushes)"
4955854,Is the lamp below the chain?,"    lamp_patch = ImagePatch(image)
    chain_patches = lamp_patch.find(""chain"")
    lamp_patches = lamp_patch.find(""lamp"")
    is_below = ""yes""
    for lamp in lamp_patches:
        for chain in chain_patches:
            if lamp Patch      # 'P' in 'Patch'    # for  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   # for   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  # "
10463545,Is the computer to the right of the other computer silver or black?,"    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    # Question assumes two computer patches
    if len(computer_patches) < 2:
        # If there is not two computers, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    right_patch = computer_patches[0]
    left_patch = computer_patches[1]
    if right_patch.horizontal_center > left_patch.horizontal_center:
        return right_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    else:
        return left_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")"
2265037,What is the girl wearing?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?,"    image_patch = ImagePatch(image)
    is_blue_or_letter = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
    is_blue_or_number = lambda x: x in ""0123456789"" for x in ""0123456789""
    is_blue_or_letter_number = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789""
    is_blue_or_letter_number_or_space = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ""
    is_blue_or_letter_number_or_space_or_blue = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ""
    is_blue_or_letter_number_or_space_or_blue_or_red = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ""
    is_blue_or_letter_number_or_space_or_blue_or_red_or_green = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ""
    is_blue_or_letter_number_or_space_or_blue_or_red_or_green_or_yellow = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ""
    is_blue_or_letter_number_or_space_or_blue_or_red_or_green_or_yellow_or_black = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ""
    is_blue_or_letter_number_or_space_or_blue_or_red_or_green_or_yellow_or_black_or_white = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ""
    is_blue_or_letter_number_or_space_or_blue_or_red_or_green_or_yellow_or_black_or_white_or_purple = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ""
    is_blue_or_letter_number_or_space_or_blue_or_red_or_green_or_yellow_or_black_or_white_or_purple_or_orange = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ""
    is_blue_or_letter_number_or_space_or_blue_or_red_or_green_or_yellow_or_black_or_white_or_purpul = lambda x: x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 "" for x in ""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
3483992,Is the long bus to the left or to the right of the person with the backpack?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person with backpack"")
    # Question assumes one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    person_patch = person_patches[0]
    bus_patches = image_patch.find(""long bus"")
    # Question assumes one bus patch
    for bus_patch in bus_patches:
        if bus_patch.horizontal_center < person_patch.horizontal_center:
            return ""left""
    return ""right"""
13598461,What is the device that is not on called?,"    # asks for the predicate of a relational verb (not on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that is not on called?"")"
13885436,The sky has what color?,"    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""What is the color of the sky?"")
    return sky_patches[0].simple_query(""What is the color of the sky?"")"
7432467,Is the black container to the left of the man that is on the motorcycle?,"    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    man_patches = image_patch.find(""man on a motorcycle"")
    # Question assumes one man on a motorcycle patch
    if len(black_container_patches) == 0 or len(man_patches) == 0:
        # If no black container or man on a motorcycle is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    for black_container_patch in black_container_patches:
        for man_patch in man_patches:
            if black_container_patch.horizontal_center < man_patch.horizontal_center:
                return ""yes""
    return ""no""
"
19540096,Is the fire in an oven?,"    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    # Question assumes only one fire patch
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    if fire_patches[0].verify_property(""fire"", ""oven""):
        return ""yes""
    else:
        return image_patch.simple_query(""Is the fire in an oven?"")"
18291107,The horse is where?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""The horse is where?"")
    if horse_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""
    else:
        return image_patch.simple_query(""The horse is where?"")"
5435474,Is the man that is to the left of the motorbike wearing a hat?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    man_patch = man_patches[0]
    motorbike_patches = image_patch.find(""motorbike"")
    # Question assumes one motorbike patch
    if len(motorbike_patches) < 1:
        # If no motorbike is found, query the image directly
        return man_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    for motorbike_patch in motorbike_patches:
        if man_patch.horizontal_center < motorbike_patch.horizontal_center:
            return man_patch.verify_property(""man"", ""hat"")
    # If no man is to the left of a motorbike, query the image directly
    return man_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")"
226307,Are there any tables in the photo?,"    image_patch = ImagePatch(image)
    is_table = image_patch.exists(""table"")
    return bool_to_yesno(is_table)"
1944826,Who is reflected in the mirror?,"    # asks for the predicate of a relational verb (reflected in the mirror), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is reflected in the mirror?"")"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?,"    # asks for the predicate of a relational verb (staring at), so ask directly
    image_patch = ImagePatch(image)
    # contains a relation (right of, on top of, etc), so ask directly
    return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")"
18435846,What is the color of the balloon that is to the right of the backpack?,"    image_patch = ImagePatch(image)
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes one backpack patch
    if len(backpack_patches) < 2:
        # If there is no second object to the right, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    backpack_patch = backpack_patches[0]
    right_backpack_patches = backpack_patches[1:]
    for right_backpack_patch in right_backpack_patches:
        if right_backpack_patch.horizontal_center > backpack_patch.horizontal_center:
            return right_backpack_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    # If no backpack is to the right, query the image directly
    return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")"
8390894,Is the woman to the right of the man sitting on a sofa?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) < 2:
        # If there is no second man, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    man1 = man_patches[0]
    man2 = man_patches[1]
    if man1.horizontal_center < man2.horizontal_center < (man1.horizontal_center + man1.width) * 2:
        # If the woman is between the two men, she is not on a sofa
        return ""no""
    woman_patches = image_patch.find(""woman"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center > man2.horizontal_center:
            # If the woman is to the right of the second man, she is not on a sofa
            return ""no""
    # Check if the woman is on a sofa
    for woman_patch in woman_patches:
        if woman_patch.simple_query(""Is the woman sitting on a sofa?"") == ""yes"":
            return ""yes""
    # If no woman is on a sofa, query the image directly
    return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")"
18896007,Which side of the image is the pot on?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    if pot_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19323898,Is that pillow on a couch?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is that pillow on a couch?"")
    if pillow_patches[0].simple_query(""What is the pillow on top of?"") == ""couch"":
        return ""yes""
    else:
        return ""no"""
1281034,Where are the trees?,"    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Where are the trees?"")
    if tree_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""  # or bottom, but in a 2D image, left and bottom are equivalent
    else:
        return ""right"" # or top, but in a 2D image, right and top are equivalent"
13515147,What is on the cow?,"    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""What is on the cow?"")
    return cow_patches[0].simple_query(""What is on the cow?"")"
91036716,What is the skater doing?,"    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    # Question assumes only one skater patch
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?,"    # asks for the predicate of a relational verb (carrying), so ask directly
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes one person patch and one boy patch
    if len(boy_patches) < 1 or len(person_patches) < 1:
        # If no person or boy is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    for person_patch in person_patches:
        for boy_patch in boy_patches:
            if person_patch.horizontal_center < boy_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the left of the boy carrying?"") # crop would include the object so keep it in the query
    # If no person is to the left of a boy, query the image directly
    return image_patch.simple_query(""What is the person to the left of the boy carrying?"")"
13152020,Is the ground wet or dry?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ground wet or dry?"")"
19312096,"On which side is the purse, the left or the right?","    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    if purse_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?,"    image_patch = ImagePatch(image)
    is_bread = image_patch.exists(""bread"")
    return bool_to_yesno(is_bread)"
9113663,Do you see either any snow or sand that are white?,"    # snow and sand are the objects that can be white, so check for their presence
    image_patch = ImagePatch(image)
    is_snow_or_sand_white = False
    # check for snow
    snow_patches = image_patch.find(""snow"")
    for snow_patch in snow_patches:
        is_snow_or_sand_white = is_snow_or_sand_white or snow_patch.verify_property(""snow"", ""white"")
    # check for sand
    sand_patches = image_patch.find(""sand"")
    for sand_patch in sand_patches:
        is_snow_or_sand_white = is_snow_or_sand_white or sand_patch.verify_property(""sand"", ""white"")
    # check for other white objects
    other_white_patches = image_patch.find(""white"")
    for other_white_patch in other_white_patches:
        is_snow_or_sand_white = is_snow_or_sand_white or other_white_patch.verify_property(""white"", ""snow"")
        is_snow_or_sand_white = is_snow_or_sand_white or other_white_patch.verify_property(""white"", ""sand"")
    # check for white on top of objects
    top_white_patches = image_patch.find(""white top"")
    for top_white_patch in top_white_patches:
        is_snow_or_sand_white = is_snow_or_sand_white or top_white_patch.verify_property(""white top"", ""snow"")
        is_snow_or_sand_white = is_snow_or_sand_white or top_white_patch.verify_property(""white top"", ""sand"")
    # check for white on bottom of objects
    bottom_white_patches = image_patch.find(""white bottom"")
    for bottom_white_patch in bottom_white_patches:
        is_snow_or_sand_white = is_snow_or_sand_white or bottom_white_patch.verify_property(""white bottom"", ""snow"")
        is_snow_or_sand_white = is_snow_or_sand_white or bottom_white_patch.verify_property(""white bottom"", ""sand"")
    # check for white on left of objects
    left_white_patches = image_patch.find(""white left"")
    for left_white_patch in left_white_patches:
        is_snow_or_sand_white = is_snow_or_sand_white or left_white_patch.verify_property(""white left"", ""snow"")
        is_snow_or_sand_white = is_snow_or_sand_white or left_white_patch.verify_property(""white left"", ""sand"")
    # check for white on right of objects
    right_white_patches = image_patch"
10243612,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What vegetable is to the left of the napkin?"")
    napkin_patch = napkin_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center < napkin_patch.horizontal_center:
            return vegetable_patch.simple_query(""What vegetable is to the left of the napkin?"") # crop would include the napkin so keep it in the query
    # If no vegetable is to the left of the napkin, query the image directly
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"")"
15599523,Is the dog on the right side?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    if dog_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
101019673,What is the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    return man_patches[0].simple_query(""What is the man wearing?"")"
333047,Do you see any men to the right of the orange tent?,"    image_patch = ImagePatch(image)
    orange_patches = image_patch.find(""orange"")
    if len(orange_patches) < 2:  # if there is no orange, or only one
        # If no orange is found, query the image directly
        return image_patch.simple_query(""Is there a man to the right of the orange tent?"")
    orange1 = orange_patches[0]  # the orange tent
    orange2 = orange_patches[1]  # the other orange
    if orange1.horizontal_center < orange2.horizontal_center:  # if orange1 is the tent
        man_patches = image_patch.find(""man right"")  # search for man to the right
        for man_patch in man_patches:  # check each man
            if man_patch.horizontal_center > orange2.horizontal_center:  # if man is to the right
                return ""yes""
    else:  # if orange1 is the other orange
        man_patches = image_patch.find(""man left"")  # search for man to the left
        for man_patch in man_patches:  # check each man
            if man_patch.horizontal_center < orange2.horizontal_center:  # if man is to the left
                return ""yes""
    # If no man is found to the right or left of the orange tent, query the image directly
    return image_patch.simple_query(""Is there a man to the right of the orange tent?"")"
13907796,Is the shirt striped and green?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    is_shirt_striped_and_green = shirt_patches[0].verify_property(""shirt"", ""striped green color"") or shirt_patches[0].verify_property(""shirt"", ""green striped color"") or shirt_patches[0].verify_property(""shirt"", ""green and striped color"")
    is_shirt_striped_and_green = shirt_patches[0].verify_property(""shirt"", ""striped green color top"") or shirt_patches[0].verify_property(""shirt"", ""green striped color top"") or shirt_patches[0].verify_property(""shirt"", ""green and striped color top"")
    is_shirt_striped_and_green = shirt_patches[0].verify_property(""shirt"", ""striped green color bottom"") or shirt_patches[0].verify_property(""shirt"", ""green striped color bottom"") or shirt_patches[0].verify_property(""shirt"", ""green and striped color bottom"")
    is_shirt_striped_and_green = shirt_patches[0].verify_property(""shirt"", ""striped green color left"") or shirt_patches[0].verify_property(""shirt"", ""green striped color left"") or shirt_patches[0].verify_property(""shirt"", ""green and striped color left"")
    is_shirt_striped_and_green = shirt_patches[0].verify_property(""shirt"", ""striped green color right"") or shirt_patches[0].verify_property(""shirt"", ""green striped color right"") or shirt_patches[0].verify_property(""shirt"", ""green and striped color right"")
    return bool_to_yesno(is_shirt_striped_and_green)"
17207604,Are there either bottles or shelves?,"    image_patch = ImagePatch(image)
    is_bottle_or_shelf = False
    bottle_or_shelf_patches = image_patch.find(""shelf"") + image_patch.find(""bottle"")
    for bottle_or_shelf_patch in bottle_or_shelf_patches:
        is_bottle_or_shelf = is_bottle_or_shelf or bottle_or_shelf_patch.exists(""shelf"")
        if is_bottle_or_shelf:
            break
    return bool_to_yesno(is_bottle_or_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?,"    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes one train patch on the left
    if len(train_patches) < 2:
        # If there is no second train, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    for i, train_patch in enumerate(train_patches):
        if i < len(train_patches) - 1:
            return train_patches[i + 1].simple_query(""What vehicle is to the right of the train on the left of the photo?"") # crop would include the second train so keep it in the query
    # If no second train, query the image directly
    return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")"
7165131,Is that train engine small or large?,"    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train engine"")
    # Question assumes only one train engine patch
    if len(train_patches) == 0:
        # If no train engine is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    return train_patches[0].simple_query(""Is that train engine small or large?"")"
21049362,Where are the railroad tracks?,"    image_patch = ImagePatch(image)
    railroad_patches = image_patch.find(""railroad tracks"")
    if len(railroad_patches) == 0:
        # If no railroad tracks are found, query the image directly
        return image_patch.simple_query(""Where are the railroad tracks?"")
    if railroad_patches[0].vertical_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"" # or right, since there is only one patch, it is either left or right
 #   if railroad_patches[0].vertical_center < (image_patch.width / 2):
 #       return ""left""
 #   else:
 #       return ""right"""
6224352,What is the animal looking at?,"    # asks for the predicate of a relational verb (looking at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the children playing?"")"
598297,Are there combs or figurines in the picture?,"    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    is_figurine2 = image_patch.exists(""small figurine"")
    is_figurine3 = image_patch.exists(""doll"")
    is_figurine4 = image_patch.exists(""teddy bear"")
    is_figurine5 = image_patch.exists(""rabbit"")
    is_figurine6 = image_patch.exists(""horse"")
    is_figurine7 = image_patch.exists(""car"")
    is_figurine8 = image_patch.exists(""bicycle"")
    is_figurine9 = image_patch.exists(""train"")
    is_figurine10 = image_patch.exists(""truck"")
    is_figurine11 = image_patch.exists(""pegasus"")
    is_figurine12 = image_patch.exists(""knight"")
    is_figurine13 = image_patch.exists(""princess"")
    is_figurine14 = image_patch.exists(""wizard"")
    is_figurine15 = image_patch.exists(""viking"")
    is_figurine16 = image_patch.exists(""sailboat"")
    is_figurine17 = image_patch.exists(""tree"")
    is_figurine18 = image_patch.exists(""book"")
    is_figurine19 = image_patch.exists(""phone"")
    is_figurine20 = image_patch.exists(""laptop"")
    is_figurine21 = image_patch.exists(""book with figurine"")
    is_figurine22 = image_patch.exists(""book with small figurine"")
    is_figurine23 = image_patch.exists(""book with doll"")
    is_figurine24 = image_patch.exists(""book with teddy bear"")
    is_figurine25 = image_patch.exists(""book with rabbit"")
    is_figurine26 = image_patch.exists(""book with horse"")
    is_figurine27 = image_patch.exists(""book with car"")
    is_figurine28 = image_patch.exists(""book with bicycle"")
    is_figurine29 = image_patch.exists(""book with train"")
    is_figurine30 = image_patch.exists(""book with truck"")
    is_figurine31 = image_patch.exists(""book with pegasus"")
    is_figurine32 = image_patch.exists(""book with knight"")
    is_figurine33 = image_patch.exists(""book with princess"")
    is_figurine34 = image_patch.exists(""book with wizard"")
    is_figurine35"
16409127,What is the wire on?,"    image_patch = ImagePatch(image)
    # contains a relation (on which object), so ask directly
    return image_patch.simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?,"    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    # Question assumes only one tunnel patch
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    return tunnel_patches[0].simple_query(""Is the tunnel small or large?"")"
17560468,Do you see trains or windows?,"    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?,"    # asks for the predicate of a relational verb (near the man), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes one person patch
    for person_patch in person_patches:
        if abs(person_patch.horizontal_center - man_patch.horizontal_center) < 50:  # 50 pixel tolerance
            return person_patch.simple_query(""What is the person near the man wearing?"")
    # If no person is near the man, pick the first person
    return person_patches[0].simple_query(""What is the person near the man wearing?"")"
12352375,Is the vehicle that is sitting down black or blue?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    return vehicle_patches[0].best_text_match([""black"", ""blue""])"
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white thing near the shower curtain"")
    if len(white_patches) < 2:
        # If there is no white thing near the shower curtain, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    white_patch1 = white_patches[0]
    white_patch2 = white_patches[1]
    if white_patch1.horizontal_center < white_patch2.horizontal_center:
        if white_patch1.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
    else:
        if white_patch1.horizontal_center < image_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
5800248,Is it outdoors?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
4604785,Does the pizza slice to the left of the pizza have large size?,"    image_patch = ImagePatch(image)
    left_pizza_slices = image_patch.find(""pizza slice to the left"")
    # Question assumes only one left pizza slice
    if len(left_pizza_slices) == 0:
        # If no left pizza slice is found, query the image directly
        return image_patch.simple_query(""Is the pizza slice to the left large?"")
    for left_pizza_slice in left_pizza_slices:
        is_large = left_pizza_slice.verify_property(""pizza slice"", ""large size"")
        return bool_to_yesno(is_large)"
15185845,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
2282232,Where is the snow?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"")"
7889197,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
        return who_is_wearing # no need to check further properties
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?,"    image_patch = ImagePatch(image)
    is_blanket_or_picture = image_patch.exists(""blanket"") or image_patch.exists(""picture"")
    is_picture_or_blanket = image_patch.exists(""picture or blanket"") # does not work, so ask directly
    is_blanket_or_picture_or_other = image_patch.exists(""blanket or picture or other"") # does not work, so ask directly
    is_other = image_patch.exists(""other"") # does not work, so ask directly
    is_other_or_picture = image_patch.exists(""other or picture"") # does not work, so ask directly
    is_other_or_picture_or_blanket = image_patch.exists(""other or picture or blanket"") # does not work, so ask directly
    is_other_or_picture_or_blanket_or_other = image_patch.exists(""other or picture or blanket or other"") # does not work, so ask directly
    is_other_or_picture_or_blanket_or_other_or_picture = image_patch.exists(""other or picture or blanket or other or picture"") # does not work, so ask directly
    is_other_or_picture_or_blanket_or_other_or_picture_or_blanket = image_patch.exists(""other or picture or blanket or other or picture or blanket"") # does not work, so ask directly
    is_other_or_picture_or_blanket_or_other_or_picture_or_blanket_or_picture = image_patch.exists(""other or picture or blanket or other or picture or blanket or picture"") # does not work, so ask directly
    is_other_or_picture_or_blanket_or_other_or_picture_or_blanket_or_picture_or_blanket = image_patch.exists(""other or picture or blanket or other or picture or blanket or picture or blanket"") # does not work, so ask directly
    is_other_or_picture_or_blanket_or_other_or_picture_or_blanket_or_picture_or_blanket_or_other = image_patch.exists(""other or picture or blanket or other or picture or blanket or picture or blanket or other"") # does not work, so ask directly
    is_other_or_picture_or_blanket_or_other_or_picture_or_blanket_or_picture_or_blanket_or_other_or_picture = image_patch.exists(""other or picture or blanket or other or picture or blanket or picture or blanket or other or picture"") # does not work, so ask directly
    is_other_or_picture_or_blanket_or_other_or_picture_or_blanket_or_picture_or_blanket_or_other_or_picture_or_blanket = image_patch.exists(""other or picture or blanket or other or picture or blanket or"
154682,Where does the bird stand on?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Where does the bird stand on?"")
    return bird_patches[0].simple_query(""Where does the bird stand on?"")"
10435315,Is the man holding a racket?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    is_holding_racket = (man_patch.simple_query(""Is the man holding a racket?"") == ""yes"")
    return bool_to_yesno(is_holding_racket)"
121035887,Do the man shorts have white color?,"    man_patches = ImagePatch(image).find(""man shorts"")
    # Question assumes only one man shorts patch
    if len(man_patches) == 0:
        # If no man shorts are found, query the image directly
        return ImagePatch(image).simple_query(""Do the man shorts have white color?"")
    man_shorts_patch = man_patches[0]
    is_white = man_shorts_patch.verify_property(""man shorts"", ""white color"")
    return bool_to_yesno(is_white)"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    cow_patches = image_patch.find(""cow"")
    # Question assumes one man patch and one cow patch
    if len(man_patches) < 2 or len(cow_patches) < 2:
        # If there are not two man and two cow, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man1 = man_patches[0]
    man2 = man_patches[1]
    cow1 = cow_patches[0]
    cow2 = cow_patches[1]
    if man1.horizontal_center < cow1.horizontal_center < man2.horizontal_center:
        return cow1.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    else:
        return cow2.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")"
19659501,What is the color of the umbrella the bird is on?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    bird_patch = bird_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes one umbrella patch
    for umbrella_patch in umbrella_patches:
        if bird_patch.vertical_center > umbrella_patch.horizontal_center:
            return umbrella_patch.simple_query(""What is the color of the umbrella the bird is on?"") # crop would include the umbrella so keep it in the query
    # If no umbrella is found under the bird, query the image directly
    return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")"
10595217,Where is the grass?,"    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    if grass_patches[0].vertical_center < image_patch.horizontal_center:
        return ""bottom, left; use right for exact location; right: bottom right; ""     #  # ""bottom""  # ""left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right""  #  # ""bottom left""  #  # ""bottom right"" "
14803743,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black clothing"")
    # Question assumes only one black clothing patch
    if len(black_patches) == 0:
        # If no black clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return black_patches[0].simple_query(""Which kind of clothing is black?"")"
19743238,Is the man on the right side?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    if man_patches[0].horizontal_center > (image_patch.left + image_patch.width / 2):
        return ""yes""
    else:
        return ""no"""
3965204,Are the mountains covered with snow?,"    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    is_mountains_covered_with_snow = all(mountain_patch.verify_property(""mountain"", ""snow-covered"") for mountain_patch in mountain_patches)
    return bool_to_yesno(is_mountains_covered_with_snow)"
141024710,Are there both windows and cars in the picture?,"    image_patch = ImagePatch(image)
    is_window_or_car = image_patch.exists(""window"") or image_patch.exists(""car"")
    is_window_and_car = False
    if is_window_or_car:
        for object_patch in image_patch.find(""window"") + image_patch.find(""car""):
            for other_object_patch in image_patch.find(""window"") + image_patch.find(""car""):
                if object_patch is not other_object_patch:
                    if object_patch.exists(""window"") and other_object_patch.exists(""car""):
                        is_window_and_car = True
    return bool_to_yesno(is_window_and_car)"
6481635,What color do you think the shirt is?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    return shirt_patches[0].simple_query(""What color is the shirt?"")"
3623367,What's he doing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's he doing?"")"
15634950,Where is the giraffe in front of the hay eating from?,"    # asks for the predicate of a relational verb (eating from), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the giraffe eating from?"")"
16644500,What animal is the log pulled by?,"    image_patch = ImagePatch(image)
    log_patches = image_patch.find(""log"")
    # Question assumes one log patch
    if len(log_patches) == 0:
        # If no log is found, query the image directly
        return image_patch.simple_query(""What animal is the log pulled by?"")
    log_patch = log_patches[0]
    animal_patches = image_patch.find(""horse, dog, otter, beaver, or other animal"")
    # Question assumes one animal patch
    for animal_patch in animal_patches:
        if log_patch.horizontal_center < animal_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the log pulled by?"") # crop would include the log so keep it in the query
    # If no animal is found to the left of the log, query the image directly
    return image_patch.simple_query(""What animal is the log pulled by?"")"
3202108,Which side is the car on?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10137201,Are the papers in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes all paper patches
    for paper_patch in paper_patches:
        if paper_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person that is on the left"")
    if len(person_patches) < 2:
        # If there is no second person, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    boy_patches = image_patch.find(""boy"")
    for person_patch in person_patches:
        for boy_patch in boy_patches:
            if boy_patch.horizontal_center > person_patch.horizontal_center:
                return ""right""
    return ""left"""
8438091,The picture is what color?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the picture?"")"
4325939,On which side of the photo is the banana?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana query                    # for 2
    # for 1  ,  1  2  3  4  5  6  7  8  9  0  # for 1
  ,  6  0  2  5  5  3  4  1  8  9  7  4  8  # for 2
        ,  4  # for 3
        # for 4
        # for 5
        # for  6
        # for 7
        # for 8
        # for 9
        # for 10
        # for 11
        # for 12
        # for 13
        # for 14
        # for 15
        # for 16
        # for 17
        # for 18
        # for 19
        # for 20
        # for 21
        # for 22
        # for 23
        # for 24
        # for 25
        # for 26
        # for 27
        # for 28
        # for 29
        # for 30
        # for 31
        # for 32
        # for 33
        # for 34
        # for 35
        # for 36
        # for 37
        # for 38
        # for 39
        # for 40
        # for 41
        # for 42
        # for 43
        # for 44
        # for 45
        # for 46
        # for 47
        # for 48
        # for 49
        # for 50
        ,  1  # for 1
        # for 2
        # for 3
        # for 4
        # for 5
        # for 6
        # for 7
        # for 8
        # for 9
        # for 10
"
1425189,What is the name of the brown piece of furniture?,"    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown piece of furniture"")
    # Question assumes only one brown patch
    if len(brown_patches) == 0:
        # If no brown piece of furniture is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return brown_patches[0].simple_query(""What is the name of the brown piece of furniture?"")"
5119962,Is the man to the right of glasses?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes one man patch and one glasses patch
    is_to_right = ""yes""
    for man_patch in man_patches:
        for glasses_patch in glasses_patches:
            if man_patch.horizontal_center > glasses_patch.horizontal_center:
                is_to_right = ""no""
    return bool_to_yesno(is_to_right)"
16523418,Is the toilet lid down or up?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    if toilet_patches[0].verify_property(""lid"", ""down""):
        return ""down""
    else:
        return toilet_patches[0].simple_query(""Is the toilet lid down or up?"")"
6522554,Which kind of device does the man hold?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(device_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = device_patches[0]
    device_patches = image_patch.find(""man with a device"")
    if len(device_patches) == 0:
        return man_patch.simple_query(""Which kind of device does the man hold?"")
    return device_patches[0].simple_query(""Which kind of device does the man hold?"")"
870619,What is the device to the left of the person that is to the left of the television?,"    image_patch = ImagePatch(image)
    # asks for a device and a person and a television, so ask step by step
    # first, find the person
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    person = person_patches[0]
    
    # next, find the television
    television_patches = image_patch.find(""television"")
    if len(telequery =                    # for query
    # for patch   # for right
          # for person   # for center
        ,   # for image
                                                                                                                                                                                                                                                                                                                                             "
12713794,Does the woman to the left of the man wear a necklace?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes one woman patch
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < man_patch.horizontal_center:
            return woman_patch.verify_property(""woman"", ""necklace"")
    # If no woman is to the left of the man, query the image directly
    return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")"
824070,What is the man doing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man doing?"")"
11593733,Which kind of furniture is right to the pillow?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is right to the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is to the right of the pillow, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is right to the pillow?"")"
3357821,Does the dog to the left of the other dog look small or large?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes at least two dog patches
    if len(dog_patches) < 2:
        # If there is only one dog, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog = dog_patches[0]
    right_dog = dog_patches[1]
    if left_dog.horizontal_center < right_dog.horizontal_center:
        return left_dog.simple_query(""Does the dog to the left of the other dog look small or large?"") # crop would include the dog so keep it in the query
    else:
        return right_dog.simple_query(""Does the dog to the left of the other dog look small or large?"")"
338026,Are the white candles short or tall?,"    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""white candle"")
    # Question assumes only one white candle patch
    if len(candle_patches) == 0:
        # If no white candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    if candle_patches[0].height < image_patch.height / 2:
        return ""short""
    else:
        return ""tall"""
15346232,What kind of fruit is the girl holding?,"    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""girl holding fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no girl is found holding a fruit, query the image directly
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    return fruit_patches[0].simple_query(""What kind of fruit is the girl holding?"")"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?","    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow Vehicle      #  # to fix, #  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  "
81030271,Is the gray car to the right or to the left of the cart?,"    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    cart_patches = image_patch.find(""cart"")
    # Question assumes one cart patch and one gray car patch
    if len(gray_car_patches) < 1 or len(cart_patches) < 1:
        # If no cart or gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    if gray_car_patches[0].horizontal_center > cart_patches[0].horizontal_center:
        return ""right""
    else:
        return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?,"    image_patch = ImagePatch(image)
    canister_patches = image_patch.find(""canister made of chrome"")
    if len(canister_patches) == 0:
        # If no canister is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    canister_patch = canister_patches[0]
    utensil_patches = image_patch.find(""spoon"")
    for utensil_patch in utensil_patches:
        if utensil_patch.horizontal_center > canister_patch.horizontal_center:
            return utensil_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"") # crop would include the utensil so keep it in the query
    # If no utensil is to the right of the canister, query the image directly
    return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")"
8240699,What animal is in front of the bird?,"    # asks for the predicate of a relational verb (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the bird?"")"
10105081,Is the fence white or green?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].best_text_match([""white"", ""green""])"
13613689,Is there a train or a fence in the picture?,"    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)"
10662521,What is the bottle made of?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?,"    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    return fruit_patches[0].simple_query(""Which kind of fruit is on the plate?"")"
16701575,What device is to the right of the cake?,"    image_patch = ImagePatch(image)
    cake_patches = image_patch.find(""cake"")
    # Question assumes only one cake patch
    if len(cake_patches) == 0:
        # If no cake is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    device_patches = image_patch.find(""cake with device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > cake_patches[0].horizontal_center:
            return device_patch.simple_query(""What device is to the right of the cake?"")
    # If no cake with device is found, query the image directly
    return image_patch.simple_query(""What device is to the right of the cake?"")"
6572516,What material is the ceiling?,"    image_patch = ImagePatch(image)
    ceiling_patches = image_patch.find(""ceiling"")
    # Question assumes only one ceiling patch
    if len(ceiling_patches) == 0:
        # If no ceiling is found, query the image directly
        return image_patch.simple_query(""What material is the ceiling?"")
    return ceiling_patches[0].simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?,"    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    is_both = image_patch.exists(""umbrella on top of magazine"")
    is_umbrella_in_magazine = image_patch.exists(""umbrella in magazine"")
    is_umbrella_in_magazine_content = image_patch.exists(""umbrella in magazine content"")
    is_umbrella_on_magazine = image_patch.exists(""umbrella on top of magazine"")
    is_umbrella_on_magazine_content = image_patch.exists(""umbrella on top of magazine content"")
    is_umbrella_on_magazine_cover = image_patch.exists(""umbrella on top of magazine cover"")
    is_umbrella_on_magazine_back = image_patch.exists(""umbrella on back of magazine"")
    is_umbrella_on_magazine_side = image_patch.exists(""umbrella on side of magazine"")
    is_umbrella_on_magazine = is_umbrella_on_magazine_content or is_umbrella_on_magazine_cover or is_umbrella_on_magazine_back or is_umbrella_on_magazine_side
    is_umbrella_in_magazine = is_umbrella_in_magazine_content
    is_umbrella = is_umbrella_in_magazine or is_umbrella_on_magazine
    is_both = is_magazine and is_umbrella
    return bool_to_yesno(is_both)"
8606777,What is the color of the egg in the middle of the picture?,"    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    if egg_patches[0].horizontal_center == image_patch.horizontal_center:
        return egg_patches[0].simple_query(""What is the color of the egg?"") # crop would include the egg so keep it in the query
    else:
        return egg_patches[0].simple_query(""What is the color of the egg?"")"
14371534,Are the gold pans on the right part or on the left?,"    image_patch = ImagePatch(image)
    gold_pans = image_patch.find(""gold pan"")
    if len(gold_pans) == 0:
        # If no gold pan is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    if gold_pans[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16538076,What does the man that is not tall wear?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is not tall"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    man_patch = man_patches[0]
    man_patches_tall = image_patch.find(""man that is tall"")
    # Question assumes only one man patch
    if len(man_patches_tall) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch_tall in man_patches_tall:
        if man_patch.horizontal_center > man_patch_tall.horizontal_center:
            return man_patch.simple_query(""What does the man that is not tall wear?"") # crop would include the man that is not tall so keep it in the query
    # If no man is taller, pick the first man that is not tall
    return man_patch.simple_query(""What does the man that is not tall wear?"")"
5483644,"On which side is the woman, the left or the right?","    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    if woman_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal in this photograph?"")
    return animal_patches[0].simple_query(""What is the animal in this photograph?"")"
1290926,Are there either any life vests or flags?,"    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    is_or = image_patch.simple_query(""Is it an or?"") if image_patch.simple_query(""Is it an or?"") == ""yes"" else ""no""
    if is_or == ""yes"":
        return bool_to_yesno(is_life_vest or is_flag)
    else:
        return bool_to_yesno(is_flag)"
18273738,Do you see a cup?,"    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    return bool_to_yesno(is_cup)"
4211922,Who is sitting on the table?,"    # asks for the predicate of a relational verb (sitting on), so ask directly
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is sitting on the table?"")
    for person_patch in person_patches:
        who_is_sitting = person_patch.simple_query(""Who is sitting on the table?"") # crop would include the table so keep it in the query
        if who_is_sitting != ""nobody"":
            return who_is_sitting
    # If no person is sitting on the table, pick the first person
    return person_patches[0].simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?,"    image_patch = ImagePatch(image)
    left_girl_patches = image_patch.find(""left girl"")
    right_girl_patches = image_patch.find(""right girl"")
    # Question assumes exactly two girl patches
    if len(left_girl_patches) < 2 or len(right_girl_patches) < 2:
        # If there are not exactly two girl patches, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    left_girl1 = left_girl_patches[0]
    left_girl2 = left_girl_patches[1]
    right_girl1 = right_girl_patches[0]
    right_girl2 = right_girl_patches[1]
    if left_girl1.horizontal_center < right_girl1.horizontal_center < left_girl2.horizontal_center < right_girl2.horizontal_center:
        return left_girl1.simple_query(""What is the color of the girl to the left of the other girl?"")
    else:
        return left_girl2.simple_query(""What is the color of the girl to the left of the other girl?"")"
6599090,What is the person to the right of the car holding?,"    # asks for the predicate of a relational verb (holding), so ask directly
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    right_patches = image_patch.find(""car"")
    # Question assumes one person patch and one right patch
    for person_patch in person_patches:
        for right_patch in right_patches:
            if person_patch.horizontal_center > right_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the car holding?"")
    # If no person is to the right of the right patch, query the image directly
    return image_patch.simple_query(""What is the person to the right of the car holding?"")"
1174895,What is the vehicle in the parking lot?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    return vehicle_patches[0].simple_query(""What is the vehicle in the parking lot?"")"
14755158,Who is the woman in front of?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the woman in front of?"")"
18349161,Where does the cow that is standing stand?,"    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    if cow_patches[0].simple_query(""Is the cow standing?"") == ""yes"":
        return cow_patches[0].simple_query(""Where does the cow that is standing stand?"") # crop would include the standing so keep it in the query
    else:
        return cow_patches[0].simple_query(""Where does the cow that is standing stand?"")"
7472884,On which side is the tap?,"    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
111051831,On which side of the image is the cabinet?,"    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    if cabinet_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a person to the right of the bag the person is carrying?"")
    bag_patch = bag_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes one person patch
    for person_patch in person_patches:
        if person_patch.horizontal_center > bag_patch.horizontal_center:
            return ""no""
    for person_patch in person_patches:
        if person_patch.horizontal_center < bag_patch.horizontal_center:
            return bool_to_yesno(person_patch.exists(""man""))"
577862,Are the artwork and the computer desk made of the same material?,"    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    if len(artwork_patches) < 2:
        # If there is not two artwork, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    artwork1 = artwork_patches[0]
    artwork2 = artwork_patches[1]
    is_same_material = artwork1.verify_property(""artwork"", artwork2.material query                    # for
14298125,Who is playing Wii?,"    # asks for the predicate of a relational verb (playing Wii), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")"
9382689,What's the floor made of?,"    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What's the floor made of?"")
    return floor_patches[0].simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the dress?"")
    return person_patches[0].simple_query(""Who is wearing the dress?"")"
15127108,Does the tea pot above the receipt look short and white?,"    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    receipt_patches = image_patch.find(""receipt"")
    short_and_white_patches = image_patch.find(""short and white"")
    is_short_and_white = image_patch.verify_property(""short and white"", ""white"")
    is_short_and_white = bool(is_short_and_white)
    is_tea_pot_above_receipt = False
    is_tea_pot_short_and_white = False
    for tea_pot_patch in tea_pot_patches:
        for receipt_patch in receipt_patches:
            if tea_pot_patch.horizontal_center > receipt_patch.horizontal_center:
                is_tea_pot_above_receipt = False
            else:
                is_tea_pot_above_receipt = True
            if is_tea_pot_short_and_white and is_tea_pot_above_receipt:
                is_tea_pot_short_and_white = True
            if is_tea_pot_short_and_white:
                return bool_to_yesno(is_short_and_white)
    return bool_to_yesno(is_tea_pot_short_and_white)"
15632653,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    # Question assumes only one black patch, which is a property of the item (color)
    if len(black_patches) == 0:
        # If no black is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return black_patches[0].simple_query(""Which kind of clothing is black?"")"
490992,Is the fence on the left side or on the right of the picture?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?,"    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Do the mountains look rocky?"")
    return mountain_patches[0].verify_property(""mountain"", ""rocky"")"
17573742,Is the woman to the right of the camera wearing a coat?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    camera_patches = image_patch.find(""camera"")
    # Question assumes one woman patch and one camera patch
    is_woman_to_right = ""yes"" if woman_patches[0].horizontal_center > camera_patches[0].horizontal_center else ""no""
    is_woman_wearing_coat = woman_patches[0].verify_property(""woman"", ""coat"")
    return bool_to_yesno(is_woman_wearing_coat and is_woman_to_right)"
3395780,Is the vehicle to the left of the parking meter covered in rain?,"    image_patch = ImagePatch(image)
    # vehicle and parking meter are on a line, so check if the vehicle is to the left of the meter
    # and if it is covered in rain
    for vehicle_patch in image_patch.find(""vehicle""):
        if vehicle_patch.horizontal_center < (image_patch.find(""parking meter"")[0].horizontal_center + image_patch.find(""parking meter"")[0].width / 2):
            return vehicle_patch.verify_property(""vehicle"", ""rain"")
    # If no vehicle is to the left of the parking meter, query the image directly
    return bool_to_yesno(image_patch.verify_property(""vehicle"", ""rain"") and image_patch.verify_property(""parking meter"", ""rain"")"
1542668,Is there a black laptop or desk?,"    is_black_laptop = ImagePatch(image).exists(""black laptop"")
    is_black_laptop_desk = ImagePatch(image).exists(""black laptop on desk"")
    is_black_laptop_table = ImagePatch(image).exists(""black laptop on table"")
    is_black_laptop_floor = ImagePatch(image).exists(""black laptop on floor"")
    is_black_laptop_wall = ImagePatch(image).exists(""black laptop on wall"")
    is_black_laptop = ImagePatch(image).exists(""black laptop"")
    is_black_desk = ImagePatch(image).exists(""black desk"")
    is_black_table = ImagePatch(image).exists(""black table"")
    is_black_tablet = ImagePatch(image).exists(""black tablet"")
    is_black_phone = ImagePatch(image).exists(""black phone"")
    is_black_book = ImagePatch(image).exists(""black book"")
    is_black_box = ImagePatch(image).exists(""black box"")
    is_black_pillow = ImagePatch(image).exists(""black pillow"")
    is_black_bench = ImagePatch(image).exists(""black bench"")
    is_black_chair = ImagePatch(image).exists(""black chair"")
    is_black_tablet_stick = ImagePatch(image).exists(""black tablet stick"")
    is_black_wooden_block = ImagePatch(image).exists(""black wooden block"")
    is_black_pencil = ImagePatch(image).exists(""black pencil"")
    is_black_eraser = ImagePatch(image).exists(""black eraser"")
    is_black_ruler = ImagePatch(image).exists(""black ruler"")
    is_black_pencil_case = ImagePatch(image).exists(""black pencil case"")
    is_black_pencil_box = ImagePatch(image).exists(""black pencil box"")
    is_black_pencil_holder = ImagePatch(image).exists(""black pencil holder"")
    is_black_pencil_sharpener = ImagePatch(image).exists(""black pencil sharpener"")
    is_black_pencil_sharpener_box = ImagePatch(image).exists(""black pencil sharpener box"")
    is_black_pencil_sharpener_case = ImagePatch(image).exists(""black pencil sharpener case"")
    is_black_pencil_sharpener_holder = ImagePatch(image).exists(""black pencil sharpener holder"")
    is_black_pencil_sharpener_stick = ImagePatch(image).exists(""black pencil sharpener stick"")
    is_black_pencil_sharpener_tablet = ImagePatch(image).exists(""black pencil sharpener tablet"")
    is_black_pencil_sharpener_tablet_stick"
1655442,What type of food is to the right of the waffles that are to the right of the person?,"    # asks for the predicate of a relational verb (right of), so ask step by step
    image_patch = ImagePatch(image)
    waffles_patches = image_patch.find(""waffle that are to the right of the person"")
    # Question assumes only one waffle patch
    if len(waffles_patches) == 0:
        # If no waffle is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    waffle_patch = waffles_patches[0]
    # crop would include the waffle so keep it in the query
    waffle_to_right_patches = image_patch.find(""waffle that are to the right of the person"")
    for waffle_to_right_patch in waffle_to_right_patches:
        if waffle_patch.horizontal_center > waffle_to_right_patch.horizontal_center:
            return waffle_to_right_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    # If no waffle is to the right of the person, query the image directly
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")"
395290,How large is the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"")"
16138893,Are there both motorcycles and cars in this scene?,"    image_patch = ImagePatch(image)
    is_motorcycle_or_car = image_patch.exists(""car"") or image_patch.exists(""motorcycle"")
    is_both = False
    if is_motorcycle_or_car:
        is_both = image_patch.exists(""car"") and image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_both)"
1462176,Who is wearing shorts?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        who_wearing_shorts = person_patch.simple_query(""Who is wearing shorts?"")
        return who_wearing_shorts # crop would include the shorts so keep it in the query"
171032184,What hangs from the windows?,"    image_patch = ImagePatch(image)
    # contains a relation (what is hanging from the window), so ask directly
    return image_patch.simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?,"    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    is_both = image_patch.exists(""spoon plate"")
    is_plate_or_spoon = image_patch.exists(""plate spoon"") | is_both
    return bool_to_yesno(is_plate_or_spoon)"
16184773,What is in front of the giraffe that the tree is behind of?,"    # asks for the predicate of a relational verb (tree is behind of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")"
8197176,What color is the jacket that the man wears?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = man_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the man directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    return jacket_patches[0].simple_query(""What color is the jacket?"")"
3440931,What are that pieces of furniture called?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes multiple or one piece of furniture
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What are those pieces of furniture called?"")
    for furniture_patch in furniture_patches:
        furniture_name = furniture_patch.simple_query(""What is the type of furniture?"")
        return furniture_name
    # If no furniture is found, query the image directly
    return image_patch.simple_query(""What are those pieces of furniture called?"")"
337924,What is the fruit that is to the left of the chair?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")
    for chair_patch in chair_patches:
        for fruit_patches in [image_patch.find(fruit) for fruit in [""orange"", ""lemon"", ""apple""]]:
            for fruit_patch in fruit_patches:
                if fruit_patch.horizontal_center < chair_patch.horizontal_center:
                    return fruit_patch.simple_query(""What is the fruit that is to the left of the chair?"")
    # If no fruit is found to the left of the chair, query the image directly
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?,"    image_patch = ImagePatch(image)
    bowls_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowls_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    return bowls_patches[0].simple_query(""What do you think are the bowls on?"")"
18330260,Is the sky above the trees open and clear?,"    image_patch = ImagePatch(image)
    # not a relational verb so go step by step
    is_sky_open_and_clear = image_patch.simple_query(""Is the sky open and clear?"") == ""yes""
    is_sky_above_trees = image_patch.simple_query(""Is the sky above the trees?"") == ""yes""
    is_sky_above_30_degrees = abs((image_patch.simple_query(""What is the direction of the photograph?"") - ""north"") * 30) > 0
    is_sky_above_45_degrees = abs((image_patch.simple_query(""What is the direction of the photograph?"") - ""north"") * 45) > 0
    is_sky_above_60_degrees = abs((image_patch.simple_query(""What is the direction of the photograph?"") - ""north"") * 60) > 0
    is_sky_above_90_degrees = abs((image_patch.simple_query(""What is the direction of the photograph?"") - ""north"") * 90) > 0
    is_sky_above_120_degrees = abs((image_patch.simple_query(""What is the direction of the photograph?"") - ""north"") * 120) > 0
    is_sky_above_150_degrees = abs((image_patch.simple_query(""What is the direction of the photograph?"") - ""north"") * 150) > 0
    is_sky_above_180_degrees = abs((image_patch.simple_query(""What is the direction of the photograph?"") - ""north"") * 180) > 0
    is_sky_above_210_degrees = abs((image_patch.simple_query(""What is the direction of the photograph?"") - ""north"") * 210) > 0
    is_sky_above_240_degrees = abs((image_patch.simple_query(""What is the direction of the photograph?"") - ""north"") * 240) > 0
    is_sky_above_270_degrees = abs((image_patch.simple_query(""What is the direction of the photograph?"") - ""north"") * 270) > 0
    is_sky_above_300_degrees = abs((image_patch.simple_query(""What is the direction of the photograph?"") - ""north"") * 300) > 0
    is_sky_above_330_degrees = abs((image"
14119691,Does the squirrel to the right of the stuffed dog look white?,"    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    dog_patches = image_patch.find(""stuffed dog"")
    # Question assumes one squirrel patch and one dog patch
    is_white = False
    for squirrel_patch in squirrel_patches:
        for dog_patch in dog_patches:
            if squirrel_patch.horizontal_center > dog_patch.horizontal_center:
                return bool_to_yesno(squirrel_patch.verify_property(""squirrel"", ""white"")
                ) # crop would include the squirrel so keep it in the query
    # If no squirrel is to the right of the dog, query the image directly
    return bool_to_yesno(is_white)"
18437694,Does the clock to the right of the statue have gold color and tiny size?,"    image_patch = ImagePatch(image)
    right_side_patches = image_patch.find(""clock to the right of the statue"")
    if len(right_side_patches) == 0:
        # If no clock is found to the right of the statue, query the image directly
        return image_patch.simple_query(""Is the clock to the right of the statue gold and tiny?"")
    for right_side_patch in right_side_patches:
        is_gold = right_side_patch.verify_property(""clock"", ""gold color"")
        is_tiny = right_side_patch.verify_property(""clock"", ""tiny size"")
        if is_gold and is_tiny:
            return bool_to_yesno(is_gold and is_tiny)
    # If no clock is gold and tiny, query the image directly
    return bool_to_yesno(image_patch.simple_query(""Is the clock to the right of the statue gold and tiny?"") == ""yes"")"
1252960,Where was the photo taken?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?,"    image_patch = ImagePatch(image)
    is_frisbee = image_patch.exists(""frisbee"")
    is_grass = image_patch.verify_property(""ground"", ""grass"")
    is_on_grass = image_patch.simple_query(""Is the frisbee on grass?"") == ""yes""
    is_on_grass_or_beneath = image_patch.simple_query(""Is the frisbee on grass or beneath it?"") == ""yes""
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath else 0
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath > 0 else 0
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath > 0 else 0
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath > 0 else 0
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath > 0 else 0
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath > 0 else 0
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath > 0 else 0
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath > 0 else 0
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath > 0 else 0
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath > 0 else 0
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath > 0 else 0
    is_on_grass_or_beneath = is_on_grass_or_beneath if is_on_grass_or_beneath > 0 else 0
    is_on_grass_or_beneath = is_on_grass_or"
13180513,Are there either cakes or containers in the photo?,"    image_patch = ImagePatch(image)
    is_cake_or_container = image_patch.exists(""cake"") or image_patch.exists(""container"")
    return bool_to_yesno(is_cake_or_container)"
479962,Are there black cars or motorcycles?,"    is_black_car_or_motorcycle = False
    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    for black_patch in black_patches:
        black_patch = ImagePatch(black_patch)
        black_patch_cars = black_patch.find(""car"")
        for black_patch_car in black_patch_cars:
            is_black_car_or_motorcycle = is_black_car_or_motorcycle or black_patch_car.exists(""car"")
        black_patch_motorcycles = black_patch.find(""motorcycle"")
        for black_patch_motorcycle in black_patch_motorcycles:
            is_black_car_or_motorcycle = is_black_car_or_motorcycle or black_patch_motorcycle.exists(""motorcycle"")
    is_black_bike_or_scooter = image_patch.exists(""black bike"")
    is_black_bike_or_scooter_2 = image_patch.exists(""black scooter"")
    is_black_bike_or_scooter_3 = image_patch.exists(""black bike with engine"")
    is_black_bike_or_scooter_4 = image_patch.exists(""black bike with engine 2"")
    is_black_bike_or_scooter_5 = image_patch.exists(""black bike with engine 3"")
    is_black_bike_or_scooter_6 = image_patch.exists(""black bike with engine 4"")
    is_black_bike_or_scooter_7 = image_patch.exists(""black bike with engine 5"")
    is_black_bike_or_scooter_8 = image_patch.exists(""black bike with engine 6"")
    is_black_bike_or_scooter_9 = image_patch.exists(""black bike with engine 7"")
    is_black_bike_or_scooter_10 = image_patch.exists(""black bike with engine 8"")
    is_black_bike_or_scooter_11 = image_patch.exists(""black bike with engine 9"")
    is_black_bike_or_scooter_12 = image_patch.exists(""black bike with engine 10"")
    is_black_bike_or_scooter_13 = image_patch.exists(""black bike with engine 11"")
    is_black_bike_or_scooter_14 = image_patch.exists(""black bike with engine 12"")
    is_black_bike_or_scooter_15 = image_patch.exists(""black bike with engine 13"")
    is_black_bike_or_scooter_16 = image_patch.exists(""black bike with engine 14"")
    is_black_bike_or_scooter_17 = image_patch.exists("""
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?,"    image_patch = ImagePatch(image)
    blue_cars = image_patch.find(""blue car"")
    for blue_car in blue_cars:
        if blue_car.horizontal_center > (image_patch.find(""police officer"")[0].horizontal_center + image_patch.horizontal_center) / 2:
            return ""right""
    return ""front"""
5785831,What is in the glass?,"    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    # Question assumes only one glass patch
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is in the glass?"")
    return glass_patches[0].simple_query(""What is in the glass?"")"
19246241,Are there any brown benches or buckets?,"    is_bench_or_bucket = ImagePatch(image).exists(""bucket"")
    is_bench_or_bucket_right = ImagePatch(image).exists(""brown bucket"")
    is_bench_or_bucket_left = ImagePatch(image).exists(""brown bucket left"")
    is_bench_or_bucket_bottom = ImagePatch(image).exists(""brown bucket bottom"")
    is_bench_or_bucket_top = ImagePatch(image).exists(""brown bucket top"")
    is_bench_or_bucket = ImagePatch(image).exists(""brown bench"")
    is_bench_or_bucket_right2 = ImagePatch(image).exists(""brown bench right"")
    is_bench_or_bucket_left2 = ImagePatch(image).exists(""brown bench left"")
    is_bench_or_bucket_bottom2 = ImagePatch(image).exists(""brown bench bottom"")
    is_bench_or_bucket_top2 = ImagePatch(image).exists(""brown bench top"")
    is_bench_or_bucket3 = ImagePatch(image).exists(""brown bucket with handle"")
    is_bench_or_bucket4 = ImagePatch(image).exists(""brown bucket with handle right"")
    is_bench_or_bucket5 = ImagePatch(image).exists(""brown bucket with handle left"")
    is_bench_or_bucket6 = ImagePatch(image).exists(""brown bucket with handle bottom"")
    is_bench_or_bucket7 = ImagePatch(image).exists(""brown bucket with handle top"")
    is_bench_or_bucket8 = ImagePatch(image).exists(""brown bucket with handle and hole"")
    is_bench_or_bucket9 = ImagePatch(image).exists(""brown bucket with handle and hole right"")
    is_bench_or_bucket10 = ImagePatch(image).exists(""brown bucket with handle and hole left"")
    is_bench_or_bucket11 = ImagePatch(image).exists(""brown bucket with handle and hole bottom"")
    is_bench_or_bucket12 = ImagePatch(image).exists(""brown bucket with handle and hole top"")
    is_bench_or_bucket13 = ImagePatch(image).exists(""brown bucket with handle and hole and loop"")
    is_bench_or_bucket14 = ImagePatch(image).exists(""brown bucket with handle and hole and loop right"")
    is_bench_or_bucket15 = ImagePatch(image).exists(""brown bucket with handle and hole and loop left"")
    is_bench_or_bucket16 = ImagePatch(image).exists(""brown bucket with handle and hole and loop bottom"")
    is_bench_or_bucket17 = ImagePatch(image).exists(""brown bucket with handle and hole and loop top"")
    is_bench_or_bucket18"
3243803,"Where in the picture is the spoon, on the right or on the left?","    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on left?"")
    if spoon_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6952486,Does the shirt look white?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return shirt_patches[0].verify_property(""shirt"", ""white"")"
17401425,Is there a bag that is not brown?,"    bag_patches = ImagePatch(image).find(""bag"")
    is_bag_not_brown = False
    for bag_patch in bag_patches:
        is_bag = bag_patch.exists(""bag"")
        is_not_brown = bag_patch.verify_property(""bag"", ""brown"")
        if is_bag and not is_not_brown:
            is_bag_not_brown = True
    return bool_to_yesno(is_bag_not_brown)"
481240,"Which kind of furniture is large, the shelf or the cupboard?","    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    # Question assumes one shelf patch and one cupboard patch
    if len(shelf_patches) < len(cupboard =                    # for  #   #  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,"
8531943,Are there any screens or bags?,"    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    is_screen_or_bag = image_patch.exists(""laptop screen"") or image_patch.exists(""laptop bag"")
    is_screen_or_bag_2 = image_patch.exists(""laptop"") or image_patch.exists(""laptop bag"")
    is_screen_or_bag_3 = image_patch.exists(""laptop screen bag"")
    is_screen_or_bag_4 = image_patch.exists(""laptop screen bag top"")
    is_screen_or_bag_5 = image_patch.exists(""laptop screen bag bottom"")
    is_screen_or_bag_6 = image_patch.exists(""laptop screen bag left"")
    is_screen_or_bag_7 = image_patch.exists(""laptop screen bag right"")
    is_screen_or_bag_8 = image_patch.exists(""laptop screen bag top left"")
    is_screen_or_bag_9 = image_patch.exists(""laptop screen bag top right"")
    is_screen_or_bag_10 = image_patch.exists(""laptop screen bag bottom left"")
    is_screen_or_bag_11 = image_patch.exists(""laptop screen bag bottom right"")
    is_screen_or_bag_12 = image_patch.exists(""laptop screen bag top"")
    is_screen_or_bag_13 = image_patch.exists(""laptop screen bag bottom"")
    is_screen_or_bag_14 = image_patch.exists(""laptop screen bag left"")
    is_screen_or_bag_15 = image_patch.exists(""laptop screen bag right"")
    is_screen_or_bag_16 = image_patch.exists(""laptop screen bag top left"")
    is_screen_or_bag_17 = image_patch.exists(""laptop screen bag top right"")
    is_screen_or_bag_18 = image_patch.exists(""laptop screen bag bottom left"")
    is_screen_or_bag_19 = image_patch.exists(""laptop screen bag bottom right"")
    is_screen_or_bag_20 = image_patch.exists(""laptop screen bag top"")
    is_screen_or_bag_21 = image_patch.exists(""laptop screen bag bottom"")
    is_screen_or_bag_22 = image_patch.exists(""laptop screen bag left"")
    is_screen_or_bag_23 = image_patch.exists(""laptop screen bag right"")
    is_screen_or_bag_24 = image_patch.exists(""laptop screen bag top left"")
    is_screen_or_bag_25 = image_patch.exists(""laptop screen bag top right"")
    is_screen_or_bag_26 = image_patch.exists(""laptop"
1969545,What is she wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    return person_patches[0].simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?","    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white appliance"")
    # Question assumes only one white freezer and one white ice maker
    for white_patch in white_patches:
        if white_patch.simple_query(""What is it?"") == ""freezer"":
            return ""ice maker""
    return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")"
1051870,Are there chairs or tables that are not green?,"    is_green = ImagePatch(image).exists(""green"")
    is_chair_or_table = ImagePatch(image).exists(""chair"") or ImagePatch(image).exists(""table"")
    is_chair_or_table_not_green = ImagePatch(image).exists(""chair not green"") or ImagePatch(image).exists(""table not green"")
    is_chair_or_table_and_not_green = ImagePatch(image).exists(""chair and not green"") or ImagePatch(image).exists(""table and not green"")
    is_chair_or_table_and_green = ImagePatch(image).exists(""chair and green"") or ImagePatch(image).exists(""table and green"")
    is_chair_or_table_and_not_green_and_not_chair_or_table_and_green = ImagePatch(image).exists(""chair and not green and not chair and green"") or ImagePatch(image).exists(""table and not green and not table and green"")
    is_chair_or_table_and_not_green_and_not_chair_or_table_and_green_and_not_chair_or_table = ImagePatch(image).exists(""chair and not green and not chair and green and not chair and green"") or ImagePatch(image).exists(""table and not green and not table and green and not table and green"")
    is_chair_or_table_and_not_green_and_not_chair_or_table_and_green_and_not_chair_or_table = ImagePatch(image).exists(""chair and not green and not chair and green and not chair and green and not chair and green"") or ImagePatch(image).exists(""table and not green and not table and green and not table and green and not table and green"")
    is_chair_or_table_and_not_green_and_not_chair_or_table_and_green_and_not_chair_or_table_and_not_chair_or_table = ImagePatch(image).exists(""chair and not green and not chair and green and not chair and green and not chair and green and not chair and green"") or ImagePatch(image).exists(""table and not green and not table and green and not table and green and not table and green and not table and green"")
    is_chair_or_table_and_not_green_and_not_chair_or_table_and_green_and_not_chair_or_table_and_not_chair_or_table_and_not_chair_or_table = ImagePatch(image).exists(""chair and not green and not chair and green and not chair and green and not chair and green and not chair and green and not chair and green"") or ImagePatch(image).exists(""table and not green and not table and green and not table and green and not"
1366363,Does the taxi have a different color than the truck?,"    truck = ImagePatch(image)
    truck_color = truck.simple_query(""What is the color of the truck?"")
    taxi = ImagePatch(image)
    taxi_colors = [""red"", ""blue"", ""green"", ""yellow"", ""orange"", ""purple""]
    for t in taxi_colors:
        taxi_copy = ImagePatch(image)
        taxi_copy.simple_query(""What is the color of the taxi?

    #  # ""red
   #  # ""blue
   #  # ""green
   #  # ""yellow
   #  # ""orange
        #  # ""purple
        #  # ""brown
        #  # ""gray
        #  # ""black
        #  # ""white
        #  # ""pink
        #  # ""turquoise
        #  # ""brown
        #  # ""olive
        #  # ""teal
        #  # ""plum
        #  # ""lavender
        #  # ""coral
        #  # ""salmon
        #  # ""tan
        #  # ""maroon
        #  # ""navy blue
        #  # ""orange red
        #  # ""light blue
        #  # ""light green
        #  # ""light gray
        #  # ""light brown
        #  # ""light pink
        #  # ""light yellow
        #  # ""light orange
        #  # ""light turquoise
        #  # ""light coral
        #  # ""light salmon
        #  # ""light tan
        #  # ""light maroon
        #  # ""light navy blue
        #  # ""light orange red
        #  # ""light blue green
        #  # ""light blue violet
        #  # ""light blue gray
        #  # ""light blue brown
        #  # ""light blue pink
        #  # ""light blue yellow
        #  # ""light blue orange
        #  # ""light blue turquoise
        #  # ""light blue coral
        #  # ""light blue salmon
        #  # ""light blue tan
        #  # ""light blue maroon
        #  # ""light blue navy blue
        #  # ""light blue orange red
        #  # ""light blue green yellow"
5460839,In which part of the image is the dog?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    if dog_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""
    else:
        return ""right"""
18899476,What type of vegetable is to the right of the rice that is on the plate?,"    image_patch = ImagePatch(image)
    rice_patches = image_patch.find(""rice that is on a plate"")
    # Question assumes one rice patch
    if len(rice_patches) == 0:
        # If no rice is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    rice_patch = rice_patches[0]
    # crop would include the rice that is on a plate, so keep it in the query
    # and the rice that is on a plate is assumed to be the one that is on the plate
    # so ask for the vegetable to the right of that one
    for vegetable_patch in image_patch.find(""vegetable that is on a plate""):
        if vegetable_patch.horizontal_center > rice_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    # If no vegetable is to the right of the rice that is on a plate, query the image directly
    return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")"
8606903,What food item is not wide?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        is_not_wide = (food_patch.simple_query(""Is the food item wide?"") == ""no"")
        if is_not_wide:
            return food_patch.simple_query(""What food item is not wide?"") # crop would include the item so keep it in the query
    # If no non-wide item is found, pick the first item
    return food_patches[0].simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?,"    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"") or image_patch.exists(""folding chair with seat"") or image_patch.exists(""folding chair with seat and backrest"")
    is_skateboard = image_patch.exists(""skateboard"")
    is_folding_chair_or_skateboard = image_patch.exists(""folding chair with seat and backrest and deck"") or image_patch.exists(""folding chair with seat and deck"") or image_patch.exists(""folding chair with seat and deck and trucks"") or image_patch.exists(""folding chair with seat and deck and trucks and wheels"")
    is_folding_chair_or_skateboard_2 = image_patch.exists(""folding chair with seat and deck and trucks and wheels and grip"") or image_patch.exists(""folding chair with seat and deck and trucks and wheels and grip and handle"")
    is_folding_chair_or_skateboard_3 = image_patch.exists(""folding chair with seat and deck and trucks and wheels and grip and handle and deck and seat and backrest"") or image_patch.exists(""folding chair with seat and deck and trucks and wheels and grip and handle and deck and seat and backrest and wheels"")
    is_folding_chair_or_skateboard_4 = image_patch.exists(""folding chair with seat and deck and trucks and wheels and grip and handle and deck and seat and backrest and wheels and folding mechanism"") or image_patch.exists(""folding chair with seat and deck and trucks and wheels and grip and handle and deck and seat and backrest and wheels and folding mechanism and deck and seat and backrest"")
    is_folding_chair_or_skateboard_5 = image_patch.exists(""folding chair with seat and deck and trucks and wheels and grip and handle and deck and seat and backrest and wheels and folding mechanism and deck and seat and backrest and trucks"") or image_patch.exists(""folding chair with seat and deck and trucks and wheels and grip and handle and deck and seat and backrest and wheels and folding mechanism and deck and seat and backrest and trucks and deck"")
    is_folding_chair_or_skateboard_6 = image_patch.exists(""folding chair with seat and deck and trucks and wheels and grip and handle and deck and seat and backrest and wheels and folding mechanism and deck and seat and backrest and trucks and deck and seat"") or image_patch.exists(""folding chair with seat and deck and trucks and wheels"
2327600,Is there an elephant near the pond?,"    image_patch = ImagePatch(image)
    is_elephant_near_pond = False
    for elephant_patch in image_patch.find(""elephant""):
        for pond_patch in image_patch.find(""pond""):
            if abs(elephant_patch.horizontal_center - pond_patch.horizontal_center) < 100:  # 100 pixel threshold
                is_elephant_near_pond = True
                break
    return bool_to_yesno(is_elephant_near_pond)"
1575941,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?,"    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    desk_patch = desk_patches[0]
    floor_patches = image_patch.find(""floor"")
    # Question assumes one floor patch (the one under the desk)
    for floor_patch in floor_patches:
        if floor_patch.vertical_center < desk_patch.vertical_center:
            return floor_patch.simple_query(""What is the color of the floor that the desk is on top of?"") # crop would include the desk so keep it in the query
    # If no floor is found under the desk, query the image directly
    return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")"
16654241,Is the TV on the left or on the right?,"    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    if tv_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
18685233,Which kind of vehicle is to the left of the flags?,"    image_patch = ImagePatch(image)
    flags_patches = image_patch.find(""flag"")
    # Question assumes only one flags patch
    if len(flags_patches) < 2:
        # If there is no flags patch to the right, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    flags_patch_to_the_right = flags_patches[1]
    flags_patch_to_the_left = flags_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < flags_patch_to_the_right.horizontal_center < vehicle_patch.horizontal_center:
            return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    # If no vehicle is to the left of the flags, query the image directly
    return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")"
9796068,Are there both a fence and a sheep in the picture?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?,"    is_blue_blanket_or_towel = False
    image_patch = ImagePatch(image)
    blanket_or_towel_patches = image_patch.find(""blue blanket"") + image_patch.find(""blue towel"")
    for blanket_or_towel_patch in blanket_or_towel_patches:
        is_blue_blanket_or_towel = is_blue_blanket_or_towel or blanket_or_towel_patch.verify_property(""blanket or towel"", ""blue"")
    is_blue_blanket_or_towel = is_blue_blanket_or_towel or image_patch.verify_property(""blanket or towel"", ""blue"")
    return bool_to_yesno(is_blue_blanket_or_towel)"
1110330,Is the pillow to the left of the frog cream colored or green?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow to the left of the frog"")
    # Question assumes one pillow patch to the left of the frog
    if len(pillow_patches) < 1:
        # If no pillow is found to the left of the frog, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    pillow_patch = pillow_patches[0]
    pillow_to_the_right_of_the_frog = ImagePatch(image)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.lower, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, 0, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.lower, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.upper, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.lower, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.upper, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.lower, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.upper, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.lower, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.upper, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.lower, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.upper, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.lower, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.upper, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.lower, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.upper, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.lower, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.upper, pillow_patch.width)
    pillow_to_the_right_of_the_frog.crop(0, pillow_patch.lower, pillow_patch.width)
   "
511507,Is the antenna on the aircraft?,"    image_patch = ImagePatch(image)
    antenna_patches = image_patch.find(""antenna"")
    aircraft_patches = image_patch.find(""aircraft"")
    # Question assumes one antenna patch and one aircraft patch
    for antenna_patch in antenna_patches:
        for aircraft_patch in aircraft_patches:
            if antenna_patch.horizontal_center > aircraft_patch.horizontal_center:
                return ""no""
            if antenna_patch.horizontal_center < aircraft_patch.horizontal_center < (antenna_patch.horizontal_center + antenna_patch.width):
                return ""yes""
    # If no antenna is found on an aircraft, query the image directly
    return bool_to_yesno(image_patch.exists(""aircraft with antenna""))"
10464417,"In which part is the tent, the top or the bottom?","    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
10816730,Is the tree in front of the building?,"    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    building_patches = image_patch.find(""building"")
    # Question assumes one tree patch and one building patch
    for tree_patch in tree_patches:
        for building_patch in building_patches:
            if tree_patch.horizontal_center < building_patch.horizontal_center:
                return ""no""
    # If no tree or building is found, query the image directly
    return bool_to_yesno(image_patch.simple_query(""Is the tree in front of the building?"") == ""yes"")"
18766115,Who is walking?,"    # asks for the predicate of a relational verb (walking), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is walking?"")"
10625851,Are there either any fruits or plates in the image?,"    image_patch = ImagePatch(image)
    is_fruit_or_plate = False
    for object_patch in image_patch.find(""fruit"") + image_patch.find(""plate""):
        is_fruit_or_plate = is_fruit_or_plate or object_patch.exists(""fruit"") or object_patch.exists(""plate"")
    return bool_to_yesno(is_fruit_or_plate)"
71018537,Is the person wearing a coat?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    return person_patches[0].verify_property(""person"", ""coat"")"
4194722,Is the man wearing a helmet?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    man_patch = man_patches[0]
    is_wearing_helmet = man_patch.verify_property(""man"", ""helmet"")
    return bool_to_yesno(is_wearing_helmet)"
414248,"What animal are the women near the ocean riding, a pig or a horse?","    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")"
683094,Who is wearing the shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for person_patch in person_patches:
        who_wearing_shirt = person_patch.simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query
        return who_wearing_shirt # no need to check further properties
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing the shirt?"")"
12140603,What device is to the left of the headphones?,"    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    if len(headphones_patches) < 2:
        # If there is only one set of headphones, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for headphones_patch in headphones_patches:
        for other_patches in [image_patch.find(""laptop""), image_patch.find(""phone""), image_patch.find(""radio"")]:
            for other_patch in other_patches:
                if other_patch.horizontal_center < headphones_patch.horizontal_center:
                    return other_patch.simple_query(""What device is to the left of the headphones?"")
    # If no devices are found to the left of the headphones, query the image directly
    return image_patch.simple_query(""What device is to the left of the headphones?"")"
5575209,The flowers are where?,"    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    if flower_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom, left would be more specific, but not available; bottom for now, might need to be updated.""  for     #  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98  99  100  101  102  103  104  105  106  107  108  109  110  111  112  113  114  115  116  117  118  119  120  121  122  23  # for r
    if flower_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""right"""
8773829,Which kind of furniture is made of wood?,"    image_patch = ImagePatch(image)
    wood_furniture_patches = image_patch.find(""wooden furniture"")
    if len(wood_furniture_patches) == 0:
        # If no wooden furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    for wood_furniture_patch in wood_furniture_patches:
        wood_furniture_name = wood_furniture_patch.simple_query(""What is the type of furniture?"")
        if wood_furniture_name == ""table"" or wood_furniture_name == ""chair"" or wood_furniture_name == ""bench"" or wood_furniture_name == ""table"" or wood_furniture_name == ""bookshelf"":
            return wood_furniture_name
    # If no specific type of furniture is found, query the image directly
    return image_patch.simple_query(""Which kind of furniture is made of wood?"")"
12636428,Which kind of animal is black?,"    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black animal"")
    if len(black_patches) == 0:
        # If no black animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is black?"")
    return black_patches[0].simple_query(""Which kind of animal is black?"")"
1020584,What animals is the car behind of?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals is the car behind of?"")"
11879418,The man is standing on what?,"    # asks for the predicate of a relational verb (standing on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On what is the man standing?"")"
12334288,What device is to the left of the cabinet?,"    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    if len(cabinet_patches) < 2:
        # If there is not exactly two objects, query the image directly
        return image_patch.simple_query(""What device is to the left of the cabinet?"")
    for cabinet_patch in cabinet_patches:
        for object_patch in image_patch.find(""device""):
            if object_patch.horizontal_center < cabinet_patch.horizontal_center:
                return object_patch.simple_query(""What device is to the left of the cabinet?"") # crop would include the object so keep it in the query
    # If no device is to the left of the cabinet, query the image directly
    return image_patch.simple_query(""What device is to the left of the cabinet?"")"
691610,Is the monitor to the left of a book?,"    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    book_patches = image_patch.find(""book"")
    # Question assumes one monitor patch and one book patch
    for monitor_patch in monitor_patches:
        for book_patch in book_patches:
            if monitor_patch.horizontal_center < book_patch.horizontal_center:
                return ""yes""
    # If no monitor is to the left of a book, query the image directly
    return ""no"""
7552714,Is the color of the jacket black?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return jacket_patches[0].verify_property(""jacket"", ""black color"")"
8492422,Is the man to the left of a boy?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes one man patch and one boy patch
    if len(man_patches) < 1 or len(boy_patches) < 1:
        # If no man or boy is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    for man_patch in man_patches:
        for boy_patch in boy_patches:
            if man_patch.horizontal_center < boy_patch.horizontal_center:
                return ""yes""
    return ""no"""
13248061,What type of device is to the left of the keyboard in the bottom of the image?,"    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    for keyboard_patch in keyboard_patches:
        for device_patch in image_patch.find(""device""):
            if device_patch.horizontal_center < keyboard_patch.horizontal_center and device_patch.vertical_center > image_patch.horizontal_center / 2:
                return device_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    # If no device is found to the left of the keyboard, query the image directly
    return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")"
18252454,What is common to the roof and the sky?,"    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    sky_patches = image_patch.find(""sky"")
    # Question assumes one roof and one sky
    if len(roof_patches) < 1 or len(sky_patches) < 1:
        # If no roof or sky is found, query the image directly
        return image_patch.simple_query(""What is common to the roof and the sky?"")
    roof = roof_patches[0]
    sky = sky_patches[0]
    common_attributes = [""color"", ""shape"", ""material""]
    for attribute in common_attributes:
        if roof.verify_property(attribute, sky_property = 0 for  # type:  #  # type:  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  0 for  #  #  #  0 in  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  # "
14443687,What do the cat and the book have in common?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    # Question assumes one cat patch and one book patch
    if len(cat_patches) < 1 or len(book_patches) < 1:
        # If no cat or book is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    for cat_patch in cat_patches:
        for book_patch in book_patches:
            common_ground = [""cover"", ""pages"", ""feel"", ""weight"", ""color"", ""shape""]
            for item in common_ground:
                if cat_patch.verify_property(""cat"", item) and cat_patch.verify_property(""book"", item):
                    return item
    # If no common ground is found, query the image directly
    return image_patch.simple_query(""What do the cat and the book have in common?"")"
14571335,Who is wearing trousers?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing trousers?"")
    for person_patch in person_patches:
        who_is_wearing_trousers = person_patch.simple_query(""Who is wearing trousers?"") # crop would include the trousers so keep it in the query
        if who_is_wearing_trousers != """":
            return who_is_wearing_trousers
    # If no person is wearing trousers, pick the first person
    return person_patches[0].simple_query(""Who is wearing trousers?"")"
474885,Who wears a cap?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    for person_patch in person_patches:
        who_wears_cap = person_patch.simple_query(""Who wears a cap?"")
    # If no person is wearing a cap, pick the first person
    return who_wears_cap"
141013015,"What color is the toilet, brown or white?","    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].best_text_match([""brown"", ""white""])"
5515816,On which side of the image is the fence?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16774696,What is the surfer wearing?,"    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    # Question assumes only one surfer patch
    if len(surfer_patches) == 0:
        # If no surfer is found, query the image directly
        return image_patch.simple_query(""What is the surfer wearing?"")
    return surfer_patches[0].simple_query(""What is the surfer wearing?"")"
13701956,Is there any grass or sand that is not dry?,"    is_wet_grass_or_sand = False
    image_patch = ImagePatch(image)
    is_wet_grass_or_sand = is_wet_grass_or_sand or image_patch.exists(""wet grass"") # crop would include the wet so keep it in the query
    is_wet_grass_or_sand = is_wet_grass_or_sand or image_patch.exists(""wet sand"") # crop would include the wet so keep it in the query
    is_wet_grass_or_sand = is_wet_grass_or_sand or image_patch.exists(""green grass"") # crop would include the green so keep it in the query
    is_wet_grass_or_sand = is_wet_grass_or_sand or image_patch.exists(""sand dunes"") # crop would include the sand so keep it in the query
    is_wet_grass_or_sand = is_wet_grass_or_sand or image_patch.exists(""ocean waves"") # crop would include the ocean so keep it in the query
    is_wet_grass_or_sand = is_wet_grass_or_sand or image_patch.exists(""water splash"") # crop would include the water so keep it in the query
    is_wet_grass_or_sand = is_wet_grass_or_sand or image_patch.exists(""water droplets"") # crop would include the water so keep it in the query
    return bool_to_yesno(is_wet_grass_or_sand)"
11606870,Is there a cow or a zebra in the picture?,"    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?,"    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one hydrant patch
    if len(hydrant_patches) == 0:
        # If no hydrant is found, query the image directly
        return image_patch.simple_query(""Is the fire hydrant looking modern?"")
    return hydrant_patches[0].verify_property(""fire hydrant"", ""modern"")"
942308,Is the cup empty or full?,"    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    return cup_patches[0].simple_query(""Is the cup empty or full?"")"
15815976,Is the woman wearing a scarf?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    return woman_patches[0].verify_property(""woman"", ""scarf"")"
3193231,Do you see either parking meters or brooms in the picture?,"    image_patch = ImagePatch(image)
    is_meter_or_broom = image_patch.exists(""parking meter"") or image_patch.exists(""parking meter metal box"") or image_patch.exists(""parking meter metal box on street"") or image_patch.exists(""broom"")
    return bool_to_yesno(is_meter_or_broom)"
314218,Is the sign in front of the bridge small and white?,"    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign small and white?"")
    is_small_and_white = (sign_patches[0].simple_query(""Is the sign small?"") == ""yes"" and
                          sign_patches[0].simple_query(""Is the sign white?"") == ""yes"")
    return bool_to_yesno(is_small_and_white)"
18130465,Does the umbrella that is not dry look orange and open?,"    umbrella_patches = ImagePatch(image).find(""umbrella that is not dry"")
    if len(umbrella_patches) == 0:
        # If no umbrella that is not dry is found, query the image directly
        return bool_to_yesno(ImagePatch(image).verify_property(""umbrella"", ""open orange"") and ImagePatch(image).verify_property(""umbrella"", ""open"")
    umbrella_patch = umbrella_patches[0]
    is_open = umbrella_patch.verify_property(""umbrella"", ""open"")
    is_orange = umbrella_patch.verify_property(""umbrella"", ""orange"")
    is_dry = umbrella_patch.verify_property(""umbrella"", ""dry"")
    is_open_orange = umbrella_patch.verify_property(""umbrella that is not dry"", ""open orange"")
    is_open_orange_dry = umbrella_patch.verify_property(""umbrella that is not dry"", ""open orange"")
    is_open_orange = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange"")
    is_open_orange_dry = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange dry"")
    is_open_orange_dry_open = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange dry open"")
    is_open_orange_dry_open = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange open"")
    is_open_orange_dry_open = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange open dry"")
    is_open_orange_dry_open = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange open dry"")
    is_open_orange_dry_open = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange open dry"")
    is_open_orange_dry_open = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange open dry"")
    is_open_orange_dry_open = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange open dry"")
    is_open_orange_dry_open = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange open dry"")
    is_open_orange_dry_open = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange open dry"")
    is_open_orange_dry_open = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange open dry"")
    is_open_orange_dry_open = umbrella_patch.verify_property(""umbrella that is not dry"", ""orange open dry"")
"
7920817,What's in the paper?,"    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""What's in the paper?"")
    return paper_patches[0].simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?,"    image_patch = ImagePatch(image)
    top_patches = image_patch.find(""top of bun"")
    if len(top_patches) == 0:
        # If no top of bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    top_patch = top_patches[0]
    bun_patches = image_patch.find(""bun"")
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    for bun_patch in bun_patches:
        if bun_patch.horizontal_center < top_patch.horizontal_center:
            return top_patch.simple_query(""What is on the bun in the top?"") # crop would include the top of the bun so keep it in the query
    # If no top of bun is found, query the image directly
    return image_patch.simple_query(""What is on the bun in the top?"")"
16929928,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?,"    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    if len(lady_patches) < 2:
        # If there is not two ladies, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    lady1 = lady_patches[0]
    lady2 = lady_patches[1]
    if lady2.horizontal_center > lady1.horizontal_center:
        return ""right""
    else:
        return ""left"""
17993299,Is the horse to the left of a car?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    for horse_patch in horse_patches:
        if horse_patch.horizontal_center < (image_patch.find(""car"")[0].horizontal_center + image_patch.horizontal_center) / 2:
            return ""yes""
    return ""no"""
8717022,Is the small animal to the left of the vehicle that looks silver?,"    # asks for the predicate of a relational verb (looks silver) and a spatial relation (left of), so ask directly
    image_patch = ImagePatch(image)
    # first check if there is a small animal to the left of a vehicle that looks silver
    for small_animal_patch in image_patch.find(""small animal that looks silver""):
        if small_animal_patch.horizontal_center < image_patch.width / 2:
            for vehicle_patch in image_patch.find(""vehicle that looks silver""):
                if small_animal_patch.horizontal_center < vehicle_patch.horizontal_center:
                    return ""yes""
    # if no small animal to the left of a vehicle that looks silver, query the image directly
    return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")"
2998707,Which color is the chair that is on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    rightmost_chair = max(chair_patches, key=lambda x: x.horizontal_center)
    return rightmost_chair.simple_query(""Which color is the chair that is on the right?"")"
171017786,Do you see any cups to the left of the monitor?,"    image_patch = ImagePatch(image)
    cups_patches = image_patch.find(""cup"")
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes one monitor patch
    if len(monitor_patches) < 1:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Is there a cup to the left of the monitor?"")
    for cup in cups_patches:
        if cup.horizontal_center < monitor_patches[0].horizontal_center:
            return bool_to_yesno(cup.exists(""cup""))
    # If no cup is found to the left of the monitor, query the image directly
    return bool_to_yesno(image_patch.exists(""cup""))"
2220068,Is the girl to the right or to the left of the glasses the man is wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man with glasses"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
    return ""right"""
1941568,What animal is in the water?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"")"
17577787,Does the man's hair look short and white?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man's hair short and white?"")
    man_patch = man_patches[0]
    is_hair_short_and_white = (man_patch.simple_query(""Is the man's hair short?"") == ""yes"" and
                               man_patch.simple_query(""Is the man's hair white?"") == ""yes"")
    return bool_to_yesno(is_hair_short_and_white)"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?,"# first find the bottle and the chair, then check if there is a chair to the left of the bottle
bottle_patch = ImagePatch(image).find(""bottle"")[0]  # assume one bottle
chair_patches = ImagePatch(image).find(""chair"")  # assume multiple chairs
left_chair_patches = [chair for chair in chair_patches if chair.horizontal_center < bottle_patch.horizontal_center]  # filter by horizontal position
right_chair_patches = [chair for chair in chair_patches if chair.horizontal_center > bottle_patch.horizontal_center]  # filter by horizontal position
# check if there is a chair to the left of the bottle
if len(left_chair_patches) > 0:
    return bool_to_yesno(True)  # yes
else:
    return bool_to_yesno(False)  # no"
9825336,Which kind of furniture is the mat lying on?,"    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    return mat_patches[0].simple_query(""Which kind of furniture is the mat lying on?"")"
11222427,Do you see fences or elephants?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?","    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white entertainment center"")
    for white_patch in white_patches:
        if white_patch.simple_query(""What is it?"") != ""entertainment center"":
            return white_patch.simple_query(""What kind of furniture is it?"")
    white_patches = image_patch.find(""white bed"")
    for white_patch in white_patches:
        if white_patch.simple_query(""What is it?"") != ""bed"":
            return white_patch.simple_query(""What kind of furniture is it?"")
    # If no white bed or entertainment center is found, query the image directly
    return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")"
1152020,Do you see either any plate or tomato that are red?,"    is_red = ImagePatch(image).verify_property(""plate"", ""red"")
    if is_red:
        return bool_to_yesno(True)
    is_red_orange = ImagePatch(image).verify_property(""plate"", ""red orange"")
    if is_red_orange:
        return bool_to_yesno(True)
    is_red_orange_or_red = ImagePatch(image).verify_property(""plate"", ""red orange red"")
    if is_red_orange_or_red:
        return bool_to_yesno(True)
    is_red = ImagePatch(image).verify_property(""tomato"", ""red"")
    if is_red:
        return bool_to_yesno(True)
    is_red_orange = ImagePatch(image).verify_property(""tomato"", ""red orange"")
    if is_red_orange:
        return bool_to_yesno(True)
    is_red_orange_or_red = ImagePatch(image).verify_property(""tomato"", ""red orange red"")
    if is_red_orange_or_red:
        return bool_to_yesno(True)
    return bool_to_yesno(False)"
8961520,Who is surfing?,"    # asks for the predicate of a relational verb (surfing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"")"
18106780,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
1892692,What color do you think the bowl that is to the right of the person is?,"    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl that is to the right of the person"")
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    # Question assumes only one bowl patch
    return bowl_patches[0].simple_query(""What is the color of the bowl?"")"
6952082,What color is the hair?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"")"
3768067,What color is the pot the statue is to the right of?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    pot = pot_patches[0]
    pot_to_the_left = pot_patches[1]
    if len(pot_patches) > 2:  # if there are multiple pots, just take the second one
        pot = pot_to_the_left
    return pot.simple_query(""What color are you?"")"
17866761,Is the clear glass on the shelf of the table?,"    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    shelf_patches = image_patch.find(""shelf of the table"")
    if len(glass_patches) == 0 or len(shelf_patches) == 0:
        # If no glass or shelf is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    for glass_patch in glass_patches:
        for shelf_patch in shelf_patches:
            if glass_patch.horizontal_center > shelf_patch.horizontal_center:
                return ""no""
            if glass_patch.lower <= shelf_patch.lower:
                return ""yes""
    return ""yes"""
798020,Does the skirt look black or yellow?,"    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].best_text_match([""black"", ""yellow""])"
828981,How old is he?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""How old is he?"")
    return person_patches[0].simple_query(""How old is he?"")"
7236463,Of what color is the book?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""What is the color of the book?"")"
6376684,What color is the car to the left of the train car?,"    image_patch = ImagePatch(image)
    # assumes a specific relative position, so crop would not be necessary
    # first, find the train car
    train_patches = image_patch.find(""train car"")
    if len(train_patches) < 2:
        # If there is not a second train car, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    # then, find the other train car
    other_train_patches = image_patch.find(""other train car"")
    if len(other_train_patches) < 1:
        # If there is not a second train car, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    # finally, return the color of the first other train car
    return other_train_patches[0].simple_query(""What color is the car to the left of the train car?"")"
786798,Is this a photo of a beach?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a photo of a beach?"")"
19836753,What vehicles are to the left of the fence?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    for fence_patch in fence_patches:
        for vehicle_patch in image_patch.find(""vehicle""):
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicles are to the left of the fence?"") # crop would include the vehicle so keep it in the query
    # If no vehicles are to the left of the fence, query the image directly
    return image_patch.simple_query(""What vehicles are to the left of the fence?"")"
15284615,Who is playing?,"    # asks for the predicate of a relational verb (playing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man walking"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    is_holding_remote_control = (man_patch.simple_query(""Is the man holding a remote control?"") == ""yes"")
    is_walking = (man_patch.simple_query(""Is the man walking?"") == ""yes"")
    is_the_same_object = (man_patch.simple_query(""Is the man that is walking holding a remote control?"") == ""yes"")
    return bool_to_yesno(is_holding_remote_control and is_walking and is_the_same_object)"
17746396,What's the boy wearing?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    return boy_patches[0].simple_query(""What's the boy wearing?"")"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?,"    # check for a specific object order (tap, bottle, mug) so check each object in that order
    image_patch = ImagePatch(image)
    is_mug_to_right_of_bottle_andtap = False
    for bottle in image_patch.find(""bottle""):
        for mug in image_patch.find(""mug""):
            if bottle.horizontal_center < mug.horizontal_center:
                is_mug_to_right_of_bottle_andtap = True
    return bool_to_yesno(is_mug_to_right_of_bottle_andtap)"
13826837,What color is the door?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    return door_patches[0].simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?,"    image_patch = ImagePatch(image)
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_horse)"
2964690,What is in front of the mountains?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?,"    truck_patches = ImagePatch(image).find(""truck"")
    if len(truck_patches) < 2:
        # If there is no truck or only one truck, query the image directly
        return bool_to_yesno(ImagePatch(image).exists(""truck to the right of which there is a vehicle""))
    truck = truck_patches[0]
    for other_vehicle in truck_patches[1:]:
        if other_vehicle.horizontal_center > truck.horizontal_center:
            return bool_to_yesno(ImagePatch(image).exists(""vehicle""))
    return bool_to_yesno(ImagePatch(image).exists(""truck to the right of which there is a vehicle"") and ImagePatch(image).exists(""vehicle""))"
493755,Does the scarf made of wool seem to be long and blue?,"    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""wool scarf"")
    if len(scarf_patches) == 0: # if no scarf is found, query the image directly
        return image_patch.simple_query(""Is the scarf made of wool and blue?"")
    scarf_patch = scarf_patches[0]
    is_long = scarf_patch.verify_property(""wool scarf"", ""long"")
    is_blue = scarf_patch.verify_property(""wool scarf"", ""blue"")
    is_made_of_wool = scarf_patch.verify_property(""wool scarf"", ""made of wool"")
    is_a_scarf = scarf_patch.verify_property(""wool scarf"", ""scarf"")
    is_long_and_blue = is_long and is_blue
    is_a_long_blue_scarf = is_made_of_wool and is_a_scarf
    return bool_to_yesno(is_long_and_blue or is_a_long_blue_scarf)"
1189986,Is the man behind the elephant holding a surfboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes one man patch and one elephant patch
    is_man_holding_surfboard = False
    for man_patch in man_patches:
        for elephant_patch in elephant_patches:
            is_man_holding_surfboard = man_patch.verify_property(""man"", ""holding surfboard"")
            if is_man_holding_surfboard:
                return bool_to_yesno(is_man_holding_surfboard)
            if man_patch.horizontal_center > elephant_patch.horizontal_center:
                return ""no""
    # If no man is behind the elephant, query the image directly
    return bool_to_yesno(is_man_holding_surfboard)"
8792466,Which color is the closed window?,"    image_patch = ImagePatch(image)
    closed_window_patches = image_patch.find(""closed window"")
    # Question assumes only one closed window patch
    if len(closed_window_patches) == 0:
        # If no closed window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    return closed_window_patches[0].simple_query(""Which color is the window?"")"
10188423,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
        return who_is_wearing # no need to check further properties
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    right_girl_patch = girl_patches[0]
    veggie_patches = image_patch.find(""vegetable"")
    # Question assumes one veggie patch
    for veggie_patch in veggie_patches:
        if veggie_patch.horizontal_center > right_girl_patch.horizontal_center:
            return veggie_patch.simple_query(""What kind of vegetable is to the right of the girl?"") # crop would include the veggie so keep it in the query
    # If no veggie is to the right of the girl, pick the first one
    return veggie_patches[0].simple_query(""What kind of vegetable is to the right of the girl?"")"
4929965,Is there a black racket or clock in the picture?,"    is_black_racket = ImagePatch(image).exists(""black racket"")
    is_black_racket_frame = ImagePatch(image).exists(""racket frame black"")
    is_black_racket_string = ImagePatch(image).exists(""black string"")
    is_black_racket_head = ImagePatch(image).exists(""black racket head"")
    is_black_clock = ImagePatch(image).exists(""black clock"")
    is_black_clock_frame = ImagePatch(image).exists(""black clock frame"")
    is_black_clock_hand = ImagePatch(image).exists(""black clock hand"")
    is_black_clock_number = ImagePatch(image).exists(""black clock number"")
    is_black_clock_second = ImagePatch(image).exists(""black second hand"")
    is_black_clock_minute = ImagePatch(image).exists(""black minute hand"")
    is_black_clock_hour = ImagePatch(image).exists(""black hour hand"")
    is_black_clock_center = ImagePatch(image).exists(""black clock center"")
    is_black_clock_dial = ImagePatch(image).exists(""black clock dial"")
    is_black_clock_background = ImagePatch(image).exists(""black clock background"")
    is_black_clock_glass = ImagePatch(image).exists(""black clock glass"")
    is_black_clock_moving_part = ImagePatch(image).exists(""black clock moving part"")
    is_black_clock_still_part = ImagePatch(image).exists(""black clock still part"")
    is_black_clock_center_frame = ImagePatch(image).exists(""black clock center frame"")
    is_black_clock_center_string = ImagePatch(image).exists(""black clock center string"")
    is_black_clock_center_head = ImagePatch(image).exists(""black clock center head"")
    is_black_clock_center_dial = ImagePatch(image).exists(""black clock center dial"")
    is_black_clock_center_background = ImagePatch(image).exists(""black clock center background"")
    is_black_clock_center_glass = ImagePatch(image).exists(""black clock center glass"")
    is_black_clock_center_moving_part = ImagePatch(image).exists(""black clock center moving part"")
    is_black_clock_center_still_part = ImagePatch(image).exists(""black clock center still part"")
    is_black_clock_center_frame = ImagePatch(image).exists(""black clock center frame"")
    is_black_clock_center_string = ImagePatch(image).exists(""black clock center string"")
    is_black_clock_center_head = ImagePatch(image).exists(""black clock center head"")
    is_black_clock_center = ImagePatch(image).exists(""black clock center"")
    is_black_clock_dial = ImagePatch(image"
4782038,What kind of animal is white?,"    image_patch = ImagePatch(image)
    white_animal_patches = image_patch.find(""white animal"")
    # Question assumes only one white animal patch
    if len(white_animal_patches) == 0:
        # If no white animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    return white_animal_patches[0].simple_query(""What kind of animal is white?"")"
14658201,Is the sheep that looks white and brown made of plastic?,"    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep that looks white and brown"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    return sheep_patches[0].verify_property(""sheep that looks white and brown"", ""plastic"")"
1441865,Do you see any boxes on the table under the grill?,"    is_grill = ImagePatch(image).verify_property(""grill"", ""present"")
    is_box_on_table = ImagePatch(image).verify_property(""box on table"", ""present"")
    is_box_on_grill = ImagePatch(image).verify_property(""box on grill"", ""present"")
    is_box_on_table_and_grill = ImagePatch(image).verify_property(""box on table and grill"", ""present"")
    is_box_on_table_or_grill = ImagePatch(image).verify_property(""box on table or grill"", ""present"")
    is_box_on_table_and_grill_or_box_on_table_or_grill = ImagePatch(image).verify_property(""box on table and grill or box on table or grill"", ""present"")
    is_box_on_table_or_grill_or_box_on_table_or_grill_or_box_on_table_and_grill_or_box_on_table_and_grill = ImagePatch(image).verify_property(""box on table or grill or box on table or grill or box on table and grill or box on table and grill"", ""present"")
    is_box_on_table_or_grill_or_box_on_table_or_grill_or_box_on_table_and_grill_or_box_on_table_and_grill_or_box_on_table_and_grill_or_box_on_table_or_grill_or_box_on_table_or_grill_or_box_on_table_and_grill_or_box_on_table_and_grill = ImagePatch(image).verify_property(""box on table or grill or box on table or grill or box on table and grill or box on table and grill or box on table and grill or box on table or grill or box on table or grill or box on table and grill or box on table and grill"", ""present"")
    is_box_on_table_or_grill_or_box_on_table_or_grill_or_box_on_table_and_grill_or_box_on_table_and_grill_or_box_on_table_and_grill_or_box_on_table_or_grill_or_box_on_table_or_grill_or_box_on_table_and_grill_or_box_on_table_and_grill_or_box_on_table_and_grill = ImagePatch(image).verify_property(""box on table or grill or box on table or grill or box on table and grill or box on table and grill or box on table and grill or box on table or grill or box on table or grill or box on table and grill or box on table and grill or box on table and grill"", ""present"")
    is_box_on_table_or_grill_or_box_on_table_or_grill_or_box_on_table_and_grill_or_box_on_table_and_grill_or"
1424926,What is the tag on?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person working on laptop"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    person_patch = person_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes one furniture patch
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > person_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"") # crop would include the person and laptop so keep it in the query
    # If no furniture is to the right of the person, query the image directly
    return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")"
3635257,Is there any freezer in this photo?,"    image_patch = ImagePatch(image)
    is_freezer = image_patch.exists(""freezer"")
    # or is it a different object that is frozen? ask the user
    return bool_to_yesno(is_freezer)"
8821026,Are there either any bags or chairs?,"    image_patch = ImagePatch(image)
    is_bag_or-chair
13669952,In what vehicle is the bus driver?,"    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus driver"")
    # Question assumes only one bus driver patch
    if len(bus_patches) == 0:
        # If no bus driver is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    bus_patch = bus_patches[0]
    vehicle_patches = image_patch.find(""bus"")
    for vehicle_patch in vehicle_patches:
        if bus_patch.horizontal_center < vehicle_patch.horizontal_center:
            return bus_patch.simple_query(""In what vehicle is the bus driver?"")
    # If no bus is found, query the image directly
    return image_patch.simple_query(""In what vehicle is the bus driver?"")"
17204662,What is that man in front of?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that man in front of?"")"
380866,Are there any girls or radios?,"    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    is_guy_with_radio = image_patch.exists(""guy with radio"")
    is_guy_with_radio_and_girl = image_patch.exists(""guy with radio and girl"")
    is_guy_with_radio_or_guy_with_radio_and_girl = is_guy_with_radio or is_guy_with_radio_and_girl
    is_guy_with_radio_or_guy_with_radio_and_girl_or_guy_with_radio = is_guy_with_radio_or_guy_with_radio_and_girl
    is_guy_with_radio_or_guy_with_radio_and_girl_or_guy_with_radio = is_guy_with_radio_or_guy_with_radio_and_girl
    is_guy_with_radio_or_guy_with_radio_and_girl_or_guy_with_radio_or_guy_with_radio_and_girl = is_guy_with_radio_or_guy_with_radio_and_girl_or_guy_with_radio
    is_guy_with_radio_or_guy_with_radio_and_girl_or_guy_with_radio_or_guy_with_radio_and_guy = is_guy_with_radio_or_guy_with_radio_and_guy
    is_guy_with_radio_or_guy_with_radio_and_guy = is_guy_with_radio_or_guy
    is_guy_with_radio_or_guy = is_guy
    is_guy = is_guy_with_radio
    is_guy_with_radio = is_guy_with_radio_or_guy
    is_guy_with_radio_or_guy = is_guy_with_radio
    is_guy_with_radio = is_guy_with_radio_or_guy
    is_guy_with_radio_or_guy_with_radio = is_guy_with_radio
    is_guy_with_radio_or_guy_with_radio_and_guy = is_guy_with_radio
    is_guy_with_radio_or_guy_with_radio_and_guy_with_radio = is_guy_with_radio
    is_guy_with_radio_or_guy_with_radio_and_guy_with_radio_or_guy_with_radio = is_guy_with_radio
    is_guy_with_radio_or_guy_with_radio_and_guy_with_radio_or_guy_with_radio_or_guy_with_radio = is_guy_with_radio
    is_guy_with_radio_or_guy_with_radio_and_guy_with_radio_or_guy_with_radio_or_guy_with_radio_or_guy_with_radio = is_guy_with_radio
   "
13775896,The girl is sitting on what?,"    image_patch = ImagePatch(image)
    sitting_patches = image_patch.find(""girl sitting"")
    if len(sitting_patches) == 0:
        # If no girl is sitting, query the image directly
        return image_patch.simple_query(""The girl is sitting on what?"")
    for sitting_patch in sitting_patches:
        sitting_patch = ImagePatch(sitting_patch.cropped_image)  # crop to reduce the search space
        if sitting_patch.simple_query(""Is it a grassy surface?"") == ""yes"":
            return ""grass""
        elif sitting_patch.simple_query(""Is it a tree?"") == ""yes"":
            return ""tree""
        elif sitting_patch.simple_query(""Is it a chair?"") == ""yes"":
            return ""chair""
        else:
            return sitting_patch.simple_query(""The girl is sitting on what?"")"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center == image_patch.horizontal_center:
            white_lamp_patches = image_patch.find(""white lamp"")
            for white_lamp_patch in white_lamp_patches:
                if white_lamp_patch.horizontal_center < pillow_patch.horizontal_center:
                    return ""left""
    # If no white lamp is found to the left, query the image directly
    return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")"
16545552,What color do you think is the vehicle the girl is washing?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle being washed"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    return vehicle_patches[0].simple_query(""What is the color of the vehicle?"")"
16719872,Are there motorcycles to the left of the man who is wearing a hat?,"    image_patch = ImagePatch(image)
    man_patches_with_hat = image_patch.find(""man wearing a hat"")
    if len(man_patches_with_hat) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_with_hat = man_patches_with_hat[0]
    man_patches = image_patch.find(""man"")
    for man in man_patches:
        if man.horizontal_center < man_with_hat.horizontal_center:
            if man.exists(""motorcycle""):
                return ""yes""
    return ""no""
"
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person pushing stroller"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    person = person_patches[0]
    garbage_can_patches = image_patch.find(""garbage can"")
    for garbage_can in garbage_can_patches:
        if garbage_can.horizontal_center < person.horizontal_center:
            return ""left""
    return ""right"""
13711589,What do the truck and the street sign have in common?,"    truck_patches = ImagePatch(image).find(""truck"")
    street_sign_patches = ImagePatch(image).find(""street sign"")
    # Question assumes one truck patch and one street sign patch
    if len(truck_patches) < 1 or len(street_sign_patches) < 1:
        # If no truck or street sign is found, query the image directly
        return ImagePatch(image).simple_query(""What do the truck and the street sign have in common?"")
    truck = truck_patches[0]
    street_sign = street_sign_patches[0]
    common_attributes = [""color"", ""shape"", ""material"", ""purpose""]
    for attribute in common_attributes:
        if truck.verify_property(attribute, street_sign.simple_query(attribute)):
            return street_sign.simple_query(attribute)
    # If no common attribute is found, query the image directly
    return ImagePatch(image).simple_query(""What do the truck and the street sign have in common?"")"
10227573,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
        return who_is_wearing # no need to check further properties
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?,"    # asks for the predicate of a relational verb (leading), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the man leading?"")"
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?,"    image_patch = ImagePatch(image)
    dresser_patches = image_patch.find(""dresser"")
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes one dresser patch and one curtain patch
    for dresser_patch in dresser_patches:
        for curtain_patch in curtain_patches:
            if dresser_patch.horizontal_center > curtain_patch.horizontal_center:
                return dresser_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
            else:
                return dresser_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
"
7190226,Does the puddle look large?,"    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Is the puddle large?"")
    return bool_to_yesno(puddle_patches[0].verify_property(""puddle"", ""large"")"
11675152,Who throws the frisbee?,"    # asks for the predicate of a relational verb (throws the frisbee), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who throws the frisbee?"")"
8723676,Which kind of animal is the water on?,"    image_patch = ImagePatch(image)
    water_animal_patches = image_patch.find(""water animal"")
    # Question assumes only one water animal patch
    if len(water_animal_patches) == 0:
        # If no water animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is the water on?"")
    return water_animal_patches[0].simple_query(""Which kind of animal is the water on?"")"
61046657,Do you think that traffic light is tall?,"    image_patch = ImagePatch(image)
    light_patches = image_patch.find(""traffic light"")
    # Question assumes only one light patch
    if len(light_patches) == 0:
        # If no light is found, query the image directly
        return image_patch.simple_query(""Is the traffic light tall?"")
    if light_patches[0].verify_property(""light"", ""tall""):
        return bool_to_yesno(light_patches[0].verify_property(""light"", ""tall"")
        )  # crop would include the light so keep it in the query
    else:
        return bool_to_yesno(image_patch.verify_property(""light"", ""tall"") # crop would include the light so keep it in the query
        )"
9581034,On which side is the wine glass?,"    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    if wine_glass_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?,"    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    if len(pizza_patches) < 2:
        # If there is no second object to compare to, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for pizza_patch in pizza_patches:
        for other_object in pizza_patches:
            if pizza_patch != other_object:
                if pizza_patch.horizontal_center < other_object.horizontal_center:
                    return ""left""
    # If no second object is found, query the image directly
    return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")"
18535266,Is the face mask made of the same material as the mask?,"    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    if len(face_mask_patches) == 0:
        # If no face mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    for face_mask_patch in face_mask_patches:
        is_same_material = face_mask_patch.verify_property(""face mask"", ""mask material"")
        if is_same_material:
            return ""yes""
    return bool_to_yesno(face_patch =      # query the image directly for this one  # for some reason, this line is not working, so I'm commenting it
   #  ,   # for some reason, this line is not working, so I'm commenting it   # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some reason, this line is not working, so I'm commenting it  # for some"
11254215,What is the tan item of furniture?,"    image_patch = ImagePatch(image)
    tan_furniture_patches = image_patch.find(""tan furniture"")
    # Question assumes only one tan furniture patch
    if len(tan_furniture_patches) == 0:
        # If no tan furniture is found, query the image directly
        return image_patch.simple_query(""What is the tan item of furniture?"")
    return tan_furniture_patches[0].simple_query(""What is the tan item of furniture?"")"
1852010,How is the device to the right of the device on the desk called?,"    # asks for the predicate of a relational verb (right of), so ask directly
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    if len(desk_patches) < 2:
        # If there is no second device on the desk, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    right_device = desk_patches[1]
    left_device = desk_patches[0]
    return right_device.simple_query(""How is the device to the right of the device on the desk called?"")"
1587534,Is the device on the floor black and large?,"    device_patches = ImagePatch(image).find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch =   # for  # ImagePatch(image).simple_query(""Is the device on the floor black and large?  #  # 'Is the device on the floor black and large
8470757,Are there any surfboards?,"    image_patch = ImagePatch(image)
    is_surfboard = image_patch.exists(""surfboard"")
    return bool_to_yesno(is_surfboard)"
11273949,Is the shirt white?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return shirt_patches[0].verify_property(""shirt"", ""white"")"
7475238,What's the airplane in front of?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?,"    # asks for the predicate of a relational verb (run), so ask directly
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse to the right of the hose"")
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        return horse_patch.simple_query(""Where does the horse to the right of the hose run?"")
    # If no horse is to the right of the hose, query the image directly
    return image_patch.simple_query(""Where does the horse to the right of the hose run?"")"
3932624,Are there either any gray chairs or laptops?,"    is_gray_chair_or_laptop = ImagePatch(image).exists(""gray chair"") or ImagePatch(image).exists(""laptop"") or ImagePatch(image).exists(""gray chair with laptop on top"") or ImagePatch(image).exists(""laptop with chair on top"") or ImagePatch(image).exists(""laptop on top of chair"") or ImagePatch(image).exists(""chair on top of laptop"") or ImagePatch(image).exists(""laptop and chair together"") or ImagePatch(image).exists(""laptop and chair side by side"") or ImagePatch(image).exists(""laptop and chair on top of each other"") or ImagePatch(image).exists(""laptop and chair together on top of each other"") or ImagePatch(image).exists(""laptop and chair on top of each other side by side"") or ImagePatch(image).exists(""laptop and chair on top of each other side by side with laptop on top"") or ImagePatch(image).exists(""laptop and chair on top of each other side by side with laptop on bottom"") or ImagePatch(image).exists(""laptop and chair on top of each other side by side with laptop on bottom and chair on top"") or ImagePatch(image).exists(""laptop and chair on top of each other side by side with laptop on bottom and chair on top with laptop on top of chair"") or ImagePatch(image).exists(""laptop and chair on top of each other side by side with laptop on bottom and chair on top with laptop on top of chair and laptop on top of chair"") or ImagePatch(image).exists(""laptop and chair on top of each other side by side with laptop on bottom and chair on top with laptop on top of chair and laptop on top of chair and laptop on top of chair"") or ImagePatch(image).exists(""laptop and chair on top of each other side by side with laptop on bottom and chair on top with laptop on top of chair and laptop on top of chair and laptop on top of chair and laptop on top of chair and laptop on top of chair"") or ImagePatch(image).exists(""laptop and chair on top of each other side by side with laptop on bottom and chair on top with laptop on top of chair and laptop on top of chair and laptop on top of chair and laptop on top of chair and laptop on top of chair and laptop on top of chair and laptop on top of chair"") or ImagePatch(image).exists(""laptop and chair on top of each other side by side with laptop on"
10584099,Is the water brown or blue?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water brown or blue?"")
    return water_patches[0].simple_query(""Is the water brown or blue?"")"
9256263,Which kind of furniture is brown?,"    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown furniture"")
    if len(brown_patches) == 0:
        # If no brown furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    brown_patch = brown_patches[0]
    return brown_patch.simple_query(""Which kind of furniture is brown?"")"
18719769,Is the man wearing glasses?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    man_patch = man_patches[0]
    is_wearing_glasses = man_patch.verify_property(""man"", ""glasses"")
    return bool_to_yesno(is_wearing_glasses)"
18342439,What animal is white?,"    image_patch = ImagePatch(image)
    white_animal_patches = image_patch.find(""white animal"")
    # Question assumes only one white animal patch
    if len(white_animal_patches) == 0:
        # If no white animal is found, query the image directly
        return image_patch.simple_query(""What animal is white?"")
    return white_animal_patches[0].simple_query(""What animal is white?"")"
8665725,Who is wearing a coat?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a coat?"")
    for person_patch in person_patches:
        who_is_wearing_coat = person_patch.simple_query(""Who is wearing a coat?"") # crop would include the coat so keep it in the query
        if who_is_wearing_coat != ""no one"":
            return who_is_wearing_coat
    # If no person is wearing a coat, pick the first person
    return person_patches[0].simple_query(""Who is wearing a coat?"")"
5440407,What vehicle isn't black?,"    image_patch = ImagePatch(image)
    vehicles_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicles patch
    if len(vehicles_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicles_patches:
        vehicle_name = vehicle_patch.simple_query(""What is the vehicle?"")
        if vehicle_name != ""taxi"" and vehicle_name != ""motorcycle"" and vehicle_name != ""car"":
            return vehicle_name
    # If no vehicle other than taxi, motorcycle or car is found, query the image directly
    return image_patch.simple_query(""What vehicle isn't black?"")"
4104707,On which side of the picture is the oven?,"    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3126763,What is common to the logo and the letter?,"    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    letter_patches = image_patch.find(""letter"")
    # Question assumes one logo patch and one letter patch
    if len(logo_patches) < 1 or len(letter_patches) < 1:
        # If no logo or letter is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    logo_patch = logo_patches[0]
    letter_patch = letter_patches[0]
    common_properties = [""color"", ""shape"", ""font""]
    for property in common_properties:
        if logo_patch.verify_property(""logo"", property) and letter_patch.verify_property(""letter"", property):
            return property
    # If no common property is found, query the image directly
    return image_patch.simple_query(""What is common to the logo and the letter?"")"
18640925,What animal is in the water the man is walking through?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is in the water the man is walking through?"")"
125488,What is the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    return man_patches[0].simple_query(""What is the man wearing?"")"
5925435,What is the sidewalk made of?,"    image_patch = ImagePatch(image)
    sidewalk_patches = image_patch.find(""sidewalk"")
    # Question assumes only one sidewalk patch
    if len(sidewalk_patches) == 0:
        # If no sidewalk is found, query the image directly
        return image_patch.simple_query(""What is the sidewalk made of?"")
    return sidewalk_patches[0].simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].simple_query(""What is the pattern of the coat?"")"
4819547,What kind of furniture is white?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white furniture"")
    if len(white_patches) == 0:
        # If no white furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    for white_patch in white_patches:
        white_patch_type = white_patch.simple_query(""What is the type of furniture?"")
        return white_patch_type
    # If no white furniture is found, query the image directly
    return image_patch.simple_query(""What kind of furniture is white?"")"
14263174,What color do you think the chair that is to the right of the other chair is?,"    image_patch = ImagePatch(image)
    chairs = image_patch.find(""chair"")
    # Question assumes that there are at least two chairs
    if len(chairs) < 2:
        # If there is only one chair, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    # Compare the horizontal centers of the chairs to determine which one is to the right of the other
    for chair in chairs:
        for other_chair in chairs:
            if chair.horizontal_center > other_chair.horizontal_center:
                return chair.simple_query(""What color are you?"")
    # If no chair is to the right of the other, query the image directly
    return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is to the left of the person riding the green train in front of the fence"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence riding the green train in front of the fence?"")
    man_patch = man_patches[0]
    # check if man is on the green train
    green_train_patches = image_patch.find(""green train"")
    for green_train_patch in green_train_patches:
        if man_patch.simple_query(""Is the man on the green train?"") == ""yes"":
            return ""yes""
    # check if man is in front of the fence
    fence_patches = image_patch.find(""fence"")
    for fence_patch in fence_patches:
        if man_patch.simple_query(""Is the man in front of the fence?"") == ""yes"":
            return ""yes""
    # check if man is riding the green train
    if man_patch.simple_query(""Is the man riding the green train?"") == ""yes"":
        return ""yes""
    # check if man is on the green train
    if man_patch.simple_query(""Is the man on the green train?"") == ""yes"":
        return ""yes""
    # check if man is in front of the fence
    if man_patch.simple_query(""Is the man in front of the fence?"") == ""yes"":
        return ""yes""
    # check if man is riding the green train in front of the fence
    if man_patch.simple_query(""Is the man riding the green train in front of the fence?"") == ""yes"":
        return ""yes""
    # check if man is on the green train
    if man_patch.simple_query(""Is the man on the green train?"") == ""yes"":
        return ""yes""
    # check if man is in front of the fence
    if man_patch.simple_query(""Is the man in front of the fence?"") == ""yes"":
        return ""yes""
    # check if man is riding the green train
    if man_patch.simple_query(""Is the man riding the green train?"") == ""yes"":
        return ""yes""
    # check if man is"
9239936,Do the cows near the trees have white color?,"    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow near tree"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    cow = cow_patches[0]
    # crop would include the cow and the tree, so check the cow
    is_white = cow.verify_property(""cow"", ""white"")
    return bool_to_yesno(is_white)"
1885178,"In which part of the image is the remote control, the bottom or the top?","    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    if remote_control_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12341631,Which color is the bag in the top part?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    if bag_patch.vertical_center > image_patch.vertical_center:
        return bag_patch.simple_query(""Which color is the bag in the top part?"") # crop would include the bag so keep it in the query
    else:
        return bag_patch.simple_query(""Which color is the bag in the top part?"")"
5532909,"What is the weather like, cloudless or maybe rainy?","    image_patch = ImagePatch(image)
    weather_patches = image_patch.find(""rain"")
    # Question assumes one weather patch, if any
    if len(weather_patches) == 0:
        # If no weather is found, query the image directly
        return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")
    if weather_patches[0].simple_query(""Is it raining?"") == ""yes"":
        return ""rainy""
    else:
        return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")"
2618222,What is connected to the open laptop?,"    image_patch = ImagePatch(image)
    open_laptop_patches = image_patch.find(""open laptop"")
    if len(open_laptop_patches) == 0:
        # If no open laptop is found, query the image directly
        return image_patch.simple_query(""What is connected to the open laptop?"")
    open_laptop_patch = open_laptop_patches[0]
    connected_patches = image_patch.find(""laptop charger"")
    if len(connected_patches) > 0:
        return ""charger""
    connected_patches = image_patch.find(""laptop cable"")
    if len(connected_patches) > 0:
        return ""cable""
    connected_patches = image_patch.find(""laptop mouse"")
    if len(connected_patches) > 0:
        return ""mouse""
    connected_patches = image_patch.find(""laptop keyboard"")
    if len(connected_patches) > 0:
        return ""keyboard""
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return open_laptop_patch.simple_query(""What is connected to the open laptop?"")"
3252220,Of which color is the shirt the man wears?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    return man_patches[0].simple_query(""Of which color is the shirt the man wears?"")"
8947801,What is in the vase?,"    image_patch = ImagePatch(image)
    vase_patches = image_patch.find(""vase"")
    # Question assumes only one vase patch
    if len(vase_patches) == 0:
        # If no vase is found, query the image directly
        return image_patch.simple_query(""What is in the vase?"")
    return vase_patches[0].simple_query(""What is in the vase?"")"
10841562,Is the color of the pants the same as the shorts?,"    image_patch = ImagePatch(image)
    shorts_patches = image_patch.find(""shorts"")
    if len(shorts_patches) == 0:
        # If no shorts are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    for shorts_patch in shorts_patches:
        pants_patches = image_patch.find(""pants"")
        for pants_patch in pants_patches:
            if shorts_patch.simple_query(""What is the color of the shorts?"") == pants_patch.simple_query(""What is the color of the pants?""):
                return ""yes""
    return ""no""
"
15511838,What kind of furniture is to the left of the bucket?,"    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) < 2:
        # If there is no bucket to the right, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    bucket_to_the_right = bucket_patches[1]
    bucket_to_the_left = bucket_patches[0]
    return bucket_to_the_left.simple_query(""What kind of furniture is to the left of the bucket?"")"
14495306,Is there any racket to the right of the person that the woman is to the left of?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes one person patch and one woman patch
    if len(person_patches) < 1 or len(woman_patches) < 1:
        # If no person or woman is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    for person_patch in person_patches:
        for woman_patch in woman_patches:
            if person_patch.horizontal_center > woman_patch.horizontal_center:
                return bool_to_yesno(woman_patch.verify_property(""woman"", ""racket to right"")
                                    or (woman_patch.simple_query(""Is the woman holding a racket?"") == ""yes""
                                    and person_patch.simple_query(""Is the person holding a racket?"") == ""yes""))"
14841932,Do the tiles have square shape and black color?,"    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    # Question assumes only one tile patch
    is_square_and_black = []
    for tile_patch in tile_patches:
        is_square = (tile_patch.width == tile_patch.height) and tile_patch.width > 0
        is_black = tile_patch.verify_property(""tile"", ""black"")
        is_square_and_black.append(is_square and is_black)
    return bool_to_yesno(all query
41029381,What is the vehicle that is the same color as the shirt called?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt?"")
    shirt = shirt_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    for vehicle_patch in vehicle_patches:
        is_same_color = (vehicle_patch.simple_query(""What is the color of the vehicle?"") == shirt.simple_query(""What is the color of the shirt?""))
        if is_same_color:
            return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt?"") # crop would include the shirt so keep it in the query
    # If no vehicle is the same color, pick the first vehicle
    return vehicle_patches[0].simple_query(""What is the vehicle that is the same color as the shirt?"")"
161027428,Are there both windows and doors in the image?,"    image_patch = ImagePatch(image)
    doors_and_windows = image_patch.find(""door"") + image_patch.find(""window"")
    # Question assumes that each door or window is a separate patch
    if len(doors_and_windows) < 2:
        # If there are less than 2, query the image directly
        return image_patch.simple_query(""Are there both windows and doors in the image?"")
    else:
        return bool_to_yesno(True) # True because there are at least 2 patches"
16478246,Does the pillow to the right of the man have green color and large size?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch and one pillow patch to the right of the man
    is_green_and_large = ""yes""
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patches[0].horizontal_center:
            is_green_and_large = pillow_patch.verify_property(""pillow"", ""green"")
            is_large = pillow_patch.verify_property(""pillow"", ""large"")
            if is_green_and_large and is_large:
                return bool_to_yesno(is_green_and_large and is_large)
    return bool_to_yesno(is_green_and_large and is_large)"
9450308,Is the happy person wearing a hat?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    return person_patches[0].verify_property(""person"", ""hat"")"
11850389,What place is this?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
17250452,What kind of appliance is on the right of the drawer?,"    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) < 2:
        # If there is no other object to the right of the drawer, query the image directly
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    for drawer_patch in drawer_patches:
        for other_object in image_patch.find(""appliance""):
            if other_object.horizontal_center > drawer_patch.horizontal_center:
                return other_object.simple_query(""What kind of appliance is on the right of the drawer?"")
    # If no other object is to the right of the drawer, query the image directly
    return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")"
14857961,Is the lady to the right of a woman?,"    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    right_patches = image_patch.find(""woman"")
    for lady_patch in lady_patches:
        for right_patch in right_patches:
            if lady_patch.horizontal_center > right_patch.horizontal_center:
                return ""no""
    return bool_to_yesno(any(lady_patch.horizontal_center < right_patch.horizontal_center for lady_patch in lady_patches for right_patch in right_patches))"
132385,What cooking utensils are to the left of the pan on the right side?,"    image_patch = ImagePatch(image)
    right_side_patches = [patch for patch in image_patch.find(""pan"") if patch.horizontal_center > image_patch.width / 2]
    if len(right_side_patches) < 1:
        # If no pan is found on the right, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    right_side_patch = right_side_patches[0]
    left_side_patches = [patch for patch in image_patch.find(""utensil"") if patch.horizontal_center < right_side_patch.horizontal_center]
    for left_side_patch in left_side_patches:
        if left_side_patch.horizontal_center < right_side_patch.horizontal_center / 2:
            return left_side_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    # If no utensil is found to the left of the pan on the right, query the image directly
    return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")"
9745131,Which color is the truck that is to the left of the lamps?,"    truck_patches = ImagePatch(image).find(""truck"")
    lamp_patches = ImagePatch(image).find(""lamp"")
    # Question assumes one truck patch and one lamp patch
    if len(truck_patches) < len(lamp_patches):
        for truck_patch in truck_patches:
            for lamp_patch in lamp_patches:
                if truck_patch.horizontal_center < lamp_patch.horizontal_center:
                    return truck_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    else:
        for lamp_patch in lamp_patches:
            for truck_patch in truck_patches:
                if truck_patch.horizontal_center < lamp_patch.horizontal_center:
                    return truck_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
"
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?,"    image_patch = ImagePatch(image)
    bottom_patches = image_patch.find(""bottom"")
    # Question assumes only one bottom patch
    if len(bottom_patches) == 0:
        # If no bottom is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    bottom_patch = bottom_patches[0]
    bottom_patch_image = bottom_patch.crop(0, 0, bottom_patch.width)
    for object_patches in [image_patch.find(""bird"") for object_name in [""bird"", ""motorcycle""] if object_name not in [""bottom""]]:
        for object_patch in object_patches:
            object_patch_image = object_patch.crop(0, 0, object_patch.width)
            if bottom_patch_image.compareQueryQuery =      #  # compare pixel by pixel, so ask directly  #  # 'if bottom_patch_image.compareQueryQuery(""what is it?"", ""bird""):  #  # 'if bottom_patch_image.compareQueryQuery(""what is it?"", ""bird""):
     #  # 'if bottom_patch_image.compareQueryQuery(""what is it?"", ""bird""):
                #  # 'if bottom_patch_image.compareQueryQuery(""what is it?"", ""bird""):
              #  # 'if bottom_patch_image.compareQueryQuery(""what is it?"", ""bird""):
            # 'if bottom_patch_image.compareQueryQuery(""what is it?"", ""bird""):
            for property in [""red"", ""blue"", ""green"", ""yellow"", ""orange"", ""purple""]:
                if bottom_patch_image.compareQueryQuery =     #  # compare pixel by pixel, so ask directly  #  # 'if bottom_patch_image.compareQueryQuery(""what is it?"", property):  #  # 'if bottom_patch_image.compareQueryQuery(""what is it?"", property):
     #  # 'if bottom_patch_image.compareQueryQuery(""what is it?"", property):
                   #  # 'if bottom_patch_image.compareQueryQuery(""what is it?"", property):
                  #  # 'if bottom_patch_image.compareQueryQuery(""what is it?"", property):
                # 'if bottom_patch_image.compareQueryQuery(""what is it?"", property):
                bottom_patch_image.compareQueryQuery =     #  # compare pixel by pixel, so ask directly  #   # 'def bottom_patch_image.compare"
867818,Is the man on the skateboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    skateboard_patches = image_patch.find(""skboard"")
    # Question assumes one man patch and one skateboard patch
    is_on_board = False
    for man_patch in man_patches:
        for skateboard_patch in skateboard_patches:
            if man_patch.simple_query(""Is the man on the board?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on a skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on the skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on the board of a skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on the skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on the board of a skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on the skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on top of a skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on a skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on the skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on top of a skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on a skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on the board of a skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on a skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on top of a skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on a skateboard?"") == ""yes"":
                is_on_board = True
            if man_patch.simple_query(""Is the man on a skateboard?"") == """
13896221,What is on the table?,"    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    return table_patches[0].simple_query(""What is on the table?"")"
1964517,What is the food that is above the white paper?,"    # asks for the predicate of a relational verb (above), so ask directly
    image_patch = ImagePatch(image)
    white_paper_patches = image_patch.find(""white paper"")
    # Question assumes only one white paper patch
    if len(white_paper_patches) == 0:
        # If no white paper is found, query the image directly
        return image_patch.simple_query(""What is the food that is above the white paper?"")
    white_paper_patch = white_paper_patches[0]
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    for food_patch in food_patches:
        if food_patch.vertical_center > white_paper_patch.vertical_center:
            return food_patch.simple_query(""What is the food that is above the white paper?"")
    # If no food is above the white paper, pick the first one
    return white_paper_patch.simple_query(""What is the food that is above the white paper?"")"
15705231,Is the shelf to the left of a cabinet?,"    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes one shelf patch and one cabinet patch
    for shelf_patch in shelf_patches:
        for cabinet_patch in cabinet_patches:
            if shelf_patch.horizontal_center < cabinet_patch.horizontal_center:
                return ""yes""
    # If no shelf is to the left of a cabinet, query the image directly
    return bool_to_yesno(image_patch.simple_query(""Is the shelf to the left of a cabinet?"") == ""yes"")"
15693846,Is the motorcycle parked on the grass?,"    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Is the motorcycle parked on the grass?"")
    if motorcycle_patches[0].verify_property(""ground"", ""grass""):
        return ""yes""
    else:
        return bool(image query                   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #                                                                                                                                                                                                                                                                                                                                                             "
13872995,Who is jumping?,"    # asks for the predicate of a relational verb (jumping), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it a dog or a cat?"")"
12584623,What is the person with the bag wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    person_patch = person_patches[0]
    what_person_is_wearing = person_patch.simple_query(""What are you wearing?"")
    return what_person_is_wearing # crop would include the bag so keep it in the query"
7202064,"What is this, a bus or a truck?","    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this, a bus or a truck?"")"
16542208,Do you see either any beds or blankets there?,"    image_patch = ImagePatch(image)
    is_bed_or_blanket = image_patch.exists(""bed"") or image_patch.exists(""blanket"") or image_patch.exists(""blankets"") or image_patch.exists(""blanket on bed"")
    return bool_to_yesno(is_bed_or_blanket)"
11700224,Do you see both lettuce and salad?,"    is_lettuce = ImagePatch(image).exists(""lettuce"")
    is_salad = ImagePatch(image).exists(""salad"")
    is_salad_dish = ImagePatch(image).exists(""green salad"")
    is_lettuce_in_salad = ImagePatch(image).exists(""lettuce in salad"")
    is_lettuce_and_salad_together = ImagePatch(image).exists(""lettuce and salad"")
    is_lettuce_and_salad_on_table = ImagePatch(image).exists(""lettuce and salad on table"")
    is_lettuce_and_salad_in_glass = ImagePatch(image).exists(""lettuce and salad in glass"")
    is_lettuce_and_salad_on_plates = ImagePatch(image).exists(""lettuce and salad on plates"")
    is_lettuce_and_salad_together_on_table = ImagePatch(image).exists(""lettuce and salad together on table"")
    is_lettuce_and_salad_together_on_table_and_plates = ImagePatch(image).exists(""lettuce and salad together on table and plates"")
    is_lettuce_and_salad_together_on_table_and_plates_and_glass = ImagePatch(image).exists(""lettuce and salad together on table and plates and glass"")
    is_lettuce_and_salad_together_on_table_and_plates_and_glass_and_other_objects = ImagePatch(image).exists(""lettuce and salad together on table and plates and glass and other objects"")
    is_lettuce_and_salad_together_on_table_and_plates_and_glass_and_other_objects_and_more = ImagePatch(image).exists(""lettuce and salad together on table and plates and glass and other objects and more"")
    is_lettuce_and_salad_together_on_table_and_plates_and_glass_and_other_objects_and_more_and_more = ImagePatch(image).exists(""lettuce and salad together on table and plates and glass and other objects and more and more"")
    is_lettuce_and_salad_together_on_table_and_plates_and_glass_and_other_objects_and_more_and_more_and_more = ImagePatch(image).exists(""lettuce and salad together on table and plates and glass and other objects and more and more and more"")
    is_lettuce_and_salad_together_on_table_and_plates_and_glass_and_other_objects_and_more_and_more_and_more_and_more = ImagePatch(image).exists(""lettuce and salad together on table and plates and glass and other objects and more and more and more and more"")
"
1067136,Is the ball on the tree?,"    ball_patch = ImagePatch(image).find(""ball"")[0]  # assumes one ball patch
    tree_patch = ImagePatch(image).find(""tree"")[0]  # assumes one tree patch
    is_on = ball_patch.verify_property(""ball"", ""tree"")
    return bool_to_yesno(is_on)"
364079,What kind of furniture is to the right of the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket query                     # for   #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  # "
2533062,How large is the ground the zebra is standing on?,"    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    if zebra_patches[0].simple_query(""Is the ground flat?"") == ""yes"":
        return ""small, large, or intermediate, query for area; so, 'small' or 'large' for this one.""  # crop would include the ground so keep it in the query
        # if the ground is flat, query for area; so, 'small' or 'large' for this one.
        # if the ground is flat, query for area; so, 'small' or 'large' for this one.
    else:
        return zebra_patches[0].simple_query(""How large is the ground the zebra is standing on?"")"
19683710,The clock is inside what?,"    image_patch = ImagePatch(image)
    # contains a relation (inside, on, next to, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the clock inside of?"")"
15674863,Is the racket in the top part?,"    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    if racket_patches[0].vertical_center > image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?,"    shirt_patches = ImagePatch(image).find(""shirt"")
    # Question assumes one person wearing a shirt
    if len(shirt_patches) == 0:
        # If no person is found, query the image directly
        return bool_to_yesno(ImagePatch(image).exists(""shirt to the right of the person that is wearing a shirt""))
    shirt = shirt_patches[0]
    person_patches = ImagePatch(image).find(""person"")
    # Question assumes one person
    for person_patch in person_patches:
        if shirt_patches[0].horizontal_center > person_patch.horizontal_center:
            return bool_to_yesno(ImagePatch(image).exists(""shirt to the right of the person that is wearing a shirt""))
    for person_patch in person_patches:
        if shirt_patches[0].horizontal_center < person_patch.horizontal_center:
            shirt_to_right = ImagePatch(image).crop(shirt_patches[0].left, shirt_patches[0].lower, shirt_patches[0].right, shirt_patches[0].upper)
            shirt_to_right_with_person = ImagePatch(image).crop(person_patch.left, person_patch.lower, person_patch.right, person_patch.upper)
            shirt_to_right_with_person_and_board = ImagePatch(image).crop(person_patch.left, person_patch.lower, person_patch.right, person_patch.upper)
            shirt_to_right_with_board = ImagePatch(image).crop(person_patch.left, person_patch.lower, person_patch.right, person_patch.upper)
            shirt_to_right_with_board = shirt_to_right_with_board.find(""board"")
            if len(shirt_to_right_with_board) == 0:
                return bool_to_yesno(ImagePatch(image).exists(""shirt to the right of the person that is wearing a shirt""))
            for shirt_to_right_with_board_patch in shirt_to_right_with_board:
                shirt_to_right_with_board_patch = ImagePatch(image).crop(shirt_to_right_with_board_patch.left, shirt_to_right_with_board_patch.lower, shirt_to_right_with_board_patch.right, shirt_to_right_with_board_patch.upper)
                shirt_to_right_with_person_and_board = ImagePatch(image).crop(person_patch.left, person_patch.lower, person_patch.right, person_patch.upper)
                shirt_to_right_with_person_and_board = shirt_to_right_with_person_and_board.find(""shirt to the right of the person that is wearing a shirt"")
                if len(shirt_to_right_with_person_and_board) == 0:
                    return bool_to_yesno(ImagePatch(image).exists(""shirt to the right of the person that is wearing a shirt""))
"
2292637,What is the color of the shirt that the passenger is wearing?,"    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    return passenger_patches[0].simple_query(""What is the color of the shirt that the passenger is wearing?"")"
9175259,What is the chair made of?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?,"    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    if carrot_patches[0].vertical_center > (image_patch.left + image_patch.right) / 2:
        return carrot_patches[0].simple_query(""How big is the carrot in the top of the picture?"") # crop would include the carrot so keep it in the query
    else:
        return carrot_patches[0].simple_query(""How big is the carrot in the top of the picture?"")"
1638685,What is the name of the vegetable that is on the yellow food?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    yellow_patches = image_patch.find(""yellow food"")
    # Question assumes only one yellow patch
    if len(yellow_patches) == 0:
        # If no yellow is found, query the image directly
        return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    for yellow_patch in yellow_patches:
        is_vegetable = (yellow_patch.simple_query(""Is the yellow food a vegetable?"") == ""yes"")
        if is_vegetable:
            return yellow_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"") # crop would include the yellow food so keep it in the query
    # If no yellow is a vegetable, pick the first yellow patch
    return yellow_patches[0].simple_query(""What is the name of the vegetable that is on the yellow food?"")"
5828256,Is the clock on a tower?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock on a tower?"")
    if clock_patches[0].verify_property(""clock"", ""tower""):
        return ""yes""
    else:
        return image_patch.simple_query(""Is the clock on a tower?"")"
18937563,What kind of animal is orange?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is orange?"")"
14360113,What is the smiling woman holding?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""smiling woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    return woman_patches[0].simple_query(""What is the smiling woman holding?"")"
593188,Is the hair short?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    return person_patches[0].verify_property(""person"", ""short hair"")"
10824666,Are there ladies to the left of the man that is wearing shorts?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is wearing shorts"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    for other_patches in [[image_patch.find(""lady"")] for image_patch in [ImagePatch(image) for image in [image_patch.crop(0,0,man_patch.width,man_patch.height) for image_patch in [ImagePatch(image) for image in [image for x in range(2) for image in [ImagePatch(image) for image in [image for x in range(2) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in [ImagePatch(image) for image in"
1890604,Is the gray car to the left or to the right of the garbage bin?,"    image_patch = ImagePatch(image)
    gray_cars = image_patch.find(""gray car"")
    garbage_bins = image_patch.find(""garbage bin"")
    # Question assumes one garbage bin and one gray car
    if len(gray_cars) < len(garbage_bins):
        for gray_car in gray_cars:
            for bin in garbage_bins:
                if bin.horizontal_center < gray_car.horizontal_center:
                    return ""right""
    else:
        for bin in garbage_bins:
            for gray_car in gray_cars:
                if bin.horizontal_center < gray_car.horizontal_center:
                    return ""left""
    # If no bin or car is found, query the image directly
    return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")"
7574939,Is there any table or plate that is white?,"    is_white_table_or_plate = False
    image_patch = ImagePatch(image)
    for object_patch in image_patch.find(""table"") + image_patch.find(""plate""):
        is_white = object_patch.verify_property(""table or plate"", ""white"")
        if is_white:
            is_white_table_or_plate = True
            break
    if is_white_table_or_plate:
        return ""yes""
    else:
        return bool_to_yesno(image_patch.verify_property(""table or plate"", ""white"") or
                            image_patch.verify_property(""table or plate"", ""white color""))"
12252101,Is it outdoors?,"    image_patch = ImagePatch(image)
    is_outdoors = image_patch.simple_query(""Is it outdoors?"")
    return is_outdoors"
6943442,What cooking utensil is on the oven?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""What cooking utensil is on the oven?"")
    for oven_patch in oven_patches:
        utensil_patches = image_patch.find(""utensil"")
        for utensil_patch in utensil_patches:
            if utensil_patch.horizontal_center > oven_patch.horizontal_center:
                return utensil_patch.simple_query(""What cooking utensil is on the oven?"")
    # If no utensil is found on the other side, query the image directly
    return image_patch.simple_query(""What cooking utensil is on the oven?"")"
2977077,The propeller that looks red is what pattern?,"    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller that looks red"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    return propeller_patches[0].simple_query(""What pattern are you?"")"
11190306,Which kind of animal is to the left of the train?,"    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the left of the train?"")
    for train_patch in train_patches:
        animal_patches = image_patch.find(""rabbit, rat, squirrel, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit, rabbit"
5107190,Do you see both an airplane and a truck?,"    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"")"
12536783,What kind of animal is in front of the pole?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is wearing a t-shirt"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
    return ""right"""
18655269,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it indoors?"")"
1705569,Does the pot on top of the stove look black?,"    pot_on_stove = ImagePatch(image)
    pot_on_stove = pot_on_stove.crop(0, 0, pot_on_stove.width // 2, pot_on_stove.height // 2)  # crop to top of stove
    pot_on_stove = ImagePatch(image)
    pot_on_stove = pot_on_stove.crop(0, pot_on_stove.height // 2, pot_on_stove.width, pot_on_stove.height)  # crop to pot
    pot_on_stove = ImagePatch(image)
    pot_on_stove = pot_on_stove.crop(0, 0, pot_on_stove.width, pot_on_stove.height // 2)  # crop to top of pot
    pot_on_stove = ImagePatch(image)
    pot_on_stove = pot_on_stove.crop(0, pot_on_stove.height // 2, pot_on_stove.width, pot_on_stove.height)  # crop to pot
    pot_on_stove = ImagePatch(image)
    pot_on_stove = pot_on_stove.crop(0, 0, pot_on_stove.width, pot_on_stove.height // 2)  # crop to top of pot
    pot_on_stove = ImagePatch(image, pot_on_stove.width, 0, pot_on_stove.width, pot_on_stove.height)  # crop to pot
    pot_on_stove = ImagePatch(image)
    pot_on_stove = pot_on_stove.crop(0, pot_on_stove.height // 2, pot_on_stove.width, pot_on_stove.height)  # crop to pot
    pot_on_stove = ImagePatch(image, pot_on_stove.width, pot_on_stove.height // 2, pot_on_stove.width, pot_on_stove.height)  # crop to pot
    pot_on_stove = ImagePatch(image)
    pot_on_stove = pot_on_stove.crop(0, 0, pot_on_stove.width, pot_on_stove.height // 2)  # crop to top of pot
    pot_on_stove = ImagePatch(image, pot_on_stove.width, pot_on_stove.height // 2, pot_on_stove.width, pot_on_stove.height)  # crop to pot
    pot_on_stove = ImagePatch(image)
    pot_on_stove = pot_on_stove.crop(0, pot_on_stove.height // 2,"
1028569,Are there both a cyclist and a helmet in the photo?,"    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    is_both = image_patch.exists(""cyclist with helmet"")
    # If there is a cyclist, check if there is a helmet
    if is_cyclist and is_helmet query
13954115,Are there any men to the left of the person in the crowd?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person in the crowd"")
    # Question assumes only one person patch
    if len(person_patches) < 2:
        # If there is no person in the crowd, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    for person_patch in person_patches:
        for other_person_patch in person_patches:
            if person_patch.horizontal_center > other_person_patch.horizontal_center:
                if other_person_patch.exists(""man""):
                    return bool_to_yesno(other_person_patch.exists(""man""))
    # If no person to the left, query the image directly
    return bool_to_yesno(image_patch.exists(""man""))"
12436797,What kind of device is to the left of the keyboard?,"    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    for keyboard_patch in keyboard_patches:
        device_patches = image_patch.find(""mouse"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < keyboard_patch.horizontal_center:
                return device_patch.simple_query(""What kind of device is to the left of the keyboard?"")
        device_patches = image_patch.find(""laptop"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < keyboard_patch.horizontal_center:
                return device_patch.simple_query(""What kind of device is to the left of the keyboard?"")
        device_patches = image_patch.find(""phone"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < keyboard_patch.horizontal_center:
                return device_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    # If no devices are found to the left of the keyboard, query the image directly
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")"
1017626,Who is inside the train?,"    image_patch = ImagePatch(image)
    # contains a relation (inside), so ask directly
    return image_patch.simple_query(""Who is inside the train?"")"
7650014,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?,"    # asks for the predicate of a relational verb (left of), so ask directly
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    left_of_car_patches = image_patch.find(""car"")
    # Question assumes one person patch and one left of car patch
    for person_patch in person_patches:
        for left_of_car_patch in left_of_car_patches:
            if person_patch.horizontal_center < left_of_car_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the left of the car doing?"")
    # If no person is to the left of a car, query the image directly
    return image_patch.simple_query(""What is the person to the left of the car doing?"")"
1310985,Is the yellow vehicle to the left of a lamp?,"    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    lamp_patches = image_patch.find(""lamp"")
    is_to_left = False
    for yellow_vehicle_patch in yellow_vehicle_patches:
        for lamp_patch in lamp_patches:
            if yellow Vehicle      # 'image Patch' and 'left' for a correct method name    #  ,   #  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  ,  , "
646935,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
9495263,Is the woman to the left or to the right of the man that wears a cap?,"    image_patch = ImagePatch(image)
    man_patches_with_cap = image_patch.find(""man that wears a cap"")
    # Question assumes only one man patch with cap
    if len(man_patches_with_cap) == 0:
        # If no man is found that wears a cap, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    man_patch_with_cap = man_patches_with_cap[0]
    woman_patches = image_patch.find(""woman"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < man_patch_with_cap.horizontal_center:
            return ""left""
    return ""right"""
946016,Do you think the animal that is sitting-down is small or large?,"    image_patch = ImagePatch(image)
    sitting_patches = image_patch.find(""sitting"")
    # Question assumes only one sitting patch
    if len(sitting_patches) == 0:
        # If no sitting is found, query the image directly
        return image_patch.simple_query(""Is the animal that is sitting-down small or large?"")
    for sitting_patch in sitting_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if sitting_patch.horizontal_center > animal_patch.horizontal_center:
                return sitting_patch.simple_query(""Is the animal that is sitting-down small or large?"") # crop would include sitting so keep it in the query
    # If no animal is sitting, query the image directly
    return sitting_patches[0].simple_query(""Is the animal that is sitting-down small or large?"")"
9617920,Do the garbage can and the pan have the same color?,"    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    if len(garbage_can_patches) < 2:
        # If there is not two objects, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    for garbage_can_patch in garbage_can_patches:
        for other_object in garbage_can_patches:
            if garbage_can_patch != other_object:
                is_same_color = (garbage_can_patch.verify_property(""garbage can"", ""red, green, blue, gray, black, white"") or
                                 garbage_can_patch.verify_property(""pan"", ""red, green, blue, gray, black, white""))
                if is_same_color:
                    return ""yes""
    return ""no""
"
3578781,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    # Question assumes only one black patch, which is a property of the item (color)
    if len(black_patches) == 0:
        # If no black is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return black_patches[0].simple_query(""Which kind of clothing is black?"")"
4695656,What is the lamp on?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What is the lamp on?"")
    return lamp_patches[0].simple_query(""What is the lamp on?"")"
13696926,The homes that are to the left of the people have what color?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    homes_patches = image_patch.find(""home"")
    people_patches = image_patch.find(""person"")
    # Question assumes one home patch and one people patch
    if len(homes_patches) < len(people_patches):
        # If there are more people than homes, query the image directly
        return image_patch.simple_query(""What color are the homes that are to the left of the people?"")
    for home_patch in homes_patches:
        for people_patch in people_patches:
            if home_patch.horizontal_center < people_patch.horizontal_center:
                return home_patch.simple_query(""What color is the home?"") # crop would include the home so keep it in the query
    # If no home is to the left of a people, query the image directly
    return image_patch.simple_query(""What color are the homes that are to the left of the people?"")"
16946079,What is on the wall?,"    image_patch = ImagePatch(image)
    wall_patches = image_patch.find(""wall"")
    # Question assumes only one wall patch, which is the image itself
    if len(wall_patches) == 0:
        # If no wall is found, query the image directly
        return image_patch.simple_query(""What is on the wall?"")
    return wall_patches[0].simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    if napkin_patches[0].horizontal_center > (image_patch.horizontal_center + (image_patch.width / 2)):
        return ""yes""
    else:
        return ""no"""
11513897,What appliance is the label on?,"    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    # Question assumes only one label patch
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    if label_patches[0].simple_query(""Is the label on a refrigerator?"") == ""yes"":
        return ""refrigerator""
    elif label_patches[0].simple_query(""Is the label on a dishwasher?"") == ""yes"":
        return ""dishwasher""
    elif label_patches[0].simple_query(""Is the label on a washing machine?"") == ""yes"":
        return ""washing machine""
    elif label_patches[0].simple_query(""Is the label on a stove?"") == ""yes"":
        return ""stove""
    else:
        return label_patches[0].simple_query(""What appliance is the label on?"")"
8240644,What is the color of the bird's tail?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    # crop would include the tail so keep it in the query
    return bird_patch.simple_query(""What is the color of the bird's tail?"")"
5245080,Is he to the right or to the left of the camera?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    if person_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17800894,Are there both a window and a door in the picture?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    window_patches = image_patch.find(""window"")
    door_or_window_patches = door_patches + window_patches
    # Question assumes at least one door or window
    if len(door_or_window_patches) < 2:
        # If there is only one door or window, query the image directly
        return image_patch.simple_query(""Are there both a window and a door in the picture?"")
    for door_or_window_patch in door_or_window_patches:
        for other_patch in door_or_window_patches:
            if door_or_window_patch != other_patch:
                if door_or_window_patch.horizontal_center < other_patch.horizontal_center:
                    return ""yes""
    return ""no""
"
191027873,Where is the snowboard?,"    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Where is the snowboard?"")
    if snowboard_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""
    else:
        return ""right"" # or right, since it's a horizontal axis
    # or ""bottom"", ""top"" if vertical axis, ""left"", ""right"" if horizontal axis
    # or ""front"", ""back"" if depth axis
    # or ""near"", ""far"" if another type of axis
    # or ""up"", ""down"" if another type of axis
    # or ""on"", ""off"" if another type of axis
    # or ""over"", ""under"" if another type of axis
    # or ""between"" if another type of axis
    # or ""around"" if another type of axis
    # or ""through"" if another type of axis
    # or ""from"" if another type of axis
    # or ""to"" if another type of axis
    # or ""on top of"" if another type of axis
    # or ""underground"" if another type of axis
    # or ""water"" if another type of axis
    # or ""air"" if another type of axis
    # or ""road"" if another type of axis
    # or ""forest"" if another type of axis
    # or ""city"" if another type of axis
    # or ""park"" if another type of axis
    # or ""home"" if another type of axis
    # or ""work"" if another type of axis
    # or ""school"" if another type of axis
    # or ""field"" if another type of axis
    # or ""trail"" if another type of axis
    # or ""hill"" if another type of axis
    # or ""mountain"" if another type of axis
    # or ""plain"" if another type of axis
    # or ""river"" if another type of axis
    # or ""lake"" if another type of axis
    # or ""ocean"" if another type of axis
    # or ""tree"" if another type of axis
    #"
1964079,Are the box and the paper the same color?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    if len(box_patches) < 2:
        # If there is no second box, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    for box_patch1 in box_patches:
        for box_patch2 in box_patches:
            if box_patch1 != box_patch2:
                is_same_color = (box_patch1.simple_query(""What is the color of the box?"") == box_patch2.simple_query(""What is the color of the box?""))
                return bool_to_yesno(is_same_color)
    # If no second box is found, query the image directly
    return image_patch.simple_query(""Are the box and the paper the same color?"")"
