sample_id,query,generated_code
13151559,Is the large hair both white and soft?,"def execute_command(image):
    image_patch = Image Patch(image)
    hair_patches = image_patch find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch_simple_query(""Is the large hair both white and soft?"", ""white"", ""soft"")
    if hair_patches[0].verify_property(""hair"", ""white"") and hair_patches[0].verify_property(""hair"", ""soft""):
        return ""yes""
    return ""no""

# Is the boy on the left or on the right?
def execute_command(image):
    image_patch = Image Patch image)
    boy_patches = image_patch find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch_simple_query(""Is the boy on the left or on the right?"", ""left"", ""right"")
    if boy_patches[0].horizontal_center < image_patch horizontal_center:
        return ""left""
    else:
        return ""right""

# Is the boy on the left or on the right?
def execute_command():
    image_patch = image_patch find("" boy"")
    # Question assumes only one boy patch
    if len( boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch simple query(""Is the boy on the left or on the right?"", ""left"", ""right"")
    if boy_patches[0].horizontal_center < image_patch horizontal center:
        return ""left""
    else:
        return ""right"")

# Is the boy on the left or on the right?
def execute_command():
    image_patch = image_patch find("" boy"")
    # Question assumes only one boy patch
    if len( boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch simple query(""Is the boy on the left or on the right?"", ""left"", ""right"")
    if boy_patches[0].horizontal center < image_patch horizontal center:
        return ""left""
    else:
        return ""right"")

# Is the boy on the left or on the right?
def execute command():
    image_patch = image patch find("" boy"")
    # Question assumes only one boy patch
    if len( boy_patches) == 0:
        # If no boy is found"
18370956,Who is eating the cupcake?,"def execute_command(image):
    image_patch = Image Patch(image)
    return image_patch简单 query(""Who is eating the cupcake?""}

# Is the cat on the table?
def execute_command():
    image_patch = Image Patch()
    return image_patch简单 query(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute_command():
    image_patch = Image Patch()
    return image_patch simple query(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute_command():
    image_patch = Image Patch()
    return image_patch simple query(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute_command():
    image_patch = Image Patch()
    return image Patch simple query(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute command():
    image patch = image patch()
    return image patch simple query(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute command():
    image patch = image patch()
    return image patch simple query(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute command():
    image patch = image patch()
    return image patch simple query(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute command():
    image patch = image patch()
    return image patch simple query(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute command():
    image patch = image patch()
    return image patch simple query(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute command():
    image patch = image patch()
    return image patch simple query(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute command():
    image patch = image patch()
    return image patch simple query(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute command():
    image patch = image patch()
    return image patch simple duty(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute command():
    image patch = image patch()
    return image patch simple duty(""Is the cat on the table?"", ""on"")

# Is the cat on the table?
def execute command():
    image patch ="
6436809,What is the guy wearing?,"def execute_command(image')->str:
    image_patch = Image Patch(image)
    return image_patch简单 query(""What is the guy wearing?"")

# Is the boy on the left or on the right?
def execute_command(image')->str:
    image_patch = Image Patch(image)
    boy_patches = image_patch find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch simple query(""Is the boy on the left or on the right?"")

    if boy_patches[0].horizontal_center < image_patch horizontal center:
        return ""left""
    else:
        return ""right""

# Is the boy on the left or on the right?
def execute_command(image')->str:
    image_patch = Image Patch(image)
    boy_patches = image_patch find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch simple query(""Is the boy on the left or on the right?"")

    if boy_patches[0].horizontal center < image_patch horizontal center:
        return ""left""
    else:
        return ""right"")

# Is the boy on the left or on the right?
def execute_command(image')->str:
    image_patch = Image Patch(image)
    boy_patches = image_patch find(""boy"")
    # Question assumes only one boy patch
    if len( boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch simple query(""Is the boy on the left or on the right?"")

    if boy_patches[0].horizontal center < image_patch horizontal center:
        return ""left""
    else:
        return ""right"")

# Is the boy on the left or on the right?
def execute_command(image')->str:
    image_patch = Image Patch(image)
    boy_patches = image_patch find("" boy"")
    # Question assumes only one boy patch
    if len( boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch simple query(""Is the boy on the left or on the right?"")

    if boy_patches[0].horizontal center < image_patch horizontal center:
        return ""left""
    else:
        return ""right"")

# Is the boy on the left or on the right?
def execute command"
117037,Which kind of food is to the right of the cabbage?,"def execute_command(image')->str:
    image_patch = Image Patch(image)
    cabbage_patches = image_patch find(""cabbage"")
    # Question assumes only one cabbage patch
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch_simple_query(""Which kind of food is to the right of the cabbage?"", ""cabbage"")
    for cabbage_patch in cabbage_patches:
        food_patches = image_patch find(""food"")
        for food_patch in food_patches:
            if food_patch horizontal center > cabbage_patch horizontal center:
                return food_patch simple query(""Which kind of food is to the right of the cabbage?"", ""cabbage"")
    return ""no""

# Is the book on top of the table?
def execute_command(image')->str:
    image_patch = Image Patch image)
    table_patches = image_patch find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch simple query(""Is the book on top of the table?"", ""table"")
    for table_patch in table_patches:
        book_patches = image_patch find(""book"")
        for book_patch in book_patches:
            if book_patch vertical center > table_patch vertical center:
                return ""yes""
    return ""no""

# Is the book on top of the table?
def execute_command(image')->str:
    image_patch = Image Patch image)
    table_patches = image_patch find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch simple query(""Is the book on top of the table?"", ""table"")
    for table_patch in table_patches:
        book_patches = image_patch find(""book"")
        for book_patch in book_patches:
            if book_patch vertical center > table_patch vertical center:
                return ""yes""
    return ""no""

# Is the book on top of the table?
def execute_command(image')->str:
    image_patch = Image Patch image)
    table_patches = image_patch find(""table"")
    # Question assumes only one table patch
    if len table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch simple query(""Is the book on top of the table?"", ""table"")
    for table patch in table patches:
        book"
758936,Who wears the cap?,"def execute_command(image')->str:
    image_patch = Image Patch(image)
    return image_patch简单 query(""Who wears the cap?"")

# Is the cat black or white?
def execute_command(image')->str:
    image_patch = Image Patch(image)
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch simple query(""Is the cat black or white?"", [""black"", ""white""])
    return cat_patches[0].best_text_match(['black', ""white""])

# Is the table round or square?
def execute_command(image')->str:
    image_patch = Image Patch image)
    table_patches = image_patch find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch simple query(""Is the table round or square?"", [""round"", ""square""])
    return table_patches[0].best_text_match(['round', ""square""])

# Is the table round or square?
def execute_command(image')->str:
    image_patch = Image Patch image)
    table_patches = image_patch find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch simple query(""Is the table round or square?"", [""round"", ""square""])
    return table_patches[0].best_text_match(['round', ""square""])

# Is the table round or square?
def execute_command(image')->str:
    image_patch = Image Patch image)
    table_patches = image_patch find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch simple query(""Is the table round or square?"", [""round"", ""square""])
    return table_patches[0].best_text match ['round', ""square)])

# Is the table round or square?
def execute_command(image')->str:
    image_patch = image Patch image)
    table_patches = image_patch find(""table"")
    # Question assumes only one table patch
    if len table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch simple query(""Is the table round or square?"", ["""
111046440,Who is pointing?,"def execute_command(image')->str:
    image_patch = Image Patch(image)
    return image_patch简单 query(""Who is pointing?"")

# Is the cat black or white?
def execute_command(image')->str:
    image_patch = Image Patch(image)
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch simple query(""Is the cat black or white?"", [""black"", ""white""])
    return cat_patches[0].best_text_match(['black', ""white""])

# Is the cat black or white?
def execute_command(image')->str:
    image_patch = Image Patch(image)
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch simple query(""Is the cat black or white?"", [""black"", ""white""])
    return cat_patches[0].best_text_match(['black', ""white""])

# Is the cat black or white?
def execute_command(image')->str:
    image_patch = Image Patch(image)
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch simple query(""Is the cat black or white?"", [""black"", ""white""])
    return cat_patches[0].best_text match(['black', ""white""])

# Is the cat black or white?
def execute_command(image')->str:
    image_patch = Image Patch(image)
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch simple query(""Is the cat black or white?"", [""black"", ""white)])
    return cat_patches[0].besttext match(['black', ""white)])

# Is the cat black or white?
def execute command image')->str:
    image_patch = image patch image)
    cat_patches = image patch find(""cat"")
    # Question assumes only one cat patch
    if len cat_patches) == 0:
        # If no cat is found, query the image directly
        return image patch simple query(""Is the cat black or white?"", [""black"
15804389,Is the woman's hair short or long?,"def execute_command(image):
    image_patch = Image Patch(image)
    hair_patches = image_patch find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch_simple_query(""Is the woman's hair short or long?"", ""short"")
    if hair_patches[0].horizontal_center < image_patch horizontal_center:
        return ""short""
    else:
        return ""long""

# Is the cat black or white?
def execute_command():
    image_patch = Image Patch()
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        return image_patch simple query(""Is the cat black or white?"", ""black"")
    if cat_patches[0].horizontal_center < image_patch horizontal_center:
        return ""black""
    else:
        return ""white""

# Is the cat black or white?
def execute_command():
    image_patch = Image Patch()
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        return image_patch simple query(""Is the cat black or white?"", ""black"")
    if cat_patches[0].horizontal_center < image_patch horizontal center:
        return ""black""
    else:
        return ""white""

# Is the cat black or white?
def execute_command():
    image_patch = Image Patch()
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len cat_patches) == 0:
        return image_patch simple query(""Is the cat black or white?"", ""black"")
    if cat_patches[0].horizontal center < image_patch horizontal center:
        return ""black""
    else:
        return ""white""

# Is the cat black or white?
def execute command():
    image_patch = image patch()
    cat_patches = image patch find(""cat"")
    # Question assumes only one cat patch
    if len cat_patches) == 0:
        return image patch simple query(""Is the cat black or white?"", ""black"")
    if cat_patches[0].horizontal center < image patch horizontal center:
        return ""black""
    else:
        return ""white"")

# Is the cat black or white?
def execute command():
    image patch = image patch()
    cat patches = image patch find(""cat"")
    # Question assumes only one cat patch"
11445636,The women are watching who?,"def execute_command(image')->str:
    image_patch = Image Patch(image)
    return image_patch简单 query(""The women are watching who?"")

# Is the cat black or white?
def execute_command(image')->str:
    image_patch = Image Patch image)
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch simple query(""Is the cat black or white?"", [""black"", ""white""])
    return cat_patches[0].best_text_match [""black"", ""white""]

# Is the cat black or white?
def execute_command(image')->str:
    image_patch = Image Patch image)
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch simple query(""Is the cat black or white?"", [""black"", ""white""])
    return cat_patches[0].best_text_match [""black"", ""white""]

# Is the cat black or white?
def execute_command(image')->str:
    image_patch = Image Patch image)
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch simple query(""Is the cat black or white?"", [""black"", ""white""])
    return cat_patches[0].besttext match [""black"", ""white""]

# Is the cat black or white?
def execute command image')->str:
    image_patch = image Patch image)
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch simple query(""Is the cat black or white?"", [""black"", ""white])
    return cat_patches[0].besttext match [""black"", ""white""]

# Is the cat black or white?
def execute command image')->str:
    image_patch = image Patch image)
    cat_patches = image_patch find(""cat"")
    # Question assumes only one cat patch
    if len cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch simple query(""Is the cat black or white?"","
