sample_id,query,generated_code
13151559,Is the large hair both white and soft?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    large_hair_patches = image_patch.find(""large hair"")
    # Question assumes only one large hair patch
    if len(large_hair_patches) == 0:
        # If no large hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    for large_hair_patch in large_hair_patches:
        is_white = large_hair_patch.verify_property(""large hair"", ""white"")
        is_soft = large_hair_patch.verify_property(""large hair"", ""soft"")
        return bool_to_yesno(is_white and is_soft)"
18370956,Who is eating the cupcake?," # cupcake is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is eating the cupcake?"")"
6436809,What is the guy wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the guy wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What is the guy wearing?"") # crop would include the shirt so keep it in the query"
117037,Which kind of food is to the right of the cabbage?," # cabbage is the object, food is the property
    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    # Question assumes only one cabbage patch
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    for cabbage_patch in cabbage_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center > cabbage_patch.horizontal_center:
                return food_patch.simple_query(""Which kind of food is to the right of the cabbage?"") # crop would include the food so keep it in the query
    # If no food is to the right of the cabbage, pick the first food
    return food_patches[0].simple_query(""Which kind of food is to the right of the cabbage?"")"
758936,Who wears the cap?," # cap is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who wears the cap?"")"
111046440,Who is pointing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is pointing?"")
    for person_patch in person_patches:
        is_pointing = (person_patch.simple_query(""Is the person pointing?"") == ""yes"")
        if is_pointing:
            return person_patch.simple_query(""Who is pointing?"") # crop would include the pointing so keep it in the query
    # If no person is pointing, pick the first person
    return person_patches[0].simple_query(""Who is pointing?"")"
15804389,Is the woman's hair short or long?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    return hair_patches[0].simple_query(""Is the woman's hair short or long?"")"
11445636,The women are watching who?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(women_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""The women are watching who?"")
    for woman_patch in women_patches:
        return woman_patch.simple_query(""The women are watching who?"") # crop would include the shirt so keep it in the query"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    dishwasher_patches = image_patch.find(""dishwasher"")
    # Question assumes only one dishwasher patch
    if len(dishwasher_patches) == 0:
        # If no dishwasher is found, query the image directly
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    for dishwasher_patch in dishwasher_patches:
        if dishwasher_patch.verify_property(""dishwasher"", ""white"") == False:
            return ""no""
    gas_stove_patches = image_patch.find(""gas stove"")
    # Question assumes only one gas stove patch
    if len(gas_stove_patches) == 0:
        # If no gas stove is found, query the image directly
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    for gas_stove_patch in gas_stove_patches:
        if gas_stove_patch.verify_property(""gas stove"", ""white"") == False:
            return ""no""
    return ""yes"""
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")"
758958,Is there either any red pillow or snowboard?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)"
143816,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?," # knife is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which side is the knife on?"")"
17829769,What is the computer mouse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the toddler holding?"")"
2951242,Is the gray shirt sleeveless or short sleeved?," # gray shirt is the first shirt patch
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    if shirt_patches[0].verify_property(""shirts"", ""gray"") == False:
        return ""no""
    if shirt_patches[0].verify_property(""shirts"", ""sleeveless"") == True:
        return ""sleeveless""
    if shirt_patches[0].verify_property(""shirts"", ""short sleeved"") == True:
        return ""short sleeved""
    return ""no"""
15241795,Is the tank top red?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""tank top"", ""red"")"
13885234,Which kind of animal is in front of the rocks?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    grapes_patches = image_patch.find(""grapes"")
    # Question assumes only one grapes patch
    if len(grapes_patches) == 0:
        # If no grapes are found, query the image directly
        return image_patch.simple_query(""Do you see any grapes?"")
    return ""yes"""
6455591,What type of furniture is white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What type of furniture is white?"") # crop would include the white so keep it in the query
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""What type of furniture is white?"")"
1033761,What is the blue clothing item?," # blue clothing item
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""blue""):
            return clothing_patch.simple_query(""What is the blue clothing item?"") # crop would include the blue so keep it in the query
    # If no blue clothing is found, pick the first clothing
    return clothing_patches[0].simple_query(""What is the blue clothing item?"")"
17726504,Who is wearing the glasses?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        is_wearing_glasses = (person_patch.simple_query(""Is the person wearing glasses?"") == ""yes"")
        if is_wearing_glasses:
            return person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no person is wearing glasses, pick the first person
    return person_patches[0].simple_query(""Who is wearing the glasses?"")"
13112902,Is the woman wearing a bracelet?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    for woman_patch in woman_patches:
        is_wearing_bracelet = (woman_patch.simple_query(""Is the woman wearing a bracelet?"") == ""yes"")
        if is_wearing_bracelet:
            return woman_patch.simple_query(""Is the woman wearing a bracelet?"") # crop would include the bracelet so keep it in the query
    # If no woman is wearing a bracelet, pick the first woman
    return woman_patches[0].simple_query(""Is the woman wearing a bracelet?"")"
698766,What is the food that is not white?," # crop would include the food so keep it in the query
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        if food_patch.verify_property(""food"", ""white"") == False:
            return food_patch.simple_query(""What is the food that is not white?"") # crop would include the food so keep it in the query
    # If no food is not white, pick the first food
    return food_patches[0].simple_query(""What is the food that is not white?"")"
1332276,Are there both a cup and a bottle in the picture?," # cup and bottle are not relational verbs, so ask directly
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for person_patch in person_patches:
        is_holding_helmet = (person_patch.simple_query(""Is the person holding the helmet?"") == ""yes"")
        if is_holding_helmet:
            return person_patch.simple_query(""Who is holding the helmet?"") # crop would include the helmet so keep it in the query
    # If no person is holding a helmet, pick the first person
    return person_patches[0].simple_query(""Who is holding the helmet?"")"
2143247,What is the name of the food to the left of the donut that looks little?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")"
3767951,Is the clock to the right or to the left of the man on the left?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    for clock_patch in clock_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            # If no man is found, query the image directly
            return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
        man_patch = man_patches[0]
        if clock_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
17655180,What's the sticker on?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    for car_patch in car_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center > car_patch.horizontal_center:
                return ""yes""
    return ""no"""
7188981,Does the giraffe look adult?," # adult is a property
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return giraffe_patches[0].verify_property(""giraffe"", ""adult"")"
16852802,Of what color are the pants?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"")"
9619158,What kind of watercraft is full of men?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    for watercraft_patch in watercraft_patches:
        is_full_of_men = (watercraft_patch.simple_query(""Is the watercraft full of men?"") == ""yes"")
        if is_full_of_men:
            return watercraft_patch.simple_query(""What kind of watercraft is full of men?"") # crop would include the men so keep it in the query
    # If no watercraft is full of men, pick the first watercraft
    return watercraft_patches[0].simple_query(""What kind of watercraft is full of men?"")"
3625225,On which side of the picture are the boats?," # left or right
    image_patch = ImagePatch(image)
    boats_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boats_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    if boats_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?," # elephant is a relation, so ask directly
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_elephant_patch = elephant_patches[0]
    right_elephant_patch = elephant_patches[1]
    return bool_to_yesno(left_elephant_patch.verify_property(""elephant"", ""size"") == ""large"")"
19834124,What is the girl holding?," # girl is a predicate, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the girl holding?"")"
4617704,Does the toilet seat that is not down appear to be white and open?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")"
5899539,Are there any bottles or mugs that are not purple?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_mug = image_patch.exists(""mug"")
    is_purple = image_patch.exists(""purple"")
    return bool_to_yesno(is_bottle or is_mug) and image_patch.verify_property(""bottle or mug"", ""purple"") == False"
2631593,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    for person_patch in person_patches:
        if person_patch.vertical_center < image_patch.vertical_center:
            # If the person is not in the living room, query the image directly
            return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
        men_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(men_patches) == 0:
            # If no man is found, query the image directly
            return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
        for man_patch in men_patches:
            if man_patch.horizontal_center > person_patch.horizontal_center:
                return ""yes""
    return ""no"""
111054378,Is the small couch to the right or to the left of the bottle?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""small couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    for couch_patch in couch_patches:
        bottle_patches = image_patch.find(""bottle"")
        for bottle_patch in bottle_patches:
            if couch_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""right""
            elif couch_patch.horizontal_center < bottle_patch.horizontal_center:
                return ""left""
    return ""no"""
9392411,Is the bottle to the right or to the left of the appliance on the left?," # bottle is the object, appliance is the property
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    for bottle_patch in bottle_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center < image_patch.horizontal_center:
                if bottle_patch.horizontal_center > appliance_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""no"""
16753829,What type of animal is sitting in the container in the bottom of the photo?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")"
1345482,What is that train in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")"
459445,In which part is the silver device?," # silver device is a spoon
    image_patch = ImagePatch(image)
    silver_patches = image_patch.find(""silver"")
    # Question assumes only one silver patch
    if len(silver_patches) == 0:
        # If no silver is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if silver_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11786203,What is the man on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man on?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What is the man on?"") # crop would include the object so keep it in the query"
5200013,Is there a brown door or chair?," # image_patch = ImagePatch(image)
    brown_door_patches = image_patch.find(""brown door"")
    brown_chair_patches = image_patch.find(""brown chair"")
    # Question assumes only one brown door patch and one brown chair patch
    if len(brown_door_patches) == 0 and len(brown_chair_patches) == 0:
        # If no brown door or chair is found, query the image directly
        return image_patch.simple_query(""Is there a brown door or chair?"")
    if len(brown_door_patches) == 0:
        return ""yes"" if len(brown_chair_patches) == 1 else ""no""
    if len(brown_chair_patches) == 0:
        return ""yes"" if len(brown_door_patches) == 1 else ""no""
    return ""yes"""
131031372,What is the napkin in?," # crop would include the napkin so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the napkin in?"")"
1241681,Are there any people behind the white dessert?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there any people behind the white dessert?"")"
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")"
8553578,What is the Pikachu doing?," # Pikachu is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the large mountains?"")"
5107295,What is in the sky?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?," # fruit is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of watercraft is the fruit on?"")"
1827218,Is the bottle in the bottom of the image?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    if bottle_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
10938155,What color is the sky?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    return sail_patches[0].best_text_match([""white"", ""red""])"
3662784,Do you see either any traffic lights or cars?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see either any traffic lights or cars?"")"
15515711,Are there any girls to the right of the yellow helmet?," # yellow is a property
    image_patch = ImagePatch(image)
    yellow_patches = image_patch.find(""yellow"")
    # Question assumes only one yellow patch
    if len(yellow_patches) == 0:
        # If no yellow is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    for yellow_patch in yellow_patches:
        helmet_patches = image_patch.find(""helmet"")
        for helmet_patch in helmet_patches:
            if helmet_patch.horizontal_center > yellow_patch.horizontal_center:
                girl_patches = image_patch.find(""girl"")
                for girl_patch in girl_patches:
                    if girl_patch.horizontal_center > yellow_patch.horizontal_center:
                        return ""yes""
    return ""no"""
6315316,Which kind of furniture is in front of the window?," # window is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What appliance is to the left of the faucet?"")"
41050828,What is the color of the jacket?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"")"
610914,Is the green boat to the right or to the left of the wood house?," # green boat, wood house
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""green boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    for boat_patch in boat_patches:
        house_patches = image_patch.find(""wood house"")
        for house_patch in house_patches:
            if boat_patch.horizontal_center > house_patch.horizontal_center:
                return ""right""
            elif boat_patch.horizontal_center < house_patch.horizontal_center:
                return ""left""
    return ""no"""
13158346,Is the woman in the bottom part of the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""woman"", ""bottom part of the picture""))"
16318707,Are there either any colorful bikes or skateboards?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_bike = image_patch.exists(""bikes"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_bike or is_skateboard)"
2805654,Is the bag to the right or to the left of the bench?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    for bag_patch in bag_patches:
        bench_patches = image_patch.find(""bench"")
        for bench_patch in bench_patches:
            if bag_patch.horizontal_center > bench_patch.horizontal_center:
                return ""right""
            elif bag_patch.horizontal_center < bench_patch.horizontal_center:
                return ""left""
    return ""no"""
15315607,What do you think is in the sky?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What color is the truck near the gas station?"")"
12140940,"What are the headphones on, a sofa or a desk?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")"
727533,Does the bun look brown and toasted?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    return bool_to_yesno(bun_patches[0].verify_property(""bun"", ""brown and toasted""))"
61044602,What is in the brown basket?," # brown basket is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the brown basket?"")"
16827204,Is the marker different in color than the paper?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    for marker_patch in marker_patches:
        paper_patches = image_patch.find(""paper"")
        for paper_patch in paper_patches:
            if marker_patch.verify_property(""marker"", ""color"") != paper_patch.verify_property(""paper"", ""color""):
                return ""yes""
    return ""no"""
1284539,Is there a racket to the right of the man on the right side?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")"
1257391,What place is this?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What place is this?"")"
16223517,What do you think is the color of the large device?," # crop would include the device so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the color of the large device?"")"
1024280,Does the shirt look long sleeved or sleeveless?," # shirt is the object, long sleeved is the property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    for shirt_patch in shirt_patches:
        return shirt_patch.verify_property(""shirt"", ""long sleeved"")"
2769463,Which kind of animal is lying in the chair?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""lying in the chair""):
            return animal_patch.simple_query(""Which kind of animal is lying in the chair?"") # crop would include the chair so keep it in the query
    # If no animal is lying in the chair, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?," # crate, white box, chair
    image_patch = ImagePatch(image)
    crate_patches = image_patch.find(""crate"")
    # Question assumes only one crate patch
    if len(crate_patches) == 0:
        # If no crate is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    for crate_patch in crate_patches:
        white_box_patches = image_patch.find(""white box"")
        # Question assumes only one white box patch
        if len(white_box_patches) == 0:
            # If no white box is found, query the image directly
            return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
        for white_box_patch in white_box_patches:
            chair_patches = image_patch.find(""chair"")
            # Question assumes only one chair patch
            if len(chair_patches) == 0:
                # If no chair is found, query the image directly
                return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
            for chair_patch in chair_patches:
                if white_box_patch.horizontal_center > crate_patch.horizontal_center and chair_patch.horizontal_center > crate_patch.horizontal_center:
                    return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?," # clay is a material
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    # Question assumes only one flower pot patch
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return image_patch.simple_query(""Is the flower pot made of clay?"") # crop would include the clay so keep it in the query"
191006281,Does the sky look clear and gray?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""sky"", ""clear and gray"")"
681336,Do you see hats or gloves that are white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_white_hat = image_patch.verify_property(""hats"", ""white"")
    is_white_glove = image_patch.verify_property(""gloves"", ""white"")
    return bool_to_yesno(is_white_hat or is_white_glove)"
1300368,What is on the cabinet that is to the right of the keyboard?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    for cabinet_patch in cabinet_patches:
        keyboard_patches = image_patch.find(""keyboard"")
        for keyboard_patch in keyboard_patches:
            if keyboard_patch.horizontal_center > cabinet_patch.horizontal_center:
                return cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"") # crop would include the keyboard so keep it in the query
    # If no cabinet is to the right of the keyboard, pick the first cabinet
    return cabinet_patches[0].simple_query(""What is on the cabinet that is to the right of the keyboard?"")"
172394,What is the animal to the left of the tap called?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    for animal_patch in animal_patches:
        tap_patches = image_patch.find(""tap"")
        for tap_patch in tap_patches:
            if animal_patch.horizontal_center < tap_patch.horizontal_center:
                return animal_patch.simple_query(""What is the animal to the left of the tap called?"") # crop would include the tap so keep it in the query
    # If no animal is to the left of the tap, pick the first animal
    return animal_patches[0].simple_query(""What is the animal to the left of the tap called?"")"
738176,Is the chair on the right?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    if chair_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
4194919,Is the child on the right of the picture?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the child on the right of the picture?"")"
3585327,Who is on the surfboard?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard?"")
    for person_patch in person_patches:
        return person_patch.simple_query(""Who is on the surfboard?"") # crop would include the surfboard so keep it in the query"
1711172,What size are the packages the candle is on top of?," # crop would include the candle so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What size are the packages the candle is on top of?"")"
4353895,Who is on the snowboard on the right?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    for snowboard_patch in snowboard_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > snowboard_patch.horizontal_center:
                return person_patch.simple_query(""Who is on the snowboard on the right?"") # crop would include the snowboard so keep it in the query
    # If no person is on the snowboard, pick the first person
    return person_patches[0].simple_query(""Who is on the snowboard on the right?"")"
17929304,What is the vehicle that is on the road?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the crust?"")"
5672474,Is the plate to the left or to the right of the beer on the left?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    for plate_patch in plate_patches:
        beer_patches = image_patch.find(""beer"")
        for beer_patch in beer_patches:
            if beer_patch.horizontal_center < plate_patch.horizontal_center:
                return ""left""
    return ""right"""
11341284,What is the pattern of the mattress on the street?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Are there any boys behind the fence?"")
    for boy_patch in boy_patches:
        if boy_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
19203395,Is the white toilet paper to the right or to the left of the toilet?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    for toilet_patch in toilet_patches:
        white_toilet_paper_patches = image_patch.find(""white toilet paper"")
        for white_toilet_paper_patch in white_toilet_paper_patches:
            if white_toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
                return ""right""
            elif white_toilet_paper_patch.horizontal_center < toilet_patch.horizontal_center:
                return ""left""
    return ""no"""
1194938,Are there any airplanes in front of the building?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there any airplanes in front of the building?"")"
5350205,How clean is the road that the car is on the side of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    for road_patch in road_patches:
        return road_patch.verify_property(""road"", ""clean"")"
4256016,"In which part of the picture is the black van, the bottom or the top?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    for person_patch in person_patches:
        is_right_of_fence = (person_patch.simple_query(""Is the person to the right of the fence?"") == ""yes"")
        if is_right_of_fence:
            return person_patch.simple_query(""What is the person to the right of the fence doing?"") # crop would include the person so keep it in the query
    # If no person is to the right of the fence, pick the first person
    return person_patches[0].simple_query(""What is the person to the right of the fence doing?"")"
16471124,Does the horse have a different color than the boot?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    for horse_patch in horse_patches:
        boot_patches = image_patch.find(""boot"")
        for boot_patch in boot_patches:
            if horse_patch.verify_property(""horse"", ""color"") != boot_patch.verify_property(""boot"", ""color""):
                return ""yes""
    return ""no"""
958247,Is the mouse to the right of a chair?," # mouse is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the mouse to the right of a chair?"")"
11179512,The basket made of plastic is what color?," # basket is the object, plastic is the property
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    for basket_patch in basket_patches:
        return basket_patch.verify_property(""basket"", ""plastic"")"
8816272,Do you see any elephant to the left of the bird?," # elephant to the left of the bird
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
    for elephant_patch in elephant_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if elephant_patch.horizontal_center < bird_patch.horizontal_center:
                return ""yes""
    return ""no"""
11168592,What is the animal in front of the lamp?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?," # jacket is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the jacket?"")"
7398502,What is the food to the left of the girl in the bottom of the photo?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")"
5145864,What is the device that the camera is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that the camera is in front of?"")"
788143,Is the man on the surfboard?," # image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the surfboard?"")
    man_patch = man_patches[0]
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        return ""no""
    for surfboard_patch in surfboard_patches:
        if man_patch.vertical_center > surfboard_patch.vertical_center:
            return ""yes""
    return ""no"""
15854501,What device has the same color as the device in the box?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    for device_patch in device_patches:
        box_patches = image_patch.find(""box"")
        for box_patch in box_patches:
            if device_patch.verify_property(""device"", ""color"") == box_patch.verify_property(""box"", ""color""):
                return device_patch.simple_query(""What device has the same color as the device in the box?"") # crop would include the box so keep it in the query
    # If no device has the same color as the device in the box, pick the first device
    return device_patches[0].simple_query(""What device has the same color as the device in the box?"")"
3228067,What is the child wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    for child_patch in child_patches:
        return child_patch.simple_query(""What is the child wearing?"") # crop would include the shirt so keep it in the query"
6817336,Is the blue sky behind a cathedral?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    blue_sky_patches = image_patch.find(""blue sky"")
    # Question assumes only one blue sky patch
    if len(blue_sky_patches) == 0:
        # If no blue sky is found, query the image directly
        return image_patch.simple_query(""Is the blue sky behind a cathedral?"")
    for blue_sky_patch in blue_sky_patches:
        cathedral_patches = image_patch.find(""cathedral"")
        for cathedral_patch in cathedral_patches:
            if blue_sky_patch.horizontal_center > cathedral_patch.horizontal_center:
                return ""yes""
    return ""no"""
6347271,"In which part of the image is the yellow pepper, the bottom or the top?"," # yellow pepper is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")"
296230,What animal is the woman feeding?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the woman feeding?"")"
3427727,On which side is the bucket?," # assumes only one bucket patch
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    if bucket_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
31050314,Is the small chimney in the bottom part of the picture?," # chimney is a property of the building
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    for building_patch in building_patches:
        chimney_patches = image_patch.find(""chimney"")
        for chimney_patch in chimney_patches:
            if chimney_patch.vertical_center < building_patch.vertical_center:
                return ""yes""
    return ""no"""
3503396,Are the pants purple?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    return bool_to_yesno(pants_patches[0].verify_property(""pants"", ""purple""))"
11742862,Which kind of furniture is to the right of the paper towels?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    for furniture_patch in furniture_patches:
        paper_towel_patches = image_patch.find(""paper towel"")
        for paper_towel_patch in paper_towel_patches:
            if furniture_patch.horizontal_center > paper_towel_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    return ""none"""
5891809,What kind of furniture is gray?," # gray is a property
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""gray""):
            return furniture_patch.simple_query(""What kind of furniture is gray?"") # crop would include the gray so keep it in the query
    # If no furniture is gray, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is gray?"")"
5370528,Is the hair white and long?," # hair is a property of the person, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the hair white and long?"")"
781153,Do you see trains near the lamp post that looks white?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")"
5543456,Is the container to the left of the person that wears bracelets?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
    for container_patch in container_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.simple_query(""Does the person wear bracelets?"") == ""yes"":
                if container_patch.horizontal_center < person_patch.horizontal_center:
                    return ""yes""
    return ""no"""
163134,What do you think is on the roof?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shoe white or brown?"")"
5511395,What is wrapped in paper?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is wrapped in paper?"")"
5611256,Are there any couches in the picture?," # image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Are there any couches in the picture?"")
    return ""yes"""
1162826,The man is in what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is in what?"")
    return man_patches[0].simple_query(""The man is in what?"") # crop would include the man so keep it in the query"
81020685,Which color is the small house?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    for house_patch in house_patches:
        return house_patch.simple_query(""Which color is the small house?"") # crop would include the house so keep it in the query"
19640724,Who is in the bathroom?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is in the bathroom?"")
    return person_patches[0].simple_query(""Who is in the bathroom?"") # crop would include the person so keep it in the query"
289960,Do you see a racket to the right of the boy that is looking at the tie?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")"
9957748,Does the hair appear to be long and brown?," # hair is not a property, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the hair appear to be long and brown?"")"
21031610,What is the shoe that looks black and white resting on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    for shoe_patch in shoe_patches:
        is_black_and_white = (shoe_patch.simple_query(""Is the shoe black and white?"") == ""yes"")
        if is_black_and_white:
            return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"") # crop would include the black and white so keep it in the query
    # If no black and white shoe is found, pick the first shoe
    return shoe_patches[0].simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?," # pillow is the object, animal is the property
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    for pillow_patch in pillow_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if pillow_patch.vertical_center > animal_patch.vertical_center:
                return ""yes""
    return ""no"""
457770,What kind of clothing is striped?," # striped is a property
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""striped""):
            return clothing_patch.simple_query(""What kind of clothing is striped?"") # crop would include the stripes so keep it in the query
    # If no clothing is striped, pick the first clothing
    return clothing_patches[0].simple_query(""What kind of clothing is striped?"")"
12603153,Are the child's eyes blue and open?," # child's eyes are blue and open
    image_patch = ImagePatch(image)
    eyes_patches = image_patch.find(""eyes"")
    # Question assumes only one eyes patch
    if len(eyes_patches) == 0:
        # If no eyes are found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    for eyes_patch in eyes_patches:
        return eyes_patch.verify_property(""eyes"", ""blue"") and eyes_patch.verify_property(""eyes"", ""open"")"
9480973,What is located on top of the tub?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?," # fork is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")"
13420253,On which side of the photo is the chair?," # left or right
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    if chair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the label on?"")"
3322787,What bird is to the left of the person that is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    for bird_patch in bird_patches:
        is_wearing_shirt = (image_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no bird is wearing a shirt, pick the first bird
    return bird_patches[0].simple_query(""What bird is to the left of the person that is wearing a shirt?"")"
6399594,On which side is the man?," # left or right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    if man_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6930120,Is the glass bowl on the right or on the left?," # glass bowl is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")"
12619961,What vehicles are to the left of the taxi?," # vehicle is a relation, so ask directly
    image_patch = ImagePatch(image)
    vehicles_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicles_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    for vehicle_patch in vehicles_patches:
        if vehicle_patch.horizontal_center < image_patch.simple_query(""What vehicles are to the left of the taxi?""):
            return vehicle_patch.simple_query(""What vehicles are to the left of the taxi?"") # crop would include the vehicle so keep it in the query
    # If no vehicle is to the left of the taxi, pick the first vehicle
    return vehicles_patches[0].simple_query(""What vehicles are to the left of the taxi?"")"
13362315,Is the basket on the shelf black and empty?," # black and empty are properties
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    for basket_patch in basket_patches:
        is_black = basket_patch.verify_property(""basket"", ""black"")
        is_empty = basket_patch.verify_property(""basket"", ""empty"")
        if is_black and is_empty:
            return ""yes""
    return ""no"""
3830854,What is the animal that is standing next to the donkey that is standing in the hay?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    for animal_patch in animal_patches:
        donkey_patches = image_patch.find(""donkey"")
        # Question assumes only one donkey patch
        if len(donkey_patches) == 0:
            # If no donkey is found, query the image directly
            return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
        for donkey_patch in donkey_patches:
            hay_patches = image_patch.find(""hay"")
            # Question assumes only one hay patch
            if len(hay_patches) == 0:
                # If no hay is found, query the image directly
                return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
            for hay_patch in hay_patches:
                if animal_patch.horizontal_center > donkey_patch.horizontal_center:
                    return animal_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"") # crop would include the donkey so keep it in the query
    # If no animal is next to the donkey, pick the first animal
    return animal_patches[0].simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")"
18382324,Is this a bed or a table?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_table = image_patch.exists(""table"")
    return bool_to_yesno(is_bed or is_table)"
18104571,"Which animal is that, a bird or a cat?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""bird""):
            return ""bird""
        elif animal_patch.verify_property(""animal"", ""cat""):
            return ""cat""
    return ""no animal found"""
2913379,Do you see any fence or pot?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)"
9294271,What is in front of the fence the zebra is kept in?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")"
10741434,What is the vegetable that is on top of the plate called?," # crop would include the vegetable so keep it in the query
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    return vegetable_patches[0].simple_query(""What is the vegetable that is on top of the plate called?"")"
765962,Where is the car?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Where is the car?"")
    return car_patches[0].simple_query(""Where is the car?"")"
12399262,Is there either a yellow truck or airplane?," # yellow truck or yellow airplane
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_yellow_airplane = image_patch.exists(""yellow airplane"")
    return bool_to_yesno(is_yellow_truck or is_yellow_airplane)"
13964213,Is the man on the left of the photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    if man_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
16171369,What is covered in the snow?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?," # left or right
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    if bottle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5858491,Do you see any ropes on the fence that is on the left of the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center < image_patch.horizontal_center:
            rope_patches = image_patch.find(""rope"")
            for rope_patch in rope_patches:
                return ""yes""
    return ""no"""
17834539,Are there any lamps in the scene?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.exists(""lamp"")"
15658176,Who is wearing a helmet?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        is_wearing_helmet = (person_patch.simple_query(""Is the person wearing a helmet?"") == ""yes"")
        if is_wearing_helmet:
            return person_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no person is wearing a helmet, pick the first person
    return person_patches[0].simple_query(""Who is wearing a helmet?"")"
14372400,Does that coat have red color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red""))"
411886,Are there any curtains or blankets in this scene?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there any curtains or blankets in this scene?"")"
16921850,What is the item of furniture to the left of the remote that the man is holding called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    for furniture_patch in furniture_patches:
        remote_patches = image_patch.find(""remote"")
        for remote_patch in remote_patches:
            if furniture_patch.horizontal_center < remote_patch.horizontal_center:
                return furniture_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"") # crop would include the remote so keep it in the query
    # If no furniture is to the left of the remote, pick the first furniture
    return furniture_patches[0].simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")"
51039491,Is the fence black or red?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    return fence_patches[0].best_text_match([""black"", ""red""])"
7425912,What animal is standing in the field?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing in the field?"")
    return animal_patches[0].simple_query(""What animal is standing in the field?"")"
13136338,What animal is in front of the dog which is to the right of the bird?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    for bird_patch in bird_patches:
        dog_patches = image_patch.find(""dog"")
        # Question assumes only one dog patch
        if len(dog_patches) == 0:
            # If no dog is found, query the image directly
            return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
        for dog_patch in dog_patches:
            if dog_patch.horizontal_center > bird_patch.horizontal_center:
                animal_patches = image_patch.find(""animal"")
                # Question assumes only one animal patch
                if len(animal_patches) == 0:
                    # If no animal is found, query the image directly
                    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
                for animal_patch in animal_patches:
                    if animal_patch.horizontal_center > dog_patch.horizontal_center:
                        return animal_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"") # crop would include the animal so keep it in the query
    return ""no animal"""
3775066,Which color are the cabinets in the bottom of the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    cabinets_patches = image_patch.find(""cabinets"")
    # Question assumes only one cabinet patch
    if len(cabinets_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    for cabinet_patch in cabinets_patches:
        if cabinet_patch.vertical_center < image_patch.vertical_center:
            return cabinet_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"") # crop would include the color so keep it in the query
    # If no cabinet is in the bottom, pick the first cabinet
    return cabinets_patches[0].simple_query(""Which color are the cabinets in the bottom of the picture?"")"
17206239,Is the happy girl to the right of a player?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the happy girl to the right of a player?"")"
2992517,"What piece of furniture is not wooden, the table or the chair?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wooden"") == False:
            return furniture_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"") # crop would include the wood so keep it in the query
    # If no furniture is not wooden, pick the first furniture
    return furniture_patches[0].simple_query(""What piece of furniture is not wooden, the table or the chair?"")"
1827558,Which side of the image is the kettle on?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    if kettle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2785208,Where is the man?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    return man_patches[0].simple_query(""Where is the man?"")"
6623967,Is the baby near the countertop chewing a computer mouses?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouses?"")
    for baby_patch in baby_patches:
        is_near_counter = baby_patch.verify_property(""baby"", ""near the countertop"")
        if is_near_counter:
            computer_mouse_patches = image_patch.find(""computer mouse"")
            # Question assumes only one computer mouse patch
            if len(computer_mouse_patches) == 0:
                # If no computer mouse is found, query the image directly
                return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouses?"")
            for computer_mouse_patch in computer_mouse_patches:
                is_chewing = baby_patch.verify_property(""baby"", ""chewing"")
                if is_chewing:
                    return ""yes""
    return ""no"""
12804807,Is the small bottle open or closed?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    for bottle_patch in bottle_patches:
        return bottle_patch.simple_query(""Is the small bottle open or closed?"") # crop would include the bottle so keep it in the query"
18437691,Is the clock small or large?," # crop would include the clock so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the clock small or large?"")"
9482318,Are there either any glasses or bottles in this photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    bottles_patches = image_patch.find(""bottle"")
    # Question assumes only one glasses patch and one bottles patch
    if len(glasses_patches) == 0 and len(bottles_patches) == 0:
        # If no glasses or bottles are found, query the image directly
        return image_patch.simple_query(""Are there either any glasses or bottles in this photo?"")
    if len(glasses_patches) == 0:
        return bottles_patches[0].simple_query(""Are there either any glasses or bottles in this photo?"")
    if len(bottles_patches) == 0:
        return glasses_patches[0].simple_query(""Are there either any glasses or bottles in this photo?"")
    return ""yes"""
12362819,Is the sky blue or dark?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue or dark?"")"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?," # cup_patches = image_patch.find(""cup"")
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")"
1416636,Are there both bridges and chandeliers in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.exists(""door"")"
13562221,What's the bear on?," # bear on what?
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What's the bear on?"")
    for bear_patch in bear_patches:
        return bear_patch.simple_query(""What's the bear on?"") # crop would include the bear so keep it in the query"
9536851,Is the woman in front of the trees holding scissors?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")
    for woman_patch in woman_patches:
        is_in_front_of_trees = (woman_patch.simple_query(""Is the woman in front of the trees?"") == ""yes"")
        is_holding_scissors = (woman_patch.simple_query(""Is the woman holding scissors?"") == ""yes"")
        if is_in_front_of_trees and is_holding_scissors:
            return ""yes""
    return ""no"""
9682405,What is on the machine?," # crop would include the machine so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the machine?"")"
8649435,What is on the white wall?," # crop would include the wall so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""Does the logo look red?"")
    return logo_patches[0].verify_property(""logo"", ""red"")"
14301289,What type of vehicle is to the left of the white vehicle?," # vehicle is a relation, so ask directly
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle white?"") == ""yes"":
            return vehicle_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"") # crop would include the white vehicle so keep it in the query
    # If no white vehicle is found, pick the first vehicle
    return vehicle_patches[0].simple_query(""What type of vehicle is to the left of the white vehicle?"")"
523976,Which kind of vehicle is large?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""large""):
            return vehicle_patch.simple_query(""Which kind of vehicle is large?"") # crop would include the size so keep it in the query
    # If no vehicle is large, pick the first vehicle
    return vehicle_patches[0].simple_query(""Which kind of vehicle is large?"")"
3423213,Who is in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    ottoman_patches = image_patch.find(""ottoman"")
    # Question assumes only one ottoman patch
    if len(ottoman_patches) == 0:
        # If no ottoman is found, query the image directly
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    for ottoman_patch in ottoman_patches:
        brown_chair_patches = image_patch.find(""brown chair"")
        for brown_chair_patch in brown_chair_patches:
            if ottoman_patch.horizontal_center > brown_chair_patch.horizontal_center:
                return ""right""
            elif ottoman_patch.horizontal_center < brown_chair_patch.horizontal_center:
                return ""left""
    return ""no"""
5716578,Is there a laptop on the bed near the magazines?," # laptop on the bed near the magazines
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")"
8215791,Is the porcelain toilet to the left or to the right of the small trash can?," # porcelain toilet is the object, small trash can is the reference
    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find("" porcelain toilet"")
    # Question assumes only one porcelain toilet patch
    if len(porcelain_toilet_patches) == 0:
        # If no porcelain toilet is found, query the image directly
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    for porcelain_toilet_patch in porcelain_toilet_patches:
        trash_can_patches = image_patch.find(""small trash can"")
        for trash_can_patch in trash_can_patches:
            if porcelain_toilet_patch.horizontal_center < trash_can_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
17528455,What is in front of the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?," # assumes only one pair of goggles and gloves
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"")
    for goggles_patch in goggles_patches:
        gloves_patches = image_patch.find(""gloves"")
        for gloves_patch in gloves_patches:
            if goggles_patch.verify_property(""goggles"", ""color"") != gloves_patch.verify_property(""gloves"", ""color""):
                return ""yes""
    return ""no"""
947724,Is there any purple pillow or kite in this photograph?," # purple pillow or purple kite
    image_patch = ImagePatch(image)
    is_purple_pillow = image_patch.exists(""purple pillow"")
    is_purple_kite = image_patch.exists(""purple kite"")
    return bool_to_yesno(is_purple_pillow or is_purple_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > man_patch.horizontal_center:
            return people_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"") # crop would include the people so keep it in the query
    # If no people are to the right of the man, pick the first people
    return people_patches[0].simple_query(""What are the people to the right of the man doing, standing or sitting?"")"
15492262,Which kind of furniture is white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""Which kind of furniture is white?"") # crop would include the white so keep it in the query
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is white?"")"
151032547,Is the bear on the right side?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    if bear_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
5698674,Are there either any planters or benches?," # image_patch = ImagePatch(image)
    planters_patches = image_patch.find(""planter"")
    # Question assumes only one planter patch
    if len(planters_patches) == 0:
        # If no planter is found, query the image directly
        return image_patch.simple_query(""Are there either any planters or benches?"")
    for planter_patch in planters_patches:
        benches_patches = image_patch.find(""bench"")
        for bench_patch in benches_patches:
            return ""yes""
    return ""no"""
19397103,What is the person that is standing staring at?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person that is standing staring at?"")
    for person_patch in person_patches:
        is_staring = (person_patch.simple_query(""Is the person that is standing staring at?"") == ""yes"")
        if is_staring:
            return person_patch.simple_query(""What is the person that is standing staring at?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""What is the person that is standing staring at?"")"
11630681,What is the color of the necklace?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a property (color), so ask directly
    return image_patch.simple_query(""What is the color of the necklace?"")"
248245,Is the table to the left or to the right of the fence?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    for table_patch in table_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if table_patch.horizontal_center < fence_patch.horizontal_center:
                return ""left""
            elif table_patch.horizontal_center > fence_patch.horizontal_center:
                return ""right""
    return ""no"""
837033,Are there round windows or doors?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_round_window = image_patch.exists(""round window"")
    is_round_door = image_patch.exists(""round door"")
    return bool_to_yesno(is_round_window or is_round_door)"
5249150,Are there any bears or napkins in the picture?," # image_patch = ImagePatch(image)
    bears_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bears_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Are there any bears or napkins in the picture?"")
    for bear_patch in bears_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            return ""yes""
    return ""no"""
13908598,What kind of vehicle is to the left of the person?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    for vehicle_patch in vehicle_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if vehicle_patch.horizontal_center < person_patch.horizontal_center:
                return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"") # crop would include the person so keep it in the query
    # If no vehicle is to the left of the person, pick the first vehicle
    return vehicle_patches[0].simple_query(""What kind of vehicle is to the left of the person?"")"
61006749,Who is dressed in pink?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is dressed in pink?"")"
6122955,Does the pillow have yellow color?," # pillow is the object, yellow is the property
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return pillow_patches[0].verify_property(""pillow"", ""yellow"")"
6861738,Is the old woman to the right or to the left of the faucet?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    # Question assumes only one old woman patch
    if len(old_woman_patches) == 0:
        # If no old woman is found, query the image directly
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    for old_woman_patch in old_woman_patches:
        faucet_patches = image_patch.find(""faucet"")
        for faucet_patch in faucet_patches:
            if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
                return ""right""
            elif old_woman_patch.horizontal_center < faucet_patch.horizontal_center:
                return ""left""
    return ""no"""
15833048,Which kind of animal is on the road?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is on the road?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""on the road""):
            return animal_patch.simple_query(""Which kind of animal is on the road?"") # crop would include the road so keep it in the query
    # If no animal is on the road, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is on the road?"")"
9524339,What animal is large?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""large""):
            return animal_patch.simple_query(""What animal is large?"") # crop would include the size so keep it in the query
    # If no large animal is found, pick the first animal
    return animal_patches[0].simple_query(""What animal is large?"")"
18255749,How clean are the sheets the pillow is to the right of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    for pillow_patch in pillow_patches:
        sheets_patches = image_patch.find(""sheets"")
        for sheets_patch in sheets_patches:
            if pillow_patch.horizontal_center > sheets_patch.horizontal_center:
                return sheets_patch.verify_property(""sheets"", ""clean"")
    return ""not clean"""
19797097,What's the man wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What's the man wearing?"") # crop would include the shirt so keep it in the query"
6899090,Is the man to the right or to the left of the appliance that looks white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    for man_patch in man_patches:
        appliance_patches = image_patch.find(""appliance"")
        # Question assumes only one appliance patch
        if len(appliance_patches) == 0:
            # If no appliance is found, query the image directly
            return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
        for appliance_patch in appliance_patches:
            if appliance_patch.simple_query(""Is the appliance white?"") == ""yes"":
                if man_patch.horizontal_center > appliance_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""no"""
3357701,Does the dog to the right of the other dog have white color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    dog_patch = dog_patches[0]
    right_dog_patches = image_patch.find(""dog"")
    # Question assumes only one right dog patch
    if len(right_dog_patches) == 0:
        return ""no""
    for right_dog_patch in right_dog_patches:
        if right_dog_patch.horizontal_center > dog_patch.horizontal_center:
            return dog_patch.verify_property(""dog"", ""white"")
    return ""no"""
2829418,What's the girl holding?," # girl is a predicate, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the girl holding?"")"
15930109,Which kind of vehicle is blue?," # blue is a property
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""blue""):
            return vehicle_patch.simple_query(""Which kind of vehicle is blue?"") # crop would include the blue so keep it in the query
    # If no vehicle is blue, pick the first vehicle
    return vehicle_patches[0].simple_query(""Which kind of vehicle is blue?"")"
1525382,What type of vegetable is on the food with the cheese?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")"
8548980,Are there either players or hand soaps?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_sop = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_sop)"
4438348,"Which kind of food is not made, the sandwich or the croissant?"," # crop would include the food so keep it in the query
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    for food_patch in food_patches:
        if food_patch.simple_query(""Is the food made?"") == ""no"":
            return food_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"") # crop would include the food so keep it in the query
    # If no food is not made, pick the first food
    return food_patches[0].simple_query(""Which kind of food is not made, the sandwich or the croissant?"")"
6423906,Which kind of food is on the plate?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    return food_patches[0].simple_query(""Which kind of food is on the plate?"")"
1993231,Are the animals in the image of different types?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    return bool_to_yesno(len(set([patch.simple_query(""What kind of animal is eating?"") for patch in animal_patches])) > 1)"
13949656,Are there any people to the left of the tray?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for people_patch in people_patches:
        tray_patches = image_patch.find(""tray"")
        for tray_patch in tray_patches:
            if people_patch.horizontal_center < tray_patch.horizontal_center:
                return ""yes""
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    pineapple_patches = image_patch.find(""pineapple"")
    # Question assumes only one pineapple patch
    if len(pineapple_patches) == 0:
        # If no pineapple is found, query the image directly
        return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")
    return pineapple_patches[0].verify_property(""pineapple"", ""ripe"")"
9392591,Are there chairs or smoothies?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What kind of animal is to the right of the sheep?"") == ""sheep"":
            return animal_patch.simple_query(""Which kind of animal is to the right of the sheep?"") # crop would include the sheep so keep it in the query
    # If no animal is to the right of the sheep, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is to the right of the sheep?"")"
9896138,Are there any boxes to the left of the screen in the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""screen"")
    # Question assumes only one screen patch
    if len(screen_patches) == 0:
        # If no screen is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for screen_patch in screen_patches:
        box_patches = image_patch.find(""box"")
        for box_patch in box_patches:
            if box_patch.horizontal_center < screen_patch.horizontal_center:
                return ""yes""
    return ""no"""
1400333,What do you think is the man on?," # crop would include the chair so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?," # boot is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the boot white or orange?"")"
3659880,Does the wood boat have silver color?," # silver is a color
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""wood boat"", ""silver"")"
1827802,Is the red pot on the appliance to the right of the mixer?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    for red_pot_patch in red_pot_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            mixer_patches = image_patch.find(""mixer"")
            for mixer_patch in mixer_patches:
                if appliance_patch.horizontal_center > red_pot_patch.horizontal_center:
                    return ""yes""
    return ""no"""
14809102,The phone that is in front of the camera is of what color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # Question assumes only one phone patch
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    return phone_patches[0].simple_query(""The phone that is in front of the camera is of what color?"")"
61001545,What type of food is to the left of the silver spoon?," # silver spoon is a noun
    image_patch = ImagePatch(image)
    silver_spoon_patches = image_patch.find(""silver spoon"")
    # Question assumes only one silver spoon patch
    if len(silver_spoon_patches) == 0:
        # If no silver spoon is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    for silver_spoon_patch in silver_spoon_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < silver_spoon_patch.horizontal_center:
                return food_patch.simple_query(""What type of food is to the left of the silver spoon?"") # crop would include the silver spoon so keep it in the query
    # If no food is to the left of the silver spoon, pick the first food
    return food_patches[0].simple_query(""What type of food is to the left of the silver spoon?"")"
799463,Are there both a window and a door in the picture?," # window and door are not relational verbs
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
11260725,Does the water have small size and white color?," # crop would include the water so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""water"", ""small"") and image_patch.verify_property(""water"", ""white"")"
2397653,Are there any fences that are white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any fences that are white?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""yes""
    return ""no"""
1554603,Who is holding the animal?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    for person_patch in person_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is holding the animal?"") # crop would include the animal so keep it in the query
    # If no animal is to the right of the person, pick the first person
    return person_patches[0].simple_query(""Who is holding the animal?"")"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patch = man_patches[0]
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        return ""no""
    for stroller_patch in stroller_patches:
        people_patches = image_patch.find(""people"")
        # Question assumes only one people patch
        if len(people_patches) == 0:
            return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
        people_patch = people_patches[0]
        if stroller_patch.horizontal_center > people_patch.horizontal_center:
            return ""yes""
    return ""no"""
8988476,What kind of furniture is presented in this photo?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        return ""no""
    for backpack_patch in backpack_patches:
        return backpack_patch.simple_query(""What is the man with the backpack holding?"") # crop would include the backpack so keep it in the query"
91058050,Are there both mouse pads and computer mice in the photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_computer_mouse = image_patch.exists(""computer mouse"")
    return bool_to_yesno(is_mouse_pad and is_computer_mouse)"
1972064,Is the person in front of the tree wearing jeans?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")"
167162,Is there a bike to the right of the purse that is to the right of the woman?," # bike, purse, woman
    image_patch = ImagePatch(image)
    bike_patches = image_patch.find(""bike"")
    # Question assumes only one bike patch
    if len(bike_patches) == 0:
        # If no bike is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    for bike_patch in bike_patches:
        purse_patches = image_patch.find(""purse"")
        # Question assumes only one purse patch
        if len(purse_patches) == 0:
            # If no purse is found, query the image directly
            return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
        for purse_patch in purse_patches:
            woman_patches = image_patch.find(""woman"")
            # Question assumes only one woman patch
            if len(woman_patches) == 0:
                # If no woman is found, query the image directly
                return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
            for woman_patch in woman_patches:
                if purse_patch.horizontal_center > woman_patch.horizontal_center and bike_patch.horizontal_center > purse_patch.horizontal_center:
                    return ""yes""
    return ""no"""
1695388,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    for woman_patch in woman_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if woman_patch.horizontal_center < man_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
16921984,What is the bent man to the right of the other men doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")"
12175564,What animal are the men to the right of the girl leading?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""men"")
    # Question assumes only one men patch
    if len(men_patches) == 0:
        # If no men are found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    for men_patch in men_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            is_leading = (men_patch.simple_query(""Is the man leading the girl?"") == ""yes"")
            if is_leading:
                return men_patch.simple_query(""What animal are the men to the right of the girl leading?"") # crop would include the animal so keep it in the query
    # If no men are leading the girl, pick the first man
    return men_patches[0].simple_query(""What animal are the men to the right of the girl leading?"")"
1219606,On which side of the image is the house?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.horizontal_center > image_patch.width / 2)"
1770499,Is the black suitcase to the right or to the left of the person on the left?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    suitcase_patches = image_patch.find(""suitcase"")
    # Question assumes only one suitcase patch
    if len(suitcase_patches) == 0:
        # If no suitcase is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    for suitcase_patch in suitcase_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if suitcase_patch.horizontal_center > person_patch.horizontal_center:
                return ""right""
            elif suitcase_patch.horizontal_center < person_patch.horizontal_center:
                return ""left""
    return ""no"""
5282406,Is the pot to the left of a chair?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    for pot_patch in pot_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if pot_patch.horizontal_center < chair_patch.horizontal_center:
                return ""yes""
    return ""no"""
10914401,Where are the people?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    return people_patches[0].simple_query(""Where are the people?"")"
1919722,What animal is eating the grass?," # crop would include the grass so keep it in the query
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is eating the grass?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""eating""):
            return animal_patch.simple_query(""What animal is eating the grass?"") # crop would include the grass so keep it in the query
    # If no animal is eating, pick the first animal
    return animal_patches[0].simple_query(""What animal is eating the grass?"") # crop would include the grass so keep it in the query"
9681008,Who is wearing a helmet?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        is_wearing_helmet = (person_patch.simple_query(""Is the person wearing a helmet?"") == ""yes"")
        if is_wearing_helmet:
            return person_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no person is wearing a helmet, pick the first person
    return person_patches[0].simple_query(""Who is wearing a helmet?"")"
16861675,Who is on the surfboard in the middle of the photo?," # ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")"
10947426,What is the color of the lizard beside the banana?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the color of the lizard beside the banana?"")"
18200684,Is the wine glass in the top or in the bottom part?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")"
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?," # vehicle is to the left of the people that are in the middle of the picture
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    vehicle_patch = vehicle_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    for people_patch in people_patches:
        if vehicle_patch.horizontal_center < people_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"") # crop would include the people so keep it in the query
    # If no vehicle is to the left of the people, pick the first vehicle
    return vehicle_patches[0].simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")"
171012637,Is the teddy bear to the right of a suitcase?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"")"
19861372,Is the woman's hair long or short?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    return hair_patches[0].simple_query(""Is the woman's hair long or short?"")"
623889,Are both the television and the armchair the same color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    television_patches = image_patch.find(""television"")
    # Question assumes only one television patch
    if len(television_patches) == 0:
        # If no television is found, query the image directly
        return image_patch.simple_query(""Are both the television and the armchair the same color?"")
    for television_patch in television_patches:
        armchair_patches = image_patch.find(""armchair"")
        for armchair_patch in armchair_patches:
            if television_patch.verify_property(""television"", ""color"") == armchair_patch.verify_property(""armchair"", ""color""):
                return ""yes""
    return ""no"""
4917605,Is the shoe white or brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shoe white or brown?"")"
91055143,What is on the table?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
5430643,What do you think sits on the plate to the left of the tomato?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")"
523936,Is the woman in the top part of the picture?," # crop would include the woman so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman in the top part of the picture?"")"
3189548,Is there a bottle on the nightstand that is on the bed?," # bottle, nightstand, bed
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    for bottle_patch in bottle_patches:
        nightstand_patches = image_patch.find(""nightstand"")
        for nightstand_patch in nightstand_patches:
            bed_patches = image_patch.find(""bed"")
            for bed_patch in bed_patches:
                if bottle_patch.vertical_center < bed_patch.vertical_center and bottle_patch.horizontal_center < bed_patch.horizontal_center and bottle_patch.horizontal_center > nightstand_patch.horizontal_center:
                    return ""yes""
    return ""no"""
14292161,The pot is of which color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].simple_query(""The pot is of which color?"")"
17495150,"What device is black, the microphone or the laptop?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    # Question assumes only one black patch
    if len(black_patches) == 0:
        # If no black is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    for black_patch in black_patches:
        if black_patch.simple_query(""Is the device black?"") == ""yes"":
            return black_patch.simple_query(""What device is black, the microphone or the laptop?"") # crop would include the black so keep it in the query
    # If no black is found, pick the first black patch
    return black_patches[0].simple_query(""What device is black, the microphone or the laptop?"")"
1521847,Is the cat on a desk?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Is the cat on a desk?"")
    for cat_patch in cat_patches:
        desk_patches = image_patch.find(""desk"")
        for desk_patch in desk_patches:
            if cat_patch.vertical_center > desk_patch.vertical_center:
                return ""yes""
    return ""no"""
16465081,The man is holding what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    object_patches = man_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return image_patch.simple_query(""The man is holding what?"")
    return object_patches[0].simple_query(""The man is holding what?"") # crop would include the object so keep it in the query"
17387032,What is on the post?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")"
18906705,How big is the crowd?," # crop would include the crowd so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How big is the crowd?"")"
6157200,Does the sign on the pole have white color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    return bool_to_yesno(sign_patches[0].verify_property(""sign"", ""white""))"
16760226,What's the laptop in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?," # returns the width and height of the bed
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    return bed_patches[0].width, bed_patches[0].height"
14143886,Where is the person with the luggage standing on?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    for person_patch in person_patches:
        luggage_patches = image_patch.find(""luggage"")
        for luggage_patch in luggage_patches:
            return person_patch.simple_query(""Where is the person with the luggage standing on?"") # crop would include the luggage so keep it in the query
    # If no person is found, query the image directly
    return image_patch.simple_query(""Where is the person with the luggage standing on?"")"
19872633,Are there either any fire extinguishers or pepper shakers?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)"
12755010,Is the bottle to the right of a napkin?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the bottle to the right of a napkin?"")"
2747001,Are there any soaps or bombs?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    baby_giraffe_patches = image_patch.find(""baby giraffe"")
    # Question assumes only one baby giraffe patch
    if len(baby_giraffe_patches) == 0:
        # If no baby giraffe is found, query the image directly
        return image_patch.simple_query(""Do you see baby giraffes or elephants?"")
    for baby_giraffe_patch in baby_giraffe_patches:
        elephant_patches = image_patch.find(""elephant"")
        for elephant_patch in elephant_patches:
            return bool_to_yesno(baby_giraffe_patch.exists(""baby giraffe"") or elephant_patch.exists(""elephant""))
    return ""no"""
6898877,What is the sign on?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the sign on?"")"
15862812,What is the sticker on?," # assumes only one sticker patch
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    return sticker_patches[0].simple_query(""What is the sticker on?"")"
141031470,On which side of the image is the white towel?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    if towel_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
41026846,Who rides a motorcycle?," # motorcycle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?," # towel is on the bathtub
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""What is around the bathtub the towel is on?"")
    for towel_patch in towel_patches:
        bathtub_patches = image_patch.find(""bath tub"")
        for bathtub_patch in bathtub_patches:
            return image_patch.simple_query(""What is around the bathtub the towel is on?"") # crop would include the towel so keep it in the query
    # If no towel is found, query the image directly
    return image_patch.simple_query(""What is around the bathtub the towel is on?"")"
7469617,Is the man to the left or to the right of the person that is to the left of the people?," # left of left of people
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    for people_patch in people_patches:
        left_of_people_patches = image_patch.find(""left of people"")
        # Question assumes only one left of people patch
        if len(left_of_people_patches) == 0:
            return ""no""
        for left_of_people_patch in left_of_people_patches:
            if left_of_people_patch.horizontal_center < man_patch.horizontal_center:
                return ""left""
    return ""right"""
64308,What's located on top of the soup?," # crop would include the spoon so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    for fence_patch in fence_patches:
        bench_patches = image_patch.find(""bench"")
        for bench_patch in bench_patches:
            if bench_patch.verify_property(""fence"", ""material"") == fence_patch.verify_property(""fence"", ""material""):
                return ""yes""
    return ""no"""
3196255,Are there helmets that are not white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    helmets_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmets_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmets_patches:
        if not helmet_patch.verify_property(""helmet"", ""white""):
            return ""yes""
    return ""no"""
2992630,Is the bowl to the right or to the left of the man that is drinking?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    for bowl_patch in bowl_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            # If no man is found, query the image directly
            return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
        for man_patch in man_patches:
            if bowl_patch.horizontal_center > man_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
513894,Is the person above the sand wearing glasses?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    for person_patch in person_patches:
        sand_patches = image_patch.find(""sand"")
        for sand_patch in sand_patches:
            if person_patch.vertical_center > sand_patch.vertical_center:
                glasses_patches = image_patch.find(""glasses"")
                for glasses_patch in glasses_patches:
                    return ""yes""
    return ""no"""
14167599,Is the color of the life preserver the same as that of the house?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    # Question assumes only one life preserver patch
    if len(life_preserver_patches) == 0:
        # If no life preserver is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    life_preserver_patch = life_preserver_patches[0]
    house_patches = image_patch.find(""house"")
    for house_patch in house_patches:
        if life_preserver_patch.verify_property(""life preserver"", ""color"") == house_patch.verify_property(""house"", ""color""):
            return ""yes""
    return ""no"""
18264755,How is the weather?," # weather is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    for animal_patch in animal_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.simple_query(""Is the toilet closed?"") == ""no"":
                return animal_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"") # crop would include the animal so keep it in the query
    # If no animal is looking into an open toilet, pick the first animal
    return animal_patches[0].simple_query(""What is the animal that is looking into the toilet that is not closed?"")"
8641613,Do you see any helmets in the picture that are not red?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    helmets_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmets_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmets_patches:
        if not helmet_patch.verify_property(""helmet"", ""red""):
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""happy""):
            return person_patch.simple_query(""What does the happy person hold?"") # crop would include the happy person so keep it in the query
    # If no happy person is found, pick the first person
    return person_patches[0].simple_query(""What does the happy person hold?"")"
8461507,Are there either tissue boxes or lamps in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is it?"")
    return animal_patches[0].simple_query(""Which kind of animal is it?"")"
19102906,What type of drink is to the left of the plate?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    drink_patches = image_patch.find(""drink"")
    # Question assumes only one drink patch
    if len(drink_patches) == 0:
        # If no drink is found, query the image directly
        return image_patch.simple_query(""What type of drink is to the left of the plate?"")
    for drink_patch in drink_patches:
        plate_patches = image_patch.find(""plate"")
        for plate_patch in plate_patches:
            if drink_patch.horizontal_center < plate_patch.horizontal_center:
                return drink_patch.simple_query(""What type of drink is to the left of the plate?"") # crop would include the plate so keep it in the query
    # If no drink is to the left of the plate, pick the first drink
    return drink_patches[0].simple_query(""What type of drink is to the left of the plate?"")"
18315440,Is the sky cloudy and blue?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_cloudy = image_patch.verify_property(""sky"", ""cloudy"")
    is_blue = image_patch.verify_property(""sky"", ""blue"")
    return bool_to_yesno(is_cloudy and is_blue)"
453061,Is the fork on the right of the image?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the fork on the right of the image?"")"
71002567,"What is the broccoli on, a table or a nightstand?"," # assumes only one broccoli patch
    image_patch = ImagePatch(image)
    broccoli_patches = image_patch.find(""broccoli"")
    # Question assumes only one broccoli patch
    if len(broccoli_patches) == 0:
        # If no broccoli is found, query the image directly
        return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    for broccoli_patch in broccoli_patches:
        is_on_table = broccoli_patch.verify_property(""broccoli"", ""on"")
        if is_on_table:
            return ""table""
        is_on_nightstand = broccoli_patch.verify_property(""broccoli"", ""on"")
        if is_on_nightstand:
            return ""nightstand""
    return ""unknown"""
17465089,Is the field green and small?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_green = image_patch.verify_property(""field"", ""green"")
    is_small = image_patch.verify_property(""field"", ""small"")
    return bool_to_yesno(is_green and is_small)"
16150157,What is on the wall?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?," # assumes only one van patch
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    for van_patch in van_patches:
        suv_patches = image_patch.find(""SUV"")
        for suv_patch in suv_patches:
            if van_patch.horizontal_center < suv_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
15101358,Is the girl to the left of the boy?," # girl is the subject, boy is the object
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    for girl_patch in girl_patches:
        boy_patches = image_patch.find(""boy"")
        for boy_patch in boy_patches:
            if girl_patch.horizontal_center < boy_patch.horizontal_center:
                return ""yes""
    return ""no"""
12785181,What animals are in the grass?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animals are in the grass?"")
    return animal_patches[0].simple_query(""What animals are in the grass?"") # crop would include the animal so keep it in the query"
348093,Are there both an apple and a bag in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)"
314181,Which sign is shown?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which sign is shown?"")"
16275314,"On which side is the woman, the right or the left?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    if woman_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
19535592,Who runs on the sand?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who runs on the sand?"")
    for person_patch in person_patches:
        is_running = (person_patch.simple_query(""Is the person running?"") == ""yes"")
        if is_running:
            return person_patch.simple_query(""Who runs on the sand?"") # crop would include the sand so keep it in the query
    # If no person is running, pick the first person
    return person_patches[0].simple_query(""Who runs on the sand?"")"
156886,Is there a giraffe near the bush?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    bush_patches = image_patch.find(""bush"")
    for bush_patch in bush_patches:
        for giraffe_patch in giraffe_patches:
            if abs(giraffe_patch.horizontal_center - bush_patch.horizontal_center) < 100:
                return ""yes""
    return ""no"""
1756642,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who wears the shirt?"")"
1972390,What type of animal is standing in the field?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal is standing in the field?"")
    return animal_patches[0].simple_query(""What type of animal is standing in the field?"")"
14579439,Is the stuffed animal on the right?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    for stuffed_animal_patch in stuffed_animal_patches:
        return ""yes"" if stuffed_animal_patch.horizontal_center > image_patch.horizontal_center else ""no"""
6645395,Is the gray building behind the passengers that are boarding the airplane?," # gray building
    image_patch = ImagePatch(image)
    gray_building_patches = image_patch.find(""gray building"")
    # Question assumes only one gray building patch
    if len(gray_building_patches) == 0:
        # If no gray building is found, query the image directly
        return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")
    for gray_building_patch in gray_building_patches:
        passenger_patches = image_patch.find(""passenger"")
        for passenger_patch in passenger_patches:
            if passenger_patch.horizontal_center > gray_building_patch.horizontal_center:
                return ""yes""
    return ""no"""
19610200,Is the fence metallic?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""fence"", ""metallic"")"
5299471,What does the girl that to the left of the trashcan carry?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    for girl_patch in girl_patches:
        trashcan_patches = image_patch.find(""trashcan"")
        for trashcan_patch in trashcan_patches:
            if trashcan_patch.horizontal_center > girl_patch.horizontal_center:
                return girl_patch.simple_query(""What does the girl that to the left of the trashcan carry?"") # crop would include the trashcan so keep it in the query
    # If no girl is to the left of the trashcan, pick the first girl
    return girl_patches[0].simple_query(""What does the girl that to the left of the trashcan carry?"")"
7548203,Which kind of vegetable is on the pizza?," # crop would include the vegetable so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")"
91027737,On which side is the pan?," # assumes only one pan patch
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    if pan_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?," # crop would include the cars so keep it in the query
    image_patch = ImagePatch(image)
    cars_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(cars_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    if cars_patches[0].vertical_center > image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
6144031,Who is in the living room?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_cat = image_patch.exists(""cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_bike = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return bool_to_yesno(is_bike or is_biker)"
844747,Are there both a pillow and a kitten in the image?," # pillow and kitten
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Are there both a pillow and a kitten in the image?"")
    kitten_patches = image_patch.find(""kitten"")
    # Question assumes only one kitten patch
    if len(kitten_patches) == 0:
        # If no kitten is found, query the image directly
        return image_patch.simple_query(""Are there both a pillow and a kitten in the image?"")
    return bool_to_yesno(pillow_patches[0].verify_property(""pillow"", ""on"") and kitten_patches[0].verify_property(""kitten"", ""on""))"
1104500,What kind of food is in the box?," # box is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    for food_patch in food_patches:
        kid_patches = image_patch.find(""kid"")
        for kid_patch in kid_patches:
            if food_patch.horizontal_center < kid_patch.horizontal_center:
                return food_patch.simple_query(""What is the food that is to the left of the kid called?"") # crop would include the kid so keep it in the query
    # If no food is to the left of the kid, pick the first food
    return food_patches[0].simple_query(""What is the food that is to the left of the kid called?"")"
11820726,"What device is the desk in front of, a television or a printer?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")"
18114588,Do you see a helmet there?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.exists(""helmet"")"
11950874,What animal is standing on the ground?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""standing on the ground""):
            return animal_patch.simple_query(""What animal is standing on the ground?"") # crop would include the ground so keep it in the query
    # If no animal is standing on the ground, pick the first animal
    return animal_patches[0].simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")"
16184942,Does that grass look brown and short?," # grass is brown and short
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""grass"", ""brown and short"")"
6312238,Is the hydrant to the left of the car?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    # Question assumes only one hydrant patch
    if len(hydrant_patches) == 0:
        # If no hydrant is found, query the image directly
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    for hydrant_patch in hydrant_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if car_patch.horizontal_center > hydrant_patch.horizontal_center:
                return ""yes""
    return ""no"""
16646227,On which side of the picture is the gray car?," # gray car is the object, left or right is the property
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    if gray_car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?," # ball is to the right of the person wearing sneakers
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for ball_patch in ball_patches:
        sneakers_patches = image_patch.find(""sneakers"")
        for sneakers_patch in sneakers_patches:
            if ball_patch.horizontal_center > sneakers_patch.horizontal_center:
                return ""right""
            elif ball_patch.horizontal_center < sneakers_patch.horizontal_center:
                return ""left""
    return ""left"" # if no ball is found, return left"
3443704,What is the woman wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    for woman_patch in woman_patches:
        return woman_patch.simple_query(""What is the woman wearing?"") # crop would include the shirt so keep it in the query"
19313572,What is the color of the tent to the left of the vehicles?," # tent is the object, left is the relation, vehicles is the subject
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    for tent_patch in tent_patches:
        vehicles_patches = image_patch.find(""vehicles"")
        for vehicle_patch in vehicles_patches:
            if vehicle_patch.horizontal_center > tent_patch.horizontal_center:
                return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"") # crop would include the vehicle so keep it in the query
    # If no vehicle is to the left of the tent, pick the first vehicle
    return vehicles_patches[0].simple_query(""What is the color of the tent to the left of the vehicles?"")"
10885675,What is the toilet seat made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a property (made of), so ask directly
    return image_patch.simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    for blanket_patch in blanket_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.vertical_center < blanket_patch.vertical_center:
                return animal_patch.simple_query(""What animal is resting on the blanket?"") # crop would include the blanket so keep it in the query
    # If no animal is resting on the blanket, pick the first animal
    return animal_patches[0].simple_query(""What animal is resting on the blanket?"")"
14561612,What color do you think the bikini that the woman is wearing is?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bikini_patches = image_patch.find(""bikini"")
    # Question assumes only one bikini patch
    if len(bikini_patches) == 0:
        # If no bikini is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    return bikini_patches[0].simple_query(""What color do you think the bikini that the woman is wearing is?"")"
6587755,Are both the room and the bowl the same color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    # Question assumes only one room patch
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""Are both the room and the bowl the same color?"")
    room_patch = room_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return ""no""
    for bowl_patch in bowl_patches:
        if room_patch.verify_property(""room"", ""color"") != bowl_patch.verify_property(""bowl"", ""color""):
            return ""no""
    return ""yes"""
4479543,Is the barn white or brown?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the barn white or brown?"")"
972522,Does the box look white or brown?," # box is the object, color is the property
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].verify_property(""box"", ""color"") # crop would include the color so keep it in the query"
3948528,What is the bowl made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a property (made of), so ask directly
    return image_patch.simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?," # gray or red
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    for bench_patch in bench_patches:
        rock_patches = image_patch.find(""rock"")
        for rock_patch in rock_patches:
            if bench_patch.simple_query(""Is the bench in front of the rock gray or red?"") == ""gray"":
                return ""gray""
            elif bench_patch.simple_query(""Is the bench in front of the rock gray or red?"") == ""red"":
                return ""red""
    return ""gray"" # default to gray if no bench is found"
866459,On which side is the couch?," # left or right
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8614812,Is the person that is playing wearing shorts?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the person that is playing wearing shorts?"")"
167438,What is wearing the ground?," # ground is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?," # wooden is a property
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wooden""):
            return furniture_patch.simple_query(""Which kind of furniture is wooden?"") # crop would include the wood so keep it in the query
    # If no furniture is wooden, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is wooden?"")"
1042377,Who is standing beside the person that is wearing a dress?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    skis_patches = image_patch.find(""skis"")
    # Question assumes only one ski patch
    if len(skis_patches) == 0:
        # If no skis are found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    return skis_patches[0].simple_query(""How fat are the long skis?"")"
2211743,Is the sky clear or overcast?," # ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bottles_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottles_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
    for bottle_patch in bottles_patches:
        if bottle_patch.vertical_center < image_patch.vertical_center:
            pencils_patches = image_patch.find(""pencil"")
            for pencil_patch in pencils_patches:
                if bottle_patch.horizontal_center < pencil_patch.horizontal_center:
                    return ""yes""
    return ""no"""
15478302,Is there any dark door or window in the image?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    dark_patches = image_patch.find(""dark"")
    # Question assumes only one dark patch
    if len(dark_patches) == 0:
        # If no dark is found, query the image directly
        return image_patch.simple_query(""Is there any dark door or window in the image?"")
    for dark_patch in dark_patches:
        if dark_patch.verify_property(""dark"", ""door"") or dark_patch.verify_property(""dark"", ""window""):
            return ""yes""
    return ""no"""
18414234,Do you see either a knife or a chair in the picture?," # image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    # Question assumes only one knife patch
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Do you see either a knife or a chair in the picture?"")
    for knife_patch in knife_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            return ""yes""
    return ""no"""
19779815,Is the book red or yellow?," # contains a property (red, yellow)
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    return book_patches[0].best_text_match([""red"", ""yellow""])"
7257283,Are there men to the left of the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""men"")
    # Question assumes only one men patch
    if len(men_patches) == 0:
        # If no men is found, query the image directly
        return image_patch.simple_query(""Are there men to the left of the picture?"")
    for men_patch in men_patches:
        if men_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6621625,On which side of the picture is the bench?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    if bench_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19311589,Are there both fences and horses in this picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?," # assumes only one container patch
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    for container_patch in container_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            device_patches = image_patch.find(""device"")
            for device_patch in device_patches:
                if device_patch.horizontal_center > container_patch.horizontal_center and person_patch.horizontal_center > device_patch.horizontal_center:
                    return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"") # crop would include the person so keep it in the query
    # If no device is found, query the image directly
    return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")"
171031333,Do you see blankets in the picture that are not black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    blankets_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blankets_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Do you see blankets in the picture that are not black?"")
    for blanket_patch in blankets_patches:
        if blanket_patch.verify_property(""blanket"", ""black"") == False:
            return ""yes""
    return ""no"""
16695341,What is the fence made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Do you see any bottle or child there?"")
    for bottle_patch in bottle_patches:
        child_patches = image_patch.find(""child"")
        for child_patch in child_patches:
            return ""yes""
    return ""no"""
5111363,Are there chairs or tables that are not blue?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    is_blue = image_patch.exists(""blue"")
    return bool_to_yesno(is_chair and not is_blue or is_table and not is_blue)"
9230971,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?," # hair is the object, short length and white color are the properties
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    return bool_to_yesno(hair_patches[0].verify_property(""hair"", ""short length"") and hair_patches[0].verify_property(""hair"", ""white""))"
4822200,Do you see any lettuce on the food with the meat?," # lettuce is a vegetable
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    return ""yes"""
3726666,What device is to the left of the curtain that is to the left of the glasses?," # left, left, left
    image_patch = ImagePatch(image)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    for curtain_patch in curtain_patches:
        glasses_patches = image_patch.find(""glasses"")
        # Question assumes only one glasses patch
        if len(glasses_patches) == 0:
            # If no glasses are found, query the image directly
            return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
        for glasses_patch in glasses_patches:
            device_patches = image_patch.find(""device"")
            # Question assumes only one device patch
            if len(device_patches) == 0:
                # If no device is found, query the image directly
                return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
            for device_patch in device_patches:
                if device_patch.horizontal_center < curtain_patch.horizontal_center and device_patch.horizontal_center < glasses_patch.horizontal_center:
                    return device_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"") # crop would include the device so keep it in the query
    return ""no such device"""
9954849,What kind of furniture is it?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    red_patches = image_patch.find(""red"")
    # Question assumes only one red patch
    if len(red_patches) == 0:
        # If no red is found, query the image directly
        return image_patch.simple_query(""Are there any red trains or buses?"")
    for red_patch in red_patches:
        train_patches = image_patch.find(""train"")
        bus_patches = image_patch.find(""bus"")
        for train_patch in train_patches:
            if train_patch.verify_property(""red"", ""train"") and train_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property(""red"", ""red"") and red_patch.verify_property("""
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?," # crate is a noun, lettuce is a noun, left is a preposition, so ask directly
    image_patch = ImagePatch(image)
    crate_patches = image_patch.find(""crate"")
    # Question assumes only one crate patch
    if len(crate_patches) == 0:
        # If no crate is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    for crate_patch in crate_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < crate_patch.horizontal_center:
                return vegetable_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"") # crop would include the crate so keep it in the query
    # If no vegetable is to the left of the crate, pick the first vegetable
    return vegetable_patches[0].simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")"
623393,"What type of clothing is tan, the hat or the vest?"," # tan is a property, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")"
6436448,Is the color of the skirt the same as the scarf?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    for skirt_patch in skirt_patches:
        scarf_patches = image_patch.find(""scarf"")
        for scarf_patch in scarf_patches:
            if skirt_patch.verify_property(""skirt"", ""color"") == scarf_patch.verify_property(""scarf"", ""color""):
                return ""yes""
    return ""no"""
3303313,Is the blanket under a cat?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is the blanket under a cat?"")
    for blanket_patch in blanket_patches:
        cat_patches = image_patch.find(""cat"")
        for cat_patch in cat_patches:
            if blanket_patch.vertical_center < cat_patch.vertical_center:
                return ""yes""
    return ""no"""
443663,What color is the picture?," # image_patch = ImagePatch(image)
    # contains a property (color), so ask directly
    return image_patch.simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?," # image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1885406,What is the toy on the bed?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What is the toy on the bed?"")
    for toy_patch in toy_patches:
        is_on_bed = toy_patch.verify_property(""toy"", ""on the bed"")
        if is_on_bed:
            return toy_patch.simple_query(""What is the toy on the bed?"") # crop would include the bed so keep it in the query
    # If no toy is on the bed, pick the first toy
    return toy_patches[0].simple_query(""What is the toy on the bed?"")"
5557965,On which side is the bag?," # left or right
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?," # banana is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the banana?"")"
3196355,What does the batter hold?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What does the batter hold?"")"
14470748,Who wears a jacket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for person_patch in person_patches:
        is_wearing_jacket = (person_patch.simple_query(""Is the person wearing a jacket?"") == ""yes"")
        if is_wearing_jacket:
            return person_patch.simple_query(""Who wears a jacket?"") # crop would include the jacket so keep it in the query
    # If no person is wearing a jacket, pick the first person
    return person_patches[0].simple_query(""Who wears a jacket?"")"
16537736,Are there any houses behind the shrubs?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    for house_patch in house_patches:
        shrub_patches = image_patch.find(""shrubs"")
        for shrub_patch in shrub_patches:
            if house_patch.horizontal_center > shrub_patch.horizontal_center:
                return ""yes""
    return ""no"""
1129541,What piece of furniture is made of wood?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        is_made_of_wood = furniture_patch.verify_property(""furniture"", ""made of wood"")
        if is_made_of_wood:
            return furniture_patch.simple_query(""What piece of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""What piece of furniture is made of wood?"")"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        elif racket_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
    return ""no"""
12416703,Where is that cat?," # cat is the subject
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Where is that cat?"")
    return cat_patches[0].simple_query(""Where is that cat?"") # crop would include the cat so keep it in the query"
15603088,The animal to the right of the envelope is lying on what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    for animal_patch in animal_patches:
        envelope_patches = image_patch.find(""envelope"")
        for envelope_patch in envelope_patches:
            is_animal_on_envelope = (animal_patch.simple_query(""Is the animal on the envelope?"") == ""yes"")
            if is_animal_on_envelope:
                return animal_patch.simple_query(""The animal to the right of the envelope is lying on what?"") # crop would include the envelope so keep it in the query
    # If no animal is on the envelope, pick the first animal
    return animal_patches[0].simple_query(""The animal to the right of the envelope is lying on what?"")"
5329077,Is the man on a bench?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on a bench?"")
    man_patch = man_patches[0]
    bench_patches = image_patch.find(""bench"")
    for bench_patch in bench_patches:
        if man_patch.vertical_center > bench_patch.vertical_center:
            return ""yes""
    return ""no"""
1945705,What kind of device is to the left of the device that looks silver and gray?," # left, right, top, bottom
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")"
17520003,What vehicle is to the right of the pine tree?," # vehicle is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")"
1259983,Who is wearing pants?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    for person_patch in person_patches:
        is_wearing_pants = (person_patch.simple_query(""Is the person wearing pants?"") == ""yes"")
        if is_wearing_pants:
            return person_patch.simple_query(""Who is wearing pants?"") # crop would include the pants so keep it in the query
    # If no person is wearing pants, pick the first person
    return person_patches[0].simple_query(""Who is wearing pants?"")"
6413378,Is there a black keyboard or camera?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_black_keyboard = image_patch.exists(""black keyboard"")
    is_black_camera = image_patch.exists(""black camera"")
    return bool_to_yesno(is_black_keyboard or is_black_camera)"
947305,Is the sunny water blue and high?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the sunny water blue and high?"")
    return bool_to_yesno(image_patch.verify_property(""water"", ""blue"") and image_patch.verify_property(""water"", ""high""))"
4367817,What type of animal in this scene is brown?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""brown""):
            return animal_patch.simple_query(""What type of animal in this scene is brown?"") # crop would include the brown so keep it in the query
    # If no animal is brown, pick the first animal
    return animal_patches[0].simple_query(""What type of animal in this scene is brown?"")"
15485572,What is the vegetable on the hot dog with the cheese?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")"
12661142,What is the appliance in the kitchen called?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the appliance in the kitchen called?"")"
41012743,The arrow is on what?," # arrow is a relational verb
    image_patch = ImagePatch(image)
    arrow_patches = image_patch.find(""arrow"")
    # Question assumes only one arrow patch
    if len(arrow_patches) == 0:
        # If no arrow is found, query the image directly
        return image_patch.simple_query(""The arrow is on what?"")
    for arrow_patch in arrow_patches:
        return arrow_patch.simple_query(""The arrow is on what?"") # crop would include the object so keep it in the query"
4777414,What color is the bicycle in the bottom of the photo?," # crop would include the bicycle so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")"
1185988,What is the device on top of the table that is to the right of the trashcan?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")"
13582968,Was granite used to make that floor?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a property (made of), so ask directly
    return image_patch.simple_query(""Was granite used to make that floor?"")"
6235273,Are there women in the photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(women_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Are there women in the photo?"")
    return ""yes"""
5377974,What is the girl playing with?," # girl is the subject, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the girl playing with?"")"
51037065,On which side of the image is the fridge?," # fridge is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the image is the fridge?"")"
5299477,Which kind of bag does the girl carry?," # girl is the subject
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    for girl_patch in girl_patches:
        bag_patches = image_patch.find(""bag"")
        for bag_patch in bag_patches:
            if bag_patch.simple_query(""Is the bag being carried by the girl?"") == ""yes"":
                return bag_patch.simple_query(""Which kind of bag does the girl carry?"") # crop would include the girl so keep her in the query
    # If no bag is being carried by the girl, pick the first bag
    return bag_patches[0].simple_query(""Which kind of bag does the girl carry?"")"
15135617,Is the white dog on a bench?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the white dog on a bench?"")"
1111583,Is the male person to the right of a person?," # male person is a predicate
    image_patch = ImagePatch(image)
    male_patches = image_patch.find(""male person"")
    # Question assumes only one male patch
    if len(male_patches) == 0:
        # If no male is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_patch in male_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if male_patch.horizontal_center > person_patch.horizontal_center:
                return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?," # window and door are not in the image
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
15610844,What kind of place is shown?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of place is shown?"")"
11869032,Is the banana below a bird?," # banana is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the banana below a bird?"")"
9878360,What color is the vehicle to the left of the fence?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    for vehicle_patch in vehicle_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"") # crop would include the fence so keep it in the query
    # If no vehicle is to the left of the fence, pick the first vehicle
    return vehicle_patches[0].simple_query(""What color is the vehicle to the left of the fence?"")"
481765,Are there either any buses or trains in the image?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes only one traffic cone patch
    if len(traffic_cone_patches) == 0:
        return ""no""
    for traffic_cone_patch in traffic_cone_patches:
        if man_patch.horizontal_center < traffic_cone_patch.horizontal_center:
            cap_patches = image_patch.find(""cap"")
            # Question assumes only one cap patch
            if len(cap_patches) == 0:
                return ""no""
            for cap_patch in cap_patches:
                if man_patch.horizontal_center < cap_patch.horizontal_center:
                    return ""yes""
    return ""no"""
11981238,What is common to the blazer and the suit?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    # Question assumes only one blazer patch
    if len(blazer_patches) == 0:
        # If no blazer is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    blazer_patch = blazer_patches[0]
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one suit patch
    if len(suit_patches) == 0:
        # If no suit is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    for suit_patch in suit_patches:
        common_elements = blazer_patch.simple_query(""What is common to the blazer and the suit?"")
        if common_elements != ""nothing"":
            return common_elements
    return ""nothing"""
16245,Is the shirt white or green?," # shirt is the object, white or green is the property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    return shirt_patches[0].verify_property(""shirt"", ""white"") and ""yes"" or ""green"""
2595103,"In which part of the image are the cars, the bottom or the top?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?"," # sand is not a property, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")"
6376614,What color is the car in the middle?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    return car_patches[0].simple_query(""What color is the car in the middle?"")"
712063,What's the lamp made of?," # image_patch = ImagePatch(image)
    # contains a property (made of), so ask directly
    return image_patch.simple_query(""What's the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    for furniture_patch in furniture_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is to the right of the pillow, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is to the right of the pillow?"")"
9647343,What type of material is the patio made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?," # suit is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the clouds in the sky?"")"
9843309,Do the flowers look orange?," # orange is a color, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""flowers"", ""orange"")"
618996,Is there a chair or a bed in this image?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    for truck_patch in truck_patches:
        umbrella_patches = image_patch.find(""umbrella"")
        for umbrella_patch in umbrella_patches:
            if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
                return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = man_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    for pants_patch in pants_patches:
        return pants_patch.simple_query(""What color are the pants the man is wearing?"") # crop would include the pants so keep it in the query"
551601,Are there any pillows or chairs in the image?," # pillow or chair
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    for bag_patch in bag_patches:
        women_patches = image_patch.find(""woman"")
        for woman_patch in women_patches:
            if woman_patch.horizontal_center < bag_patch.horizontal_center:
                return ""yes""
    return ""no"""
5925408,What is the bike in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?," # image_patch = ImagePatch(image)
    # asks for the predicate of a relational verb (eating), so ask directly
    return image_patch.simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?," # image_patch = ImagePatch(image)
    beds_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(beds_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""Are there either beds or desks in the picture?"")
    for bed_patch in beds_patches:
        desks_patches = image_patch.find(""desk"")
        for desk_patch in desks_patches:
            return ""yes""
    return ""no"""
13778498,What type of vehicle is behind the green tree?," # vehicle is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"")"
41019603,What is the child standing on?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?," # wooden item of furniture
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?," # left or right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        if man_patch.horizontal_center < woman_patch.horizontal_center:
            return ""left""
        elif man_patch.horizontal_center > woman_patch.horizontal_center:
            return ""right""
    return ""no"""
1316363,Who is wearing the shirt?," # shirt is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    for kite_patch in kite_patches:
        if kite_patch.verify_property(""kite"", ""triangular""):
            return kite_patch.simple_query(""What color is the kite that looks triangular?"") # crop would include the triangle so keep it in the query
    # If no kite is triangular, pick the first kite
    return kite_patches[0].simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is drinking?"")
    for person_patch in person_patches:
        is_drinking = (person_patch.simple_query(""Is the person drinking?"") == ""yes"")
        if is_drinking:
            return person_patch.simple_query(""Who is drinking?"") # crop would include the drink so keep it in the query
    # If no person is drinking, pick the first person
    return person_patches[0].simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    for building_patch in building_patches:
        tree_patches = image_patch.find(""tree"")
        for tree_patch in tree_patches:
            if building_patch.horizontal_center > tree_patch.horizontal_center:
                return building_patch.simple_query(""Is the building behind the tree white or brown?"") # crop would include the tree so keep it in the query
    # If no building is behind the tree, pick the first building
    return building_patches[0].simple_query(""Is the building behind the tree white or brown?"")"
5749240,Are the glove and the undershirt both black?," # glove and the undershirt are both black
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    is_glove_black = glove_patches[0].verify_property(""glove"", ""black"")
    undershirt_patches = image_patch.find(""undershirt"")
    # Question assumes only one undershirt patch
    if len(undershirt_patches) == 0:
        # If no undershirt is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    is_undershirt_black = undershirt_patches[0].verify_property(""undershirt"", ""black"")
    return bool_to_yesno(is_glove_black and is_undershirt_black)"
18573157,Is the juice in a cup?," # cup is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the juice in a cup?"")"
3445929,Is the brown horse on the right side of the photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown"")
    # Question assumes only one brown patch
    if len(brown_patches) == 0:
        # If no brown is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    for brown_patch in brown_patches:
        if brown_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
16541709,Where is the grass?," # grass is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")"
15764335,Are there any dogs on the tan sand?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""tan sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""Are there any dogs on the tan sand?"")
    for sand_patch in sand_patches:
        dog_patches = image_patch.find(""dog"")
        for dog_patch in dog_patches:
            if dog_patch.horizontal_center > sand_patch.horizontal_center:
                return ""yes""
    return ""no"""
1478089,Are the door and the garage door made of the same material?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    for door_patch in door_patches:
        garage_door_patches = image_patch.find(""garage door"")
        for garage_door_patch in garage_door_patches:
            if door_patch.verify_property(""door"", ""material"") == garage_door_patch.verify_property(""garage door"", ""material""):
                return ""yes""
    return ""no"""
1250685,Was this picture taken in a bathroom or at a dining room?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"")"
10436844,Is the zebra's nose soft and brown?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    zebra_patch = zebra_patches[0]
    nose_patches = zebra_patch.find(""nose"")
    # Question assumes only one nose patch
    if len(nose_patches) == 0:
        return ""no""
    for nose_patch in nose_patches:
        if nose_patch.verify_property(""nose"", ""brown"") and nose_patch.verify_property(""nose"", ""soft""):
            return ""yes""
    return ""no"""
10683765,Does the shirt have blue color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a property (blue color), so ask directly
    return image_patch.verify_property(""shirt"", ""blue"")"
1593352,Do the draperies look white and striped?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""draperies"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    return drapery_patches[0].verify_property(""draperies"", ""white and striped"")"
16553304,Are the trunks both long and wide?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    trunks_patches = image_patch.find(""trunks"")
    # Question assumes only one trunk patch
    if len(trunks_patches) == 0:
        # If no trunks are found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    for trunk_patch in trunks_patches:
        return bool_to_yesno(trunk_patch.verify_property(""trunks"", ""long"") and trunk_patch.verify_property(""trunks"", ""wide""))"
7165102,Is the car on the left of the photo?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the car on the left of the photo?"")"
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?," # banana that looks yellow and green
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for banana_patch in banana_patches:
        if not banana_patch.verify_property(""banana"", ""short""):
            return ""no""
    return ""yes"""
19279872,What is the man to the right of the helmet wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    for man_patch in man_patches:
        helmet_patches = image_patch.find(""helmet"")
        for helmet_patch in helmet_patches:
            if man_patch.horizontal_center > helmet_patch.horizontal_center:
                return man_patch.simple_query(""What is the man to the right of the helmet wearing?"") # crop would include the helmet so keep it in the query
    # If no man is to the right of a helmet, pick the first man
    return man_patches[0].simple_query(""What is the man to the right of the helmet wearing?"")"
4285513,What is the color of the floor?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor?"")
    return floor_patches[0].simple_query(""What is the color of the floor?"")"
3974266,Do the trousers look tan?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return trousers_patches[0].verify_property(""trousers"", ""tan"")"
11595009,What are the devices to the right of the device that is to the right of the remote control?," # 2 right relations, so ask directly
    image_patch = ImagePatch(image)
    remote_patches = image_patch.find(""remote control"")
    # Question assumes only one remote patch
    if len(remote_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    remote_patch = remote_patches[0]
    right_of_remote_patches = image_patch.find(""device"")
    # Question assumes only one patch to the right of the remote control
    if len(right_of_remote_patches) == 0:
        return ""no""
    for right_of_remote_patch in right_of_remote_patches:
        if right_of_remote_patch.horizontal_center > remote_patch.horizontal_center:
            right_of_right_patches = image_patch.find(""device"")
            # Question assumes only one patch to the right of the patch to the right of the remote control
            if len(right_of_right_patches) == 0:
                return ""no""
            for right_of_right_patch in right_of_right_patches:
                if right_of_right_patch.horizontal_center > right_of_remote_patch.horizontal_center:
                    return right_of_right_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    return ""no"""
6183000,Are there nightstands or beds?," # nightstand is a bed
    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_nightstand or is_bed)"
14143982,Is it an outdoors scene?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it an outdoors scene?"")"
6123160,Are the speakers to the left of a Wii controller?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    # Question assumes only one speaker patch
    if len(speaker_patches) == 0:
        # If no speaker is found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    for speaker_patch in speaker_patches:
        wii_patches = image_patch.find(""Wii controller"")
        for wii_patch in wii_patches:
            if speaker_patch.horizontal_center < wii_patch.horizontal_center:
                return ""yes""
    return ""no"""
3681634,Is the plastic fork in the top or in the bottom part of the photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")"
13629530,What is the vehicle on the street?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there chairs or windows in the scene?"")"
10607062,What color is the hat the man is in?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = man_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""no""
    for hat_patch in hat_patches:
        return hat_patch.simple_query(""What color is the hat the man is in?"") # crop would include the hat so keep it in the query"
1849976,What vegetables are to the left of the spoon?," # spoon is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vegetables are to the left of the spoon?"")"
14827816,Is the statue made of bronze or stone?," # bronze or stone
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    for statue_patch in statue_patches:
        is_bronze = statue_patch.verify_property(""statue"", ""bronze"")
        is_stone = statue_patch.verify_property(""statue"", ""stone"")
        if is_bronze:
            return ""bronze""
        elif is_stone:
            return ""stone""
    return ""bronze"" # default to bronze if no statue is found"
857204,What's the woman wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"") # crop would include the shirt so keep it in the query"
2201105,Is the ball pink?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return ball_patches[0].verify_property(""ball"", ""pink"")"
14616023,What piece of furniture are the cords in front of?," # ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the striped animal called?"")"
1479068,Is it outdoors?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it outdoors?"")"
16155046,Is the dry grass below a zebra?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    dry_grass_patches = image_patch.find(""dry grass"")
    # Question assumes only one dry grass patch
    if len(dry_grass_patches) == 0:
        # If no dry grass is found, query the image directly
        return image_patch.simple_query(""Is the dry grass below a zebra?"")
    for dry_grass_patch in dry_grass_patches:
        zebra_patches = image_patch.find(""zebra"")
        for zebra_patch in zebra_patches:
            if zebra_patch.vertical_center > dry_grass_patch.vertical_center:
                return ""yes""
    return ""no"""
16515071,What is the person in the water wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    for person_patch in person_patches:
        is_wearing_swimwear = (person_patch.simple_query(""Is the person wearing swimwear?"") == ""yes"")
        if is_wearing_swimwear:
            return person_patch.simple_query(""What is the person in the water wearing?"") # crop would include the swimwear so keep it in the query
    # If no person is wearing swimwear, pick the first person
    return person_patches[0].simple_query(""What is the person in the water wearing?"")"
161015042,Who is wearing the goggles?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the goggles?"")
    for person_patch in person_patches:
        is_wearing_goggles = (person_patch.simple_query(""Is the person wearing the goggles?"") == ""yes"")
        if is_wearing_goggles:
            return person_patch.simple_query(""Who is wearing the goggles?"") # crop would include the goggles so keep it in the query
    # If no person is wearing the goggles, pick the first person
    return person_patches[0].simple_query(""Who is wearing the goggles?"")"
19149868,What is pulled by the lady?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is pulled by the lady?"")"
5199994,What's the man wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What's the man wearing?"") # crop would include the shirt so keep it in the query"
19184475,Are the man glasses on the left side of the image?," # left side of the image is the leftmost pixel
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    return bool_to_yesno(glasses_patches[0].horizontal_center < image_patch.width / 2)"
7149602,Is the shirt orange or blue?," # shirt is the object, orange or blue is the property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    return shirt_patches[0].verify_property(""shirt"", ""orange"") # crop would include the shirt so keep it in the query"
19479555,What is the person to the right of the benches holding?," # crop would include the person so keep it in the query
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    for person_patch in person_patches:
        return person_patch.simple_query(""What is the person to the right of the benches holding?"")"
19273393,Are there both a door and a window in this photo?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there both a door and a window in this photo?"")"
6481656,What is the man doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"") # crop would include the man so keep it in the query"
13127703,What kind of drink is to the left of the bottle the woman is pouring?," # bottle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")"
2378018,What is the toilet in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"")"
8430841,Is the frisbee to the left of the guy?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    for frisbee_patch in frisbee_patches:
        guy_patches = image_patch.find(""guy"")
        for guy_patch in guy_patches:
            if frisbee_patch.horizontal_center < guy_patch.horizontal_center:
                return ""yes""
    return ""no"""
18616818,The man is watching who?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is watching who?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""The man is watching who?"") # crop would include the man so keep it in the query"
179526,Is the white dog behind a girl?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the white dog behind a girl?"")"
21018827,Is the river murky and calm?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_murky = image_patch.verify_property(""water"", ""murky"")
    is_calm = image_patch.verify_property(""water"", ""calm"")
    return bool_to_yesno(is_murky and is_calm)"
3697449,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there both a racket and a toothbrush in the image?"")"
1904643,What do both the car and the sign have in common?," # ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do both the car and the sign have in common?"")"
11764476,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    for plate_patch in plate_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            is_plate_on_furniture = (plate_patch.simple_query(""Is the plate on the furniture?"") == ""yes"")
            if is_plate_on_furniture:
                return furniture_patch.simple_query(""On what kind of furniture is the plate?"") # crop would include the plate so keep it in the query
    # If no plate is on the furniture, pick the first furniture
    return furniture_patches[0].simple_query(""On what kind of furniture is the plate?"")"
61022361,What is the painting that is to the left of the clock hanging on?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")"
1527392,"What color is the fence, tan or black?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    for fence_patch in fence_patches:
        return fence_patch.verify_property(""fence"", ""tan"") # crop would include the fence so keep it in the query"
19229351,Do you see both bowls and carrots?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bowls_patches = image_patch.find(""bowl"")
    carrots_patches = image_patch.find(""carrot"")
    # Question assumes only one bowl patch and one carrot patch
    if len(bowls_patches) == 0 or len(carrots_patches) == 0:
        # If no bowl or carrot is found, query the image directly
        return image_patch.simple_query(""Do you see both bowls and carrots?"")
    return bool_to_yesno(bowls_patches[0].exists(""bowl"") and carrots_patches[0].exists(""carrot""))"
1297082,On which side is the silver fork?," # silver fork is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the silver fork?"")"
16757832,Are there any blue helmets or napkins?," # image_patch = ImagePatch(image)
    blue_helmets_patches = image_patch.find(""blue helmet"")
    # Question assumes only one blue helmet patch
    if len(blue_helmets_patches) == 0:
        # If no blue helmet is found, query the image directly
        return image_patch.simple_query(""Are there any blue helmets or napkins?"")
    blue_napkins_patches = image_patch.find(""blue napkin"")
    # Question assumes only one blue napkin patch
    if len(blue_napkins_patches) == 0:
        # If no blue napkin is found, query the image directly
        return image_patch.simple_query(""Are there any blue helmets or napkins?"")
    return ""yes"""
839816,"In which part of the photo is the racket, the top or the bottom?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12385226,Is there a mirror in the bathroom?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        # If no mirror is found, query the image directly
        return image_patch.simple_query(""Is there a mirror in the bathroom?"")
    return ""yes"""
18720852,Are there either blankets or tents in this picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    blankets_patches = image_patch.find(""blanket"")
    tents_patches = image_patch.find(""tent"")
    # Question assumes only one blanket patch and one tent patch
    if len(blankets_patches) == 0 and len(tents_patches) == 0:
        # If no blanket or tent is found, query the image directly
        return image_patch.simple_query(""Are there either blankets or tents in this picture?"")
    if len(blankets_patches) > 0 and len(tents_patches) > 0:
        return ""yes""
    return ""no"""
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    cardboard_patches = image_patch.find(""cardboard box"")
    # Question assumes only one cardboard patch
    if len(cardboard_patches) == 0:
        # If no cardboard box is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    for cardboard_patch in cardboard_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center < image_patch.horizontal_center:
                if cardboard_patch.horizontal_center > woman_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""left"""
19453453,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")"
11737187,What is in front of the flowers that look red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the flowers that look red?"")"
15710688,Is the shirt short sleeved or sleeveless?," # shirt is a property of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    for person_patch in person_patches:
        shirt_patches = person_patch.find(""shirt"")
        # Question assumes only one shirt patch
        if len(shirt_patches) == 0:
            # If no shirt is found, query the image directly
            return person_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
        for shirt_patch in shirt_patches:
            if shirt_patch.verify_property(""shirt"", ""short sleeved""):
                return ""short sleeved""
            elif shirt_patch.verify_property(""shirt"", ""sleeveless""):
                return ""sleeveless""
    return ""sleeveless"""
5533952,What are the white wires connected to?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    white_wire_patches = image_patch.find(""white wire"")
    # Question assumes only one white wire patch
    if len(white_wire_patches) == 0:
        # If no white wire is found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    for white_wire_patch in white_wire_patches:
        return white_wire_patch.simple_query(""What are the white wires connected to?"") # crop would include the wires so keep it in the query"
11313555,"What type of furniture is that, a table or a nightstand?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")"
10508893,What animals are in front of the trees?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animals are in front of the trees?"")"
14501997,What is the gate made of?," # gate is a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    for device_patch in device_patches:
        return device_patch.simple_query(""What color is the device on top of the table?"") # crop would include the device so keep it in the query"
181032044,Are these closed drawers?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    drawers_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawers_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    for drawer_patch in drawers_patches:
        return bool_to_yesno(drawer_patch.verify_property(""drawer"", ""closed""))"
383,What kind of furniture is made of wood?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wood""):
            return furniture_patch.simple_query(""What kind of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is made of wood?"")"
101054962,What is the person by the bananas wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    for person_patch in person_patches:
        is_wearing = person_patch.simple_query(""Is the person by the bananas wearing?"")
        if is_wearing == ""yes"":
            return person_patch.simple_query(""What is the person by the bananas wearing?"") # crop would include the shirt so keep it in the query
    # If no person is wearing, pick the first person
    return person_patches[0].simple_query(""What is the person by the bananas wearing?"")"
759165,What is the color of the tower in the middle of the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    # Question assumes only one tower patch
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    return tower_patches[0].simple_query(""What is the color of the tower in the middle of the picture?"")"
10775539,Is this giraffe tall and white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_tall = image_patch.verify_property(""giraffe"", ""tall"")
    is_white = image_patch.verify_property(""giraffe"", ""white"")
    return bool_to_yesno(is_tall and is_white)"
19981804,On which side of the photo is the colorful screen?," # assumes only one colorful screen
    image_patch = ImagePatch(image)
    colorful_screen_patches = image_patch.find(""colorful screen"")
    if len(colorful_screen_patches) == 0:
        # If no colorful screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    if colorful_screen_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7903654,Is the tap on the left side or on the right?," # taps are on the left and right side of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tap on the left side or on the right?"")"
6206183,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?," # assumes only one coat patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    return coat_patches[0].simple_query(""What color is the coat?"") # crop would include the color so keep it in the query"
13123207,Does the kite near the field look high and red?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    for kite_patch in kite_patches:
        return kite_patch.verify_property(""kite"", ""high and red"")"
7740092,Are there any utensils in this picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    utensils_patches = image_patch.find(""utensils"")
    # Question assumes only one utensils patch
    if len(utensils_patches) == 0:
        # If no utensils are found, query the image directly
        return image_patch.simple_query(""Are there any utensils in this picture?"")
    return ""yes"""
8774975,What is around the guy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_staircase_different = image_patch.verify_property(""staircase"", ""color"") != image_patch.verify_property(""sky"", ""color"")
    return bool_to_yesno(is_staircase_different)"
1605874,What color are the containers that are on the right?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center > image_patch.horizontal_center:
            return container_patch.simple_query(""What color are the containers that are on the right?"") # crop would include the container so keep it in the query
    # If no container is on the right, pick the first container
    return container_patches[0].simple_query(""What color are the containers that are on the right?"")"
12495781,Are the people to the right or to the left of the cone that is orange?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    cone_patches = image_patch.find(""cone"")
    # Question assumes only one cone patch
    if len(cone_patches) == 0:
        # If no cone is found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    for cone_patch in cone_patches:
        if cone_patch.verify_property(""cone"", ""orange""):
            people_patches = image_patch.find(""people"")
            # Question assumes only one people patch
            if len(people_patches) == 0:
                # If no people are found, query the image directly
                return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
            for people_patch in people_patches:
                if people_patch.horizontal_center > cone_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left"""
14165681,"What type of clothing is light, the sweater or the cap?"," # sweater or cap
    image_patch = ImagePatch(image)
    sweater_patches = image_patch.find(""sweater"")
    # Question assumes only one sweater patch
    if len(sweater_patches) == 0:
        # If no sweater is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    if sweater_patches[0].verify_property(""sweater"", ""light""):
        return ""sweater""
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    if cap_patches[0].verify_property(""cap"", ""light""):
        return ""cap""
    return ""no"""
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?," # left, right
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    for chair_patch in chair_patches:
        jeans_patches = image_patch.find(""jeans"")
        for jeans_patch in jeans_patches:
            if chair_patch.horizontal_center > jeans_patch.horizontal_center:
                return ""right""
            elif chair_patch.horizontal_center < jeans_patch.horizontal_center:
                return ""left""
    return ""no"""
5617223,"What color is the container to the left of the horse, green or silver?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    for container_patch in container_patches:
        is_silver = container_patch.verify_property(""container"", ""silver"")
        is_green = container_patch.verify_property(""container"", ""green"")
        if is_silver:
            return ""silver""
        elif is_green:
            return ""green""
    return ""silver"" # if no silver or green container is found, return silver"
2428964,Is the water gray or teal?," # gray or teal
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].simple_query(""What is the color of the water?"") # crop would include the color so keep it in the query"
19620769,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?," # left or right
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the picture is the lamp?"")"
1325617,Does the brown animal look tiny?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown"")
    # Question assumes only one brown patch
    if len(brown_patches) == 0:
        # If no brown is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    for brown_patch in brown_patches:
        return brown_patch.verify_property(""brown"", ""tiny"")"
5672532,Does that shirt look long sleeved?," # shirt is a property of the object
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    return shirt_patches[0].verify_property(""shirt"", ""long sleeved"")"
6146439,Does the box look green?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""box"", ""green"")"
1910285,Is the white container on the left of the image?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white"")
    # Question assumes only one white patch
    if len(white_patches) == 0:
        # If no white is found, query the image directly
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    for white_patch in white_patches:
        if white_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
13362134,Is that shower curtain to the left of a toilet?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center > shower_curtain_patch.horizontal_center:
                return ""yes""
    return ""no"""
161060488,Is there any cabinet to the right of the stove?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for cabinet_patch in cabinet_patches:
        stove_patches = image_patch.find(""stove"")
        for stove_patch in stove_patches:
            if cabinet_patch.horizontal_center > stove_patch.horizontal_center:
                return ""yes""
    return ""no"""
111055042,Is the chair on the right?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    if chair_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
151068,Which kind of clothing is white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""white""):
            return clothing_patch.simple_query(""Which kind of clothing is white?"") # crop would include the white so keep it in the query
    # If no clothing is white, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is white?"")"
19387951,Is this place the forest or the garden?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"")"
1781695,What's on the blanket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What's on the blanket?"")
    return blanket_patches[0].simple_query(""What's on the blanket?"") # crop would include the blanket so keep it in the query"
17699779,Is she on a bed?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is she on a bed?"")"
464441,"What piece of furniture is the blanket on, a bed or a sofa?"," # ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")"
9505496,Are the wires above a man?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    wire_patches = image_patch.find(""wires"")
    # Question assumes only one wire patch
    if len(wire_patches) == 0:
        # If no wire is found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    for wire_patch in wire_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if wire_patch.vertical_center > man_patch.vertical_center:
                return ""yes""
    return ""no"""
4625512,What is the woman doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman doing?"")
    return woman_patches[0].simple_query(""What is the woman doing?"") # crop would include the shirt so keep it in the query"
9441941,Is the woman's hair red or black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    for woman_patch in woman_patches:
        is_red = woman_patch.verify_property(""woman"", ""red hair"")
        is_black = woman_patch.verify_property(""woman"", ""black hair"")
        if is_red:
            return ""red""
        elif is_black:
            return ""black""
    return ""black"" # if no red hair, assume black hair"
2387432,What's on the table?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's on the table?"")"
10534717,What is the pillow on?," # pillow is on the blanket
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""What is the pillow on?"")
    return pillow_patches[0].simple_query(""What is the pillow on?"") # crop would include the blanket so keep it in the query"
19335685,"What fruits is the container behind of, apples or bananas?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")"
3127817,The goat is standing in what?," # goat is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The goat is standing in what?"")"
1588567,Where does the man that to the right of the mirror sit?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    man_patch = man_patches[0]
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    for mirror_patch in mirror_patches:
        if man_patch.horizontal_center > mirror_patch.horizontal_center:
            return man_patch.simple_query(""Where does the man that to the right of the mirror sit?"") # crop would include the mirror so keep it in the query
    # If no man is to the right of the mirror, pick the first man
    return man_patches[0].simple_query(""Where does the man that to the right of the mirror sit?"")"
7399543,What is the floor made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is the house behind of?"")"
1174904,Is the cobblestone sidewalk both large and gray?," # gray is a property, large is an adjective
    image_patch = ImagePatch(image)
    is_gray = image_patch.verify_property(""cobblestone"", ""gray"")
    is_large = image_patch.verify_property(""cobblestone"", ""large"")
    return bool_to_yesno(is_gray and is_large)"
13375231,What is the lettuce on?," # lettuce is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lettuce on?"")"
1194027,Which kind of clothing is black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
9963477,Is the statue wearing a dress?," # dress is a property
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the statue wearing a dress?"")"
1151995,Which side of the photo is the yellow vase on?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    yellow_vase_patches = image_patch.find(""yellow vase"")
    # Question assumes only one yellow vase patch
    if len(yellow_vase_patches) == 0:
        # If no yellow vase is found, query the image directly
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    if yellow_vase_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
712821,What is common to the bear and the belt?," # bear and belt are not in the same image
    image_patch_bear = ImagePatch(image)
    image_patch_belt = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch_bear.simple_query(""What is common to the bear and the belt?"") # crop would include the belt so keep it in the query"
1757418,What is the vehicle to the right of the car?," # vehicle is a general term, so ask directly
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    for vehicle_patch in vehicle_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if vehicle_patch.horizontal_center > car_patch.horizontal_center:
                return vehicle_patch.simple_query(""What is the vehicle to the right of the car?"") # crop would include the car so keep it in the query
    # If no vehicle is to the right of the car, pick the first vehicle
    return vehicle_patches[0].simple_query(""What is the vehicle to the right of the car?"")"
7624100,Are the trunks that are gray wet and large?," # gray, wet, large
    image_patch = ImagePatch(image)
    trunks_patches = image_patch.find(""trunks"")
    # Question assumes only one trunk patch
    if len(trunks_patches) == 0:
        # If no trunks are found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunks_patches:
        is_gray = (trunk_patch.verify_property(""trunks"", ""gray"") == ""yes"")
        is_wet = (trunk_patch.verify_property(""trunks"", ""wet"") == ""yes"")
        is_large = (trunk_patch.verify_property(""trunks"", ""large"") == ""yes"")
        if is_gray and is_wet and is_large:
            return ""yes""
    return ""no"""
1125474,"On which side of the photo is the iron fence, the right or the left?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    # Question assumes only one iron fence patch
    if len(iron_fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    if iron_fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1300375,What is the name of the item of furniture that the printer is on?," # assumes only one printer patch
    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    if len(printer_patches) == 0:
        # If no printer is found, query the image directly
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    return printer_patches[0].simple_query(""What is the name of the item of furniture that the printer is on?"")"
5925196,What's the building covered by?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""What's the building covered by?"")
    for building_patch in building_patches:
        cover_patches = image_patch.find(""cover"")
        for cover_patch in cover_patches:
            return cover_patch.simple_query(""What's the building covered by?"") # crop would include the cover so keep it in the query
    # If no building is covered, pick the first building
    return building_patches[0].simple_query(""What's the building covered by?"")"
1948055,What watercraft is the white rope tying?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    for watercraft_patch in watercraft_patches:
        is_white_rope = (watercraft_patch.simple_query(""Is the rope white?"") == ""yes"")
        if is_white_rope:
            return watercraft_patch.simple_query(""What watercraft is the white rope tying?"") # crop would include the rope so keep it in the query
    # If no watercraft is found, pick the first watercraft
    return watercraft_patches[0].simple_query(""What watercraft is the white rope tying?"")"
8540582,What kind of animal is in front of the leafy trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    for woman_patch in woman_patches:
        return woman_patch.simple_query(""What does the walking woman by the bus wear?"") # crop would include the bus so keep it in the query"
1129508,Is the controller to the left of a pillow?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if controller_patch.horizontal_center < pillow_patch.horizontal_center:
                return ""yes""
    return ""no"""
18664084,Is there any sheep by the fence?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is there any sheep by the fence?"")
    for sheep_patch in sheep_patches:
        if sheep_patch.exists(""fence""):
            return ""yes""
    return ""no"""
6912079,What animal is this?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is this?"")
    return animal_patches[0].simple_query(""What animal is this?"")"
3412029,Where is the person?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person?"")
    return person_patches[0].simple_query(""Where is the person?"")"
14161122,What animal is in the water?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")"
15699496,What is the cup that looks clean made of?," # cup is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the cup that looks clean made of?"")"
12765451,What animals are to the right of the ladder?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for ladder_patch in ladder_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > ladder_patch.horizontal_center:
                return animal_patch.simple_query(""What animals are to the right of the ladder?"") # crop would include the animal so keep it in the query
    # If no animal is to the right of the ladder, pick the first animal
    return animal_patches[0].simple_query(""What animals are to the right of the ladder?"")"
191044307,What animal is black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a property (black), so ask directly
    return image_patch.simple_query(""What animal is black?"")"
12639181,Who is wearing shorts?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, pick the first person
    return person_patches[0].simple_query(""Who is wearing shorts?"")"
10630949,Is the person that is not male wearing an elbow pad?," # elbow pad is a noun, so ask directly
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")"
14544602,What is the boy holding?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    for boy_patch in boy_patches:
        is_holding = (boy_patch.simple_query(""Is the boy holding something?"") == ""yes"")
        if is_holding:
            return boy_patch.simple_query(""What is the boy holding?"") # crop would include the object so keep it in the query
    # If no boy is holding anything, pick the first boy
    return boy_patches[0].simple_query(""What is the boy holding?"")"
2986699,Of what material the dish?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    dish_patches = image_patch.find(""dish"")
    # Question assumes only one dish patch
    if len(dish_patches) == 0:
        # If no dish is found, query the image directly
        return image_patch.simple_query(""Of what material the dish?"")
    return dish_patches[0].simple_query(""Of what material the dish?"") # crop would include the material so keep it in the query"
161013513,What kind of animal is on the street?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""on the street""):
            return animal_patch.simple_query(""What kind of animal is on the street?"") # crop would include the street so keep it in the query
    # If no animal is on the street, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is on the street?"")"
15143936,What animal is before the roof?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is before the roof?"")"
1955043,Who is playing with the ball?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing with the ball?"")"
91044150,What is the name of the animals in front of the trees beside the river?," # ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?," # fruit hanging
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is hanging?"")
    return fruit_patches[0].simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?," # kangaroos and birds are not in the same image
    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)"
10457241,What is the color of the trousers?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"")"
2913850,Is the placemat in the bottom or in the top part?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered with blanket?"")"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    sweater_patches = image_patch.find(""sweater"")
    # Question assumes only one sweater patch
    if len(sweater_patches) == 0:
        # If no sweater is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    for sweater_patch in sweater_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            # If no man is found, query the image directly
            return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
        man_patch = man_patches[0]
        furniture_patches = image_patch.find(""furniture"")
        # Question assumes only one furniture patch
        if len(furniture_patches) == 0:
            # If no furniture is found, query the image directly
            return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > man_patch.horizontal_center:
                return furniture_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"") # crop would include the sweater so keep it in the query
    # If no furniture is found, pick the first furniture patch
    return furniture_patches[0].simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    if desk_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)"
19737232,Is the book on the right of the picture?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the book on the right of the picture?"")"
475064,Who is wearing the glasses?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        glasses_patches = image_patch.find(""glasses"")
        for glasses_patch in glasses_patches:
            return glasses_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no glasses are found, pick the first person
    return person_patches[0].simple_query(""Who is wearing the glasses?"")"
8594579,Is there a woman to the right of the orange object that is to the right of the person?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")"
14602992,Which side of the image is the couch on?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
9944587,How tall is the man that is wearing a shirt?," # height is a property
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")"
13736712,Are there any giraffes?," # image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Are there any giraffes?"")
    return ""yes"""
6996118,The young girl is wearing what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The young girl is wearing what?"")
    for girl_patch in girl_patches:
        return girl_patch.simple_query(""The young girl is wearing what?"") # crop would include the shirt so keep it in the query"
19992576,Is the basket on the floor small and brown?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    for basket_patch in basket_patches:
        is_brown = basket_patch.verify_property(""basket"", ""brown"")
        is_small = basket_patch.verify_property(""basket"", ""small"")
        if is_brown and is_small:
            return ""yes""
    return ""no"""
17332401,What is the boy in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy in front of?"")
    for boy_patch in boy_patches:
        return boy_patch.simple_query(""What is the boy in front of?"") # crop would include the boy so keep it in the query"
15586294,Which side is the leather armchair on?," # left or right
    image_patch = ImagePatch(image)
    leather_armchair_patches = image_patch.find(""leather armchair"")
    # Question assumes only one leather armchair patch
    if len(leather_armchair_patches) == 0:
        # If no leather armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    if leather_armchair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15658324,What is the horse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?," # ask directly
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    controller_patch = controller_patches[0]
    item_patches = image_patch.find(""item"")
    # Question assumes only one item patch
    if len(item_patches) == 0:
        # If no item is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    for item_patch in item_patches:
        if item_patch.verify_property(""item"", ""controller"") and item_patch.verify_property(""item"", ""controller color""):
            return item_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"") # crop would include the controller so keep it in the query
    # If no item is found with the same color as the controller, pick the first item
    return item_patches[0].simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")"
2531874,Who is playing?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is playing?"")"
3112009,Is the plate on the left side?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    if plate_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
1527613,On which side of the picture is the bag?," # bag is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the picture is the bag?"")"
11781054,Are both the road and the roof the same color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""Are both the road and the roof the same color?"")
    for road_patch in road_patches:
        roof_patches = image_patch.find(""roof"")
        for roof_patch in roof_patches:
            if road_patch.verify_property(""road"", ""color"") == roof_patch.verify_property(""roof"", ""color""):
                return ""yes""
    return ""no"""
161027384,What is the green rug hanging on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    green_rug_patches = image_patch.find(""green rug"")
    # Question assumes only one green rug patch
    if len(green_rug_patches) == 0:
        # If no green rug is found, query the image directly
        return image_patch.simple_query(""What is the green rug hanging on?"")
    for green_rug_patch in green_rug_patches:
        is_hanging_on = (green_rug_patch.simple_query(""Is the green rug hanging on?"") == ""yes"")
        if is_hanging_on:
            return green_rug_patch.simple_query(""What is the green rug hanging on?"") # crop would include the hanging so keep it in the query
    # If no green rug is hanging, pick the first green rug
    return green_rug_patches[0].simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?," # laptop is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Who in the photo is standing?"")
    for people_patch in people_patches:
        return people_patch.simple_query(""Who in the photo is standing?"") # crop would include the shirt so keep it in the query"
693318,Do you see any plates in the photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    plates_patches = image_patch.find(""plates"")
    # Question assumes only one plate patch
    if len(plates_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Do you see any plates in the photo?"")
    return ""yes"""
19613394,The person on the skateboard is wearing what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    for person_patch in person_patches:
        return person_patch.simple_query(""The person on the skateboard is wearing what?"") # crop would include the skateboard so keep it in the query"
19927237,Is the blue car in front of the white van?," # blue car, white van
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car in front of the white van?"")
    for blue_car_patch in blue_car_patches:
        white_van_patches = image_patch.find(""white van"")
        for white_van_patch in white_van_patches:
            if blue_car_patch.horizontal_center < white_van_patch.horizontal_center:
                return ""yes""
    return ""no"""
31054022,What is the box sitting on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What is the box sitting on?"")
    for box_patch in box_patches:
        is_sitting_on = (box_patch.simple_query(""Is the box sitting on something?"") == ""yes"")
        if is_sitting_on:
            return box_patch.simple_query(""What is the box sitting on?"") # crop would include the object on the box so keep it in the query
    # If no box is sitting on something, pick the first box
    return box_patches[0].simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_snowy = image_patch.verify_property(""ground"", ""snowy"")
    is_brown = image_patch.verify_property(""ground"", ""brown"")
    return bool_to_yesno(is_snowy and is_brown)"
15185768,Does the sky look blue and clear?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""sky"", ""blue and clear"")"
1589160,Does the person that is sitting lean against a fire hydrant?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    for person_patch in person_patches:
        # check if the person is leaning
        is_leaning = person_patch.verify_property(""person"", ""leaning"")
        if is_leaning:
            # check if the person is leaning against a fire hydrant
            fire_hydrant_patches = image_patch.find(""fire hydrant"")
            for fire_hydrant_patch in fire_hydrant_patches:
                if fire_hydrant_patch.horizontal_center > person_patch.horizontal_center:
                    return ""yes""
    return ""no"""
2142522,Are there any shopping carts or mannequins in this photo?," # image_patch = ImagePatch(image)
    shopping_carts_patches = image_patch.find(""shopping cart"")
    mannequins_patches = image_patch.find(""mannequin"")
    # Question assumes only one patch of each
    if len(shopping_carts_patches) == 0 and len(mannequins_patches) == 0:
        # If no shopping cart or mannequin is found, query the image directly
        return image_patch.simple_query(""Are there any shopping carts or mannequins in this photo?"")
    return bool_to_yesno(len(shopping_carts_patches) > 0 or len(mannequins_patches) > 0)"
17362234,Are there cages or scrub brushes in this picture?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there cages or scrub brushes in this picture?"")"
4955854,Is the lamp below the chain?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    for lamp_patch in lamp_patches:
        chain_patches = image_patch.find(""chain"")
        for chain_patch in chain_patches:
            if lamp_patch.vertical_center < chain_patch.vertical_center:
                return ""yes""
    return ""no"""
10463545,Is the computer to the right of the other computer silver or black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    # Question assumes only one computer patch
    if len(computer_patches) == 0:
        # If no computer is found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    for computer_patch in computer_patches:
        other_computer_patches = image_patch.find(""computer"")
        for other_computer_patch in other_computer_patches:
            if other_computer_patch.horizontal_center > computer_patch.horizontal_center:
                return computer_patch.simple_query(""Is the computer to the right of the other computer silver or black?"") # crop would include the other computer so keep it in the query
    # If no other computer is found, pick the first computer
    return computer_patches[0].simple_query(""Is the computer to the right of the other computer silver or black?"")"
2265037,What is the girl wearing?," # girl is a predicate
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue"")
    # Question assumes only one blue patch
    if len(blue_patches) == 0:
        # If no blue is found, query the image directly
        return image_patch.simple_query(""Are there any blue numbers or letters?"")
    for blue_patch in blue_patches:
        if blue_patch.verify_property(""numbers or letters"", ""blue""):
            return ""yes""
    return ""no"""
3483992,Is the long bus to the left or to the right of the person with the backpack?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    for bus_patch in bus_patches:
        backpack_patches = image_patch.find(""backpack"")
        for backpack_patch in backpack_patches:
            if backpack_patch.horizontal_center > bus_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
13598461,What is the device that is not on called?," # crop would include the device so keep it in the query
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    for device_patch in device_patches:
        if device_patch.verify_property(""device"", ""on""):
            continue
        return device_patch.simple_query(""What is the device that is not on called?"") # crop would include the device so keep it in the query"
13885436,The sky has what color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"")"
7432467,Is the black container to the left of the man that is on the motorcycle?," # black container, man, motorcycle
    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        # If no black container is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    for black_container_patch in black_container_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            # If no man is found, query the image directly
            return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
        man_patch = man_patches[0]
        motorcycle_patches = image_patch.find(""motorcycle"")
        for motorcycle_patch in motorcycle_patches:
            if man_patch.horizontal_center > black_container_patch.horizontal_center and man_patch.horizontal_center < motorcycle_patch.horizontal_center:
                return ""yes""
    return ""no"""
19540096,Is the fire in an oven?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    # Question assumes only one fire patch
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    for fire_patch in fire_patches:
        oven_patches = image_patch.find(""oven"")
        for oven_patch in oven_patches:
            if fire_patch.horizontal_center > oven_patch.horizontal_center:
                return ""yes""
    return ""no"""
18291107,The horse is where?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The horse is where?"")"
5435474,Is the man that is to the left of the motorbike wearing a hat?," # image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    man_patch = man_patches[0]
    motorbike_patches = image_patch.find(""motorbike"")
    for motorbike_patch in motorbike_patches:
        if man_patch.horizontal_center < motorbike_patch.horizontal_center:
            is_wearing_hat = (man_patch.simple_query(""Is the man wearing a hat?"") == ""yes"")
            if is_wearing_hat:
                return ""yes""
    return ""no"""
226307,Are there any tables in the photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Are there any tables in the photo?"")
    return ""yes"""
1944826,Who is reflected in the mirror?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is reflected in the mirror?"")"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one utensil patch
    if len(cooking_utensil_patches) == 0:
        # If no utensil is found, query the image directly
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    for utensil_patch in utensil_patches:
        stove_patches = image_patch.find(""stove"")
        for stove_patch in stove_patches:
            if stove_patch.horizontal_center > utensil_patch.horizontal_center:
                return utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"") # crop would include the stove so keep it in the query
    # If no utensil is on top of the stove, pick the first utensil
    return utensil_patches[0].simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")"
18435846,What is the color of the balloon that is to the right of the backpack?," # assumes only one balloon patch
    image_patch = ImagePatch(image)
    balloon_patches = image_patch.find(""balloon"")
    # Question assumes only one balloon patch
    if len(balloon_patches) == 0:
        # If no balloon is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    for balloon_patch in balloon_patches:
        backpack_patches = image_patch.find(""backpack"")
        for backpack_patch in backpack_patches:
            if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
                return balloon_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"") # crop would include the balloon so keep it in the query
    # If no balloon is to the right of the backpack, pick the first balloon
    return balloon_patches[0].simple_query(""What is the color of the balloon that is to the right of the backpack?"")"
8390894,Is the woman to the right of the man sitting on a sofa?," # woman, man, sofa
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    for woman_patch in woman_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            # If no man is found, query the image directly
            return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
        for man_patch in man_patches:
            sofa_patches = image_patch.find(""sofa"")
            # Question assumes only one sofa patch
            if len(sofa_patches) == 0:
                # If no sofa is found, query the image directly
                return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
            for sofa_patch in sofa_patches:
                if man_patch.horizontal_center > sofa_patch.horizontal_center and woman_patch.horizontal_center > man_patch.horizontal_center:
                    return ""yes""
    return ""no"""
18896007,Which side of the image is the pot on?," # pot is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which side of the image is the pot on?"")"
19323898,Is that pillow on a couch?," # pillow is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is that pillow on a couch?"")"
1281034,Where are the trees?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the trees?"")"
13515147,What is on the cow?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""What is on the cow?"")
    for cow_patch in cow_patches:
        return cow_patch.simple_query(""What is on the cow?"") # crop would include the object so keep it in the query"
91036716,What is the skater doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    # Question assumes only one skater patch
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    for person_patch in person_patches:
        boy_patches = image_patch.find(""boy"")
        for boy_patch in boy_patches:
            is_carrying = (person_patch.simple_query(""Is the person to the left of the boy carrying?"") == ""yes"")
            if is_carrying:
                return person_patch.simple_query(""What is the person to the left of the boy carrying?"") # crop would include the bag so keep it in the query
    # If no person is carrying, pick the first person
    return person_patches[0].simple_query(""What is the person to the left of the boy carrying?"")"
13152020,Is the ground wet or dry?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Is the ground wet or dry?"")
    return ground_patches[0].simple_query(""Is the ground wet or dry?"")"
19312096,"On which side is the purse, the left or the right?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    if purse_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""Are there breads in this photograph?"")
    return ""yes"""
9113663,Do you see either any snow or sand that are white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one snow patch and one sand patch
    if len(snow_patches) == 0 or len(sand_patches) == 0:
        # If no snow or sand is found, query the image directly
        return image_patch.simple_query(""Do you see either any snow or sand that are white?"")
    for snow_patch in snow_patches:
        if snow_patch.verify_property(""snow"", ""white""):
            return ""yes""
    for sand_patch in sand_patches:
        if sand_patch.verify_property(""sand"", ""white""):
            return ""yes""
    return ""no"""
10243612,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"")"
15599523,Is the dog on the right side?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    if dog_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
101019673,What is the man wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What is the man wearing?"") # crop would include the shirt so keep it in the query"
333047,Do you see any men to the right of the orange tent?," # orange tent is the rightmost object
    image_patch = ImagePatch(image)
    orange_tent_patches = image_patch.find(""orange tent"")
    # Question assumes only one orange tent patch
    if len(orange_tent_patches) == 0:
        # If no orange tent is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for orange_tent_patch in orange_tent_patches:
        men_patches = image_patch.find(""man"")
        for man_patch in men_patches:
            if man_patch.horizontal_center > orange_tent_patch.horizontal_center:
                return ""yes""
    return ""no"""
13907796,Is the shirt striped and green?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    for shirt_patch in shirt_patches:
        is_striped = shirt_patch.verify_property(""shirt"", ""striped"")
        is_green = shirt_patch.verify_property(""shirt"", ""green"")
        if is_striped and is_green:
            return ""yes""
    return ""no"""
17207604,Are there either bottles or shelves?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")"
7165131,Is that train engine small or large?," # contains a property (small, large)
    image_patch = ImagePatch(image)
    engine_patches = image_patch.find(""train engine"")
    # Question assumes only one engine patch
    if len(engine_patches) == 0:
        # If no engine is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    return engine_patches[0].verify_property(""train engine"", ""small"")"
21049362,Where are the railroad tracks?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?," # image_patch = ImagePatch(image)
    # asks for the predicate of a relational verb (looking at), so ask directly
    return image_patch.simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the children playing?"")"
598297,Are there combs or figurines in the picture?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there combs or figurines in the picture?"")"
16409127,What is the wire on?," # wire is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    # Question assumes only one tunnel patch
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    if tunnel_patches[0].verify_property(""tunnel"", ""small""):
        return ""small""
    else:
        return ""large"""
17560468,Do you see trains or windows?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the person near the man wearing?"")"
12352375,Is the vehicle that is sitting down black or blue?," # vehicle is a noun, so ask directly
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""sitting down""):
            return vehicle_patch.simple_query(""Is the vehicle that is sitting down black or blue?"") # crop would include sitting down so keep it in the query
    # If no vehicle is sitting down, pick the first vehicle
    return vehicle_patches[0].simple_query(""Is the vehicle that is sitting down black or blue?"")"
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    trash_can_patches = image_patch.find(""metal trash can"")
    # Question assumes only one trash can patch
    if len(trash_can_patches) == 0:
        # If no trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    for trash_can_patch in trash_can_patches:
        white_patches = image_patch.find(""white"")
        for white_patch in white_patches:
            if white_patch.horizontal_center > trash_can_patch.horizontal_center:
                return ""left""
    return ""right"""
5800248,Is it outdoors?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it outdoors?"")"
4604785,Does the pizza slice to the left of the pizza have large size?," # pizza slice is a subpatch of pizza
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    for pizza_patch in pizza_patches:
        slice_patches = pizza_patch.find(""pizza slice"")
        for slice_patch in slice_patches:
            if slice_patch.simple_query(""Is the pizza slice large?"") == ""yes"":
                return ""yes""
    return ""no"""
15185845,What's the man wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What's the man wearing?"") # crop would include the shirt so keep it in the query"
2282232,Where is the snow?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"")"
7889197,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?," # image_patch = ImagePatch(image)
    blankets_patches = image_patch.find(""blanket"")
    pictures_patches = image_patch.find(""picture"")
    # Question assumes only one patch of each
    if len(blankets_patches) == 0 and len(pictures_patches) == 0:
        # If no blankets or pictures are found, query the image directly
        return image_patch.simple_query(""Are there either any blankets or pictures in the photograph?"")
    if len(blankets_patches) == 0:
        return ""yes"" if len(pictures_patches) > 0 else ""no""
    if len(pictures_patches) == 0:
        return ""yes"" if len(blankets_patches) > 0 else ""no""
    return ""yes"""
154682,Where does the bird stand on?," # bird on what?
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Where does the bird stand on?"")
    return bird_patches[0].simple_query(""Where does the bird stand on?"")"
10435315,Is the man holding a racket?," # image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    for racket_patch in racket_patches:
        if man_patch.horizontal_center > racket_patch.horizontal_center:
            return ""yes""
    return ""no"""
121035887,Do the man shorts have white color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    shorts_patches = image_patch.find(""man shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        # If no shorts are found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    return bool_to_yesno(shorts_patches[0].verify_property(""man shorts"", ""white""))"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?," # vehicle, man, cows
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")"
19659501,What is the color of the umbrella the bird is on?," # ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")"
10595217,Where is the grass?," # grass is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")"
14803743,Which kind of clothing is black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
19743238,Is the man on the right side?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    if man_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
3965204,Are the mountains covered with snow?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the mountains covered with snow?"")"
141024710,Are there both windows and cars in the picture?," # window and car are not in the image
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the shirt is?"")"
3623367,What's he doing?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What's he doing?"")"
15634950,Where is the giraffe in front of the hay eating from?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    for giraffe_patch in giraffe_patches:
        hay_patches = image_patch.find(""hay"")
        for hay_patch in hay_patches:
            if giraffe_patch.horizontal_center < hay_patch.horizontal_center:
                return ""left""
            elif giraffe_patch.horizontal_center > hay_patch.horizontal_center:
                return ""right""
    return ""no"""
16644500,What animal is the log pulled by?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is the log pulled by?"")"
3202108,Which side is the car on?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10137201,Are the papers in the bottom part of the picture?," # crop would include the papers so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")"
5325670,Is the boy to the left or to the right of the person that is on the left?," # left of left is right
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    for boy_patch in boy_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center < image_patch.horizontal_center:
                if boy_patch.horizontal_center < person_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right""
    return ""no"""
8438091,The picture is what color?," # image_patch = ImagePatch(image)
    # contains a property (color), so ask directly
    return image_patch.simple_query(""The picture is what color?"")"
4325939,On which side of the photo is the banana?," # banana is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side of the photo is the banana?"")"
1425189,What is the name of the brown piece of furniture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""brown""):
            return furniture_patch.simple_query(""What is the name of the brown piece of furniture?"") # crop would include the brown color so keep it in the query
    # If no brown furniture is found, pick the first furniture
    return furniture_patches[0].simple_query(""What is the name of the brown piece of furniture?"")"
5119962,Is the man to the right of glasses?," # image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    lid_patches = image_patch.find(""toilet lid"")
    # Question assumes only one lid patch
    if len(lid_patches) == 0:
        # If no lid is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    if lid_patches[0].verify_property(""lid"", ""down""):
        return ""down""
    else:
        return ""up"""
6522554,Which kind of device does the man hold?," # asks for the predicate of a relational verb (holding), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of device does the man hold?"")"
870619,What is the device to the left of the person that is to the left of the television?," # left, left, left
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    for device_patch in device_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
        for person_patch in person_patches:
            television_patches = image_patch.find(""television"")
            # Question assumes only one television patch
            if len(television_patches) == 0:
                # If no television is found, query the image directly
                return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
            for television_patch in television_patches:
                if person_patch.horizontal_center > device_patch.horizontal_center and person_patch.horizontal_center < television_patch.horizontal_center:
                    return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"") # crop would include the person so keep it in the query
    return ""no such device"""
12713794,Does the woman to the left of the man wear a necklace?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < man_patch.horizontal_center:
            return image_patch.simple_query(""Does the woman wear a necklace?"") # crop would include the man so keep him in the query
    return ""no"""
824070,What is the man doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"") # crop would include the man so keep it in the query"
11593733,Which kind of furniture is right to the pillow?," # right to the pillow
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    for pillow_patch in pillow_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is right to the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is found to the right of the pillow, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is right to the pillow?"")"
3357821,Does the dog to the left of the other dog look small or large?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog_patch = dog_patches[0]
    right_dog_patches = image_patch.find(""dog"")
    # Question assumes only one right dog patch
    if len(right_dog_patches) == 0:
        return ""no""
    for right_dog_patch in right_dog_patches:
        if right_dog_patch.horizontal_center > left_dog_patch.horizontal_center:
            return left_dog_patch.simple_query(""Does the dog to the left of the other dog look small or large?"") # crop would include the dog so keep it in the query
    # If no right dog is found, pick the first right dog
    return right_dog_patches[0].simple_query(""Does the dog to the left of the other dog look small or large?"")"
338026,Are the white candles short or tall?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    white_candle_patches = image_patch.find(""white candle"")
    # Question assumes only one white candle patch
    if len(white_candle_patches) == 0:
        # If no white candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    if white_candle_patches[0].verify_property(""white candle"", ""short""):
        return ""short""
    else:
        return ""tall"""
15346232,What kind of fruit is the girl holding?," # girl holding fruit
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    return fruit_patches[0].simple_query(""What kind of fruit is the girl holding?"") # crop would include the fruit so keep it in the query"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?"," # yellow vehicle is the object, right or left is the property
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    if yellow_vehicle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
81030271,Is the gray car to the right or to the left of the cart?," # gray car is the object, cart is the reference
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    for gray_car_patch in gray_car_patches:
        cart_patches = image_patch.find(""cart"")
        for cart_patch in cart_patches:
            if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
                return ""right""
            elif gray_car_patch.horizontal_center < cart_patch.horizontal_center:
                return ""left""
    return ""no"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")"
8240699,What animal is in front of the bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the bird?"")"
10105081,Is the fence white or green?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].best_text_match([""white"", ""green""])"
13613689,Is there a train or a fence in the picture?," # image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Is there a train or a fence in the picture?"")
    for train_patch in train_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            return ""yes""
    return ""no"""
10662521,What is the bottle made of?," # bottle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?," # fruit is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of fruit is on the plate?"")"
16701575,What device is to the right of the cake?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the right of the cake?"")"
6572516,What material is the ceiling?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?," # crop would include the egg so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")"
14371534,Are the gold pans on the right part or on the left?," # gold_pans is a list of ImagePatch objects
    image_patch = ImagePatch(image)
    gold_pans_patches = image_patch.find(""gold_pans"")
    # Question assumes only one gold_pans patch
    if len(gold_pans_patches) == 0:
        # If no gold_pans is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    if gold_pans_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16538076,What does the man that is not tall wear?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if man_patch.verify_property(""man"", ""tall"") == False:
            return man_patch.simple_query(""What does the man that is not tall wear?"") # crop would include the shirt so keep it in the query
    # If no man is not tall, pick the first man
    return man_patches[0].simple_query(""What does the man that is not tall wear?"")"
5483644,"On which side is the woman, the left or the right?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    if woman_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the animal in this photograph?"")"
1290926,Are there either any life vests or flags?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)"
18273738,Do you see a cup?," # cup is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.exists(""cup"")"
4211922,Who is sitting on the table?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is sitting on the table?"")
    for person_patch in person_patches:
        is_sitting_on_table = (person_patch.simple_query(""Is the person sitting on the table?"") == ""yes"")
        if is_sitting_on_table:
            return person_patch.simple_query(""Who is sitting on the table?"") # crop would include the table so keep it in the query
    # If no person is sitting on the table, pick the first person
    return person_patches[0].simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?," # girl is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")"
6599090,What is the person to the right of the car holding?," # crop would include the person so keep it in the query
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    for person_patch in person_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if car_patch.horizontal_center < person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the car holding?"") # crop would include the person so keep it in the query
    # If no person is to the right of a car, pick the first person
    return person_patches[0].simple_query(""What is the person to the right of the car holding?"") # crop would include the person so keep it in the query"
1174895,What is the vehicle in the parking lot?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the vehicle in the parking lot?"")"
14755158,Who is the woman in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Who is the woman in front of?"")
    for woman_patch in woman_patches:
        return woman_patch.simple_query(""Who is the woman in front of?"") # crop would include the woman so keep it in the query"
18349161,Where does the cow that is standing stand?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    return cow_patches[0].simple_query(""Where does the cow that is standing stand?"")"
7472884,On which side is the tap?," # taps are on the right
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the tap?"")"
111051831,On which side of the image is the cabinet?," # left or right
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    if cabinet_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    for bag_patch in bag_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center > bag_patch.horizontal_center:
                return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    for artwork_patch in artwork_patches:
        computer_desk_patches = image_patch.find(""computer desk"")
        for computer_desk_patch in computer_desk_patches:
            if artwork_patch.verify_property(""artwork"", ""material"") != computer_desk_patch.verify_property(""computer desk"", ""material""):
                return ""no""
    return ""yes"""
14298125,Who is playing Wii?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")"
9382689,What's the floor made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?," # dress is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the dress?"")"
15127108,Does the tea pot above the receipt look short and white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")"
15632653,Which room is it?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
490992,Is the fence on the left side or on the right of the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")"
17133284,Do the mountains look rocky?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    mountains_patches = image_patch.find(""mountains"")
    # Question assumes only one mountain patch
    if len(mountains_patches) == 0:
        # If no mountains are found, query the image directly
        return image_patch.simple_query(""Do the mountains look rocky?"")
    for mountain_patch in mountains_patches:
        return mountain_patch.verify_property(""mountains"", ""rocky"")"
17573742,Is the woman to the right of the camera wearing a coat?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    for woman_patch in woman_patches:
        if woman_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"") == ""yes"":
            return ""yes""
    return ""no"""
3395780,Is the vehicle to the left of the parking meter covered in rain?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    for vehicle_patch in vehicle_patches:
        is_left = vehicle_patch.horizontal_center < image_patch.horizontal_center
        is_rain = vehicle_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
        if is_left and is_rain:
            return ""yes""
    return ""no"""
1542668,Is there a black laptop or desk?," # laptop or desk
    image_patch = ImagePatch(image)
    laptops_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptops_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Is there a black laptop or desk?"")
    for laptop_patch in laptops_patches:
        if laptop_patch.verify_property(""laptop"", ""black""):
            return ""yes""
    desks_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desks_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""Is there a black laptop or desk?"")
    for desk_patch in desks_patches:
        if desk_patch.verify_property(""desk"", ""black""):
            return ""yes""
    return ""no"""
1655442,What type of food is to the right of the waffles that are to the right of the person?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")"
395290,How large is the bag?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"")"
16138893,Are there both motorcycles and cars in this scene?," # motorcycle and car are not in the image
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, pick the first person
    return person_patches[0].simple_query(""Who is wearing shorts?"")"
171032184,What hangs from the windows?," # window is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?," # spoon and plate are not in the image
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")"
8197176,What color is the jacket that the man wears?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return ""no""
    for jacket_patch in jacket_patches:
        if jacket_patch.simple_query(""Is the jacket on the man?"") == ""yes"":
            return jacket_patch.simple_query(""What color is the jacket that the man wears?"")
    return ""no"""
3440931,What are that pieces of furniture called?," # pieces of furniture is a noun phrase, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are that pieces of furniture called?"")"
337924,What is the fruit that is to the left of the chair?," # fruit is a noun, so ask directly
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")
    for fruit_patch in fruit_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if fruit_patch.horizontal_center < chair_patch.horizontal_center:
                return fruit_patch.simple_query(""What is the fruit that is to the left of the chair?"") # crop would include the chair so keep it in the query
    # If no fruit is to the left of the chair, pick the first fruit
    return fruit_patches[0].simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bowls_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowls_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    return bowls_patches[0].simple_query(""What do you think are the bowls on?"")"
18330260,Is the sky above the trees open and clear?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the sky above the trees open and clear?"")"
14119691,Does the squirrel to the right of the stuffed dog look white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    # Question assumes only one squirrel patch
    if len(squirrel_patches) == 0:
        # If no squirrel is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for squirrel_patch in squirrel_patches:
        if squirrel_patch.verify_property(""squirrel"", ""white"") == ""yes"":
            return ""yes""
    return ""no"""
18437694,Does the clock to the right of the statue have gold color and tiny size?," # gold color and tiny size
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Does the clock to the right of the statue have gold color and tiny size?"")
    for clock_patch in clock_patches:
        statue_patches = image_patch.find(""statue"")
        for statue_patch in statue_patches:
            if clock_patch.horizontal_center > statue_patch.horizontal_center:
                return bool_to_yesno(clock_patch.verify_property(""clock"", ""gold"") and clock_patch.verify_property(""clock"", ""tiny""))
    return ""no"""
1252960,Where was the photo taken?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is there a frisbee on the grass?"")
    for frisbee_patch in frisbee_patches:
        grass_patches = image_patch.find(""grass"")
        for grass_patch in grass_patches:
            if frisbee_patch.upper < grass_patch.upper and frisbee_patch.lower > grass_patch.lower:
                return ""yes""
    return ""no"""
13180513,Are there either cakes or containers in the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?," # black cars or motorcycles
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?," # blue car is the object, the vehicle to the left of the police officer is the reference
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    for blue_car_patch in blue_car_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            # If no vehicle is found, query the image directly
            return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < blue_car_patch.horizontal_center:
                return ""behind""
            else:
                return ""in front of""
    return ""no"""
5785831,What is in the glass?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in the glass?"")"
19246241,Are there any brown benches or buckets?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_bucket = image_patch.exists(""bucket"")
    return bool_to_yesno(is_brown_bench or is_bucket)"
3243803,"Where in the picture is the spoon, on the right or on the left?"," # spoon is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")"
6952486,Does the shirt look white?," # shirt is a property of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    man_patch = man_patches[0]
    return man_patch.verify_property(""man"", ""shirt color"") == ""white"""
17401425,Is there a bag that is not brown?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if bag_patch.verify_property(""bag"", ""brown"") == False:
            return ""yes""
    return ""no"""
481240,"Which kind of furniture is large, the shelf or the cupboard?"," # shelf and cupboard are objects, so ask directly
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    cupboard_patches = image_patch.find(""cupboard"")
    # Question assumes only one cupboard patch
    if len(cupboard_patches) == 0:
        # If no cupboard is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    for shelf_patch in shelf_patches:
        for cupboard_patch in cupboard_patches:
            if shelf_patch.width > cupboard_patch.width:
                return ""shelf""
            elif shelf_patch.width < cupboard_patch.width:
                return ""cupboard""
    return ""no furniture found"""
8531943,Are there any screens or bags?," # image_patch = ImagePatch(image)
    screens_patches = image_patch.find(""screen"")
    bags_patches = image_patch.find(""bag"")
    # Question assumes only one screen patch and one bag patch
    if len(screens_patches) == 0 and len(bags_patches) == 0:
        # If no screen or bag is found, query the image directly
        return image_patch.simple_query(""Are there any screens or bags?"")
    if len(screens_patches) > 0 and len(bags_patches) > 0:
        return ""yes""
    return ""no"""
1969545,What is she wearing?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?"," # crop would include the white so keep it in the query
    image_patch = ImagePatch(image)
    is_freezer_white = image_patch.verify_property(""appliance"", ""freezer"")
    is_ice_maker_white = image_patch.verify_property(""appliance"", ""ice maker"")
    return bool_to_yesno(not is_freezer_white or not is_ice_maker_white)"
1051870,Are there chairs or tables that are not green?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    is_green = image_patch.exists(""green"")
    return bool_to_yesno(is_chair or is_table) and not is_green"
1366363,Does the taxi have a different color than the truck?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    for taxi_patch in taxi_patches:
        truck_patches = image_patch.find(""truck"")
        for truck_patch in truck_patches:
            if taxi_patch.verify_property(""taxi"", ""color"") != truck_patch.verify_property(""truck"", ""color""):
                return ""yes""
    return ""no"""
5460839,In which part of the image is the dog?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    if dog_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
18899476,What type of vegetable is to the right of the rice that is on the plate?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")"
8606903,What food item is not wide?," # crop would include the food item so keep it in the query
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if food_patch.verify_property(""food"", ""wide"") == False:
            return food_patch.simple_query(""What food item is not wide?"") # crop would include the food item so keep it in the query
    # If no food is not wide, pick the first food
    return food_patches[0].simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?," # folding chairs, skateboards
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Is there an elephant near the pond?"")
    for elephant_patch in elephant_patches:
        if elephant_patch.verify_property(""elephant"", ""near the pond""):
            return ""yes""
    return ""no"""
1575941,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    for desk_patch in desk_patches:
        floor_patches = image_patch.find(""floor"")
        for floor_patch in floor_patches:
            return floor_patch.simple_query(""What is the color of the floor that the desk is on top of?"") # crop would include the desk so keep it in the query
    # If no floor is found, query the image directly
    return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")"
16654241,Is the TV on the left or on the right?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    # Question assumes only one TV patch
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    if tv_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
18685233,Which kind of vehicle is to the left of the flags?," # vehicle is a relation, so ask directly
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    for vehicle_patch in vehicle_patches:
        flag_patches = image_patch.find(""flags"")
        for flag_patch in flag_patches:
            if vehicle_patch.horizontal_center < flag_patch.horizontal_center:
                return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"") # crop would include the flags so keep it in the query
    # If no vehicle is to the left of the flags, pick the first vehicle
    return vehicle_patches[0].simple_query(""Which kind of vehicle is to the left of the flags?"")"
9796068,Are there both a fence and a sheep in the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue"")
    # Question assumes only one blue patch
    if len(blue_patches) == 0:
        # If no blue is found, query the image directly
        return image_patch.simple_query(""Do you see any blue blanket or towel?"")
    for blue_patch in blue_patches:
        towel_patches = image_patch.find(""towel"")
        for towel_patch in towel_patches:
            if blue_patch.verify_property(""blue"", ""towel""):
                return ""yes""
    return ""no"""
1110330,Is the pillow to the left of the frog cream colored or green?," # pillow is the object, cream colored or green is the property
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    for pillow_patch in pillow_patches:
        frog_patches = image_patch.find(""frog"")
        for frog_patch in frog_patches:
            if pillow_patch.horizontal_center < frog_patch.horizontal_center:
                return pillow_patch.verify_property(""pillow"", ""left of the frog cream colored or green"")
    return pillow_patch.verify_property(""pillow"", ""left of the frog cream colored or green"")"
511507,Is the antenna on the aircraft?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    antenna_patches = image_patch.find(""antenna"")
    # Question assumes only one antenna patch
    if len(antenna_patches) == 0:
        # If no antenna is found, query the image directly
        return image_patch.simple_query(""Is the antenna on the aircraft?"")
    for antenna_patch in antenna_patches:
        aircraft_patches = image_patch.find(""aircraft"")
        for aircraft_patch in aircraft_patches:
            if antenna_patch.horizontal_center > aircraft_patch.horizontal_center:
                return ""yes""
    return ""no"""
10464417,"In which part is the tent, the top or the bottom?"," # tent is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")"
10816730,Is the tree in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tree in front of the building?"")"
18766115,Who is walking?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is walking?"")
    return person_patches[0].simple_query(""Who is walking?"") # crop would include the person so keep it in the query"
10625851,Are there either any fruits or plates in the image?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fruits_patches = image_patch.find(""fruits"")
    plates_patches = image_patch.find(""plates"")
    # Question assumes only one patch for each object
    if len(fruits_patches) == 0 and len(plates_patches) == 0:
        # If no fruits or plates are found, query the image directly
        return image_patch.simple_query(""Are there either any fruits or plates in the image?"")
    if len(fruits_patches) == 0:
        return ""yes""
    if len(plates_patches) == 0:
        return ""yes""
    return ""yes"""
71018537,Is the person wearing a coat?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person wearing a coat?"")"
4194722,Is the man wearing a helmet?," # image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    man_patch = man_patches[0]
    return man_patch.verify_property(""man"", ""helmet"")"
414248,"What animal are the women near the ocean riding, a pig or a horse?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")"
683094,Who is wearing the shirt?," # shirt is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the shirt?"")"
12140603,What device is to the left of the headphones?," # left, right, top, bottom
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for device_patch in device_patches:
        headphones_patches = image_patch.find(""headphones"")
        for headphones_patch in headphones_patches:
            if device_patch.horizontal_center < headphones_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the headphones?"") # crop would include the headphones so keep it in the query
    # If no device is to the left of the headphones, pick the first device
    return device_patches[0].simple_query(""What device is to the left of the headphones?"")"
5575209,The flowers are where?," # assumes only one patch
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    return flower_patches[0].simple_query(""The flowers are where?"")"
8773829,Which kind of furniture is made of wood?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wood""):
            return furniture_patch.simple_query(""Which kind of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is made of wood?"")"
12636428,Which kind of animal is black?," # black is a property
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""Which kind of animal is black?"")
    return ""no black animal found"""
1020584,What animals is the car behind of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What animals is the car behind of?"")
    for car_patch in car_patches:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return image_patch.simple_query(""What animals is the car behind of?"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > car_patch.horizontal_center:
                return animal_patch.simple_query(""What animals is the car behind of?"") # crop would include the animal so keep it in the query
    # If no animal is behind the car, pick the first animal
    return animal_patches[0].simple_query(""What animals is the car behind of?"")"
11879418,The man is standing on what?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is standing on what?"")
    for man_patch in man_patches:
        is_on = (man_patch.simple_query(""Is the man standing on something?"") == ""yes"")
        if is_on:
            return man_patch.simple_query(""The man is standing on what?"") # crop would include the object so keep it in the query
    # If no man is standing on something, pick the first man
    return man_patches[0].simple_query(""The man is standing on what?"")"
12334288,What device is to the left of the cabinet?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the cabinet?"")
    for device_patch in device_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if device_patch.horizontal_center < cabinet_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the cabinet?"") # crop would include the cabinet so keep it in the query
    # If no device is to the left of the cabinet, pick the first device
    return device_patches[0].simple_query(""What device is to the left of the cabinet?"")"
691610,Is the monitor to the left of a book?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Is the monitor to the left of a book?"")
    for monitor_patch in monitor_patches:
        book_patches = image_patch.find(""book"")
        for book_patch in book_patches:
            if book_patch.horizontal_center > monitor_patch.horizontal_center:
                return ""yes""
    return ""no"""
7552714,Is the color of the jacket black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return jacket_patches[0].verify_property(""jacket"", ""black"")"
8492422,Is the man to the left of a boy?," # image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    man_patch = man_patches[0]
    boy_patches = image_patch.find(""boy"")
    for boy_patch in boy_patches:
        if man_patch.horizontal_center < boy_patch.horizontal_center:
            return ""yes""
    return ""no"""
13248061,What type of device is to the left of the keyboard in the bottom of the image?," # left, bottom
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    for keyboard_patch in keyboard_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < keyboard_patch.horizontal_center and device_patch.vertical_center < keyboard_patch.vertical_center:
                return device_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"") # crop would include the device so keep it in the query
    # If no device is found, pick the first keyboard
    return keyboard_patches[0].simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")"
18252454,What is common to the roof and the sky?," # roof and sky are not objects, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is common to the roof and the sky?"")"
14443687,What do the cat and the book have in common?," # cat and book are objects
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    for cat_patch in cat_patches:
        book_patches = image_patch.find(""book"")
        for book_patch in book_patches:
            return book_patch.simple_query(""What do the cat and the book have in common?"") # crop would include the book so keep it in the query
    # If no cat is found, query the image directly
    return image_patch.simple_query(""What do the cat and the book have in common?"")"
14571335,Who is wearing trousers?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing trousers?"")
    for person_patch in person_patches:
        is_wearing_trousers = (person_patch.simple_query(""Is the person wearing trousers?"") == ""yes"")
        if is_wearing_trousers:
            return person_patch.simple_query(""Who is wearing trousers?"") # crop would include the trousers so keep it in the query
    # If no person is wearing trousers, pick the first person
    return person_patches[0].simple_query(""Who is wearing trousers?"")"
474885,Who wears a cap?," # cap is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who wears a cap?"")"
141013015,"What color is the toilet, brown or white?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    for toilet_patch in toilet_patches:
        return bool_to_yesno(toilet_patch.verify_property(""toilet"", ""brown""))"
5515816,On which side of the image is the fence?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16774696,What is the surfer wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    # Question assumes only one surfer patch
    if len(surfer_patches) == 0:
        # If no surfer is found, query the image directly
        return image_patch.simple_query(""What is the surfer wearing?"")
    for surfer_patch in surfer_patches:
        return surfer_patch.simple_query(""What is the surfer wearing?"") # crop would include the shirt so keep it in the query"
13701956,Is there any grass or sand that is not dry?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one grass patch and one sand patch
    if len(grass_patches) == 0 or len(sand_patches) == 0:
        # If no grass or sand is found, query the image directly
        return image_patch.simple_query(""Is there any grass or sand that is not dry?"")
    for grass_patch in grass_patches:
        if grass_patch.verify_property(""grass"", ""dry"") == False:
            return ""yes""
    for sand_patch in sand_patches:
        if sand_patch.verify_property(""sand"", ""dry"") == False:
            return ""yes""
    return ""no"""
11606870,Is there a cow or a zebra in the picture?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""fire hydrant"", ""modern"")"
942308,Is the cup empty or full?," # cup is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the cup empty or full?"")"
15815976,Is the woman wearing a scarf?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman wearing a scarf?"")"
3193231,Do you see either parking meters or brooms in the picture?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see either parking meters or brooms in the picture?"")"
314218,Is the sign in front of the bridge small and white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_small = image_patch.verify_property(""sign"", ""small"")
    is_white = image_patch.verify_property(""sign"", ""white"")
    return bool_to_yesno(is_small and is_white)"
18130465,Does the umbrella that is not dry look orange and open?," # ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")"
7920817,What's in the paper?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is on the bun in the top?"")"
16929928,What is the fence made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?," # left or right
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    for woman_patch in woman_patches:
        lady_patches = image_patch.find(""lady"")
        for lady_patch in lady_patches:
            if woman_patch.horizontal_center < lady_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
17993299,Is the horse to the left of a car?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the horse to the left of a car?"")
    for horse_patch in horse_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if car_patch.horizontal_center > horse_patch.horizontal_center:
                return ""yes""
    return ""no"""
8717022,Is the small animal to the left of the vehicle that looks silver?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        # If no small animal is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    for small_animal_patch in small_animal_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.verify_property(""vehicle"", ""silver"") and small_animal_patch.horizontal_center < vehicle_patch.horizontal_center:
                return ""yes""
    return ""no"""
2998707,Which color is the chair that is on the right?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    for chair_patch in chair_patches:
        right_patches = image_patch.find(""right"")
        for right_patch in right_patches:
            if right_patch.horizontal_center > chair_patch.horizontal_center:
                return chair_patch.simple_query(""Which color is the chair that is on the right?"") # crop would include the chair so keep it in the query
    # If no chair is on the right, pick the first chair
    return chair_patches[0].simple_query(""Which color is the chair that is on the right?"")"
171017786,Do you see any cups to the left of the monitor?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    cups_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cups_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    for cup_patch in cups_patches:
        if cup_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?," # girl is the subject, glasses is the object
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    for glasses_patch in glasses_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if glasses_patch.horizontal_center > man_patch.horizontal_center:
                return ""right""
            elif glasses_patch.horizontal_center < man_patch.horizontal_center:
                return ""left""
    return ""no"""
1941568,What animal is in the water?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")"
17577787,Does the man's hair look short and white?," # hair is a property of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    return man_patch.verify_property(""man"", ""hair short and white"")"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?," # left, right, left, right
    image_patch = ImagePatch(image)
    chairs_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chairs_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    for chair_patch in chairs_patches:
        if chair_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
9825336,Which kind of furniture is the mat lying on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")"
11222427,Do you see fences or elephants?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white"") == False:
            return furniture_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"") # crop would include the white so keep it in the query
    # If no furniture is not white, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")"
1152020,Do you see either any plate or tomato that are red?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_tomato = image_patch.exists(""tomato"")
    return bool_to_yesno(is_plate or is_tomato)"
8961520,Who is surfing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"")"
18106780,Which room is it?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
1892692,What color do you think the bowl that is to the right of the person is?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for bowl_patch in bowl_patches:
        return bowl_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"") # crop would include the bowl so keep it in the query"
6952082,What color is the hair?," # hair is a property of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    for person_patch in person_patches:
        return person_patch.simple_query(""What color is the hair?"") # crop would include the hair so keep it in the query"
3768067,What color is the pot the statue is to the right of?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What color is the pot the statue is to the right of?"")"
17866761,Is the clear glass on the shelf of the table?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one glass patch
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    for glass_patch in glass_patches:
        shelf_patches = image_patch.find(""shelf"")
        for shelf_patch in shelf_patches:
            if shelf_patch.horizontal_center > glass_patch.horizontal_center:
                return ""yes""
    return ""no"""
798020,Does the skirt look black or yellow?," # assumes only one skirt patch
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].best_text_match([""black"", ""yellow""])"
828981,How old is he?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""How old is he?"")"
7236463,Of what color is the book?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""Of what color is the book?"")"
6376684,What color is the car to the left of the train car?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    for car_patch in car_patches:
        train_patches = image_patch.find(""train car"")
        for train_patch in train_patches:
            if car_patch.horizontal_center < train_patch.horizontal_center:
                return car_patch.simple_query(""What color is the car to the left of the train car?"") # crop would include the train car so keep it in the query
    # If no car is to the left of the train car, pick the first car
    return car_patches[0].simple_query(""What color is the car to the left of the train car?"")"
786798,Is this a photo of a beach?," # beach is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a photo of a beach?"")"
19836753,What vehicles are to the left of the fence?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    vehicles = []
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < image_patch.horizontal_center:
            vehicles.append(vehicle_patch.simple_query(""What vehicles are to the left of the fence?""))
    return vehicles"
15284615,Who is playing?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?," # image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    remote_patches = image_patch.find(""remote control"")
    for remote_patch in remote_patches:
        if man_patch.horizontal_center > remote_patch.horizontal_center:
            return ""yes""
    return ""no"""
17746396,What's the boy wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    for boy_patch in boy_patches:
        return boy_patch.simple_query(""What's the boy wearing?"") # crop would include the shirt so keep it in the query"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")"
13826837,What color is the door?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Are there any horses in the field?"")
    return ""yes"""
2964690,What is in front of the mountains?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?," # vehicle is a general term, so ask directly
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > image_patch.simple_query(""What type of vehicle is the truck?""): # crop would include the truck so keep it in the query
            return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    for scarf_patch in scarf_patches:
        return bool_to_yesno(scarf_patch.verify_property(""scarf"", ""long"") and scarf_patch.verify_property(""scarf"", ""blue""))"
1189986,Is the man behind the elephant holding a surfboard?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    man_patch = man_patches[0]
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        return ""no""
    for elephant_patch in elephant_patches:
        if man_patch.horizontal_center > elephant_patch.horizontal_center:
            surfboard_patches = image_patch.find(""surfboard"")
            # Question assumes only one surfboard patch
            if len(surfboard_patches) == 0:
                return ""no""
            for surfboard_patch in surfboard_patches:
                if man_patch.horizontal_center > surfboard_patch.horizontal_center:
                    return ""yes""
    return ""no"""
8792466,Which color is the closed window?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    return window_patches[0].simple_query(""Which color is the closed window?"")"
10188423,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    for vegetable_patch in vegetable_patches:
        is_right_of_girl = vegetable_patch.verify_property(""vegetable"", ""right of the girl"")
        if is_right_of_girl:
            return vegetable_patch.simple_query(""What kind of vegetable is to the right of the girl?"") # crop would include the girl so keep it in the query
    # If no vegetable is to the right of the girl, pick the first vegetable
    return vegetable_patches[0].simple_query(""What kind of vegetable is to the right of the girl?"")"
4929965,Is there a black racket or clock in the picture?," # image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_black_clock = image_patch.exists(""black clock"")
    return bool_to_yesno(is_black_racket or is_black_clock)"
4782038,What kind of animal is white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What kind of animal is white?"") # crop would include the white so keep it in the query
    # If no animal is white, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is white?"")"
14658201,Is the sheep that looks white and brown made of plastic?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")"
1441865,Do you see any boxes on the table under the grill?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    grill_patches = image_patch.find(""grill"")
    # Question assumes only one grill patch
    if len(grill_patches) == 0:
        # If no grill is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    for grill_patch in grill_patches:
        table_patches = image_patch.find(""table"")
        for table_patch in table_patches:
            boxes_patches = image_patch.find(""boxes"")
            for boxes_patch in boxes_patches:
                if boxes_patch.vertical_center < table_patch.vertical_center and boxes_patch.horizontal_center < grill_patch.horizontal_center:
                    return ""yes""
    return ""no"""
1424926,What is the tag on?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""piece of furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    for furniture_patch in furniture_patches:
        laptop_patches = image_patch.find(""laptop"")
        for laptop_patch in laptop_patches:
            if furniture_patch.horizontal_center > laptop_patch.horizontal_center:
                return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"") # crop would include the laptop so keep it in the query
    # If no furniture is to the right of a laptop, pick the first furniture
    return furniture_patches[0].simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")"
3635257,Is there any freezer in this photo?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.exists(""freezer"")"
8821026,Are there either any bags or chairs?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    for vehicle_patch in vehicle_patches:
        is_bus = vehicle_patch.verify_property(""vehicle"", ""bus"")
        if is_bus:
            return vehicle_patch.simple_query(""In what vehicle is the bus driver?"") # crop would include the bus so keep it in the query
    # If no vehicle is a bus, pick the first vehicle
    return vehicle_patches[0].simple_query(""In what vehicle is the bus driver?"")"
17204662,What is that man in front of?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is that man in front of?"")
    for man_patch in man_patches:
        is_in_front_of = (man_patch.simple_query(""Is the man in front of something?"") == ""yes"")
        if is_in_front_of:
            return man_patch.simple_query(""What is that man in front of?"") # crop would include the object so keep it in the query
    # If no man is in front of something, pick the first man
    return man_patches[0].simple_query(""What is that man in front of?"")"
380866,Are there any girls or radios?," # girls and radios are not in the same image
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?," # girl is a predicate
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The girl is sitting on what?"")
    for girl_patch in girl_patches:
        return girl_patch.simple_query(""The girl is sitting on what?"") # crop would include the girl so keep it in the query"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?," # left or right
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for lamp_patch in lamp_patches:
        pillow_patches = image_patch.find(""pillow"")
        # Question assumes only one pillow patch
        if len(pillow_patches) == 0:
            # If no pillow is found, query the image directly
            return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center == image_patch.horizontal_center:
                if lamp_patch.horizontal_center < pillow_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right"""
16545552,What color do you think is the vehicle the girl is washing?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    return vehicle_patches[0].simple_query(""What color do you think is the vehicle the girl is washing?"")"
16719872,Are there motorcycles to the left of the man who is wearing a hat?," # motorcycle is a subcategory of vehicle
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    is_wearing_hat = (man_patch.simple_query(""Is the man wearing a hat?"") == ""yes"")
    if is_wearing_hat:
        vehicle_patches = image_patch.find(""vehicle"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            # If no vehicle is found, query the image directly
            return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
        for vehicle_patch in vehicle_patches:
            motorcycles_patches = vehicle_patch.find(""motorcycle"")
            # Question assumes only one motorcycle patch
            if len(motorcycles_patches) == 0:
                # If no motorcycle is found, query the image directly
                return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
            for motorcycle_patch in motorcycles_patches:
                if motorcycle_patch.horizontal_center < man_patch.horizontal_center:
                    return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    for garbage_can_patch in garbage_can_patches:
        stroller_patches = image_patch.find(""stroller"")
        for stroller_patch in stroller_patches:
            if garbage_can_patch.horizontal_center > stroller_patch.horizontal_center:
                return ""right""
            elif garbage_can_patch.horizontal_center < stroller_patch.horizontal_center:
                return ""left""
    return ""no"""
13711589,What do the truck and the street sign have in common?," # ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do the truck and the street sign have in common?"")"
10227573,Who is wearing a shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?," # ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the man leading?"")"
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?," # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""piece of furniture"")
    # Question assumes only one piece of furniture
    if len(furniture_patches) == 0:
        # If no piece of furniture is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > image_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"") # crop would include the dresser so keep it in the query
    # If no piece of furniture is to the right of the curtain, pick the first piece of furniture
    return furniture_patches[0].simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")"
7190226,Does the puddle look large?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""puddle"", ""large"")"
11675152,Who throws the frisbee?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who throws the frisbee?"")"
8723676,Which kind of animal is the water on?," # water is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is the water on?"")"
61046657,Do you think that traffic light is tall?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    # Question assumes only one traffic light patch
    if len(traffic_light_patches) == 0:
        # If no traffic light is found, query the image directly
        return image_patch.simple_query(""Do you think that traffic light is tall?"")
    return bool_to_yesno(traffic_light_patches[0].verify_property(""traffic light"", ""tall""))"
9581034,On which side is the wine glass?," # assumes only one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    if wine_glass_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        pizza_patches = image_patch.find(""pizza"")
        for pizza_patch in pizza_patches:
            if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
                return ""right""
            elif napkin_patch.horizontal_center < pizza_patch.horizontal_center:
                return ""left""
    return ""no"""
18535266,Is the face mask made of the same material as the mask?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    # Question assumes only one face mask patch
    if len(face_mask_patches) == 0:
        # If no face mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    for face_mask_patch in face_mask_patches:
        mask_patches = image_patch.find(""mask"")
        for mask_patch in mask_patches:
            if face_mask_patch.verify_property(""face mask"", ""material"") == mask_patch.verify_property(""mask"", ""material""):
                return ""yes""
    return ""no"""
11254215,What is the tan item of furniture?," # tan item of furniture
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What is the tan item of furniture?"")
    for tan_patch in tan_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if tan_patch.simple_query(""Is the tan item of furniture?"") == ""yes"":
                return furniture_patch.simple_query(""What is the tan item of furniture?"") # crop would include the tan so keep it in the query
    # If no tan item of furniture is found, pick the first tan patch
    return tan_patches[0].simple_query(""What is the tan item of furniture?"")"
1852010,How is the device to the right of the device on the desk called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    for device_patch in device_patches:
        is_on_desk = (device_patch.simple_query(""Is the device on the desk?"") == ""yes"")
        if is_on_desk:
            return device_patch.simple_query(""How is the device to the right of the device on the desk called?"") # crop would include the desk so keep it in the query
    # If no device is on the desk, pick the first device
    return device_patches[0].simple_query(""How is the device to the right of the device on the desk called?"")"
1587534,Is the device on the floor black and large?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    is_black = image_patch.verify_property(""device"", ""black"")
    is_large = image_patch.verify_property(""device"", ""large"")
    return bool_to_yesno(is_black and is_large)"
8470757,Are there any surfboards?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.exists(""surfboard"")"
11273949,Is the shirt white?," # shirt is a property of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    man_patch = man_patches[0]
    return man_patch.verify_property(""man"", ""shirt color"") == ""white"""
7475238,What's the airplane in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        hose_patches = image_patch.find(""hose"")
        for hose_patch in hose_patches:
            if horse_patch.horizontal_center > hose_patch.horizontal_center:
                return horse_patch.simple_query(""Where does the horse to the right of the hose run?"") # crop would include the hose so keep it in the query
    # If no horse is to the right of a hose, pick the first horse
    return horse_patches[0].simple_query(""Where does the horse to the right of the hose run?"")"
3932624,Are there either any gray chairs or laptops?," # gray chair or laptop
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water brown or blue?"")
    return water_patches[0].best_text_match([""brown"", ""blue""])"
9256263,Which kind of furniture is brown?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""brown""):
            return furniture_patch.simple_query(""Which kind of furniture is brown?"") # crop would include the brown so keep it in the query
    # If no furniture is brown, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is brown?"")"
18719769,Is the man wearing glasses?," # image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    man_patch = man_patches[0]
    return man_patch.verify_property(""man"", ""glasses"")"
18342439,What animal is white?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What animal is white?"") # crop would include the white so keep it in the query
    # If no animal is white, pick the first animal
    return animal_patches[0].simple_query(""What animal is white?"")"
8665725,Who is wearing a coat?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a coat?"")
    for person_patch in person_patches:
        is_wearing_coat = (person_patch.simple_query(""Is the person wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return person_patch.simple_query(""Who is wearing a coat?"") # crop would include the coat so keep it in the query
    # If no person is wearing a coat, pick the first person
    return person_patches[0].simple_query(""Who is wearing a coat?"")"
5440407,What vehicle isn't black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""black"") == False:
            return vehicle_patch.simple_query(""What vehicle isn't black?"") # crop would include the color so keep it in the query
    # If no vehicle isn't black, pick the first vehicle
    return vehicle_patches[0].simple_query(""What vehicle isn't black?"")"
4104707,On which side of the picture is the oven?," # assumes only one oven patch
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3126763,What is common to the logo and the letter?," # image_patch is not needed
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is common to the logo and the letter?"")"
18640925,What animal is in the water the man is walking through?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    for water_patch in water_patches:
        animal_patches = water_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return image_patch.simple_query(""What animal is in the water the man is walking through?"")
        for animal_patch in animal_patches:
            return animal_patch.simple_query(""What animal is in the water the man is walking through?"") # crop would include the man so keep him in the query"
125488,What is the man wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    for man_patch in man_patches:
        return man_patch.simple_query(""What is the man wearing?"") # crop would include the shirt so keep it in the query"
5925435,What is the sidewalk made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].simple_query(""What is the pattern of the coat?"")"
4819547,What kind of furniture is white?," # assumes only one white furniture
    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white"")
    # Question assumes only one white patch
    if len(white_patches) == 0:
        # If no white is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    for white_patch in white_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.verify_property(""furniture"", ""white"") == True:
                return furniture_patch.simple_query(""What kind of furniture is white?"") # crop would include the white so keep it in the query
    # If no white furniture is found, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is white?"")"
14263174,What color do you think the chair that is to the right of the other chair is?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    man_patch = man_patches[0]
    train_patches = image_patch.find(""green train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        return ""no""
    for train_patch in train_patches:
        if man_patch.horizontal_center < train_patch.horizontal_center:
            fence_patches = image_patch.find(""fence"")
            # Question assumes only one fence patch
            if len(fence_patches) == 0:
                return ""no""
            for fence_patch in fence_patches:
                if man_patch.horizontal_center < fence_patch.horizontal_center:
                    return ""yes""
    return ""no"""
9239936,Do the cows near the trees have white color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    for cow_patch in cow_patches:
        if cow_patch.verify_property(""cow"", ""white""):
            return ""yes""
    return ""no"""
1885178,"In which part of the image is the remote control, the bottom or the top?"," # remote control is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")"
12341631,Which color is the bag in the top part?," # crop would include the bag so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which color is the bag in the top part?"")"
5532909,"What is the weather like, cloudless or maybe rainy?"," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")"
2618222,What is connected to the open laptop?," # laptop is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is connected to the open laptop?"")"
3252220,Of which color is the shirt the man wears?," # shirt is a property of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = man_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no""
    for shirt_patch in shirt_patches:
        return shirt_patch.simple_query(""Of which color is the shirt?"") # crop would include the shirt so keep it in the query"
8947801,What is in the vase?," # vase is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the vase?"")"
10841562,Is the color of the pants the same as the shorts?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    pants_patch = pants_patches[0]
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    for shorts_patch in shorts_patches:
        if shorts_patch.verify_property(""pants"", ""color"") == pants_patch.verify_property(""pants"", ""color""):
            return ""yes""
    return ""no"""
15511838,What kind of furniture is to the left of the bucket?," # left, right, top, bottom
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    for furniture_patch in furniture_patches:
        bucket_patches = image_patch.find(""bucket"")
        for bucket_patch in bucket_patches:
            if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"") # crop would include the bucket so keep it in the query
    # If no furniture is to the left of the bucket, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is to the left of the bucket?"")"
14495306,Is there any racket to the right of the person that the woman is to the left of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    for person_patch in person_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            racket_patches = image_patch.find(""racket"")
            for racket_patch in racket_patches:
                if racket_patch.horizontal_center > person_patch.horizontal_center and racket_patch.horizontal_center > woman_patch.horizontal_center:
                    return ""yes""
    return ""no"""
14841932,Do the tiles have square shape and black color?," # tiles are not black
    image_patch = ImagePatch(image)
    tiles_patches = image_patch.find(""tiles"")
    # Question assumes only one tile patch
    if len(tiles_patches) == 0:
        # If no tiles are found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    return bool_to_yesno(tiles_patches[0].verify_property(""tiles"", ""square"") and tiles_patches[0].verify_property(""tiles"", ""black""))"
41029381,What is the vehicle that is the same color as the shirt called?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")"
161027428,Are there both windows and doors in the image?," # windows and doors are not in the image
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
16478246,Does the pillow to the right of the man have green color and large size?," # pillow to the right of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        return ""no""
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            return pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large"")
    return ""no"""
9450308,Is the happy person wearing a hat?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person happy?"") == ""yes"":
            hat_patches = image_patch.find(""hat"")
            # Question assumes only one hat patch
            if len(hat_patches) == 0:
                # If no hat is found, query the image directly
                return image_patch.simple_query(""Is the happy person wearing a hat?"")
            for hat_patch in hat_patches:
                return ""yes""
    return ""no"""
11850389,What place is this?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What place is this?"")"
17250452,What kind of appliance is on the right of the drawer?," # appliance is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")"
14857961,Is the lady to the right of a woman?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    for lady_patch in lady_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if lady_patch.horizontal_center > woman_patch.horizontal_center:
                return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?," # left, right, left, right
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")"
9745131,Which color is the truck that is to the left of the lamps?," # assumes only one truck patch
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    for truck_patch in truck_patches:
        lamp_patches = image_patch.find(""lamps"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center > truck_patch.horizontal_center:
                return truck_patch.simple_query(""Which color is the truck that is to the left of the lamps?"") # crop would include the lamps so keep it in the query
    # If no truck is to the left of the lamps, pick the first truck
    return truck_patches[0].simple_query(""Which color is the truck that is to the left of the lamps?"")"
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?," # image_patch is not needed because the image is the same as the patch
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")"
867818,Is the man on the skateboard?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the skateboard?"")
    for man_patch in man_patches:
        skateboard_patches = image_patch.find(""skateboard"")
        for skateboard_patch in skateboard_patches:
            if man_patch.vertical_center > skateboard_patch.vertical_center:
                return ""yes""
    return ""no"""
13896221,What is on the table?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
1964517,What is the food that is above the white paper?," # crop would include the white paper so keep it in the query
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is above the white paper?"")
    for food_patch in food_patches:
        if food_patch.vertical_center > image_patch.vertical_center:
            return food_patch.simple_query(""What is the food that is above the white paper?"") # crop would include the white paper so keep it in the query
    # If no food is above the white paper, pick the first food
    return food_patches[0].simple_query(""What is the food that is above the white paper?"") # crop would include the white paper so keep it in the query"
15705231,Is the shelf to the left of a cabinet?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if shelf_patch.horizontal_center < cabinet_patch.horizontal_center:
                return ""yes""
    return ""no"""
15693846,Is the motorcycle parked on the grass?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Is the motorcycle parked on the grass?"")
    for motorcycle_patch in motorcycle_patches:
        grass_patches = image_patch.find(""grass"")
        for grass_patch in grass_patches:
            if motorcycle_patch.lower > grass_patch.lower:
                return ""yes""
    return ""no"""
13872995,Who is jumping?," # jumps is a relational verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a dog or a cat?"")"
12584623,What is the person with the bag wearing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    for person_patch in person_patches:
        bag_patches = image_patch.find(""bag"")
        for bag_patch in bag_patches:
            clothing_patches = image_patch.find(""clothing"")
            for clothing_patch in clothing_patches:
                if clothing_patch.simple_query(""Is the clothing worn by the person with the bag?"") == ""yes"":
                    return clothing_patch.simple_query(""What is the person with the bag wearing?"") # crop would include the bag so keep it in the query
    # If no clothing is worn by the person with the bag, pick the first clothing
    return clothing_patches[0].simple_query(""What is the person with the bag wearing?"")"
7202064,"What is this, a bus or a truck?"," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is this, a bus or a truck?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""bus""):
            return ""bus""
        elif vehicle_patch.verify_property(""vehicle"", ""truck""):
            return ""truck""
    return ""unknown"""
16542208,Do you see either any beds or blankets there?," # image_patch = ImagePatch(image)
    beds_patches = image_patch.find(""bed"")
    blankets_patches = image_patch.find(""blanket"")
    # Question assumes only one bed patch and one blanket patch
    if len(beds_patches) == 0 and len(blankets_patches) == 0:
        # If no bed or blanket is found, query the image directly
        return image_patch.simple_query(""Do you see either any beds or blankets there?"")
    return bool_to_yesno(len(beds_patches) > 0 or len(blankets_patches) > 0)"
11700224,Do you see both lettuce and salad?," # lettuce and salad are not objects, so ask directly
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)"
1067136,Is the ball on the tree?," # ball is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball on the tree?"")"
364079,What kind of furniture is to the right of the blanket?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for furniture_patch in furniture_patches:
        blanket_patches = image_patch.find(""blanket"")
        for blanket_patch in blanket_patches:
            if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the right of the blanket?"") # crop would include the blanket so keep it in the query
    # If no furniture is to the right of the blanket, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is to the right of the blanket?"")"
2533062,How large is the ground the zebra is standing on?," # crop would include the zebra so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How large is the ground the zebra is standing on?"")"
19683710,The clock is inside what?," # clock is inside the clock tower
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""The clock is inside what?"")
    for clock_patch in clock_patches:
        clock_tower_patches = image_patch.find(""clock tower"")
        for clock_tower_patch in clock_tower_patches:
            return clock_tower_patch.simple_query(""The clock is inside what?"") # crop would include the clock so keep it in the query
    # If no clock tower is found, pick the first clock tower
    return clock_tower_patches[0].simple_query(""The clock is inside what?"")"
15674863,Is the racket in the top part?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""racket"", ""top""))"
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    skateboard_patches = image_patch.find(""skateboard"")
    for skateboard_patch in skateboard_patches:
        if person_patch.horizontal_center < skateboard_patch.horizontal_center:
            return ""yes""
    return ""no"""
2292637,What is the color of the shirt that the passenger is wearing?," # shirt is a relational noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")"
9175259,What is the chair made of?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?," # returns the height of the carrot
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    return carrot_patches[0].simple_query(""How big is the carrot in the top of the picture?"") # crop would include the carrot so keep it in the query"
1638685,What is the name of the vegetable that is on the yellow food?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    yellow_patches = image_patch.find(""yellow"")
    # Question assumes only one yellow patch
    if len(yellow_patches) == 0:
        # If no yellow is found, query the image directly
        return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    for yellow_patch in yellow_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.vertical_center < yellow_patch.vertical_center:
                return vegetable_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"") # crop would include the vegetable so keep it in the query
    # If no vegetable is on the yellow food, pick the first vegetable
    return vegetable_patches[0].simple_query(""What is the name of the vegetable that is on the yellow food?"")"
5828256,Is the clock on a tower?," # clock is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the clock on a tower?"")"
18937563,What kind of animal is orange?," # orange is a color, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is orange?"")"
14360113,What is the smiling woman holding?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    for woman_patch in woman_patches:
        is_holding = (woman_patch.simple_query(""Is the woman holding something?"") == ""yes"")
        if is_holding:
            return woman_patch.simple_query(""What is the smiling woman holding?"") # crop would include the object so keep it in the query
    # If no woman is holding an object, pick the first woman
    return woman_patches[0].simple_query(""What is the smiling woman holding?"")"
593188,Is the hair short?," # hair is a property of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    for person_patch in person_patches:
        return person_patch.verify_property(""person"", ""hair short"")"
10824666,Are there ladies to the left of the man that is wearing shorts?," # left, right, top, bottom
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    for shorts_patch in shorts_patches:
        ladies_patches = image_patch.find(""lady"")
        for lady_patch in ladies_patches:
            if lady_patch.horizontal_center < man_patch.horizontal_center:
                return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?," # gray car is the object, garbage bin is the reference
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    for gray_car_patch in gray_car_patches:
        garbage_bin_patches = image_patch.find(""garbage bin"")
        for garbage_bin_patch in garbage_bin_patches:
            if garbage_bin_patch.horizontal_center > gray_car_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
7574939,Is there any table or plate that is white?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Is there any table or plate that is white?"")
    for table_patch in table_patches:
        if table_patch.verify_property(""table"", ""white""):
            return ""yes""
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is there any table or plate that is white?"")
    for plate_patch in plate_patches:
        if plate_patch.verify_property(""plate"", ""white""):
            return ""yes""
    return ""no"""
12252101,Is it outdoors?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it outdoors?"")"
6943442,What cooking utensil is on the oven?," # asks for the predicate of a relational verb (on the), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What cooking utensil is on the oven?"")"
2977077,The propeller that looks red is what pattern?," # propeller is a relational noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The propeller that looks red is what pattern?"")"
11190306,Which kind of animal is to the left of the train?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the left of the train?"")
    for animal_patch in animal_patches:
        train_patches = image_patch.find(""train"")
        for train_patch in train_patches:
            if animal_patch.horizontal_center < train_patch.horizontal_center:
                return animal_patch.simple_query(""Which kind of animal is to the left of the train?"") # crop would include the train so keep it in the query
    # If no animal is to the left of the train, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is to the left of the train?"")"
5107190,Do you see both an airplane and a truck?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""How old is the child?"")"
12536783,What kind of animal is in front of the pole?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    glasses_patch = glasses_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patch = man_patches[0]
    is_wearing_tshirt = (man_patch.simple_query(""Is the man wearing a t-shirt?"") == ""yes"")
    if is_wearing_tshirt:
        return glasses_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"") # crop would include the t-shirt so keep it in the query
    # If no man is wearing a t-shirt, pick the first man
    return man_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")"
18655269,Which room is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is it indoors?"")"
1705569,Does the pot on top of the stove look black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    return pot_patches[0].verify_property(""pot"", ""black"")"
1028569,Are there both a cyclist and a helmet in the photo?," # cyclist and helmet are both objects
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)"
13954115,Are there any men to the left of the person in the crowd?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    for person_patch in person_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center < person_patch.horizontal_center:
                return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")"
1017626,Who is inside the train?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Who is inside the train?"")
    for people_patch in people_patches:
        is_inside_train = (people_patch.simple_query(""Is the person inside the train?"") == ""yes"")
        if is_inside_train:
            return people_patch.simple_query(""Who is inside the train?"") # crop would include the train so keep it in the query
    # If no people is inside the train, pick the first people
    return people_patches[0].simple_query(""Who is inside the train?"")"
7650014,Which place is it?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the car doing?"")
    for person_patch in person_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if person_patch.horizontal_center < car_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the left of the car doing?"") # crop would include the car so keep it in the query
    # If no person is to the left of a car, pick the first person
    return person_patches[0].simple_query(""What is the person to the left of the car doing?"")"
1310985,Is the yellow vehicle to the left of a lamp?," # yellow vehicle is a car
    image_patch = ImagePatch(image)
    yellow_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    for yellow_patch in yellow_patches:
        lamp_patches = image_patch.find(""lamp"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center > yellow_patch.horizontal_center:
                return ""yes""
    return ""no"""
646935,Which room is it?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
9495263,Is the woman to the left or to the right of the man that wears a cap?," # left or right
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    for woman_patch in woman_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            # If no man is found, query the image directly
            return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
        for man_patch in man_patches:
            if man_patch.simple_query(""Is the man wearing a cap?"") == ""yes"":
                if woman_patch.horizontal_center < man_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right"""
946016,Do you think the animal that is sitting-down is small or large?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    sitting_patches = image_patch.find(""sitting-down"")
    # Question assumes only one sitting patch
    if len(sitting_patches) == 0:
        # If no sitting animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    for sitting_patch in sitting_patches:
        return sitting_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"") # crop would include the sitting animal so keep it in the query"
9617920,Do the garbage can and the pan have the same color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    for garbage_can_patch in garbage_can_patches:
        pan_patches = image_patch.find(""pan"")
        for pan_patch in pan_patches:
            if garbage_can_patch.verify_property(""garbage can"", ""color"") == pan_patch.verify_property(""pan"", ""color""):
                return ""yes""
    return ""no"""
3578781,Which kind of clothing is black?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""black""):
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
4695656,What is the lamp on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lamp on?"")"
13696926,The homes that are to the left of the people have what color?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    for people_patch in people_patches:
        home_patches = image_patch.find(""home"")
        for home_patch in home_patches:
            if home_patch.horizontal_center < people_patch.horizontal_center:
                return home_patch.simple_query(""The homes that are to the left of the people have what color?"") # crop would include the people so keep it in the query
    # If no home is to the left of the people, pick the first home
    return home_patches[0].simple_query(""The homes that are to the left of the people have what color?"")"
16946079,What is on the wall?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?," # image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the napkin on the right side?"")"
11513897,What appliance is the label on?," # assumes only one label patch
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    return label_patches[0].simple_query(""What appliance is the label on?"") # crop would include the label so keep it in the query"
8240644,What is the color of the bird's tail?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What is the color of the bird's tail?"")"
5245080,Is he to the right or to the left of the camera?," # image_patch = ImagePatch(image)
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    if man_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17800894,Are there both a window and a door in the picture?," # window and door are not relational verbs
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
191027873,Where is the snowboard?," # snowboard is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snowboard?"")"
1964079,Are the box and the paper the same color?," # box and paper are the same color
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    for box_patch in box_patches:
        paper_patches = image_patch.find(""paper"")
        for paper_patch in paper_patches:
            if box_patch.verify_property(""box"", ""color"") == paper_patch.verify_property(""paper"", ""color""):
                return ""yes""
    return ""no"""
