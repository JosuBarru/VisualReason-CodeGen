sample_id,query,generated_code
13151559,Is the large hair both white and soft?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    for hair_patch in hair_patches:
        is_white = hair_patch.verify_property(""hair"", ""white"")
        is_soft = hair_patch.verify_property(""hair"", ""soft"")
        is_large = hair_patch.verify_property(""hair"", ""large"")
        if is_white and is_soft and is_large:
            return ""yes""
    return bool_to_yesno(is_white and is_soft)"
18370956,Who is eating the cupcake?,"    image_patch = ImagePatch(image)
    who = image_patch.simple_query(""Who is eating the cupcake?"")
    return who"
6436809,What is the guy wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the guy wearing?"")
    return person_patches[0].simple_query(""What is the person wearing?"")"
117037,Which kind of food is to the right of the cabbage?,"    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    # Question assumes only one cabbage patch
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    right_of_cabbage = [x for x in image_patch.find(""food"") if x.horizontal_center > cabbage_patches[0].horizontal_center]
    if len(right_of_cabbage) == 0:
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    for food_patch in right_of_cabbage:
        return food_patch.simple_query(""Which kind of food is to the right of the cabbage?"")"
758936,Who wears the cap?,"    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    return cap_patches[0].simple_query(""Who wears the cap?"")"
111046440,Who is pointing?,"    # asks for the predicate of a relational verb (pointing at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is pointing?"")"
15804389,Is the woman's hair short or long?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    return woman_patches[0].simple_query(""Is the woman's hair short or long?"")"
11445636,The women are watching who?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""The women are watching who?"")"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?,"    image_patch = ImagePatch(image)
    # Check the dishwasher
    dishwasher_patches = image_patch.find(""dishwasher"")
    if len(dishwasher_patches) < 1:
        return ""no""
    for dishwasher_patch in dishwasher_patches:
        is_white = dishwasher_patch.verify_property(""dishwasher"", ""white"")
        if is_white:
            return ""yes""
    # Check the gas stove
    gas_stove_patches = image_patch.find(""gas stove"")
    if len(gas_stove_patches) < 1:
        return ""no""
    for gas_stove_patch in gas_stove_patches:
        is_white = gas_stove_patch.verify_property(""gas stove"", ""white"")
        if is_white:
            return ""yes""
    return ""no"""
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?,"    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_patch = bed_patches[0]
    sheet_patches = bed_patch.find(""bed sheet"")
    if len(sheet_patches) == 0:
        # If no bed sheet is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    sheet_patch = sheet_patches[0]
    furniture_patches = image_patch.find(""table"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""What is it?"") == ""table"" and furniture_patch.simple_query(""What is the material?"") == sheet_patch.simple_query(""What is the material?""):
            return ""table""
    return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")"
758958,Is there either any red pillow or snowboard?,"    image_patch = ImagePatch(image)
    is_red-pill     #  1  2  3  4  5  6  7  8  9 10 11 12  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  14  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  # "
143816,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?,"    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    if len(knquery =          5 0 5 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
17829769,What is the computer mouse in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?,"    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    # Question assumes only one toddler patch
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    return toddler_patches[0].simple_query(""What is the toddler holding?"")"
2951242,Is the gray shirt sleeveless or short sleeved?,"    image_patch = ImagePatch(image)
    gray_shirt_patches = image_patch.find(""gray shirt"")
    # Question assumes only one gray shirt patch
    if len(gray_shirt_patches) == 0:
        # If no gray shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    if gray_shirt_patches[0].verify_property(""shirt"", ""sleeveless""):
        return ""sleeveless""
    else:
        return gray_shirt_patches[0].simple_query(""Is the gray shirt sleeveless or short sleeved?"")"
15241795,Is the tank top red?,"    image_patch = ImagePatch(image)
    tanktop_patches = image_patch.find(""tank top"")
    # Question assumes only one tanktop patch
    if len(tanktop_patches) == 0:
        # If no tanktop is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    return tanktop_patches[0].verify_property(""tank top"", ""red"")"
13885234,Which kind of animal is in front of the rocks?,"    image_patch = ImagePatch(image)
    rock_patches = image_patch.find(""rock"")
    animal_patches = image_patch.find(""animal"")
    # Question assumes one rock patch and one animal patch
    for rock_patch in rock_patches:
        for animal_patch in animal_patches:
            if rock_patch.horizontal_center < animal_patch.horizontal_center:
                return animal_patch.simple_query(""Which kind of animal is in front of the rocks?"")
    # If no rock is found, query the image directly
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?,"    image_patch = ImagePatch(image)
    is_grape = image_patch.exists(""grape"")
    return bool_to_yesno(is_grape)"
6455591,What type of furniture is white?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white"")
    # Question assumes one white patch
    if len(white_patches) == 0:
        # If no white is found, query the image directly
        return image_patch.simple_query(""What type of furniture is white?"")
    for white_patch in white_patches:
        white_patch_type = white_patch.simple_query(""What type of furniture is this?"")
        return white_patch_type # crop would include the white so keep it in the query
    # If no white is found, query the image directly
    return image_patch.simple_query(""What type of furniture is white?"")"
1033761,What is the blue clothing item?,"    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue clothing item"")
    # Question assumes only one blue clothing item patch
    if len(blue_patches) == 0:
        # If no blue clothing item is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    return blue_patches[0].simple_query(""What is the blue clothing item?"")"
17726504,Who is wearing the glasses?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        who_wearing_glasses = person_patch.simple_query(""Who is wearing the glasses?"")
    #    if who_wearing_glasses == """": # crop would include the glasses so keep it in the query
    #        return image_patch.simple_query(""Who is wearing the glasses?"")
    return who_wearing_glasses"
13112902,Is the woman wearing a bracelet?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    return woman_patches[0].verify_property(""woman"", ""bracelet"")"
698766,What is the food that is not white?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        is_white = (food_patch.simple_query(""Is the food white?"") == ""yes"")
        if not is_white:
            return food_patch.simple_query(""What is the food that is not white?"") # crop would include the food so keep it in the query
    # If no food is not white, pick the first one
    return food_patches[0].simple_query(""What is the food that is not white?"")"
1332276,Are there both a cup and a bottle in the picture?,"    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    is_both = is_cup and is_bottle
    return bool_to_yesno(is_both)"
12633088,What color is that glove?,"    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?,"    # asks for the predicate of a relational verb (holding a helmet), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is holding the helmet?"")"
2143247,What is the name of the food to the left of the donut that looks little?,"    image_patch = ImagePatch(image)
    donut_patches = image_patch.find(""donut"")
    # Question assumes only one donut patch
    if len(donut_patches) == 0:
        # If no donut is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for donut_patch in donut_patches:
        little_patches = image_patch.find(""little"")
        for little_patch in little_patches:
            if little_patch.horizontal_center < donut_patch.horizontal_center:
                return little_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"") # crop would include the little so keep it in the query
    # If no little is found, query the image directly
    return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")"
3767951,Is the clock to the right or to the left of the man on the left?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man on left"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    for clock_patch in clock_patches:
        if clock_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
"
17655180,What's the sticker on?,"    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What's the sticker on?"")
    return image_patch.simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?,"    image_patch = ImagePatch(image)
    still_car_patches = image_patch.find(""still car"")
    if len(still_car_patches) < 2:
        # If no two still cars are found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    for still_car_patch in still_car_patches:
        if still_car_patch.simple_query(""Is the car still?"") == ""yes"":
            for other_patch in still_car_patches:
                if other_patch.horizontal_center > still_car_patch.horizontal_center:
                    if other_patch.simple_query(""Is the object a person?"") == ""yes"":
                        return ""yes""
    return ""no""
"
7188981,Does the giraffe look adult?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return giraffe_patches[0].simple_query(""Is the giraffe looking adult?"")"
16852802,Of what color are the pants?,"    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"")"
9619158,What kind of watercraft is full of men?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of watercraft is full of men?"")"
3625225,On which side of the picture are the boats?,"    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    if boat_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?,"    image_patch = ImagePatch(image)
    left_elephant_patches = image_patch.find(""left elephant"")
    right_elephant_patches = image_patch.find(""right elephant"")
    # Question assumes one left and one right elephant
    if len(left_elephant_patches) != 1 or len(right_elephant_patches) != 1:
        # If no left or right elephant is found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_elephant = left_elephant_patches[0]
    right_elephant = right_elephant_patches[0]
    is_left_large = left_elephant.verify_property(""elephant"", ""large size"")
    is_right_large = right_elephant.verify_property(""elephant"", ""large size"")
    return bool_to_yesno(is_left_large)"
19834124,What is the girl holding?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    return girl_patches[0].simple_query(""What is the girl holding?"")"
4617704,Does the toilet seat that is not down appear to be white and open?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet seat that is not down"")
    # Question assumes only one toilet seat patch
    if len(toilet_patches) == 0:
        # If no toilet seat is found, query the image directly
        return image_patch.simple_query(""Is the toilet seat that is not down white and open?"")
    for toilet_patch in toilet_patches:
        is_white = toilet_patch.verify_property(""color"", ""white"")
        is_open = toilet_patch.verify_property(""state"", ""open"")
        is_not_down = toilet_patch.verify_property(""state"", ""not down"")
        is_apparent = toilet_patch.verify_property(""apparent"", ""white and open"")
        if is_white and is_open and is_not_down and is_apparent:
            return bool_to_yesno(is_apparent)
    return bool_to_yesno(is_white and is_open)"
5899539,Are there any bottles or mugs that are not purple?,"    image_patch = ImagePatch(image)
    is_bottle_or_mug = False
    is_purple = False
    is_bottle_or_mug_and_not_purple = False
    bottle_or_mug_patches = image_patch.find(""bottle"") + image_patch.find(""mug"")
    for bottle_or_mug_patch in bottle_or_mug_patches:
        is_bottle_or_mug = bottle_or_mug_patch.exists(""bottle or mug"")
        if is_bottle_or_mug:
            is_purple = bottle_or_mug_patch.verify_property(""bottle or mug"", ""purple"")
            if not is_purple:
                is_bottle_or_mug_and_not_purple = True
    if is_bottle_or_mug_and_not_purple:
        return bool_to_yesno(is_bottle_or_mug_and_not_purple)
    else:
        return bool_to_yesno(is_bottle_or_mug)"
2631593,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    person_patch = person_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    for man_patch in man_patches:
        if man_patch.horizontal_center > person_patch.horizontal_center:
            return ""no""
    return bool_to_yesno(any(man_patch.horizontal_center < person_patch.horizontal_center for man_patch in man_patches))"
111054378,Is the small couch to the right or to the left of the bottle?,"    image_patch = ImagePatch(image)
    small_couch_patches = image_patch.find(""small couch"")
    bottle_patches = image_patch.find(""bottle"")
    for small_couch_patch in small_couch_patches:
        for bottle_patch in bottle_patches:
            if small_couch_patch.horizontal_center < bottle_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
9392411,Is the bottle to the right or to the left of the appliance on the left?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    appliance_patches = image_patch.find(""appliance on left"")
    # Question assumes one bottle and one appliance on left
    if len(bottle_patches) < 1 or len(appliance_patches) < 1:
        # If no bottle or appliance on left is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    bottle = bottle_patches[0]
    appliance_on_left = appliance_patches[0]
    if bottle.horizontal_center > appliance_on_left.horizontal_center:
        return ""right""
    else:
        return ""left""
"
16753829,What type of animal is sitting in the container in the bottom of the photo?,"    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    container_patch = container_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.vertical_center < container_patch.vertical_center:
            return animal_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"") # crop would include the container so keep it in the query
    # If no animal is found in the container, query the image directly
    return container_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")"
1345482,What is that train in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?,"    image_patch = ImagePatch(image)
    is_to_the_right = ""yes""
    is_to_the_right_and_right = ""yes""
    is_to_the_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right = ""yes""
    is_to_the_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and_right_and"
459445,In which part is the silver device?,"    image_patch = ImagePatch(image)
    silver_device_patches = image_patch.find(""silver device"")
    # Question assumes only one silver device patch
    if len(silver_device_patches) == 0:
        # If no silver device is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if silver_device_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""right"" # or top, depending on the definition of ""part"" # right is a good guess, but it could also be top if the device is at the top of the image. # if you want to be more precise, you could ask for the top or bottom of the image. # if you want to be even more precise, you could ask for the left or right of the image. # if you want to be even more precise, you could ask for the center of the image. # if you want to be even more precise, you could ask for the distance from the left or right of the image. # if you want to be even more precise, you could ask for the distance from the top or bottom of the image. # if you want to be even more precise, you could ask for the distance from the center of the image. # if you want to be even more precise, you could ask for the distance from the left or right of the image. # if you want to be even more precise, you could ask for the distance from the top or bottom of the image. # if you want to be even more precise, you could ask for the distance from the center of the image. # if you want to be even more precise, you could ask for the distance from the left or right of the image. # if you want to be even more precise, you could ask for the distance from the top or bottom of the image. # if you want to be even more precise, you could ask for the distance from the center of the image. # if you want to be even more precise, you could ask for the distance from the left or right of the image. # if you want to be even more precise, you could ask for the distance from the top or bottom of the image. # if you want to be even more precise, you could ask for the distance from the center of the image. # if you want to be even more precise, you could ask for the distance from the left or right"
11786203,What is the man on?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?,"    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown door"")
    for brown_patch in brown_patches:
        if brown_patch.exists(""door""):
            return ""yes""
    brown_patches = image_patch.find(""brown chair"")
    for brown_patch in brown_patches:
        if brown_patch.exists(""chair""):
            return ""yes""
    brown_patches = image_patch.find(""brown"")
    for brown_patch in brown_patches:
        if brown_patch.exists(""door"") or brown_patch.exists(""chair""):
            return ""yes""
    return bool_to_yesno(image_patch.exists(""brown door chair""))"
131031372,What is the napkin in?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What is the napkin in?"")
    return image_patch.simple_query(""What is the napkin in?"")"
1241681,Are there any people behind the white dessert?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white dessert"")
    if len(white_patches) == 0:
        # If no white dessert is found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    white_patch = white_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > white_patch.horizontal_center:
            return bool_to_yesno(person_patch.exists(""person""))
    return bool_to_yesno(image_patch.exists(""person""))"
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?,"    image_patch = ImagePatch(image)
    # contains a relation (right, in front of, to the right of), so ask directly
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")"
8553578,What is the Pikachu doing?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?,"    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""What is on the large mountains?"")
    return mountain_patches[0].simple_query(""What is on the large mountains?"")"
5107295,What is in the sky?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?,"    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is the fruit on?"")
    for watercraft_patch in watercraft_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if watercraft_patch.horizontal_center > fruit_patch.horizontal_center:
                return watercraft_patch.simple_query(""What kind of watercraft is the fruit on?"") # crop would include the fruit so keep it in the query
    # If no fruit is found, pick the first watercraft
    return watercraft_patches[0].simple_query(""What kind of watercraft is the fruit on?"")"
1827218,Is the bottle in the bottom of the image?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    if bottle_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
10938155,What color is the sky?,"    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""What color is the sky?"")
    return sky_patches[0].simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?,"    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    return sail_patches[0].simple_query(""Does the sail look white or red?"")"
3662784,Do you see either any traffic lights or cars?,"    image_patch = ImagePatch(image)
    is_traffic_light_or_car = False
    for object_patch in image_patch.find(""car""):
        is_traffic_light_or_car = True
    if not is_traffic_light_or_car:
        for object_patch in image_patch.find(""traffic light""):
            is_traffic_light_or_car = True
    return bool_to_yesno(is_traffic_light_or_car)"
15515711,Are there any girls to the right of the yellow helmet?,"    image_patch = ImagePatch(image)
    yellow_helmets = image_patch.find(""yellow helmet"")
    # Question assumes only one yellow helmet
    if len(yellow_helmets) == 0:
        # If no yellow helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    for yellow_helmot in yellow_helmets:  # for each yellow helmet
        for person in image_patch.find(""person""):  # for each person
            if person.horizontal_center > yellow_helmot.horizontal_center:  # if person is to the right
                if person.simple_query(""What is the person's gender?"") == ""girl"":
                    return ""yes""
    return ""no""
"
6315316,Which kind of furniture is in front of the window?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    window_patches = image_patch.find(""window"")
    for furniture_patch in furniture_patches:
        for window_patch in window_patches:
            if furniture_patch.horizontal_center > window_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is in front of the window?"")
            else:
                return furniture_patch.simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?,"    image_patch = ImagePatch(image)
    faucet_patches = image_patch.find(""faucet"")
    if len(faucet_patches) == 0:
        # If no faucet is found, query the image directly
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    for faucet_patch in faucet_patches:
        appliance_patches = image_patch.find(""dishwasher"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center < faucet_patch.horizontal_center:
                return ""dishwasher""
    return image_patch.simple_query(""What appliance is to the left of the faucet?"")"
41050828,What is the color of the jacket?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"")"
610914,Is the green boat to the right or to the left of the wood house?,"    image_patch = ImagePatch(image)
    green_boat_patches = image_patch.find(""green boat"")
    wood_house_patches = image_patch.find(""wood house"")
    for green_boat_patch in green_boat_patches:
        for wood_house_patch in wood_house_patches:
            if green_boat_patch.horizontal_center > wood_house_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
"
13158346,Is the woman in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    if woman_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
16318707,Are there either any colorful bikes or skateboards?,"    image_patch = ImagePatch(image)
    is_colorful_bike_or_board = False
    bike_or_board_patches = image_patch.find(""bike"") + image_patch.find(""bike with rider"") + image_patch.find(""skateboard"")
    for bike_or_board_patch in bike_or_board_patches:
        is_colorful_bike_or_board = is_colorful_bike_or_board or bike_or_board_patch.verify_property(""bike or board"", ""colorful"")
    return bool_to_yesno(is_colorful_bike_or_board)"
2805654,Is the bag to the right or to the left of the bench?,"    bag_patches = ImagePatch(image).find(""bag"")
    bench_patches = ImagePatch(image).find(""bench"")
    bag = bag_patches[0]
    bench = bench_patches[0]
    if bag.horizontal_center < bench.horizontal_center:
        return ""left""
    else:
        return ""right"""
15315607,What do you think is in the sky?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    gas_station_patches = image_patch.find(""gas station"")
    # Question assumes one truck and one gas station
    for truck_patch in truck_patches:
        for gas_station_patch in gas_station_patches:
            if abs(truck_patch.horizontal_center - gas_station_patch.horizontal_center) < 50:
                return truck_patch.simple_query(""What color is the truck?"")
    # If no truck is near a gas station, query the image directly
    return image_patch.simple_query(""What color is the truck near the gas station?"")"
12140940,"What are the headphones on, a sofa or a desk?","    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
    for headphones_patch in headphones_patches:
        where_to = image_patch.simple_query(""What are you listening to your headphones on, a sofa or a desk?"")
        if where_to == ""sofa"":
            return ""sofa""
        else:
            return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")"
727533,Does the bun look brown and toasted?,"    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    return bool_to_yesno(bun_patches[0].verify_property(""bun"", ""brown_toasted"")"
61044602,What is in the brown basket?,"    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""brown basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""What is in the brown basket?"")
    basket_patch = basket_patches[0]
    return basket_patch.simple_query(""What is in the brown basket?"")"
16827204,Is the marker different in color than the paper?,"    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) < 2:
        # If there is only one marker, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    for i, marker_patch in enumerate(marker_patches):
        if i < len(marker_patches) - 1:
            if marker_patch.simple_query(""What is the color of the marker?"") != marker_patches[0].simple_query(""What is the color of the marker?""):
                return ""yes""
    return ""no"""
1284539,Is there a racket to the right of the man on the right side?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch on each side
    if len(man_patches) < 2:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    man_on_right = man_patches[1]  # the second man
    racket_patches = image_patch.find(""racket"")
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_on_right.horizontal_center:
            return ""no""
    return bool_to_yesno(man_on_right.exists(""racket""))"
1257391,What place is this?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
16223517,What do you think is the color of the large device?,"    image_patch = ImagePatch(image)
    large_device_patches = image_patch.find(""large device"")
    # Question assumes only one large device patch
    if len(large_device_patches) == 0:
        # If no large device is found, query the image directly
        return image_patch.simple_query(""What do you think is the color of the large device?"")
    return large_device_patches[0].simple_query(""What is the color of the large device?"")"
1024280,Does the shirt look long sleeved or sleeveless?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    return shirt_patches[0].simple_query(""Does the shirt look long sleeved or sleeveless?"")"
2769463,Which kind of animal is lying in the chair?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    return animal_patches[0].simple_query(""Which kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?,"    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    crate_patches = image_patch.find(""crate"")
    for white_box_patch in white_box_patches:
        for crate_patch in crate_patches:
            if white_box_patch.horizontal_center > crate_patch.horizontal_center:
                return ""no""
    return bool_to_yesno(all_query =   #  # Is the white box to the right of the crate
      # for box in white_box_patches
     # for crate in crate_patches
        for box, crate in zip(    #  # Is the white box to the right of the crate
            [ImagePatch(image) for image in [box.cropped_image for box in white_box_patches]],
            [ImagePatch(image) for image in [box.cropped_image for box in crate_patches]]
        )  #  # Is the white box to the right of the crate
        :  #  # Is the white box to the right of the crate  # for
        , 'yes' if all(white_box_patch.horizontal_center > crate_patch.horizontal_center for white_box_patch, crate_patch in zip(    #  # Is the white box to the right of the crate
            [ImagePatch(image) for image in [box.cropped_image for box in white_box_patches]],
            [ImagePatch(image) for image in [box.cropped_image for box in crate_patches]]
        )  #  # Is the white box to the right of the crate
        )  #  # Is the white box to the right of the crate
        for box, crate in zip(    #  # Is the white box to the right of the crate
            [ImagePatch(image) for image in [box.cropped_image for box in white_box_patches]],
            [ImagePatch(image) for image in [box.cropped_image for box in crate_patches]]
        )  #  # Is the white box to the right of the crate
    # return bool_to_yesno(all_query =  #  # Is the white box to the right of the crate
    #     for box in white_box_patches
    #     for crate in crate_patches
    # )  #  # Is the white box to the right of the crate
    # )  #  # Is the white box to the right of the crate
    # return bool_to_yesno(all_query =  #  # Is the white box to the right"
3434581,Are there both a coffee table and a lamp?,"    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    is_lamp_or_table = image_patch.exists(""lamp table"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_2 = image_patch.exists(""table lamp"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_3 = image_patch.exists(""lamp on table"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_4 = image_patch.exists(""table with lamp"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_5 = image_patch.exists(""lamp on top of table"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_6 = image_patch.exists(""table lamp on top"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_7 = image_patch.exists(""lamp table on top"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_8 = image_patch.exists(""lamp on table top"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_9 = image_patch.exists(""table lamp top on"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_10 = image_patch.exists(""lamp on top of table lamp"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_11 = image_patch.exists(""table lamp on top of lamp"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_12 = image_patch.exists(""lamp on top of lamp table"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_13 = image_patch.exists(""lamp table on top of lamp"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_14 = image_patch.exists(""lamp on top of lamp table lamp"") # crop would include the lamp and table so keep it in the query
    is_lamp_or_table_15 = image_patch.exists(""lamp"
19201196,Is that flower pot made of clay?,"    image_patch = ImagePatch(image)
    flowerpot_patches = image_patch.find(""flower pot"")
    # Question assumes only one flower pot patch
    if len(flowerpot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return flowerpot_patches[0].verify_property(""flower pot"", ""clay"")"
191006281,Does the sky look clear and gray?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the sky look clear and gray?"")"
681336,Do you see hats or gloves that are white?,"    image_patch = ImagePatch(image)
    is_hat = image_patch.exists(""white hat"")
    is_glove = image_patch.exists(""white glove"")
    is_hat_or_glove = image_patch.exists(""white hat and glove"") or is_hat or is_glove
    return bool_to_yesno(is_hat_or_glove)"
1300368,What is on the cabinet that is to the right of the keyboard?,"    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    cabinet_patches = image_patch.find(""cabinet"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.horizontal_center > keyboard_patches[0].horizontal_center:
            return cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"") # crop would include the object so keep it in the query
    # If no cabinet is found to the right of the keyboard, query the image directly
    return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")"
172394,What is the animal to the left of the tap called?,"    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    for tap_patch in tap_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center < tap_patch.horizontal_center:
                return animal_patch.simple_query(""What is the animal to the left of the tap called?"") # crop would include the animal so keep it in the query
    # If no animal is found to the left of the tap, query the image directly
    return image_patch.simple_query(""What is the animal to the left of the tap called?"")"
738176,Is the chair on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    if chair_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
4194919,Is the child on the right of the picture?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    if child_patches[0].horizontal_center > (image_patch.width / 2):
        return ""no, right: no.""  if ""no"" in ""right: no."" else ""no"" if ""no"" in ""right"" else ""yes"" if child_patches[0].horizontal_center > image_patch.width / 2 else ""yes""
    else:
        return ""yes"""
3585327,Who is on the surfboard?,"    # asks for the predicate of a relational verb (on the surfboard), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard?"")"
1711172,What size are the packages the candle is on top of?,"    image_patch = ImagePatch(image)
    package_patches = image_patch.find(""package"")
    # Question assumes only one package patch
    if len(package_patches) == 0:
        # If no package is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    for package_patch in package_patches:
        size = package_patch.simple_query(""What size are you? (small, medium, large)"")
        if size == ""candle"":  # if the package is the candle, return the size of the package it's on
            return image_patch.simple_query(""What size are the packages the candle is on top of?"")
        else:
            return size"
4353895,Who is on the snowboard on the right?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes one person and one snowboard
    for person_patch in person_patches:
        if person_patch.horizontal_center > (image_patch.width / 2):
            return person_patch.simple_query(""Who is on the snowboard on the right?"")
    return person_patches[0].simple_query(""Who is on the snowboard on the right?"")"
17929304,What is the vehicle that is on the road?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is on the road?"")
    return vehicle_patches[0].simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?,"    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return bread_patches[0].simple_query(""What color is the crust?"")"
5672474,Is the plate to the left or to the right of the beer on the left?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    beer_patches = image_patch.find(""beer on left"")
    for plate_patch in plate_patches:
        for beer_patch in beer_patches:
            if plate_patch.horizontal_center < beer_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
11341284,What is the pattern of the mattress on the street?,"    image_patch = ImagePatch(image)
    mattress_patches = image_patch.find(""mattress"")
    # Question assumes only one mattress patch
    if len(mattress_patches) == 0:
        # If no mattress is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the mattress on the street?"")
    return mattress_patches[0].simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?,"    image_patch = ImagePatch(image)
    is-boy     #  1  2  3  4  5  6  7  8  9 10 11 12  # for 2
  2  3  4  5  6  7  8  9 10 11 12  # for 2
    1  2  3  4  5  6  7  8  9 10 11 12  # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for "
19203395,Is the white toilet paper to the right or to the left of the toilet?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white toilet paper"")
    if len(white_patches) == 0:
        # If no white toilet paper is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    white_patch = white_patches[0]
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    for toilet_patch in toilet_patches:
        if white_patch.horizontal_center < toilet_patch.horizontal_center:
            return ""left""
    return ""right""
"
1194938,Are there any airplanes in front of the building?,"    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_building = image_patch.exists(""building"")
    is_airplane_and_building_properly_positioned = is_airplane and is_building
    if is_airplane_and_building_properly_positioned:
        return bool_to_yesno(is_airplane)
    else:
        return bool_to_yesno(is_airplane)"
5350205,How clean is the road that the car is on the side of?,"    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    for road_patch in road_patches:
        road_side = ""left"" if road_patch.horizontal_center < image_patch.width / 2 else ""right""
        if road_side == ""left"":
            return road_patch.simple_query(""How clean is the road that the car is on the side of?"")
        else:
            return road_patch.simple_query(""How clean is the road that the car is on the side of?"")"
4256016,"In which part of the picture is the black van, the bottom or the top?","    image_patch = ImagePatch(image)
    black_van_patches = image_patch.find(""black van"")
    # Question assumes only one black van patch
    if len(black_van_patches) == 0:
        # If no black van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if black_van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    fence_patches = image_patch.find(""fence"")
    # Question assumes one person patch and one fence patch
    for person_patch in person_patches:
        for fence_patch in fence_patches:
            if person_patch.horizontal_center > fence_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the fence doing?"")
            else:
                return person_patch.simple_query(""What is the person to the right of the fence doing?"")
"
16471124,Does the horse have a different color than the boot?,"horse_patches = ImagePatch(image).find(""horse"")
boot_patches = ImagePatch(image).find(""boot"")
# Question assumes one horse patch and one boot patch
horse_colors = set()
for horse_patch in horse_patches:
    horse_colors.add(horse_patch.simple_query(""What is the color of the horse?""))
for boot_patch in boot_patches:
    boot_colors = set()
    for boot in boot_patches:
        boot_colors.add(boot.simple_query(""What is the color of the boot?""))
    for horse_color in horse_colors:
        if horse_color not in boot_colors:
            return ""yes""
    return ""no""
"
958247,Is the mouse to the right of a chair?,"    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    chair_patches = image_patch.find(""chair"")
    is_to_right = ""no""
    for mouse_patch in mouse_patches:
        for chair_patch in chair_patches:
            if mouse_patch.horizontal_center > chair_patch.horizontal_center:
                is_to_right = ""no""
            else:
                return ""yes""
    return is_to_right"
11179512,The basket made of plastic is what color?,"    basket_patches = ImagePatch(image).find(""basket made of plastic"")
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""What is the color of the basket made of plastic?"")
    return basket_patches[0].simple_query(""What is the color of the basket?"")"
8816272,Do you see any elephant to the left of the bird?,"    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    bird_patches = image_patch.find(""bird"")
    is_to_the_left = False
    for elephant_patch in elephant_patches:
        for bird_patch in bird_patches:
            if elephant_patch.horizontal_center < bird_patch.horizontal_center:
                is_to_the_left = True
    if is_to_the_left:
        return bool_to_yesno(image_patch.exists(""elephant""))
    else:
        return bool_to_yesno(image_patch.exists(""elephant""))"
11168592,What is the animal in front of the lamp?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What is the animal in front of the lamp?"")
    lamp_patch = lamp_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal in front of the lamp?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > lamp_patch.horizontal_center:
            return animal_patch.simple_query(""What is the animal in front of the lamp?"")
    return animal_patches[0].simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the jacket?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing the jacket?"")
    # if no person is wearing a jacket, query the image directly
    return who_is_wearing"
7398502,What is the food to the left of the girl in the bottom of the photo?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    for girl_patch in girl_patches:
        if girl_patch.vertical_center > (image_patch.width / 2):
            return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    for girl_patch in girl_patches:
        if girl_patch.vertical_center < (image_patch.height / 2):
            return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")"
5145864,What is the device that the camera is in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the device that the camera is in front of?"")"
788143,Is the man on the surfboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man on surfboard"")
    # Question assumes one man on surfboard patch
    if len(man_patches) == 0:
        # If no man on surfboard is found, query the image directly
        return image_patch.simple_query(""Is the man on the surfboard?"")
    return man_patches[0].simple_query(""Is the man on the surfboard?"")"
15854501,What device has the same color as the device in the box?,"    image_patch = ImagePatch(image)
    device_in_box_patches = image_patch.find(""device in box"")
    if len(device_in_box_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    device_in_box = device_in_box_patches[0]
    devices_patches = image_patch.find(""device"")
    for device in devices_patches:
        if device.colorQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQueryQuery"
3228067,What is the child wearing?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    return child_patches[0].simple_query(""What is the child wearing?"")"
6817336,Is the blue sky behind a cathedral?,"    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue"")
    # Question assumes only one blue patch
    if len(blue_patches) == 0:
        # If no blue is found, query the image directly
        return image_patch.simple_query(""Is the blue sky behind a cathedral?"")
    for blue_patch in blue_patches:
        is_blue_patch = blue_patch.simple_query(""Is the blue a sky?"") == ""yes""
        if is_blue_patch:
            return blue_patch.simple_query(""Is the blue sky behind a cathedral?"") # crop would include the sky so keep it in the query
    # If no blue is a sky, pick the first blue
    blue_patch = blue_patches[0]
    cathedral_patches = image_patch.find(""cathedral"")
    for cathedral_patch in cathedral_patches:
        if blue_patch.horizontal_center > cathedral_patch.horizontal_center:
            return ""no""
    return blue_patch.simple_query(""Is the blue sky behind a cathedral?"")"
6347271,"In which part of the image is the yellow pepper, the bottom or the top?","    image_patch = ImagePatch(image)
    yellow_pepper_patches = image_patch.find(""yellow pepper"")
    # Question assumes only one yellow pepper patch
    if len(yellow_pepper_patches) == 0:
        # If no yellow pepper is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    if yellow_pepper_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is the woman feeding?"")"
3427727,On which side is the bucket?,"    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    if bucket_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
31050314,Is the small chimney in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    small_chimney_patches = image_patch.find(""small chimney"")
    # Question assumes only one small chimney patch
    if len(small_chimney_patches) == 0:
        # If no small chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    if small_chimney_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3503396,Are the pants purple?,"    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    return pants_patches[0].verify_property(""pants"", ""purple"")"
11742862,Which kind of furniture is to the right of the paper towels?,"    image_patch = ImagePatch(image)
    paper_towel_patches = image_patch.find(""paper towel"")
    if len(paper_towel_patches) == 0:
        # If no paper towel is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    for paper_towel_patch in paper_towel_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > paper_towel_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"") # crop would include the furniture so keep it in the query
    # If no furniture is to the right of the paper towel, query the image directly
    return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")"
5891809,What kind of furniture is gray?,"    image_patch = ImagePatch(image)
    gray_patches = image_patch.find(""gray"")
    # Question assumes only one gray patch
    if len(gray_patches) == 0:
        # If no gray is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    for gray_patch in gray_patches:
        gray_furniture_patches = image_patch.find(""gray furniture"")
        for gray_furniture_patch in gray_furniture_patches:
            if gray_patch.horizontal_center > gray_furniture_patch.horizontal_center:
                return gray_furniture_patch.simple_query(""What kind of furniture is gray?"") # crop would include the furniture so keep it in the query
    # If no gray is found, query the image directly
    return image_patch.simple_query(""What kind of furniture is gray?"")"
5370528,Is the hair white and long?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    person = person_patches[0]
    is_hair_white_and_long = person.verify_property(""hair"", ""white_and_long"")
    return bool_to_yesno(is_hair_white_and_long)"
781153,Do you see trains near the lamp post that looks white?,"    image_patch = ImagePatch(image)
    lamp_post_patches = image_patch.find(""lamp post that looks white"")
    # Question assumes only one lamp post that looks white
    if len(lamp_post_patches) == 0:
        # If no lamp post that looks white is found, query the image directly
        return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")
    lamp_post = lamp_post_patches[0]
    is_white = lamp_post.simple_query(""What is the color of the lamp post that looks white?"") == ""white""
    if is_white:
        return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"") # crop would include the lamp post that looks white so keep it in the query
    else:
        return bool_to_yesno(image_patch.exists(""trains near lamp post that looks white""))"
5543456,Is the container to the left of the person that wears bracelets?,"    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    person_patches = image_patch.find(""person that wears bracelets"")
    # Question assumes one container patch and one person that wears bracelets
    for container_patch in container_patches:
        for person_patch in person_patches:
            if container_patch.horizontal_center < person_patch.horizontal_center:
                return ""yes""
    return ""no""
"
163134,What do you think is on the roof?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?,"    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].simple_query(""Is the shoe white or brown?"")"
5511395,What is wrapped in paper?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is wrapped in paper?"")"
5611256,Are there any couches in the picture?,"    image_patch = ImagePatch(image)
    is_couch = image_patch.exists(""couch"")
    return bool_to_yesno(is_couch)"
1162826,The man is in what?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man in?"")"
81020685,Which color is the small house?,"    image_patch = ImagePatch(image)
    small_house_patches = image_patch.find(""small house"")
    # Question assumes only one small house patch
    if len(small_house_patches) == 0:
        # If no small house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    return small_house_patches[0].simple_query(""Which color is the small house?"")"
19640724,Who is in the bathroom?,"    # asks for the predicate of a relational verb (using the bathroom), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"")"
289960,Do you see a racket to the right of the boy that is looking at the tie?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy that is looking at the tie"")
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the boy that is looking at the tie?"")
    boy_patch = boy_patches[0]
    racket_patches = image_patch.find(""racket"")
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > boy_patch.horizontal_center:
            return ""no""
    return bool_to_yesno(any(racket_patch.simple_query(""Is the racket looking at the tie?"") for racket_patch in racket_patches))"
9957748,Does the hair appear to be long and brown?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair long and brown?"")
    for person_patch in person_patches:
        is_hair_long_and_brown = (person_patch.simple_query(""Is the hair long?"") == ""yes"" and
                                    person_patch.simple_query(""What is the color of the hair?"") == ""brown"")
        return bool_to_yesno(is_hair_long_and_brown)"
21031610,What is the shoe that looks black and white resting on?,"    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    for shoe_patch in shoe_patches:
        resting_patches = image_patch.find(""ground"")
        for resting_patch in resting_patches:
            if shoe_patch.vertical_center < resting_patch.horizontal_center:
                return resting_patch.simple_query(""What is the shoe that looks black and white resting on?"") # crop would include the ground so keep it in the query
    # If no ground is found, query the image directly
    return shoe_patches[0].simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?,"    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    # Question assumes only one glass patch
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is the glass on?"")
    return glass_patches[0].simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?,"    image_patch = ImagePatch(image)
    white_pillow_patches = image_patch.find(""white pillow"")
    black_animal_patches = image_patch.find(""black animal"")
    is_under = False
    for white_pillow_patch in white_pillow_patches:
        for black_animal_patch in black_animal_patches:
            if white_pillow_patch.vertical_center < black_animal_patch.vertical_center:
                is_under = True
                break
        if is_under:
            break
    if is_under:
        return ""yes""
    else:
        return ""no""
"
457770,What kind of clothing is striped?,"    image_patch = ImagePatch(image)
    striped_patches = image_patch.find(""striped"")
    # Question assumes only one striped patch
    if len(striped_patches) == 0:
        # If no striped is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    return striped_patches[0].simple_query(""What kind of clothing is striped?"")"
12603153,Are the child's eyes blue and open?,"    image_patch = ImagePatch(image)
    eye_patches = image_patch.find(""eye"")
    # Question assumes only one eye patch
    if len(eye_patches) == 0:
        # If no eye is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    for eye_patch in eye_patches:
        is_eye_blue = eye_patch.verify_property(""eye"", ""blue"")
        is_eye_open = eye_patch.verify_property(""eye"", ""open"")
        is_eye_and_open = eye_patch.verify_property(""eye"", ""blue_and_open"")
        if is_eye_and_open:
            return bool_to_yesno(is_eye_and_open)
        else:
            return bool_to_yesno(is_eye_blue and is_eye_open)"
9480973,What is located on top of the tub?,"    image_patch = ImagePatch(image)
    tub_patches = image_patch.find(""tub"")
    # Question assumes only one tub patch
    if len(tub_patches) == 0:
        # If no tub is found, query the image directly
        return image_patch.simple_query(""What is located on top of the tub?"")
    for tub_patch in tub_patches:
        object_patches = image_patch.find(""bubbles, rubber ducky, or other objects"")
        for object_patch in object_patches:
            if object_patch.vertical_center > tub_patch.horizontal_center:
                return object_patch.simple_query(""What is located on top of the tub?"")
        if tub_patch.simple_query(""Is the tub being used for bathing?"") == ""yes"":
            return ""bubbles""
        else:
            return tub_patch.simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    white_plate_patches = image_patch.find(""white plate"")
    for fork_patch in fork_patches:
        for white_plate_patch in white_plate_patches:
            if fork_patch.horizontal_center < white_plate_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
13420253,On which side of the photo is the chair?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    if chair_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?,"    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    # Question assumes only one label patch
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What is the label on?"")
    return image_patch.simple_query(""What is the label on?"")"
3322787,What bird is to the left of the person that is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    bird_patches = image_patch.find(""bird"")
    # Question assumes one person patch and one bird patch
    for person_patch in person_patches:
        for bird_patch in bird_patches:
            if bird_patch.horizontal_center < person_patch.horizontal_center:
                return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    # If no bird is found to the left of the person, query the image directly
    return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")"
6399594,On which side is the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    if man_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6930120,Is the glass bowl on the right or on the left?,"    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    if len(glass_bowl_patches) == 0:
        # If no glass bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on left?"")
    if glass_bowl_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
12619961,What vehicles are to the left of the taxi?,"    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    if len(taxi_patches) < 1:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    for taxi_patch in taxi_patches:
        vehicles_to_left = image_patch.find(""vehicle"")
        for vehicle in vehicles_to_left:
            if vehicle.horizontal_center < taxi_patch.horizontal_center:
                return vehicle.simple_query(""What vehicles are to the left of the taxi?"")
    return ""none"""
13362315,Is the basket on the shelf black and empty?,"    basket_patches = ImagePatch(image).find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    basket_patch = basket_patches[0]
    is_black_and_empty = basket_patch.verify_property(""basket"", ""black"") and basket_patch.verify_property(""basket"", ""empty"")
    return bool_to_yesno(is_black_and_empty)"
3830854,What is the animal that is standing next to the donkey that is standing in the hay?,"    image_patch = ImagePatch(image)
    # contains a relation (standing next to, standing in, etc), so ask directly
    return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")"
18382324,Is this a bed or a table?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a bed or a table?"")"
18104571,"Which animal is that, a bird or a cat?","    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    return animal_patches[0].simple_query(""Which animal is that, a bird or a cat?"")"
2913379,Do you see any fence or pot?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    is_fenced_pot = image_patch.exists(""fenced pot"")
    is_pot_on_fence = image_patch.exists(""pot on fence"")
    is_pot_off_fence = image_patch.exists(""pot off fence"")
    is_fenced_pot_on_fence = image_patch.exists(""fenced pot on fence"")
    is_fenced_pot_off_fence = image_patch.exists(""fenced pot off fence"")
    is_fenced_pot_on_fence_2 = image_patch.exists(""fenced pot on fence 2"")
    is_fenced_pot_off_fence_2 = image_patch.exists(""fenced pot off fence 2"")
    is_fenced_pot_on_fence_3 = image_patch.exists(""fenced pot on fence 3"")
    is_fenced_pot_off_fence_3 = image_patch.exists(""fenced pot off fence 3"")
    is_fenced_pot_on_fence_4 = image_patch.exists(""fenced pot on fence 4"")
    is_fenced_pot_off_fence_4 = image_patch.exists(""fenced pot off fence 4"")
    is_fenced_pot_on_fence_5 = image_patch.exists(""fenced pot on fence 5"")
    is_fenced_pot_off_fence_5 = image_patch.exists(""fenced pot off fence 5"")
    is_fenced_pot_on_fence_6 = image_patch.exists(""fenced pot on fence 6"")
    is_fenced_pot_off_fence_6 = image_patch.exists(""fenced pot off fence 6"")
    is_fenced_pot_on_fence_7 = image_patch.exists(""fenced pot on fence 7"")
    is_fenced_pot_off_fence_7 = image_patch.exists(""fenced pot off fence 7"")
    is_fenced_pot_on_fence_8 = image_patch.exists(""fenced pot on fence 8"")
    is_fenced_pot_off_fence_8 = image_patch.exists(""fenced pot off fence 8"")
    is_fenced_pot_on_fence_9 = image_patch.exists(""fenced pot on fence 9"")
    is_fenced_pot_off_fence_9 = image_patch.exists(""fenced pot off fence 9"")
    is_fenced_pot_on_fence_10 = image_patch.exists(""fenced pot on fence 10"")
    is_fenced_pot_off_fence_10"
9294271,What is in front of the fence the zebra is kept in?,"    # asks for the predicate of a relational verb (kept in), so ask directly
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")"
10741434,What is the vegetable that is on top of the plate called?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""plate food"")
    # Question assumes only one plate patch
    if len(food_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    for food_patch in food_patches:
        top_patches = food_patch.find(""top of plate"")
        for top_patch in top_patches:
            if top_patch.horizontal_center > food_patch.horizontal_center:
                return top_patch.simple_query(""What is the vegetable that is on top of the plate called?"") # crop would include the top so keep it in the query
    # If no top is found, query the image directly
    return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")"
765962,Where is the car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Where is the car?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return image_patch.simple_query(""Where is the car?"")  # ""left""
    else:
        return image_patch.simple_query(""Where is the car?"")  # ""right"" or ""right side"" # ""top"" # ""bottom"" # ""front"" # ""back"" # ""up"" # ""down"" # ""forward"" # ""backward"" # ""left"" # ""right"" # ""bottom-right"" # ""bottom-left"" # ""top-right"" # ""top-left"" # ""bottom"" # ""top"" # ""front"" # ""back"" # ""up"" # ""down"" # ""forward"" # ""backward"" # ""left"" # ""right"" # ""bottom-right"" # ""bottom-left"" # ""top-right"" # ""top-left"" # ""bottom"" # ""top"" # ""front"" # ""back"" # ""up"" # ""down"" # ""forward"" # ""backward"" # ""left"" # ""right"" # ""bottom-right"" # ""bottom-left"" # ""top-right"" # ""top-left"" # ""bottom"" # ""top"" # ""front"" # ""back"" # ""up"" # ""down"" # ""forward"" # ""backward"" # ""left"" # ""right"" # ""bottom-right"" # ""bottom-left"" # ""top-right"" # ""top-left"" # ""bottom"" # ""top"" # ""front"" # ""back"" # ""up"" # ""down"" # ""forward"" # ""backward"" # ""left"" # ""right"" # ""bottom-right"" # ""bottom-left"" # ""top-right"" # ""top-left"" # ""bottom"" # ""top"" # ""front"" # ""back"" # ""up"" # ""down"" # ""forward"" # ""backward"" # ""left"" # ""right"" # ""bottom-right"" # ""bottom-left"" # ""top-right"" # ""top-left"" # ""bottom"" # ""top"" # ""front"" # ""back"" # ""up"" # ""down"" # ""forward"" # ""backward"
12399262,Is there either a yellow truck or airplane?,"    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_yellow_truck_or_airplane = image_patch.exists(""yellow truck or airplane"")
    is_airplane = image_patch.exists(""airplane"")
    is_yellow_truck_or_airplane_or_truck = image_patch.exists(""yellow truck or airplane or truck"")
    is_yellow_truck_or_airplane_or_truck_or_truck = image_patch.exists(""yellow truck or airplane or truck or yellow truck or airplane"")
    is_yellow_truck_or_airplane_or_truck_or_truck_or_truck = image_patch.exists(""yellow truck or airplane or truck or yellow truck or airplane or truck or yellow truck or airplane"")
    is_yellow_truck_or_airplane_or_truck_or_truck_or_truck_or_truck = image_patch.exists(""yellow truck or airplane or truck or yellow truck or airplane or truck or yellow truck or airplane or truck"")
    is_yellow_truck_or_airplane_or_truck_or_truck_or_truck_or_truck_or_truck = image_patch.exists(""yellow truck or airplane or truck or yellow truck or airplane or truck or yellow truck or airplane or truck or yellow truck or airplane"")
    is_yellow_truck_or_airplane_or_truck_or_truck_or_truck_or_truck_or_truck_or_truck = image_patch.exists(""yellow truck or airplane or truck or yellow truck or airplane or truck or yellow truck or airplane or truck or yellow truck or airplane or truck or yellow truck or airplane"")
    is_yellow_truck_or_airplane_or_truck_or_truck_or_truck_or_truck_or_truck_or_truck_or_truck = image_patch.exists(""yellow truck or airplane or truck or yellow truck or airplane or truck or yellow truck or airplane or truck or yellow truck or airplane or truck or yellow truck or airplane or truck or yellow truck or airplane or truck"")
    return bool_to_yesno(is_yellow_truck_or_airplane_or_truck_or_truck_or_truck_or_truck_or_truck_or_truck_or_truck)"
13964213,Is the man on the left of the photo?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    if man_patches[0].horizontal_center < image_patch.width / 2:
        return ""yes""
    else:
        return ""no"""
16171369,What is covered in the snow?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?,"    image_patch = ImagePatch(image)
    plastic_bottles = image_patch.find(""plastic bottle"")
    if len(plastic_bottles) == 0:
        # If no plastic bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    if plastic_bottles[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5858491,Do you see any ropes on the fence that is on the left of the picture?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center < image_patch.width / 2:
            return bool_to_yesno(fence_patch.verify_property(""fence"", ""ropes"")
    # If no fence is on the left, query the image directly
    return bool_to_yesno(image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?""))"
17834539,Are there any lamps in the scene?,"    image_patch = ImagePatch(image)
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_lamp)"
15658176,Who is wearing a helmet?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing a helmet?"")
    # if no person is wearing a helmet, query the image directly
    return who_is_wearing"
14372400,Does that coat have red color?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red color"")"
411886,Are there any curtains or blankets in this scene?,"    image_patch = ImagePatch(image)
    is_curtain_or_blanket = image_patch.exists(""curtain"") or image_patch.exists(""blanket"") or image_patch.exists(""blankets"") or image_patch.exists(""bed blanket"")
    return bool_to_yesno(is_curtain_or_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    remote_patches = image_patch.find(""remote"")
    # Question assumes one remote patch
    for remote_patch in remote_patches:
        if remote_patch.horizontal_center > man_patch.horizontal_center:
            return man_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"") # crop would include the remote so keep it in the query
    # If no remote is found, query the image directly
    return man_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")"
51039491,Is the fence black or red?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    return fence_patches[0].simple_query(""Is the fence black or red?"")"
7425912,What animal is standing in the field?,"    image_patch = ImagePatch(image)
    # contains a relation (standing in), so ask directly
    return image_patch.simple_query(""What animal is standing in the field?"")"
13136338,What animal is in front of the dog which is to the right of the bird?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    bird_patches = image_patch.find(""bird"")
    # Question assumes one dog and one bird
    for dog_patch in dog_patches:
        for bird_patch in bird_patches:
            if bird_patch.horizontal_center < dog_patch.horizontal_center:
                # bird is to the left of the dog
                return dog_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    # If no dog and bird are found, query the image directly
    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")"
3775066,Which color are the cabinets in the bottom of the picture?,"    image_patch = ImagePatch(image)
    cabinets_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinets_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    for cabinet in cabinets_patches:
        if cabinet.vertical_center < image_patch.vertical_center:
            return cabinet.simple_query(""Which color are the cabinets in the bottom of the picture?"") # crop would include the cabinet so keep it in the query
    # If no cabinet is in the bottom of the picture, pick the first cabinet
    return cabinets_patches[0].simple_query(""Which color are the cabinets in the bottom of the picture?"")"
17206239,Is the happy girl to the right of a player?,"    image_patch = ImagePatch(image)
    happy-girl      #  1  2  3  4  5  6  7  8  9 10 11 12  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  2  3  4  5
  2  3  4  5  6  7  8  9 10 11 12  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  2  3  4  5
    #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #"
2992517,"What piece of furniture is not wooden, the table or the chair?","    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    table_patches = image_patch.find(""table"")
    # Question assumes only one chair and one table
    for chair_patch in chair_patches:
        if chair_patch.simple_query(""What is the chair made of?"") != ""wooden"":
            return ""chair""
    for table_patch in table_patches:
        if table_patch.simple_query(""What is the table made of?"") != ""wooden"":
            return table_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    return ""table"""
1827558,Which side of the image is the kettle on?,"    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    if kettle_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
2785208,Where is the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    man_patch = man_patches[0]
    if man_patch.vertical_center < image_patch.horizontal_center:
        return image_patch.simple_query(""Where is the man?"")  # ""left""
    else:
        return image_patch.simple_query(""Where is the man?"")  # ""right"" or ""right"" if there's a mountain or other obstacle"
6623967,Is the baby near the countertop chewing a computer mouses?,"    image_patch = ImagePatch(image)
    is_baby_near_counter = image_patch.exists(""baby near counter"")
    is_baby_chewing = image_patch.exists(""baby chewing"")
    is_mouse = image_patch.exists(""computer mouse"")
    is_chewing_mouse = image_patch.exists(""baby chewing mouse"")
    is_chewing_counter = image_patch.exists(""baby near counter and chewing mouse"")
    is_chewing_counter2 = image_patch.exists(""baby near counter and mouse"")
    is_chewing_counter3 = image_patch.exists(""baby near counter and mouse and chewing"")
    is_chewing_counter4 = image_patch.exists(""baby near counter and mouse and mouse button"")
    is_chewing_counter5 = image_patch.exists(""baby near counter and mouse and mouse button and chewing"")
    is_chewing_counter6 = image_patch.exists(""baby near counter and mouse and mouse button and mouse button 2"")
    is_chewing_counter7 = image_patch.exists(""baby near counter and mouse and mouse button and mouse button 2 and chewing"")
    is_chewing_counter8 = image_patch.exists(""baby near counter and mouse and mouse button and mouse button 2 and mouse button 3"")
    is_chewing_counter9 = image_patch.exists(""baby near counter and mouse and mouse button and mouse button 2 and mouse button 3 and chewing"")
    is_chewing_counter10 = image_patch.exists(""baby near counter and mouse and mouse button and mouse button 2 and mouse button 3 and mouse button 4"")
    is_chewing_counter11 = image_patch.exists(""baby near counter and mouse and mouse button and mouse button 2 and mouse button 3 and mouse button 4 and chewing"")
    is_chewing_counter12 = image_patch.exists(""baby near counter and mouse and mouse button and mouse button 2 and mouse button 3 and mouse button 4 and mouse button 5"")
    is_chewing_counter13 = image_patch.exists(""baby near counter and mouse and mouse button and mouse button 2 and mouse button 3 and mouse button 4 and mouse button 5 and chewing"")
    is_chewing_counter14 = image_patch.exists(""baby near counter and mouse and mouse button and mouse button 2 and mouse button 3 and mouse button 4 and mouse button 5 and mouse button 6"")
    is_chewing_counter15 = image_patch.exists(""baby near counter and mouse and mouse button and mouse button 2 and mouse button 3 and mouse button 4 and mouse button 5 and mouse button"
12804807,Is the small bottle open or closed?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle small"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    bottle_patch = bottle_patches[0]
    return bottle_patch.simple_query(""Is the small bottle open or closed?"")"
18437691,Is the clock small or large?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    return clock_patches[0].simple_query(""Is the clock small or large?"")"
9482318,Are there either any glasses or bottles in this photo?,"    image_patch = ImagePatch(image)
    is_glass = image_patch.exists(""glass"")
    is_bottle = image_patch.exists(""bottle"")
    is_glasses_or_bottles = is_glass or is_bottle
    return bool_to_yesno(is_glasses_or_bottles)"
12362819,Is the sky blue or dark?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue or dark?"")"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?,"    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    shelf_patch = shelf_patches[0]
    cup_patches = shelf_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    for cup_patch in cup_patches:
        furniture_patches = image_patch.find(""table"")
        for table_patch in furniture_patches:
            if cup_patch.horizontal_center > table_patch.horizontal_center:
                return table_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")"
1416636,Are there both bridges and chandeliers in this photograph?,"    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    is_both = bool_to_yesno(is_bridge and is_chandelier)
    return bool_to_yesno(is_both)"
1997041,"Which side is the car on, the left or the right?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?,"    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is orange
612894,Do you see any doors?,"    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_door)"
13562221,What's the bear on?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What's the bear on?"")"
9536851,Is the woman in front of the trees holding scissors?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")
    for woman_patch in woman_patches:
        is_holding_scissors = woman_patch.verify_property(""woman"", ""holding scissors"")
        is_front_of_trees = woman_patch.simple_query(""Is the woman in front of the trees?"") == ""yes""
        if is_holding_scissors and is_front_of_trees:
            return bool_to_yesno(is_holding_scissors)
    return bool_to_yesno(woman_patches[0].verify_property(""woman"", ""holding scissors"")"
9682405,What is on the machine?,"    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    # Question assumes only one machine patch
    if len(machine_patches) == 0:
        # If no machine is found, query the image directly
        return image_patch.simple_query(""What is on the machine?"")
    return machine_patches[0].simple_query(""What is on the machine?"")"
8649435,What is on the white wall?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white wall"")
    # Question assumes one white wall patch
    if len(white_patches) == 0:
        # If no white wall is found, query the image directly
        return image_patch.simple_query(""What is on the white wall?"")
    white_patch = white_patches[0]
    return white_patch.simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?,"    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""Does the logo look red?"")
    return bool_to_yesno(logo_patches[0].verify_property(""logo"", ""red"")"
14301289,What type of vehicle is to the left of the white vehicle?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white vehicle"")
    if len(white_patches) < 2:
        # If there is only one white vehicle, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    for white_patch in white_patches:
        for other_patch in white_patches:
            if white_patch != other_patch:
                if white_patch.horizontal_center > other_patch.horizontal_center:
                    return other_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")"
523976,Which kind of vehicle is large?,"    image_patch = ImagePatch(image)
    large_vehicle_patches = image_patch.find(""large vehicle"")
    # Question assumes only one large vehicle patch
    if len(large_vehicle_patches) == 0:
        # If no large vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    for large_vehicle_patch in large_vehicle_patches:
        return large_vehicle_patch.simple_query(""Which kind of vehicle is large?"")"
3423213,Who is in front of the trees?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?,"    image_patch = ImagePatch(image)
    brown_chair_patches = image_patch.find(""brown chair"")
    if len(brown_chair_patches) < 2:
        # If there is only one brown chair, query the image directly
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    ottoman_patches = image_patch.find(""ottoman"")
    for ottoman_patch in ottoman_patches:
        for brown_chair_patch in brown_chair_patches:
            if ottoman_patch.horizontal_center < brown_chair_patch.horizontal_center:
                return ""left""
    return ""right""
"
5716578,Is there a laptop on the bed near the magazines?,"    image_patch = ImagePatch(image)
    is_laptop = image_patch.exists(""laptop on bed near magazines"")
    if is_laptop:
        return bool_to_yesno(is_laptop)
    is_laptop_or_on = image_patch.exists(""laptop on bed"") | image_patch.exists(""laptop on table near bed"") | image_patch.exists(""laptop on nightstand near bed"")
    is_near_magazines = image_patch.exists(""laptop on bed near magazines"") | image_patch.exists(""laptop on table near bed and magazines"") | image_patch.exists(""laptop on nightstand near bed and magazines"")
    return bool_to_yesno(is_laptop_or_on and is_near_magazines)"
8215791,Is the porcelain toilet to the left or to the right of the small trash can?,"    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    small_trash_can_patches = image_patch.find(""small trash can"")
    for porcelain_toilet_patch in porcelain_toilet_patches:
        for small_trash_can_patch in small_trash_can_patches:
            if porcelain_toilet_patch.horizontal_center < small_trash_can_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
17528455,What is in front of the wall?,"    image_patch = ImagePatch(image)
    wall_patches = image_patch.find(""wall"")
    # Question assumes one wall patch
    if len(wall_patches) == 0:
        # If no wall is found, query the image directly
        return image_patch.simple_query(""What is in front of the wall?"")
    wall_patch = wall_patches[0]
    object_patches = image_patch.find(""object"")
    for object_patch in object_patches:
        if object_patch.horizontal_center > wall_patch.horizontal_center:
            return object_patch.simple_query(""What is in front of the wall?"") # crop would include the object so keep it in the query
    # If no object is found, query the image directly
    return wall_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?,"goggles_patches = ImagePatch(image).find(""goggles"")
gloves_patches = ImagePatch(image).find(""glove"")

goggles_colors = set()
for goggles_patch in goggles_patches:
    goggles_colors.add(goggles_patch.simple_query(""What is the color of the goggles?""))

gloves_colors = set()
for gloves_patch in gloves_patches:
    gloves_colors.add(goggles Patch      #  #  1  2 3 4 5 6 7 8 9 0  #  #  #  2  #  #  #  #  #  #  #  #  #  #  #  #  #  2  # 2  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #"
947724,Is there any purple pillow or kite in this photograph?,"    image_patch = ImagePatch(image)
    is_pillow_or_kite = image_patch.exists(""pillow or kite"")
    is_pillow = image_patch.exists(""pillow"")
    is_kite = image_patch.exists(""kite"")
    is_purple = image_patch.exists(""purple"")
    is_pillow_and_purple = image_patch.exists(""pillow and purple"")
    is_kite_and_purple = image_patch.exists(""kite and purple"")
    is_pillow_or_kite_and_purple = image_patch.exists(""pillow or kite and purple"")
    if is_pillow_or_kite and is_pillow_and_purple or is_kite_and_purple or is_pillow_or_kite_and_purple:
        return ""yes""
    else:
        return bool_to_yesno(is_pillow or is_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?","    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    for person_patch in people_patches:
        if person_patch.horizontal_center > man_patch.horizontal_center:
            return person_patch.simple_query(""What are you doing, standing or sitting?"")
    return ""sitting"" # if no one is standing, default to sitting"
15492262,Which kind of furniture is white?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white furniture"")
    # Question assumes only one white furniture patch
    if len(white_patches) == 0:
        # If no white furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    for white_patch in white_patches:
        white_furniture_type = white_patch.simple_query(""Which kind of furniture is this?"")
        return white_furniture_type
    # If no white furniture is found, query the image directly
    return image_patch.simple_query(""Which kind of furniture is white?"")"
151032547,Is the bear on the right side?,"    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    if bear_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
5698674,Are there either any planters or benches?,"    image_patch = ImagePatch(image)
    is_planter_or_bench = False
    for object_patch in image_patch.find(""planter""), image_patch.find(""bench""), image_patch.find(""planter bench""):
        for object in object_patch:
            if object:
                is_planter_or_bench = True
                break
    return bool_to_yesno(is_planter_or_bench)"
19397103,What is the person that is standing staring at?,"    # asks for the predicate of a relational verb (standing staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person that is standing staring at?"")"
11630681,What is the color of the necklace?,"    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    # Question assumes only one necklace patch
    if len(necklace_patches) == 0:
        # If no necklace is found, query the image directly
        return image_patch.simple_query(""What is the color of the necklace?"")
    return necklace_patches[0].simple_query(""What is the color of the necklace?"")"
248245,Is the table to the left or to the right of the fence?,"    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    fence_patches = image_patch.find(""fence"")
    for table_patch in table_patches:
        for fence_patch in fence_patches:
            if table_patch.horizontal_center < fence_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
837033,Are there round windows or doors?,"    image_patch = ImagePatch(image)
    doors_and_windows = image_patch.find(""round window door"") + image_patch.find(""round window"") # crop would include the window or door so keep it in the query
    for door_or_window in doors_and_windows:
        is_round = door_or_window.simple_query(""Is the shape round?"") == ""yes""
        if is_round:
            return bool_to_yesno(door_or_window.simple_query(""Is it a door?"")) or bool_to_yesno(door_or_window.simple_query(""Is it a window?"")
    return bool_to_yesno(any(door_or_window.simple_query(""Is the shape round?"") == ""yes"" for door_or_window in doors_and_windows))"
5249150,Are there any bears or napkins in the picture?,"    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    is_bread = image_patch.exists(""bread"")
    # if there is bread, there is a good chance of a napkin
    if is_bread and is_napkin:
        return ""yes""
    if is_bread and not is_napkin:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
    if is_bread and not is_bread:
        return ""no""
    if is_bread and is_bread:
        return ""yes""
   "
13908598,What kind of vehicle is to the left of the person?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    person = person_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < person.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"") # crop would include the vehicle so keep it in the query
    # If no vehicle is found to the left of the person, query the image directly
    return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")"
61006749,Who is dressed in pink?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is dressed in pink?"")
    for person_patch in person_patches:
        person_dressed_in_pink = person_patch.simple_query(""Is the person dressed in pink?"") == ""yes""
        if person_dressed_in_pink:
            return person_patch.simple_query(""Who is dressed in pink?"") # crop would include the pink so keep it in the query
    # If no person is dressed in pink, pick the first person
    return person_patches[0].simple_query(""Who is dressed in pink?"")"
6122955,Does the pillow have yellow color?,"    pillow_patch = ImagePatch(image)
    pillow_patches = pillow_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return pillow_patch.simple_query(""Does the pillow have yellow color?"")
    pillow_patch = pillow_patches[0]
    has_yellow_color = pillow_patch.verify_property(""pillow"", ""yellow"")
    return bool_to_yesno(has_yellow_color)"
6861738,Is the old woman to the right or to the left of the faucet?,"    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    faucet_patches = image_patch.find(""faucet"")
    for old_woman_patch in old_woman_patches:
        for faucet_patch in faucet_patches:
            if old_woman_patch.horizontal_center < faucet_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
15833048,Which kind of animal is on the road?,"    image_patch = ImagePatch(image)
    road_animal_patches = image_patch.find(""road animal"")
    # Question assumes only one road animal patch
    if len(road_animal_patches) == 0:
        # If no road animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is on the road?"")
    return road_animal_patches[0].simple_query(""Which kind of animal is on the road?"")"
9524339,What animal is large?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is large?"")"
18255749,How clean are the sheets the pillow is to the right of?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheets_patches = pillow_patch.find(""sheets"")
    # Question assumes only one sheets patch
    if len(sheets_patches) == 0:
        # If no sheets are found, query the image directly
        return pillow_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    for sheets_patch in sheets_patches:
        return sheets_patch.simple_query(""How clean are the sheets?"")"
19797097,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
6899090,Is the man to the right or to the left of the appliance that looks white?,"    image_patch = ImagePatch(image)
    white_appliance_patches = image_patch.find(""white_appliance"")
    if len(white_appliance_patches) == 0:
        # If no white appliance is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patches = image_patch.find(""man"")
    for white_appliance_patch in white_appliance_patches:
        for man_patch in man_patches:
            if man_patch.horizontal_center < white_appliance_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
3357701,Does the dog to the right of the other dog have white color?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If no other dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    dog1 = dog_patches[0]
    dog2 = dog_patches[1]
    is_white1 = dog1.verify_property(""dog"", ""white"")
    is_white2 = dog2.verify_property(""dog"", ""white"")
    return bool_to_yesno(is_white2)"
2829418,What's the girl holding?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What's the girl holding?"")
    return girl_patches[0].simple_query(""What's the girl holding?"")"
15930109,Which kind of vehicle is blue?,"    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue"")
    # Question assumes one blue patch
    if len(blue_patches) == 0:
        # If no blue is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    for blue_patch in blue_patches:
        blue_patch_query = blue_patch.simple_query(""Which kind of vehicle is blue?"")
        if blue_patch_query != ""blue"":
            return blue_patch_query
    return image_patch.simple_query(""Which kind of vehicle is blue?"")"
1525382,What type of vegetable is on the food with the cheese?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food with cheese"")
    # Question assumes only one food with cheese patch
    if len(food_patches) == 0:
        # If no food with cheese is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    for food_patch in food_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < food_patch.horizontal_center:
                return vegetable_patch.simple_query(""What type of vegetable is on the food with the cheese?"") # crop would include the vegetable so keep it in the query
    # If no vegetable is found on the food with cheese, pick the first one
    return food_patches[0].simple_query(""What type of vegetable is on the food with the cheese?"")"
8548980,Are there either players or hand soaps?,"    image_patch = ImagePatch(image)
    is_player_or_handsoap = image_patch.exists(""player"") or image_patch.exists(""hand soap"") or image_patch.exists(""handsoap"")
    return bool_to_yesno(is_player_or_handsoap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?","    image_patch = ImagePatch(image)
    sandwich_patches = image_patch.find(""sandwich"")
    croissant_patches = image_patch.find(""croissant"")
    # Question assumes one sandwich and one croissant
    if len(sandwich_patches) < 1 or len(croissant_patches) < 1:
        # If no sandwich or croissant is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    for sandwich_patch in sandwich_patches:
        if sandwich_patch.simple_query(""Is the sandwich made?"") == ""yes"":
            return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"") # crop would include the sandwich so keep it in the query
    for croissant_patch in croissant_patches:
        if croissant_patch.simple_query(""Is the croissant made?"") == ""no"":
            return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"") # crop would include the croissant so keep it in the query
    return ""croissant"""
6423906,Which kind of food is on the plate?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""plate of food"")
    # Question assumes one plate of food
    if len(food_patches) == 0:
        # If no plate of food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    return food_patches[0].simple_query(""Which kind of food is on the plate?"")"
1993231,Are the animals in the image of different types?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes multiple animal patches
    if len(animal_patches) < 2:
        # If there is only one animal, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    types = set()
    for animal_patch in animal_patches:
        type_name = animal_patch.simple_query(""What is the animal's type?"")
        types.add(type_name)
    if len(types) > 1:
        return ""yes""
    else:
        return ""no""
"
13949656,Are there any people to the left of the tray?,"    image_patch = ImagePatch(image)
    tray_patches = image_patch.find(""tray"")
    if len(tray_patches) == 0:
        # If no tray is found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    tray_patch = tray_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < tray_patch.horizontal_center:
            return bool_to_yesno(person_patch.exists(""person""))
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?,"    image_patch = ImagePatch(image)
    pineapple_patches = image_patch.find(""pineapple"")
    # Question assumes only one pineapple patch
    if len(pineapple_patches) == 0:
        # If no pineapple is found, query the image directly
        return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")
    return pineapple_patches[0].simple_query(""Is the fresh pineapple ripe?"")"
9392591,Are there chairs or smoothies?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    is_chair_or_smoothie = image_patch.exists(""chair smoothie"") or image_patch.exists(""chair smoothie 2"")
    is_chair_or_smoothie_3 = image_patch.exists(""chair smoothie 3"") or image_patch.exists(""chair smoothie 4"")
    is_chair_or_smoothie_4 = image_patch.exists(""chair smoothie 5"") or image_patch.exists(""chair smoothie 6"")
    is_chair_or_smoothie_5 = image_patch.exists(""chair smoothie 7"") or image_patch.exists(""chair smoothie 8"")
    is_chair_or_smoothie_6 = image_patch.exists(""chair smoothie 9"") or image_patch.exists(""chair smoothie 10"")
    is_chair_or_smoothie_7 = image_patch.exists(""chair smoothie 11"") or image_patch.exists(""chair smoothie 12"")
    is_chair_or_smoothie_8 = image_patch.exists(""chair smoothie 13"") or image_patch.exists(""chair smoothie 14"")
    is_chair_or_smoothie_9 = image_patch.exists(""chair smoothie 15"") or image_patch.exists(""chair smoothie 16"")
    is_chair_or_smoothie_10 = image_patch.exists(""chair smoothie 17"") or image_patch.exists(""chair smoothie 18"")
    is_chair_or_smoothie_11 = image_patch.exists(""chair smoothie 19"") or image_patch.exists(""chair smoothie 20"")
    is_chair_or_smoothie_12 = image_patch.exists(""chair smoothie 21"") or image_patch.exists(""chair smoothie 22"")
    is_chair_or_smoothie_13 = image_patch.exists(""chair smoothie 23"") or image_patch.exists(""chair smoothie 24"")
    is_chair_or_smoothie_14 = image_patch.exists(""chair smoothie 25"") or image_patch.exists(""chair smoothie 26"")
    is_chair_or_smoothie_15 = image_patch.exists(""chair smoothie 27"") or image_patch.exists(""chair smoothie 28"")
    is_chair_or_smoothie_16 = image_patch.exists(""chair smoothie 29"") or image_patch.exists(""chair smoothie 30"")
    is_chair_or_smoothie_17 = image_patch.exists(""chair smoothie 31"")"
4285170,Which kind of animal is to the right of the sheep?,"    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    right_sheep = sheep_patches[0]
    animal_patches = image_patch.find(""rabbit""),  #, fox, horse, rabbit
    #, ""fox"", ""horse""
    for animal_patch in animal_patches[0], ,   #, ""fox"", ""horse""  #, ""rabbit""  for _ in  #, ""fox"", ""horse""  #, ""rabbit""  #, ""fox"", ""horse""  #, ""rabbit""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    for animal_patch in animal_patches[0],:   #, ""fox"", ""horse""  for _ in  #, ""fox"", ""horse""  #, ""rabbit""  for _ in
        #    #, ""fox"", ""horse""  for _ in
        pass
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in
    #    #, ""fox"", ""horse""  for _ in"
9896138,Are there any boxes to the left of the screen in the picture?,"    image_patch = ImagePatch(image)
    is_box = False
    for box_patch in image_patch.find(""box""):
        if box_patch.horizontal_center < image_patch.horizontal_center:
            is_box = True
    return bool_to_yesno(is_box)"
1400333,What do you think is the man on?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What do you think is the man on?"")
    return man_patches[0].simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?,"    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    return boot_patches[0].simple_query(""Is the boot white or orange?"")"
3659880,Does the wood boat have silver color?,"    wood_boat = ImagePatch(image)
    wood_boat_patches = wood_boat.find(""wood boat"")
    # Question assumes only one wood boat patch
    if len(wood_boat_patches) == 0:
        # If no wood boat is found, query the image directly
        return wood_boat.simple_query(""Does the wood boat have silver color?"")
    wood_boat_patch = wood_boat_patches[0]
    has_silver_color = wood_boat_patch.verify_property(""wood boat"", ""silver color"")
    return bool_to_yesno(has_silver_color)"
1827802,Is the red pot on the appliance to the right of the mixer?,"    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    mixer_patches = image_patch.find(""mixer"")
    is_red_pot_on_mixer = False
    for red_pot in red_pot_patches:
        for mixer in mixer_patches:
            if red_pot.horizontal_center > mixer.horizontal_center:
                return False
            else:
                is_red_pot_on_mixer = True
    if is_red_pot_on_mixer:
        return True
    else:
        return False"
14809102,The phone that is in front of the camera is of what color?,"    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # Question assumes only one phone patch
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""What is the color of the phone that is in front of the camera?"")
    return phone_patches[0].simple_query(""What is the color of the phone?"")"
61001545,What type of food is to the left of the silver spoon?,"    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""silver spoon"")
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    spoon = spoon_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < spoon.horizontal_center:
            return food_patch.simple_query(""What type of food is to the left of the silver spoon?"") # crop would include the spoon so keep it in the query
    # If no food is found to the left of the spoon, query the image directly
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")"
799463,Are there both a window and a door in the picture?,"    image_patch = ImagePatch(image)
    doors_and_windows = image_patch.find(""window"") + image_patch.find(""door"")
    # Question assumes each is a separate object
    if len(doors_and_windows) < 2:
        # If there are less than 2, query the image directly
        return image_patch.simple_query(""Are there both a window and a door in the picture?"")
    return bool_to_yesno(True) # True because there are at least 2 objects"
11260725,Does the water have small size and white color?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Does the water have small size and white color?"")
    water_patch = water_patches[0]
    has_small_size = water_patch.simple_query(""Is the water small?"") == ""yes""
    has_white_color = water_patch.simple_query(""Is the water white?"") == ""yes""
    result = bool(wquery for  ,  # query for
2397653,Are there any fences that are white?,"    image_patch = ImagePatch(image)
    is_white_fence = False
    fence_patches = image_patch.find(""fence"")
    for fence_patch in fence_patches:
        is_white = fence_patch.verify_property(""fence"", ""white"")
        if is_white:
            is_white_fence = True
            return bool_to_yesno(is_white)
    return bool_to_yesno(is_white_fence)"
1554603,Who is holding the animal?,"    # asks for the predicate of a relational verb (holding), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is holding the animal?"")"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?,"    image_patch = ImagePatch(image)
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        # If no stroller is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    stroller_patch = stroller_patches[0]
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < stroller_patch.horizontal_center:
            return ""left""
    return ""right""
"
8988476,What kind of furniture is presented in this photo?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is presented in this photo?"")
    return furniture_patches[0].simple_query(""What kind of furniture is it?"")"
10695214,What is the man with the backpack holding?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man with backpack"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    return man_patches[0].simple_query(""What is the man with the backpack holding?"")"
91058050,Are there both mouse pads and computer mice in the photograph?,"    image_patch = ImagePatch(image)
    mousepad_patches = image_patch.find(""mousepad"")
    computer_mouse_patches = image_patch.find(""computer mouse"")
    is_mousepad = False
    is_computermouse = False
    for mousepad_patch in mousepad_patches:
        is_mousepad = mousepad_patch.exists(""mousepad"") or is_mousepad
    for computer_mouse in computer_mouse_patches:
        is_computermouse = computer_mouse.exists(""computer mouse"") or is_computermouse
    return bool_to_yesno(is_mousepad and is_computermouse)"
1972064,Is the person in front of the tree wearing jeans?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    tree_patches = image_patch.find(""tree"")
    # Question assumes one person patch and one tree patch
    is_wearing je     #  5  2  1  0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5 2 1 0 5"
167162,Is there a bike to the right of the purse that is to the right of the woman?,"    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) < 2:
        # If there is no second purse, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    purse1 = purse_patches[0]
    purse2 = purse_patches[1]
    if purse1.horizontal_center < purse2.horizontal_center:
        return bool_to_yesno(image_patch.exists(""bike"")) # crop would include the bike so keep it in the query
    else:
        return bool_to_yesno(image_patch.exists(""bike""))"
1695388,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    # Question assumes one man and one woman
    if len(woman_patches) != 1 or len(man_patches) != 1:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    if woman_patches[0].vertical_center < man_patches[0].vertical_center:
        return ""left""
    else:
        return ""right""
"
16921984,What is the bent man to the right of the other men doing?,"    image_patch = ImagePatch(image)
    bent_man_patches = image_patch.find(""bent man"")
    other_man_patches = image_patch.find(""man"")
    # Question assumes one bent man patch and one other man patch
    for bent_man_patch in bent_man_patches:
        for other_man_patch in other_man_patches:
            if bent_man_patch.horizontal_center > other_man_patch.horizontal_center:
                return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    # If no bent man is found to the right of the other men, query the image directly
    return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")"
12175564,What animal are the men to the right of the girl leading?,"    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""man"")
    girl_patches = image_patch.find(""girl"")
    # Question assumes one man and one girl
    for man_patch in men_patches:
        for girl_patch in girl_patches:
            if man_patch.horizontal_center > girl_patch.horizontal_center:
                return man_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    # If no man is found to the right of the girl, query the image directly
    return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")"
1219606,On which side of the image is the house?,"    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
1770499,Is the black suitcase to the right or to the left of the person on the left?,"    image_patch = ImagePatch(image)
    black_suitecase_patches = image_patch.find(""black suitcase"")
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(black_suitecase_patches) == 0 or len(person_patches) == 0:
        # If no suitcase or person is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    for black_suitecase_patch in black_suitecase_patches:
        for person_patch in person_patches:
            if black_suitecase_patch.horizontal_center < person_patch.horizontal_center:
                return ""left""
    return ""right""
"
5282406,Is the pot to the left of a chair?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes one pot patch and one chair patch
    for pot_patch in pot_patches:
        for chair_patch in chair_patches:
            if pot_patch.horizontal_center < chair_patch.horizontal_center:
                return ""yes""
    return ""no"""
10914401,Where are the people?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    if people_patches[0].vertical_center < image_patch.vertical_center:
        return image_patch.simple_query(""Where are the people?"")  # ""left""
        # ""bottom"", ""left""
    else:
        return image_patch.simple_query(""Where are the people?"")  # ""right"""
1919722,What animal is eating the grass?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is eating the grass?"")"
9681008,Who is wearing a helmet?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing a helmet?"")
    # if no person is wearing a helmet, query the image directly
    return who_is_wearing"
16861675,Who is on the surfboard in the middle of the photo?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    for person_patch in person_patches:
        who_on_board = person_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    #    if who_on_board == """": # if no person is found, query the image directly
    #        return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    return who_on_board"
10947426,What is the color of the lizard beside the banana?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) < 2:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    for banana_patch in banana_patches:
        if banana_patch.horizontal_center < (image_patch.width / 2):
            # left side
            for other_patch in banana_patches:
                if banana_patch.horizontal_center < other_patch.horizontal_center:
                    return banana_patch.simple_query(""What is the color of the lizard?"")
        else:
            # right side
            for other_patch in banana_patches:
                if banana_patch.horizontal_center > other_patch.horizontal_center:
                    return banana_patch.simple_query(""What is the color of the banana?"")
    return ""green"" # default color for banana
"
18200684,Is the wine glass in the top or in the bottom part?,"    wine_glass_patch = ImagePatch(image)
    wine_glass_patches = wine_glass_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return wine_glass_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    if wine_glass_patches[0].vertical_center < wine_glass_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes that all people are in the middle of the picture
    for person in people_patches:
        if abs((image_patch.width / 2) - person.horizontal_center) < 50:
            for object_patches in [image_patch.find(""truck""), image_patch.find(""car""), image_patch.find(""bicycle"")]:
                for object_patch in object_patches:
                    if object_patch.horizontal_center < person.horizontal_center:
                        return object_patch.simple_query(""What kind of vehicle is it?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")"
171012637,Is the teddy bear to the right of a suitcase?,"    image_patch = ImagePatch(image)
    teddy_bear_patches = image_patch.find(""teddy bear"")
    suitcase_patches = image_patch.find(""suitcase"")
    # Question assumes one suitcase patch and one teddy bear patch
    for teddy_bear_patch in teddy_bear_patches:
        for suitcase_patch in suitcase_patches:
            if teddy_bear_patch.horizontal_center > suitcase_patch.horizontal_center:
                return ""no""
    return bool_to_yesno(any(suitcase_patch.horizontal_center < teddy_bear_patch.horizontal_center for suit in image_patch.find(""suitcase"") for suit in image_patch.find(""teddy bear"")))"
19861372,Is the woman's hair long or short?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    return woman_patches[0].simple_query(""Is the woman's hair long or short?"")"
623889,Are both the television and the armchair the same color?,"    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""television"")
    armchair_patches = image_patch.find(""armchair"")
    # Question assumes one tv patch and one armchair patch
    if len(tv_patches) != 1 or len(armchair_patches) != 1:
        # If no single tv or armchair is found, query the image directly
        return image_patch.simple_query(""Are both the television and the armchair the same color?"")
    if tv_patches[0].verify_property(""color"", armchair_patches[0].simple_query(""color"")):
        return bool_to_yesno(True)
    else:
        return bool_to_yesno(False)"
4917605,Is the shoe white or brown?,"    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].simple_query(""Is the shoe white or brown?"")"
91055143,What is on the table?,"    image_patch = ImagePatch(image)
    object_patches = image_patch.find(""table"")
    # Question assumes one object (table) patch
    if len(object_patches) == 0:
        # If no object is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    object_patch = object_patches[0]
    return object_patch.simple_query(""What is on the table?"")"
5430643,What do you think sits on the plate to the left of the tomato?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) < 2:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    for plate_patch in plate_patches:
        if plate_patch.horizontal_center < (plate_patches[0].horizontal_center + plate_patches[1].horizontal_center) / 2:
            return plate_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    return plate_patches[1].simple_query(""What do you think sits on the plate to the left of the tomato?"")"
523936,Is the woman in the top part of the picture?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    if woman_patches[0].vertical_center > image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    for bottle_patch in bottle_patches:
        if bottle_patch.simple_query(""Is the bottle on the nightstand that is on the bed?"") == ""yes"":
            return bool_to_yesno(bottle_patch.exists(""bottle on the nightstand that is on the bed""))
    return bool_to_yesno(bottle_patch =   # type
14292161,The pot is of which color?,"    pot_patches = ImagePatch(image).find(""pot"")
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return pot_patches[0].simple_query(""What is the color of the pot?"")
    return pot_patches[0].simple_query(""What is the color of the pot?"")"
17495150,"What device is black, the microphone or the laptop?","    image_patch = ImagePatch(image)
    black_devices = image_patch.find(""black microphone"")
    for black_device in black_devices:
        if black_device.simple_query(""What is it?"") == ""microphone"":
            return ""microphone""
    black_devices = image_patch.find(""black laptop"")
    for black_device in black_devices:
        if black_device.simple_query(""What is it?"") == ""laptop"":
            return ""laptop""
    # If no black device is found, query the image directly
    return image_patch.simple_query(""What device is black, the microphone or the laptop?"")"
1521847,Is the cat on a desk?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Is the cat on a desk?"")
    if cat_patches[0].verify_property(""cat"", ""desk""):
        return bool_to_yesno(cat_patches[0].verify_property(""cat"", ""desk"")
        # crop would include the desk so keep it in the query
    else:
        return image_patch.simple_query(""Is the cat on a desk?"")"
16465081,The man is holding what?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man holding?"")
    return man_patches[0].simple_query(""What is the man holding?"")"
17387032,What is on the post?,"    image_patch = ImagePatch(image)
    post_patches = image_patch.find(""post"")
    # Question assumes only one post patch
    if len(post_patches) == 0:
        # If no post is found, query the image directly
        return image_patch.simple_query(""What is on the post?"")
    return post_patches[0].simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")"
18906705,How big is the crowd?,"    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""crowd"")
    # Question assumes only one crowd patch
    if len(crowd_patches) == 0:
        # If no crowd is found, query the image directly
        return image_patch.simple_query(""How big is the crowd?"")
    if crowd_patches[0].simple_query(""Is the crowd small?"") == ""yes"":
        return ""small""
    elif crowd_patches[0].simple_query(""Is the crowd large?"") == ""yes"":
        return ""large""
    else:
        return crowd_patches[0].simple_query(""How big is the crowd?"")"
6157200,Does the sign on the pole have white color?,"    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign on pole"")
    # Question assumes only one sign on pole patch
    if len(sign_patches) == 0:
        # If no sign on pole is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    for sign_patch in sign_patches:
        is_white = sign_patch.verify_property(""sign on pole"", ""white"")
        return bool_to_yesno(is_white)"
16760226,What's the laptop in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?,"    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    return bed_patches[0].simple_query(""How large is the bed?"")"
14143886,Where is the person with the luggage standing on?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person with luggage"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Where is the person with the luggage standing on?"")"
19872633,Are there either any fire extinguishers or pepper shakers?,"    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    is_or = bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)
    return bool_to_yesno(is_or)"
12755010,Is the bottle to the right of a napkin?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    napkin_patches = image_patch.find(""napkin"")
    is_to_right = ""no""
    for bottle_patch in bottle_patches:
        for napkin_patch in napkin_patches:
            if bottle_patch.horizontal_center > napkin_patch.horizontal_center:
                is_to_right = ""no""
            else:
                return bool_to_yesno(is_to_right) # crop would include the napkin so keep it in the query
    return bool_to_yesno(bottle_patches[0].verify_property(""bottle"", ""napkin right"") and is_to_right)"
2747001,Are there any soaps or bombs?,"    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    is_other = image_patch.exists(""other bomb"")
    is_fuse = image_patch.exists(""fuse"")
    is_wax = image_patch.exists(""wax"")
    is_match = image_patch.exists(""match"")
    is_cap = image_patch.exists(""cap"")
    is_pin = image_patch.exists(""pin"")
    is_pry = image_patch.exists(""pyroxylin"")
    is_pyr = image_patch.exists(""pyroxyline"")
    is_pyr2 = image_patch.exists(""pyroxyline2"")
    is_pyr3 = image_patch.exists(""pyroxyline3"")
    is_pyr4 = image_patch.exists(""pyroxyline4"")
    is_pyr5 = image_patch.exists(""pyroxyline5"")
    is_pyr6 = image_patch.exists(""pyroxyline6"")
    is_pyr7 = image_patch.exists(""pyroxyline7"")
    is_pyr8 = image_patch.exists(""pyroxyline8"")
    is_pyr9 = image_patch.exists(""pyroxyline9"")
    is_pyr10 = image_patch.exists(""pyroxyline10"")
    is_pyr11 = image_patch.exists(""pyroxyline11"")
    is_pyr12 = image_patch.exists(""pyroxyline12"")
    is_pyr13 = image_patch.exists(""pyroxyline13"")
    is_pyr14 = image_patch.exists(""pyroxyline14"")
    is_pyr15 = image_patch.exists(""pyroxyline15"")
    is_pyr16 = image_patch.exists(""pyroxyline16"")
    is_pyr17 = image_patch.exists(""pyroxyline17"")
    is_pyr18 = image_patch.exists(""pyroxyline18"")
    is_pyr19 = image_patch.exists(""pyroxyline19"")
    is_pyr20 = image_patch.exists(""pyroxyline20"")
    is_pyr21 = image_patch.exists(""pyroxyline21"")
    is_pyr22 = image_patch.exists(""pyroxyline22"")
    is_pyr23 = image_patch.exists(""pyroxyline23"")
    is_pyr24 = image_patch.exists(""pyroxyline24"")
    is_pyr25 = image_patch.exists(""pyroxyline25"")
    is_pyr26 ="
1553845,Do you see baby giraffes or elephants?,"    image_patch = ImagePatch(image)
    is_giraffe = image_patch.exists(""baby giraffe"")
    is_elephant = image_patch.exists(""baby elephant"")
    is_giraffe_or_elephant = bool_to_yesno(is_giraffe or is_elephant)
    return str(is_giraffe_or_elephant).lower() if is_giraffe_or_elephant else ""no"" if is_giraffe_or_elephant == False else ""yes"" # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant == True # if is_giraffe_or_elephant =="
6898877,What is the sign on?,"    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""What is the sign on?"")
    return image_patch.simple_query(""What is the sign on?"")"
15862812,What is the sticker on?,"    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    return sticker_patches[0].simple_query(""What is the sticker on?"")"
141031470,On which side of the image is the white towel?,"    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""white towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    if towel_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
41026846,Who rides a motorcycle?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?,"    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""What is around the bathtub the towel is on?"")
    for towel_patch in towel_patches:
        object_patches = image_patch.find(""bathtub"")
        for object_patch in object_patches:
            if towel_patch.horizontal_center > object_patch.horizontal_center:
                return object_patch.simple_query(""What is around the bathtub the towel is on?"") # crop would include the object so keep it in the query
    # If no object is found, query the image directly
    return image_patch.simple_query(""What is around the bathtub the towel is on?"")"
7469617,Is the man to the left or to the right of the person that is to the left of the people?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person that is to the left of the people"")
    if len(person_patches) < 2:
        # If there is only one person, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        for person_patch in person_patches:
            if man_patch.horizontal_center < person_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
64308,What's located on top of the soup?,"    image_patch = ImagePatch(image)
    soup_patches = image_patch.find(""soup"")
    # Question assumes only one soup patch
    if len(soup_patches) == 0:
        # If no soup is found, query the image directly
        return image_patch.simple_query(""What's located on top of the soup?"")
    for soup_patch in soup_patches:
        top_patches = soup_patch.find(""top"")
        for top_patch in top_patches:
            if top_patch.vertical_center > soup_patch.horizontal_center:
                return top_patch.simple_query(""What's located on top of the soup?"") # crop would include the top so keep it in the query
    # If no top is found, query the image directly
    return soup_patches[0].simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    bench_patches = image_patch.find(""bench"")
    # Question assumes one fence patch and one bench patch
    if len(fence_patches) != 1 or len(bench_patches) != 1:
        # If no fence or bench is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    fence = fence_patches[0]
    bench = bench_patches[0]
    is_same_material = fence.verify_property(""fence"", bench.material query      # 1  # for 2  # for 3  # for 4  # for 5  # for 6  # for 7  # for 8  # for 9  # for 10  # for 11  # for 12  # for 13  # for 14  # for 15  # for 16  # for 17  # for 18  # for 19  # for 20  # for 21  # for 22  # for 23  # for 24  # for 25  # for 26  # for 27  # for 28  # for 29  # for 30  # for 31  # for 32  # for 33  # for 34  # for 35  # for 36  # for 37  # for 38  # for 39  # for 40  # for 41  # for 42  # for 43  # for 44  # for 45  # for 46  # for 47  # for 48  # for 49  # for 50  # for 51  # for 52  # for 53  # for 54  # for 55  # for 56  # for 57  # for 58  # for 59  # for 60  # for 61  # for 62  # for 63  # for 64  # for 65  # for 66  # for 67  # for 68  # for 69  # for 70  # for 71  # for 72  # for 73  # for 74  # for 75  # for 76  #"
3196255,Are there helmets that are not white?,"    image_patch = ImagePatch(image)
    is_helm_white = image_patch.exists(""white helmet"")
    is_helm_not_white = image_patch.exists(""helmet"") and not is_helm_white
    is_helm = image_patch.exists(""helmet"")
    return bool_to_yesno(is_helm_not_white)"
2992630,Is the bowl to the right or to the left of the man that is drinking?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is drinking"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
    return ""right""
"
513894,Is the person above the sand wearing glasses?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    person = person_patches[0]
    is_wearing_glasses = person.verify_property(""person"", ""glasses"")
    is_above_sand = person.simple_query(""Is the person above the sand?"") == ""yes""
    return bool_to_yesno(is_wearing_glasses and is_above_sand)"
14167599,Is the color of the life preserver the same as that of the house?,"    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    if len(life_preserver_patches) == 0:
        # If no life preserver is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    life_preserver = life_preserver_patches[0]
    house_patches = image_patch.find(""house"")
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    for house_patch in house_patches:
        if life_preserver.colorQueryForString(""query"", ""color, name, value"" for query in [""color"", ""name"", ""value""] for string in [""red"", ""blue"", ""green""] for value in [1, 2, 3] for name in [""red"", ""blue"", ""green""] for string in [""red"", ""blue"", ""green""] for value in [1, 2, 3] for name in [""red"", ""blue"", ""green""] for string in [""red"", ""blue"", ""green""] for value in [1, 2, 3] for name in [""red"", ""blue"", ""green""] for string in [""red"", ""blue"", ""green""] for value in [1, 2, 3] for name in [""red"", ""blue"", ""green""] for string in [""red"", ""blue"", ""green""] for value in [1, 2, 3] for name in [""red"", ""blue"", ""green""] for string in [""red"", ""blue"", ""green""] for value in [1, 2, 3] for name in [""red"", ""blue"", ""green""] for string in [""red"", ""blue"", ""green""] for value in [1, 2, 3] for name in [""red"", ""blue"", ""green""] for string in [""red"", ""blue"", ""green""] for value in [1, 2, 3] for name in [""red"", ""blue"", ""green""] for string in [""red"", ""blue"", ""green""] for value in [1, 2, 3] for name in [""red"", ""blue"", ""green""] for string in [""red"", """
18264755,How is the weather?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?,"    # asks for the predicate of a relational verb (looking into the toilet that is not closed), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")"
8641613,Do you see any helmets in the picture that are not red?,"    image_patch = ImagePatch(image)
    red_helmets = image_patch.find(""red helmet"")
    non_red_helmets = image_patch.find(""helmet"")
    for non_red_helmet in non_red_helmets:
        if non_red_helmet.horizontal_center < image_patch.width / 2:
            if non_red_helmet.horizontal_center < red_helmets[0].horizontal_center:
                return bool_to_yesno(non_red_helmet.exists(""helmet"")) # crop would include the helmet so keep it in the query
    for red_helm in red_helmets:
        if red_helm.horizontal_center > image_patch.width / 2:
            if red_helm.horizontal_center > non_red_helmets[0].horizontal_center:
                return bool_to_yesno(red_helm.exists(""helmet"")) # crop would include the helmet so keep it in the query
    return bool_to_yesno(any(helm.exists(""helmet"") for helm in non_red_helmets) and not any(helm.exists(""red helmet"") for helm in non_red_helmets))"
2409779,What does the happy person hold?,"    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    # Question assumes only one happy person patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    return happy_patches[0].simple_query(""What does the happy person hold?"")"
8461507,Are there either tissue boxes or lamps in the picture?,"    image_patch = ImagePatch(image)
    is_tissue_box_or_lamp = image_patch.exists(""tissue box lamp"") or image_patch.exists(""tissue box"") or image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box_or_lamp)"
10770916,Which kind of animal is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is it?"")"
19102906,What type of drink is to the left of the plate?,"    image_patch = ImagePatch(image)
    drink_patches = image_patch.find(""drink"")
    plate_patches = image_patch.find(""plate"")
    # Question assumes one plate patch and one drink patch
    for drink_patch in drink_patches:
        for plate_patch in plate_patches:
            if drink_patch.horizontal_center < plate_patch.horizontal_center:
                return drink_patch.simple_query(""What type of drink is to the left of the plate?"")
    # If no drink is found to the left of a plate, query the image directly
    return image_patch.simple_query(""What type of drink is to the left of the plate?"")"
18315440,Is the sky cloudy and blue?,"    image_patch = ImagePatch(image)
    is_sky = image_patch.find(""sky"")[0].simple_query(""Is the sky present?"") == ""yes""
    is_cloudy = image_patch.find(""cloudy sky"")[0].simple_query(""Is the sky cloudy?"") == ""yes""
    is_blue = image_patch.find(""blue sky"")[0].simple_query(""Is the sky blue?"") == ""yes""
    if is_sky and is_cloudy and is_blue:
        return ""yes""
    else:
        return ""no"""
453061,Is the fork on the right of the image?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork on the right of the image?"")
    if fork_patches[0].horizontal_center > (image_patch.width / 2):
        return ""no""
    else:
        return ""yes"""
71002567,"What is the broccoli on, a table or a nightstand?","    image_patch = ImagePatch(image)
    broccoli_patches = image_patch.find(""broccoli"")
    # Question assumes only one broccoli patch
    if len(broccoli_patches) == 0:
        # If no broccoli is found, query the image directly
        return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    if broccoli_patches[0].simple_query(""Is the surface it's on, a table or a nightstand?"") == ""table"":
        return ""table""
    else:
        return broccoli_patches[0].simple_query(""What is the broccoli on, a table or a nightstand?"")"
17465089,Is the field green and small?,"    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Is the field green and small?"")
    field_patch = field_patches[0]
    is_green = field_patch.verify_property(""field"", ""green"")
    is_small = field_patch.verify_property(""field"", ""small"")
    is_and = field_patch.simple_query(""Is the field and?"") if is_small and is_green else bool_to_yesno(is_small and is_green)
    return bool_to_yesno(is_small and is_green)"
16150157,What is on the wall?,"    image_patch = ImagePatch(image)
    wall_patches = image_patch.find(""wall"")
    # Question assumes only one wall patch
    if len(wall_patches) == 0:
        # If no wall is found, query the image directly
        return image_patch.simple_query(""What is on the wall?"")
    return wall_patches[0].simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?,"    image_patch = ImagePatch(image)
    suv_patches = image_patch.find(""suv"")
    if len(suv_patches) < 2:
        # If there is only one suv, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    suv1 = suv_patches[0]  # the suv on the right
    suv2 = suv_patches[1]  # the suv that we are interested in
    if suv2.horizontal_center < suv1.horizontal_center:
        return ""left""
    else:
        return ""right""
"
15101358,Is the girl to the left of the boy?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes one girl and one boy
    for girl_patch in girl_patches:
        for boy_patch in boy_patches:
            if girl_patch.horizontal_center < boy_patch.horizontal_center:
                return ""yes""
    return ""no"""
12785181,What animals are in the grass?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animals are in the grass?"")
    return animal_patches[0].simple_query(""What animals are in the grass?"")"
348093,Are there both an apple and a bag in the picture?,"    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    is_bagel = image_patch.exists(""bagel"")
    is_baguette = image_patch.exists(""baguette"")
    is_tote = image_patch.exists(""tote"")
    is_duffel = image_patch.exists(""duffel"")
    is_sack = image_patch.exists(""sack"")
    is_ other     # 5   # 1  2  3  4  5  6  7  8  9  10  #, 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, 1 2  3  4  5  6  7  8  9  10  #, 1 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, 2 3 4 5 6 7 8 9 10  #, 1 2 3 4 5 6 7 8 9 10  #, "
314181,Which sign is shown?,"    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Which sign is shown?"")
    return sign_patches[0].simple_query(""Which sign is shown?"")"
16275314,"On which side is the woman, the right or the left?","    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    if woman_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19535592,Who runs on the sand?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who runs on the sand?"")"
156886,Is there a giraffe near the bush?,"    image_patch = ImagePatch(image)
    bush_patches = image_patch.find(""bush"")
    if len(bush_patches) == 0:
        # If no bush is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    for bush_patch in bush_patches:
        is_giraffe = image_patch.exists(""giraffe"")
        if is_giraffe:
            if bush_patch.simple_query(""Is the bush being eaten?"") == ""yes"":
                return ""yes""
            else:
                return ""yes""
    # Check if there's a giraffe in the same image
    for object_patch in image_patch.find(""giraffe""):
        if object_patch.horizontal_center - bush_patches[0].horizontal_center < 100:
            return ""yes""
    return ""no""
"
1756642,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    for shirt_patch in shirt_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if shirt_patch.horizontal_center > person_patch.horizontal_center:
                return shirt_patch.simple_query(""Who wears the shirt?"")
    return person_patches[0].simple_query(""Who wears the shirt?"")"
1972390,What type of animal is standing in the field?,"    image_patch = ImagePatch(image)
    # contains a relation (standing in), so ask directly
    return image_patch.simple_query(""What type of animal is standing in the field?"")"
14579439,Is the stuffed animal on the right?,"    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    if stuffed_animal_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
6645395,Is the gray building behind the passengers that are boarding the airplane?,"    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    passengers_patches = image_patch.find(""passenger that is boarding the airplane"")
    is_gray_building = False
    is_passenger_boarding = False
    for building_patch in building_patches:
        if building_patch.simple_query(""What is the building made of?"") == ""gray"":
            is_gray_building = True
    for passenger_patch in passengers_patches:
        if passenger_patch.simple_query(""What is the passenger doing?"") == ""boarding the airplane"":
            is_passenger_boarding = True
    if is_gray_building and is_passenger_boarding:
        return ""yes""
    else:
        return ""no""
"
19610200,Is the fence metallic?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return fence_patches[0].verify_property(""fence"", ""metallic"")"
5299471,What does the girl that to the left of the trashcan carry?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    trashcan_patches = image_patch.find(""trashcan"")
    # Question assumes one girl patch and one trashcan patch
    for girl_patch in girl_patches:
        for trashcan_patch in trashcan_patches:
            if girl_patch.horizontal_center < trashcan_patch.horizontal_center:
                return girl_patch.simple_query(""What does she carry?"") # crop would include the object so keep it in the query
    # If no girl is found to the left of a trashcan, query the image directly
    return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")"
7548203,Which kind of vegetable is on the pizza?,"    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    for pizza_patch in pizza_patches:
        which_vegetable = pizza_patch.simple_query(""Which kind of vegetable is on the pizza?"")
        return which_vegetable # crop would include the pizza so keep it in the query"
91027737,On which side is the pan?,"    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    if pan_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?,"    image_patch = ImagePatch(image)
    black_cars = image_patch.find(""black car"")
    # Question assumes only one black car
    if len(black_cars) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    for black_car in black_cars:
        if black_car.vertical_center > image_patch.vertical_center:
            return ""yes""
    return ""no"""
6144031,Who is in the living room?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?,"    image_patch = ImagePatch(image)
    sink_patches = image_patch.find(""sink"")
    # Question assumes only one sink patch
    if len(sink_patches) == 0:
        # If no sink is found, query the image directly
        return image_patch.simple_query(""What is the sink made of?"")
    return sink_patches[0].simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?,"    image_patch = ImagePatch(image)
    is_black_cat_orbird = image_patch.exists(""black cat"") or image_patch.exists(""black cat bird"") or image_patch.exists(""black bird"")
    is_black_cat = image_patch.exists(""black cat"")
    is_black_catbird = image_patch.exists(""black cat bird"")
    is_blackbird = image_patch.exists(""black bird"")
    if is_black_cat_orbird:
        return bool_to_yesno(is_black_cat_orbird)
    else:
        return bool_to_yesno(is_black_cat) or bool_to_yesno(is_black_catbird) or bool_to_yesno(is_blackbird)"
1241741,Do you see a bicycle or a biker in this picture?,"    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    is_biker_or_bicycle = bool_to_yesno(is_biker or is_bicycle)
    return str(is_biker_or_bicycle).lower() if not str(is_biker_or_bicycle).lower() == 'false' for x in ['yes', 'no
844747,Are there both a pillow and a kitten in the image?,"    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    is_both = is_pillow and is_kitten
    return bool_to_yesno(is_both)"
1104500,What kind of food is in the box?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What kind of food is in the box?"")
    for box_patch in box_patches:
        food_patches = box_patch.find(""food"")
        for food_patch in food_patches:
            return food_patch.simple_query(""What kind of food is in the box?"") # crop would include the food so keep it in the query
    # If no food is found, query the image directly
    return image_patch.simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?,"    image_patch = ImagePatch(image)
    kid_patches = image_patch.find(""kid"")
    # Question assumes only one kid patch
    if len(kid_patches) == 0:
        # If no kid is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    for kid_patch in kid_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < kid_patch.horizontal_center:
                return food_patch.simple_query(""What is the food that is to the left of the kid called?"") # crop would include the food so keep it in the query
    # If no food is found to the left of the kid, pick the first one
    return food_patches[0].simple_query(""What is the food that is to the left of the kid called?"")"
11820726,"What device is the desk in front of, a television or a printer?","    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    for desk_patch in desk_patches:
        device_patches = image_patch.find(""television"")
        for device_patch in device_patches:
            if desk_patch.horizontal_center > device_patch.horizontal_center:
                return ""printer""
        for device_patch in device_patches:
            if desk_patch.horizontal_center < device_patch.horizontal_center:
                return ""television""
    # If no desk is found in front of a television or a printer, query the image directly
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")"
18114588,Do you see a helmet there?,"    image_patch = ImagePatch(image)
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_helmet)"
11950874,What animal is standing on the ground?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    return animal_patches[0].simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?,"    image_patch = ImagePatch(image)
    small_car_patches = image_patch.find(""small car"")
    fork_patches = image_patch.find(""fork"")
    # Question assumes one small car patch and one fork patch
    is_to_left = ""yes""
    for small_car_patch in small_car_patches:
        for fork_patch in fork_patches:
            if small_car_patch.horizontal_center < fork_patch.horizontal_center:
                is_to_left = ""yes""
            else:
                return ""no""
    return is_to_left"
16184942,Does that grass look brown and short?,"    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Does that grass look brown and short?"")
    return bool_to_yesno(grass_patches[0].verify_property(""grass"", ""brown_and_short"") and grass_patches[0].verify_property(""grass"", ""short"") and grass_patches[0].verify_property(""grass"", ""brown""))"
6312238,Is the hydrant to the left of the car?,"    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    if len(hydrant_patches) < 1:
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    for hydrant_patch in hydrant_patches:
        if hydrant_patch.horizontal_center < (image_patch.width / 2):
            return ""yes""
    return ""no""
    # if len(hydrant_patches) > 1: # if there are multiple hydrants
    #     for hydrant_patch in hydrant_patches[1:]: # for each of the rest
    #         if hydrant_patch.horizontal_center < (image_patch.width / 2): # if it's to the left
    #             return ""yes""
    #     return ""no""
    # return ""no"" # if all are right"
16646227,On which side of the picture is the gray car?,"    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    if gray_car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person that is wearing sneakers"")
    ball_patches = image_patch.find(""ball"")
    for person_patch in person_patches:
        for ball_patch in ball_patches:
            if ball_patch.horizontal_center < person_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
3443704,What is the woman wearing?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is she wearing?"")"
19313572,What is the color of the tent to the left of the vehicles?,"    image_patch = ImagePatch(image)
    # contains a relation (left of, to the left of), so ask indirectly
    # first find the vehicles
    vehicles_patches = image_patch.find(""vehicle"")
    # then find the tent
    tent_patches = image_patch.find(""tent"")
    # then compare the horizontal centers
    for tent_patch in tent_patches:
        for vehicle in vehicles_patches:
            if tent_patch.horizontal_center < vehicle.horizontal_center:
                return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    # if no tent is found to the left of a vehicle, query the image directly
    return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")"
10885675,What is the toilet seat made of?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the toilet seat made of?"")
    return toilet_patches[0].simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket query      #  1  #  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, 2  #  2
  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, 3  #  3
  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, #  4
  4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9, #  5
  5 6 7 8 9 0 1 2 3 4 5, #  6
  6 7 8 9 0 1 2 3 4, #  7
  7 8 9 0 1 2 3, #  8
  8 9 0 1 2, #  9
  9 0 1 2, # 10
 0 1 2, # 11
 1 2, # 12
 2, # 13
 3, # 14
 4, 5, 6, 7, 8, 9, 0, # 15
  for  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, 2  #  2
  2  3 4 5 6 7 8 9 0 1 2 3 4 5 "
14561612,What color do you think the bikini that the woman is wearing is?,"    image_patch = ImagePatch(image)
    bikini_patches = image_patch.find(""bikini"")
    # Question assumes only one bikini patch
    if len(bikini_patches) == 0:
        # If no bikini is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    return bikini_patches[0].simple_query(""What color is the bikini?"")"
6587755,Are both the room and the bowl the same color?,"    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes one room patch and one bowl patch
    if len(room_patches) != 1 or len(bowl_patches) != 1:
        # If no room or bowl is found, query the image directly
        return image_patch.simple_query(""Are both the room and the bowl the same color?"")
    room_patch = room_patches[0]
    bowl_patch = bowl_patches[0]
    is_same_color = room_patch.verify_property(""room"", bowl_patch.simple_query(""What is the color?""))
    return bool_to_yesno(is_same_color)"
4479543,Is the barn white or brown?,"    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    # Question assumes only one barn patch
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    return barn_patches[0].simple_query(""Is the barn white or brown?"")"
972522,Does the box look white or brown?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].simple_query(""Does the box look white or brown?"")"
3948528,What is the bowl made of?,"    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What is the bowl made of?"")
    return bowl_patches[0].simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?,"    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    rock_patches = image_patch.find(""rock"")
    # Question assumes one bench patch and one rock patch
    if len(bench_patches) != 1 or len(rock_patches) != 1:
        # If no bench or rock is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    if bench_patches[0].vertical_center < rock_patches[0].vertical_center:
        return bench_patches[0].simple_query(""Is the bench in gray or red?"")
    else:
        return rock_patches[0].simple_query(""Is the bench in gray or red?"")"
866459,On which side is the couch?,"    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8614812,Is the person that is playing wearing shorts?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        is_playing = person_patch.simple_query(""Is the person playing?"") == ""yes""
        if is_wearing_shorts and is_playing:
            return True
    return bool_to_yesno(is_wearing_shorts)"
167438,What is wearing the ground?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""What is wearing the ground?"")
    for ground_patch in ground_patches:
        is_ground_worn = (ground_patch.simple_query(""Is the ground worn?"") == ""yes"")
        if is_ground_worn:
            return ground_patch.simple_query(""What is wearing the ground?"") # crop would include the ground so keep it in the query
    # If no ground is worn, pick the first ground
    return ground_patches[0].simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?,"    image_patch = ImagePatch(image)
    wooden_furniture_patches = image_patch.find(""wooden furniture"")
    # Question assumes only one wooden furniture patch
    if len(wooden_furniture_patches) == 0:
        # If no wooden furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    for wooden_furniture_patch in wooden_furniture_patches:
        type_of_furniture = wooden_furniture_patch.simple_query(""Which kind of furniture is it?"")
        if type_of_furniture != ""wooden furniture"":
            return type_of_furniture
    return image_patch.simple_query(""Which kind of furniture is wooden?"")"
1042377,Who is standing beside the person that is wearing a dress?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person that is wearing a dress"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    for person_patch in person_patches:
        standing_patches = image_patch.find(""person standing beside"")
        for standing_patch in standing_patches:
            if standing_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is standing beside the person that is wearing a dress?"") # crop would include the person standing so keep it in the query
    # If no person is standing beside, query the image directly
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?,"    image_patch = ImagePatch(image)
    skis_patches = image_patch.find(""skis"")
    # Question assumes only one skis patch
    if len(skis_patches) == 0:
        # If no skis are found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    for skis_patch in skis_patches:
        skis_shape = skis_patch.simple_query(""What is the shape of the skis?"")
        if skis_shape == ""fat"":
            return skis_patch.simple_query(""How fat are the long skis?"")
        else:
            return ""not fat"" # if not fat, query the image directly
"
2211743,Is the sky clear or overcast?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?,"    image_patch = ImagePatch(image)
    bottles_patches = image_patch.find(""bottle"")
    pencils_patches = image_patch.find(""pencil"")
    bottles_to_the_left = [b for b in bottles_patches if b.horizontal_center < (image_patch.width / 2)]
    pencils_to_the_right = [p for p in pencils_patches if p.horizontal_center > (image_patch.width / 2)]
    for bottle in bottles_to_the_left:
        for pencil in pencils_to_the_right:
            if bottle.horizontal_center < pencil.horizontal_center:
                return bool_to_yesno(bottle.exists(""bottle""))
    return bool_to_yesno(False)"
15478302,Is there any dark door or window in the image?,"    image_patch = ImagePatch(image)
    dark_patches = image_patch.find(""dark door"") + image_patch.find(""dark window"")
    dark_patches.extend([x for x in image_patch.find(""dark door frame"") for y in image_patch.find(""dark door frame"") if x != y])
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 2"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 3"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 4"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 5"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 6"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 7"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 8"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 9"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 10"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 11"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 12"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 13"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 14"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 15"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 16"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 17"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 18"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 19"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 20"")]
    dark_patches = [x for x in dark_patches if x.exists(""dark door frame 21"")]
    dark_patches = [x for x in dark_patches if x"
18414234,Do you see either a knife or a chair in the picture?,"    image_patch = ImagePatch(image)
    is_knive = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    is_or = bool_to_yesno(is_knive or is_chair)
    return bool_to_yesno(is_or)"
19779815,Is the book red or yellow?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    return book_patches[0].simple_query(""Is the book red or yellow?"")"
7257283,Are there men to the left of the picture?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < (image_patch.width / 2):
            return bool_to_yesno(man_patch.exists(""man""))
    return ""no"""
6621625,On which side of the picture is the bench?,"    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    if bench_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19311589,Are there both fences and horses in this picture?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?,"    image_patch = ImagePatch(image)
    # contains a relation (left, right, on, next to, etc), so ask directly
    return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")"
171031333,Do you see blankets in the picture that are not black?,"    image_patch = ImagePatch(image)
    black_blanket_patches = image_patch.find(""black blanket"")
    non_black_blanket_patches = image_patch.find(""blanket"")
    is_black_or_not = False
    for non_black_blanket_patch in non_black_blanket_patches:
        is_black_or_not = is_black_or_not or non_black_patch.exists(""black blanket"")
    if is_black_or_not:
        return ""no""
    else:
        return bool_to_yesno(any(blanket_patch.exists(""blanket"") for black_blanket_patch in black Blank     # 1
  2   # 2
        3   # 3
        4   # 4
        5   # 5
        6   # 6
        7  8  9  10  # 10
        for  2  0  0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
16695341,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?,"    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    result = bool_to_yesno(is_bottle or is_child)
    return str(result).lower() if result == bool_to_yesno(is_bottle or is_child) else ""no"""
5111363,Are there chairs or tables that are not blue?,"    is_chair_or_table = False
    is_blue = False
    image_patch = ImagePatch(image)
    chairs_and_tables = image_patch.find(""chair"") + image_patch.find(""table"")
    for chair_or_table in chairs_and_tables:
        if chair_or_table.exists(""chair"") or chair_or_table.exists(""table""):
            is_chair_or_table = True
        if not chair_or_table.exists(""blue""):
            is_blue = False
    if is_chair_or_table and not is_blue:
        return ""yes""
    return bool_to_yesno(is_chair_or_table)"
9230971,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    is_short = hair_patches[0].verify_property(""hair"", ""short"")
    is_white = hair_patches[0].verify_property(""hair"", ""white"")
    return bool_to_yesno(is_short and is_white)"
4822200,Do you see any lettuce on the food with the meat?,"    image_patch = ImagePatch(image)
    meat_patches = image_patch.find(""meat"")
    # Question assumes only one meat patch
    if len(meat_patches) == 0:
        # If no meat is found, query the image directly
        return image_patch.simple_query(""Is there lettuce on the food with the meat?"")
    for meat_patch in meat_patches:
        is_meat_with Let      #  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  # 36  37  38  39  40  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #"
3726666,What device is to the left of the curtain that is to the left of the glasses?,"    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    if len(glasses_patches) < 2:
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center > (glasses_patches[0].horizontal_center + glasses_patches[1].horizontal_center) / 2:
            return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center < (glasses_patches[0].horizontal_center + glasses_patches[1].horizontal_center) / 2:
            return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
"
9954849,What kind of furniture is it?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is it?"")
    return furniture_patches[0].simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?,"    image_patch = ImagePatch(image)
    red_trains_or_buses = image_patch.find(""red train"") + image_patch.find(""red bus"")
    is_red_train_or_bus = [red_object.exists(""red train"") for red_object in red_trains_or_buses] if red_trains_or_buses else []
    is_red_train_or_bus = bool_to_yesno(any(is_red for is_red in is_red_train_or_bus))
    return bool_to_yesno(is_red_train_or_bus)"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?,"    image_patch = ImagePatch(image)
    crate_patches = image_patch.find(""crate that is of lettuce"")
    if len(crate_patches) == 0:
        # If no crate is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    crate_patch = crate_patches[0]
    crate_to_the_left_patches = image_patch.find(""crate that is of lettuce - to the left"")
    for crate_to_the_left_patch in crate_to_the_left_patches:
        if crate_to_the_left_patch.horizontal_center < crate_patch.horizontal_center:
            return crate_to_the_left_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    return ""no such crate found"""
623393,"What type of clothing is tan, the hat or the vest?","    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    for tan_patch in tan_patches:
        tan_type = tan_patch.simple_query(""What type of clothing is tan?"")
        if tan_type == ""hat"":
            return ""hat""
        elif tan_type == ""vest"":
            return ""vest""
    return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")"
6436448,Is the color of the skirt the same as the scarf?,"    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    skirt = skirt_patches[0]
    scarf_patches = image_patch.find(""scarf"")
    for scarf_patch in scarf_patches:
        if skirt.simple_query(""What is the color of the skirt?"") == scarf_patch.simple_query(""What is the color of the scarf?""):
            return ""yes""
    return ""no"""
3303313,Is the blanket under a cat?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket query
443663,What color is the picture?,"    image_patch = ImagePatch(image)
    picture_patches = image_patch.find(""picture"")
    # Question assumes only one picture patch
    if len(picture_patches) == 0:
        # If no picture is found, query the image directly
        return image_patch.simple_query(""What color is the picture?"")
    return picture_patches[0].simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes one umbrella patch
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""no""
    return bool_to_yesno(any(umbrella_patch.exists(""umbrella"") for umbrella_patch in umbrella_patches))"
1885406,What is the toy on the bed?,"    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    toy_patches = image_patch.find(""toy"")
    # Question assumes one bed patch and one toy patch
    if len(bed_patches) == 0 or len(toy_patches) == 0:
        # If no bed or toy is found, query the image directly
        return image_patch.simple_query(""What is the toy on the bed?"")
    for bed_patch in bed_patches:
        for toy_patch in toy_patches:
            if bed_patch.containsQuery =           # 0 1 2 3 4 5 6 7 8 9  # 'toy':
 #            if bed_patch.containsQuery(""toy"", ""on bed""):  # 0 1 2 3 4 5 6 7 8 9
            #    return toy_patch.simple_query(""What is the toy on the bed?"")
            if bed_patch.horizontal_center > toy_patch.horizontal_center:
                return toy_patch.simple_query(""What is the toy on the bed?"")
    return image_patch.simple_query(""What is the toy on the bed?"") bed                                                                                                                                                                                                                                                                         "
5557965,On which side is the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana query      # 1  # 2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 ,  2  # 2  # 3  # 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 ,  # 0  # 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0  # for  # 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9"
3196355,What does the batter hold?,"    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    return batter_patches[0].simple_query(""What does the batter hold?"")"
14470748,Who wears a jacket?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for person_patch in person_patches:
        who_wears_jacket = person_patch.simple_query(""Who wears a jacket?"")
    #    if who_wears_jacket == """": # crop would include the jacket so keep it in the query
    #        return image_patch.simple_query(""Who wears a jacket?"")
    return who_wears_jacket"
16537736,Are there any houses behind the shrubs?,"    image_patch = ImagePatch(image)
    shrub_patches = image_patch.find(""shrub"")
    # Question assumes only one shrub patch
    for shrub_patch in shrub_patches:
        is_house = shrub_patch.exists(""house"")
        if is_house:
            return ""yes""
    # If no shrub is a house, query the image directly
    return bool_to_yesno(any(s.exists(""house"") for s in image_patch.find(""shrub""))"
1129541,What piece of furniture is made of wood?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        material = furniture_patch.simple_query(""What is the main material of the furniture?"")
        if material == ""wood"":
            return furniture_patch.simple_query(""What piece of furniture is it?"") # crop would include the material so keep it in the query
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""What piece of furniture is made of wood?"")"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is wearing a hat"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
"
12416703,Where is that cat?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Where is that cat?"")
    if cat_patches[0].vertical_center < image_patch.vertical_center:
        return image_patch.simple_query(""Where is that cat?"")  # ""bottom"" or ""left""
    else:
        return image_patch.simple_query(""Where is that cat?"")  # ""right"" or ""top"""
15603088,The animal to the right of the envelope is lying on what?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    envelope_patches = image_patch.find(""envelope"")
    # Question assumes one animal and one envelope
    for animal_patch in animal_patches:
        for envelope_patch in envelope_patches:
            if animal_patch.horizontal_center > envelope_patch.horizontal_center:
                return animal_patch.simple_query(""The animal to the right of the envelope is lying on what?"") # crop would include the surface so keep it in the query
    # If no animal is to the right of an envelope, query the image directly
    return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")"
5329077,Is the man on a bench?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    bench_patches = image_patch.find(""bench"")
    # Question assumes one man patch and one bench patch
    is_on_bench = False
    for man_patch in man_patches:
        for bench_patch in bench_patches:
            if man_patch.horizontal_center > bench_patch.horizontal_center:
                return ""no""
            if man_patch.simple_query(""Is the man sitting?"") == ""yes"":
                is_on_bench = True
            if man_patch.simple_query(""Is the man on a bench?"") == ""yes"":
                return True
            if is_on_bench:
                return True
    return man_patches[0].simple_query(""Is the man on a bench?"")"
1945705,What kind of device is to the left of the device that looks silver and gray?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device that looks silver and gray"")
    if len(device_patches) < 2:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    for device_patch in device_patches:
        for other_device_patch in device_patches:
            if device_patch.horizontal_center < other_device_patch.horizontal_center:
                return device_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    return ""laptop"" # crop would include the device that looks silver and gray so keep it in the query"
17520003,What vehicle is to the right of the pine tree?,"    image_patch = ImagePatch(image)
    pine_patches = image_patch.find(""pine tree"")
    # Question assumes only one pine patch
    if len(pine_patches) == 0:
        # If no pine is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    for pine_patch in pine_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > pine_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicle is to the right of the pine tree?"") # crop would include the vehicle so keep it in the query
    # If no vehicle is found to the right of the pine, query the image directly
    return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")"
1259983,Who is wearing pants?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    for person_patch in person_patches:
        who_is_wearing_pants = person_patch.simple_query(""Who is wearing pants?"")
    #    if who_is_wearing_pants == """": # crop would include the pants so keep it in the query
    #        return image_patch.simple_query(""Who is wearing pants?"")
    return who_is_wearing_pants"
6413378,Is there a black keyboard or camera?,"    image_patch = ImagePatch(image)
    is_black_keyboard = image_patch.exists(""black keyboard"")
    is_black_keyboard_or_camera = image_patch.exists(""black keyboard camera"")
    is_black_camera = image_patch.exists(""black camera"")
    is_black_keycap = image_patch.exists(""black keycap"")
    is_black_keycap_or_keycap = image_patch.exists(""black keycap camera"")
    is_black_keycap_or_keycap_or_keycap = image_patch.exists(""black keycap camera keycap"")
    is_black_keycap_or_keycap_or_keycap_or_keycap = image_patch.exists(""black keycap camera keycap keycap"")
    is_black_keycap_or_keycap_or_keycap_or_keycap_or_keycap = image_patch.exists(""black keycap camera keycap keycap keycap"")
    is_black_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap = image_patch.exists(""black keycap camera keycap keycap keycap keycap"")
    is_black_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap = image_patch.exists(""black keycap camera keycap keycap keycap keycap keycap"")
    is_black_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap = image_patch.exists(""black keycap camera keycap keycap keycap keycap keycap keycap"")
    is_black_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap = image_patch.exists(""black keycap camera keycap keycap keycap keycap keycap keycap keycap"")
    is_black_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap = image_patch.exists(""black keycap camera keycap keycap keycap keycap keycap keycap keycap keycap"")
    is_black_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap = image_patch.exists(""black keycap camera keycap keycap keycap keycap keycap keycap keycap keycap keycap"")
    is_black_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap_or_keycap = image_patch.exists(""black"
947305,Is the sunny water blue and high?,"    image_patch = ImagePatch(image)
    is_sunny = image_patch.simple_query(""Is the weather sunny?"") == ""yes""
    is_water = image_patch.simple_query(""What is the nature of the scene?"") == ""water""
    is_blue = image_patch.simple_query(""What is the dominant color of the scene?"") == ""blue""
    is_high = image_patch.simple_query(""Is the scene elevated or high up?"") == ""yes""
    is_all_true = is_sunny and is_water and is_blue and is_high
    return bool_to_yesno(is_all_true)"
4367817,What type of animal in this scene is brown?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    for animal_patch in animal_patches:
        brown_animal = animal_patch.simple_query(""What type of animal is it?"")
        if brown_animal == ""rabbit
15485572,What is the vegetable on the hot dog with the cheese?,"    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    for hot_dog_patch in hot_dog_patches:
        hot_dog_with_vegetable_and_cheese_patches = hot_dog_patch.find(""hot dog with vegetable and cheese"")
        for hot_dog_with_vegetable_and_cheese_patch in hot_dog_with_vegetable_and_cheese_patches:
            if hot_dog_patch.simple_query(""Is the hot dog with vegetable and cheese the correct one?"") == ""yes"":
                return hot_dog_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"") # crop would include the hot dog, vegetable, and cheese so keep it in the query
    # If no hot dog with vegetable and cheese is found, pick the first hot dog
    return hot_dog_patches[0].simple_query(""What is the vegetable on the hot dog with the cheese?"")"
12661142,What is the appliance in the kitchen called?,"    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    return appliance_patches[0].simple_query(""What is the appliance in the kitchen called?"")"
41012743,The arrow is on what?,"    image_patch = ImagePatch(image)
    arrow_patches = image_patch.find(""arrow"")
    # Question assumes only one arrow patch
    if len(arrow_patches) == 0:
        # If no arrow is found, query the image directly
        return image_patch.simple_query(""The arrow is on what?"")
    return image_patch.simple_query(""The arrow is on what?"")"
4777414,What color is the bicycle in the bottom of the photo?,"    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    # Question assumes only one bicycle patch
    if len(bicycle_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    bottom_bicycle = bicycle_patches[0]
    if bottom_bicycle.vertical_center < image_patch.vertical_center:
        return bottom_bicycle.simple_query(""What color is the bicycle?"") # crop would include the bicycle so keep it in the query
    else:
        return bottom_bicycle.simple_query(""What color is the bicycle?"")"
1185988,What is the device on top of the table that is to the right of the trashcan?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device on top of table that is to the right of trashcan"")
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    return device_patches[0].simple_query(""What is the device on top of the table that is to the right of the trashcan?"")"
13582968,Was granite used to make that floor?,"    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""Was granite used to make that floor?"")
    for floor_patch in floor_patches:
        is_granite = floor_patch.verify_property(""floor"", ""granite"")
        return bool_to_yesno(is_granite)"
6235273,Are there women in the photo?,"    image_patch = ImagePatch(image)
    is_woman = image_patch.exists(""woman"")
    return bool_to_yesno(is_woman)"
5377974,What is the girl playing with?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    return girl_patches[0].simple_query(""What is the girl playing with?"")"
51037065,On which side of the image is the fridge?,"    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    if fridge_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
5299477,Which kind of bag does the girl carry?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    return bag_patches[0].simple_query(""Which kind of bag does the girl carry?"")"
15135617,Is the white dog on a bench?,"    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog on a bench?"")
    white_dog_patch = white_dog_patches[0]
    is_on_bench = white_dog_patch.verify_property(""bench"", ""present"")
    if is_on_bench:
        return white_dog_patch.simple_query(""Is the white dog on a bench?"") # crop would include the bench so keep it in the query
    else:
        return white_dog_patch.simple_query(""Is the white dog on a bench?"")"
1111583,Is the male person to the right of a person?,"    image_patch = ImagePatch(image)
    male_patches = image_patch.find(""male person"")
    # Question assumes only one male person patch
    if len(male_patches) < 2:
        # If no two male persons are found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_patch in male_patches:
        for other_patch in male_patches:
            if male_patch != other_patch and other_patch.horizontal_center < male_patch.horizontal_center:
                return ""yes""
    return ""no""
"
12352269,Are there both windows and doors in this photograph?,"    image_patch = ImagePatch(image)
    doors_and_windows = image_patch.find(""window"") + image_patch.find(""door"")
    # Question assumes all are either windows or doors
    if len(doors_and_windows) < 2:
        # If there are less than 2, query the image directly
        return image_patch.simple_query(""Are there both windows and doors in this photograph?"")
    return bool_to_yesno(True) # True because there are at least 2 elements found"
15610844,What kind of place is shown?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")"
11869032,Is the banana below a bird?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana query      # 1  # 2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 , 2  # 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0  # for 2  # 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 "
9878360,What color is the vehicle to the left of the fence?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    fence_patches = image_patch.find(""fence"")
    # Question assumes one vehicle and one fence
    for vehicle_patch in vehicle_patches:
        for fence_patch in fence_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What color is the vehicle?"")
    # If no vehicle is found to the left of the fence, query the image directly
    return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")"
481765,Are there either any buses or trains in the image?,"    image_patch = ImagePatch(image)
    is_bus_or_train = image_patch.exists(""bus"") or image_patch.exists(""train"")
    return bool_to_yesno(is_bus_or_train)"
6665919,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man to the left of the traffic cone"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    is_wearing_cap = man_patch.verify_property(""man"", ""cap"")
    return bool_to_yesno(is_wearing_cap)"
11981238,What is common to the blazer and the suit?,"    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    suit_patches = image_patch.find(""suit"")
    # Question assumes one blazer and one suit
    if len(blazer_patches) != 1 or len(suit_patches) != 1:
        # If no blazer or suit is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    blazer = blazer_patches[0]
    suit = suit_patches[0]
    common_properties = [""color"", ""style"", ""material"", ""buttons""]
    for property in common_properties:
        if blazer.verify_property(property, property) and suit.verify_property(property, property):
            return property
    return image_patch.simple_query(""What is common to the blazer and the suit?"")"
16245,Is the shirt white or green?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    return shirt_patches[0].simple_query(""Is the shirt white or green?"")"
2595103,"In which part of the image are the cars, the bottom or the top?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?","    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""How does the sand look, dry or wet?"")
    return sand_patches[0].simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana query      # 1  # 2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 , 2  # 2
  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0  # , 3  # 3
 ,2  # 3  # 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 "
6376614,What color is the car in the middle?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    if car_patches[0].horizontal_center > image_patch.width / 2:
        return car_patches[0].simple_query(""What color is the car in the middle?"")
    else:
        return car_patches[0].simple_query(""What color is the car in the middle?"")"
712063,What's the lamp made of?,"    lamp_patches = ImagePatch(image).find(""lamp"")
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What is the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is to the right of the pillow, query the image directly
    return pillow_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")"
9647343,What type of material is the patio made of?,"    image_patch = ImagePatch(image)
    patio_patches = image_patch.find(""patio"")
    # Question assumes only one patio patch
    if len(patio_patches) == 0:
        # If no patio is found, query the image directly
        return image_patch.simple_query(""What type of material is the patio made of?"")
    return patio_patches[0].simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the suit?"")
    for person_patch in person_patches:
        who_is_wearing_suit = person_patch.simple_query(""Who is wearing the suit?"")
    # if no person is wearing a suit, query the image directly
    # if multiple people are wearing suits, query the image directly
    return who_is_wearing_suit"
12894285,What is the color of the clouds in the sky?,"    image_patch = ImagePatch(image)
    cloud_patches = image_patch.find(""cloud"")
    # Question assumes only one cloud patch
    if len(cloud_patches) == 0:
        # If no cloud is found, query the image directly
        return image_patch.simple_query(""What is the color of the clouds in the sky?"")
    return cloud_patches[0].simple_query(""What is the color of the clouds in the sky?"")"
9843309,Do the flowers look orange?,"    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flower"", ""orange"") )"
618996,Is there a chair or a bed in this image?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    is_furniture = is_chair or is_bed
    return bool_to_yesno(is_furniture)"
18959736,Are there trucks to the left of the umbrella?,"    image_patch = ImagePatch(image)
    trucks_patches = image_patch.find(""truck"")
    umbrellas_patches = image_patch.find(""umbrella"")
    is_truck_to_left = False
    for truck_patch in trucks_patches:
        for umbrella_patch in umbrellas_patches:
            if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
                is_truck_to_left = True
                break
        if is_truck_to_left:
            return bool_to_yesno(is_truck_to_left)
    return bool_to_yesno(False)"
867869,What color are the pants the man is wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = man_patch.find(""pants"")
    # Question assumes one pants patch
    if len(pants_patches) == 0:
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    return man_patch.simple_query(""What color are the pants the man is wearing?"")"
551601,Are there any pillows or chairs in the image?,"    image_patch = ImagePatch(image)
    is-pill      #  1  2  3  4  5  6  7  8  9 10 11 12  # for 2.11.22  #  1  2  3  4  5  6  7  8  9 10 11 12
  2  3  4  5  6  7  8  9 10 11 12  # for 2.11.22  #  1  2  3  4  5  6  7  8  9 10 11 12
    # 1 2 3 4 5 6 7 8 9 10 11 12
    is pillow     #  1  2  3  4  5  6  7  8  9 10 11 12  # for 2.11.22  #  1  2  3  4  5  6  7  8  9 10 11 12
  2  3  4  5  6  7  8  9 10 11 12  # for 2.11.22  #  1  2  3  4  5  6  7  8  9 10 11 12
    # 1 2 3 4 5 6 7 8 9 10 11 12
    is pillow  2  3  4  5  6  7  8  9 10 11 12  # for 2.11.22  #  1  2  3  4  5  6  7  8  9 10 11 12
    is 2  3  4  5  6  7  8  9 10 11 12  # for 2.11.22  #  1  2 "
10775785,Are there women to the left of the person with the bag?,"    image_patch = ImagePatch(image)
    person_with_bag_patches = image_patch.find(""person with bag"")
    # Question assumes only one person with bag patch
    if len(person_with_bag_patches) == 0:
        # If no person with bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    person_with_bag = person_with_bag_patches[0]
    for person in image_patch.find(""person""):
        if person.horizontal_center < person_with_bag.horizontal_center:
            if person.simple_query(""What is the person doing with?"") == ""bag"":
                return ""yes""
    for person in image_patch.find(""woman""):
        if person.horizontal_center < person_with_bag.horizontal_center:
            return ""yes""
    return ""no"""
5925408,What is the bike in front of?,"    image_patch = ImagePatch(image)
    bike_patches = image_patch.find(""bike"")
    # Question assumes only one bike patch
    if len(bike_patches) == 0:
        # If no bike is found, query the image directly
        return image_patch.simple_query(""What is the bike in front of?"")
    return image_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?,"    image_patch = ImagePatch(image)
    is_bed_or Desk      #  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  31  32  33  34  35  36  37  38  39  40  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  # "
13778498,What type of vehicle is behind the green tree?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"")"
41019603,What is the child standing on?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?,"    image_patch = ImagePatch(image)
    wooden_item_patches = image_patch.find(""wooden item of furniture"")
    # Question assumes only one wooden item of furniture
    if len(wooden_item_patches) == 0:
        # If no wooden item of furniture is found, query the image directly
        return image_patch.simple_query(""What is the wooden item of furniture called?"")
    return wooden_item_patches[0].simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes one man patch and one woman patch
    if len(man_patches) != 1 or len(woman_patches) != 1:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    if man_patches[0].horizontal_center < woman_patches[0].horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing the shirt?"")
    # if multiple people, query each one
    return who_is_wearing"
18546659,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?,"    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite that looks triangular"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    return kite_patches[0].simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?,"    # asks for the predicate of a relational verb (drinking), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?,"    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    building_patch = building_patches[0]
    tree_patches = image_patch.find(""tree"")
    for tree_patch in tree_patches:
        if tree_patch.horizontal_center < building_patch.horizontal_center:
            if building_patch.simple_query(""What is the building's color?"") == ""white, not present"":
                return ""brown""
            else:
                return building_patch.simple_query(""Is the building white or brown?"")
    else:
        return building_patch.simple_query(""Is the building white or brown?"")"
5749240,Are the glove and the undershirt both black?,"    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    if len(glove_patches) < 2:
        # If no second patch, query the image directly
        return image_patch.simple_query(""Is the glove black?"")
    for glove_patch in glove_patches:
        is_black = glove_patch.verify_property(""glove"", ""black"")
        if not is_black:
            return ""no""
    return ""yes"""
18573157,Is the juice in a cup?,"    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    # Question assumes only one juice patch
    if len(juice_patches) == 0:
        # If no juice is found, query the image directly
        return image_patch.simple_query(""Is the juice in a cup?"")
    if juice_patches[0].verify_property(""juice"", ""cup""):
        return ""yes""
    else:
        return image_patch.simple_query(""Is the juice in a cup?"")"
3445929,Is the brown horse on the right side of the photo?,"    image_patch = ImagePatch(image)
    brown_horse_patches = image_patch.find(""brown horse"")
    # Question assumes only one brown horse patch
    if len(brown_horse_patches) == 0:
        # If no brown horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    if brown_horse_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
16541709,Where is the grass?,"    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    if grass_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""  # bottom, right, up, down
        # ""bottom"" for y, ""left"" for x
    else:
        return image_patch.simple_query(""Where is the grass?"") # crop would include the grass so keep it in the query"
15764335,Are there any dogs on the tan sand?,"    image_patch = ImagePatch(image)
    is_dog = image_patch.exists(""dog on tan sand"")
    is_dog_on_sand = image_patch.exists(""dog on sand"")
    is_dog_on_tan = image_patch.exists(""tan dog on sand"")
    is_dog_on_tan_sand = image_patch.exists(""tan dog on tan sand"")
    is_dog_on_sand_or_tan = is_dog_on_sand or is_dog_on_tan
    is_dog_on_tan_sand_or_tan = is_dog_on_tan_sand or is_dog_on_tan
    is_dog_on_sand_or_tan_sand = is_dog_on_sand_or_tan and is_dog_on_sand_or_tan
    is_dog_on_sand_or_tan_sand_or_tan = is_dog_on_sand_or_tan_sand and is_dog_on_sand_or_tan
    is_dog_on_sand_or_tan_sand_or_tan_sand = is_dog_on_sand_or_tan_sand_or_tan
    is_dog_on_sand_or_tan_sand_or_tan_sand_or_tan = is_dog_on_sand_or_tan_sand_or_tan_sand
    is_dog_on_sand_or_tan_sand_or_tan_sand_or_tan_sand_or_tan = is_dog_on_sand_or_tan_sand_or_tan_sand_or_tan
    is_dog_on_sand_or_tan_sand_or_tan_sand_or_tan_sand_or_tan_sand = is_dog_on_sand_or_tan_sand_or_tan_sand_or_tan_sand
    is_dog_on_sand_or_tan_sand_or_tan_sand_or_tan_sand_or_tan_sand_or_tan = is_dog_on_sand_or_tan_sand_or_tan_sand_or_tan_sand_or_tan_sand
    is_dog_on_sand_or_tan_sand_or_tan_sand_or_tan_sand_or_tan_sand_or_tan_sand_or_tan = is_dog_on_sand_or_tan_sand_or_tan_sand_or_tan_sand_or_tan_sand_or_tan_sand
    is_dog_on_sand_or_tan_sand_or_tan_sand_or_t"
1478089,Are the door and the garage door made of the same material?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    if len(door_patches) < 2:
        # If there is only one door, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door1 = door_patches[0]
    door2 = door_patches[1]
    is_same_material = door1.verify_property(""door"", door2.get_property_query =   # query property
         # 'property_query' is a method of ImagePatch, so it should be 'property_query' instead of 'get_property_query'
        for property_query in ['material', 'color', 'texture', 'shape', 'size']:  # property to check
        for property_query in ['material', 'color', 'texture', 'shape', 'size']:  # property to check
        # for property_query in ['material', 'color', 'texture', 'shape', 'size']:  # property to check
        # for property_query in ['material',  # property to check
        # 'color',  # property to check
        # 'texture',  # property to check
        # 'shape',  # property to check
        # 'size'  # property to check
        # ]:  # property to check
      # for property_query in ['material', 'color', 'texture', 'shape', 'size']:
     #     door2.get_property_query = property_query
        # if door1.verify_property('door', property_query):
        #     return True
    #     # if door1.verify_property('door', property_query):
    #     #     return True
    # return door1.verify_property('door', door2.get_property_query)
    # return door1.verify_property('door', door2.get_property_query)
    # return door1.verify_property('door', door2.get_property_query)
    # return door1.verify_property('door', door2.get_property_query)
    # return door1.verify_property('door', door2.get_property_query)
    # return door1.verify_property('door', door2.get_property_query)
    # return door1.verify_property('door', door2.get_property_query)
    # return door1.verify_property('door', door2.get_property_query)
    # return door1.verify_property('door', door2.get_property_query)
    # return door1.verify_property('door',"
1250685,Was this picture taken in a bathroom or at a dining room?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"")"
10436844,Is the zebra's nose soft and brown?,"    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    for zebra_patch in zebra_patches:
        is_nose_soft_and_brown = (zebra_patch.simple_query(""Is the nose soft?"") == ""yes"" and
                                   zebra_patch.simple_query(""Is the nose brown?"") == ""yes"")
        return bool_to_yesno(is_nose_soft_and_brown)"
10683765,Does the shirt have blue color?,"    shirt_patches = ImagePatch(image).find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return shirt_patches[0].simple_query(""Does the shirt have blue color?"")
    return shirt_patches[0].verify_property(""shirt"", ""blue"")"
1593352,Do the draperies look white and striped?,"    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""drapery"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    drapery_patch = drapery_patches[0]
    is_white_and_striped = drapery_patch.verify_property(""drapery"", ""white_and_striped"")
    return bool_to_yesno(is_white_and_striped)"
16553304,Are the trunks both long and wide?,"    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    trunk_patch = trunk_patches[0]
    is_long_and Wide     #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,   #  ,  , #  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5 "
7165102,Is the car on the left of the photo?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the car on the left of the photo?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?,"    image_patch = ImagePatch(image)
    yellow_green_banana_patches = image_patch.find(""yellow green banana"")
    # Question assumes only one yellow green banana patch
    if len(yellow_green_banana_patches) < 2:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for yellow_green_banana_patch in yellow_green_banana_patches:
        is_short = yellow_green_banana_patch.verify_property(""banana"", ""short"")
        if is_short:
            return ""yes""
    return bool_to_yesno(is_short)"
19279872,What is the man to the right of the helmet wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    helmet_patches = image_patch.find(""helmet"")
    for helmet_patch in helmet_patches:
        if helmet_patch.horizontal_center < man_patch.horizontal_center:
            return man_patch.simple_query(""What is the man to the right of the helmet wearing?"") # crop would include the helmet so keep it in the query
    # If no helmet is found, query the image directly
    return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")"
4285513,What is the color of the floor?,"    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor?"")
    return floor_patches[0].simple_query(""What is the color of the floor?"")"
3974266,Do the trousers look tan?,"    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return trousers_patches[0].verify_property(""trousers"", ""tan"")"
11595009,What are the devices to the right of the device that is to the right of the remote control?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""remote control"")
    if len(device_patches) < 2:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    device_to_the_right = device_patches[1]  # the device that is to the right of the remote control
    devices_to_the_right_of_it = image_patch.find(""device to the right of the remote control, for some definition of 'right'"")  # the devices that are to the right of the device that is to the right of the remote control
    for device in devices_to_the_right_of_it:
        if device.horizontal_center > device_to_the_right.horizontal_center:
            return [device.simple_query(""What is this device?"") for device in devices_to_the_right_of_it]  # crop would include the device so keep it in the query
    return []  # if no devices are to the right of the device that is to the right of the remote control"
6183000,Are there nightstands or beds?,"    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    is_furniture = image_patch.exists(""furniture"")
    if is_furniture and is_nightstand or is_furniture and is_bed:
        return bool_to_yesno(is_nightstand) or bool_to_yesno(is_bed)
    else:
        return bool_to_yesno(is_nightstand) or bool_to_yesno(is_bed)"
14143982,Is it an outdoors scene?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an outdoors scene?"")"
6123160,Are the speakers to the left of a Wii controller?,"    image_patch = ImagePatch(image)
    wii_controller_patches = image_patch.find(""wii controller"")
    if len(wii_controller_patches) == 0:
        # If no wii controller is found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    wii_controller_patch = wii_controller_patches[0]
    speakers_patches = image_patch.find(""speaker"")
    for speaker_patch in speakers_patches:
        if speaker_patch.horizontal_center < wii_controller_patch.horizontal_center:
            return ""yes""
    return ""no"""
3681634,Is the plastic fork in the top or in the bottom part of the photo?,"    image_patch = ImagePatch(image)
    plastic_fork_patches = image_patch.find(""plastic fork"")
    # Question assumes only one plastic fork patch
    if len(plastic_fork_patches) == 0:
        # If no plastic fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    if plastic_fork_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
13629530,What is the vehicle on the street?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle on the street?"")
    return vehicle_patches[0].simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    is_chairs_or_windows = image_patch.exists(""chair window"") or image_patch.exists(""window chair"")
    is_chairs_or_windows2 = image_patch.exists(""chair window chair"") or image_patch.exists(""window chair window"")
    is_chairs_or_windows3 = image_patch.exists(""chair window chair window"") or image_patch.exists(""window chair window chair"")
    is_chairs_or_windows4 = image_patch.exists(""chair window chair window chair"") or image_patch.exists(""window chair window chair window"")
    is_chairs_or_windows5 = image_patch.exists(""chair window chair window chair window"") or image_patch.exists(""window chair window chair window chair"")
    is_chairs_or_windows6 = image_patch.exists(""chair window chair window chair window chair"") or image_patch.exists(""window chair window chair window chair window"")
    is_chairs_or_windows7 = image_patch.exists(""chair window chair window chair window chair window"") or image_patch.exists(""window chair window chair window chair window chair"")
    is_chairs_or_windows8 = image_patch.exists(""chair window chair window chair window chair window chair"") or image_patch.exists(""window chair window chair window chair window chair window"")
    is_chairs_or_windows9 = image_patch.exists(""chair window chair window chair window chair window chair window"") or image_patch.exists(""window chair window chair window chair window chair window chair"")
    is_chairs_or_windows10 = image_patch.exists(""chair window chair window chair window chair window chair window chair"") or image_patch.exists(""window chair window chair window chair window chair window chair window"")
    is_chairs_or_windows11 = image_patch.exists(""chair window chair window chair window chair window chair window chair window"") or image_patch.exists(""window chair window chair window chair window chair window chair window chair"")
    is_chairs_or_windows12 = image_patch.exists(""chair window chair window chair window chair window chair window chair window chair"") or image_patch.exists(""window chair window chair window chair window chair window chair window chair window"")
    is_chairs_or_windows13 = image_patch.exists(""chair window chair window chair window chair window chair window chair window chair window"") or image_patch.exists(""window chair window chair window chair window chair window chair window chair window chair"")
    is_chairs_or_windows14 = image_patch.exists(""chair window chair window chair window chair window chair window chair window chair window chair"") or"
10607062,What color is the hat the man is in?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = man_patch.find(""hat"")
    # Question assumes one hat patch
    if len(hat_patches) == 0:
        # If no hat is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    return man_patch.simple_query(""What color is the hat the man is in?"")"
1849976,What vegetables are to the left of the spoon?,"    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    spoon_patch = spoon_patches[0]
    veggie_patches = image_patch.find(""veggie"")
    # Question assumes multiple veggie patches
    for veggie_patch in veggie_patches:
        if veggie_patch.horizontal_center < spoon_patch.horizontal_center:
            return veggie_patch.simple_query(""What vegetables are to the left of the spoon?"") # crop would include the spoon so keep it in the query
    # If no veggie is to the left of the spoon, query the image directly
    return image_patch.simple_query(""What vegetables are to the left of the spoon?"")"
14827816,Is the statue made of bronze or stone?,"    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    return statue_patches[0].simple_query(""Is the statue made of bronze or stone?"")"
857204,What's the woman wearing?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's she wearing?"")"
2201105,Is the ball pink?,"    ball_patches = ImagePatch(image).find(""ball"")
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return ball_patches[0].verify_property(""ball"", ""pink"")"
14616023,What piece of furniture are the cords in front of?,"    image_patch = ImagePatch(image)
    cord_patches = image_patch.find(""cord"")
    # Question assumes only one set of cords
    for cord_patch in cord_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center < cord_patch.horizontal_center:
                return furniture_patch.simple_query(""What piece of furniture are the cords in front of?"") # crop would include the furniture so keep it in the query
    # If no furniture is found, query the image directly
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?,"    image_patch = ImagePatch(image)
    doors_and_windows = image_patch.find(""door"") + image_patch.find(""window"")
    # Question assumes that all objects are either doors or windows
    if len(doors_and_windows) < 2:
        # If there are less than 2 objects, query the image directly
        return image_patch.simple_query(""Are there both doors and windows in this photo?"")
    return bool_to_yesno(True) # True because there are at least 2 objects"
8249677,On which side of the image is the black car?,"    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    if black_car_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the striped animal called?"")
    return animal_patches[0].simple_query(""What is the striped animal called?"")"
1479068,Is it outdoors?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
16155046,Is the dry grass below a zebra?,"    image_patch = ImagePatch(image)
    dry_grass_patches = image_patch.find(""dry grass"")
    # Question assumes only one dry grass patch
    if len(dry_grass_patches) == 0:
        # If no dry grass is found, query the image directly
        return image_patch.simple_query(""Is the dry grass below a zebra?"")
    for dry_grass_patch in dry_grass_patches:
        is_below_zebra = (image_patch.simple_query(""Is the dry grass below a zebra?"") == ""yes"")
        if is_below_zebra:
            return dry_grass_patch.simple_query(""Is the dry grass below a zebra?"") # crop would include the zebra so keep it in the query
    # If no dry grass is below a zebra, pick the first dry grass
    return dry_grass_patches[0].simple_query(""Is the dry grass below a zebra?"")"
16515071,What is the person in the water wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    return person_patches[0].simple_query(""What is the person in the water wearing?"")"
161015042,Who is wearing the goggles?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the goggles?"")
    for person_patch in person_patches:
        who_is_wearing_goggles = person_patch.simple_query(""Who is wearing the goggles?"")
    # if no person is wearing goggles, query the image directly
    return who_is_wearing_goggles"
19149868,What is pulled by the lady?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is pulled by the lady?"")"
5199994,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
19184475,Are the man glasses on the left side of the image?,"    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""man glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center < image_patch.width / 2:
        return ""yes""
    else:
        return ""no"""
7149602,Is the shirt orange or blue?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    return shirt_patches[0].simple_query(""Is the shirt orange or blue?"")"
19479555,What is the person to the right of the benches holding?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    bench_patches = image_patch.find(""bench"")
    # Question assumes one person patch and one bench patch
    for person_patch in person_patches:
        for bench_patch in bench_patches:
            if person_patch.horizontal_center > bench_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the benches holding?"")
    # If no person is found to the right of the benches, query the image directly
    return image_patch.simple_query(""What is the person to the right of the benches holding?"")"
19273393,Are there both a door and a window in this photo?,"    image_patch = ImagePatch(image)
    doors_and_windows = image_patch.find(""door"") + image_patch.find(""window"")
    # Question assumes each is a separate object
    if len(doors_and_windows) < 2:
        # If no door and/or window is found, query the image directly
        return image_patch.simple_query(""Are there both a door and a window in this photo?"")
    return bool_to_yesno(True) # True because there are at least 2 objects"
6481656,What is the man doing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man doing?"")"
13127703,What kind of drink is to the left of the bottle the woman is pouring?,"    image_patch = ImagePatch(image)
    bottle_and_woman_patches = image_patch.find(""bottle and woman"")
    if len(bottle_and_woman_patches) < 2:
        # If no bottle and woman are found, query the image directly
        return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    bottle_and_woman = bottle_and_woman_patches[0]
    bottle = bottle_and_woman_patches[1]
    return bottle.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")"
2378018,What is the toilet in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the toilet in front of?"")"
8430841,Is the frisbee to the left of the guy?,"    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    guy_patches = image_patch.find(""guy"")
    # Question assumes one frisbee patch and one guy patch
    for frisbee_patch in frisbee_patches:
        for guy_patch in guy_patches:
            if frisbee_patch.horizontal_center < guy_patch.horizontal_center:
                return ""yes""
    return ""no"""
18616818,The man is watching who?,"    # asks for the predicate of a relational verb (watching who), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is watching who?"")"
179526,Is the white dog behind a girl?,"    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    girl_patches = image_patch.find(""girl"")
    # Question assumes one white dog patch and one girl patch
    is_white_dog_behind_girl = False
    for white_dog_patch in white_dog_patches:
        for girl_patch in girl_patches:
            if white_dog_patch.horizontal_center > girl_patch.horizontal_center:
                return ""no""
            else:
                is_white_dog_behind_girl = True
    if is_white_dog_behind_girl:
        return ""yes""
    else:
        return ""no""
"
21018827,Is the river murky and calm?,"    image_patch = ImagePatch(image)
    river_patches = image_patch.find(""river"")
    # Question assumes only one river patch
    if len(river_patches) == 0:
        # If no river is found, query the image directly
        return image_patch.simple_query(""Is the river murky and calm?"")
    if river_patches[0].verify_property(""river"", ""murky""):
        return bool(r query
3697449,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?,"    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    is_both = bool_to_yesno(is_racket and is_toothbrush)
    return bool_to_yesno(is_both)"
1904643,What do both the car and the sign have in common?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    sign_patches = image_patch.find(""sign"")
    # Question assumes one car patch and one sign patch
    if len(car_patches) != 1 or len(sign_patches) != 1:
        # If no car or sign is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patch = sign_patches[0]
    common_features = set()
    for feature in [""shape"", ""color"", ""material""]:
        if car_patch.verify_property(feature, ""present"") and sign_patch.verify_property(feature, ""present""):
            common_features.add(feature)
    if len(common_features) == 0:
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    return min(common_features, key=image_patch.simple_query) if common_features else ""nothing"""
11764476,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    for plate_patch in plate_patches:
        furniture_patches = image_patch.find(""table"")
        for furniture_patch in furniture_patches:
            if plate_patch.vertical_center > furniture_patch.horizontal_center:
                return image_patch.simple_query(""On what kind of furniture is the plate?"") # crop would include the plate so keep it in the query
    # If no plate is found on a table, query the image directly
    return furniture_patches[0].simple_query(""On what kind of furniture is the plate?"")"
61022361,What is the painting that is to the left of the clock hanging on?,"    image_patch = ImagePatch(image)
    hanging_patches = image_patch.find(""hanging on"")
    for hanging_patch in hanging_patches:
        if hanging_patch.simple_query(""Is it a clock?"") == ""yes"":
            hanging_patch = ImagePatch(image)
            hanging_patches = image_patch.find(""hanging on"")
            for hanging_patch2 in hanging_patches:
                if hanging_patch2.horizontal_center < hanging_patch.horizontal_center:
                    return hanging_patch2.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")"
1527392,"What color is the fence, tan or black?","    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    return fence_patches[0].simple_query(""What color is the fence, tan or black?"")"
19229351,Do you see both bowls and carrots?,"    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    is_both = bool_to_yesno(is_bowl and is_carrot)
    return bool_to_yesno(is_both)"
1297082,On which side is the silver fork?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16757832,Are there any blue helmets or napkins?,"    image_patch = ImagePatch(image)
    is_blue_helmeth = image_patch.exists(""blue helmet"")
    is_blue_helmel = image_patch.exists(""blue helme"")
    is_blue_helme = image_patch.exists(""blue helm e"")
    is_blue_helm = image_patch.exists(""blue helm"")
    is_blue_helm2 = image_patch.exists(""blue helm 2"")
    is_blue_helm3 = image_patch.exists(""blue helm 3"")
    is_blue_helm4 = image_patch.exists(""blue helm 4"")
    is_blue_helm5 = image_patch.exists(""blue helm 5"")
    is_blue_helm6 = image_patch.exists(""blue helm 6"")
    is_blue_helm7 = image_patch.exists(""blue helm 7"")
    is_blue_helm8 = image_patch.exists(""blue helm 8"")
    is_blue_helm9 = image_patch.exists(""blue helm 9"")
    is_blue_helm10 = image_patch.exists(""blue helm 10"")
    is_napkin = image_patch.exists(""blue napkin"")
    is_blue_helm = is_blue_helmeth or is_blue_helmel or is_blue_helme or is_blue_helm or is_blue_helm2 or is_blue_helm3 or is_blue_helm4 or is_blue_helm5 or is_blue_helm6 or is_blue_helm7 or is_blue_helm8 or is_blue_helm9 or is_blue_helm10
    is_napkin = is_napkin or is_blue_napkin =  # query the image for blue_napkin  # for  # for
     # for blue_napkin in image_patch.find(""blue_napkin""):
    #     is_napkin = is_napkin or blue_napkin.exists(""blue_napkin"")
    # for blue_napkin in image_patch.find(""blue_napkin""):
    #     is_napkin = is_napkin or blue_napkin.exists(""blue_napkin"")
    # for blue_napkin in image_patch.find(""blue_napkin""):
    #     is_napkin = is_napkin or blue_napkin.exists(""blue_napkin"")
    # for blue_napkin in image_patch.find(""blue_napkin""):
    #     is_napkin = is_napkin or blue_napkin.exists(""blue_n"
839816,"In which part of the photo is the racket, the top or the bottom?","    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12385226,Is there a mirror in the bathroom?,"    image_patch = ImagePatch(image)
    is_mirror = image_patch.exists(""mirror"")
    return bool_to_yesno(is_mirror)"
18720852,Are there either blankets or tents in this picture?,"    image_patch = ImagePatch(image)
    is_blanket_or_tent = image_patch.exists(""blanket"") or image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket_or_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) < 2:
        # If there is only one woman, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < image_patch.width / 2:
            if woman_patch.horizontal_center < (image_patch.width / 2) + (image_patch.width / 3):
                return ""left""
            else:
                return ""right""
    return ""left""
"
19453453,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?,"    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    if house_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?,"    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""What is in front of the flowers that look red?"")
    for flower_patch in flower_patches:
        red_patches = flower_patch.find(""red"")
        for red_patch in red_patches:
            if red_patch.horizontal_center > flower_patch.horizontal_center:
                return flower_patch.simple_query(""What is in front of the flowers that look red?"") # crop would include the red so keep it in the query
    # If no red is found, query the image directly
    return image_patch.simple_query(""What is in front of the flowers that look red?"")"
15710688,Is the shirt short sleeved or sleeveless?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    if shirt_patches[0].simple_query(""Is the shirt sleeveless?"") == ""yes"":
        return ""sleeveless""
    else:
        return shirt_patches[0].simple_query(""Is the shirt short sleeved or sleeveless?"")"
5533952,What are the white wires connected to?,"    image_patch = ImagePatch(image)
    white_wire_patches = image_patch.find(""white wire"")
    # Question assumes only one white wire patch
    if len(white_wire_patches) == 0:
        # If no white wire is found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    white_wire_patch = white_wire_patches[0]
    connection_patches = image_patch.find(""lamp""), image_patch.find(""car""), image_patch.find(""tree, lamp on top""), image_patch.find(""road sign"")
    # Question assumes one of these is the correct connection
    for connection_patch in connection_patches:
        if white_wire_patch in connection_patch:
            if connection_patch[0] == image_patch:
                return ""lamp""
            if connection_patch[0] == image_patch:
                return ""car""
            if connection_patch[0] == image_patch:
                return ""tree, lamp on top""
            if connection_patch[0] == image_patch:
                return ""road sign""
    # If no connection is found, query the image directly
    return white_wire_patch.simple_query(""What are the white wires connected to?"")"
11313555,"What type of furniture is that, a table or a nightstand?","    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    for furniture_patch in furniture_patches:
        type_of_furniture = furniture_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
        if type_of_furniture == ""table"" or type_of_furniture == ""table, nightstand"" or type_of_furniture == ""table, table"":
            return type_of_furniture
        else:
            return type_of_furniture
"
10508893,What animals are in front of the trees?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    tree_patches = image_patch.find(""tree"")
    # Question assumes one animal and one tree
    for animal_patch in animal_patches:
        for tree_patch in tree_patches:
            if animal_patch.horizontal_center < tree_patch.horizontal_center:
                return animal_patch.simple_query(""What animals are in front of the trees?"")
    # If no animal is found, query the image directly
    return image_patch.simple_query(""What animals are in front of the trees?"")"
14501997,What is the gate made of?,"    image_patch = ImagePatch(image)
    gate_patches = image_patch.find(""gate"")
    # Question assumes only one gate patch
    if len(gate_patches) == 0:
        # If no gate is found, query the image directly
        return image_patch.simple_query(""What is the gate made of?"")
    return gate_patches[0].simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device on top of table"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    return device_patches[0].simple_query(""What color is the device on top of the table?"")"
181032044,Are these closed drawers?,"    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    for drawer_patch in drawer_patches:
        is_closed = drawer_patch.verify_property(""drawer"", ""closed"")
        if is_closed:
            return ""yes""
    return ""no"""
383,What kind of furniture is made of wood?,"    image_patch = ImagePatch(image)
    wood_furniture_patches = image_patch.find(""wooden furniture"")
    # Question assumes only one wood furniture patch
    if len(wood_furniture_patches) == 0:
        # If no wood furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    for wood_furniture_patch in wood_furniture_patches:
        wood_furniture_name = wood_furniture_patch.simple_query(""What is the type of furniture?"")
        if wood_furniture_name == ""table"" or wood_furniture_name == ""table, small"" or wood_furniture_name == ""table, large"":
            return ""table""
        elif wood_furniture_name == ""chair"" or wood_furniture_name == ""chair, armless"" or wood_furniture_name == ""chair, with armrests"":
            return ""chair""
        elif wood_furniture_name == ""bench"" or wood_furniture_name == ""bench, outdoor"" or wood_furniture_name == ""bench, bed"":
            return ""bench""
        elif wood_furniture_name == ""bookshelf"" or wood_furniture_name == ""bookcase"" or wood_furniture_name == ""bookrack"":
            return ""bookshelf""
        else:
            return wood_furniture_patch.simple_query(""What kind of furniture is made of wood?"")"
101054962,What is the person by the bananas wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    banana_patches = image_patch.find(""banana"")
    # Question assumes one person patch and one banana patch
    if len(person_patches) == 0 or len(banana_patches) == 0:
        # If no person or banana is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    for person_patch in person_patches:
        what_person_is_wearing = person_patch.simple_query(""What is the person wearing?"")
        if what_person_is_wearing != ""nothing"":
            return what_person_is_wearing
    # If no person is found, query the image directly
    return image_patch.simple_query(""What is the person by the bananas wearing?"")"
759165,What is the color of the tower in the middle of the picture?,"    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    # Question assumes only one tower patch
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    return tower_patches[0].simple_query(""What is the color of the tower?"")"
10775539,Is this giraffe tall and white?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is this giraffe tall and white?"")
    if giraffe_patches[0].verify_property(""giraffe"", ""tall""):
        return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""white"")
        # crop would include the height so keep it in the query
        )
    else:
        return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""white"")
        # crop would include the height so keep it in the query
        )"
19981804,On which side of the photo is the colorful screen?,"    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""colorful screen"")
    if len(screen_patches) == 0:
        # If no screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    if screen_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
7903654,Is the tap on the left side or on the right?,"    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6206183,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    return coat_patches[0].simple_query(""Is the coat black or beige?"")"
13123207,Does the kite near the field look high and red?,"    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    kite_patch = kite_patches[0]
    is_red = kite_patch.verify_property(""kite"", ""red"")
    is_high = kite_patch.verify_property(""kite"", ""high"")
    is_red_and_high = is_red and is_high
    return bool_to_yesno(is_red_and_high)"
7740092,Are there any utensils in this picture?,"    image_patch = ImagePatch(image)
    is_utensil = image_patch.exists(""utensil"")
    return bool_to_yesno(is_utensil)"
8774975,What is around the guy?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?,"    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?,"    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    if len(staircase_patches) < 2:
        # If there is only one staircase, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    for i, staircase_patch in enumerate(staircase_patches):
        if i < len(staircase_patches) - 1:
            if staircase_patch.simple_query(""What is the color of the staircase?"") != staircase_patches[0].simple_query(""What is the color of the staircase?""):
                return ""yes""
    return ""no""
"
1605874,What color are the containers that are on the right?,"    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one or more container patches
    if len(container_patches) < 1:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    colors = []
    for container_patch in container_patches:
        colors.append(container_patch.simple_query(""What is the color of the container?""))
    if len(set(colors)) == 1:
        return colors[0]
    else:
        return ""multi-color"" # if multiple colors present
"
12495781,Are the people to the right or to the left of the cone that is orange?,"    image_patch = ImagePatch(image)
    cone_patches = image_patch.find(""cone that is orange"")
    if len(cone_patches) == 0:
        # If no cone is found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    cone_patch = cone_patches[0]
    people_patches = image_patch.find(""people"")
    for person in people_patches:
        if person.horizontal_center < cone_patch.horizontal_center:
            return ""left""
    return ""right""
"
14165681,"What type of clothing is light, the sweater or the cap?","    image_patch = ImagePatch(image)
    light_patches = image_patch.find(""light sweater"")
    if len(light_patches) > 0:
        return ""sweater""
    light_patches = image_patch.find(""light cap"")
    if len(light_patches) > 0:
        return ""cap""
    # If no light sweater or cap is found, query the image directly
    return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")"
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    girl_patches = image_patch.find(""girl that is wearing jeans"")
    for chair_patch in chair_patches:
        for girl_patch in girl_patches:
            if chair_patch.horizontal_center < girl_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
5617223,"What color is the container to the left of the horse, green or silver?","    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    horse_patches = image_patch.find(""horse"")
    # Question assumes one container and one horse
    for container_patch in container_patches:
        for horse_patch in horse_patches:
            if container_patch.horizontal_center < horse_patch.horizontal_center:
                return container_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    # If no container is found to the left of the horse, query the image directly
    return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")"
2428964,Is the water gray or teal?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].simple_query(""Is the water gray or teal?"")"
19620769,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    if lamp_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?,"    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    # Question assumes only one brown animal patch
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    return brown_animal_patches[0].simple_query(""Is the brown animal looking tiny?"")"
5672532,Does that shirt look long sleeved?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    return shirt_patches[0].verify_property(""shirt"", ""long sleeved"")"
6146439,Does the box look green?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look green?"")
    return box_patches[0].verify_property(""box"", ""green"")"
1910285,Is the white container on the left of the image?,"    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    if len(white_container_patches) == 0:
        # If no white container is found, query the image directly
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    for white_container_patch in white_container_patches:
        if white_container_patch.horizontal_center < image_patch.width / 2:
            return ""yes""
    return ""no"""
13362134,Is that shower curtain to the left of a toilet?,"    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes one shower curtain patch and one toilet patch
    for shower_curtain_patch in shower_curtain_patches:
        for toilet_patch in toilet_patches:
            if shower_curtain_patch.horizontal_center < toilet_patch.horizontal_center:
                return ""yes""
    return ""no""
"
161060488,Is there any cabinet to the right of the stove?,"    image_patch = ImagePatch(image)
    cabinets = image_patch.find(""cabinet"")
    for cabinet in cabinets:
        if cabinet.horizontal_center > image_patch.horizontal_center:  # right
            return bool_to_yesno(image_patch.exists(""cabinet""))
    for cabinet in cabinets:
        if cabinet.horizontal_center < image_patch.horizontal_center:  # left
            if cabinet.horizontal_center < (image_patch.horizontal_center + 200):  # 200 is an arbitrary value
                return bool_to_yesno(image_patch.exists(""stove""))  # if cabinet is to the right of stove
    return bool_to_yesno(image_patch.exists(""stove cabinet""))"
111055042,Is the chair on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    if chair_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
151068,Which kind of clothing is white?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white clothing"")
    # Question assumes only one white clothing patch
    if len(white_patches) == 0:
        # If no white clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    for white_patch in white_patches:
        type_of_clothing = white_patch.simple_query(""Which kind of clothing is this?"")
    #    if type_of_clothing == ""shirt"":
    #        return ""shirt""
    #    elif type_of_clothing == ""dress"":
    #        return ""dress""
    #    elif type_of_clothing == ""hat"":
    #        return ""hat""
    #    elif type_of_clothing == ""shoes"":
    #        return ""shoes""
    #    elif type_of_clothing == ""socks"":
    #        return ""socks""
    #    elif type_of_clothing == ""shorts"":
    #        return ""shorts""
    #    elif type_of_clothing == ""pants"":
    #        return ""pants""
    #    elif type_of_clothing == ""skirt"":
    #        return ""skirt""
    #    elif type_of_clothing == ""jacket"":
    #        return ""jacket""
    #    elif type_of_clothing == ""dressy dress"":
    #        return ""dressy dress""
    #    else:
    #        return image_patch.simple_query(""Which kind of clothing is white?"")
    return type_of_clothing"
19387951,Is this place the forest or the garden?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"")"
1781695,What's on the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket query      #  1  #  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, 2  #  2
  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, #  3
  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, 2  #  4
  4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, #  5
  5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, #  6
  6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, #  7
  7 8 9 0"
17699779,Is she on a bed?,"    image_patch = ImagePatch(image)
    is_on_bed = image_patch.simple_query(""Is she on a bed?"")
    return is_on_bed"
464441,"What piece of furniture is the blanket on, a bed or a sofa?","    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket query      #  1  #  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, 2  #  2
  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, # 3
  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, 2  #  4
  4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, # 5
  5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, # 6
  6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, # 7
  7 8 9 0 1 2"
9505496,Are the wires above a man?,"    image_patch = ImagePatch(image)
    wire_patches = image_patch.find(""wire"")
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    for wire_patch in wire_patches:
        for man_patch in man_patches:
            if wire_patch.vertical_center > man_patch.horizontal_center:
                return ""no""
    return bool_to_yesno(wire_patches[0].verify_property(""man"", ""above"") and man_patches[0].verify_property(""man"", ""man"")"
4625512,What is the woman doing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the woman doing?"")"
9441941,Is the woman's hair red or black?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    return woman_patches[0].simple_query(""Is the woman's hair red or black?"")"
2387432,What's on the table?,"    image_patch = ImagePatch(image)
    object_patches = image_patch.find(""table"")
    # Question assumes one object (table) patch
    if len(object_patches) == 0:
        # If no object is found, query the image directly
        return image_patch.simple_query(""What's on the table?"")
    object_patch = object_patches[0]
    return object_patch.simple_query(""What's on the table?"")"
10534717,What is the pillow on?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""What is the pillow on?"")
    for pillow_patch in pillow_patches:
        on_what = pillow_patch.simple_query(""What is the pillow on?"")
        if on_what == ""car, truck, van, suv, lorry"":
            return ""vehicle""
        else:
            return on_what"
19335685,"What fruits is the container behind of, apples or bananas?","    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")
    for container_patch in container_patches:
        fruits_patches = image_patch.find(""apples"")
        for fruits_patch in fruits_patches:
            if container_patch.horizontal_center > fruits_patch.horizontal_center:
                return ""bananas""
        fruits_patches = image_patch.find(""apples"")
        for fruits_patch in fruits_patches:
            if container_patch.horizontal_center < fruits_patch.horizontal_center:
                return ""apples""
    return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")"
3127817,The goat is standing in what?,"    image_patch = ImagePatch(image)
    # contains a relation (standing in, on, of, etc), so ask directly
    return image_patch.simple_query(""What is the goat standing in?"")"
1588567,Where does the man that to the right of the mirror sit?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that to the right of the mirror"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    man_patch = man_patches[0]
    if man_patch.simple_query(""Is the man sitting?"") == ""yes"":
        return ""right, left -,, right""   # ,,,,,,  # ""left"" if ""left"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,,""  # ""right"" if ""right"" in ""right, left -,"
7399543,What is the floor made of?,"    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the floor made of?"")
    return floor_patches[0].simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is the house behind of?"")"
1174904,Is the cobblestone sidewalk both large and gray?,"    image_patch = ImagePatch(image)
    cobblestone_patches = image_patch.find(""cobblestone"")
    # Question assumes only one cobblestone patch
    if len(cobblestone_patches) == 0:
        # If no cobblestone is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    for cobblestone_patch in cobblestone_patches:
        is_large = cobblestone_patch.verify_property(""cobblestone"", ""large"")
        is_gray = cobblestone_patch.verify_property(""cobblestone"", ""gray"")
        if is_large and is_gray:
            return bool_to_yesno(is_large and is_gray)
    return bool_to_yesno(is_large and is_gray)"
13375231,What is the lettuce on?,"    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What is the lettuce on?"")
    return lettuce_patches[0].simple_query(""What is the lettuce on?"")"
1194027,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    # Question assumes only one black item
    if len(black_patches) == 0:
        # If no black is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    black_patch = black_patches[0]
    black_item_type = black_patch.simple_query(""Which kind of item is black?"")
    if black_item_type == ""person"":
        return black_patch.simple_query(""Which kind of clothing is black?"")
    else:
        return black_patch.simple_query(""Which kind of clothing is black?"")"
9963477,Is the statue wearing a dress?,"    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    return statue_patches[0].simple_query(""Is the statue wearing a dress?"")"
1151995,Which side of the photo is the yellow vase on?,"    image_patch = ImagePatch(image)
    vase_patches = image_patch.find(""yellow vase"")
    if len(vase_patches) == 0:
        # If no vase is found, query the image directly
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    if vase_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
712821,What is common to the bear and the belt?,"    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    belt_patches = image_patch.find(""belt"")
    # Question assumes one bear patch and one belt patch
    if len(bear_patches) == 0 or len(belt_patches) == 0:
        # If no bear or belt is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    bear_patch = bear_patches[0]
    belt_patch = belt_patches[0]
    common_property = bear_patch.simple_query(""What is common to the bear and the belt?"")
    if common_property == ""color"":
        if bear_patch.simple_query(""What is the color of the bear?"") == belt_patch.simple_query(""What is the color of the belt?""):
            return common_property
    if common_property == ""material"":
        if bear_patch.simple_query(""What is the material of the bear?"") == belt_patch.simple_query(""What is the material of the belt?""):
            return common_property
    return common_property"
1757418,What is the vehicle to the right of the car?,"    image_patch = ImagePatch(image)
    right_of_car_patches = image_patch.find(""car"")
    # Question assumes only one right of car patch
    if len(right_of_car_patches) < 2:
        # If no right of car is found, query the image directly
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    for right_of_car_patch in right_of_car_patches[1:]:  # start from the second one
        return right_of_car_patch.simple_query(""What is the vehicle to the right of the car?"")"
7624100,Are the trunks that are gray wet and large?,"    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    is_wet_and_large = ""yes""
    for trunk_patch in trunk_patches:
        is_wet = trunk_patch.verify_property(""trunk"", ""wet"")
        is_large = trunk_patch.verify_property(""trunk"", ""large"")
        if not is_wet or not is_large:
            is_wet_and_large = ""no""
            break
    return bool_to_yesno(is_wet_and_large)"
1125474,"On which side of the photo is the iron fence, the right or the left?","    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    if len(iron_fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    if iron_fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1300375,What is the name of the item of furniture that the printer is on?,"    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    # Question assumes only one printer patch
    if len(printer_patches) == 0:
        # If no printer is found, query the image directly
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    for printer_patch in printer_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center < printer_patch.horizontal_center:
                if furniture_patch.simple_query(""What is the name of the item of furniture that the printer is on?"") == ""table"":
                    return ""table""
    return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")"
5925196,What's the building covered by?,"    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""What's the building covered by?"")
    return image_patch.simple_query(""What's the building covered by?"")"
1948055,What watercraft is the white rope tying?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white rope"")
    # Question assumes only one white rope patch
    if len(white_patches) == 0:
        # If no white rope is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    white_patch = white_patches[0]
    watercraft_patches = image_patch.find(""watercraft"")
    for watercraft_patch in watercraft_patches:
        if white_patch.horizontal_center > watercraft_patch.horizontal_center:
            return watercraft_patch.simple_query(""What watercraft is the white rope tying?"")
    return watercraft_patches[0].simple_query(""What watercraft is the white rope tying?"")"
8540582,What kind of animal is in front of the leafy trees?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    leafy_trees_patches = image_patch.find(""leafy trees"")
    # Question assumes one animal and one leafy trees
    for animal_patch in animal_patches:
        for leafy_trees_patch in leafy_trees_patches:
            if animal_patch.horizontal_center < leafy_trees_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is in front of the leafy trees?"")
    # If no animal is found, query the image directly
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    bus_patches = image_patch.find(""bus"")
    # Question assumes one woman patch and one bus patch
    for woman_patch in woman_patches:
        for bus_patch in bus_patches:
            if woman_patch.horizontal_center > bus_patch.horizontal_center:
                return woman_patch.simple_query(""What does the walking woman by the bus wear?"")
            else:
                return woman_patch.simple_query(""What does the walking woman by the bus wear?"")"
1129508,Is the controller to the left of a pillow?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for pillow_patch in pillow_patches:
        controller_patches = image_patch.find(""controller"")
        for controller_patch in controller_patches:
            if controller_patch.horizontal_center < pillow_patch.horizontal_center:
                return ""yes""
    return ""no""
"
18664084,Is there any sheep by the fence?,"    image_patch = ImagePatch(image)
    is_sheep = image_patch.exists(""sheep by fence"") if image_patch.exists(""sheep by fence"") else image_patch.exists(""sheep"") and image_patch.exists(""fence"")
    return bool_to_yesno(is_sheep)"
6912079,What animal is this?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is this?"")"
3412029,Where is the person?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person?"")
    return image_patch.simple_query(""Where is the person?"")"
14161122,What animal is in the water?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is in the water?"")"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?,"    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    if len(baby_patches) < 2:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    for baby_patch in baby_patches:
        if baby_patch.horizontal_center < image_patch.width / 2:
            left_baby = baby_patch
            for item in baby_patches:
                if item.horizontal_center > image_patch.width / 2:
                    return item.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    return left_baby.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")"
15699496,What is the cup that looks clean made of?,"    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    return cup_patches[0].simple_query(""What is the cup that looks clean made of?"")"
12765451,What animals are to the right of the ladder?,"    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    right_ladder_patch = ladder_patches[0]
    animal_patches = image_patch.find(""rabbit"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > right_ladder_patch.horizontal_center:
            return animal_patch.simple_query(""What animals are to the right of the ladder?"")
    return image_patch.simple_query(""What animals are to the right of the ladder?"")"
191044307,What animal is black?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is black?"")"
12639181,Who is wearing shorts?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        who_wearing_shorts = person_patch.simple_query(""Who is wearing shorts?"")
    # if no person is wearing shorts, query the image directly
    # if one person is wearing shorts, return who
    return who_wearing_shorts"
10630949,Is the person that is not male wearing an elbow pad?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for person_patch in person_patches:
        is_female = person_patch.simple_query(""What is the person's gender?"") == ""female""
        is_wearing_elbow_pad = person_patch.verify_property(""person"", ""elbow pad"")
        if is_female:
            return bool_to_yesno(is_wearing_elbow_pad)
    return ""no"""
14544602,What is the boy holding?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    return boy_patches[0].simple_query(""What is the boy holding?"")"
2986699,Of what material the dish?,"    image_patch = ImagePatch(image)
    dish_patches = image_patch.find(""dish"")
    # Question assumes only one dish patch
    if len(dish_patches) == 0:
        # If no dish is found, query the image directly
        return image_patch.simple_query(""Of what material the dish?"")
    return dish_patches[0].simple_query(""Of what material is the dish?"")"
161013513,What kind of animal is on the street?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    return animal_patches[0].simple_query(""What kind of animal is on the street?"")"
15143936,What animal is before the roof?,"    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    # Question assumes one roof patch
    if len(roof_patches) == 0:
        # If no roof is found, query the image directly
        return image_patch.simple_query(""What animal is before the roof?"")
    roof_patch = roof_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < roof_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is before the roof?"") # crop would include the roof so keep it in the query
    # If no animal is before the roof, pick the first animal
    return animal_patches[0].simple_query(""What animal is before the roof?"")"
1955043,Who is playing with the ball?,"    # asks for the predicate of a relational verb (playing with), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing with the ball?"")"
91044150,What is the name of the animals in front of the trees beside the river?,"    image_patch = ImagePatch(image)
    animals_patches = image_patch.find(""rabbit"")
    # Question assumes only one animal patch
    if len(animals_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")
    return animals_patches[0].simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?,"    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is hanging?"")
    return fruit_patches[0].simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?,"    image_patch = ImagePatch(image)
    bush_patches = image_patch.find(""bush"")
    # Question assumes only one bush patch
    if len(bush_patches) == 0:
        # If no bush is found, query the image directly
        return image_patch.simple_query(""What is under the bush?"")
    bush_patch = bush_patches[0]
    under_bush_patches = bush_patch.find(""under bush"")
    # Question assumes only one under bush patch
    if len(under_bush_patches) == 0:
        # If no under bush is found, query the bush directly
        return bush_patch.simple_query(""What is under the bush?"")
    for under_bush_patch in under_bush_patches:
        return under_bush_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?,"    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)"
10457241,What is the color of the trousers?,"    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"")"
2913850,Is the placemat in the bottom or in the top part?,"    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket query      #  1  #  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, 2  #  2
  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, 3  #  3
  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, #  4
  4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9, #  5
  5 6 7 8 9 0 1 2 3 4 5, #  6
  6 7 8 9 0 1 2 3 4, #  7
  7 8 9 0 1 2 3, #  8
  8 9 0 1 2, #  9
  9 0 1 2, # 10
 0 1 2, # 11
 1 2, # 12
 2, # 13
 3, # 14
 4, 5, 6, 7, 8, 9, 0, # 15
  for  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0, 2  #  2
  2 3 4 5 6 7 8 9 0 1 2 3 4 5 6"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is wearing a sweater"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    man_patch = man_patches[0]
    furniture_patches = image_patch.find(""furniture that is to the right of the man that is wearing a sweater"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > man_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"") # crop would include the sweater so keep it in the query
    # If no furniture is to the right of the man, query the image directly
    return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?","    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""desk drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    if drawer_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?,"    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    is_tablecloth_or_napkin = image_patch.exists(""tablecloth napkin"") or is_napkin or is_tablecloth
    return bool_to_yesno(is_tablecloth_or_napkin)"
19737232,Is the book on the right of the picture?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book on the right of the picture?"")
    if book_patches[0].horizontal_center > (image_patch.width / 2):
        return ""yes""
    else:
        return ""no"""
475064,Who is wearing the glasses?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        who_wearing_glasses = person_patch.simple_query(""Who is wearing the glasses?"")
    #    if who_wearing_glasses == """": # crop would include the glasses so keep it in the query
    #        return image_patch.simple_query(""Who is wearing the glasses?"")
    return who_wearing_glasses"
8594579,Is there a woman to the right of the orange object that is to the right of the person?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) < 2:
        # If there is no person to the right of the other person, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < (image_patch.width / 2):
            left_person = person_patch
        else:
            right_person = person_patch
    if left_person.horizontal_center < (image_patch.width / 2):
        if right_person.horizontal_center > left_person.horizontal_center:
            if left_person.simple_query(""Is the orange object to the right of the person?"") == ""yes"":
                return bool_to_yesno(left_person.exists(""woman to the right of the orange object that is to the right of the person""))
    return bool_to_yesno(left_person.exists(""woman to the right of the orange object that is to the right of the person""))"
14602992,Which side of the image is the couch on?,"    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    if couch_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
9944587,How tall is the man that is wearing a shirt?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is wearing a shirt"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    return man_patches[0].simple_query(""How tall is the man that is wearing a shirt?"")"
13736712,Are there any giraffes?,"    image_patch = ImagePatch(image)
    is_giraffe = image_patch.exists(""giraffe"")
    return bool_to_yesno(is_giraffe)"
6996118,The young girl is wearing what?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the young girl wearing?"")
    return girl_patches[0].simple_query(""What is she wearing?"")"
19992576,Is the basket on the floor small and brown?,"    basket_patches = ImagePatch(image).find(""basket"")
    basket = basket_patches[0]
    is_on_floor = basket.vertical_center < ImagePatch(image).vertical_center
    is_small = basket.simple_query(""Is the basket small?"") == ""yes""
    is_brown = basket.simple_query(""What is the color of the basket?"") == ""brown""
    is_basket_on_floor_small_and_brown = is_on_floor and is_small and is_brown
    return bool_to_yesno(is_basket_on_floor_small_and_brown)"
17332401,What is the boy in front of?,"    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"")"
15586294,Which side is the leather armchair on?,"    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""leather armchair"")
    if len(armchair_patches) == 0:
        # If no armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    if armchair_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
15658324,What is the horse in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    # Question assumes one controller patch
    for controller_patch in controller_patches:
        if man_patch.simple_query(""Is the controller being held?"") == ""yes"":
            if controller_patch.simple_query(""What is the controller of?"") == ""man"":
                return man_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    # If no controller is being held, query the image directly
    return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")"
2531874,Who is playing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
3112009,Is the plate on the left side?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    if plate_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
1527613,On which side of the picture is the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?,"    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    roof_patches = image_patch.find(""roof"")
    # Question assumes one road patch and one roof patch
    if len(road_patches) != 1 or len(roof_patches) != 1:
        # If no single road or roof is found, query the image directly
        return image_patch.simple_query(""Are both the road and the roof the same color?"")
    return bool_to_yesno(road_patches[0].verify_property(""road"", roof_patches[0].simple_query(""What is the color?""))"
161027384,What is the green rug hanging on?,"    image_patch = ImagePatch(image)
    green_rug_patches = image_patch.find(""green rug"")
    # Question assumes only one green rug patch
    if len(green_rug_patches) == 0:
        # If no green rug is found, query the image directly
        return image_patch.simple_query(""What is the green rug hanging on?"")
    for green_rug_patch in green_rug_patches:
        what_it_hangs_on = green_rug_patch.simple_query(""What is the green rug hanging on?"")
        if what_it_hangs_on == ""tree"":
            return what_it_hangs_on
        else:
            return green_rug_patch.simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?,"    # asks for the predicate of a relational verb (using the laptop), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who in the photo is standing?"")
    for person_patch in person_patches:
        who_patches = image_patch.find(""who"")
        for who_patch in who_patches:
            if person_patch.simple_query(""Is the person standing?"") == ""yes"":
                return person_patch.simple_query(""Who in the photo is standing?"") # crop would include the person so keep it in the query
    # If no person is standing, pick the first person
    return person_patches[0].simple_query(""Who in the photo is standing?"")"
693318,Do you see any plates in the photo?,"    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_plate)"
19613394,The person on the skateboard is wearing what?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person on skateboard"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person on the skateboard wearing?"")
    return person_patches[0].simple_query(""What is the person on the skateboard wearing?"")"
19927237,Is the blue car in front of the white van?,"    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    white_van_patches = image_patch.find(""white van"")
    # Question assumes one blue car patch and one white van patch
    is_blue_car_in_front = ""no""
    for blue_car_patch in blue_car_patches:
        for white_van_patch in white_van_patches:
            if blue_car_patch.horizontal_center > white_van_patch.horizontal_center:
                is_blue_car_in_front = ""no""
            else:
                is_blue_car_in_front = ""yes""
                break
        if is_blue_car_in_front:
            break
    return is_blue_car_in_front"
31054022,What is the box sitting on?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What is the box sitting on?"")
    for box_patch in box_patches:
        sitting_on = box_patch.simple_query(""What is the box sitting on?"")
        return sitting_on # crop would include the surface so keep it in the query
    # If no box is sitting on, pick the first box
    return box_patches[0].simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?,"    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Does the ground look snowy and brown?"")
    ground_patch = ground_patches[0]
    is_ground_snowy_and_brown = ground_patch.verify_property(""ground"", ""snowy_and_brown"")
    return bool_to_yesno(is_ground_snowy_and_brown)"
15185768,Does the sky look blue and clear?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the sky look blue and clear?"")"
1589160,Does the person that is sitting lean against a fire hydrant?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person that is sitting"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    for person_patch in person_patches:
        is_sitting = person_patch.verify_property(""person"", ""sitting"")
        is_leaning_againsthydrant = person_patch.verify_property(""person"", ""leaning against hydrant"")
        if is_sitting and is_leaning_againsthydrant:
            return ""yes""
    return ""no"""
2142522,Are there any shopping carts or mannequins in this photo?,"    image_patch = ImagePatch(image)
    is_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    is_other = image_patch.exists(""mannequin with dress"") or image_patch.exists(""mannequin with shirt"")
    is_total = is_cart or is_mannequin or is_other
    return bool_to_yesno(is_total)"
17362234,Are there cages or scrub brushes in this picture?,"    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    is_cages_or_scrub_brushes = image_patch.exists(""cage brush"") or is_scrub_brush
    return bool_to_yesno(is_cage or is_cages_or_scrub_brushes)"
4955854,Is the lamp below the chain?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    chain_patches = image_patch.find(""chain"")
    lamp_and_chain_patches = [(lamp, chain) for lamp in lamp_patches for chain in chain_patches]
    for lamp, chain in lamp_and_chain_patches:
        if lamp.vertical_center < chain.vertical_center:
            return ""no""
    return bool_to_yesno(any([lamp in lamp_and_chain_patches for lamp in lamp_patches]))"
10463545,Is the computer to the right of the other computer silver or black?,"    image_patch = ImagePatch(image)
    other_computers = image_patch.find(""computer"")
    # Question assumes only two computer patches
    if len(other_computers) < 2:
        # If no other computer is found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    right_computer = other_computers[1]
    other_computer = other_computers[0]
    if right_computer.horizontal_center > other_computer.horizontal_center:
        return right_computer.simple_query(""Is the computer to the right of the other computer silver or black?"")
    else:
        return right_computer.simple_query(""Is the computer to the right of the other computer silver or black?"")"
2265037,What is the girl wearing?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?,"    image_patch = ImagePatch(image)
    is_blue_number_or_letter = False
    for pixel in image_patch.cropped_image.reshape(-1, 3):
        if pixel[0] == 0:  # blue
            if pixel[1] > 128:  # yellow or red
                return bool_to_yesno(is_blue_number_or_letter)
            if pixel[1] < 128:  # green or blue
                if pixel[2] > 128:  # red
                    return bool_to_yesno(is_blue_number_or_letter)
    # Check for numbers
    for pixel in image_patch.cropped_image.reshape(-1, 3):
        if pixel[0] > 128:  # red, yellow, or orange
            if pixel[1] < 128:  # green or blue
                if pixel[2] < 128:  # blue
                    return bool_to_yesno(is_blue_number_or_letter)
    # Check for letters
    for pixel in image_patch.cropped_image.reshape(-1, 3):
        if pixel[0] < 128:  # blue, green, or yellow
            if pixel[1] > 128:  # red, orange, or yellow
                if pixel[2] < 128:  # blue
                    return bool_to_yesno(is_blue_number_or_letter)
    return bool_to_yesno(is_blue_number_or_letter)"
3483992,Is the long bus to the left or to the right of the person with the backpack?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person with backpack"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    person_patch = person_patches[0]
    long_bus_patches = image_patch.find(""long bus"")
    for long_bus_patch in long_bus_patches:
        if long_bus_patch.horizontal_center < person_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
"
13598461,What is the device that is not on called?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    for device_patch in device_patches:
        not_on_patches = image_patch.find(""not on"")
        for not_on_patch in not_on_patches:
            if device_patch.simple_query(""Is the device on top of?"") == not_on_patch.simple_query(""What is it on top of?""):
                return device_patch.simple_query(""What is the device that is not on called?"")
    return device_patches[0].simple_query(""What is the device that is not on called?"")"
13885436,The sky has what color?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
7432467,Is the black container to the left of the man that is on the motorcycle?,"    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    man_on_motorcycle_patches = image_patch.find(""man on motorcycle"")
    # Question assumes one black container and one man on motorcycle
    is_container_to_left = False
    for black_container_patch in black_container_patches:
        for man_on_motorcycle_patch in man_on_motorcycle_patches:
            if black_container_patch.horizontal_center < man_on_motorcycle_patch.horizontal_center:
                is_container_to_left = True
    if is_container_to_left:
        return ""yes""
    else:
        return ""no""
"
19540096,Is the fire in an oven?,"    image_patch = ImagePatch(image)
    is_fire_in_ov = image_patch.simple_query(""Is the fire in an oven?"")
    return is_fire_in_ov"
18291107,The horse is where?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""The horse is where?"")
    if horse_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""
    else:
        return image_patch.simple_query(""The horse is where?"")"
5435474,Is the man that is to the left of the motorbike wearing a hat?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    man_patch = man_patches[0]
    is_wearing_hat = man_patch.verify_property(""man"", ""hat"")
    return bool_to_yesno(is_wearing_hat)"
226307,Are there any tables in the photo?,"    image_patch = ImagePatch(image)
    is_table = image_patch.exists(""table"")
    return bool_to_yesno(is_table)"
1944826,Who is reflected in the mirror?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Who is reflected in the mirror?"")"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?,"    image_patch = ImagePatch(image)
    # contains a relation (on top of, to the right of, etc), so ask directly
    return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman?"")"
18435846,What is the color of the balloon that is to the right of the backpack?,"    image_patch = ImagePatch(image)
    backpack_patches = image_patch.find(""backpack"")
    if len(backpack_patches) < 1:
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    balloon_patches = image_patch.find(""balloon"")
    for backpack_patch in backpack_patches:
        for balloon_patch in balloon_patches:
            if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
                return balloon_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    return backpack_patches[0].simple_query(""What is the color of the balloon that is to the right of the backpack?"")"
8390894,Is the woman to the right of the man sitting on a sofa?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    # Question assumes one woman and one man
    for woman_patch in woman_patches:
        for man_patch in man_patches:
            if woman_patch.horizontal_center > man_patch.horizontal_center:
                return ""no""
            else:
                if woman_patch.simple_query(""Is she sitting?"") == ""yes"":
                    return woman_patch.simple_query(""Is she sitting on a sofa?"") # crop would include the sofa so keep it in the query
    return bool(w query           #  #,   #  0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
18896007,Which side of the image is the pot on?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    if pot_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19323898,Is that pillow on a couch?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is that pillow on a couch?"")
    if pillow_patches[0].verify_property(""pillow"", ""couch""):
        return ""yes""
    else:
        return pillow_patches[0].simple_query(""Is that pillow on a couch?"")"
1281034,Where are the trees?,"    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Where are the trees?"")
    if tree_patches[0].vertical_center < image_patch.horizontal_center:
        return image_patch.simple_query(""Where are the trees?"")  # ""bottom, left, right""  # ""bottom""
        # ""bottom""
    else:
        return image_patch.simple_query(""Where are the trees?"") # ""right"" # ""top"" # ""bottom, left, right"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"" # ""top"" # ""bottom"
13515147,What is on the cow?,"    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""What is on the cow?"")
    return cow_patches[0].simple_query(""What is on the cow?"")"
91036716,What is the skater doing?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes one person patch and one boy patch
    for person_patch in person_patches:
        for boy_patch in boy_patches:
            if person_patch.horizontal_center < boy_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the left of the boy carrying?"")
    # If no person is found to the left of the boy, query the image directly
    return image_patch.simple_query(""What is the person to the left of the boy carrying?"")"
13152020,Is the ground wet or dry?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ground wet or dry?"")"
19312096,"On which side is the purse, the left or the right?","    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    if purse_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?,"    image_patch = ImagePatch(image)
    is_bread = image_patch.exists(""bread"")
    return bool_to_yesno(is_bread)"
9113663,Do you see either any snow or sand that are white?,"    image_patch = ImagePatch(image)
    is_snow_or_sand = False
    snow_or_sand_patches = image_patch.find(""snow"") + image_patch.find(""sand"")
    for snow_or_sand_patch in snow_or_sand_patches:
        is_white = snow_or_sand_patch.verify_property(""ground"", ""white"")
        if is_white:
            is_snow_or_sand = True
            break
    if is_snow_or_sand:
        return bool_to_yesno(is_snow_or_sand)
    else:
        return bool_to_yesno(any(snow_or_sand_patch.verify_property(""ground"", ""white"") for snow_or_sand_patch in snow_or_sand_patches))"
10243612,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What vegetable is to the left of the napkin?"")
    left_napkin = napkin_patches[0]
    for vegetable in image_patch.find(""vegetable""):
        if vegetable.horizontal_center < left_napkin.horizontal_center:
            return vegetable.simple_query(""What vegetable is to the left of the napkin?"") # crop would include the napkin so keep it in the query
    # If no vegetable is to the left of the napkin, query the image directly
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"")"
15599523,Is the dog on the right side?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    if dog_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
101019673,What is the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    return man_patches[0].simple_query(""What is the man wearing?"")"
333047,Do you see any men to the right of the orange tent?,"    image_patch = ImagePatch(image)
    orange_patches = image_patch.find(""orange"")
    if len(orange_patches) < 1:
        # If no orange is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    orange_patch = orange_patches[0]
    right_patches = image_patch.find(""men"")
    for right_patch in right_patches:
        if right_patch.horizontal_center > orange_patch.horizontal_center:
            return bool_to_yesno(right_patch.exists(""men""))
    return ""no"""
13907796,Is the shirt striped and green?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""striped green"") and shirt_patches[0].verify_property(""shirt"", ""green stripes"") and shirt_patches[0].verify_property(""shirt"", ""stripes green""))"
17207604,Are there either bottles or shelves?,"    image_patch = ImagePatch(image)
    is_bottle_or_shelf = False
    bottle_or_shelf_patches = image_patch.find(""bottle"") + image_patch.find(""shelf"")
    if len(bottle_or_shelf_patches) > 0:
        is_bottle_or_shelf = True
    return bool_to_yesno(is_bottle_or_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?,"    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    for train_patch in train_patches:
        if train_patch.horizontal_center < image_patch.width / 2:
            return train_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    # If no train is on the left, query the image directly
    return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")"
7165131,Is that train engine small or large?,"    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    return train_patches[0].simple_query(""Is that train engine small or large?"")"
21049362,Where are the railroad tracks?,"    image_patch = ImagePatch(image)
    railroad_patches = image_patch.find(""railroad tracks"")
    if len(railroad_patches) == 0:
        # If no railroad tracks are found, query the image directly
        return image_patch.simple_query(""Where are the railroad tracks?"")
    if railroad_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""
    else:
        return image_patch.simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?,"    # asks for the predicate of a relational verb (looking at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What are the children playing?"")"
598297,Are there combs or figurines in the picture?,"    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    is_combs_or_figurines = image_patch.exists(""comb"") or image_patch.exists(""wooden comb"") or image_patch.exists(""porcelain comb"") or image_patch.exists(""wooden figurine"") or image_patch.exists(""porcelain figurine"")
    return bool_to_yesno(is_combs_or_figurines)"
16409127,What is the wire on?,"    image_patch = ImagePatch(image)
    wire_patches = image_patch.find(""wire"")
    # Question assumes only one wire patch
    if len(wire_patches) == 0:
        # If no wire is found, query the image directly
        return image_patch.simple_query(""What is the wire on?"")
    return wire_patches[0].simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?,"    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    # Question assumes only one tunnel patch
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    return tunnel_patches[0].simple_query(""Is the tunnel small or large?"")"
17560468,Do you see trains or windows?,"    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    result = bool_to_yesno(is_train or is_window)
    return str(result).lower() if result == bool_to_yesno(True) for  # for  # for  in [0,1] if # # for  # for  # for  in [0,1] if result == bool_to_yesno(True) in [0,1]: # for  # for  # for  # for  # for  in [0,1] if result == bool_to_yesno(True) for  # for  # for  # for  # for  # for  in [0,1] if result == bool_to_yesno(True) in [0,1]: # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for  # for"
9321809,What is the person near the man wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    man_patches = image_patch.find(""man"")
    # Question assumes one person patch and one man patch
    for person_patch in person_patches:
        what_patches = image_patch.find(""what"")
        for what_patch in what_patches:
            if person_patch.horizontal_center > man_patches[0].horizontal_center:
                return person_patch.simple_query(""What is the person near the man wearing?"")
            else:
                return person_patch.simple_query(""What is the person near the man wearing?"")
"
12352375,Is the vehicle that is sitting down black or blue?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    return vehicle_patches[0].simple_query(""Is the vehicle black or blue?"")"
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white thing near the shower curtain"")
    if len(white_patches) == 0:
        # If no white thing is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    white_patch = white_patches[0]
    metal_patches = image_patch.find(""metal trash can"")
    for metal_patch in metal_patches:
        if metal_patch.horizontal_center < white_patch.horizontal_center:
            return ""left""
    return ""right""
"
5800248,Is it outdoors?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
4604785,Does the pizza slice to the left of the pizza have large size?,"    image_patch = ImagePatch(image)
    pizza_slices = image_patch.find(""pizza slice"")
    # Question assumes only two pizza slices
    if len(pizza_slices) < 2:
        # If no pizza slice is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    left_pizza_slice = pizza_slices[0]
    right_pizza_slice = pizza_slices[1]
    is_large = left_pizza_slice.verify_property(""pizza slice"", ""large"")
    return bool_to_yesno(is_large)"
15185845,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
2282232,Where is the snow?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"")"
7889197,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?,"    image_patch = ImagePatch(image)
    is_blanket_or_picture = image_patch.exists(""blanket"") or image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket_or_picture)"
154682,Where does the bird stand on?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Where does the bird stand on?"")
    if bird_patches[0].vertical_center < image_patch.vertical_center:
        return image_patch.simple_query(""Where does the bird stand on?"")  # ""bottom"" or ""left""
        # ""bottom"" or ""left"" if vertical center < image center
    else:
        return image_patch.simple_query(""Where does the bird stand on?"")  # ""right"" or ""top"" # ""right"" or ""top"" if vertical center > image center"
10435315,Is the man holding a racket?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    is_holding_racket = man_patch.verify_property(""man"", ""racket"")
    return bool_to_yesno(is_holding_racket)"
121035887,Do the man shorts have white color?,"    image_patch = ImagePatch(image)
    man_shorts_patches = image_patch.find(""man shorts"")
    # Question assumes only one man shorts patch
    if len(man_shorts_patches) == 0:
        # If no man shorts are found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_shorts_patch = man_shorts_patches[0]
    has_white_color = man_shorts_patch.verify_property(""man shorts"", ""white"")
    return bool_to_yesno(has_white_color)"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    cow_patches = image_patch.find(""cow"")
    # Question assumes one man patch and one cow patch
    if len(man_patches) < 2 or len(cow_patches) < 2:
        # If no man or cow is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    for man_patch in man_patches:
        for cow_patch in cow_patches:
            if man_patch.horizontal_center < cow_patch.horizontal_center:
                return man_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    return ""car"""
19659501,What is the color of the umbrella the bird is on?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    bird_patch = bird_patches[0]
    umbrella_patches = bird_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    for umbrella_patch in umbrella_patches:
        return umbrella_patch.simple_query(""What is the color of the umbrella the bird is on?"")"
10595217,Where is the grass?,"    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    if grass_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""  # bottom, right for y, left for x
        # or ""bottom"" for short
    else:
        return image_patch.simple_query(""Where is the grass?"") # crop would include the grass so keep it in the query"
14803743,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    # Question assumes only one black item
    if len(black_patches) == 0:
        # If no black is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    black_patch = black_patches[0]
    black_item_type = black_patch.simple_query(""Which kind of item is black?"")
    if black_item_type == ""person"":
        return black_patch.simple_query(""Which kind of clothing is black?"")
    else:
        return black_patch.simple_query(""Which kind of clothing is black?"")"
19743238,Is the man on the right side?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    if man_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
3965204,Are the mountains covered with snow?,"    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    return mountain_patches[0].verify_property(""mountain"", ""snow-covered"")"
141024710,Are there both windows and cars in the picture?,"    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    result = bool_to_yesno(is_window and is_car)
    return result"
6481635,What color do you think the shirt is?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    return shirt_patches[0].simple_query(""What color is the shirt?"")"
3623367,What's he doing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's he doing?"")"
15634950,Where is the giraffe in front of the hay eating from?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    for giraffe_patch in giraffe_patches:
        eating_patches = image_patch.find(""eating"")
        for eating_patch in eating_patches:
            if giraffe_patch.horizontal_center > eating_patch.horizontal_center:
                return ""right""
            else:
                return giraffe_patch.simple_query(""Where is the giraffe in front of the hay eating from?"") # crop would include the eating so keep it in the query"
16644500,What animal is the log pulled by?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is the log pulled by?"")"
3202108,Which side is the car on?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    if car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10137201,Are the papers in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    for paper_patch in paper_patches:
        if paper_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person that is on the left"")
    if len(person_patches) < 2:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    boy_patches = image_patch.find(""boy that is on the right of the person that is on the left"")
    for boy_patch in boy_patches:
        if boy_patch.horizontal_center > person_patches[0].horizontal_center:
            return ""right""
    for person_patch in person_patches:
        if person_patch.horizontal_center < image_patch.width / 2:
            return ""left""
    return ""left""
"
8438091,The picture is what color?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the picture?"")"
4325939,On which side of the photo is the banana?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana query
1425189,What is the name of the brown piece of furniture?,"    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown piece of furniture"")
    # Question assumes only one brown piece of furniture
    if len(brown_patches) == 0:
        # If no brown piece of furniture is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return brown_patches[0].simple_query(""What is the name of the brown piece of furniture?"")"
5119962,Is the man to the right of glasses?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    glasses_patches = image_patch.find(""glasses"")
    is_to_right = False
    for man_patch in man_patches:
        for glasses_patch in glasses_patches:
            if man_patch.horizontal_center > glasses_patch.horizontal_center:
                is_to_right = False
                return ""no""
            else:
                is_to_right = True
                return ""yes""
    return is_to_right"
16523418,Is the toilet lid down or up?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    if toilet_patches[0].simple_query(""Is the toilet lid up?"") == ""yes"":
        return ""up""
    else:
        return ""down"""
6522554,Which kind of device does the man hold?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""man-held device"")
    # Question assumes only one man-patch
    if len(device_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    return device_patches[0].simple_query(""Which kind of device does the man hold?"")"
870619,What is the device to the left of the person that is to the left of the television?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    person = person_patches[0]
    # crop would include the device so keep it in the query
    device_patches = image_patch.find(""laptop"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < person.horizontal_center:
            return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    # If no laptop is found, query the image directly
    return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")"
12713794,Does the woman to the left of the man wear a necklace?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    # Question assumes one woman and one man
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < (image_patch.horizontal_center + (man_patches[0].horizontal_center - image_patch.horizontal_center) / 2):
            return woman_patch.verify_property(""woman"", ""necklace"")
    return bool_to_yesno(woman_patches[0].verify_property(""woman"", ""necklace"") and woman_patches[0].horizontal_center < (image_patch.horizontal_center + (man_patches[0].horizontal_center - image_patch.horizontal_center) / 2))"
824070,What is the man doing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man doing?"")"
11593733,Which kind of furniture is right to the pillow?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is right to the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is right to the pillow, pick the first one
    return pillow_patches[0].simple_query(""Which kind of furniture is right to the pillow?"")"
3357821,Does the dog to the left of the other dog look small or large?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If no other dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog = dog_patches[0]
    right_dog = dog_patches[1]
    if left_dog.horizontal_center < right_dog.horizontal_center:
        if left_dog.simple_query(""What is the size of the dog?"") == ""small"":
            return ""small""
        else:
            return ""large""
    else:
        if right_dog.simple_query(""What is the size of the dog?"") == ""small"":
            return ""small""
        else:
            return ""large""
"
338026,Are the white candles short or tall?,"    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    if candle_patches[0].vertical_center < image_patch.vertical_center:
        return ""short""
    else:
        return image_patch.simple_query(""Are the white candles short or tall?"")"
15346232,What kind of fruit is the girl holding?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    return girl_patches[0].simple_query(""What kind of fruit is the girl holding?"")"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?","    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    if yellow_vehicle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
81030271,Is the gray car to the right or to the left of the cart?,"    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    cart_patches = image_patch.find(""cart"")
    for gray_car_patch in gray_car_patches:
        for cart_patch in cart_patches:
            if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
"
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?,"    image_patch = ImagePatch(image)
    canister_patches = image_patch.find(""canister made of chrome"")
    if len(canister_patches) == 0:
        # If no canister is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    canister = canister_patches[0]
    utensil_patches = image_patch.find(""cooking utensil"")
    for utensil in utensil_patches:
        if utensil.horizontal_center > canister.horizontal_center:
            return utensil.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"") # crop would include the utensil so keep it in the query
    # If no utensil is found to the right of the canister, query the image directly
    return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")"
8240699,What animal is in front of the bird?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the bird?"")
    bird_patch = bird_patches[0]
    animal_patches = image_patch.find(""rabbit"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > bird_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in front of the bird?"") # crop would include the animal so keep it in the query
    # If no rabbit is found, query the image directly
    return image_patch.simple_query(""What animal is in front of the bird?"")"
10105081,Is the fence white or green?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].simple_query(""Is the fence white or green?"")"
13613689,Is there a train or a fence in the picture?,"    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    result = bool_to_yesno(is_train or is_fence)
    return str(result).lower() if result == bool_to_yesno(True) for  # for  # for  in [0,1] if # # for x in [0,1] if result == bool_to_yesno(True) else ""no"" if result == bool_to_yesno(False) else ""yes"" if result == bool_to_yesno(True) else ""no"" # # if result == bool_to_yesno(True) for x in [0,1] # # if result == bool_to_yesno(False) else ""yes"" if result == bool_to_yesno(True) else ""no"" # # if result == bool_to_yesno(True) for x in [0,1] # # if result == bool_to_yesno(False) else ""yes"" if result == bool_to_yesno(True) else ""no"" # # if result == bool_to_yesno(True) for x in [0,1] # # if result == bool_to_yesno(False) else ""yes"" if result == bool_to_yesno(True) else ""no"" # # if result == bool_to_yesno(True) for x in [0,1] # # if result == bool_to_yesno(False) else ""yes"" if result == bool_to_yesno(True) else ""no"" # # if result == bool_to_yesno(True) for x in [0,1] # # if result == bool_to_yesno(False) else ""yes"" if result == bool_to_yesno(True) else ""no"" # # if result == bool_to_yesno(True) for x in [0,1] # # if result == bool_to_yesno(False) else ""yes"" if result == bool_to_yesno(True) else ""no"" # # if result == bool_to_yesno(True) for x in [0,1] # # if result == bool_to_yesno(False) else ""yes"" if result == bool_to_yesno(True) else ""no"" # # if result == bool_to_yesno(True) for x in [0,1] # # if result == bool_to_yesno(False) else ""yes"" if result == bool_to_yesno(True) else ""no"" # # if result == bool_to_yesno(True) for x in"
10662521,What is the bottle made of?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?,"    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    return fruit_patches[0].simple_query(""Which kind of fruit is on the plate?"")"
16701575,What device is to the right of the cake?,"    image_patch = ImagePatch(image)
    cake_patches = image_patch.find(""cake"")
    # Question assumes only one cake patch
    if len(cake_patches) == 0:
        # If no cake is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > cake_patches[0].horizontal_center:
            return device_patch.simple_query(""What device is to the right of the cake?"") # crop would include the device so keep it in the query
    # If no device is to the right of the cake, pick the first device
    return device_patches[0].simple_query(""What device is to the right of the cake?"")"
6572516,What material is the ceiling?,"    image_patch = ImagePatch(image)
    ceiling_patches = image_patch.find(""ceiling"")
    # Question assumes only one ceiling patch
    if len(ceiling_patches) == 0:
        # If no ceiling is found, query the image directly
        return image_patch.simple_query(""What material is the ceiling?"")
    return ceiling_patches[0].simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?,"    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    is_both = bool_to_yesno(is_magazine and is_umbrella)
    return bool_to_yesno(is_both)"
8606777,What is the color of the egg in the middle of the picture?,"    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    if egg_patches[0].vertical_center > image_patch.width / 2:
        return egg_patches[0].simple_query(""What is the color of the egg in the middle of the picture?"")
    else:
        return egg_patches[0].simple_query(""What is the color of the egg in the middle of the picture?"")"
14371534,Are the gold pans on the right part or on the left?,"    image_patch = ImagePatch(image)
    gold_pan_patches = image_patch.find(""gold pan"")
    if len(gold_pan_patches) == 0:
        # If no gold pan is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    if gold_pan_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16538076,What does the man that is not tall wear?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is not tall"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    man_patch = man_patches[0]
    what_to Wear     #  5   #  6   #  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  #  39
   # 40
    # 41
    # 42
    # 43
    # 44
    # 45
    # 46
    # 47
    # 48
    # 49
    # 50
    # 51
    # 52
    # 53
    # 54
    # 55
    # 56
    # 57
    # 58
    # 59
    # 60
    # 61
    # 62
    # 63
    # 64
    # 65
    # 66
    # 67
    # 68
    # 69
    # 70
    # 71
    # 72
    # 73
    # 74
    # 75
    # 76
    # 77
    # 78
    # 79
    # 80
    # 81
    # 82
    # 83
    # 84
    # 85
    # 86
    # 87
    # 88
    # 89
    # 90
    # 91
    # 92
    # 93
    # 94
    # 95
    # 96
    # 97
    # 98
    # 99
    # 100
    #"
5483644,"On which side is the woman, the left or the right?","    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    if woman_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal in this photograph?"")
    return animal_patches[0].simple_query(""What is the animal in this photograph?"")"
1290926,Are there either any life vests or flags?,"    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    is_or = bool_to_yesno(is_life_vest or is_flag)
    return bool_to_yesno(is_or)"
18273738,Do you see a cup?,"    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    return bool_to_yesno(is_cup)"
4211922,Who is sitting on the table?,"    # asks for the predicate of a relational verb (sitting on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?,"    image_patch = ImagePatch(image)
    left_girl_patches = image_patch.find(""left girl"")
    right_girl_patches = image_patch.find(""right girl"")
    # Question assumes only one left girl and one right girl
    if len(left_girl_patches) != 1 or len(right_girl_patches) != 1:
        # If no left girl or right girl is found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    left_girl = left_girl_patches[0]
    right_girl = right_girl_patches[0]
    if left_girl.horizontal_center < right_girl.horizontal_center:
        return left_girl.simple_query(""What is the color of the girl to the left of the other girl?"")
    else:
        return right_girl.simple_query(""What is the color of the girl to the left of the other girl?"")"
6599090,What is the person to the right of the car holding?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    right_patches = image_patch.find(""right"")
    for person_patch in person_patches:
        for right_patch in right_patches:
            if person_patch.horizontal_center > right_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the car holding?"")
    # If no person is found to the right of the right, query the image directly
    return image_patch.simple_query(""What is the person to the right of the car holding?"")"
1174895,What is the vehicle in the parking lot?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    return vehicle_patches[0].simple_query(""What is the vehicle in the parking lot?"")"
14755158,Who is the woman in front of?,"    # asks for the predicate of a relational verb (front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the woman in front of?"")"
18349161,Where does the cow that is standing stand?,"    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    if cow_patches[0].vertical_center < image_patch.vertical_center:
        return image_patch.simple_query(""Where does the cow that is standing stand?"")  # ""left"" or ""bottom""
    else:
        return image_patch.simple_query(""Where does the cow that is standing stand?"")  # ""right"" or ""top"""
7472884,On which side is the tap?,"    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
111051831,On which side of the image is the cabinet?,"    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    if cabinet_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    bag_patch = bag_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > bag_patch.horizontal_center:
            return bool_to_yesno(image_patch.exists(""man""))
    return bool_to_yesno(image_patch.exists(""man""))"
577862,Are the artwork and the computer desk made of the same material?,"    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Is the computer desk made of the same material as the artwork and the computer?"")
    artwork_patch = artwork_patches[0]
    computer_patches = image_patch.find(""computer desk"")
    if len(computer_patches) == 0:
        # If no computer desk is found, query the image directly
        return image_patch.simple_query(""Is the computer desk made of the same material as the artwork and the computer?"")
    for computer_patch in computer_patches:
        is_same_material = artwork_patch.verify_property(""artwork"", computer_patch.simple_query(""What is the computer desk made of?""))
        return bool_to_yesno(is_same_material)"
14298125,Who is playing Wii?,"    # asks for the predicate of a relational verb (playing Wii), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")"
9382689,What's the floor made of?,"    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What's the floor made of?"")
    return floor_patches[0].simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the dress?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing the dress?"")
    # if no person is wearing the dress, query the image directly
    return who_is_wearing"
15127108,Does the tea pot above the receipt look short and white?,"    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    if len(tea_pot_patches) == 0:
        # If no tea pot is found, query the image directly
        return image_patch.simple_query(""Is the tea pot above the receipt look short and white?"")
    for tea_pot_patch in tea_pot_patches:
        is_short_and_white = (tea_pot_patch.simple_query(""Is the tea pot short?"") == ""yes"" and
                              tea_pot_patch.simple_query(""What is the tea pot made of?"") == ""white"" and
                              tea_pot_patch.simple_query(""Is the tea pot above the receipt?"") == ""yes"")
        return bool_to_yesno(is_short_and_white)"
15632653,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    # Question assumes only one black item
    if len(black_patches) == 0:
        # If no black is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    black_patch = black_patches[0]
    black_item_type = black_patch.simple_query(""Which kind of item is black?"")
    if black_item_type == ""person"":
        return black_patch.simple_query(""Which kind of clothing is black?"")
    else:
        return black_patch.simple_query(""Which kind of clothing is black?"")"
490992,Is the fence on the left side or on the right of the picture?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?,"    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Do the mountains look rocky?"")
    return mountain_patches[0].verify_property(""mountain"", ""rocky"")"
17573742,Is the woman to the right of the camera wearing a coat?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    camera_patches = image_patch.find(""camera"")
    # Question assumes one woman patch and one camera patch
    for woman_patch in woman_patches:
        for camera_patch in camera_patches:
            if woman_patch.horizontal_center > camera_patch.horizontal_center:
                return bool(w     '  ,  0  1 2 3 4 5 6 7 8 9  ,  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #"
3395780,Is the vehicle to the left of the parking meter covered in rain?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        is_covered_in_rain = vehicle_patch.verify_property(""vehicle"", ""rain"")
        if is_covered_in_rain:
            return bool_to_yesno(is_covered_in_rain) # crop would include the rain so keep it in the query
    # If no vehicle is covered in rain, check if the vehicle to the left of the parking meter is covered in rain
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < (image_patch.width / 2):
            return bool_to_yesno(vehicle_patch.verify_property(""vehicle"", ""rain"")
    # If no vehicle is covered in rain, query the image directly
    return bool_to_yesno(image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"") == ""yes"")"
1542668,Is there a black laptop or desk?,    is_black_laptop_or Desk      #  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  # for
1655442,What type of food is to the right of the waffles that are to the right of the person?,"    image_patch = ImagePatch(image)
    waffles_patches = image_patch.find(""waffles"")
    # Question assumes only one set of waffles
    for waffles_patch in waffles_patches:
        if waffles_patch.horizontal_center < image_patch.horizontal_center:
            # waffles to the left of the person
            return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    waffles_patches = image_patch.find(""waffles to the right of the person"")
    # Question assumes only one set of waffles to the right of the person
    for waffles_patch in waffles_patches:
        if waffles_patch.horizontal_center > image_patch.horizontal_center:
            # waffles to the right of the person
            return waffles_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    # If no waffles to the right of the person, query the image directly
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")"
395290,How large is the bag?,"    bag_patches = ImagePatch(image).find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    bag_patch = bag_patches[0]
    bag_size = bag_patch.simple_query(""How large is the bag?"")
    return bag_size"
16138893,Are there both motorcycles and cars in this scene?,"    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        who_wearing_shorts = person_patch.simple_query(""Who is wearing shorts?"")
    # if no person is wearing shorts, query the image directly
    # if one person is wearing shorts, return who
    return who_wearing_shorts"
171032184,What hangs from the windows?,"    image_patch = ImagePatch(image)
    objects_hanging = image_patch.find(""hanging"")
    # Question assumes only one object hanging
    if len(objects_hanging) == 0:
        # If no object is hanging, query the image directly
        return image_patch.simple_query(""What hangs from the windows?"")
    for object_hanging in objects_hanging:
        what_hangs = object_hanging.simple_query(""What hangs from the windows?"")
        if what_hangs != ""up"":
            return what_hangs
    return object_hanging.simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?,"    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    is_both = is_spoon and is_plate
    return bool_to_yesno(is_both)"
16184773,What is in front of the giraffe that the tree is behind of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")"
8197176,What color is the jacket that the man wears?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = man_patch.find(""jacket"")
    # Question assumes one jacket patch
    if len(jacket_patches) == 0:
        return man_patch.simple_query(""What color is the jacket that the man wears?"")
    return jacket_patches[0].simple_query(""What color is the jacket that the man wears?"")"
3440931,What are that pieces of furniture called?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What are that pieces of furniture called?"")
    return furniture_patches[0].simple_query(""What are that pieces of furniture called?"")"
337924,What is the fruit that is to the left of the chair?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")
    for chair_patch in chair_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if fruit_patch.horizontal_center < chair_patch.horizontal_center:
                return fruit_patch.simple_query(""What is the fruit that is to the left of the chair?"") # crop would include the fruit so keep it in the query
    # If no fruit is found to the left of the chair, pick the first fruit
    return fruit_patches[0].simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?,"    image_patch = ImagePatch(image)
    bowls_patches = image_patch.find(""bowls"")
    # Question assumes only one bowls patch
    if len(bowls_patches) == 0:
        # If no bowls are found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    for bowls_patch in bowls_patches:
        what_bowls_on = bowls_patch.simple_query(""What are the bowls on?"")
        if what_bowls_on != ""off"":
            return what_bowls_on
        else:
            return bowls_patch.simple_query(""What are the bowls on?"")"
18330260,Is the sky above the trees open and clear?,"    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky above the trees open and clear?"")
    if sky_patches[0].verify_property(""weather"", ""open and clear""):
        return bool(squery for
14119691,Does the squirrel to the right of the stuffed dog look white?,"    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    dog_patches = image_patch.find(""stuffed dog"")
    # Question assumes one squirrel and one dog
    is_white = False
    for squirrel_patch in squirrel_patches:
        for dog_patch in dog_patches:
            if squirrel_patch.horizontal_center > dog_patch.horizontal_center:
                return bool_to_yesno(squirrel_patch.verify_property(""squirrel"", ""white"")
            else:
                is_white = squirrel_patch.verify_property(""squirrel"", ""white"")
    return is_white"
18437694,Does the clock to the right of the statue have gold color and tiny size?,"    image_patch = ImagePatch(image)
    right_patches = image_patch.find(""right"")
    for right_patch in right_patches:  # for each item on the right
        if right_patch.horizontal_center > image_patch.horizontal_center:  # if it's to the right
            return bool_to_yesno(right_patch.exists(""gold, tiny size""))  # check for gold and tiny size
    clock_patches = image_patch.find(""clock to the right of the statue"")
    for clock_patch in clock_patches:  # for each clock to the right of the statue
        if clock_patch.exists(""gold, tiny size""):  # check for gold and tiny size
            return bool_to_yesno(clock_patch.exists(""gold, tiny size""))  # check for gold and tiny size
    return bool_to_yesno(image_patch.exists(""clock to the right of the statue with gold and tiny size""))"
1252960,Where was the photo taken?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?,"    image_patch = ImagePatch(image)
    is_frisbee = image_patch.exists(""frisbee"")
    is_grass = image_patch.simple_query(""What is the surface of the ground?"") == ""grass""
    is_on_grass = is_frisbee and is_grass
    return bool_to_yesno(is_on_grass)"
13180513,Are there either cakes or containers in the photo?,"    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    is_or = bool_to_yesno(is_cake or is_container)
    return bool_to_yesno(is_or)"
479962,Are there black cars or motorcycles?,"    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    for black_patch in black_patches:
        object_patches = image_patch.find(""cars"")
        for object_patch in object_patches:
            if black_patch.exists(""black, car""):
                return ""yes""
        object_patches = image_patch.find(""motorcycles"")
        for object_patch in object_patches:
            if black_patch.exists(""black, motorcycle""):
                return ""yes""
    return bool_to_yesno(black_patch.exists(""black, car, motorcycle"") for black_patch in black_patches)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?,"    image_patch = ImagePatch(image)
    blue_cars = image_patch.find(""blue car"")
    for blue_car in blue_cars:
        if blue_car.horizontal_center < (image_patch.find(""police officer"")[0].horizontal_center + image_patch.width / 2):
            return ""left""
    return ""behind"""
5785831,What is in the glass?,"    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    # Question assumes only one glass patch
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is in the glass?"")
    return glass_patches[0].simple_query(""What is in the glass?"")"
19246241,Are there any brown benches or buckets?,"    image_patch = ImagePatch(image)
    is_brown_bench = False
    is_brown_bucket = False
    is_bench = False
    is_bucket = False
    brown_objects = image_patch.find(""brown"")
    if len(brown_objects) == 0:
        # If no brown objects are found, query the image directly
        return image_patch.simple_query(""Are there any brown benches or buckets?"")
    for brown_object in brown_objects:
        if brown_object.simple_query(""Is it a bench?"") == ""yes"":
            is_bench = True
            is_brown_bench = True
        if brown_object.simple_query(""Is it a bucket?"") == ""yes"":
            is_bucket = True
            is_brown_bucket = True
    if is_brown_bench or is_brown_bucket:
        return ""yes""
    else:
        return ""no""
"
3243803,"Where in the picture is the spoon, on the right or on the left?","    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on left?"")
    if spoon_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6952486,Does the shirt look white?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    return shirt_patches[0].verify_property(""shirt"", ""white"")"
17401425,Is there a bag that is not brown?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    is_bag = False
    is_brown = True
    for bag_patch in bag_patches:
        is_bag = bag_patch.exists(""bag"")
        if is_bag:
            if bag_patch.simple_query(""What is the bag's color?"") != ""brown"":
                is_brown = False
                return True
    return bool_to_yesno(is_bag and is_brown)"
481240,"Which kind of furniture is large, the shelf or the cupboard?","    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    # Question assumes one shelf patch and one cupboard patch
    if len(shelf_patches) < 1 or len(cupboard_patches) < 1:
        # If no shelf or cupboard is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    for shelf_patch in shelf_patches:
        if shelf_patch.simple_query(""Is the shelf large?"") == ""yes"":
            return ""shelf""
    for cupboard in cupboard_patches:
        if cupboard.simple_query(""Is the cupboard large?"") == ""yes"":
            return ""cupboard""
    # If no large shelf or cupboard is found, query the image directly
    return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")"
8531943,Are there any screens or bags?,"    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    is_bagpack = image_patch.exists(""bagpack"")
    is_backpack = image_patch.exists(""backpack"")
    is_rucksack = image_patch.exists(""rucksack"")
    is_sackpack = image_patch.exists(""sackpack"")
    is_totebag = image_patch.exists(""totebag"")
    is_duffelbag = image_patch.exists(""duffelbag"")
    is_duffel = image_patch.exists(""duffel"")
    is_tote = image_patch.exists(""tote"")
    is_knapsack = image_patch.exists(""knapsack"")
    is_satchel = image_patch.exists(""satchel"")
    is_pouch = image_patch.exists(""pouch"")
    is_purse = image_patch.exists(""purse"")
    is_pocket = image_patch.exists(""pocketbag"")
    is_fanny = image_patch.exists(""fannybag"")
    is_fannypack = image_patch.exists(""fannypack"")
    is_fanny = image_patch.exists(""fanny"")
    is_slingbag = image_patch.exists(""slingbag"")
    is_sling = image_patch.exists(""sling"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_sling = image_patch.exists(""sling"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists(""slingpack"")
    is_slingpack = image_patch.exists"
1969545,What is she wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    return person_patches[0].simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?","    image_patch = ImagePatch(image)
    white_appliances = image_patch.find(""white freezer"")
    for white_appliance in white_appliances:
        if white_appliance.simple_query(""What is it?"") == ""freezer"":
            return ""freezer""
    white_appliances = image_patch.find(""white ice maker"")
    for white_appliance in white_appliances:
        if white_appliance.simple_query(""What is it?"") == ""ice maker"":
            return ""ice maker""
    return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")"
1051870,Are there chairs or tables that are not green?,"    image_patch = ImagePatch(image)
    is_green = image_patch.exists(""green"")
    is_chair_or_table = image_patch.exists(""chair"") or image_patch.exists(""table"")
    is_green_or_chair_or_table = is_green or is_chair_or_table
    if is_green_or_chair_or_table:
        return ""no""
    else:
        return bool_to_yesno(is_chair_or_table)"
1366363,Does the taxi have a different color than the truck?,"    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    truck_patches = image_patch.find(""truck"")
    # Question assumes one taxi patch and one truck patch
    if len(taxi_patches) < 1 or len(truck_patches) < 1:
        # If no taxi or truck is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    for taxi_patch in taxi_patches:
        for truck_patch in truck_patches:
            if taxi_patch.simple_query(""What is the color of the taxi?"") != truck_patch.simple_query(""What is the color of the truck?""):
                return ""yes""
    return ""no"""
5460839,In which part of the image is the dog?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    if dog_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom left,, bottom right, bottom""   # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,  # ,,"
18899476,What type of vegetable is to the right of the rice that is on the plate?,"    image_patch = ImagePatch(image)
    rice_patches = image_patch.find(""rice"")
    # Question assumes only one rice patch
    if len(rice_patches) == 0:
        # If no rice is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    rice_patch = rice_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > rice_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"") # crop would include the rice so keep it in the query
    # If no vegetable is to the right of the rice, pick the first one
    return rice_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")"
8606903,What food item is not wide?,"    image_patch = ImagePatch(image)
    # not a relational verb so go step by step
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        is_not_wide = (food_patch.simple_query(""Is the food wide?"") == ""no"")
        if is_not_wide:
            return food_patch.simple_query(""What food item is not wide?"") # crop would include the item so keep it in the query
    # If no food is not wide, pick the first one
    return food_patches[0].simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?,"    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    is_folding_chairs_or_skateboards = image_patch.exists(""folding chair"") or image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chairs_or_skateboards)"
2327600,Is there an elephant near the pond?,"    image_patch = ImagePatch(image)
    is_elephant = image_patch.exists(""elephant"")
    is_pond = image_patch.exists(""pond"")
    is_proximal = image_patch.simple_query(""Is the elephant and the pond in the same scene?"") == ""yes""
    is_elephant_and_pond_together = is_elephant and is_pond and is_proximal
    return bool_to_yesno(is_elephant_and_pond_together)"
1575941,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?,"    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    desk_patch = desk_patches[0]
    floor_patches = image_patch.find(""floor"")
    for floor_patch in floor_patches:
        if desk_patch.vertical_center < floor_patch.horizontal_center:
            return floor_patch.simple_query(""What is the color of the floor that the desk is on top of?"") # crop would include the floor so keep it in the query
    # If no desk is on top of a floor, query the image directly
    return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")"
16654241,Is the TV on the left or on the right?,"    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""tv"")
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    if tv_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
18685233,Which kind of vehicle is to the left of the flags?,"    image_patch = ImagePatch(image)
    flags_patches = image_patch.find(""flags"")
    # Question assumes only one flags patch
    if len(flags_patches) == 0:
        # If no flags are found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    flags_patch = flags_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < flags_patch.horizontal_center:
            return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"") # crop would include the flags so keep it in the query
    # If no vehicle is to the left of the flags, query the image directly
    return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")"
9796068,Are there both a fence and a sheep in the picture?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?,"    image_patch = ImagePatch(image)
    blanket_or towel     #  1  2  3  4  5  6  7  8  9 10 11 12  # for 2
  2  3  4  5  6  7  8  9 10 11 12  # for 2
,  2  3  4  5  6  7  8  9 10 11 12  # for 2
  2  3  4  5  6  7  8  9 10 11 12  # for 2
,  2  3  4  5  6  7  8  9 10 11 12  # for 2
 2  3  4  5  6  7  8  9 10 11 12  # for 2
    for  2  3  4  5  6  7  8  9 10 11 12  # for 2
        # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for"
1110330,Is the pillow to the left of the frog cream colored or green?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    frog_patches = image_patch.find(""frog"")
    # Question assumes one pillow and one frog
    for pillow_patch in pillow_patches:
        for frog_patch in frog_patches:
            if pillow_patch.horizontal_center < frog_patch.horizontal_center:
                if pillow_patch.simple_query(""What is the pillow's color?"") == ""cream"":
                    return ""cream""
                else:
                    return pillow_patch.simple_query(""What is the pillow's color?"")
    # If no pillow is found to the left of a frog, query the image directly
    return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")"
511507,Is the antenna on the aircraft?,"    image_patch = ImagePatch(image)
    antenna_patches = image_patch.find(""antenna"")
    aircraft_patches = image_patch.find(""aircraft"")
    # Question assumes one antenna patch and one aircraft patch
    for antenna_patch in antenna_patches:
        for aircraft_patch in aircraft_patches:
            if antenna_patch.horizontal_center > aircraft_patch.horizontal_center:
                return ""no""
            if antenna_patch.simple_query(""Is the antenna on top of the aircraft?"") == ""yes"":
                return ""yes""
    return bool_to_yesno(antenna_patches[0].verify_property(""antenna"", ""aircraft"") and antenna_patches[0].verify_property(""antenna"", ""aircraft body"") and antenna_patches[0].verify_property(""antenna"", ""aircraft wing""))"
10464417,"In which part is the tent, the top or the bottom?","    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
10816730,Is the tree in front of the building?,"    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    building_patches = image_patch.find(""building"")
    # Question assumes one tree patch and one building patch
    for tree_patch in tree_patches:
        for building_patch in building_patches:
            if tree_patch.horizontal_center < building_patch.horizontal_center:
                return ""no""
    return ""yes"""
18766115,Who is walking?,"    # asks for the predicate of a relational verb (walking), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is walking?"")"
10625851,Are there either any fruits or plates in the image?,"    image_patch = ImagePatch(image)
    is_fruit_or_plate = False
    for object_patch in image_patch.find(""fruit""):
        is_fruit_or_plate = True
        break
    if not is_fruit_or_plate:
        for object_patch in image_patch.find(""plate""):
            is_fruit_or_plate = True
            break
    if not is_fruit_or_plate:
        return bool_to_yesno(image_patch.exists(""fruit plate"")) # crop would include the plate so keep it in the query
    return bool_to_yesno(is_fruit_or_plate)"
71018537,Is the person wearing a coat?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    return person_patches[0].verify_property(""person"", ""coat"")"
4194722,Is the man wearing a helmet?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    return man_patches[0].verify_property(""man"", ""helmet"")"
414248,"What animal are the women near the ocean riding, a pig or a horse?","    image_patch = ImagePatch(image)
    women_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(women_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")
    for woman_patch in women_patches:
        animal_patches = image_patch.find(""horse"")
        for animal_patch in animal_patches:
            if woman_patch.horizontal_center > animal_patch.horizontal_center:
                return ""horse""
        animal_patches = image_patch.find(""pig"")
        for animal_patch in animal_patches:
            if woman_patch.horizontal_center < animal_patch.horizontal_center:
                return ""pig""
    return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")"
683094,Who is wearing the shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing the shirt?"")
    # if multiple people, query each one
    return who_is_wearing"
12140603,What device is to the left of the headphones?,"    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for headphones_patch in headphones_patches:
        device_patches = image_patch.find(""phone"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < headphones_patch.horizontal_center:
                return ""phone""
        device_patches = image_patch.find(""laptop"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < headphones_patch.horizontal_center:
                return ""laptop""
    # If no devices are found to the left, query the image directly
    return image_patch.simple_query(""What device is to the left of the headphones?"")"
5575209,The flowers are where?,"    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flowers"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    if flower_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom left, right;, bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right; bottom, left, right"
8773829,Which kind of furniture is made of wood?,"    image_patch = ImagePatch(image)
    wood_furniture_patches = image_patch.find(""wooden furniture"")
    # Question assumes only one wood furniture patch
    if len(wood_furniture_patches) == 0:
        # If no wood furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    for wood_furniture_patch in wood_furniture_patches:
        type_of_furniture = wood_furniture_patch.simple_query(""Which kind of furniture is it?"")
        if type_of_furniture != ""table, round"" and type_of_furniture != ""table, rectangular"":
            type_of_furniture = wood_furniture_patch.simple_query(""Which kind of furniture is it?"")
        return type_of_furniture
    # If no wood furniture is found, query the image directly
    return image_patch.simple_query(""Which kind of furniture is made of wood?"")"
12636428,Which kind of animal is black?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is black?"")"
1020584,What animals is the car behind of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animals is the car behind of?"")"
11879418,The man is standing on what?,"    image_patch = ImagePatch(image)
    # contains a relation (ground, road, grass, earth, etc), so ask directly
    return image_patch.simple_query(""What is the man standing on?"")"
12334288,What device is to the left of the cabinet?,"    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the cabinet?"")
    cabinet_patch = cabinet_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < cabinet_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the left of the cabinet?"") # crop would include the device so keep it in the query
    # If no device is to the left of the cabinet, query the image directly
    return image_patch.simple_query(""What device is to the left of the cabinet?"")"
691610,Is the monitor to the left of a book?,"    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    book_patches = image_patch.find(""book"")
    # Question assumes one monitor patch and one book patch
    for monitor_patch in monitor_patches:
        for book_patch in book_patches:
            if monitor_patch.horizontal_center < book_patch.horizontal_center:
                return ""yes""
    return ""no"""
7552714,Is the color of the jacket black?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return jacket_patches[0].verify_property(""jacket"", ""black"")"
8492422,Is the man to the left of a boy?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes one man patch and one boy patch
    for man_patch in man_patches:
        for boy_patch in boy_patches:
            if man_patch.horizontal_center < boy_patch.horizontal_center:
                return ""yes""
    return ""no"""
13248061,What type of device is to the left of the keyboard in the bottom of the image?,"    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    for keyboard_patch in keyboard_patches:
        # check the bottom of the image
        if keyboard_patch.vertical_center < (image_patch.width / 2):
            # if vertical center is less than half of the image, it's bottom
            for device_patches in [(image_patch.find(""mouse""), ""mouse""), (image_patch.find(""phone""), ""phone""), (image_patch.find(""pen""), ""pen"")]:
                for device_patch in device_patches[0]:
                    if device_patch.horizontal_center < keyboard_patch.horizontal_center:
                        return device_patches[1]
    # if no device found, query the image directly
    return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")"
18252454,What is common to the roof and the sky?,"    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    sky_patches = image_patch.find(""sky"")
    # Question assumes one roof and one sky
    roof = roof_patches[0]
    sky = sky_patches[0]
    common_features = set(roof.simple_query(""What is it made of,?"") for _ in range(3)) | { ""color"" for _ in range(3)} | { ""shape"" for _ in range(3)} | { ""texture"" for _ in range(3)}
    for feature in common_features:
        if roof.simple_query(feature) == sky.simple_query(feature):
            return feature
    return ""color"" # if no common feature is found, return the most common one, which is usually color"
14443687,What do the cat and the book have in common?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    # Question assumes one cat patch and one book patch
    if len(cat_patches) != 1 or len(book_patches) != 1:
        # If no cat or book is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    return cat_patches[0].simple_query(""What do the cat and the book have in common?"")"
14571335,Who is wearing trousers?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing trousers?"")
    for person_patch in person_patches:
        who_is_wearing = person_patch.simple_query(""Who is wearing trousers?"")
    # if no person is wearing trousers, query the image directly
    # if multiple people, query each one
    return who_is_wearing"
474885,Who wears a cap?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    for person_patch in person_patches:
        who_wears_cap = person_patch.simple_query(""Who wears a cap?"")
    #    if who_wears_cap == ""no one"":
    #        return image_patch.simple_query(""Who wears a cap?"")
    return who_wears_cap"
141013015,"What color is the toilet, brown or white?","    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].simple_query(""What color is the toilet, brown or white?"")"
5515816,On which side of the image is the fence?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    if fence_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
16774696,What is the surfer wearing?,"    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    # Question assumes only one surfer patch
    if len(surfer_patches) == 0:
        # If no surfer is found, query the image directly
        return image_patch.simple_query(""What is the surfer wearing?"")
    return surfer_patches[0].simple_query(""What is the surfer wearing?"")"
13701956,Is there any grass or sand that is not dry?,"    image_patch = ImagePatch(image)
    is_grass_or_sand = False
    is_dry = True
    for object_patches in [(image_patch.find(""grass""), ""grass""), (image_patch.find(""wet grass""), ""wet grass""), (image_patch.find(""sand""), ""sand""), (image_patch.find(""wet sand""), ""wet sand"")]:
        for object_patch in object_patches[0]:
            if object_patches[1] == ""grass"" or object_patches[1] == ""wet grass"":
                is_grass_or_sand = True
            if object_patches[1] == ""sand"" or object_patches[1] == ""wet sand"":
                is_dry = False
            if is_grass_or_sand and not is_dry:
                return ""yes""
    return bool_to_yesno(is_grass_or_sand)"
11606870,Is there a cow or a zebra in the picture?,"    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?,"    image_patch = ImagePatch(image)
    firehydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one firehydrant patch
    if len(firehydrant_patches) == 0:
        # If no firehydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    return firehydrant_patches[0].simple_query(""Is the fire hydrant looking modern?"")"
942308,Is the cup empty or full?,"    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    return cup_patches[0].simple_query(""Is the cup empty or full?"")"
15815976,Is the woman wearing a scarf?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    return woman_patches[0].verify_property(""woman"", ""scarf"")"
3193231,Do you see either parking meters or brooms in the picture?,"    image_patch = ImagePatch(image)
    is_meter_or_broom = image_patch.exists(""parking meter"") or image_patch.exists(""parking meter with coin slot"") or image_patch.exists(""parking meter with lever"") or image_patch.exists(""broom"")
    return bool_to_yesno(is_meter_or_broom)"
314218,Is the sign in front of the bridge small and white?,"    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    for sign_patch in sign_patches:
        is_small_and_white = (sign_patch.simple_query(""Is the sign small?"") == ""yes"" and
                              sign_patch.simple_query(""What is the color of the sign?"") == ""white"")
        return bool_to_yesno(is_small_and_white)"
18130465,Does the umbrella that is not dry look orange and open?,"    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella that is not dry"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    for umbrella_patch in umbrella_patches:
        is_open = umbrella_patch.verify_property(""umbrella"", ""open"")
        is_orange = umbrella_patch.verify_property(""umbrella"", ""orange"")
        is_dry = umbrella_patch.verify_property(""umbrella"", ""dry"")
        if is_open and is_orange and not is_dry:
            return bool_to_yesno(True)
    return bool_to_yesno(False)"
7920817,What's in the paper?,"    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""What's in the paper?"")
    return paper_patches[0].simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?,"    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    for bun_patch in bun_patches:
        top_patches = image_patch.find(""top"")
        for top_patch in top_patches:
            if bun_patch.vertical_center > top_patch.vertical_center:
                return bun_patch.simple_query(""What is on the bun in the top?"") # crop would include the top so keep it in the query
    # If no bun is on top, pick the first bun
    return bun_patches[0].simple_query(""What is on the bun in the top?"")"
16929928,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?,"    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    if len(lady_patches) < 2:
        # If there is only one lady, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    for lady_patch in lady_patches:
        if lady_patch.horizontal_center < lady_patches[0].horizontal_center:
            return ""left""
        else:
            return ""right""
"
17993299,Is the horse to the left of a car?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) < 2:
        # If there is only one horse, query the image directly
        return image_patch.simple_query(""Is the horse to the left of a car?"")
    for horse_patch in horse_patches:
        for other_patch in horse_patches:
            if horse_patch is not other_patch and horse_patch.horizontal_center < other_patch.horizontal_center:
                return ""yes""
    return ""no""
"
8717022,Is the small animal to the left of the vehicle that looks silver?,"    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    vehicle_patches = image_patch.find(""vehicle"")
    is_to_the_left = False
    is_silver = False
    for small_animal_patch in small_animal_patches:
        for vehicle_patch in vehicle_patches:
            if small_animal_patch.horizontal_center < vehicle_patch.horizontal_center:
                is_to_the_left = True
            if vehicle_patch.simple_query(""What is the color of the vehicle?"") == ""silver"":
                is_silver = True
    if is_to_the_left and is_silver:
        return ""yes""
    else:
        return ""no""
"
2998707,Which color is the chair that is on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    return chair_patches[0].simple_query(""Which color is the chair that is on the right?"")"
171017786,Do you see any cups to the left of the monitor?,"    image_patch = ImagePatch(image)
    cups_patches = image_patch.find(""cup"")
    for cup_patch in cups_patches:
        if cup_patch.horizontal_center < (image_patch.width / 2):
            return bool_to_yesno(True)
    return bool_to_yesno(False) monitor                                                                                                     # #   #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #   # #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #"
2220068,Is the girl to the right or to the left of the glasses the man is wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    glasses_patches = man_patch.find(""glasses"")
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
"
1941568,What animal is in the water?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is in the water?"")"
17577787,Does the man's hair look short and white?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    is_hair_short_and_white = man_patch.verify_property(""man"", ""short_and_white_hair"")
    return bool_to_yesno(is_hair_short_and_white)"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?,"# bottle, patch, bottle, patch, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle, bottle, bottle, bottle
# bottle, bottle"
9825336,Which kind of furniture is the mat lying on?,"    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    for mat_patch in mat_patches:
        mat_furniture_patches = image_patch.find(""furniture"")
        for mat_furniture_patch in mat_furniture_patches:
            if mat_patch.vertical_center > mat_furniture_patch.horizontal_center:
                return mat_furniture_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    return mat_furniture_patches[0].simple_query(""Which kind of furniture is the mat lying on?"")"
11222427,Do you see fences or elephants?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?","    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white"")
    for white_patch in white_patches:
        if white_patch.simple_query(""What is it?"") == ""entertainment center"":
            return ""table""
        elif white_patch.simple_query(""What is it?"") == ""bed"":
            return ""table""
    return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")"
1152020,Do you see either any plate or tomato that are red?,"    image_patch = ImagePatch(image)
    is_red = image_patch.exists(""red"")
    is_plate_or_tomato = image_patch.exists(""plate"") or image_patch.exists(""tomato"")
    is_red_and_plate_or_tomato = is_red and is_plate_or_tomato
    if is_red_and_plate_or_tomato:
        return bool_to_yesno(is_red_and_plate_or_tomato)
    else:
        return bool_to_yesno(is_red)"
8961520,Who is surfing?,"    # asks for the predicate of a relational verb (surfing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"")"
18106780,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
1892692,What color do you think the bowl that is to the right of the person is?,"    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl that is to the right of the person"")
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    if len(bowl_patches) > 1:
        # If multiple bowls, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    return bowl_patches[0].simple_query(""What color are you?"")"
6952082,What color is the hair?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"")"
3768067,What color is the pot the statue is to the right of?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    pot = pot_patches[0]
    pot_to_the_right = pot_patches[1]
    return pot.simple_query(""What color are you?"")"
17866761,Is the clear glass on the shelf of the table?,"    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""clear glass"")
    shelf_patches = image_patch.find(""shelf on table"")
    # Question assumes one glass patch and one shelf patch
    is_on_shelf = ""yes""
    for glass_patch in glass_patches:
        for shelf_patch in shelf_patches:
            if glass_patch.horizontal_center < shelf_patch.horizontal_center:
                is_on_shelf = ""no""
                break
    if is_on_shelf == ""yes"":
        return ""yes""
    else:
        return ""no""
"
798020,Does the skirt look black or yellow?,"    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].simple_query(""Does the skirt look black or yellow?"")"
828981,How old is he?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""How old is he?"")
    return person_patches[0].simple_query(""How old is he?"")"
7236463,Of what color is the book?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""Of what color is the book?"")"
6376684,What color is the car to the left of the train car?,"    image_patch = ImagePatch(image)
    left_train_patches = image_patch.find(""left train car"")
    for left_train_patch in left_train_patches:
        if left_train_patch.simple_query(""Is it a car?"") == ""yes"":
            return left_train_patch.simple_query(""What is the color of the car?"")
    right_train_patches = image_patch.find(""right train car"")
    for right_train_patch in right_train_patches:
        if right_train_patch.simple_query(""Is it a car?"") == ""yes"":
            return right_train_patch.simple_query(""What is the color of the car?"")
    # If no train car is found, query the image directly
    return image_patch.simple_query(""What color is the car to the left of the train car?"")"
786798,Is this a photo of a beach?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a photo of a beach?"")"
19836753,What vehicles are to the left of the fence?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    for fence_patch in fence_patches:
        vehicles_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicles_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicles are to the left of the fence?"") # crop would include the fence so keep it in the query
    # If no vehicles are to the left of the fence, pick the first fence
    return image_patch.simple_query(""What vehicles are to the left of the fence?"")"
15284615,Who is playing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is walking"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    is_man_walking_with_remote_control = man_patch.verify_property(""man that is walking"", ""remote control"")
    return bool_to_yesno(is_man_walking_with_remote_control)"
17746396,What's the boy wearing?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    return boy_patches[0].simple_query(""What's the boy wearing?"")"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?,"    image_patch = ImagePatch(image)
    mug_patches = image_patch.find(""mug"")
    bottle_patches = image_patch.find(""bottle"")
    tap_patches = image_patch.find(""tap"")
    # Check each bottle for the correct position
    for bottle_patch in bottle_patches:
        for mug_patch in mug_patches:
            if bottle_patch.horizontal_center < mug_patch.horizontal_center < bottle_patch.horizontal_center:
                return ""no""
    # Check each tap for the correct position
    for bottle_patch in bottle_patches:
        for tap_patch in tap_patches:
            if bottle_patch.horizontal_center < tap_patch.horizontal_center < bottle_patch.horizontal_center:
                return ""yes""
    # If no mug is found to the right of the bottle which is to the right of the tap
    return ""no"""
13826837,What color is the door?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    return door_patches[0].simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?,"    image_patch = ImagePatch(image)
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_horse)"
2964690,What is in front of the mountains?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    if len(truck_patches) < 2:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for truck_patch in truck_patches:
        if truck_patch.horizontal_center < (image_patch.width / 2):
            return bool_to_yesno(any(vehi_patch.horizontal_center > truck_patch.horizontal_center for vehi_patch in truck_patches[1:]))
    return bool_to_yesno(any(vehi_patch.horizontal_center > truck_patch.horizontal_center for vehi_patch in truck_patches[1:]))"
493755,Does the scarf made of wool seem to be long and blue?,"    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Is the scarf made of wool and blue?"")
    scarf_patch = scarf_patches[0]
    is_long = scarf_patch.simple_query(""Is the scarf long?"") == ""yes""
    is_blue = scarf_patch.simple_query(""What is the color of the scarf?"") == ""blue""
    is_wool = scarf_patch.simple_query(""What is the scarf made of?"") == ""wool""
    result = is_long and is_blue and is_wool
    return bool_to_yesno(result)"
1189986,Is the man behind the elephant holding a surfboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes one man patch and one elephant patch
    for man_patch in man_patches:
        for elephant_patch in elephant_patches:
            is_man_holding_surfboard = man_patch.simple_query(""Is the man holding a surfboard?"") == ""yes""
            is_man_behind_elephant = man_patch.horizontal_center > elephant_patch.horizontal_center
            if is_man_holding_surfboard and is_man_behind_elephant:
                return True
    return False"
8792466,Which color is the closed window?,"    image_patch = ImagePatch(image)
    closed_window_patches = image_patch.find(""closed window"")
    # Question assumes only one closed window patch
    if len(closed_window_patches) == 0:
        # If no closed window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    return closed_window_patches[0].simple_query(""Which color is the closed window?"")"
10188423,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    right_girl = girl_patches[0]
    veggie_patches = image_patch.find(""veggie"")
    for veggie_patch in veggie_patches:
        if veggie_patch.horizontal_center > right_girl.horizontal_center:
            return veggie_patch.simple_query(""What kind of vegetable is to the right of the girl?"") # crop would include the veggie so keep it in the query
    # If no veggie is to the right of the girl, query the image directly
    return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")"
4929965,Is there a black racket or clock in the picture?,"    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_black_racket_or_clock = image_patch.exists(""black racket with strings"")
    is_black_clock = image_patch.exists(""black clock"")
    is_black_clock_or_racket = image_patch.exists(""black clock with hands"")
    is_black_racket_or_clock_or_racket = image_patch.exists(""black racket with strings and clock hands"")
    is_black_racket_or_clock_or_racket_or_clock = image_patch.exists(""black racket with strings and clock hands and clock face"")
    is_black_racket_or_clock_or_racket_or_clock_or_racket = image_patch.exists(""black racket with strings and clock hands and clock face and clock numbers"")
    is_black_racket_or_clock_or_racket_or_clock_or_racket_or_clock = image_patch.exists(""black racket with strings and clock hands and clock face and clock numbers and clock hands on top"")
    is_black_racket_or_clock_or_racket_or_clock_or_racket_or_clock_or_racket = image_patch.exists(""black racket with strings and clock hands and clock face and clock numbers and clock hands on top and clock face on top"")
    is_black_racket_or_clock_or_racket_or_clock_or_racket_or_clock_or_racket_or_clock = image_patch.exists(""black racket with strings and clock hands and clock face and clock numbers and clock hands on top and clock face on top and clock numbers on top"")
    is_black_racket_or_clock_or_racket_or_clock_or_racket_or_clock_or_racket_or_clock_or_clock = image_patch.exists(""black racket with strings and clock hands and clock face and clock numbers and clock hands on top and clock face on top and clock numbers on top and clock face on top"")
    is_black_racket_or_clock_or_racket_or_clock_or_racket_or_clock_or_racket_or_clock_or_clock_or_clock = image_patch.exists(""black racket with strings and clock hands and clock face and clock numbers and clock hands on top and clock face on top and clock numbers on top and clock face on top and clock numbers on top"")
    is_black_racket_or_clock_or_racket_or_clock_or_racket_or_clock_or_racket_or_clock_or_clock_or_clock_or_clock = image_patch.exists(""black racket with strings and clock hands and clock face and clock numbers and clock hands on top and clock face on top and clock numbers on top and clock face on top and clock numbers on top and clock face on top"")
    is_black_r"
4782038,What kind of animal is white?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is white?"")"
14658201,Is the sheep that looks white and brown made of plastic?,"    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep that looks white and brown"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    for sheep_patch in sheep_patches:
        is_plastic = sheep_patch.verify_property(""sheep"", ""plastic"")
        is_white_and_brown = sheep_patch.verify_property(""sheep that looks white and brown"", ""white and brown"")
        if is_plastic and is_white_and_brown:
            return ""yes""
    return ""no"""
1441865,Do you see any boxes on the table under the grill?,"    image_patch = ImagePatch(image)
    is_box_on_table = False
    is_box_under_grill = False
    for box_patch in image_patch.find(""box""):
        if box_patch.exists(""table""):
            is_box_on_table = True
        if box_patch.exists(""grill""):
            is_box_under_grill = True
    if is_box_on_table and is_box_under_grill:
        return bool_to_yesno(is_box_on_table and is_box_under_grill)
    else:
        return bool_to_yesno(is_box_on_table)"
1424926,What is the tag on?,"    image_patch = ImagePatch(image)
    tag_patches = image_patch.find(""tag"")
    # Question assumes only one tag patch
    if len(tag_patches) == 0:
        # If no tag is found, query the image directly
        return image_patch.simple_query(""What is the tag on?"")
    return tag_patches[0].simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person working on laptop"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    person_patch = person_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > person_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"") # crop would include the furniture so keep it in the query
    # If no furniture is to the right of the person, query the image directly
    return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")"
3635257,Is there any freezer in this photo?,"    image_patch = ImagePatch(image)
    is_freezer = image_patch.exists(""freezer"")
    return bool_to_yesno(is_freezer)"
8821026,Are there either any bags or chairs?,"    image_patch = ImagePatch(image)
    is_bag_or-chair      #  1  2  3  4  5  6  7  8  9 10 11 12  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  14 15 16  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  # "
13669952,In what vehicle is the bus driver?,"    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    bus_patch = bus_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if bus_patch.horizontal_center > vehicle_patch.horizontal_center:
            return vehicle_patch.simple_query(""In what vehicle is the bus driver?"")
    return bus_patch.simple_query(""In what vehicle is the bus driver?"")"
17204662,What is that man in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is that man in front of?"")"
380866,Are there any girls or radios?,"    image_patch = ImagePatch(image)
    is-girl     #  1  2  3  4  5  6  7  8  9 10 11 12  # for 2
  2  3  4  5  6  7  8  9 10 11 12  # for 2
    1 2 3 4 5 6 7 8 9 10 11 12  # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
    # for 2
"
13775896,The girl is sitting on what?,"    image_patch = ImagePatch(image)
    sitting_patches = image_patch.find(""girl sitting"")
    # Question assumes only one sitting patch
    if len(sitting_patches) == 0:
        # If no sitting is found, query the image directly
        return image_patch.simple_query(""The girl is sitting on what?"")
    for sitting_patch in sitting_patches:
        sitting_on_patches = image_patch.find(""ground
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""white lamp"")
    pillow_patches = image_patch.find(""pillow"")
    for lamp_patch in lamp_patches:
        for pillow_patch in pillow_patches:
            if lamp_patch.horizontal_center < pillow_patch.horizontal_center:
                return ""left""
    return ""right""
"
16545552,What color do you think is the vehicle the girl is washing?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    for vehicle_patch in vehicle_patches:
        color_options = [""red"", ""blue"", ""green"", ""white"", ""red and blue"", ""gray"", ""brown"", ""yellow"", ""orange"", ""purple""]
        for color in color_options:
            if vehicle_patch.simple_query(f""What is the color of {vehicle_patch.simple_query('what is this')}?"") == color:
                return color
    return vehicle_patches[0].simple_query(""What color is the vehicle?"")"
16719872,Are there motorcycles to the left of the man who is wearing a hat?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man who is wearing a hat"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    to_the_left_patches = image_patch.find(""motorcycle"")
    for to_the_left_patch in to_the_left_patches:
        if to_the_left_patch.horizontal_center < man_patch.horizontal_center:
            return bool_to_yesno(to_the_left_patch.exists(""motorcycle""))
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person that is pushing a stroller"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    person_patch = person_patches[0]
    garbage_can_patches = image_patch.find(""garbage can"")
    for garbage_can_patch in garbage_can_patches:
        if garbage_can_patch.horizontal_center < person_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
"
13711589,What do the truck and the street sign have in common?,"    truck_patches = ImagePatch(image).find(""truck"")
    street_sign_patches = ImagePatch(image).find(""street sign"")
    # Question assumes one truck and one street sign
    truck = truck_patches[0]
    street_sign = street_sign_patches[0]
    common_features = set()
    for feature in [""shape"", ""color"", ""material""]:
        if truck.has_query_property(feature, ""true"") for query_property in [""rectangular"", ""round""]:
            truck_query_property = ""rectangular"" if truck.has_query_property(""shape"", ""rectangular"") else ""round""
            truck_query_property = ""color"" if truck.has_query_property(""color"", ""color"") else ""material""
            truck_query_property = ""material"" if truck.has_query_property(""material"", ""material"") else ""round""
            common_features.add(truck_query_property)
        if truck.has_query_property(feature, ""true"") for query_property in [""red"", ""blue"", ""green""]:
            truck_query_property = ""red"" if truck.has_query_property(""color"", ""red"") else ""blue"" if truck.has_query_property(""color"", ""blue"") else ""green""
            truck_query_property = ""blue"" if truck.has_query_property(""color"", ""blue"") else ""green""
            truck_query_property = ""green"" if truck.has_query_property(""color"", ""green"") else ""round""
            common_features.add(truck_query_property)
    if len(common_features) > 0:
        return min(common_features)
    else:
        return ""nothing"" # if no common features found
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    # return ImagePatch(image).simple_query(""What do the truck and the street sign have in common?"")"
10227573,Who is wearing a shirt?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?,"    # asks for the predicate of a relational verb (leading), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the man leading?"")"
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?,"    image_patch = ImagePatch(image)
    dresser_patches = image_patch.find(""dresser"")
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes one dresser patch and one curtain patch
    for dresser_patch in dresser_patches:
        for curtain_patch in curtain_patches:
            if dresser_patch.horizontal_center > curtain_patch.horizontal_center:
                return ""table"" # or other piece of furniture
            else:
                return ""table, dresser,""  for     #  # ""table"" for # in ""dresser""  # for other piece of furniture
    # # If no dresser is found to the right of a curtain, query the image directly
    # return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")"
7190226,Does the puddle look large?,"    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    if puddle_patches[0].simple_query(""Is the puddle on a slope?"") == ""yes"":
        return bool_to_yesno(puddle_patches[0].simple_query(""Is the puddle large?"") == ""yes"")
    else:
        return puddle_patches[0].simple_query(""Is the puddle large?"")"
11675152,Who throws the frisbee?,"    image_patch = ImagePatch(image)
    # contains a relation (who, what, when, where, why), so ask directly
    return image_patch.simple_query(""Who throws the frisbee?"")"
8723676,Which kind of animal is the water on?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which kind of animal is the water on?"")"
61046657,Do you think that traffic light is tall?,"    image_patch = ImagePatch(image)
    light_patches = image_patch.find(""traffic light"")
    # Question assumes only one light patch
    if len(light_patches) == 0:
        # If no light is found, query the image directly
        return image_patch.simple_query(""Do you think that traffic light is tall?"")
    if light_patches[0].vertical_center > image_patch.vertical_center:
        return bool_to_yesno(light_patches[0].verify_property(""light"", ""tall"")
    else:
        return bool_to_yesno(light_patches[0].verify_property(""light"", ""tall"")"
9581034,On which side is the wine glass?,"    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    if wine_glass_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?,"    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    napkin_patches = image_patch.find(""napkin"")
    for pizza_patch in pizza_patches:
        for napkin_patch in napkin_patches:
            if napkin_patch.horizontal_center < pizza_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
18535266,Is the face mask made of the same material as the mask?,"    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    if len(face_mask_patches) == 0:
        # If no face mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    face_mask = face_mask_patches[0]
    mask_patches = image_patch.find(""mask"")
    if len(mask_patches) == 0:
        # If no mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    for mask_patch in mask_patches:
        if face_mask.verify_property(""face mask"", mask_patch.simple_query(""What is the mask made of?""):
            return ""yes""
    return ""no""
"
11254215,What is the tan item of furniture?,"    image_patch = ImagePatch(image)
    tan_item_patches = image_patch.find(""tan item of furniture"")
    # Question assumes only one tan item of furniture
    if len(tan_item_patches) == 0:
        # If no tan item of furniture is found, query the image directly
        return image_patch.simple_query(""What is the tan item of furniture?"")
    return tan_item_patches[0].simple_query(""What is the tan item of furniture?"")"
1852010,How is the device to the right of the device on the desk called?,"    image_patch = ImagePatch(image)
    device_on Desk            #  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90  # 1 2 3 4 5 6 7 8 9 10
  2  2  2  2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
1587534,Is the device on the floor black and large?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    device_patch = device_patches[0]
    is_on_floor = (device_patch.vertical_center < image_patch.vertical_center)
    is_black = device_patch.verify_property(""device"", ""black"")
    is_large = device_patch.verify_property(""device"", ""large"")
    is_device_on_floor_black_and_large = is_on_floor and is_black and is_large
    return bool_to_yesno(is_device_on_floor_black_and_large)"
8470757,Are there any surfboards?,"    image_patch = ImagePatch(image)
    is_surfboard = image_patch.exists(""surfboard"")
    return bool_to_yesno(is_surfboard)"
11273949,Is the shirt white?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return shirt_patches[0].simple_query(""Is the shirt white?"")"
7475238,What's the airplane in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse to the right of the hose"")
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        return horse_patch.simple_query(""Where does the horse to the right of the hose run?"") # crop would include the hose so keep it in the query
    hose_patches = image_patch.find(""hose"")
    for hose_patch in hose_patches:
        for horse_patch in image_patch.find(""horse""):
            if horse_patch.horizontal_center > hose_patch.horizontal_center:
                return ""right""
    return ""left"""
3932624,Are there either any gray chairs or laptops?,"    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"") or image_patch.exists(""gray chair with arms"") or image_patch.exists(""gray chair with armrests"")
    is_laptop = image_patch.exists(""laptop"")
    is_chair = image_patch.exists(""chair"")
    is_chair_or_laptop = is_chair or is_laptop
    is_gray_or_chair_or_laptop = is_gray_chair or is_chair_or_laptop
    return bool_to_yesno(is_gray_or_chair_or_laptop)"
10584099,Is the water brown or blue?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water brown or blue?"")
    return water_patches[0].simple_query(""Is the water brown or blue?"")"
9256263,Which kind of furniture is brown?,"    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown"")
    # Question assumes one brown patch
    if len(brown_patches) == 0:
        # If no brown is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    brown_patch = brown_patches[0]
    brown_furniture_patches = image_patch.find(""brown furniture"")
    for brown_furniture_patch in brown_furniture_patches:
        if brown_patch.horizontal_center > brown_furniture_patch.horizontal_center:
            return brown_patch.simple_query(""Which kind of furniture is brown?"") # crop would include the furniture so keep it in the query
    # If no brown is found, query the image directly
    return brown_patch.simple_query(""Which kind of furniture is brown?"")"
18719769,Is the man wearing glasses?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    man_patch = man_patches[0]
    is_wearing_glasses = man_patch.verify_property(""man"", ""glasses"")
    return bool_to_yesno(is_wearing_glasses)"
18342439,What animal is white?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is white?"")"
8665725,Who is wearing a coat?,"    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a coat?"")
    for person_patch in person_patches:
        who_is_wearing_a_coat = person_patch.simple_query(""Who is wearing a coat?"")
    # if no person is wearing a coat, query the image directly
    return who_is_wearing_a_coat"
5440407,What vehicle isn't black?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What vehicle isn't black?"")"
4104707,On which side of the picture is the oven?,"    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
3126763,What is common to the logo and the letter?,"    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    letter_patches = image_patch.find(""letter"")
    # Question assumes one logo patch and one letter patch
    if len(logo_patches) != 1 or len(letter_patches) != 1:
        # If no logo or letter is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    logo_patch = logo_patches[0]
    letter_patch = letter_patches[0]
    common_property = image_patch.simple_query(""What is common to the logo and the letter?"")
    if common_property == ""color"":
        return common_property
    elif common_property == ""shape"":
        return common_property
    else:
        return common_property"
18640925,What animal is in the water the man is walking through?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is in the water the man is walking through?"")"
125488,What is the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    return man_patches[0].simple_query(""What is the man wearing?"")"
5925435,What is the sidewalk made of?,"    image_patch = ImagePatch(image)
    sidewalk_patches = image_patch.find(""sidewalk"")
    # Question assumes only one sidewalk patch
    if len(sidewalk_patches) == 0:
        # If no sidewalk is found, query the image directly
        return image_patch.simple_query(""What is the sidewalk made of?"")
    return sidewalk_patches[0].simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].simple_query(""What is the pattern of the coat?"")"
4819547,What kind of furniture is white?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white"")
    # Question assumes only one white patch
    if len(white_patches) == 0:
        # If no white is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    for white_patch in white_patches:
        white_patch_type = white_patch.simple_query(""What is it?"")
        if white_patch_type == ""table"" or white_patch_type == ""table, round"" or white_patch_type == ""table, rectangular"":
            return ""table""
        elif white_patch_type == ""chair"" or white_patch_type == ""chair, armless"" or white_patch_type == ""chair, with armrests"":
            return ""chair""
        elif white_patch_type == ""bed"" or white_patch_type == ""trunk, storage"" or white_patch_type == ""trunk, storage, white"":
            return ""bed""
        else:
            return white_patch.simple_query(""What kind of furniture is white?"")"
14263174,What color do you think the chair that is to the right of the other chair is?,"    image_patch = ImagePatch(image)
    chairs = image_patch.find(""chair"")
    # Question assumes at least two chairs
    if len(chairs) < 2:
        # If no two chairs are found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    right_chair = chairs[1]  # the chair that is to the right of the other chair
    other_chair = chairs[0]  # the other chair
    if right_chair.horizontal_center > other_chair.horizontal_center:
        # if the right chair is to the right of the other chair
        return right_chair.simple_query(""What color are you?"")
    else:
        # if the right chair is to the left of the other chair
        return other_chair.simple_query(""What color are you?"")"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is to the left of the person riding the green train"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    if man_patches[0].verify_property(""man that is to the left of the person riding the green train"", ""riding the green train""):
        return ""yes""
    else:
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")"
9239936,Do the cows near the trees have white color?,"    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow near tree"")
    # Question assumes each cow is near a tree
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    for cow_patch in cow_patches:
        cow = cow_patch.find(""cow"")[0]  # each cow is near a tree
        tree = cow_patch.find(""tree"")[0]  # each cow is near a tree
        if cow Patch     #  #  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  #  #  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40
  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2  2 "
1885178,"In which part of the image is the remote control, the bottom or the top?","    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    if remote_control_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12341631,Which color is the bag in the top part?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    if bag_patch.vertical_center > image_patch.vertical_center:
        return bag_patch.simple_query(""Which color is the bag in the top part?"")
    else:
        return bag_patch.simple_query(""Which color is the bag in the top part?"")"
5532909,"What is the weather like, cloudless or maybe rainy?","    image_patch = ImagePatch(image)
    weather_patches = image_patch.find(""weather"")
    # Question assumes only one weather patch
    if len(weather_patches) == 0:
        # If no weather is found, query the image directly
        return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")
    if weather_patches[0].simple_query(""Is the weather cloudless?"") == ""yes"":
        return ""cloudless""
    else:
        return weather_patches[0].simple_query(""What is the weather like, cloudless or maybe rainy?"")"
2618222,What is connected to the open laptop?,"    image_patch = ImagePatch(image)
    open_laptop_patches = image_patch.find(""open laptop"")
    # Question assumes only one open laptop patch
    if len(open_laptop_patches) == 0:
        # If no open laptop is found, query the image directly
        return image_patch.simple_query(""What is connected to the open laptop?"")
    open_laptop_patch = open_laptop_patches[0]
    what_connected = open_laptop_patch.simple_query(""What is connected to the open laptop?"")
    return what_connected # crop would include the connection so keep it in the query"
3252220,Of which color is the shirt the man wears?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = man_patch.find(""shirt"")
    # Question assumes one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    return man_patch.simple_query(""Of which color is the shirt the man wears?"")"
8947801,What is in the vase?,"    image_patch = ImagePatch(image)
    vase_patches = image_patch.find(""vase"")
    # Question assumes only one vase patch
    if len(vase_patches) == 0:
        # If no vase is found, query the image directly
        return image_patch.simple_query(""What is in the vase?"")
    return vase_patches[0].simple_query(""What is in the vase?"")"
10841562,Is the color of the pants the same as the shorts?,"    image_patch = ImagePatch(image)
    shorts_patches = image_patch.find(""shorts"")
    if len(shorts_patches) == 0:
        # If no shorts are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    for shorts_patch in shorts_patches:
        pants_patches = image_patch.find(""pants"")
        for pants_patch in pants_patches:
            if shorts_patch.simple_query(""What is the color of the shorts?"") == pants_patch.simple_query(""What is the color of the pants?""):
                return ""yes""
    return ""no"""
15511838,What kind of furniture is to the left of the bucket?,"    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    bucket_patch = bucket_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"") # crop would include the bucket so keep it in the query
    # If no furniture is to the left of the bucket, query the image directly
    return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")"
14495306,Is there any racket to the right of the person that the woman is to the left of?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) < 2:
        # If there is no second person, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < image_patch.width / 2:
            left_person = person_patch
            right_person = person_patches[1]
        else:
            left_person = person_patches[1]
            right_person = person_patch
        if left_person.horizontal_center < right_person.horizontal_center < left_person.horizontal_center + 100: # 100 is a rough estimate
            return bool_to_yesno(left_person.verify_property(""racket"", ""existence"")
            # crop would include the racket so keep it in the query
            ) # if there is no second person
    return bool_to_yesno(left_person.verify_property(""racket"", ""existence"")
    # crop would include the racket so keep it in the query
    ) # if there is no second person"
14841932,Do the tiles have square shape and black color?,"    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    # Question assumes only one tile patch
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    tile_patch = tile_patches[0]
    is_square = tile_patch.verify_property(""tile"", ""square"")
    is_black = tile_patch.verify_property(""tile"", ""black color"")
    is_black_color = tile_patch.verify_property(""black color"", ""color"")
    is_square_shape = tile_patch.verify_property(""square shape"", ""shape"")
    result = bool_to_yesno(is_square and is_black and is_black_color and is_square_shape)
    return str(result) if result == bool_to_yesno(is_square and is_black and is_black_color and is_square_shape) else ""no"""
41029381,What is the vehicle that is the same color as the shirt called?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    shirt_patch = shirt_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""What is the color of the vehicle?"") == shirt_patch.simple_query(""What is the color of the shirt?""):
            return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    # If no vehicle is found with the same color, query the image directly
    return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")"
161027428,Are there both windows and doors in the image?,"    image_patch = ImagePatch(image)
    doors_and_windows = image_patch.find(""window"") + image_patch.find(""door"")
    # Question assumes all are either windows or doors
    if len(doors_and_windows) < 2:
        # If there are less than 2, query the image directly
        return image_patch.simple_query(""Are there both windows and doors in the image?"")
    return bool_to_yesno(True) # True because there are at least 2 elements found"
16478246,Does the pillow to the right of the man have green color and large size?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch to the right of the man
    for pillow_patch in pillow_patches:
        is_green = pillow_patch.verify_property(""pillow"", ""green"")
        is_large = pillow_patch.verify_property(""pillow"", ""large"")
        if pillow_patch.horizontal_center > image_patch.horizontal_center:  # to the right of the man
            return bool_to_yesno(is_green and is_large)
    return bool_to_yesno(is_green and is_large)"
9450308,Is the happy person wearing a hat?,"    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    return happy_patches[0].verify_property(""person"", ""hat"")"
11850389,What place is this?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
17250452,What kind of appliance is on the right of the drawer?,"    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    for drawer_patch in drawer_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center > drawer_patch.horizontal_center:
                return appliance_patch.simple_query(""What kind of appliance is on the right of the drawer?"") # crop would include the appliance so keep it in the query
    # If no appliance is found to the right of the drawer, pick the first one
    return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")"
14857961,Is the lady to the right of a woman?,"    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    right_lady_patches = [patch for patch in lady_patches if patch.horizontal_center > image_patch.horizontal_center]
    for right_lady_patch in right_lady_patches:
        if right_lady_patch.exists(""woman""):
            return ""yes""
    for lady_patch in lady_patches:
        if lady_patch.horizontal_center < image_patch.horizontal_center:
            for other_lady_patch in lady_patches:
                if other_lady_patch.horizontal_center > lady_patch.horizontal_center and other_lady_patch.exists(""woman""):
                    return ""yes""
    return ""no""
"
132385,What cooking utensils are to the left of the pan on the right side?,"    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) < 2:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    right_pans = [pan for pan in pan_patches if pan.horizontal_center > (image_patch.width / 2)]
    for right_pan in right_pans:
        for utensil in image_patch.find(""utensil""):
            if utensil.horizontal_center < right_pan.horizontal_center:
                if utensil.horizontal_center > (image_patch.width / 2):
                    return utensil.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return ""none"""
9745131,Which color is the truck that is to the left of the lamps?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes one truck patch and one lamp patch
    for truck_patch in truck_patches:
        for lamp_patch in lamp_patches:
            if truck_patch.horizontal_center < lamp_patch.horizontal_center:
                return truck_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    # If no truck is found to the left of a lamp, query the image directly
    return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")"
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes one bird and one motorcycle
    for bird_patch in bird_patches:
        for motorcycle_patch in motorcycle_patches:
            if bird_patch.simple_query(""What is the color of the bird?"") == bird_patch.simple_query(""What is the color of the motorcycle?""):
                return bird_patch.simple_query(""What type of bird is it?"") # crop would include the bird and motorcycle so keep it in the query
    # If no bird is the same color as the motorcycle, query the image directly
    return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")"
867818,Is the man on the skateboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on a skateboard?"")
    man_patch = man_patches[0]
    is_on_board = man_patch.verify_property(""man"", ""skboard"")
    return bool_to_yesno(is_on_board)"
13896221,What is on the table?,"    image_patch = ImagePatch(image)
    object_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(object_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    for object_patch in object_patches:
        object_name = object_patch.simple_query(""What is on the table?"")
        if object_name == ""table"":
            return image_patch.simple_query(""What is on the table?"")
        else:
            return object_name"
1964517,What is the food that is above the white paper?,"    image_patch = ImagePatch(image)
    white_patches = image_patch.find(""white paper"")
    if len(white_patches) == 0:
        # If no white paper is found, query the image directly
        return image_patch.simple_query(""What is the food that is above the white paper?"")
    white_patch = white_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.vertical_center > white_patch.horizontal_center:
            return food_patch.simple_query(""What is the food that is above the white paper?"") # crop would include the paper so keep it in the query
    # If no food is above the white paper, pick the first one
    return white_patch.simple_query(""What is the food that is above the white paper?"")"
15705231,Is the shelf to the left of a cabinet?,"    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes one shelf patch and one cabinet patch
    for shelf_patch in shelf_patches:
        for cabinet_patch in cabinet_patches:
            if shelf_patch.horizontal_center < cabinet_patch.horizontal_center:
                return ""yes""
    return ""no""
"
15693846,Is the motorcycle parked on the grass?,"    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Is the motorcycle parked on the grass?"")
    if motorcycle_patches[0].verify_property(""ground"", ""grass""):
        return ""yes""
    else:
        return ""no"""
13872995,Who is jumping?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a dog or a cat?"")"
12584623,What is the person with the bag wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    person = person_patches[0]
    what_person_is_wearing = person.simple_query(""What is the person wearing?"")
    if what_person_is_wearing == ""bag, but not what it's for"":
        return person.simple_query(""What is the person with the bag wearing?"")
    if person.exists(""bag""):
        return person.simple_query(""What is the person wearing?"")
    else:
        return what_person_is_wearing"
7202064,"What is this, a bus or a truck?","    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this, a bus or a truck?"")"
16542208,Do you see either any beds or blankets there?,"    image_patch = ImagePatch(image)
    is_bed_or_blanket = image_patch.exists(""bed"") or image_patch.exists(""blanket"") or image_patch.exists(""blankets"") or image_patch.exists(""beds"")
    is_any = image_patch.exists(""any"") or image_patch.exists(""either"") or image_patch.exists(""or"")
    is_together = image_patch.exists(""together"") or image_patch.exists(""both"") or image_patch.exists(""both together"")
    is_fed = image_patch.exists(""fed"") or image_patch.exists(""fed by"") or image_patch.exists(""fed to"")
    is_fed_to = image_patch.exists(""fed to"") or image_patch.exists(""fed to by"") or image_patch.exists(""fed to by with"")
    is_fed_by = image_patch.exists(""fed by"") or image_patch.exists(""fed by with"") or image_patch.exists(""fed by to"")
    is_fed_to_by = image_patch.exists(""fed to by"") or image_patch.exists(""fed to by with"") or image_patch.exists(""fed to by to"")
    is_fed_to_by_with = image_patch.exists(""fed to by with"") or image_patch.exists(""fed to by with to"") or image_patch.exists(""fed to by with to by"")
    is_fed_to_by_to = image_patch.exists(""fed to by to"") or image_patch.exists(""fed to by to by"") or image_patch.exists(""fed to by to by to"")
    is_fed_to_by_to_by = image_patch.exists(""fed to by to by"") or image_patch.exists(""fed to by to by to"") or image_patch.exists(""fed to by to by to by"")
    is_fed_to_by_to_by_to = image_patch.exists(""fed to by to by to"") or image_patch.exists(""fed to by to by to by"") or image_patch.exists(""fed to by to by to by to"")
    is_fed_to_by_to_by_to_by = image_patch.exists(""fed to by to by to by to"") or image_patch.exists(""fed to by to by to by to by"") or image_patch.exists(""fed to by to by to by to by to"")
    is_fed_to_by_to_by_to_by_to = image_patch.exists(""fed to by to by to by to by to by"") or image_patch.exists(""fed to by to by to by to by to by to"") or image_patch.exists(""fed to by to by to by to by to by to by"
11700224,Do you see both lettuce and salad?,"    image_patch = ImagePatch(image)
    is Let     #  1  2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  # #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  # "
1067136,Is the ball on the tree?,"    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    tree_patches = image_patch.find(""tree"")
    # Question assumes one ball patch and one tree patch
    is_on_tree = False
    for ball_patch in ball_patches:
        for tree_patch in tree_patches:
            if ball_patch.vertical_center > tree_patch.horizontal_center:
                return ""no""
            if ball_patch.vertical_center < tree_patch.horizontal_center:
                is_on_tree = True
    if is_on_tree:
        return ""yes""
    else:
        return ""no""
"
364079,What kind of furniture is to the right of the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket query      #  1  #  2  3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 , 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 , # for  #  2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 "
2533062,How large is the ground the zebra is standing on?,"    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    if ground_patches[0].simple_query(""What is the ground like?"") == ""soft"":
        return ""small""
    else:
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")"
19683710,The clock is inside what?,"    image_patch = ImagePatch(image)
    # contains a relation (inside, on, next to, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the clock inside of?"")"
15674863,Is the racket in the top part?,"    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    if racket_patches[0].vertical_center > image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person that is wearing a shirt"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    shirtless_patches = image_patch.find(""shirtless person"")
    for shirtless_patch in shirtless_patches:
        if shirtless_patch.horizontal_center > person_patch.horizontal_center:
            return bool_to_yesno(shirtless_patch.exists(""shirtless person with a skateboard"")) # crop would include the shirtless person with a skateboard so keep it in the query
    for person_patch in person_patches:
        if person_patch.horizontal_center > person_patch.horizontal_center:
            return bool_to_yesno(person_patch.exists(""shirtless person with a skateboard"")) # crop would include the shirtless person with a skateboard so keep it in the query
    return bool_to_yesno(image_patch.exists(""shirtless person with a skateboard""))"
2292637,What is the color of the shirt that the passenger is wearing?,"    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    return passenger_patches[0].simple_query(""What is the color of the shirt that the passenger is wearing?"")"
9175259,What is the chair made of?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?,"    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    if carrot_patches[0].vertical_center > image_patch.vertical_center:
        return carrot_patches[0].simple_query(""How big is the carrot in the top of the picture?"") # crop would include the carrot so keep it in the query
    else:
        return carrot_patches[0].simple_query(""How big is the carrot in the top of the picture?"")"
1638685,What is the name of the vegetable that is on the yellow food?,"    image_patch = ImagePatch(image)
    yellow_patches = image_patch.find(""yellow"")
    # Question assumes one yellow patch
    if len(yellow_patches) == 0:
        # If no yellow is found, query the image directly
        return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    for yellow_patch in yellow_patches:
        yellow_patch_name = yellow_patch.simple_query(""What is the name of the yellow food?"")
        if yellow_patch_name == ""cake"":
            return ""none""  # no vegetable on cake
        if yellow_patch_name == ""carrot"":
            return ""carrot""
        if yellow_patch_name == ""pineapple"":
            return ""pineapple""
        if yellow_patch_name == ""lemon"":
            return ""lemon""
        if yellow_patch_name == ""yellow pepper"":
            return ""bell""
    # If no yellow is found, query the image directly
    return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")"
5828256,Is the clock on a tower?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock on a tower?"")
    if clock_patches[0].simple_query(""What is the clock on top of?"") == ""ground"":
        return ""no""
    else:
        return clock_patches[0].simple_query(""Is the clock on a tower?"")"
18937563,What kind of animal is orange?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is orange?"")"
14360113,What is the smiling woman holding?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""smiling woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    return woman_patches[0].simple_query(""What is the smiling woman holding?"")"
593188,Is the hair short?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    return person_patches[0].simple_query(""Is the hair short?"")"
10824666,Are there ladies to the left of the man that is wearing shorts?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is wearing shorts"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    ladies_patches = image_patch.find(""lady"")
    for lady_patch in ladies_patches:
        if lady_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no""
"
1890604,Is the gray car to the left or to the right of the garbage bin?,"    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    garbage_bin_patches = image_patch.find(""garbage bin"")
    for gray_car_patch in gray_car_patches:
        for garbage_bin_patch in garbage_bin_patches:
            if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
"
7574939,Is there any table or plate that is white?,"    image_patch = ImagePatch(image)
    is_white_table_or_plate = False
    objects_to_check = [""table"", ""plate""]
    for object_name in objects_to_check:
        objects = image_patch.find(object_name)
        for object_patch in objects:
            if object_patch.exists(object_name) and object_patch.verify_property(object_name, ""white""):
                is_white_table_or_plate = True
                return ""yes""
    return bool_to_yesno(is_white_table_or_plate)"
12252101,Is it outdoors?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
6943442,What cooking utensil is on the oven?,"    image_patch = ImagePatch(image)
    oven_utensil_patches = image_patch.find(""oven utensil"")
    # Question assumes only one oven utensil patch
    if len(oven_utensil_patches) == 0:
        # If no oven utensil is found, query the image directly
        return image_patch.simple_query(""What cooking utensil is on the oven?"")
    for oven_utensil_patch in oven_utensil_patches:
        return oven_utensil_patch.simple_query(""What cooking utensil is on the oven?"") # crop would include the utensil so keep it in the query"
2977077,The propeller that looks red is what pattern?,"    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller that looks red"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""What pattern is the propeller that looks red?"")
    return propeller_patches[0].simple_query(""What pattern is the propeller that looks red?"")"
11190306,Which kind of animal is to the left of the train?,"    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the left of the train?"")
    for train_patch in train_patches:
        animal_patches = image_patch.find(""rabbit"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center < train_patch.horizontal_center:
                return animal_patch.simple_query(""Which kind of animal is to the left of the train?"")
    # If no rabbit is found, query the image directly
    return image_patch.simple_query(""Which kind of animal is to the left of the train?"")"
5107190,Do you see both an airplane and a truck?,"    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"")"
12536783,What kind of animal is in front of the pole?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man that is wearing a t-shirt"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
"
18655269,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it indoors?"")"
1705569,Does the pot on top of the stove look black?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot on top of stove"")
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is the pot on top of the stove black?"")
    pot_patch = pot_patches[0]
    is_black = pot_patch.verify_property(""pot"", ""black"")
    return bool_to_yesno(is_black)"
1028569,Are there both a cyclist and a helmet in the photo?,"    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    is_both = is_cyclist and is_helmet
    return bool_to_yesno(is_both)"
13954115,Are there any men to the left of the person in the crowd?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) < 2:
        # If there is only one person, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    for person_patch in person_patches:
        for other_person_patch in person_patches:
            if person_patch.horizontal_center > other_person_patch.horizontal_center:
                if other_person_patch.exists(""man""):
                    return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?,"    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    device_patches = image_patch.find(""mouse"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < keyboard_patches[0].horizontal_center:
            return device_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")"
1017626,Who is inside the train?,"    # asks for the predicate of a relational verb (inside the train), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is inside the train?"")"
7650014,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    car_patches = image_patch.find(""car"")
    # Question assumes one person patch and one car patch
    for person_patch in person_patches:
        for car_patch in car_patches:
            if person_patch.horizontal_center < car_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the left of the car doing?"")
    # If no person is found to the left of the car, query the image directly
    return image_patch.simple_query(""What is the person to the left of the car doing?"")"
1310985,Is the yellow vehicle to the left of a lamp?,"    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    lamp_patches = image_patch.find(""lamp"")
    is_to_left = ""yes""
    for yellow_vehicle_patch in yellow_vehicle_patches:
        for lamp_patch in lamp_patches:
            if yellow_vehicle_patch.horizontal_center < lamp_patch.horizontal_center:
                return is_to_left
    return bool(yquery for query in [not is_to_left for lamp_patch in lamp_patches if (yquery =     ,  'for'  in  [  'is_to_left'  for  lamp_patch  in  lamp_patches  if  yellow_vehicle_patch.horizontal_center  <  lamp_patch.horizontal_center  ]  if  yquery[1]  ==  'query'  for  yquery  in  [  ('is_to_left'  ,  'query'  )  for  lamp_patch  in  lamp_patches  if  yellow_vehicle_patch.horizontal_center  <  lamp_patch.horizontal_center  ]  if  yquery[0]  ==  'is_to_left'  for  yquery  in  [  ('is_to_left'  ,  'bool'  )  for  lamp_patch  in  lamp_patches  if  yellow_vehicle_patch.horizontal_center  <  lamp_patch.horizontal_center  ]  if  yquery[0]  ==  'is_to_left'  for  yquery  in  [  ('is_to_left'  ,  'str'  )  for  lamp_patch  in  lamp_patches  if  yellow_vehicle_patch.horizontal_center  <  lamp_patch.horizontal_center  ]  if  yquery[0]  ==  'is_to_left'  for  yquery  in  [  ('is_to_left'  ,  'int'  )  for  lamp_patch  in  lamp_patches  if  yellow_vehicle_patch.horizontal_center  <  lamp_patch.horizontal_center  ]  if  yquery[0]  ==  'is_to_left'  for  yquery  in  [  ('is_to_left'  ,  'float'  )  for  lamp_patch  in  lamp_patches  if  yellow_vehicle_patch.horizontal_center  <  lamp_patch.horizontal_center  ]  if  yquery[0]  ==  'is_to_left'  for  yquery  in  [  ('is_to_left'  ,  'str'"
646935,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
9495263,Is the woman to the left or to the right of the man that wears a cap?,"    image_patch = ImagePatch(image)
    man_patches_with_cap = image_patch.find(""man that wears a cap"")
    if len(man_patches_with_cap) == 0:
        # If no man is found that wears a cap, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    man_patch_with_cap = man_patches_with Cap          5  2  #  # 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 , 2  2  # 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9"
946016,Do you think the animal that is sitting-down is small or large?,"    image_patch = ImagePatch(image)
    sitting_patches = image_patch.find(""sitting animal"")
    # Question assumes only one sitting animal patch
    if len(sitting_patches) == 0:
        # If no sitting animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    for sitting_patch in sitting_patches:
        size_patches = image_patch.find(""small animal"")
        for size_patch in size_patches:
            if sitting_patch.simple_query(""Is the animal small?"") == ""yes"":
                return ""small""
        size_patches = image_patch.find(""large animal"")
        for size_patch in size_patches:
            if sitting_patch.simple_query(""Is the animal large?"") == ""yes"":
                return ""large""
    # If no animal is found, query the image directly
    return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")"
9617920,Do the garbage can and the pan have the same color?,"    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    if len(garbage_can_patches) < 2:
        # If there is no second object, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    for garbage_can_patch in garbage_can_patches:
        pan_patches = image_patch.find(""pan"")
        for pan_patch in pan_patches:
            if garbage_can_patch.simple_query(""What is it?"") == ""pan"" and garbage_can_patch.simple_query(""What is it?"") == ""pan"":
                return bool_to_yesno(garbage_can_patch.verify_property(""pan"", ""color"")
                # crop would include the pan so keep it in the query
                )
    return bool_to_yesno(garbage_can_patches[0].verify_property(""garbage can"", ""color"")
    # If no second object, query the image directly
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan so keep it in the query
    # ) # crop would include the pan"
3578781,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    black_patches = image_patch.find(""black"")
    # Question assumes only one black item
    if len(black_patches) == 0:
        # If no black is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    black_patch = black_patches[0]
    black_item_type = black_patch.simple_query(""Which kind of item is black?"")
    if black_item_type == ""person"":
        return black_patch.simple_query(""Which kind of clothing is black?"")
    else:
        return black_patch.simple_query(""Which kind of clothing is black?"")"
4695656,What is the lamp on?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What is the lamp on?"")
    return lamp_patches[0].simple_query(""What is the lamp on?"")"
13696926,The homes that are to the left of the people have what color?,"    image_patch = ImagePatch(image)
    homes_to_the_left = [home for home in image_patch.find(""home"") if home.horizontal_center < image_patch.horizontal_center]
    for home in homes_to_the_left:
        color = home.simple_query(""What is the color of the home?"")
        return color
    # If no homes to the left, query the image directly
    return image_patch.simple_query(""The homes that are to the left of the people have what color?"")"
16946079,What is on the wall?,"    image_patch = ImagePatch(image)
    wall_patches = image_patch.find(""wall"")
    # Question assumes only one wall patch
    if len(wall_patches) == 0:
        # If no wall is found, query the image directly
        return image_patch.simple_query(""What is on the wall?"")
    return wall_patches[0].simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    if napkin_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
11513897,What appliance is the label on?,"    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    for appliance_patch in appliance_patches:
        label_patches = appliance_patch.find(""label"")
        for label_patch in label_patches:
            if label_patch.simple_query(""Is the label on the front?"") == ""yes"":
                return appliance_patch.simple_query(""What appliance is the label on?"") # crop would include the label so keep it in the query
    # If no label is on the front, query the image directly
    return appliance_patches[0].simple_query(""What appliance is the label on?"")"
8240644,What is the color of the bird's tail?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    return bird_patches[0].simple_query(""What is the color of the bird's tail?"")"
5245080,Is he to the right or to the left of the camera?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    if person_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17800894,Are there both a window and a door in the picture?,"    image_patch = ImagePatch(image)
    doors_and_windows = image_patch.find(""window"") + image_patch.find(""door"")
    # Question assumes each is a separate object
    if len(doors_and_windows) < 2:
        # If there are less than 2, query the image directly
        return image_patch.simple_query(""Are there both a window and a door in the picture?"")
    return bool_to_yesno(True) # True because there are at least 2 objects"
191027873,Where is the snowboard?,"    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Where is the snowboard?"")
    if snowboard_patches[0].vertical_center < image_patch.vertical_center:
        return ""left""
    else:
        return image_patch.simple_query(""Where is the snowboard?"") # crop would include the snowboard so keep it in the query"
1964079,Are the box and the paper the same color?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    if len(box_patches) < 2:
        # If there is no second box, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    for box_patch in box_patches:
        color = box_patch.simple_query(""What is the color of the box?"")
        for other_box_patch in box_patches:
            if other_box_patch != box_patch:
                if other_box_patch.simple_query(""What is the color of the box?"") == color:
                    return ""yes""
    return ""no""
"
