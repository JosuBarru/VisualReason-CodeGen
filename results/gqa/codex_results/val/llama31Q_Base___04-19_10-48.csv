sample_id,query,generated_code
13151559,Is the large hair both white and soft?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    for hair_patch in hair_patches:
        is_white = hair_patch.verify_property(""hair"", ""white"")
        is_soft = hair_patch.verify_property(""hair"", ""soft"")
        return bool_to_yesno(is_white and is_soft)"
18370956,Who is eating the cupcake?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is eating the cupcake?"")"
6436809,What is the guy wearing?," # assumes only one guy
    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    # Question assumes only one guy patch
    if len(guy_patches) == 0:
        # If no guy is found, query the image directly
        return image_patch.simple_query(""What is the guy wearing?"")
    return guy_patches[0].simple_query(""What is the guy wearing?"") # crop would include the wearing so keep it in the query"
117037,Which kind of food is to the right of the cabbage?," # assumes only one patch
    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    # Question assumes only one cabbage patch
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    for cabbage_patch in cabbage_patches:
        food_patches = image_patch.find(""food"")
        # Question assumes only one food patch
        if len(food_patches) == 0:
            return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
        for food_patch in food_patches:
            if food_patch.horizontal_center > cabbage_patch.horizontal_center:
                return food_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"") # if no food is found, query the image directly"
758936,Who wears the cap?," # assumes only one cap patch
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    return cap_patches[0].simple_query(""Who wears the cap?"") # crop would include the cap so keep it in the query"
111046440,Who is pointing?," # assumes only one pointing patch
    image_patch = ImagePatch(image)
    pointing_patches = image_patch.find(""pointing"")
    if len(pointing_patches) == 0:
        return image_patch.simple_query(""Who is pointing?"")
    return pointing_patches[0].simple_query(""Who is pointing?"") # crop would include the pointing so keep it in the query"
15804389,Is the woman's hair short or long?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    hair_length = woman_patch.simple_query(""What is the length of the woman's hair, short or long?"")
    return hair_length"
11445636,The women are watching who?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The women are watching who?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    dishwasher_patches = image_patch.find(""dishwasher"")
    # Question assumes only one dishwasher patch
    if len(dishwasher_patches) == 0:
        # If no dishwasher is found, query the image directly
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    for dishwasher_patch in dishwasher_patches:
        if dishwasher_patch.horizontal_center < woman_patch.horizontal_center:
            return ""yes""
    gas_stove_patches = image_patch.find(""gas stove"")
    # Question assumes only one gas stove patch
    if len(gas_stove_patches) == 0:
        return ""no""
    for gas_stove_patch in gas_stove_patches:
        if gas_stove_patch.horizontal_center > woman_patch.horizontal_center:
            return ""yes""
    return ""no"""
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?," # assumes only one baby patch
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    for baby_patch in baby_patches:
        bed_sheet_patches = image_patch.find(""bed sheet"")
        for bed_sheet_patch in bed_sheet_patches:
            if bed_sheet_patch.horizontal_center > baby_patch.horizontal_center:
                for piece_of_furniture_patch in image_patch.find(""piece of furniture""):
                    if piece_of_furniture_patch.horizontal_center > bed_sheet_patch.horizontal_center:
                        return piece_of_furniture_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    # If no piece of furniture is found, query the image directly
    return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")"
758958,Is there either any red pillow or snowboard?," # snowboard is red
    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)"
143816,Which place is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?," # assumes only one knife patch
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    if len(knife_patches) == 0:
        return image_patch.simple_query(""Which side is the knife on?"")
    knife_patch = knife_patches[0]
    if knife_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17829769,What is the computer mouse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?," # assumes only one toddler patch
    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    for toddler_patch in toddler_patches:
        return toddler_patch.simple_query(""What is the toddler holding?"")
    # If no toddler is found, query the image directly
    return image_patch.simple_query(""What is the toddler holding?"")"
2951242,Is the gray shirt sleeveless or short sleeved?," # assumes only one gray shirt
    image_patch = ImagePatch(image)
    gray_shirt_patches = image_patch.find(""gray shirt"")
    # Question assumes only one gray shirt patch
    if len(gray_shirt_patches) == 0:
        # If no gray shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    gray_shirt_patch = gray_shirt_patches[0]
    is_sleeveless = (gray_shirt_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"") == ""sleeveless"")
    if is_sleeveless:
        return ""sleeveless""
    else:
        return ""short sleeved"""
15241795,Is the tank top red?," # assumes only one tank top patch
    image_patch = ImagePatch(image)
    tank_top_patches = image_patch.find(""tank top"")
    if len(tank_top_patches) == 0:
        return ""no""
    return tank_top_patches[0].verify_property(""tank top"", ""red"")"
13885234,Which kind of animal is in front of the rocks?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""grape""))"
6455591,What type of furniture is white?," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture white?"") == ""yes"":
            return furniture_patch.simple_query(""What type of furniture is white?"")
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""What type of furniture is white?"")"
1033761,What is the blue clothing item?," # assumes only one blue clothing item
    image_patch = ImagePatch(image)
    blue_clothing_patches = image_patch.find(""blue clothing item"")
    if len(blue_clothing_patches) == 0:
        return image_patch.simple_query(""What is the blue clothing item?"")
    return blue_clothing_patches[0].simple_query(""What is the blue clothing item?"") # crop would include the blue clothing item so keep it in the query"
17726504,Who is wearing the glasses?," # assumes only one person wearing glasses
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for glasses_patch in glasses_patches:
        return glasses_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query"
13112902,Is the woman wearing a bracelet?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        is_wearing_bracelet = (woman_patch.simple_query(""Is the woman wearing a bracelet?"") == ""yes"")
        if is_wearing_bracelet:
            return ""yes""
    return ""no"""
698766,What is the food that is not white?," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.simple_query(""Is the food white?"") == ""yes"":
            return food_patch.simple_query(""What is the food that is not white?"")
    return food_patches[0].simple_query(""What is the food that is not white?"") # if no food is white, pick the first food"
1332276,Are there both a cup and a bottle in the picture?," # assumes only one cup and bottle
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?," # assumes only one patch
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    if len(glove_patches) == 0:
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"") # crop would include the glove so keep it in the query"
18103787,Who is holding the helmet?," # assumes only one helmet patch
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    for helmet_patch in helmet_patches:
        return helmet_patch.simple_query(""Who is holding the helmet?"")
    # If no helmet is found, query the image directly
    return image_patch.simple_query(""Who is holding the helmet?"")"
2143247,What is the name of the food to the left of the donut that looks little?," # assumes only one patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < donut_patch.horizontal_center:
            return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    return donut_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"") # crop would include the donut so keep it in the query"
3767951,Is the clock to the right or to the left of the man on the left?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        return ""no""
    for clock_patch in clock_patches:
        if clock_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
    return ""left"""
17655180,What's the sticker on?," # assumes only one sticker patch
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    if len(sticker_patches) == 0:
        return image_patch.simple_query(""What's the sticker on?"")
    return sticker_patches[0].simple_query(""What's the sticker on?"") # crop would include the object so keep it in the query"
3468831,In front of what is this table?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patch = image_patch.find(""car"")
    if len(car_patch) == 0:
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    people_patches = image_patch.find(""people"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > car_patch[0].horizontal_center:
            return ""yes""
    return ""no"""
7188981,Does the giraffe look adult?," # giraffe is an animal
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return giraffe_patches[0].simple_query(""Does the giraffe look adult?"") # crop would include the giraffe so keep it in the query"
16852802,Of what color are the pants?," # assumes only one patch
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"") # crop would include the pants so keep it in the query"
9619158,What kind of watercraft is full of men?," # assumes only one watercraft patch
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    for watercraft_patch in watercraft_patches:
        if watercraft_patch.simple_query(""Is the watercraft full of men?"") == ""yes"":
            return watercraft_patch.simple_query(""What kind of watercraft is full of men?"")
    # If no watercraft is full of men, pick the first watercraft
    return watercraft_patches[0].simple_query(""What kind of watercraft is full of men?"")"
3625225,On which side of the picture are the boats?," # assumes only one boat patch
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    if len(boat_patches) == 0:
        return image_patch.simple_query(""On which side of the picture are the boats, left or right?"")
    for boat_patch in boat_patches:
        if boat_patch.horizontal_center < image_patch.width / 2:
            return ""left""
        else:
            return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?," # assumes only two elephants
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only two elephant patches
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    for elephant_patch in elephant_patches:
        if elephant_patch.horizontal_center < elephant_patch.horizontal_center:
            return ""yes""
    return ""no"""
19834124,What is the girl holding?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    for girl_patch in girl_patches:
        return girl_patch.simple_query(""What is the girl holding?"") # crop would include the object held so keep it in the query"
4617704,Does the toilet seat that is not down appear to be white and open?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        return ""no""
    toilet_patch = toilet_patches[0]
    is_down = toilet_patch.simple_query(""Is the toilet seat down?"")
    if is_down == ""yes"":
        return ""no""
    is_white = toilet_patch.verify_property(""toilet"", ""white"")
    is_open = toilet_patch.verify_property(""toilet"", ""open"")
    return bool_to_yesno(is_white and is_open)"
5899539,Are there any bottles or mugs that are not purple?," # assumes only one bottle and mug patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    mug_patches = image_patch.find(""mug"")
    if len(bottle_patches) == 0 or len(mug_patches) == 0:
        # If no bottle or mug is found, query the image directly
        return image_patch.simple_query(""Are there any bottles or mugs that are not purple?"")
    for bottle_patch in bottle_patches:
        if bottle_patch.verify_property(""bottle"", ""purple""):
            return ""yes""
    for mug_patch in mug_patches:
        if mug_patch.verify_property(""mug"", ""purple""):
            return ""yes""
    return ""no"""
2631593,Which place is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?," # assumes only one living room patch
    image_patch = ImagePatch(image)
    living_room_patch = image_patch.find(""living room"")[0]
    men_patches = image_patch.find(""man"")
    for man_patch in men_patches:
        if man_patch.horizontal_center > living_room_patch.horizontal_center:
            return ""yes""
    return ""no"""
111054378,Is the small couch to the right or to the left of the bottle?," # assumes only one small couch and one bottle
    image_patch = ImagePatch(image)
    small_couch_patches = image_patch.find(""small couch"")
    # Question assumes only one small couch patch
    if len(small_couch_patches) == 0:
        # If no small couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    for small_couch_patch in small_couch_patches:
        bottle_patches = image_patch.find(""bottle"")
        # Question assumes only one bottle patch
        if len(bottle_patches) == 0:
            return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
        for bottle_patch in bottle_patches:
            if small_couch_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
9392411,Is the bottle to the right or to the left of the appliance on the left?," # assumes only one bottle and one appliance
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    for bottle_patch in bottle_patches:
        appliance_patches = image_patch.find(""appliance"")
        # Question assumes only one appliance patch
        if len(appliance_patches) == 0:
            return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center < image_patch.horizontal_center:
                return ""left""
    return ""right"""
16753829,What type of animal is sitting in the container in the bottom of the photo?," # assumes only one container patch
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    for container_patch in container_patches:
        if container_patch.vertical_center < image_patch.vertical_center:
            return container_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"") # if no container is found, query the image directly"
1345482,What is that train in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?," # assumes only one patch for each object
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return ""no""
    for car_patch in car_patches:
        palm_tree_patches = image_patch.find(""palm tree"")
        if len(palm_tree_patches) == 0:
            return ""no""
        for palm_tree_patch in palm_tree_patches:
            girl_patches = image_patch.find(""girl"")
            if len(girl_patches) == 0:
                return ""no""
            for girl_patch in girl_patches:
                if car_patch.horizontal_center > palm_tree_patch.horizontal_center and palm_tree_patch.horizontal_center > girl_patch.horizontal_center:
                    return ""yes""
    return ""no"""
459445,In which part is the silver device?," # assumes only one patch
    image_patch = ImagePatch(image)
    silver_patches = image_patch.find(""silver device"")
    if len(silver_patches) == 0:
        return image_patch.simple_query(""In which part is the silver device, the bottom or the top?"")
    if silver_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11786203,What is the man on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?," # assumes only one patch
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown"")
    if len(brown_patches) == 0:
        return ""no""
    for brown_patch in brown_patches:
        if brown_patch.horizontal_center > image_patch.horizontal_center:
            return ""chair""
    return ""door"""
131031372,What is the napkin in?," # assumes only one patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        return image_patch.simple_query(""What is the napkin in?"")
    return napkin_patches[0].simple_query(""What is the napkin in?"") # crop would include the object so keep it in the query"
1241681,Are there any people behind the white dessert?," # dessert is white
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.horizontal_center:
            return animal_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"") # if no animal is found, query the image directly"
8553578,What is the Pikachu doing?," # assumes only one Pikachu patch
    image_patch = ImagePatch(image)
    pikachu_patches = image_patch.find(""pikachu"")
    if len(pikachu_patches) == 0:
        # If no pikachu is found, query the image directly
        return image_patch.simple_query(""What is the Pikachu doing?"")
    return pikachu_patches[0].simple_query(""What is the Pikachu doing?"") # crop would include the action so keep it in the query"
16711804,"On which side is the car, the left or the right?"," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the large mountains?"") # crop would include the mountains so keep it in the query"
5107295,What is in the sky?," # sky is a predicate of a relational verb (in the sky), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?," # assumes only one watercraft patch
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    for watercraft_patch in watercraft_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            return watercraft_patch.best_text_match([""boat"", ""ship"", ""raft"", ""canoe"", ""yacht""])
    return image_patch.simple_query(""What kind of watercraft is the fruit on?"") # if no watercraft is found, query the image directly"
1827218,Is the bottle in the bottom of the image?," # assumes only one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
10938155,What color is the sky?," # sky is blue
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"") # sky is blue"
4893512,Does the sail look white or red?," # assumes only one sail patch
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    if len(sail_patches) == 0:
        return image_patch.simple_query(""Does the sail look white or red?"")
    sail_patch = sail_patches[0]
    return sail_patch.best_text_match([""white"", ""red""])"
3662784,Do you see either any traffic lights or cars?," # traffic light or car
    image_patch = ImagePatch(image)
    is_traffic_light = image_patch.exists(""traffic light"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_traffic_light or is_car)"
15515711,Are there any girls to the right of the yellow helmet?," # helmet is yellow
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6315316,Which kind of furniture is in front of the window?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?," # assumes only one appliance and one faucet
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center < faucet_patch.horizontal_center:
            return appliance_patch.simple_query(""What appliance is to the left of the faucet?"")
    return appliance_patches[0].simple_query(""What appliance is to the left of the faucet?"") # crop would include the faucet so keep it in the query"
41050828,What is the color of the jacket?," # assumes only one jacket patch
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"") # crop would include the jacket so keep it in the query"
610914,Is the green boat to the right or to the left of the wood house?," # assumes only one green boat and one wood house
    image_patch = ImagePatch(image)
    green_boat_patches = image_patch.find(""green boat"")
    wood_house_patches = image_patch.find(""wood house"")
    # Question assumes only one green boat patch
    if len(green_boat_patches) == 0:
        # If no green boat is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    for green_boat_patch in green_boat_patches:
        if green_boat_patch.horizontal_center > wood_house_patch.horizontal_center:
            return ""right""
    return ""left"""
13158346,Is the woman in the bottom part of the picture?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        if woman_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no"""
16318707,Are there either any colorful bikes or skateboards?," # assumes only one patch
    image_patch = ImagePatch(image)
    colorful_bike_patches = image_patch.find(""colorful bike"")
    colorful_skateboard_patches = image_patch.find(""colorful skateboard"")
    colorful_bike_or_skateboard_patches = colorful_bike_patches + colorful_skateboard_patches
    return bool_to_yesno(len(colorful_bike_or_skateboard_patches) > 0)"
2805654,Is the bag to the right or to the left of the bench?," # assumes only one bag patch
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15315607,What do you think is in the sky?," # sky is a predicate of a relational verb (in the sky), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?," # assumes only one truck patch
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What color is the truck near the gas station?"")
    truck_patch = truck_patches[0]
    gas_station_patches = image_patch.find(""gas station"")
    # Question assumes only one gas station patch
    if len(gas_station_patches) == 0:
        return ""no""
    for gas_station_patch in gas_station_patches:
        if truck_patch.horizontal_center > gas_station_patch.horizontal_center:
            return truck_patch.simple_query(""What color is the truck near the gas station?"")
    return truck_patch.simple_query(""What color is the truck near the gas station?"") # crop would include the gas station so keep it in the query"
12140940,"What are the headphones on, a sofa or a desk?"," # assumes only one headphone patch
    image_patch = ImagePatch(image)
    headphone_patches = image_patch.find(""headphones"")
    if len(headphone_patches) == 0:
        return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
    for headphone_patch in headphone_patches:
        is_on_sofa = headphone_patch.simple_query(""Is the headphone on a sofa or a desk?"")
        if is_on_sofa == ""sofa"":
            return ""sofa""
        else:
            return ""desk"""
727533,Does the bun look brown and toasted?," # assumes only one bun patch
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    if len(bun_patches) == 0:
        return ""no""
    bun_patch = bun_patches[0]
    is_brown = (bun_patch.simple_query(""What color is the bun?"") == ""brown"")
    is_toasted = (bun_patch.simple_query(""Is the bun toasted?"") == ""yes"")
    return bool_to_yesno(is_brown and is_toasted)"
61044602,What is in the brown basket?," # assumes only one basket patch
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""What is in the brown basket?"")
    return basket_patches[0].simple_query(""What is in the brown basket?"") # crop would include the brown basket so keep it in the query"
16827204,Is the marker different in color than the paper?," # assumes only one patch
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    marker_patch = marker_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    marker_color = marker_patch.simple_query(""What color is the marker?"")
    paper_color = paper_patch.simple_query(""What color is the paper?"")
    return bool_to_yesno(marker_color != paper_color)"
1284539,Is there a racket to the right of the man on the right side?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    right_man_horizontal_center = man_patch.horizontal_center
    right_man_vertical_center = man_patch.vertical_center
    right_man_width = man_patch.width
    right_man_height = man_patch.height
    right_man_lower = right_man_vertical_center - right_man_height / 2
    right_man_upper = right_man_vertical_center + right_man_height / 2
    right_man_left = right_man_horizontal_center - right_man_width / 2
    right_man_right = right_man_horizontal_center + right_man_width / 2
    right_man_patch = ImagePatch(image, right_man_left, right_man_lower, right_man_right, right_man_upper)
    racket_patches = right_man_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    return ""yes"""
1257391,What place is this?," # place is a general term
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"") # place is a general term"
16223517,What do you think is the color of the large device?," # crop would include the device so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the color of the large device?"")"
1024280,Does the shirt look long sleeved or sleeveless?," # shirt is the object
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    is_long_sleeved = shirt_patch.verify_property(""shirt"", ""long sleeved"")
    is_sleeveless = shirt_patch.verify_property(""shirt"", ""sleeveless"")
    if is_long_sleeved and is_sleeveless:
        return ""sleeveless""
    elif is_long_sleeved and not is_sleeveless:
        return ""long sleeved""
    elif not is_long_sleeved and is_sleeveless:
        return ""sleeveless""
    else:
        return ""long sleeved"""
2769463,Which kind of animal is lying in the chair?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal lying in the chair?"") == ""yes"":
            return animal_patch.simple_query(""Which kind of animal is lying in the chair?"")
    # If no animal is lying in the chair, query the image directly
    return image_patch.simple_query(""Which kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?," # chair is to the right of the crate
    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    # Question assumes only one white box patch
    if len(white_box_patches) == 0:
        # If no white box is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    for white_box_patch in white_box_patches:
        chair_patches = image_patch.find(""chair"")
        # Question assumes only one chair patch
        if len(chair_patches) == 0:
            return ""no""
        for chair_patch in chair_patches:
            if white_box_patch.horizontal_center > crate_patch.horizontal_center:
                return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?," # assumes only one flower pot patch
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return flower_pot_patches[0].verify_property(""flower pot"", ""clay"")"
191006281,Does the sky look clear and gray?," # sky is gray
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Does the sky look clear and gray?"")
    sky_patch = sky_patches[0]
    is_clear = sky_patch.simple_query(""Does the sky look clear and gray?"") == ""yes""
    if is_clear:
        return ""yes""
    else:
        return ""no"""
681336,Do you see hats or gloves that are white?," # assumes only one patch
    image_patch = ImagePatch(image)
    hat_patches = image_patch.find(""hat"")
    if len(hat_patches) == 0:
        return ""no""
    for hat_patch in hat_patches:
        is_white = hat_patch.verify_property(""hat"", ""white"")
        if is_white:
            return ""yes""
    glove_patches = image_patch.find(""glove"")
    if len(glove_patches) == 0:
        return ""no""
    for glove_patch in glove_patches:
        is_white = glove_patch.verify_property(""glove"", ""white"")
        if is_white:
            return ""yes""
    return ""no"""
1300368,What is on the cabinet that is to the right of the keyboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")"
172394,What is the animal to the left of the tap called?," # tap is a faucet
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""What is the animal to the left of the tap called?"")
    return image_patch.simple_query(""What is the animal to the left of the tap called?"") # if no animal is to the left, query the image directly"
738176,Is the chair on the right?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return ""no""
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
4194919,Is the child on the right of the picture?," # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        return ""no""
    for child_patch in child_patches:
        if child_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
3585327,Who is on the surfboard?," # assumes only one person on the surfboard
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard?"")"
1711172,What size are the packages the candle is on top of?," # assumes only one candle patch
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    for candle_patch in candle_patches:
        return candle_patch.simple_query(""What size are the packages the candle is on top of?"") # crop would include the candle so keep it in the query"
4353895,Who is on the snowboard on the right?," # assumes only one snowboard patch
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    if len(snowboard_patches) == 0:
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    for snowboard_patch in snowboard_patches:
        if snowboard_patch.horizontal_center > image_patch.horizontal_center:
            return snowboard_patch.simple_query(""Who is on the snowboard on the right?"")
    return image_patch.simple_query(""Who is on the snowboard on the right?"") # if no snowboard is found, query the image directly"
17929304,What is the vehicle that is on the road?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the crust?"")"
5672474,Is the plate to the left or to the right of the beer on the left?," # assumes only one beer patch
    image_patch = ImagePatch(image)
    beer_patches = image_patch.find(""beer"")
    # Question assumes only one beer patch
    if len(beer_patches) == 0:
        # If no beer is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    for beer_patch in beer_patches:
        plate_patches = image_patch.find(""plate"")
        # Question assumes only one plate patch
        if len(plate_patches) == 0:
            return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
        for plate_patch in plate_patches:
            if plate_patch.horizontal_center > beer_patch.horizontal_center:
                return ""right""
    return ""left"""
11341284,What is the pattern of the mattress on the street?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?," # fence is not a relational verb
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Are there any boys behind the fence?"")
    for boy_patch in boy_patches:
        if boy_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
19203395,Is the white toilet paper to the right or to the left of the toilet?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    toilet_patch = toilet_patches[0]
    white_toilet_paper_patches = image_patch.find(""white toilet paper"")
    # Question assumes only one white toilet paper patch
    if len(white_toilet_paper_patches) == 0:
        return ""no""
    for white_toilet_paper_patch in white_toilet_paper_patches:
        if white_toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
            return ""right""
    return ""left"""
1194938,Are there any airplanes in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any airplanes in front of the building?"")"
5350205,How clean is the road that the car is on the side of?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patch = image_patch.find(""car"")[0]
    road_patch = car_patch.crop(0, 0, car_patch.width, car_patch.height)
    return road_patch.simple_query(""How clean is the road that the car is on the side of?"")"
4256016,"In which part of the picture is the black van, the bottom or the top?"," # assumes only one black van
    image_patch = ImagePatch(image)
    black_van_patches = image_patch.find(""black van"")
    # Question assumes only one black van patch
    if len(black_van_patches) == 0:
        # If no black van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if black_van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    for fence_patch in fence_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > fence_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the fence doing?"")
    # If no person is to the right of the fence, query the image directly
    return image_patch.simple_query(""What is the person to the right of the fence doing?"")"
16471124,Does the horse have a different color than the boot?," # assumes only one horse and one boot
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    horse_patch = horse_patches[0]
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        return ""no""
    boot_patch = boot_patches[0]
    if horse_patch.horizontal_center > boot_patch.horizontal_center:
        return ""yes""
    return ""no"""
958247,Is the mouse to the right of a chair?," # assumes only one mouse patch
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    if len(mouse_patches) == 0:
        return ""no""
    for mouse_patch in mouse_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if chair_patch.horizontal_center > mouse_patch.horizontal_center:
                return ""yes""
    return ""no"""
11179512,The basket made of plastic is what color?," # basket made of plastic
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    return basket_patches[0].simple_query(""The basket made of plastic is what color?"") # crop would include the plastic so keep it in the query"
8816272,Do you see any elephant to the left of the bird?," # assumes only one elephant and one bird
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
    for elephant_patch in elephant_patches:
        if elephant_patch.horizontal_center < bird_patch.horizontal_center:
            return ""yes""
    return ""no"""
11168592,What is the animal in front of the lamp?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?," # assumes only one person wearing a jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Who is wearing the jacket?"")
    for jacket_patch in jacket_patches:
        return jacket_patch.simple_query(""Who is wearing the jacket?"") # crop would include the jacket so keep it in the query"
7398502,What is the food to the left of the girl in the bottom of the photo?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < image_patch.horizontal_center:
            return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"") # if no food is to the left of the girl, query the image directly"
5145864,What is the device that the camera is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that the camera is in front of?"")"
788143,Is the man on the surfboard?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    is_on_surfboard = (man_patch.simple_query(""Is the man on the surfboard?"") == ""yes"")
    return bool_to_yesno(is_on_surfboard)"
15854501,What device has the same color as the device in the box?," # box is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device has the same color as the device in the box?"")"
3228067,What is the child wearing?," # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    return child_patches[0].simple_query(""What is the child wearing?"") # crop would include the clothing so keep it in the query"
6817336,Is the blue sky behind a cathedral?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue sky behind a cathedral?"")"
6347271,"In which part of the image is the yellow pepper, the bottom or the top?"," # assumes only one yellow pepper patch
    image_patch = ImagePatch(image)
    yellow_pepper_patches = image_patch.find(""yellow pepper"")
    if len(yellow_pepper_patches) == 0:
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    yellow_pepper_patch = yellow_pepper_patches[0]
    if yellow_pepper_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal eating?"") == ""yes"":
            return animal_patch.simple_query(""What animal is the woman feeding?"")
    return image_patch.simple_query(""What animal is the woman feeding?"") # if no animal is eating, query the image directly"
3427727,On which side is the bucket?," # assumes only one bucket patch
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    bucket_patch = bucket_patches[0]
    if bucket_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
31050314,Is the small chimney in the bottom part of the picture?," # chimney is small
    image_patch = ImagePatch(image)
    chimney_patches = image_patch.find(""chimney"")
    # Question assumes only one chimney patch
    if len(chimney_patches) == 0:
        # If no chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    chimney_patch = chimney_patches[0]
    if chimney_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3503396,Are the pants purple?," # assumes only one patch
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    if len(pants_patches) == 0:
        return ""no""
    return pants_patches[0].verify_property(""pants"", ""purple"")"
11742862,Which kind of furniture is to the right of the paper towels?," # assumes only one patch of each object
    image_patch = ImagePatch(image)
    paper_towels_patch = image_patch.find(""paper towels"")[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > paper_towels_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    return paper_towels_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"") # crop would include the paper towels so keep it in the query"
5891809,What kind of furniture is gray?," # assumes only one gray patch
    image_patch = ImagePatch(image)
    gray_patches = image_patch.find(""gray"")
    if len(gray_patches) == 0:
        return image_patch.simple_query(""What kind of furniture is gray?"")
    return gray_patches[0].simple_query(""What kind of furniture is gray?"") # crop would include the gray so keep it in the query"
5370528,Is the hair white and long?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        return ""no""
    hair_patch = hair_patches[0]
    is_white = hair_patch.verify_property(""hair"", ""white"")
    is_long = hair_patch.verify_property(""hair"", ""long"")
    return bool_to_yesno(is_white and is_long)"
781153,Do you see trains near the lamp post that looks white?," # assumes only one train patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    if len(train_patches) == 0:
        return ""no""
    for train_patch in train_patches:
        is_near_lamp_post = (train_patch.simple_query(""Is the train near the lamp post that looks white?"") == ""yes"")
        if is_near_lamp_post:
            return ""yes""
    return ""no"""
5543456,Is the container to the left of the person that wears bracelets?," # assumes only one person wearing bracelets
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
    for container_patch in container_patches:
        person_wearing_bracelets_patches = image_patch.find(""person wearing bracelets"")
        for person_wearing_bracelets_patch in person_wearing_bracelets_patches:
            if person_wearing_bracelets_patch.horizontal_center > container_patch.horizontal_center:
                return ""yes""
    return ""no"""
163134,What do you think is on the roof?," # roof is a predicate of a relational verb (on the roof), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?," # assumes only one shoe patch
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
5511395,What is wrapped in paper?," # assumes only one object wrapped in paper
    image_patch = ImagePatch(image)
    wrapped_patches = image_patch.find(""wrapped in paper"")
    if len(wrapped_patches) == 0:
        return image_patch.simple_query(""What is wrapped in paper?"")
    return wrapped_patches[0].simple_query(""What is wrapped in paper?"") # crop would include the paper so keep it in the query"
5611256,Are there any couches in the picture?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch""))"
1162826,The man is in what?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is in what?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""The man is in what?"") # crop would include the man so keep him in the query"
81020685,Which color is the small house?," # assumes only one small house
    image_patch = ImagePatch(image)
    small_house_patches = image_patch.find(""small house"")
    if len(small_house_patches) == 0:
        return image_patch.simple_query(""Which color is the small house?"")
    return small_house_patches[0].simple_query(""Which color is the small house?"") # crop would include the house so keep it in the query"
19640724,Who is in the bathroom?," # assumes only one person in the bathroom
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"")"
289960,Do you see a racket to the right of the boy that is looking at the tie?," # assumes only one boy and one tie
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    boy_patch = boy_patches[0]
    tie_patches = image_patch.find(""tie"")
    # Question assumes only one tie patch
    if len(tie_patches) == 0:
        return ""no""
    tie_patch = tie_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > boy_patch.horizontal_center:
            return ""yes""
    return ""no"""
9957748,Does the hair appear to be long and brown?," # hair is long and brown
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair appear to be long and brown?"")
    return hair_patches[0].simple_query(""Does the hair appear to be long and brown?"") # crop would include the hair so keep it in the query"
21031610,What is the shoe that looks black and white resting on?," # assumes only one shoe patch
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    for shoe_patch in shoe_patches:
        if shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"") == ""grass"":
            return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"") # crop would include the grass so keep it in the query
    return shoe_patches[0].simple_query(""What is the shoe that looks black and white resting on?"") # crop would include the grass so keep it in the query"
12801921,What is the glass on?," # assumes only one glass patch
    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is the glass on?"")
    return glass_patches[0].simple_query(""What is the glass on?"") # crop would include the object on so keep it in the query"
16243948,Is the white pillow under the black animal?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    for pillow_patch in pillow_patches:
        if pillow_patch.vertical_center < animal_patch.vertical_center:
            return ""yes""
    return ""no"""
457770,What kind of clothing is striped?," # assumes only one patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""striped""):
            return clothing_patch.simple_query(""What kind of clothing is striped?"")
    # If no clothing is striped, pick the first clothing
    return clothing_patches[0].simple_query(""What kind of clothing is striped?"")"
12603153,Are the child's eyes blue and open?," # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        return ""no""
    child_patch = child_patches[0]
    is_blue = child_patch.verify_property(""child"", ""blue"")
    is_open = child_patch.verify_property(""child"", ""open"")
    return bool_to_yesno(is_blue and is_open)"
9480973,What is located on top of the tub?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?," # assumes only one fork patch
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    for fork_patch in fork_patches:
        if fork_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
13420253,On which side of the photo is the chair?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
4747006,What is the label on?," # assumes only one label patch
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What is the label on?"")
    return label_patches[0].simple_query(""What is the label on?"") # crop would include the label so keep it in the query"
3322787,What bird is to the left of the person that is wearing a shirt?," # assumes only one person wearing a shirt
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    for bird_patch in bird_patches:
        shirt_patches = image_patch.find(""person wearing a shirt"")
        for shirt_patch in shirt_patches:
            if shirt_patch.horizontal_center > bird_patch.horizontal_center:
                return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    # If no bird is to the left of the person wearing a shirt, pick the first bird
    return bird_patches[0].simple_query(""What bird is to the left of the person that is wearing a shirt?"")"
6399594,On which side is the man?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
6930120,Is the glass bowl on the right or on the left?," # assumes only one glass bowl patch
    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    if len(glass_bowl_patches) == 0:
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    glass_bowl_patch = glass_bowl_patches[0]
    if glass_bowl_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
12619961,What vehicles are to the left of the taxi?," # assumes only one taxi patch
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    for taxi_patch in taxi_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < taxi_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicles are to the left of the taxi?"")
    return image_patch.simple_query(""What vehicles are to the left of the taxi?"") # if no vehicle is found, query the image directly"
13362315,Is the basket on the shelf black and empty?," # shelf is not a relational verb so go step by step
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    for basket_patch in basket_patches:
        is_on_shelf = (basket_patch.simple_query(""Is the basket on the shelf?"") == ""yes"")
        if is_on_shelf:
            is_black = (basket_patch.simple_query(""Is the basket black?"") == ""yes"")
            is_empty = (basket_patch.simple_query(""Is the basket empty?"") == ""yes"")
            if is_black and is_empty:
                return ""yes""
    return ""no"""
3830854,What is the animal that is standing next to the donkey that is standing in the hay?," # assumes only one donkey patch
    image_patch = ImagePatch(image)
    donkey_patches = image_patch.find(""donkey"")
    # Question assumes only one donkey patch
    if len(donkey_patches) == 0:
        # If no donkey is found, query the image directly
        return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    donkey_patch = donkey_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > donkey_patch.horizontal_center:
            return animal_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    return animal_patches[0].simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"") # crop would include the hay so keep it in the query"
18382324,Is this a bed or a table?," # bed or table
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_table = image_patch.exists(""table"")
    if is_bed and is_table:
        return ""bed""
    elif is_bed:
        return ""bed""
    elif is_table:
        return ""table""
    else:
        return ""bed"""
18104571,"Which animal is that, a bird or a cat?"," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.horizontal_center:
            return ""bird""
    return ""cat"""
2913379,Do you see any fence or pot?," # assumes only one patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    pot_patches = image_patch.find(""pot"")
    return bool_to_yesno(fence_patches or pot_patches)"
9294271,What is in front of the fence the zebra is kept in?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")"
10741434,What is the vegetable that is on top of the plate called?," # assumes only one vegetable patch
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.vertical_center > plate_patch.vertical_center:
            return vegetable_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    return vegetable_patches[0].simple_query(""What is the vegetable that is on top of the plate called?"") # crop would include the plate so keep it in the query"
765962,Where is the car?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""Where is the car?"")
    return car_patches[0].simple_query(""Where is the car?"") # crop would include the car so keep it in the query"
12399262,Is there either a yellow truck or airplane?," # yellow truck or airplane
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)"
13964213,Is the man on the left of the photo?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
16171369,What is covered in the snow?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?," # assumes only one patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
5858491,Do you see any ropes on the fence that is on the left of the picture?," # fence is on the left
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
17834539,Are there any lamps in the scene?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp""))"
15658176,Who is wearing a helmet?," # helmet is a property
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for helmet_patch in helmet_patches:
        return helmet_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query"
14372400,Does that coat have red color?," # coat is the object, red is the property
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return coat_patches[0].verify_property(""coat"", ""red"")"
411886,Are there any curtains or blankets in this scene?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center < man_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    return furniture_patches[0].simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"") # crop would include the remote so keep it in the query"
51039491,Is the fence black or red?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the fence black or red?"")
    fence_patch = fence_patches[0]
    return fence_patch.best_text_match([""black"", ""red""])"
7425912,What animal is standing in the field?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing in the field?"")
    return animal_patches[0].simple_query(""What animal is standing in the field?"") # crop would include the field so keep it in the query"
13136338,What animal is in front of the dog which is to the right of the bird?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"") # if no animal is found, query the image directly"
3775066,Which color are the cabinets in the bottom of the picture?," # bottom of the picture
    image_patch = ImagePatch(image)
    cabinets_patches = image_patch.find(""cabinets"")
    # Question assumes only one cabinets patch
    if len(cabinets_patches) == 0:
        # If no cabinets are found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    for cabinets_patch in cabinets_patches:
        if cabinets_patch.vertical_center < image_patch.vertical_center:
            return cabinets_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"") # if no cabinets are found in the bottom, query the image directly"
17206239,Is the happy girl to the right of a player?," # assumes only one happy girl and one player
    image_patch = ImagePatch(image)
    happy_girl_patches = image_patch.find(""happy girl"")
    if len(happy_girl_patches) == 0:
        return ""no""
    for happy_girl_patch in happy_girl_patches:
        player_patches = image_patch.find(""player"")
        if len(player_patches) == 0:
            return ""no""
        for player_patch in player_patches:
            if player_patch.horizontal_center > happy_girl_patch.horizontal_center:
                return ""yes""
    return ""no"""
2992517,"What piece of furniture is not wooden, the table or the chair?"," # assumes only one table and one chair
    image_patch = ImagePatch(image)
    table_patch = image_patch.find(""table"")[0]
    chair_patch = image_patch.find(""chair"")[0]
    if not table_patch.verify_property(""table"", ""wooden""):
        return ""table""
    if not chair_patch.verify_property(""chair"", ""wooden""):
        return ""chair""
    return ""table"""
1827558,Which side of the image is the kettle on?," # assumes only one kettle patch
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    kettle_patch = kettle_patches[0]
    if kettle_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
2785208,Where is the man?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    elif man_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif man_patch.vertical_center > image_patch.vertical_center:
        return ""down""
    else:
        return ""up"""
6623967,Is the baby near the countertop chewing a computer mouses?," # TODO: fix
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouses?"")
    for baby_patch in baby_patches:
        if baby_patch.horizontal_center > image_patch.horizontal_center / 2:
            return ""yes""
    return ""no"""
12804807,Is the small bottle open or closed?," # assumes only one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.simple_query(""Is the bottle open or closed?"") == ""open"":
        return ""open""
    else:
        return ""closed"""
18437691,Is the clock small or large?," # assumes only one clock patch
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    if len(clock_patches) == 0:
        return image_patch.simple_query(""Is the clock small or large?"")
    clock_patch = clock_patches[0]
    if clock_patch.width < clock_patch.height:
        return ""small""
    else:
        return ""large"""
9482318,Are there either any glasses or bottles in this photo?," # glasses or bottles
    image_patch = ImagePatch(image)
    is_glass = image_patch.exists(""glass"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glass or is_bottle)"
12362819,Is the sky blue or dark?," # sky is a predicate of a relational verb (blue or dark), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue or dark?"")"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?," # assumes only one shelf and one cup
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    for shelf_patch in shelf_patches:
        cup_patches = image_patch.find(""cup"")
        for cup_patch in cup_patches:
            if shelf_patch.horizontal_center > cup_patch.horizontal_center:
                return shelf_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"") # if no shelf is found, query the image directly"
1416636,Are there both bridges and chandeliers in this photograph?," # bridge and chandelier
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?"," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?," # plate or orange
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?," # assumes only one patch
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    return bool_to_yesno(len(door_patches) > 0)"
13562221,What's the bear on?," # assumes only one bear patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the bear on?"") # crop would include the object on so keep it in the query"
9536851,Is the woman in front of the trees holding scissors?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")"
9682405,What is on the machine?," # machine is a general term
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the machine?"")"
8649435,What is on the white wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?," # logo is a property
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""Does the logo look red?"")
    return bool_to_yesno(logo_patches[0].verify_property(""logo"", ""red""))"
14301289,What type of vehicle is to the left of the white vehicle?," # assumes only one white vehicle
    image_patch = ImagePatch(image)
    white_vehicle_patches = image_patch.find(""white vehicle"")
    # Question assumes only one white vehicle patch
    if len(white_vehicle_patches) == 0:
        # If no white vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    for white_vehicle_patch in white_vehicle_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < white_vehicle_patch.horizontal_center:
                return vehicle_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"") # if no vehicle is found to the left of the white vehicle, query the image directly"
523976,Which kind of vehicle is large?," # assumes only one large vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle large?"") == ""yes"":
            return vehicle_patch.simple_query(""Which kind of vehicle is large?"")
    # If no vehicle is large, query the image directly
    return image_patch.simple_query(""Which kind of vehicle is large?"")"
3423213,Who is in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?," # assumes only one ottoman and one brown chair
    image_patch = ImagePatch(image)
    ottoman_patch = image_patch.find(""ottoman"")[0]
    brown_chair_patch = image_patch.find(""brown chair"")[0]
    if ottoman_patch.horizontal_center > brown_chair_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
5716578,Is there a laptop on the bed near the magazines?," # near is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")"
8215791,Is the porcelain toilet to the left or to the right of the small trash can?," # assumes only one toilet and trash can patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""porcelain toilet"")
    trash_can_patches = image_patch.find(""small trash can"")
    if len(toilet_patches) == 0 or len(trash_can_patches) == 0:
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    toilet_patch = toilet_patches[0]
    trash_can_patch = trash_can_patches[0]
    if toilet_patch.horizontal_center < trash_can_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17528455,What is in front of the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?," # goggles and gloves are the same object
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles is found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"")
    goggles_patch = goggles_patches[0]
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one gloves patch
    if len(gloves_patches) == 0:
        return ""no""
    gloves_patch = gloves_patches[0]
    goggles_color = goggles_patch.simple_query(""What color are the goggles?"")
    gloves_color = gloves_patch.simple_query(""What color are the gloves?"")
    return bool_to_yesno(goggles_color != gloves_color)"
947724,Is there any purple pillow or kite in this photograph?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kite = image_patch.exists(""kite"")
    is_purple = image_patch.verify_property(""pillow"", ""purple"") or image_patch.verify_property(""kite"", ""purple"")
    return bool_to_yesno(is_pillow or is_kite) and bool_to_yesno(is_purple)"
5679522,"What are the people to the right of the man doing, standing or sitting?"," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    right_patches = image_patch.find(""person"")
    for right_patch in right_patches:
        if right_patch.horizontal_center > man_patch.horizontal_center:
            return right_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    return man_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"") # crop would include the man so keep him in the query"
15492262,Which kind of furniture is white?," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture white?"") == ""yes"":
            return furniture_patch.simple_query(""Which kind of furniture is white?"")
    # If no furniture is white, query the image directly
    return image_patch.simple_query(""Which kind of furniture is white?"")"
151032547,Is the bear on the right side?," # assumes only one bear patch
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    if len(bear_patches) == 0:
        return ""no""
    return bool_to_yesno(bear_patches[0].horizontal_center > image_patch.horizontal_center)"
5698674,Are there either any planters or benches?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_planter = image_patch.exists(""planter"")
    is_bench = image_patch.exists(""bench"")
    return bool_to_yesno(is_planter or is_bench)"
19397103,What is the person that is standing staring at?," # asks for the predicate of a relational verb (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person that is standing staring at?"")"
11630681,What is the color of the necklace?," # assumes only one necklace patch
    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    if len(necklace_patches) == 0:
        # If no necklace is found, query the image directly
        return image_patch.simple_query(""What is the color of the necklace?"")
    return necklace_patches[0].simple_query(""What is the color of the necklace?"") # crop would include the necklace so keep it in the query"
248245,Is the table to the left or to the right of the fence?," # assumes only one table patch and one fence patch
    image_patch = ImagePatch(image)
    table_patch = image_patch.find(""table"")[0]
    fence_patch = image_patch.find(""fence"")[0]
    if table_patch.horizontal_center < fence_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
837033,Are there round windows or doors?," # round windows or doors
    image_patch = ImagePatch(image)
    is_round_window = image_patch.verify_property(""window"", ""round"")
    is_round_door = image_patch.verify_property(""door"", ""round"")
    return bool_to_yesno(is_round_window or is_round_door)"
5249150,Are there any bears or napkins in the picture?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < image_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the person?"") # if no vehicle is to the left, query the image directly"
61006749,Who is dressed in pink?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is dressed in pink?"")
    for person_patch in person_patches:
        is_dressed_in_pink = (person_patch.simple_query(""Is the person dressed in pink?"") == ""yes"")
        if is_dressed_in_pink:
            return person_patch.simple_query(""Who is dressed in pink?"") # crop would include the shirt so keep it in the query
    # If no person is dressed in pink, pick the first person
    return person_patches[0].simple_query(""Who is dressed in pink?"")"
6122955,Does the pillow have yellow color?," # pillow is yellow
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return pillow_patches[0].verify_property(""pillow"", ""yellow"")"
6861738,Is the old woman to the right or to the left of the faucet?," # assumes only one old woman and one faucet
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    # Question assumes only one old woman patch
    if len(old_woman_patches) == 0:
        # If no old woman is found, query the image directly
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    old_woman_patch = old_woman_patches[0]
    faucet_patches = image_patch.find(""faucet"")
    # Question assumes only one faucet patch
    if len(faucet_patches) == 0:
        return ""no""
    faucet_patch = faucet_patches[0]
    if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15833048,Which kind of animal is on the road?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""Which kind of animal is on the road?"")
    return image_patch.simple_query(""Which kind of animal is on the road?"") # crop would include the road so keep it in the query"
9524339,What animal is large?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What animal is large?"") == ""horse"":
            return animal_patch.simple_query(""What animal is large?"") # crop would include the horse so keep it in the query
    return animal_patches[0].simple_query(""What animal is large?"") # if no horse is found, pick the first animal"
18255749,How clean are the sheets the pillow is to the right of?," # pillow is to the right of the sheets
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheets_patches = image_patch.find(""sheets"")
    # Question assumes only one sheets patch
    if len(sheets_patches) == 0:
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    sheets_patch = sheets_patches[0]
    if pillow_patch.horizontal_center > sheets_patch.horizontal_center:
        return pillow_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    else:
        return sheets_patch.simple_query(""How clean are the sheets the pillow is to the right of?"") # pillow is to the right of the sheets"
19797097,What's the man wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What's the man wearing?"") # crop would include the clothing so keep it in the query"
6899090,Is the man to the right or to the left of the appliance that looks white?," # assumes only one man patch and one appliance patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patches = image_patch.find(""appliance that looks white"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""no""
    appliance_patch = appliance_patches[0]
    if appliance_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
3357701,Does the dog to the right of the other dog have white color?," # assumes only two dogs
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    for dog_patch in dog_patches:
        if dog_patch.horizontal_center > dog_patch.horizontal_center:
            return bool_to_yesno(dog_patch.verify_property(""dog"", ""white""))
    return ""no"""
2829418,What's the girl holding?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What's the girl holding?"")
    for girl_patch in girl_patches:
        return girl_patch.simple_query(""What's the girl holding?"") # crop would include the object so keep it in the query"
15930109,Which kind of vehicle is blue?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""blue""):
            return vehicle_patch.simple_query(""Which kind of vehicle is blue?"")
    # If no vehicle is blue, query the image directly
    return image_patch.simple_query(""Which kind of vehicle is blue?"")"
1525382,What type of vegetable is on the food with the cheese?," # assumes only one vegetable patch
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    if len(vegetable_patches) == 0:
        return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > image_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"") # if no vegetable is found, query the image directly"
8548980,Are there either players or hand soaps?," # assumes only one player patch
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?"," # assumes only one patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""made""):
            return food_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"") # if all food is made, query the image directly"
6423906,Which kind of food is on the plate?," # assumes only one plate patch
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    for plate_patch in plate_patches:
        food_patches = plate_patch.find(""food"")
        # Question assumes only one food patch
        if len(food_patches) == 0:
            # If no food is found, query the image directly
            return plate_patch.simple_query(""Which kind of food is on the plate?"")
        return food_patches[0].simple_query(""Which kind of food is on the plate?"") # crop would include the food so keep it in the query"
1993231,Are the animals in the image of different types?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return ""yes""
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What type of animal is it?"") == animal_patch.simple_query(""What type of animal is it?""):
            return ""no""
    return ""yes"""
13949656,Are there any people to the left of the tray?," # assumes only one tray patch
    image_patch = ImagePatch(image)
    tray_patches = image_patch.find(""tray"")
    # Question assumes only one tray patch
    if len(tray_patches) == 0:
        # If no tray is found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for tray_patch in tray_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center < tray_patch.horizontal_center:
                return ""yes""
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?," # assumes only one fresh pineapple patch
    image_patch = ImagePatch(image)
    fresh_pineapple_patches = image_patch.find(""fresh pineapple"")
    if len(fresh_pineapple_patches) == 0:
        return ""no""
    return fresh_pineapple_patches[0].simple_query(""Does the fresh pineapple appear to be ripe?"") # crop would include the pineapple so keep it in the query"
9392591,Are there chairs or smoothies?," # smoothies are not chairs
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?," # assumes only one sheep patch
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    for sheep_patch in sheep_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > sheep_patch.horizontal_center:
                return animal_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    # If no animal is to the right of the sheep, query the image directly
    return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")"
9896138,Are there any boxes to the left of the screen in the picture?," # assumes no boxes on the right
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in box_patches:
        if box_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1400333,What do you think is the man on?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What do you think is the man on?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What do you think is the man on?"") # crop would include the object so keep it in the query"
13105327,Is the boot white or orange?," # assumes only one boot patch
    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    if len(boot_patches) == 0:
        return image_patch.simple_query(""Is the boot white or orange?"")
    return boot_patches[0].best_text_match([""white"", ""orange""])"
3659880,Does the wood boat have silver color?," # wood boat is a compound object
    image_patch = ImagePatch(image)
    wood_boat_patches = image_patch.find(""wood boat"")
    # Question assumes only one wood boat patch
    if len(wood_boat_patches) == 0:
        # If no wood boat is found, query the image directly
        return image_patch.simple_query(""Does the wood boat have silver color?"")
    return bool_to_yesno(wood_boat_patches[0].verify_property(""wood boat"", ""silver""))"
1827802,Is the red pot on the appliance to the right of the mixer?," # assumes only one red pot patch
    image_patch = ImagePatch(image)
    red_pot_patch = image_patch.find(""red pot"")[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center > red_pot_patch.horizontal_center:
            return ""yes""
    return ""no"""
14809102,The phone that is in front of the camera is of what color?," # assumes only one phone patch
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    if len(phone_patches) == 0:
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    for phone_patch in phone_patches:
        if phone_patch.horizontal_center > image_patch.horizontal_center:
            return phone_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    return image_patch.simple_query(""The phone that is in front of the camera is of what color?"") # if no phone is found, query the image directly"
61001545,What type of food is to the left of the silver spoon?," # assumes only one patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < image_patch.horizontal_center:
            return food_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"") # if no food is to the left, query the image directly"
799463,Are there both a window and a door in the picture?," # assumes only one window and one door
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
11260725,Does the water have small size and white color?," # water is the object
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Does the water have small size and white color?"")
    for water_patch in water_patches:
        is_small = (water_patch.simple_query(""What is the size of the water?"") == ""small"")
        is_white = (water_patch.simple_query(""What is the color of the water?"") == ""white"")
        if is_small and is_white:
            return ""yes""
    return ""no"""
2397653,Are there any fences that are white?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    for fence_patch in fence_patches:
        is_white = fence_patch.verify_property(""fence"", ""white"")
        if is_white:
            return ""yes""
    return ""no"""
1554603,Who is holding the animal?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    for animal_patch in animal_patches:
        return animal_patch.simple_query(""Who is holding the animal?"") # crop would include the animal so keep it in the query"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patch = man_patches[0]
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        return ""no""
    stroller_patch = stroller_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    people_patch = people_patches[0]
    if stroller_patch.horizontal_center > people_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
8988476,What kind of furniture is presented in this photo?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    for man_patch in man_patches:
        for backpack_patch in backpack_patches:
            if backpack_patch.horizontal_center > man_patch.horizontal_center:
                return backpack_patch.simple_query(""What is the man with the backpack holding?"")
    # If no backpack is found, query the image directly
    return image_patch.simple_query(""What is the man with the backpack holding?"")"
91058050,Are there both mouse pads and computer mice in the photograph?," # mouse pad and computer mouse
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_computer_mouse = image_patch.exists(""computer mouse"")
    return bool_to_yesno(is_mouse_pad and is_computer_mouse)"
1972064,Is the person in front of the tree wearing jeans?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")"
167162,Is there a bike to the right of the purse that is to the right of the woman?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    bike_patches = image_patch.find(""bike"")
    # Question assumes only one bike patch
    if len(bike_patches) == 0:
        # If no bike is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    for bike_patch in bike_patches:
        purse_patches = image_patch.find(""purse"")
        # Question assumes only one purse patch
        if len(purse_patches) == 0:
            return ""no""
        for purse_patch in purse_patches:
            woman_patches = image_patch.find(""woman"")
            # Question assumes only one woman patch
            if len(woman_patches) == 0:
                return ""no""
            for woman_patch in woman_patches:
                if purse_patch.horizontal_center > woman_patch.horizontal_center:
                    if bike_patch.horizontal_center > purse_patch.horizontal_center:
                        return ""yes""
    return ""no"""
1695388,Who is wearing a shirt?," # shirt is not part of the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for shirt_patch in shirt_patches:
        wearing_shirt = (shirt_patch.simple_query(""Is the shirt wearing a shirt?"") == ""yes"")
        if wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no shirt is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?," # assumes only one woman and one man
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    for woman_patch in woman_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
        for man_patch in man_patches:
            if woman_patch.horizontal_center < man_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
16921984,What is the bent man to the right of the other men doing?," # assumes only one bent man patch
    image_patch = ImagePatch(image)
    bent_man_patches = image_patch.find(""bent man"")
    if len(bent_man_patches) == 0:
        # If no bent man is found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    bent_man_patch = bent_man_patches[0]
    right_man_patches = image_patch.find(""man"")
    for right_man_patch in right_man_patches:
        if bent_man_patch.horizontal_center > right_man_patch.horizontal_center:
            return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"") # crop would include the bent man so keep it in the query"
12175564,What animal are the men to the right of the girl leading?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patch = image_patch.find(""girl"")[0]
    men_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(men_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    for man_patch in men_patches:
        if man_patch.horizontal_center > girl_patch.horizontal_center:
            return man_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    return girl_patch.simple_query(""What animal are the men to the right of the girl leading?"") # crop would include the girl so keep her in the query"
1219606,On which side of the image is the house?," # assumes only one house patch
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    house_patch = house_patches[0]
    if house_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1770499,Is the black suitcase to the right or to the left of the person on the left?," # assumes only one suitcase and one person on the left
    image_patch = ImagePatch(image)
    suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one suitcase patch
    if len(suitcase_patches) == 0:
        # If no suitcase is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    suitcase_patch = suitcase_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return ""no""
    person_patch = person_patches[0]
    if suitcase_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
5282406,Is the pot to the left of a chair?," # assumes only one pot and one chair
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    chair_patches = image_patch.find(""chair"")
    if len(pot_patches) == 0 or len(chair_patches) == 0:
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    pot_patch = pot_patches[0]
    chair_patch = chair_patches[0]
    if pot_patch.horizontal_center < chair_patch.horizontal_center:
        return ""yes""
    return ""no"""
10914401,Where are the people?," # assumes only one patch
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    if len(people_patches) == 0:
        return image_patch.simple_query(""Where are the people?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        elif people_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
        elif people_patch.vertical_center < image_patch.vertical_center:
            return ""bottom""
        else:
            return ""top"""
1919722,What animal is eating the grass?," # crop would include eating so keep it in the query
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if not animal_patch.verify_property(""animal"", ""eating""):
            return animal_patch.simple_query(""What animal is eating the grass?"") # crop would include eating so keep it in the query
    # If no animal is not eating, query the image directly
    return image_patch.simple_query(""What animal is eating the grass?"") # crop would include eating so keep it in the query"
9681008,Who is wearing a helmet?," # helmet is a property
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for helmet_patch in helmet_patches:
        return helmet_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query"
16861675,Who is on the surfboard in the middle of the photo?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"") # crop would include the surfboard so keep it in the query"
10947426,What is the color of the lizard beside the banana?," # assumes only one lizard and banana patch
    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    if len(lizard_patches) == 0:
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    lizard_patch = lizard_patches[0]
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    banana_patch = banana_patches[0]
    if lizard_patch.horizontal_center > banana_patch.horizontal_center:
        return lizard_patch.simple_query(""What is the color of the lizard beside the banana?"")
    else:
        return banana_patch.simple_query(""What is the color of the lizard beside the banana?"") # crop would include the banana so keep it in the query"
18200684,Is the wine glass in the top or in the bottom part?," # assumes only one wine glass patch
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.vertical_center > image_patch.vertical_center:
        return ""top""
    else:
        return ""bottom"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < image_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"") # if no vehicle is to the left, query the image directly"
171012637,Is the teddy bear to the right of a suitcase?," # assumes only one suitcase and teddy bear
    image_patch = ImagePatch(image)
    suitcase_patches = image_patch.find(""suitcase"")
    teddy_bear_patches = image_patch.find(""teddy bear"")
    if len(suitcase_patches) == 0 or len(teddy_bear_patches) == 0:
        return ""no""
    suitcase_patch = suitcase_patches[0]
    teddy_bear_patch = teddy_bear_patches[0]
    if suitcase_patch.horizontal_center > teddy_bear_patch.horizontal_center:
        return ""yes""
    return ""no"""
19861372,Is the woman's hair long or short?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    hair_length = woman_patch.simple_query(""What is the length of the woman's hair, long or short?"")
    return hair_length"
623889,Are both the television and the armchair the same color?," # assumes only one patch for each object
    image_patch = ImagePatch(image)
    is_tv = image_patch.exists(""television"")
    is_armchair = image_patch.exists(""armchair"")
    if is_tv and is_armchair:
        tv_patch = image_patch.find(""television"")[0]
        armchair_patch = image_patch.find(""armchair"")[0]
        return bool_to_yesno(tv_patch.verify_property(""television"", ""color"") == armchair_patch.verify_property(""armchair"", ""color""))
    return ""yes"""
4917605,Is the shoe white or brown?," # assumes only one shoe patch
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    if len(shoe_patches) == 0:
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
91055143,What is on the table?," # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    return table_patches[0].simple_query(""What is on the table?"") # crop would include the table so keep it in the query"
5430643,What do you think sits on the plate to the left of the tomato?," # assumes only one plate patch
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    for plate_patch in plate_patches:
        tomato_patches = image_patch.find(""tomato"")
        for tomato_patch in tomato_patches:
            if tomato_patch.horizontal_center > plate_patch.horizontal_center:
                return plate_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"") # if no tomato is found, query the image directly"
523936,Is the woman in the top part of the picture?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        if woman_patch.vertical_center > image_patch.vertical_center / 2:
            return ""yes""
    return ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?," # assumes only one bed patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    for bottle_patch in bottle_patches:
        if bottle_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
14292161,The pot is of which color?," # assumes only one pot patch
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].simple_query(""The pot is of which color?"") # crop would include the pot so keep it in the query"
17495150,"What device is black, the microphone or the laptop?"," # assumes only one patch
    image_patch = ImagePatch(image)
    microphone_patches = image_patch.find(""microphone"")
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one microphone patch
    if len(microphone_patches) == 0:
        # If no microphone is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    if len(laptop_patches) == 0:
        return microphone_patches[0].simple_query(""What device is black, the microphone or the laptop?"")
    if microphone_patches[0].horizontal_center > laptop_patches[0].horizontal_center:
        return ""microphone""
    else:
        return ""laptop"""
1521847,Is the cat on a desk?," # assumes only one cat patch
    image_patch = ImagePatch(image)
    cat_patch = image_patch.find(""cat"")[0]
    is_on_desk = cat_patch.simple_query(""Is the cat on a desk?"")
    return bool_to_yesno(is_on_desk)"
16465081,The man is holding what?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""The man is holding what?"") # crop would include the object so keep it in the query"
17387032,What is on the post?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")"
18906705,How big is the crowd?," # assumes only one patch
    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""crowd"")
    if len(crowd_patches) == 0:
        return image_patch.simple_query(""How big is the crowd?"")
    return crowd_patches[0].simple_query(""How big is the crowd?"") # crop would include the crowd so keep it in the query"
6157200,Does the sign on the pole have white color?," # assumes only one sign patch
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    if len(sign_patches) == 0:
        return ""no""
    sign_patch = sign_patches[0]
    return bool_to_yesno(sign_patch.verify_property(""sign"", ""white""))"
16760226,What's the laptop in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?," # assumes only one bed patch
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    bed_patch = bed_patches[0]
    return bed_patch.simple_query(""How large is the bed?"") # crop would include the bed so keep it in the query"
14143886,Where is the person with the luggage standing on?," # assumes only one patch
    image_patch = ImagePatch(image)
    luggage_patches = image_patch.find(""luggage"")
    # Question assumes only one luggage patch
    if len(luggage_patches) == 0:
        # If no luggage is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    for luggage_patch in luggage_patches:
        return luggage_patch.simple_query(""Where is the person with the luggage standing on?"") # crop would include the luggage so keep it in the query"
19872633,Are there either any fire extinguishers or pepper shakers?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)"
12755010,Is the bottle to the right of a napkin?," # assumes only one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    for bottle_patch in bottle_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if bottle_patch.horizontal_center > napkin_patch.horizontal_center:
                return ""yes""
    return ""no"""
2747001,Are there any soaps or bombs?," # bomb is a type of soap
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?," # assumes only one patch
    image_patch = ImagePatch(image)
    baby_giraffe_patches = image_patch.find(""baby giraffe"")
    elephant_patches = image_patch.find(""elephant"")
    if len(baby_giraffe_patches) == 0 and len(elephant_patches) == 0:
        return image_patch.simple_query(""Do you see baby giraffes or elephants?"")
    if len(baby_giraffe_patches) == 0:
        return ""no""
    if len(elephant_patches) == 0:
        return ""yes""
    return ""yes"""
6898877,What is the sign on?," # assumes only one sign patch
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    if len(sign_patches) == 0:
        return image_patch.simple_query(""What is the sign on?"")
    return sign_patches[0].simple_query(""What is the sign on?"") # crop would include the sign so keep it in the query"
15862812,What is the sticker on?," # assumes only one sticker patch
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    return sticker_patches[0].simple_query(""What is the sticker on?"") # crop would include the sticker so keep it in the query"
141031470,On which side of the image is the white towel?," # assumes only one white towel patch
    image_patch = ImagePatch(image)
    white_towel_patches = image_patch.find(""white towel"")
    if len(white_towel_patches) == 0:
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    white_towel_patch = white_towel_patches[0]
    if white_towel_patch.horizontal_center == image_patch.horizontal_center:
        return ""center""
    if white_towel_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    return ""left"""
41026846,Who rides a motorcycle?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the bathtub the towel is on?"")"
7469617,Is the man to the left or to the right of the person that is to the left of the people?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""left""
    people_patch = people_patches[0]
    if man_patch.horizontal_center < people_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
64308,What's located on top of the soup?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?," # assumes only one fence and bench patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return ""no""
    fence_patch = fence_patches[0]
    bench_patches = image_patch.find(""bench"")
    if len(bench_patches) == 0:
        return ""no""
    bench_patch = bench_patches[0]
    fence_material = fence_patch.simple_query(""What material is the fence made of?"")
    bench_material = bench_patch.simple_query(""What material is the bench made of?"")
    return bool_to_yesno(fence_material == bench_material)"
3196255,Are there helmets that are not white?," # helmet is a specific type of hat
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmet_patches:
        is_white = helmet_patch.simple_query(""Is the helmet white?"") == ""yes""
        if not is_white:
            return ""yes""
    return ""no"""
2992630,Is the bowl to the right or to the left of the man that is drinking?," # assumes only one man and one bowl
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return ""no""
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
    return ""left"""
513894,Is the person above the sand wearing glasses?," # assumes only one patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    for person_patch in person_patches:
        if person_patch.vertical_center > image_patch.vertical_center / 2:
            return person_patch.simple_query(""Is the person wearing glasses?"")
    return ""no"""
14167599,Is the color of the life preserver the same as that of the house?," # assumes only one life preserver and one house
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    for life_preserver_patch in life_preserver_patches:
        house_patches = image_patch.find(""house"")
        for house_patch in house_patches:
            if life_preserver_patch.horizontal_center > house_patch.horizontal_center:
                return ""yes""
    return ""no"""
18264755,How is the weather?," # weather is not a property, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.exists(""toilet"") and animal_patch.verify_property(""toilet"", ""closed"") == False:
            return animal_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    # If no animal is looking into the toilet that is not closed, query the image directly
    return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")"
8641613,Do you see any helmets in the picture that are not red?," # helmet is a noun, so go step by step
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        is_red = helmet_patch.verify_property(""helmet"", ""red"")
        if not is_red:
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?," # assumes only one happy patch
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy"")
    if len(happy_patches) == 0:
        # If no happy is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    return happy_patches[0].simple_query(""What does the happy person hold?"") # crop would include the happiness so keep it in the query"
8461507,Are there either tissue boxes or lamps in the picture?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is it?"")
    return animal_patches[0].simple_query(""Which kind of animal is it?"") # crop would include the animal so keep it in the query"
19102906,What type of drink is to the left of the plate?," # assumes only one plate patch
    image_patch = ImagePatch(image)
    drink_patches = image_patch.find(""drink"")
    # Question assumes only one drink patch
    if len(drink_patches) == 0:
        # If no drink is found, query the image directly
        return image_patch.simple_query(""What type of drink is to the left of the plate?"")
    for drink_patch in drink_patches:
        if drink_patch.horizontal_center < image_patch.horizontal_center:
            return drink_patch.simple_query(""What type of drink is to the left of the plate?"")
    return image_patch.simple_query(""What type of drink is to the left of the plate?"") # if no drink is to the left, query the image directly"
18315440,Is the sky cloudy and blue?," # assumes only one patch
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    if len(sky_patches) == 0:
        return ""no""
    sky_patch = sky_patches[0]
    is_cloudy = sky_patch.verify_property(""sky"", ""cloudy"")
    is_blue = sky_patch.verify_property(""sky"", ""blue"")
    return bool_to_yesno(is_cloudy and is_blue)"
453061,Is the fork on the right of the image?," # assumes only one fork patch
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        return ""no""
    for fork_patch in fork_patches:
        if fork_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
71002567,"What is the broccoli on, a table or a nightstand?"," # assumes only one broccoli patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")"
17465089,Is the field green and small?," # assumes only one field patch
    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    if len(field_patches) == 0:
        return ""no""
    field_patch = field_patches[0]
    is_green = field_patch.verify_property(""field"", ""green"")
    is_small = field_patch.verify_property(""field"", ""small"")
    return bool_to_yesno(is_green and is_small)"
16150157,What is on the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?," # assumes only one van and one SUV
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    van_patch = van_patches[0]
    for van_patch in van_patches:
        if van_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
    return ""right"""
15101358,Is the girl to the left of the boy?," # assumes only one girl and one boy
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    boy_patches = image_patch.find(""boy"")
    if len(girl_patches) == 0 or len(boy_patches) == 0:
        return ""no""
    girl_patch = girl_patches[0]
    boy_patch = boy_patches[0]
    if girl_patch.horizontal_center < boy_patch.horizontal_center:
        return ""yes""
    return ""no"""
12785181,What animals are in the grass?," # assumes only one patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.lower > image_patch.upper / 2:
            return animal_patch.simple_query(""What animals are in the grass?"")
    return image_patch.simple_query(""What animals are in the grass?"") # if no animals are in the grass, query the image directly"
348093,Are there both an apple and a bag in the picture?," # assumes only one apple and one bag
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)"
314181,Which sign is shown?," # assumes only one sign
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    if len(sign_patches) == 0:
        return image_patch.simple_query(""Which sign is shown?"")
    return sign_patches[0].simple_query(""Which sign is shown?"") # crop would include the sign so keep it in the query"
16275314,"On which side is the woman, the right or the left?"," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
19535592,Who runs on the sand?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who runs on the sand?"")"
156886,Is there a giraffe near the bush?," # giraffe is not near the bush
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    for giraffe_patch in giraffe_patches:
        bush_patches = image_patch.find(""bush"")
        # Question assumes only one bush patch
        if len(bush_patches) == 0:
            return ""no""
        for bush_patch in bush_patches:
            if giraffe_patch.horizontal_center > bush_patch.horizontal_center:
                return ""yes""
    return ""no"""
1756642,Which place is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?," # shirt is not a property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    for shirt_patch in shirt_patches:
        shirt_wearer_patches = image_patch.find(""shirt wearer"")
        # Question assumes only one shirt wearer patch
        if len(shirt_wearer_patches) == 0:
            return image_patch.simple_query(""Who wears the shirt?"")
        return shirt_wearer_patches[0].simple_query(""Who wears the shirt?"") # crop would include the shirt so keep it in the query"
1972390,What type of animal is standing in the field?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What type of animal is standing in the field?"") == ""horse"":
            return animal_patch.simple_query(""What type of animal is not eating?"") # crop would include eating so keep it in the query
    return animal_patches[0].simple_query(""What type of animal is standing in the field?"") # if no horse is found, query the image directly"
14579439,Is the stuffed animal on the right?," # assumes only one patch
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    if len(stuffed_animal_patches) == 0:
        return ""no""
    return bool_to_yesno(stuffed_animal_patches[0].horizontal_center > image_patch.horizontal_center)"
6645395,Is the gray building behind the passengers that are boarding the airplane?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")"
19610200,Is the fence metallic?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return ""no""
    fence_patch = fence_patches[0]
    return bool_to_yesno(fence_patch.verify_property(""fence"", ""metallic""))"
5299471,What does the girl that to the left of the trashcan carry?," # trashcan is a relational verb
    image_patch = ImagePatch(image)
    trashcan_patches = image_patch.find(""trashcan"")
    # Question assumes only one trashcan patch
    if len(trashcan_patches) == 0:
        # If no trashcan is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    trashcan_patch = trashcan_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    girl_patch = girl_patches[0]
    if girl_patch.horizontal_center < trashcan_patch.horizontal_center:
        return girl_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    return trashcan_patch.simple_query(""What does the girl that to the right of the trashcan carry?"") # trashcan is a relational verb"
7548203,Which kind of vegetable is on the pizza?," # assumes only one vegetable patch
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > image_patch.horizontal_center:
            return vegetable_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    return image_patch.simple_query(""Which kind of vegetable is on the pizza?"") # if no vegetable is found, query the image directly"
91027737,On which side is the pan?," # assumes only one pan patch
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan, left or right?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?," # assumes only one patch
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    for black_car_patch in black_car_patches:
        if black_car_patch.vertical_center > image_patch.vertical_center:
            return ""yes""
    return ""no"""
6144031,Who is in the living room?," # assumes only one living room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"") # crop would include the living room so keep it in the query"
14300987,What is the sink made of?," # sink is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?," # bird or cat
    image_patch = ImagePatch(image)
    is_cat = image_patch.exists(""cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return bool_to_yesno(is_bicycle or is_biker)"
844747,Are there both a pillow and a kitten in the image?," # pillow and kitten
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)"
1104500,What kind of food is in the box?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?," # assumes only one kid patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < image_patch.horizontal_center:
            return food_patch.simple_query(""What is the food that is to the left of the kid called?"")
    return food_patches[0].simple_query(""What is the food that is to the left of the kid called?"") # crop would include the kid so keep it in the query"
11820726,"What device is the desk in front of, a television or a printer?"," # assumes only one device patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > image_patch.horizontal_center:
            return device_patch.best_text_match([""television"", ""printer""])
    return ""printer"""
18114588,Do you see a helmet there?," # helmet is a property
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see a helmet there?"")
    return helmet_patches[0].simple_query(""Do you see a helmet there?"") # crop would include the helmet so keep it in the query"
11950874,What animal is standing on the ground?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.vertical_center == image_patch.vertical_center:
            return animal_patch.simple_query(""What animal is standing on the ground?"")
    return animal_patches[0].simple_query(""What animal is standing on the ground?"") # crop would include the ground so keep it in the query"
10216953,Is the small car to the left of the fork on the right?," # assumes only one car and one fork
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")
    for car_patch in car_patches:
        if car_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
16184942,Does that grass look brown and short?," # grass is a mass noun
    image_patch = ImagePatch(image)
    is_brown = image_patch.verify_property(""grass"", ""brown"")
    is_short = image_patch.verify_property(""grass"", ""short"")
    return bool_to_yesno(is_brown and is_short)"
6312238,Is the hydrant to the left of the car?," # assumes only one hydrant and one car
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    if len(hydrant_patches) == 0:
        return ""no""
    for hydrant_patch in hydrant_patches:
        car_patches = image_patch.find(""car"")
        if len(car_patches) == 0:
            return ""no""
        for car_patch in car_patches:
            if car_patch.horizontal_center > hydrant_patch.horizontal_center:
                return ""yes""
    return ""yes"""
16646227,On which side of the picture is the gray car?," # assumes only one gray car
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    if len(gray_car_patches) == 0:
        return image_patch.simple_query(""On which side of the picture is the gray car, left or right?"")
    gray_car_patch = gray_car_patches[0]
    if gray_car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?," # assumes only one person wearing sneakers
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for ball_patch in ball_patches:
        person_wearing_sneakers_patches = image_patch.find(""person wearing sneakers"")
        for person_wearing_sneakers_patch in person_wearing_sneakers_patches:
            if ball_patch.horizontal_center > person_wearing_sneakers_patch.horizontal_center:
                return ""right""
    return ""left"""
3443704,What is the woman wearing?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is the woman wearing?"") # crop would include the clothing so keep it in the query"
19313572,What is the color of the tent to the left of the vehicles?," # assumes only one tent patch
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    if len(tent_patches) == 0:
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    tent_patch = tent_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > tent_patch.horizontal_center:
            return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"") # crop would include the vehicles so keep it in the query"
10885675,What is the toilet seat made of?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the toilet seat made of?"")
    return toilet_patches[0].simple_query(""What is the toilet seat made of?"") # crop would include the seat so keep it in the query"
6926432,What animal is resting on the blanket?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal resting on the blanket?"") == ""yes"":
            return animal_patch.simple_query(""What animal is resting on the blanket?"")
    # If no animal is resting on the blanket, query the image directly
    return image_patch.simple_query(""What animal is resting on the blanket?"")"
14561612,What color do you think the bikini that the woman is wearing is?," # bikini is a property
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    return woman_patches[0].simple_query(""What color do you think the bikini that the woman is wearing is?"") # crop would include the bikini so keep it in the query"
6587755,Are both the room and the bowl the same color?," # assumes only one patch for each object
    image_patch = ImagePatch(image)
    is_room = image_patch.exists(""room"")
    is_bowl = image_patch.exists(""bowl"")
    if is_room and is_bowl:
        room_patch = image_patch.find(""room"")[0]
        bowl_patch = image_patch.find(""bowl"")[0]
        return bool_to_yesno(room_patch.verify_property(""room"", ""color"") == bowl_patch.verify_property(""bowl"", ""color""))
    return ""no"""
4479543,Is the barn white or brown?," # barn is a building
    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    # Question assumes only one barn patch
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    return barn_patches[0].best_text_match([""white"", ""brown""])"
972522,Does the box look white or brown?," # assumes only one box patch
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    if len(box_patches) == 0:
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].best_text_match([""white"", ""brown""])"
3948528,What is the bowl made of?," # bowl made of
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?," # assumes only one bench and rock
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    if len(bench_patches) == 0:
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    for bench_patch in bench_patches:
        rock_patches = image_patch.find(""rock"")
        if len(rock_patches) == 0:
            return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
        for rock_patch in rock_patches:
            if rock_patch.horizontal_center > bench_patch.horizontal_center:
                return bench_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    return image_patch.simple_query(""Is the bench in front of the rock gray or red?"") # if no rock is found, query the image directly"
866459,On which side is the couch?," # assumes only one couch patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the couch, left or right?"") # assumes only one couch patch"
8614812,Is the person that is playing wearing shorts?," # assumes only one patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return ""yes""
    return ""no"""
167438,What is wearing the ground?," # ground is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"") # ground is a property"
9418088,Which kind of furniture is wooden?," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wooden""):
            return furniture_patch.simple_query(""Which kind of furniture is wooden?"")
    return image_patch.simple_query(""Which kind of furniture is wooden?"") # if no furniture is wooden, query the image directly"
1042377,Who is standing beside the person that is wearing a dress?," # assumes only one patch
    image_patch = ImagePatch(image)
    person_wearing_dress_patches = image_patch.find(""person wearing a dress"")
    # Question assumes only one person wearing a dress patch
    if len(person_wearing_dress_patches) == 0:
        # If no person wearing a dress is found, query the image directly
        return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    for person_wearing_dress_patch in person_wearing_dress_patches:
        person_standing_beside_patches = image_patch.find(""person standing beside"")
        # Question assumes only one person standing beside patch
        if len(person_standing_beside_patches) == 0:
            return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
        for person_standing_beside_patch in person_standing_beside_patches:
            if person_standing_beside_patch.horizontal_center > person_wearing_dress_patch.horizontal_center:
                return person_standing_beside_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    # If no person standing beside is found, query the image directly
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?," # fat is a property
    image_patch = ImagePatch(image)
    long_ski_patches = image_patch.find(""long ski"")
    # Question assumes only one long ski patch
    if len(long_ski_patches) == 0:
        # If no long ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    return long_ski_patches[0].simple_query(""How fat are the long skis?"") # crop would include the fat so keep it in the query"
2211743,Is the sky clear or overcast?," # sky is clear or overcast
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky clear or overcast?"")
    return sky_patches[0].simple_query(""Is the sky clear or overcast?"") # crop would include the sky so keep it in the query"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?," # assumes only one bottle patch and one pencil patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
    for bottle_patch in bottle_patches:
        pencil_patches = image_patch.find(""pencil"")
        # Question assumes only one pencil patch
        if len(pencil_patches) == 0:
            return ""no""
        for pencil_patch in pencil_patches:
            if pencil_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""yes""
    return ""no"""
15478302,Is there any dark door or window in the image?," # dark door or window
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    window_patches = image_patch.find(""window"")
    # Question assumes only one door or window patch
    if len(door_patches) == 0 and len(window_patches) == 0:
        # If no door or window is found, query the image directly
        return image_patch.simple_query(""Is there any dark door or window in the image?"")
    for door_patch in door_patches:
        if door_patch.simple_query(""Is the door dark?"") == ""yes"":
            return ""yes""
    for window_patch in window_patches:
        if window_patch.simple_query(""Is the window dark?"") == ""yes"":
            return ""yes""
    return ""no"""
18414234,Do you see either a knife or a chair in the picture?," # assumes only one patch
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    chair_patches = image_patch.find(""chair"")
    return bool_to_yesno(knife_patches or chair_patches)"
19779815,Is the book red or yellow?," # assumes only one book patch
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    return book_patches[0].best_text_match([""red"", ""yellow""])"
7257283,Are there men to the left of the picture?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center / 2:
            return ""yes""
    return ""no"""
6621625,On which side of the picture is the bench?," # assumes only one bench patch
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench, left or right?"")
    if bench_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19311589,Are there both fences and horses in this picture?," # assumes only one fence patch and one horse patch
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?," # assumes only one patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    for device_patch in device_patches:
        container_patches = image_patch.find(""container"")
        # Question assumes only one container patch
        if len(container_patches) == 0:
            return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
        for container_patch in container_patches:
            person_patches = image_patch.find(""person"")
            # Question assumes only one person patch
            if len(person_patches) == 0:
                return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
            for person_patch in person_patches:
                if container_patch.horizontal_center > person_patch.horizontal_center:
                    return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"") # if no device is found, query the image directly"
171031333,Do you see blankets in the picture that are not black?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Do you see blankets in the picture that are not black?"")
    for blanket_patch in blanket_patches:
        if blanket_patch.simple_query(""Is the blanket black?"") == ""yes"":
            return ""yes""
    return ""no"""
16695341,What is the fence made of?," # fence is a relational verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?," # bottle or child
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)"
5111363,Are there chairs or tables that are not blue?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    if is_chair and is_table:
        return ""yes""
    if is_chair:
        return ""chair""
    if is_table:
        return ""table""
    return ""no"""
9230971,Which place is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        return ""no""
    hair_patch = hair_patches[0]
    is_short = hair_patch.verify_property(""hair"", ""short length"")
    is_white = hair_patch.verify_property(""hair"", ""white color"")
    return bool_to_yesno(is_short and is_white)"
4822200,Do you see any lettuce on the food with the meat?," # meat and lettuce are in the same image
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    for lettuce_patch in lettuce_patches:
        meat_patches = image_patch.find(""meat"")
        # Question assumes only one meat patch
        if len(meat_patches) == 0:
            return ""no""
        for meat_patch in meat_patches:
            if lettuce_patch.horizontal_center > meat_patch.horizontal_center:
                return ""yes""
    return ""no"""
3726666,What device is to the left of the curtain that is to the left of the glasses?," # assumes only one patch for each object
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    for device_patch in device_patches:
        curtain_patches = image_patch.find(""curtain"")
        if len(curtain_patches) == 0:
            return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
        for curtain_patch in curtain_patches:
            glasses_patches = image_patch.find(""glasses"")
            if len(glasses_patches) == 0:
                return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
            for glasses_patch in glasses_patches:
                if glasses_patch.horizontal_center > curtain_patch.horizontal_center:
                    return device_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    return device_patches[0].simple_query(""What device is to the left of the curtain that is to the left of the glasses?"") # if no device is found, query the image directly"
9954849,What kind of furniture is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?," # assumes only one patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    bus_patches = image_patch.find(""bus"")
    if len(train_patches) == 0 and len(bus_patches) == 0:
        return ""no""
    for train_patch in train_patches:
        if train_patch.verify_property(""train"", ""red""):
            return ""yes""
    for bus_patch in bus_patches:
        if bus_patch.verify_property(""bus"", ""red""):
            return ""yes""
    return ""no"""
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?," # assumes only one lettuce patch
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center < lettuce_patch.horizontal_center:
            return vegetable_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    return lettuce_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"") # crop would include the lettuce so keep it in the query"
623393,"What type of clothing is tan, the hat or the vest?"," # assumes only one tan patch
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    tan_patch = tan_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""vest""
    hat_patch = hat_patches[0]
    vest_patches = image_patch.find(""vest"")
    # Question assumes only one vest patch
    if len(vest_patches) == 0:
        return ""hat""
    vest_patch = vest_patches[0]
    tan_color = tan_patch.simple_query(""What color is the tan clothing, brown or beige?"")
    if tan_color == ""brown"":
        return ""hat""
    else:
        return ""vest"""
6436448,Is the color of the skirt the same as the scarf?," # assumes only one patch
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        return ""no""
    return bool_to_yesno(skirt_patch.simple_query(""What is the color of the skirt?"") == scarf_patch.simple_query(""What is the color of the scarf?"")) # crop would include the scarf so keep it in the query"
3303313,Is the blanket under a cat?," # assumes only one cat patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is the blanket under a cat?"")
    for blanket_patch in blanket_patches:
        cat_patches = image_patch.find(""cat"")
        for cat_patch in cat_patches:
            if cat_patch.horizontal_center > blanket_patch.horizontal_center:
                return ""yes""
    return ""no"""
443663,What color is the picture?," # color of the picture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?," # umbrella is a property
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        return ""no""
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1885406,What is the toy on the bed?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toy on the bed?"")"
5557965,On which side is the bag?," # assumes only one bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        return image_patch.simple_query(""On which side is the bag, left or right?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?," # assumes only one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana, left or right?"")
    banana_patch = banana_patches[0]
    if banana_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3196355,What does the batter hold?," # batter is a verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What does the batter hold?"") # batter is a verb"
14470748,Who wears a jacket?," # assumes only one patch
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for jacket_patch in jacket_patches:
        return jacket_patch.simple_query(""Who wears a jacket?"") # crop would include the jacket so keep it in the query
    # If no jacket is found, query the image directly
    return image_patch.simple_query(""Who wears a jacket?"")"
16537736,Are there any houses behind the shrubs?," # shrubs are in front of houses
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    for house_patch in house_patches:
        shrub_patches = image_patch.find(""shrub"")
        # Question assumes only one shrub patch
        if len(shrub_patches) == 0:
            return ""no""
        for shrub_patch in shrub_patches:
            if shrub_patch.horizontal_center > house_patch.horizontal_center:
                return ""yes""
    return ""no"""
1129541,What piece of furniture is made of wood?," # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        is_wood = furniture_patch.verify_property(""furniture"", ""wood"")
        if is_wood:
            return furniture_patch.simple_query(""What piece of furniture is made of wood?"")
    # If no furniture is made of wood, pick the first piece of furniture
    return furniture_patches[0].simple_query(""What piece of furniture is made of wood?"")"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?," # assumes only one man and one racket
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    hat_patch = hat_patches[0]
    if hat_patch.horizontal_center > man_patch.horizontal_center:
        if hat_patch.horizontal_center > man_patch.horizontal_center + (man_patch.width / 2):
            return ""right""
        else:
            return ""left""
    else:
        if hat_patch.horizontal_center < man_patch.horizontal_center - (man_patch.width / 2):
            return ""left""
        else:
            return ""right"""
12416703,Where is that cat?," # assumes only one cat patch
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    if len(cat_patches) == 0:
        return image_patch.simple_query(""Where is that cat?"")
    return cat_patches[0].simple_query(""Where is that cat?"") # crop would include the cat so keep it in the query"
15603088,The animal to the right of the envelope is lying on what?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.horizontal_center:
            return animal_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"") # if no animal is found, query the image directly"
5329077,Is the man on a bench?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on a bench?"")
    man_patch = man_patches[0]
    is_bench = man_patch.simple_query(""What is the man sitting on?"") == ""bench""
    return bool_to_yesno(is_bench)"
1945705,What kind of device is to the left of the device that looks silver and gray?," # assumes only one patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < image_patch.horizontal_center:
            return device_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    return device_patches[0].simple_query(""What kind of device is to the left of the device that looks silver and gray?"") # crop would include the silver and gray so keep it in the query"
17520003,What vehicle is to the right of the pine tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")"
1259983,Who is wearing pants?," # assumes only one patch
    image_patch = ImagePatch(image)
    wearing_pants = image_patch.simple_query(""Is the person wearing pants?"") == ""yes""
    if wearing_pants:
        return image_patch.simple_query(""Who is wearing pants?"")
    return ""no one"""
6413378,Is there a black keyboard or camera?," # assumes only one patch
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    if len(keyboard_patches) == 0:
        camera_patches = image_patch.find(""camera"")
        if len(camera_patches) == 0:
            return ""no""
        return ""camera""
    return ""keyboard"""
947305,Is the sunny water blue and high?," # water is blue and high
    image_patch = ImagePatch(image)
    is_blue = image_patch.verify_property(""water"", ""blue"")
    is_high = image_patch.verify_property(""water"", ""high"")
    return bool_to_yesno(is_blue and is_high)"
4367817,What type of animal in this scene is brown?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What type of animal in this scene is brown?"") == ""brown"":
            return animal_patch.simple_query(""What type of animal in this scene is brown?"")
    # If no animal is brown, query the image directly
    return image_patch.simple_query(""What type of animal in this scene is brown?"")"
15485572,What is the vegetable on the hot dog with the cheese?," # assumes only one hot dog patch
    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog"")
    if len(hot_dog_patches) == 0:
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    for hot_dog_patch in hot_dog_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if hot_dog_patch.horizontal_center > vegetable_patch.horizontal_center:
                return vegetable_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"") # if no vegetable is found, query the image directly"
12661142,What is the appliance in the kitchen called?," # assumes only one appliance
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    if len(appliance_patches) == 0:
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    return appliance_patches[0].simple_query(""What is the appliance in the kitchen called?"") # crop would include the kitchen so keep it in the query"
41012743,The arrow is on what?," # assumes only one arrow patch
    image_patch = ImagePatch(image)
    arrow_patch = image_patch.find(""arrow"")[0]
    return arrow_patch.simple_query(""The arrow is on what?"") # crop would include the arrow so keep it in the query"
4777414,What color is the bicycle in the bottom of the photo?," # assumes only one bicycle patch
    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    if len(bicycle_patches) == 0:
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    for bicycle_patch in bicycle_patches:
        if bicycle_patch.vertical_center < image_patch.vertical_center:
            return bicycle_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"") # if no bicycle is found, query the image directly"
1185988,What is the device on top of the table that is to the right of the trashcan?," # assumes only one patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    for device_patch in device_patches:
        trashcan_patches = image_patch.find(""trashcan"")
        # Question assumes only one trashcan patch
        if len(trashcan_patches) == 0:
            return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
        trashcan_patch = trashcan_patches[0]
        if device_patch.horizontal_center > trashcan_patch.horizontal_center:
            return device_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"") # if no device is to the right of the trashcan, query the image directly"
13582968,Was granite used to make that floor?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was granite used to make that floor?"")"
6235273,Are there women in the photo?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    return bool_to_yesno(woman_patches)"
5377974,What is the girl playing with?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    for girl_patch in girl_patches:
        return girl_patch.simple_query(""What is the girl playing with?"") # crop would include the playing so keep it in the query"
51037065,On which side of the image is the fridge?," # assumes only one fridge patch
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    fridge_patch = fridge_patches[0]
    if fridge_patch.horizontal_center == image_patch.horizontal_center:
        return ""center""
    if fridge_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    return ""left"""
5299477,Which kind of bag does the girl carry?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    for girl_patch in girl_patches:
        bag_patches = image_patch.find(""bag"")
        # Question assumes only one bag patch
        if len(bag_patches) == 0:
            # If no bag is found, query the image directly
            return image_patch.simple_query(""Which kind of bag does the girl carry?"")
        return bag_patches[0].simple_query(""Which kind of bag does the girl carry?"") # crop would include the bag so keep it in the query"
15135617,Is the white dog on a bench?," # assumes only one white dog and one bench
    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    if len(white_dog_patches) == 0:
        return ""no""
    for white_dog_patch in white_dog_patches:
        bench_patches = image_patch.find(""bench"")
        if len(bench_patches) == 0:
            return ""no""
        for bench_patch in bench_patches:
            if white_dog_patch.horizontal_center > bench_patch.horizontal_center:
                return ""yes""
    return ""no"""
1111583,Is the male person to the right of a person?," # assumes only one male person and one person
    image_patch = ImagePatch(image)
    male_person_patches = image_patch.find(""male person"")
    # Question assumes only one male person patch
    if len(male_person_patches) == 0:
        # If no male person is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_person_patch in male_person_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > male_person_patch.horizontal_center:
                return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?," # assumes only one window and one door
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
15610844,What kind of place is shown?," # place, location, setting, scene, etc
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"") # place, location, setting, scene, etc"
11869032,Is the banana below a bird?," # assumes only one banana and one bird
    image_patch = ImagePatch(image)
    banana_patch = image_patch.find(""banana"")[0]
    bird_patch = image_patch.find(""bird"")[0]
    if banana_patch.vertical_center < bird_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
9878360,What color is the vehicle to the left of the fence?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    for fence_patch in fence_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    return image_patch.simple_query(""What color is the vehicle to the left of the fence?"") # if no vehicle is found, query the image directly"
481765,Are there either any buses or trains in the image?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?," # fence is a relational verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?," # assumes only one man and one traffic cone
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
11981238,What is common to the blazer and the suit?," # common property
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    # Question assumes only one blazer patch
    if len(blazer_patches) == 0:
        # If no blazer is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one suit patch
    if len(suit_patches) == 0:
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    blazer_patch = blazer_patches[0]
    suit_patch = suit_patches[0]
    common_property = blazer_patch.best_text_match([""color"", ""material"", ""style"", ""shape""])
    if common_property == ""color"":
        return suit_patch.simple_query(""What is the color of the suit?"")
    elif common_property == ""material"":
        return suit_patch.simple_query(""What is the material of the suit?"")
    elif common_property == ""style"":
        return suit_patch.simple_query(""What is the style of the suit?"")
    elif common_property == ""shape"":
        return suit_patch.simple_query(""What is the shape of the suit?"")
    else:
        return image_patch.simple_query(""What is common to the blazer and the suit?"") # if no common property is found, query the image directly"
16245,Is the shirt white or green?," # shirt is the object, white or green are the properties
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    shirt_patch = shirt_patches[0]
    shirt_color = shirt_patch.simple_query(""What color is the shirt, white or green?"")
    return shirt_color"
2595103,"In which part of the image are the cars, the bottom or the top?"," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?"," # assumes only one patch
    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""How does the sand look, dry or wet?"")
    sand_patch = sand_patches[0]
    return sand_patch.simple_query(""How does the sand look, dry or wet?"") # crop would include the sand so keep it in the query"
4325920,Are there fruits to the right of the banana which is on the table?," # assumes only one fruit patch
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    for fruit_patch in fruit_patches:
        if fruit_patch.horizontal_center > banana_patch.horizontal_center:
            return ""yes""
    return ""no"""
6376614,What color is the car in the middle?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""What color is the car in the middle?"")
    car_patch = car_patches[0]
    return car_patch.simple_query(""What color is the car in the middle?"") # crop would include the car so keep it in the query"
712063,What's the lamp made of?," # assumes only one lamp patch
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What's the lamp made of?"") # crop would include the lamp so keep it in the query"
19358285,Which kind of furniture is to the right of the pillow?," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > image_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    return furniture_patches[0].simple_query(""Which kind of furniture is to the right of the pillow?"") # crop would include the pillow so keep it in the query"
9647343,What type of material is the patio made of?," # patio is a relational noun
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?," # sky is blue, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the clouds in the sky?"")"
9843309,Do the flowers look orange?," # assumes only one flower patch
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flowers"", ""orange""))"
618996,Is there a chair or a bed in this image?," # assumes only one patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    bed_patches = image_patch.find(""bed"")
    if len(chair_patches) == 0 and len(bed_patches) == 0:
        return ""no""
    if len(chair_patches) == 0:
        return ""bed""
    if len(bed_patches) == 0:
        return ""chair""
    return ""chair"""
18959736,Are there trucks to the left of the umbrella?," # assumes only one truck and one umbrella
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    for truck_patch in truck_patches:
        if truck_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = man_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    return pants_patches[0].simple_query(""What color are the pants the man is wearing?"") # crop would include the pants so keep it in the query"
551601,Are there any pillows or chairs in the image?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?," # assumes only one patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
5925408,What is the bike in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?," # assumes only one fast food patch
    image_patch = ImagePatch(image)
    fast_food_patches = image_patch.find(""fast food"")
    if len(fast_food_patches) == 0:
        return image_patch.simple_query(""What type of fast food is shown in this photo?"")
    return fast_food_patches[0].simple_query(""What type of fast food is shown in this photo?"") # crop would include the fast food so keep it in the query"
15427544,Are there either beds or desks in the picture?," # assumes only one object
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)"
13778498,What type of vehicle is behind the green tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"")"
41019603,What is the child standing on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?," # shirt is not a predicate of a relational verb
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for shirt_patch in shirt_patches:
        wearing_shirt = (shirt_patch.simple_query(""Is the person wearing the shirt?"") == ""yes"")
        if wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query
    # If no one is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?," # fence is a relational verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?," # kite is the object, triangular is the property
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    for kite_patch in kite_patches:
        if kite_patch.verify_property(""kite"", ""triangular""):
            return kite_patch.simple_query(""What color is the kite that looks triangular?"")
    # If no kite is triangular, pick the first kite
    return kite_patches[0].simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?," # assumes only one building patch
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    if len(building_patches) == 0:
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    building_patch = building_patches[0]
    tree_patches = image_patch.find(""tree"")
    if len(tree_patches) == 0:
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    tree_patch = tree_patches[0]
    if building_patch.horizontal_center > tree_patch.horizontal_center:
        return building_patch.simple_query(""Is the building behind the tree white or brown?"")
    else:
        return tree_patch.simple_query(""Is the building behind the tree white or brown?"") # crop would include the tree so keep it in the query"
5749240,Are the glove and the undershirt both black?," # assumes only one patch for each object
    image_patch = ImagePatch(image)
    glove_patch = image_patch.find(""glove"")[0]
    undershirt_patch = image_patch.find(""undershirt"")[0]
    is_glove_black = glove_patch.verify_property(""glove"", ""black"")
    is_undershirt_black = undershirt_patch.verify_property(""undershirt"", ""black"")
    return bool_to_yesno(is_glove_black and is_undershirt_black)"
18573157,Is the juice in a cup?," # assumes only one patch
    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    if len(juice_patches) == 0:
        return ""no""
    for juice_patch in juice_patches:
        is_cup = (juice_patch.simple_query(""What is the juice in, a cup or a glass?"") == ""cup"")
        if is_cup:
            return ""yes""
    return ""no"""
3445929,Is the brown horse on the right side of the photo?," # assumes only one brown horse
    image_patch = ImagePatch(image)
    brown_horse_patches = image_patch.find(""brown horse"")
    if len(brown_horse_patches) == 0:
        return ""no""
    brown_horse_patch = brown_horse_patches[0]
    if brown_horse_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
16541709,Where is the grass?," # assumes only one patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"") # crop would include the grass so keep it in the query"
15764335,Are there any dogs on the tan sand?," # tan sand
    image_patch = ImagePatch(image)
    is_dog = image_patch.exists(""dog"")
    is_sand = image_patch.exists(""sand"")
    if is_dog and is_sand:
        return ""yes""
    return ""no"""
1478089,Are the door and the garage door made of the same material?," # assumes only one door patch
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_patch = door_patches[0]
    garage_door_patches = image_patch.find(""garage door"")
    # Question assumes only one garage door patch
    if len(garage_door_patches) == 0:
        return ""no""
    garage_door_patch = garage_door_patches[0]
    door_material = door_patch.simple_query(""What material is the door made of?"")
    garage_door_material = garage_door_patch.simple_query(""What material is the garage door made of?"")
    return bool_to_yesno(door_material == garage_door_material)"
1250685,Was this picture taken in a bathroom or at a dining room?," # bathroom or dining room
    image_patch = ImagePatch(image)
    is_bathroom = image_patch.exists(""bathroom"")
    is_dining_room = image_patch.exists(""dining room"")
    if is_bathroom and is_dining_room:
        return ""bathroom""
    elif is_bathroom:
        return ""bathroom""
    elif is_dining_room:
        return ""dining room""
    else:
        return ""bathroom"""
10436844,Is the zebra's nose soft and brown?," # assumes only one zebra patch
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    if len(zebra_patches) == 0:
        return ""no""
    zebra_patch = zebra_patches[0]
    is_soft = zebra_patch.verify_property(""zebra"", ""soft"")
    is_brown = zebra_patch.verify_property(""zebra"", ""brown"")
    return bool_to_yesno(is_soft and is_brown)"
10683765,Does the shirt have blue color?," # shirt is the object, blue is the property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return shirt_patches[0].verify_property(""shirt"", ""blue"")"
1593352,Do the draperies look white and striped?," # drapery is a fancy word for curtain
    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""drapery"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    drapery_patch = drapery_patches[0]
    is_white = drapery_patch.verify_property(""drapery"", ""white"")
    is_striped = drapery_patch.verify_property(""drapery"", ""striped"")
    return bool_to_yesno(is_white and is_striped)"
16553304,Are the trunks both long and wide?," # long and wide
    image_patch = ImagePatch(image)
    is_long = image_patch.verify_property(""trunk"", ""long"")
    is_wide = image_patch.verify_property(""trunk"", ""wide"")
    return bool_to_yesno(is_long and is_wide)"
7165102,Is the car on the left of the photo?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return ""no""
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?," # TODO: fix
    image_patch = ImagePatch(image)
    yellow_green_banana_patches = image_patch.find(""banana that looks yellow and green"")
    # Question assumes only one yellow-green banana patch
    if len(yellow_green_banana_patches) == 0:
        # If no yellow-green banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for yellow_green_banana_patch in yellow_green_banana_patches:
        is_short = (yellow_green_banana_patch.simple_query(""Is the banana short?"") == ""yes"")
        if is_short:
            return ""yes""
    return ""no"""
19279872,What is the man to the right of the helmet wearing?," # helmet wearing is a predicate of a relational verb (wearing), so ask directly
    image_patch = ImagePatch(image)
    helmet_wearing_patches = image_patch.find(""helmet wearing"")
    # Question assumes only one helmet wearing patch
    if len(helmet_wearing_patches) == 0:
        # If no helmet wearing is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    helmet_wearing_patch = helmet_wearing_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > helmet_wearing_patch.horizontal_center:
        return man_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    return helmet_wearing_patch.simple_query(""What is the man to the right of the helmet wearing?"") # crop would include the helmet so keep it in the query"
4285513,What is the color of the floor?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor?"")"
3974266,Do the trousers look tan?," # tan is a property
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers is found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan""))"
11595009,What are the devices to the right of the device that is to the right of the remote control?," # assumes only one remote control patch
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    for remote_control_patch in remote_control_patches:
        rightmost_device_patches = image_patch.find(""device"")
        for rightmost_device_patch in rightmost_device_patches:
            if rightmost_device_patch.horizontal_center > remote_control_patch.horizontal_center:
                return rightmost_device_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"") # if no device is found to the right of the remote control, query the image directly"
6183000,Are there nightstands or beds?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_nightstand or is_bed)"
14143982,Is it an outdoors scene?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it an outdoors scene?""))"
6123160,Are the speakers to the left of a Wii controller?," # assumes only one patch for each object
    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    if len(speaker_patches) == 0:
        return ""no""
    for speaker_patch in speaker_patches:
        wii_controller_patches = image_patch.find(""wii controller"")
        if len(wii_controller_patches) == 0:
            return ""no""
        for wii_controller_patch in wii_controller_patches:
            if wii_controller_patch.horizontal_center > speaker_patch.horizontal_center:
                return ""yes""
    return ""no"""
3681634,Is the plastic fork in the top or in the bottom part of the photo?," # assumes only one plastic fork
    image_patch = ImagePatch(image)
    plastic_fork_patches = image_patch.find(""plastic fork"")
    if len(plastic_fork_patches) == 0:
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    if plastic_fork_patches[0].vertical_center > image_patch.vertical_center:
        return ""top""
    else:
        return ""bottom"""
13629530,What is the vehicle on the street?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = man_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return image_patch.simple_query(""What color is the hat the man is in?"")
    return hat_patches[0].simple_query(""What color is the hat the man is in?"") # crop would include the man so keep him in the query"
1849976,What vegetables are to the left of the spoon?," # assumes only one spoon patch
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    for spoon_patch in spoon_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < spoon_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetables are to the left of the spoon?"")
    # If no vegetable is to the left of the spoon, query the image directly
    return image_patch.simple_query(""What vegetables are to the left of the spoon?"")"
14827816,Is the statue made of bronze or stone?," # bronze or stone
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    return statue_patches[0].best_text_match([""bronze"", ""stone""])"
857204,What's the woman wearing?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"") # crop would include the clothing so keep it in the query"
2201105,Is the ball pink?," # assumes only one ball patch
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return ball_patches[0].verify_property(""ball"", ""pink"")"
14616023,What piece of furniture are the cords in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?," # door and window are both objects
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?," # assumes only one black car
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    if len(black_car_patches) == 0:
        return image_patch.simple_query(""On which side of the image is the black car, left or right?"")
    black_car_patch = black_car_patches[0]
    if black_car_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?," # assumes only one striped animal
    image_patch = ImagePatch(image)
    striped_animal_patches = image_patch.find(""striped animal"")
    if len(striped_animal_patches) == 0:
        return image_patch.simple_query(""What is the striped animal called?"")
    return striped_animal_patches[0].simple_query(""What is the striped animal called?"") # crop would include the stripes so keep it in the query"
1479068,Is it outdoors?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it outdoors?"")) # crop would include the outdoors so keep it in the query"
16155046,Is the dry grass below a zebra?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the dry grass below a zebra?"")"
16515071,What is the person in the water wearing?," # assumes only one person in the water
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    for person_patch in person_patches:
        wearing = person_patch.simple_query(""What is the person in the water wearing?"")
        return wearing"
161015042,Who is wearing the goggles?," # goggles are on the head
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the goggles?"") # goggles are on the head"
19149868,What is pulled by the lady?," # assumes only one horse patch
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""What is pulled by the lady?"")
    return horse_patches[0].simple_query(""What is pulled by the lady?"") # crop would include the horse so keep it in the query"
5199994,What's the man wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What's the man wearing?"") # crop would include the clothing so keep it in the query"
19184475,Are the man glasses on the left side of the image?," # glasses on the left side of the image
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center < man_patch.horizontal_center:
        return ""yes""
    return ""no"""
7149602,Is the shirt orange or blue?," # shirt is the object, orange and blue are the properties
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    shirt_patch = shirt_patches[0]
    shirt_color = shirt_patch.simple_query(""What color is the shirt?"")
    return shirt_color"
19479555,What is the person to the right of the benches holding?," # assumes only one patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > image_patch.horizontal_center:
            return person_patch.simple_query(""What is the person to the right of the benches holding?"")
    return image_patch.simple_query(""What is the person to the right of the benches holding?"") # if no person is to the right of the benches, query the image directly"
19273393,Are there both a door and a window in this photo?," # door and window are both objects
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
6481656,What is the man doing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"") # crop would include the shirt so keep it in the query"
13127703,What kind of drink is to the left of the bottle the woman is pouring?," # assumes only one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    for bottle_patch in bottle_patches:
        drink_patches = image_patch.find(""drink"")
        for drink_patch in drink_patches:
            if drink_patch.horizontal_center < bottle_patch.horizontal_center:
                return drink_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    # If no drink is to the left of the bottle, query the image directly
    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")"
2378018,What is the toilet in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"")"
8430841,Is the frisbee to the left of the guy?," # assumes only one frisbee and one guy
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    if len(frisbee_patches) == 0:
        return ""no""
    for frisbee_patch in frisbee_patches:
        guy_patches = image_patch.find(""guy"")
        if len(guy_patches) == 0:
            return ""no""
        for guy_patch in guy_patches:
            if frisbee_patch.horizontal_center < guy_patch.horizontal_center:
                return ""yes""
    return ""no"""
18616818,The man is watching who?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is watching who?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""The man is watching who?"") # crop would include the watching so keep it in the query"
179526,Is the white dog behind a girl?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white dog behind a girl?"")"
21018827,Is the river murky and calm?," # assumes only one river patch
    image_patch = ImagePatch(image)
    river_patches = image_patch.find(""river"")
    if len(river_patches) == 0:
        # If no river is found, query the image directly
        return image_patch.simple_query(""Is the river murky and calm?"")
    river_patch = river_patches[0]
    is_murky = river_patch.verify_property(""river"", ""murky"")
    is_calm = river_patch.verify_property(""river"", ""calm"")
    return bool_to_yesno(is_murky and is_calm)"
3697449,Who is wearing a shirt?," # shirt is not part of the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for shirt_patch in shirt_patches:
        wearing_shirt = (shirt_patch.simple_query(""Is the shirt wearing a shirt?"") == ""yes"")
        if wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no shirt is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?," # assumes only one car and one sign
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patch = sign_patches[0]
    return car_patch.simple_query(""What do both the car and the sign have in common?"") # crop would include the sign so keep it in the query"
11764476,Which place is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?," # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On what kind of furniture is the plate?"")"
61022361,What is the painting that is to the left of the clock hanging on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")"
1527392,"What color is the fence, tan or black?"," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    fence_patch = fence_patches[0]
    return fence_patch.best_text_match([""tan"", ""black""])"
19229351,Do you see both bowls and carrots?," # assumes only one bowl and one carrot
    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)"
1297082,On which side is the silver fork?," # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        return image_patch.simple_query(""On which side is the silver fork?"")
    fork_patch = fork_patches[0]
    if fork_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16757832,Are there any blue helmets or napkins?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.verify_property(""helmet"", ""blue"")
    is_napkin = image_patch.verify_property(""napkin"", ""blue"")
    return bool_to_yesno(is_blue_helmet or is_napkin)"
839816,"In which part of the photo is the racket, the top or the bottom?"," # assumes only one object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")"
12385226,Is there a mirror in the bathroom?," # bathroom is a room, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a mirror in the bathroom?"")"
18720852,Are there either blankets or tents in this picture?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    cardboard_box_patches = image_patch.find(""cardboard box"")
    # Question assumes only one cardboard box patch
    if len(cardboard_box_patches) == 0:
        # If no cardboard box is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    for cardboard_box_patch in cardboard_box_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if cardboard_box_patch.horizontal_center > woman_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
19453453,Who is wearing a shirt?," # shirt is not part of the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for shirt_patch in shirt_patches:
        wearing_shirt = (shirt_patch.simple_query(""Is the shirt wearing a shirt?"") == ""yes"")
        if wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no shirt is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?," # assumes only one house patch
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    if house_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the flowers that look red?"")"
15710688,Is the shirt short sleeved or sleeveless?," # shirt is the object, short sleeved and sleeveless are the properties
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    shirt_property = shirt_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    return shirt_property"
5533952,What are the white wires connected to?," # assumes only one patch
    image_patch = ImagePatch(image)
    white_wire_patches = image_patch.find(""white wire"")
    # Question assumes only one white wire patch
    if len(white_wire_patches) == 0:
        # If no white wire is found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    for white_wire_patch in white_wire_patches:
        return white_wire_patch.simple_query(""What are the white wires connected to?"") # crop would include the connection so keep it in the query"
11313555,"What type of furniture is that, a table or a nightstand?"," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""table"", ""nightstand""])"
10508893,What animals are in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in front of the trees?"")"
14501997,What is the gate made of?," # assumes only one gate patch
    image_patch = ImagePatch(image)
    gate_patches = image_patch.find(""gate"")
    if len(gate_patches) == 0:
        # If no gate is found, query the image directly
        return image_patch.simple_query(""What is the gate made of?"")
    return gate_patches[0].simple_query(""What is the gate made of?"") # crop would include the gate so keep it in the query"
45624,What color is the device on top of the table?," # assumes only one patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""What color is the device on top of the table?"")
    return device_patches[0].simple_query(""What color is the device on top of the table?"") # crop would include the table so keep it in the query"
181032044,Are these closed drawers?," # assumes only one patch
    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    for drawer_patch in drawer_patches:
        is_closed = (drawer_patch.simple_query(""Is the drawer closed?"") == ""yes"")
        if is_closed:
            return ""yes""
    return ""no"""
383,What kind of furniture is made of wood?," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""What kind of furniture is made of wood?"") == ""chair"":
            return ""chair""
    return ""table"""
101054962,What is the person by the bananas wearing?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > image_patch.horizontal_center - image_patch.width / 2:
            return person_patch.simple_query(""What is the person by the bananas wearing?"")
    return image_patch.simple_query(""What is the person by the bananas wearing?"") # if no person is found to the right of the bananas, query the image directly"
759165,What is the color of the tower in the middle of the picture?," # assumes only one tower
    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    if len(tower_patches) == 0:
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    for tower_patch in tower_patches:
        if tower_patch.horizontal_center == image_patch.horizontal_center:
            return tower_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    return tower_patches[0].simple_query(""What is the color of the tower in the middle of the picture?"") # crop would include the tower so keep it in the query"
10775539,Is this giraffe tall and white?," # giraffe is tall and white
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is this giraffe tall and white?"")
    giraffe_patch = giraffe_patches[0]
    is_tall = giraffe_patch.simple_query(""Is the giraffe tall?"") == ""yes""
    is_white = giraffe_patch.simple_query(""Is the giraffe white?"") == ""yes""
    return bool_to_yesno(is_tall and is_white)"
19981804,On which side of the photo is the colorful screen?," # assumes only one screen patch
    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""screen"")
    if len(screen_patches) == 0:
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    screen_patch = screen_patches[0]
    if screen_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
7903654,Is the tap on the left side or on the right?," # assumes only one tap
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    tap_patch = tap_patches[0]
    if tap_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6206183,Which place is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?," # assumes only one coat patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    return coat_patches[0].best_text_match([""black"", ""beige""])"
13123207,Does the kite near the field look high and red?," # kite, field, high, red
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    for kite_patch in kite_patches:
        field_patches = image_patch.find(""field"")
        # Question assumes only one field patch
        if len(field_patches) == 0:
            return ""no""
        for field_patch in field_patches:
            if kite_patch.horizontal_center > field_patch.horizontal_center:
                return ""yes""
    return ""no"""
7740092,Are there any utensils in this picture?," # assumes only one object
    image_patch = ImagePatch(image)
    utensil_patches = image_patch.find(""utensil"")
    return bool_to_yesno(len(utensil_patches) > 0)"
8774975,What is around the guy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?," # assumes only one patch
    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    # Question assumes only one staircase patch
    if len(staircase_patches) == 0:
        # If no staircase is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    for staircase_patch in staircase_patches:
        sky_patches = image_patch.find(""sky"")
        # Question assumes only one sky patch
        if len(sky_patches) == 0:
            return ""no""
        for sky_patch in sky_patches:
            if staircase_patch.cropped_image[0][0][0] != sky_patch.cropped_image[0][0][0]:
                return ""yes""
    return ""no"""
1605874,What color are the containers that are on the right?," # assumes only one container patch
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center > image_patch.horizontal_center:
            return container_patch.simple_query(""What color are the containers that are on the right?"")
    return image_patch.simple_query(""What color are the containers that are on the right?"") # if no container is on the right, query the image directly"
12495781,Are the people to the right or to the left of the cone that is orange?," # cone is orange
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    for people_patch in people_patches:
        cone_patches = image_patch.find(""cone"")
        for cone_patch in cone_patches:
            if cone_patch.horizontal_center > people_patch.horizontal_center:
                return ""right""
    return ""left"""
14165681,"What type of clothing is light, the sweater or the cap?"," # cap is light
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing light?"") == ""yes"":
            return clothing_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    return ""cap"""
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    for chair_patch in chair_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if girl_patch.horizontal_center > chair_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
5617223,"What color is the container to the left of the horse, green or silver?"," # assumes only one container patch
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    if len(container_patches) == 0:
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center < image_patch.horizontal_center:
            return container_patch.best_text_match([""green"", ""silver""])
    return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"") # if no container is found, query the image directly"
2428964,Is the water gray or teal?," # assumes only one water patch
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].best_text_match([""gray"", ""teal""])"
19620769,Which place is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?," # assumes only one lamp patch
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        return image_patch.simple_query(""On which side of the picture is the lamp, left or right?"")
    lamp_patch = lamp_patches[0]
    if lamp_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?," # assumes only one animal
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    # Question assumes only one brown animal patch
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    return bool_to_yesno(brown_animal_patch.simple_query(""Does the brown animal look tiny?"") == ""yes"")"
5672532,Does that shirt look long sleeved?," # shirt is the object, long sleeved is the property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    for shirt_patch in shirt_patches:
        is_long_sleeved = (shirt_patch.simple_query(""Is the shirt long sleeved?"") == ""yes"")
        if is_long_sleeved:
            return ""yes""
    return ""no"""
6146439,Does the box look green?," # box is a property
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""box"", ""green""))"
1910285,Is the white container on the left of the image?," # assumes only one white container
    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    if len(white_container_patches) == 0:
        return ""no""
    for white_container_patch in white_container_patches:
        if white_container_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
13362134,Is that shower curtain to the left of a toilet?," # assumes only one patch
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if shower_curtain_patch.horizontal_center < toilet_patch.horizontal_center:
                return ""yes""
    return ""no"""
161060488,Is there any cabinet to the right of the stove?," # assumes only one cabinet and one stove
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.horizontal_center > stove_patch.horizontal_center:
            return ""yes""
    return ""no"""
111055042,Is the chair on the right?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return ""no""
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
151068,Which kind of clothing is white?," # assumes only one patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing white?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is white?"")
    # If no clothing is white, query the image directly
    return image_patch.simple_query(""Which kind of clothing is white?"")"
19387951,Is this place the forest or the garden?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""forest"", ""garden""])"
1781695,What's on the blanket?," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What's on the blanket?"")
    return blanket_patches[0].simple_query(""What's on the blanket?"") # crop would include the object on the blanket so keep it in the query"
17699779,Is she on a bed?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_bed = image_patch.verify_property(""bed"", ""on"")
    return bool_to_yesno(is_bed)"
464441,"What piece of furniture is the blanket on, a bed or a sofa?"," # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    for blanket_patch in blanket_patches:
        bed_patches = image_patch.find(""bed"")
        sofa_patches = image_patch.find(""sofa"")
        if len( bed_patches) == 0 and len( sofa_patches) == 0:
            return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
        if len( bed_patches) == 0:
            return ""sofa""
        if len( sofa_patches) == 0:
            return ""bed""
        if blanket_patch.horizontal_center > bed_patch.horizontal_center and blanket_patch.horizontal_center > sofa_patch.horizontal_center:
            return ""sofa""
        if blanket_patch.horizontal_center < bed_patch.horizontal_center and blanket_patch.horizontal_center < sofa_patch.horizontal_center:
            return ""bed""
        if blanket_patch.horizontal_center > bed_patch.horizontal_center and blanket_patch.horizontal_center < sofa_patch.horizontal_center:
            return ""bed""
        if blanket_patch.horizontal_center < bed_patch.horizontal_center and blanket_patch.horizontal_center > sofa_patch.horizontal_center:
            return ""sofa""
    return ""bed"""
9505496,Are the wires above a man?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    man_patch = man_patches[0]
    wire_patches = image_patch.find(""wire"")
    # Question assumes only one wire patch
    if len(wire_patches) == 0:
        return ""no""
    for wire_patch in wire_patches:
        if wire_patch.vertical_center > man_patch.vertical_center:
            return ""yes""
    return ""no"""
4625512,What is the woman doing?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman doing?"")
    return woman_patches[0].simple_query(""What is the woman doing?"") # crop would include the woman so keep it in the query"
9441941,Is the woman's hair red or black?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    woman_patch = woman_patches[0]
    hair_color = woman_patch.best_text_match([""red"", ""black""])
    return hair_color"
2387432,What's on the table?," # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What's on the table?"")
    return table_patches[0].simple_query(""What's on the table?"") # crop would include the table so keep it in the query"
10534717,What is the pillow on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pillow on?"")"
19335685,"What fruits is the container behind of, apples or bananas?"," # assumes only one container patch
    image_patch = ImagePatch(image)
    container_patch = image_patch.find(""container"")
    if len(container_patch) == 0:
        return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")
    return container_patch[0].best_text_match([""apples"", ""bananas""])"
3127817,The goat is standing in what?," # assumes only one goat patch
    image_patch = ImagePatch(image)
    goat_patch = image_patch.find(""goat"")[0]
    return goat_patch.simple_query(""The goat is standing in what?"") # crop would include the ground so keep it in the query"
1588567,Where does the man that to the right of the mirror sit?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    man_patch = man_patches[0]
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        return ""no""
    mirror_patch = mirror_patches[0]
    if man_patch.horizontal_center > mirror_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
7399543,What is the floor made of?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is the house behind of?"")
    return image_patch.simple_query(""What kind of animal is the house behind of?"") # if no animal is behind, query the image directly"
1174904,Is the cobblestone sidewalk both large and gray?," # cobblestone is a property of the sidewalk
    image_patch = ImagePatch(image)
    is_large = image_patch.verify_property(""sidewalk"", ""large"")
    is_gray = image_patch.verify_property(""sidewalk"", ""gray"")
    return bool_to_yesno(is_large and is_gray)"
13375231,What is the lettuce on?," # assumes only one lettuce patch
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    for lettuce_patch in lettuce_patches:
        return lettuce_patch.simple_query(""What is the lettuce on?"")
    return image_patch.simple_query(""What is the lettuce on?"") # if no lettuce is found, query the image directly"
1194027,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"")
    # If no clothing is black, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"")"
9963477,Is the statue wearing a dress?," # statue is wearing a dress
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    return statue_patches[0].simple_query(""Is the statue wearing a dress?"") # crop would include the dress so keep it in the query"
1151995,Which side of the photo is the yellow vase on?," # assumes only one yellow vase
    image_patch = ImagePatch(image)
    yellow_vase_patches = image_patch.find(""yellow vase"")
    if len(yellow_vase_patches) == 0:
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    yellow_vase_patch = yellow_vase_patches[0]
    if yellow_vase_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
712821,What is common to the bear and the belt?," # common to
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    belt_patches = image_patch.find(""belt"")
    # Question assumes only one belt patch
    if len(belt_patches) == 0:
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    return bear_patches[0].simple_query(""What is common to the bear and the belt?"") # crop would include the belt so keep it in the query"
1757418,What is the vehicle to the right of the car?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > car_patch.horizontal_center:
            return vehicle_patch.simple_query(""What is the vehicle to the right of the car?"")
    return vehicle_patches[0].simple_query(""What is the vehicle to the right of the car?"") # crop would include the car so keep it in the query"
7624100,Are the trunks that are gray wet and large?," # elephant
    image_patch = ImagePatch(image)
    trunks_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunks_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunks_patches:
        is_gray = trunk_patch.verify_property(""trunk"", ""gray"")
        is_wet = trunk_patch.verify_property(""trunk"", ""wet"")
        is_large = trunk_patch.verify_property(""trunk"", ""large"")
        return bool_to_yesno(is_gray and is_wet and is_large)"
1125474,"On which side of the photo is the iron fence, the right or the left?"," # assumes only one iron fence patch
    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    if len(iron_fence_patches) == 0:
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    iron_fence_patch = iron_fence_patches[0]
    if iron_fence_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1300375,What is the name of the item of furniture that the printer is on?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")"
5925196,What's the building covered by?," # assumes only one building patch
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""What's the building covered by?"")
    return building_patches[0].simple_query(""What's the building covered by?"") # crop would include the covering so keep it in the query"
1948055,What watercraft is the white rope tying?," # assumes only one watercraft patch
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    for watercraft_patch in watercraft_patches:
        white_rope_patches = image_patch.find(""white rope"")
        for white_rope_patch in white_rope_patches:
            if watercraft_patch.horizontal_center > white_rope_patch.horizontal_center:
                return watercraft_patch.simple_query(""What watercraft is the white rope tying?"")
    # If no watercraft is found, query the image directly
    return image_patch.simple_query(""What watercraft is the white rope tying?"")"
8540582,What kind of animal is in front of the leafy trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?," # walking woman by the bus
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center > image_patch.horizontal_center:
            return woman_patch.simple_query(""What does the walking woman by the bus wear?"")
    return woman_patches[0].simple_query(""What does the walking woman by the bus wear?"") # crop would include the bus so keep it in the query"
1129508,Is the controller to the left of a pillow?," # assumes only one controller patch
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > controller_patch.horizontal_center:
                return ""yes""
    return ""no"""
18664084,Is there any sheep by the fence?," # assumes only one sheep patch
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    if len(sheep_patches) == 0:
        return ""no""
    for sheep_patch in sheep_patches:
        if sheep_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6912079,What animal is this?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is this?"")
    return animal_patches[0].simple_query(""What animal is this?"") # crop would include the animal so keep it in the query"
3412029,Where is the person?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Where is the person?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        elif person_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
        elif person_patch.vertical_center < image_patch.vertical_center:
            return ""bottom""
        else:
            return ""top"""
14161122,What animal is in the water?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.lower > animal_patch.upper / 2:
            return animal_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"") # crop would include the water so keep it in the query"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?," # assumes only one parent patch
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    for baby_patch in baby_patches:
        parent_patches = image_patch.find(""parent"")
        # Question assumes only one parent patch
        if len(parent_patches) == 0:
            return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
        for parent_patch in parent_patches:
            if parent_patch.horizontal_center < baby_patch.horizontal_center:
                return baby_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"") # if no parent is found, query the image directly"
15699496,What is the cup that looks clean made of?," # assumes only one cup patch
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    for cup_patch in cup_patches:
        if cup_patch.simple_query(""Is the cup clean?"") == ""yes"":
            return cup_patch.simple_query(""What is the cup that looks clean made of?"")
    # If no cup is clean, pick the first cup
    return cup_patches[0].simple_query(""What is the cup that looks clean made of?"")"
12765451,What animals are to the right of the ladder?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.horizontal_center:
            return animal_patch.simple_query(""What animals are to the right of the ladder?"")
    return image_patch.simple_query(""What animals are to the right of the ladder?"") # if no animal is found, query the image directly"
191044307,What animal is black?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What animal is black?"")
    # If no animal is black, query the image directly
    return image_patch.simple_query(""What animal is black?"")"
12639181,Who is wearing shorts?," # assumes only one patch
    image_patch = ImagePatch(image)
    wearing_shorts = (image_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
    if wearing_shorts:
        return image_patch.simple_query(""Who is wearing shorts?"")
    return ""no one"""
10630949,Is the person that is not male wearing an elbow pad?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person male?"") == ""yes"":
            return ""yes""
    return ""no"""
14544602,What is the boy holding?," # assumes only one boy patch
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    return boy_patch.simple_query(""What is the boy holding?"") # crop would include the object being held so keep it in the query"
2986699,Of what material the dish?," # material
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Of what material the dish?"") # material"
161013513,What kind of animal is on the street?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is on the street?"")
    return image_patch.simple_query(""What kind of animal is on the street?"") # if no animal is found, query the image directly"
15143936,What animal is before the roof?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is before the roof?"")"
1955043,Who is playing with the ball?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing with the ball?"")"
91044150,What is the name of the animals in front of the trees beside the river?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?," # assumes only one hanging patch
    image_patch = ImagePatch(image)
    hanging_patches = image_patch.find(""hanging"")
    for hanging_patch in hanging_patches:
        return hanging_patch.simple_query(""What kind of fruit is hanging?"")
    # If no hanging is found, query the image directly
    return image_patch.simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?," # assumes only one kangaroo and one bird
    image_patch = ImagePatch(image)
    kangaroo_patches = image_patch.find(""kangaroo"")
    bird_patches = image_patch.find(""bird"")
    return bool_to_yesno(kangaroo_patches[0].exists(""kangaroo"") or bird_patches[0].exists(""bird""))"
10457241,What is the color of the trousers?," # assumes only one patch
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    if len(trousers_patches) == 0:
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"") # crop would include the trousers so keep it in the query"
2913850,Is the placemat in the bottom or in the top part?," # assumes only one placemat patch
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    placemat_patch = placemat_patches[0]
    if placemat_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?," # assumes only one object covered with blanket
    image_patch = ImagePatch(image)
    object_patches = image_patch.find(""object"")
    for object_patch in object_patches:
        if object_patch.simple_query(""Is the object covered with blanket?"") == ""yes"":
            return object_patch.simple_query(""What is covered with blanket?"")
    # If no object is covered with blanket, query the image directly
    return image_patch.simple_query(""What is covered with blanket?"")"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    man_patch = man_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > man_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    return furniture_patches[0].simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"") # crop would include the sweater so keep it in the query"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?"," # assumes only one desk drawer patch
    image_patch = ImagePatch(image)
    desk_drawer_patches = image_patch.find(""desk drawer"")
    if len(desk_drawer_patches) == 0:
        # If no desk drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    if desk_drawer_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)"
19737232,Is the book on the right of the picture?," # assumes only one book patch
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        return ""no""
    for book_patch in book_patches:
        if book_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
475064,Who is wearing the glasses?," # assumes only one person wearing glasses
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for glasses_patch in glasses_patches:
        return glasses_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query"
8594579,Is there a woman to the right of the orange object that is to the right of the person?," # assumes only one object of each type
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    for woman_patch in woman_patches:
        orange_patches = image_patch.find(""orange"")
        # Question assumes only one orange patch
        if len(orange_patches) == 0:
            return ""no""
        for orange_patch in orange_patches:
            person_patches = image_patch.find(""person"")
            # Question assumes only one person patch
            if len(person_patches) == 0:
                return ""no""
            for person_patch in person_patches:
                if orange_patch.horizontal_center > person_patch.horizontal_center:
                    if woman_patch.horizontal_center > orange_patch.horizontal_center:
                        return ""yes""
    return ""no"""
14602992,Which side of the image is the couch on?," # assumes only one couch patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which side of the image is the couch on?"")"
9944587,How tall is the man that is wearing a shirt?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    man_patch = man_patches[0]
    is_wearing_shirt = (man_patch.simple_query(""Is the man wearing a shirt?"") == ""yes"")
    if is_wearing_shirt:
        return man_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    return man_patch.simple_query(""How tall is the man that is not wearing a shirt?"") # crop would include the shirt so keep it in the query"
13736712,Are there any giraffes?," # giraffe is a rare animal
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe""))"
6996118,The young girl is wearing what?," # assumes only one young girl patch
    image_patch = ImagePatch(image)
    young_girl_patches = image_patch.find(""young girl"")
    if len(young_girl_patches) == 0:
        return image_patch.simple_query(""The young girl is wearing what?"")
    return young_girl_patches[0].simple_query(""The young girl is wearing what?"") # crop would include the shirt so keep it in the query"
19992576,Is the basket on the floor small and brown?," # assumes only one basket patch
    image_patch = ImagePatch(image)
    basket_patch = image_patch.find(""basket"")
    if len(basket_patch) == 0:
        return ""no""
    is_on_floor = (basket_patch.vertical_center == image_patch.vertical_center)
    is_small = (basket_patch.width < image_patch.width / 2)
    is_brown = (basket_patch.simple_query(""What color is the basket?"") == ""brown"")
    return bool_to_yesno(is_on_floor and is_small and is_brown)"
17332401,What is the boy in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"")"
15586294,Which side is the leather armchair on?," # assumes only one armchair
    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""armchair"")
    if len(armchair_patches) == 0:
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    armchair_patch = armchair_patches[0]
    if armchair_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15658324,What is the horse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_color = man_patch.simple_query(""What color is the controller the man is holding?"")
    item_of_furniture_patches = image_patch.find(""item of furniture"")
    # Question assumes only one item of furniture patch
    if len(item_of_furniture_patches) == 0:
        # If no item of furniture is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    for item_of_furniture_patch in item_of_furniture_patches:
        item_of_furniture_color = item_of_furniture_patch.simple_query(""What color is the item of furniture?"")
        if item_of_furniture_color == controller_color:
            return item_of_furniture_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    # If no item of furniture is found with the same color as the controller, pick the first item of furniture
    return item_of_furniture_patches[0].simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")"
2531874,Who is playing?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
3112009,Is the plate on the left side?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        return ""no""
    for plate_patch in plate_patches:
        if plate_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1527613,On which side of the picture is the bag?," # assumes only one bag patch
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
11781054,Are both the road and the roof the same color?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_road = image_patch.exists(""road"")
    is_roof = image_patch.exists(""roof"")
    if is_road and is_roof:
        road_patch = image_patch.find(""road"")[0]
        roof_patch = image_patch.find(""roof"")[0]
        return bool_to_yesno(road_patch.verify_property(""road"", ""red"") and roof_patch.verify_property(""roof"", ""red"")) # red is the only color that can be both road and roof
    return ""no"""
161027384,What is the green rug hanging on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?," # assumes only one patch
    image_patch = ImagePatch(image)
    standing_patches = image_patch.find(""person standing"")
    # Question assumes only one standing patch
    if len(standing_patches) == 0:
        # If no person is standing, query the image directly
        return image_patch.simple_query(""Who in the photo is standing?"")
    return standing_patches[0].simple_query(""Who in the photo is standing?"") # crop would include the standing so keep it in the query"
693318,Do you see any plates in the photo?," # assumes only one plate
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate""))"
19613394,The person on the skateboard is wearing what?," # assumes only one person on the skateboard
    image_patch = ImagePatch(image)
    person_on_skateboard_patches = image_patch.find(""person on a skateboard"")
    if len(person_on_skateboard_patches) == 0:
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    return person_on_skateboard_patches[0].simple_query(""The person on the skateboard is wearing what?"") # crop would include the skateboard so keep it in the query"
19927237,Is the blue car in front of the white van?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue car in front of the white van?"")"
31054022,What is the box sitting on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?," # snow and brown
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Does the ground look snowy and brown?"")
    ground_patch = ground_patches[0]
    is_snowy = ground_patch.verify_property(""ground"", ""snowy"")
    is_brown = ground_patch.verify_property(""ground"", ""brown"")
    return bool_to_yesno(is_snowy and is_brown)"
15185768,Does the sky look blue and clear?," # sky is blue and clear
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Does the sky look blue and clear?"")
    sky_patch = sky_patches[0]
    is_blue = sky_patch.verify_property(""sky"", ""blue"")
    is_clear = sky_patch.verify_property(""sky"", ""clear"")
    return bool_to_yesno(is_blue and is_clear)"
1589160,Does the person that is sitting lean against a fire hydrant?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return ""no""
    for person_patch in person_patches:
        is_sitting = (person_patch.simple_query(""Is the person sitting?"") == ""yes"")
        if is_sitting:
            is_leaning = (person_patch.simple_query(""Is the person leaning against something?"") == ""yes"")
            if is_leaning:
                is_firehydrant = (person_patch.simple_query(""What is the person leaning against?"") == ""fire hydrant"")
                if is_firehydrant:
                    return ""yes""
    return ""no"""
2142522,Are there any shopping carts or mannequins in this photo?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)"
17362234,Are there cages or scrub brushes in this picture?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)"
4955854,Is the lamp below the chain?," # assumes only one patch
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    for lamp_patch in lamp_patches:
        chain_patches = image_patch.find(""chain"")
        # Question assumes only one chain patch
        if len(chain_patches) == 0:
            return ""no""
        for chain_patch in chain_patches:
            if chain_patch.horizontal_center > lamp_patch.horizontal_center:
                return ""yes""
    return ""no"""
10463545,Is the computer to the right of the other computer silver or black?," # assumes only two computers
    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    # Question assumes only two computer patches
    if len(computer_patches) == 0:
        # If no computer is found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    for computer_patch in computer_patches:
        if computer_patch.horizontal_center > image_patch.horizontal_center:
            return computer_patch.best_text_match([""silver"", ""black""])
    return ""black"""
2265037,What is the girl wearing?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"") # crop would include the clothing so keep it in the query"
15485146,Are there any blue numbers or letters?," # assumes only one patch
    image_patch = ImagePatch(image)
    number_patches = image_patch.find(""number"")
    letter_patches = image_patch.find(""letter"")
    is_blue = image_patch.verify_property(""number"", ""blue"") or image_patch.verify_property(""letter"", ""blue"")
    return bool_to_yesno(is_blue)"
3483992,Is the long bus to the left or to the right of the person with the backpack?," # assumes only one long bus and one person with backpack
    image_patch = ImagePatch(image)
    long_bus_patches = image_patch.find(""long bus"")
    backpack_patches = image_patch.find(""person with backpack"")
    # Question assumes only one long bus patch and one backpack patch
    if len(long_bus_patches) == 0 or len(backpack_patches) == 0:
        # If no long bus or backpack is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    long_bus_patch = long_bus_patches[0]
    backpack_patch = backpack_patches[0]
    if long_bus_patch.horizontal_center < backpack_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
13598461,What is the device that is not on called?," # assumes only one device patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if not device_patch.verify_property(""device"", ""on""):
            return device_patch.simple_query(""What is the device that is not on called?"")
    # If all devices are on, query the image directly
    return image_patch.simple_query(""What is the device that is not on called?"")"
13885436,The sky has what color?," # sky is blue, but not always
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"")"
7432467,Is the black container to the left of the man that is on the motorcycle?," # assumes only one man and one motorcycle
    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        # If no black container is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    for black_container_patch in black_container_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return ""no""
        for man_patch in man_patches:
            motorcycle_patches = image_patch.find(""motorcycle"")
            # Question assumes only one motorcycle patch
            if len(motorcycle_patches) == 0:
                return ""no""
            for motorcycle_patch in motorcycle_patches:
                if motorcycle_patch.horizontal_center > man_patch.horizontal_center:
                    return ""yes""
    return ""no"""
19540096,Is the fire in an oven?," # assumes only one fire patch
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    if len(fire_patches) == 0:
        return ""no""
    for fire_patch in fire_patches:
        is_in_oven = (fire_patch.simple_query(""Is the fire in an oven?"") == ""yes"")
        if is_in_oven:
            return ""yes""
    return ""no"""
18291107,The horse is where?," # assumes only one horse patch
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""The horse is where?"")
    return horse_patches[0].simple_query(""The horse is where?"") # crop would include the horse so keep it in the query"
5435474,Is the man that is to the left of the motorbike wearing a hat?," # assumes only one man and one motorbike
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return bool_to_yesno(man_patch.verify_property(""man"", ""hat""))
    return ""no"""
226307,Are there any tables in the photo?," # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    return bool_to_yesno(len(table_patches) > 0)"
1944826,Who is reflected in the mirror?," # assumes only one mirror patch
    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    if len(mirror_patches) == 0:
        # If no mirror is found, query the image directly
        return image_patch.simple_query(""Who is reflected in the mirror?"")
    return mirror_patches[0].simple_query(""Who is reflected in the mirror?"") # crop would include the reflection so keep it in the query"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    for woman_patch in woman_patches:
        cooking_utensil_patches = image_patch.find(""cooking utensil"")
        for cooking_utensil_patch in cooking_utensil_patches:
            if cooking_utensil_patch.horizontal_center > woman_patch.horizontal_center:
                return cooking_utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    # If no cooking utensil is found, query the image directly
    return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")"
18435846,What is the color of the balloon that is to the right of the backpack?," # assumes only one backpack and balloon patch
    image_patch = ImagePatch(image)
    backpack_patches = image_patch.find(""backpack"")
    balloon_patches = image_patch.find(""balloon"")
    backpack_patch = backpack_patches[0]
    balloon_patch = balloon_patches[0]
    if backpack_patch.horizontal_center > balloon_patch.horizontal_center:
        return balloon_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    else:
        return backpack_patch.simple_query(""What is the color of the backpack that is to the right of the balloon?"") # crop would include the backpack so keep it in the query"
8390894,Is the woman to the right of the man sitting on a sofa?," # assumes only one woman and one man
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    for woman_patch in woman_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return ""no""
        for man_patch in man_patches:
            if woman_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
18896007,Which side of the image is the pot on?," # assumes only one pot patch
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
19323898,Is that pillow on a couch?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patch = image_patch.find(""pillow"")[0]
    is_on_couch = pillow_patch.simple_query(""Is that pillow on a couch?"")
    return bool_to_yesno(is_on_couch)"
1281034,Where are the trees?," # assumes only one tree patch
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    if len(tree_patches) == 0:
        return image_patch.simple_query(""Where are the trees?"")
    tree_patch = tree_patches[0]
    if tree_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    elif tree_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        if tree_patch.vertical_center > image_patch.vertical_center:
            return ""top""
        elif tree_patch.vertical_center < image_patch.vertical_center:
            return ""bottom""
        else:
            return ""center"""
13515147,What is on the cow?," # assumes only one object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the cow?"") # crop would include the object so keep it in the query"
91036716,What is the skater doing?," # assumes only one skater patch
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"") # crop would include the skater so keep it in the query"
17791510,What is the person to the left of the boy carrying?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the left of the boy carrying?"")"
13152020,Is the ground wet or dry?," # assumes the ground is in the bottom of the image
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Is the ground wet or dry?"")
    if ground_patches[0].vertical_center < image_patch.vertical_center:
        return ""wet""
    else:
        return ""dry"""
19312096,"On which side is the purse, the left or the right?"," # assumes only one purse patch
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    for purse_patch in purse_patches:
        if purse_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
71002343,Are there breads in this photograph?," # plural
    image_patch = ImagePatch(image)
    is_bread = image_patch.exists(""bread"")
    return bool_to_yesno(is_bread)"
9113663,Do you see either any snow or sand that are white?," # snow and sand are both white
    image_patch = ImagePatch(image)
    is_snow = image_patch.exists(""snow"")
    is_sand = image_patch.exists(""sand"")
    return bool_to_yesno(is_snow or is_sand)"
10243612,Which place is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"")"
15599523,Is the dog on the right side?," # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    if len(dog_patches) == 0:
        return ""no""
    dog_patch = dog_patches[0]
    if dog_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
101019673,What is the man wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"") # crop would include the clothing so keep it in the query"
333047,Do you see any men to the right of the orange tent?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
13907796,Is the shirt striped and green?," # shirt is striped and green
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    shirt_patch = shirt_patches[0]
    is_striped = shirt_patch.verify_property(""shirt"", ""striped"")
    is_green = shirt_patch.verify_property(""shirt"", ""green"")
    return bool_to_yesno(is_striped and is_green)"
17207604,Are there either bottles or shelves?," # assumes only one bottle patch and one shelf patch
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?," # assumes only one train patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    if len(train_patches) == 0:
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    train_patch = train_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > train_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    return train_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"") # crop would include the train so keep it in the query"
7165131,Is that train engine small or large?," # assumes only one train engine patch
    image_patch = ImagePatch(image)
    train_engine_patches = image_patch.find(""train engine"")
    if len(train_engine_patches) == 0:
        # If no train engine is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    train_engine_patch = train_engine_patches[0]
    if train_engine_patch.width < train_engine_patch.height:
        return ""small""
    else:
        return ""large"""
21049362,Where are the railroad tracks?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal looking at something?"") == ""yes"":
            return animal_patch.simple_query(""What is the animal looking at?"")
    return image_patch.simple_query(""What is the animal looking at?"") # if no animal is looking at something, query the image directly"
14367593,What are the children playing?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the children playing?"")"
598297,Are there combs or figurines in the picture?," # comb or figurine
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)"
16409127,What is the wire on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?," # assumes only one tunnel patch
    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    tunnel_patch = tunnel_patches[0]
    if tunnel_patch.width < tunnel_patch.height:
        return ""small""
    else:
        return ""large"""
17560468,Do you see trains or windows?," # trains or windows
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?," # assumes only one patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return image_patch.simple_query(""What is the person near the man wearing?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center > man_patch.horizontal_center:
        return person_patch.simple_query(""What is the person near the man wearing?"")
    else:
        return man_patch.simple_query(""What is the person near the man wearing?"") # crop would include the man so keep him in the query"
12352375,Is the vehicle that is sitting down black or blue?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle sitting down?"") == ""yes"":
            return vehicle_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"") # if no vehicle is sitting down, query the image directly"
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?," # assumes only one trash can patch
    image_patch = ImagePatch(image)
    trash_can_patches = image_patch.find(""metal trash can"")
    # Question assumes only one trash can patch
    if len(trash_can_patches) == 0:
        # If no trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    trash_can_patch = trash_can_patches[0]
    white_patches = image_patch.find(""white"")
    # Question assumes only one white patch
    if len(white_patches) == 0:
        return ""no""
    white_patch = white_patches[0]
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        return ""no""
    shower_curtain_patch = shower_curtain_patches[0]
    if trash_can_patch.horizontal_center < white_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5800248,Is it outdoors?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it outdoors?"")) # crop would include the outdoors so keep it in the query"
4604785,Does the pizza slice to the left of the pizza have large size?," # assumes only one pizza patch
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    if len(pizza_patches) == 0:
        return ""no""
    for pizza_patch in pizza_patches:
        left_pizza_patch = pizza_patch.crop(0, 0, pizza_patch.width / 2, pizza_patch.height)
        right_pizza_patch = pizza_patch.crop(pizza_patch.width / 2, 0, pizza_patch.width, pizza_patch.height)
        is_large = left_pizza_patch.simple_query(""What size is the pizza slice to the left of the pizza?"")
        is_large = right_pizza_patch.simple_query(""What size is the pizza slice to the right of the pizza?"")
        return bool_to_yesno(is_large == ""large"")"
15185845,What's the man wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What's the man wearing?"") # crop would include the clothing so keep it in the query"
2282232,Where is the snow?," # assumes only one patch
    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    if len(snow_patches) == 0:
        return image_patch.simple_query(""Where is the snow?"")
    snow_patch = snow_patches[0]
    if snow_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    elif snow_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif snow_patch.vertical_center > image_patch.vertical_center:
        return ""down""
    elif snow_patch.vertical_center < image_patch.vertical_center:
        return ""up""
    else:
        return ""center"""
7889197,Who is wearing a shirt?," # shirt is not part of the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for shirt_patch in shirt_patches:
        wearing_shirt = (shirt_patch.simple_query(""Is the shirt wearing a shirt?"") == ""yes"")
        if wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no shirt is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)"
154682,Where does the bird stand on?," # assumes only one bird patch
    image_patch = ImagePatch(image)
    bird_patch = image_patch.find(""bird"")
    if len(bird_patch) == 0:
        return image_patch.simple_query(""Where does the bird stand on?"")
    return bird_patch[0].simple_query(""Where does the bird stand on?"") # crop would include the object so keep it in the query"
10435315,Is the man holding a racket?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    is_holding_racket = (man_patch.simple_query(""Is the man holding a racket?"") == ""yes"")
    return bool_to_yesno(is_holding_racket)"
121035887,Do the man shorts have white color?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    man_shorts_patches = man_patch.find(""man shorts"")
    # Question assumes only one man shorts patch
    if len(man_shorts_patches) == 0:
        return ""no""
    return bool_to_yesno(man_shorts_patches[0].verify_property(""man shorts"", ""white""))"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?," # assumes only one man and one cow patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < man_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"") # if no vehicle is found, query the image directly"
19659501,What is the color of the umbrella the bird is on?," # assumes only one bird patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    bird_patch = bird_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        return ""no""
    umbrella_patch = umbrella_patches[0]
    return umbrella_patch.simple_query(""What is the color of the umbrella the bird is on?"") # crop would include the bird so keep it in the query"
10595217,Where is the grass?," # assumes only one patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"") # crop would include the grass so keep it in the query"
14803743,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"")
    # If no clothing is black, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"")"
19743238,Is the man on the right side?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
3965204,Are the mountains covered with snow?," # snow is a property
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    for mountain_patch in mountain_patches:
        is_snowy = mountain_patch.verify_property(""mountain"", ""snow"")
        return bool_to_yesno(is_snowy)"
141024710,Are there both windows and cars in the picture?," # assumes only one window and one car
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?," # shirt is the object
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    shirt_patch = shirt_patches[0]
    shirt_color = shirt_patch.simple_query(""What color do you think the shirt is?"")
    shirt_color = shirt_color.lower()
    shirt_color = shirt_color.replace("" "", """")
    shirt_color = shirt_color.replace(""white"", ""whited"")
    shirt_color = shirt_color.replace(""black"", ""blacked"")
    shirt_color = shirt_color.replace(""blue"", ""blued"")
    shirt_color = shirt_color.replace(""brown"", ""browned"")
    shirt_color = shirt_color.replace(""gray"", ""greyed"")
    shirt_color = shirt_color.replace(""green"", ""greened"")
    shirt_color = shirt_color.replace(""orange"", ""oranged"")
    shirt_color = shirt_color.replace(""pink"", ""pinked"")
    shirt_color = shirt_color.replace(""purple"", ""purpled"")
    shirt_color = shirt_color.replace(""red"", ""redded"")
    shirt_color = shirt_color.replace(""yellow"", ""yellowed"")
    shirt_color = shirt_color.replace(""beige"", ""beiged"")
    shirt_color = shirt_color.replace(""tan"", ""tanned"")
    shirt_color = shirt_color.replace(""khaki"", ""khakied"")
    shirt"
3623367,What's he doing?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's he doing?"") # crop would include the shirt so keep it in the query"
15634950,Where is the giraffe in front of the hay eating from?," # assumes only one giraffe and one hay patch
    image_patch = ImagePatch(image)
    giraffe_patch = image_patch.find(""giraffe"")[0]
    hay_patch = image_patch.find(""hay"")[0]
    if giraffe_patch.horizontal_center > hay_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16644500,What animal is the log pulled by?," # assumes only one log patch
    image_patch = ImagePatch(image)
    log_patch = image_patch.find(""log"")[0]
    return log_patch.simple_query(""What animal is the log pulled by?"") # crop would include the log so keep it in the query"
3202108,Which side is the car on?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""Which side is the car on?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
10137201,Are the papers in the bottom part of the picture?," # assumes only one paper patch
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    if len(paper_patches) == 0:
        return ""no""
    for paper_patch in paper_patches:
        if paper_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?," # assumes only one patch
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    boy_patch = boy_patches[0]
    leftmost_patches = image_patch.find(""person"")
    # Question assumes only one leftmost patch
    if len(leftmost_patches) == 0:
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    leftmost_patch = leftmost_patches[0]
    if boy_patch.horizontal_center < leftmost_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8438091,The picture is what color?," # color
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The picture is what color?"")"
4325939,On which side of the photo is the banana?," # assumes only one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana, left or right?"")
    banana_patch = banana_patches[0]
    if banana_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1425189,What is the name of the brown piece of furniture?," # assumes only one brown piece of furniture
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown piece of furniture"")
    if len(brown_patches) == 0:
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return brown_patches[0].simple_query(""What is the name of the brown piece of furniture?"") # crop would include the brown color so keep it in the query"
5119962,Is the man to the right of glasses?," # glasses is a noun
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    for man_patch in man_patches:
        glasses_patches = image_patch.find(""glasses"")
        for glasses_patch in glasses_patches:
            if glasses_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    toilet_patch = toilet_patches[0]
    lid_patches = toilet_patch.find(""lid"")
    if len(lid_patches) == 0:
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    lid_patch = lid_patches[0]
    lid_position = lid_patch.simple_query(""What is the position of the toilet lid, down or up?"")
    if lid_position == ""down"":
        return lid_position
    else:
        return lid_position"
6522554,Which kind of device does the man hold?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = man_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return man_patch.simple_query(""Which kind of device does the man hold?"")
    return device_patches[0].simple_query(""Which kind of device does the man hold?"") # crop would include the device so keep it in the query"
870619,What is the device to the left of the person that is to the left of the television?," # assumes only one patch for each object
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    for device_patch in device_patches:
        person_patches = image_patch.find(""person"")
        if len(person_patches) == 0:
            return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
        for person_patch in person_patches:
            television_patches = image_patch.find(""television"")
            if len(television_patches) == 0:
                return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
            for television_patch in television_patches:
                if television_patch.horizontal_center > person_patch.horizontal_center:
                    if person_patch.horizontal_center > device_patch.horizontal_center:
                        return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"") # if no device is found, query the image directly"
12713794,Does the woman to the left of the man wear a necklace?," # assumes only one woman and one man
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    for woman_patch in woman_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return ""no""
        for man_patch in man_patches:
            if woman_patch.horizontal_center < man_patch.horizontal_center:
                return ""yes""
    return ""no"""
824070,What is the man doing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"") # crop would include the shirt so keep it in the query"
11593733,Which kind of furniture is right to the pillow?," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    return furniture_patches[0].simple_query(""Which kind of furniture is right to the pillow?"") # crop would include the pillow so keep it in the query"
3357821,Does the dog to the left of the other dog look small or large?," # assumes only two dogs
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    for dog_patch in dog_patches:
        if dog_patch.horizontal_center < image_patch.horizontal_center:
            return dog_patch.simple_query(""Does the dog look small or large?"")
    return dog_patches[0].simple_query(""Does the dog look small or large?"") # if no dog is to the left, query the first dog"
338026,Are the white candles short or tall?," # assumes only one patch
    image_patch = ImagePatch(image)
    white_candle_patches = image_patch.find(""white candle"")
    # Question assumes only one white candle patch
    if len(white_candle_patches) == 0:
        # If no white candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    for white_candle_patch in white_candle_patches:
        if white_candle_patch.height < image_patch.height / 2:
            return ""short""
        else:
            return ""tall"""
15346232,What kind of fruit is the girl holding?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    for girl_patch in girl_patches:
        fruit_patches = image_patch.find(""fruit"")
        # Question assumes only one fruit patch
        if len(fruit_patches) == 0:
            # If no fruit is found, query the image directly
            return image_patch.simple_query(""What kind of fruit is the girl holding?"")
        return fruit_patches[0].simple_query(""What kind of fruit is the girl holding?"") # crop would include the fruit so keep it in the query"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?"," # assumes only one yellow vehicle
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    if len(yellow_vehicle_patches) == 0:
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    yellow_vehicle_patch = yellow_vehicle_patches[0]
    if yellow_vehicle_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
81030271,Is the gray car to the right or to the left of the cart?," # assumes only one gray car and one cart
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    gray_car_patch = gray_car_patches[0]
    cart_patches = image_patch.find(""cart"")
    # Question assumes only one cart patch
    if len(cart_patches) == 0:
        return ""no""
    cart_patch = cart_patches[0]
    if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?," # assumes only one patch
    image_patch = ImagePatch(image)
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        # If no cooking utensil is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    for cooking_utensil_patch in cooking_utensil_patches:
        canister_patches = image_patch.find(""canister"")
        for canister_patch in canister_patches:
            if canister_patch.horizontal_center > cooking_utensil_patch.horizontal_center:
                return cooking_utensil_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    # If no cooking utensil is to the right of the canister, pick the first cooking utensil
    return cooking_utensil_patches[0].simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")"
8240699,What animal is in front of the bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the bird?"")"
10105081,Is the fence white or green?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the fence white or green?"")
    fence_patch = fence_patches[0]
    return fence_patch.best_text_match([""white"", ""green""])"
13613689,Is there a train or a fence in the picture?," # assumes only one object
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)"
10662521,What is the bottle made of?," # glass, metal, plastic, ceramic, etc
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"") # crop would include the bottle so keep it in the query"
1152309,Which kind of fruit is on the plate?," # assumes only one plate patch
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    return fruit_patches[0].simple_query(""Which kind of fruit is on the plate?"") # crop would include the plate so keep it in the query"
16701575,What device is to the right of the cake?," # assumes only one cake patch
    image_patch = ImagePatch(image)
    cake_patches = image_patch.find(""cake"")
    if len(cake_patches) == 0:
        return image_patch.simple_query(""What device is to the right of the cake?"")
    for cake_patch in cake_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center > cake_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the right of the cake?"")
    return image_patch.simple_query(""What device is to the right of the cake?"") # if no device is found, query the image directly"
6572516,What material is the ceiling?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?," # assumes only one egg patch
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    if len(egg_patches) == 0:
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    egg_patch = egg_patches[0]
    horizontal_center = egg_patch.horizontal_center
    for egg_patch in egg_patches:
        if egg_patch.horizontal_center > horizontal_center:
            horizontal_center = egg_patch.horizontal_center
    return egg_patch.simple_query(""What is the color of the egg in the middle of the picture?"") # crop would include the egg so keep it in the query"
14371534,Are the gold pans on the right part or on the left?," # assumes only one gold pan patch
    image_patch = ImagePatch(image)
    gold_pan_patches = image_patch.find(""gold pan"")
    if len(gold_pan_patches) == 0:
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    gold_pan_patch = gold_pan_patches[0]
    if gold_pan_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16538076,What does the man that is not tall wear?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if man_patch.simple_query(""Is the man tall?"") == ""no"":
            return man_patch.simple_query(""What does the man that is not tall wear?"")
    # If no man is not tall, pick the first man
    return man_patches[0].simple_query(""What does the man that is not tall wear?"")"
5483644,"On which side is the woman, the left or the right?"," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal in this photograph?"")
    return animal_patches[0].simple_query(""What is the animal in this photograph?"") # crop would include the animal so keep it in the query"
1290926,Are there either any life vests or flags?," # life vest or flag
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)"
18273738,Do you see a cup?," # assumes only one cup patch
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        return ""no""
    return ""yes"""
4211922,Who is sitting on the table?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?," # assumes only two girls
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only two girl patches
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center < image_patch.horizontal_center:
            return girl_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    return girl_patches[1].simple_query(""What is the color of the girl to the left of the other girl?"") # crop would include the other girl so keep it in the query"
6599090,What is the person to the right of the car holding?," # assumes only one person and one car
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > car_patch.horizontal_center:
            return person_patch.simple_query(""What is the person to the right of the car holding?"")
    return image_patch.simple_query(""What is the person to the right of the car holding?"") # if no person is to the right of the car, query the image directly"
1174895,What is the vehicle in the parking lot?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    return vehicle_patches[0].simple_query(""What is the vehicle in the parking lot?"") # crop would include the parking lot so keep it in the query"
14755158,Who is the woman in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the woman in front of?"")"
18349161,Where does the cow that is standing stand?," # assumes only one cow patch
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    return cow_patches[0].simple_query(""Where does the cow that is standing stand?"") # crop would include the standing so keep it in the query"
7472884,On which side is the tap?," # left or right
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap, left or right?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
111051831,On which side of the image is the cabinet?," # assumes only one cabinet patch
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet, left or right?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?," # assumes only one fork patch
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    fork_patch = fork_patches[0]
    if fork_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
2409726,Do you see men to the right of the bag the person is carrying?," # assumes only one man and one bag
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?," # assumes only one artwork patch and one computer desk patch
    image_patch = ImagePatch(image)
    artwork_patch = image_patch.find(""artwork"")[0]
    computer_desk_patch = image_patch.find(""computer desk"")[0]
    is_same_material = artwork_patch.verify_property(""artwork"", ""material"") == computer_desk_patch.verify_property(""computer desk"", ""material"")
    return bool_to_yesno(is_same_material)"
14298125,Who is playing Wii?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")"
9382689,What's the floor made of?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the dress?"")"
15127108,Does the tea pot above the receipt look short and white?," # receipt is below the tea pot
    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    # Question assumes only one tea pot patch
    if len(tea_pot_patches) == 0:
        # If no tea pot is found, query the image directly
        return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")
    for tea_pot_patch in tea_pot_patches:
        receipt_patches = image_patch.find(""receipt"")
        # Question assumes only one receipt patch
        if len(receipt_patches) == 0:
            return ""no""
        for receipt_patch in receipt_patches:
            if tea_pot_patch.vertical_center > receipt_patch.vertical_center:
                return ""yes""
    return ""no"""
15632653,Which room is it?," # assumes only one room
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""Which room is it?"")
    return room_patches[0].simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
485962,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"")
    # If no clothing is black, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"")"
490992,Is the fence on the left side or on the right of the picture?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?," # assumes only one mountain patch
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Do the mountains look rocky?"")
    return bool_to_yesno(mountain_patches[0].verify_property(""mountain"", ""rocky""))"
17573742,Is the woman to the right of the camera wearing a coat?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        is_wearing_coat = (woman_patch.simple_query(""Is the woman wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return ""yes""
    return ""no"""
3395780,Is the vehicle to the left of the parking meter covered in rain?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return ""no""
    for vehicle_patch in vehicle_patches:
        is_raining = (vehicle_patch.simple_query(""Is it raining?"") == ""yes"")
        if is_raining:
            parking_meter_patches = image_patch.find(""parking meter"")
            for parking_meter_patch in parking_meter_patches:
                if vehicle_patch.horizontal_center < parking_meter_patch.horizontal_center:
                    return ""yes""
    return ""no"""
1542668,Is there a black laptop or desk?," # assumes only one patch
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    if len(laptop_patches) == 0:
        return ""no""
    for laptop_patch in laptop_patches:
        is_black = (laptop_patch.simple_query(""Is the laptop black?"") == ""yes"")
        if is_black:
            return ""laptop""
    desk_patches = image_patch.find(""desk"")
    if len(desk_patches) == 0:
        return ""no""
    for desk_patch in desk_patches:
        is_black = (desk_patch.simple_query(""Is the desk black?"") == ""yes"")
        if is_black:
            return ""desk""
    return ""no"""
1655442,What type of food is to the right of the waffles that are to the right of the person?," # assumes only one person patch
    image_patch = ImagePatch(image)
    waffle_patches = image_patch.find(""waffle"")
    # Question assumes only one waffle patch
    if len(waffle_patches) == 0:
        # If no waffle is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for waffle_patch in waffle_patches:
        food_patches = image_patch.find(""food"")
        # Question assumes only one food patch
        if len(food_patches) == 0:
            return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
        for food_patch in food_patches:
            if food_patch.horizontal_center > waffle_patch.horizontal_center:
                return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"") # if no food is found, query the image directly"
395290,How large is the bag?," # assumes only one bag patch
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"") # crop would include the bag so keep it in the query"
16138893,Are there both motorcycles and cars in this scene?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?," # assumes only one person wearing shorts
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"")
    return person_patches[0].simple_query(""Who is wearing shorts?"") # if no person is wearing shorts, pick the first person"
171032184,What hangs from the windows?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?," # assumes only one spoon and one plate
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")"
8197176,What color is the jacket that the man wears?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = man_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    jacket_patch = jacket_patches[0]
    return jacket_patch.simple_query(""What color is the jacket that the man wears?"") # crop would include the jacket so keep it in the query"
3440931,What are that pieces of furniture called?," # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are that pieces of furniture called?"")"
337924,What is the fruit that is to the left of the chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think are the bowls on?"") # crop would include the object on so keep it in the query"
18330260,Is the sky above the trees open and clear?," # sky, open, clear
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky above the trees open and clear?"")
    for sky_patch in sky_patches:
        if sky_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
14119691,Does the squirrel to the right of the stuffed dog look white?," # assumes only one squirrel and dog patch
    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    # Question assumes only one squirrel patch
    if len(squirrel_patches) == 0:
        # If no squirrel is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for squirrel_patch in squirrel_patches:
        dog_patches = image_patch.find(""stuffed dog"")
        # Question assumes only one dog patch
        if len(dog_patches) == 0:
            return ""no""
        for dog_patch in dog_patches:
            if squirrel_patch.horizontal_center > dog_patch.horizontal_center:
                return squirrel_patch.simple_query(""Does the squirrel look white?"")
    return ""no"""
18437694,Does the clock to the right of the statue have gold color and tiny size?," # assumes only one clock patch
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    if len(clock_patches) == 0:
        return ""no""
    for clock_patch in clock_patches:
        is_gold = clock_patch.verify_property(""clock"", ""gold"")
        is_tiny = clock_patch.verify_property(""clock"", ""tiny"")
        if is_gold and is_tiny:
            return ""yes""
    return ""no"""
1252960,Where was the photo taken?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?," # assumes only one frisbee patch
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    if len(frisbee_patches) == 0:
        return ""no""
    for frisbee_patch in frisbee_patches:
        if frisbee_patch.lower > image_patch.upper / 2:
            return ""yes""
    return ""no"""
13180513,Are there either cakes or containers in the photo?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?," # assumes only one police officer patch
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    for blue_car_patch in blue_car_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > police_officer_patch.horizontal_center:
                return ""left""
        return ""front""
    return ""back"""
5785831,What is in the glass?," # assumes only one glass patch
    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is in the glass?"")
    return glass_patches[0].simple_query(""What is in the glass?"") # crop would include the glass so keep it in the query"
19246241,Are there any brown benches or buckets?," # assumes only one patch
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    bucket_patches = image_patch.find(""bucket"")
    return bool_to_yesno(len(bench_patches) > 0 or len(bucket_patches) > 0)"
3243803,"Where in the picture is the spoon, on the right or on the left?"," # assumes only one spoon patch
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
6952486,Does the shirt look white?," # shirt is the object, white is the property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    shirt_patch = shirt_patches[0]
    return bool_to_yesno(shirt_patch.verify_property(""shirt"", ""white""))"
17401425,Is there a bag that is not brown?," # assumes only one bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if not bag_patch.verify_property(""bag"", ""brown""):
            return ""yes""
    return ""no"""
481240,"Which kind of furniture is large, the shelf or the cupboard?"," # assumes only one shelf and one cupboard
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    if len(shelf_patches) == 0 or len(cupboard_patches) == 0:
        # If no shelf or cupboard is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    shelf_patch = shelf_patches[0]
    cupboard_patch = cupboard_patches[0]
    if shelf_patch.width > cupboard_patch.width:
        return ""shelf""
    else:
        return ""cupboard"""
8531943,Are there any screens or bags?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)"
1969545,What is she wearing?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    return woman_patches[0].simple_query(""What is she wearing?"") # crop would include the clothing so keep it in the query"
91045271,"Which appliance is not white, the freezer or the ice maker?"," # freezer and ice maker are the same object
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    for appliance_patch in appliance_patches:
        if appliance_patch.simple_query(""Is the appliance white?"") == ""yes"":
            return appliance_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    return appliance_patches[0].simple_query(""Which appliance is not white, the freezer or the ice maker?"") # crop would include the white so keep it in the query"
1051870,Are there chairs or tables that are not green?," # not green
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    if is_chair and is_table:
        return ""yes""
    if is_chair:
        return ""chair""
    if is_table:
        return ""table""
    return ""no"""
1366363,Does the taxi have a different color than the truck?," # taxi and truck are the same color
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        return ""yes""
    for taxi_patch in taxi_patches:
        for truck_patch in truck_patches:
            if taxi_patch.horizontal_center > truck_patch.horizontal_center:
                return ""yes""
    return ""no"""
5460839,In which part of the image is the dog?," # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    dog_patch = dog_patches[0]
    if dog_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif dog_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        if dog_patch.vertical_center < image_patch.vertical_center:
            return ""bottom""
        else:
            return ""top"""
18899476,What type of vegetable is to the right of the rice that is on the plate?," # assumes only one patch
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > image_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"") # if no vegetable is to the right of the rice, query the image directly"
8606903,What food item is not wide?," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.width > image_patch.width / 2:
            return food_patch.simple_query(""What food item is not wide?"")
    return food_patches[0].simple_query(""What food item is not wide?"") # crop would include the width so keep it in the query"
18394861,Are there any folding chairs or skateboards?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?," # assumes only one elephant patch
    image_patch = ImagePatch(image)
    elephant_patch = image_patch.find(""elephant"")[0]
    pond_patches = image_patch.find(""pond"")
    # Question assumes only one pond patch
    if len(pond_patches) == 0:
        # If no pond is found, query the image directly
        return image_patch.simple_query(""Is there an elephant near the pond?"")
    return bool_to_yesno(elephant_patch.horizontal_center > pond_patch.horizontal_center - 50) # 50 pixels"
1575941,Which place is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?," # assumes only one patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    for floor_patch in floor_patches:
        desk_patches = image_patch.find(""desk"")
        for desk_patch in desk_patches:
            if desk_patch.horizontal_center > floor_patch.horizontal_center:
                return floor_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    return floor_patches[0].simple_query(""What is the color of the floor that the desk is on top of?"") # crop would include the desk so keep it in the query"
16654241,Is the TV on the left or on the right?," # assumes only one TV patch
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    if len(tv_patches) == 0:
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    tv_patch = tv_patches[0]
    if tv_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
18685233,Which kind of vehicle is to the left of the flags?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < image_patch.horizontal_center:
            return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    return vehicle_patches[0].simple_query(""Which kind of vehicle is to the left of the flags?"") # crop would include the flags so keep it in the query"
9796068,Are there both a fence and a sheep in the picture?," # fence and sheep
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?," # assumes only one patch
    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue"")
    if len(blue_patches) == 0:
        return ""no""
    for blue_patch in blue_patches:
        if blue_patch.exists(""blanket"") or blue_patch.exists(""towel""):
            return ""yes""
    return ""no"""
1110330,Is the pillow to the left of the frog cream colored or green?," # pillow is cream colored, frog is green
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center < image_patch.horizontal_center:
            return pillow_patch.best_text_match([""cream colored"", ""green""])
    return ""green"""
511507,Is the antenna on the aircraft?," # assumes only one aircraft patch
    image_patch = ImagePatch(image)
    aircraft_patches = image_patch.find(""aircraft"")
    if len(aircraft_patches) == 0:
        return ""no""
    for aircraft_patch in aircraft_patches:
        is_antenna = aircraft_patch.verify_property(""antenna"", ""on"")
        return bool_to_yesno(is_antenna)"
10464417,"In which part is the tent, the top or the bottom?"," # assumes only one tent patch
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center > image_patch.vertical_center:
        return ""top""
    else:
        return ""bottom"""
10816730,Is the tree in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tree in front of the building?"")"
18766115,Who is walking?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is walking?"") # crop would include the walking so keep it in the query"
10625851,Are there either any fruits or plates in the image?," # assumes only one object
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?," # coat or jacket
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    for person_patch in person_patches:
        is_wearing_coat = (person_patch.simple_query(""Is the person wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return ""yes""
    return ""no"""
4194722,Is the man wearing a helmet?," # helmet is a property
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    return man_patches[0].verify_property(""man"", ""helmet"")"
414248,"What animal are the women near the ocean riding, a pig or a horse?"," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.horizontal_center:
            return animal_patch.best_text_match([""horse"", ""pig""])
    return image_patch.best_text_match([""horse"", ""pig""]) # if no animal is found, query the image directly"
683094,Who is wearing the shirt?," # shirt is not a predicate of a relational verb
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for shirt_patch in shirt_patches:
        wearing_shirt = (shirt_patch.simple_query(""Is the person wearing the shirt?"") == ""yes"")
        if wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query
    # If no one is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")"
12140603,What device is to the left of the headphones?," # assumes only one patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < image_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the left of the headphones?"")
    return ""no device"""
5575209,The flowers are where?," # assumes only one patch
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    if len(flower_patches) == 0:
        return image_patch.simple_query(""The flowers are where?"")
    for flower_patch in flower_patches:
        return flower_patch.simple_query(""The flowers are where?"") # crop would include the flowers so keep it in the query"
8773829,Which kind of furniture is made of wood?," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture made of wood?"") == ""yes"":
            return furniture_patch.simple_query(""Which kind of furniture is made of wood?"")
    return image_patch.simple_query(""Which kind of furniture is made of wood?"") # if no furniture is made of wood, query the image directly"
12636428,Which kind of animal is black?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What color is the animal?"") == ""black"":
            return animal_patch.simple_query(""Which kind of animal is black?"")
    # If no animal is black, query the image directly
    return image_patch.simple_query(""Which kind of animal is black?"")"
1020584,What animals is the car behind of?," # assumes only one car patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals is the car behind of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
11879418,The man is standing on what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is standing on what?"")"
12334288,What device is to the left of the cabinet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is to the left of the cabinet?"")"
691610,Is the monitor to the left of a book?," # assumes only one monitor and one book
    image_patch = ImagePatch(image)
    monitor_patch = image_patch.find(""monitor"")[0]
    book_patch = image_patch.find(""book"")[0]
    if monitor_patch.horizontal_center < book_patch.horizontal_center:
        return ""yes""
    return ""no"""
7552714,Is the color of the jacket black?," # assumes only one jacket patch
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    if len(jacket_patches) == 0:
        return ""no""
    return jacket_patches[0].verify_property(""jacket"", ""black"")"
8492422,Is the man to the left of a boy?," # assumes only one man and one boy
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    boy_patches = image_patch.find(""boy"")
    if len(man_patches) == 0 or len(boy_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    boy_patch = boy_patches[0]
    if man_patch.horizontal_center < boy_patch.horizontal_center:
        return ""yes""
    return ""no"""
13248061,What type of device is to the left of the keyboard in the bottom of the image?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")"
18252454,What is common to the roof and the sky?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is common to the roof and the sky?"") # crop would include the roof and sky so keep it in the query"
14443687,What do the cat and the book have in common?," # assumes only one cat and one book
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    # Question assumes only one cat patch and one book patch
    if len(cat_patches) == 0 or len(book_patches) == 0:
        # If no cat or book is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    cat_patch = cat_patches[0]
    book_patch = book_patches[0]
    if cat_patch.horizontal_center > book_patch.horizontal_center:
        return ""horizontal center""
    elif cat_patch.horizontal_center < book_patch.horizontal_center:
        return ""horizontal center""
    elif cat_patch.vertical_center > book_patch.vertical_center:
        return ""vertical center""
    elif cat_patch.vertical_center < book_patch.vertical_center:
        return ""vertical center""
    else:
        return ""horizontal center"""
14571335,Who is wearing trousers?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing trousers?"")"
474885,Who wears a cap?," # assumes only one cap patch
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    return cap_patches[0].simple_query(""Who wears a cap?"") # crop would include the cap so keep it in the query"
141013015,"What color is the toilet, brown or white?"," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    for toilet_patch in toilet_patches:
        return toilet_patch.best_text_match([""brown"", ""white""])"
5515816,On which side of the image is the fence?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16774696,What is the surfer wearing?," # surfer is wearing a wetsuit
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the surfer wearing?"") # crop would include the wetsuit so keep it in the query"
13701956,Is there any grass or sand that is not dry?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one patch of each
    if len(grass_patches) == 0 and len(sand_patches) == 0:
        # If no grass or sand is found, query the image directly
        return image_patch.simple_query(""Is there any grass or sand that is not dry?"")
    for patch in grass_patches + sand_patches:
        is_dry = patch.simple_query(""Is the grass or sand dry?"")
        if is_dry == ""yes"":
            return ""yes""
    return ""no"""
11606870,Is there a cow or a zebra in the picture?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Is there a cow or a zebra in the picture?"")
    return animal_patches[0].best_text_match([""cow"", ""zebra""])"
1589297,Does the fire hydrant look modern?," # modern is a property
    image_patch = ImagePatch(image)
    fire_hydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(fire_hydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    return bool_to_yesno(fire_hydrant_patches[0].verify_property(""fire hydrant"", ""modern""))"
942308,Is the cup empty or full?," # assumes only one cup patch
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    for cup_patch in cup_patches:
        is_empty = (cup_patch.simple_query(""Is the cup empty or full?"") == ""empty"")
        if is_empty:
            return ""empty""
    return ""full"""
15815976,Is the woman wearing a scarf?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        is_wearing_scarf = (woman_patch.simple_query(""Is the woman wearing a scarf?"") == ""yes"")
        if is_wearing_scarf:
            return ""yes""
    return ""no"""
3193231,Do you see either parking meters or brooms in the picture?," # parking meter or broom
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)"
314218,Is the sign in front of the bridge small and white?," # assumes only one sign patch
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    if len(sign_patches) == 0:
        return ""no""
    sign_patch = sign_patches[0]
    is_small = sign_patch.simple_query(""Is the sign small?"") == ""yes""
    is_white = sign_patch.simple_query(""Is the sign white?"") == ""yes""
    is_in_front_of_bridge = sign_patch.simple_query(""Is the sign in front of the bridge?"") == ""yes""
    return bool_to_yesno(is_small and is_white and is_in_front_of_bridge)"
18130465,Does the umbrella that is not dry look orange and open?," # assumes only one umbrella patch
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    for umbrella_patch in umbrella_patches:
        is_dry = umbrella_patch.verify_property(""umbrella"", ""dry"")
        is_open = umbrella_patch.verify_property(""umbrella"", ""open"")
        if not is_dry:
            is_orange = umbrella_patch.verify_property(""umbrella"", ""orange"")
            if is_orange:
                return ""yes""
    return ""no"""
7920817,What's in the paper?," # assumes only one paper patch
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""What's in the paper?"")
    return paper_patches[0].simple_query(""What's in the paper?"") # crop would include the paper so keep it in the query"
18167292,What is on the bun in the top?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the bun in the top?"")"
16929928,What is the fence made of?," # fence is a relational verb
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?," # assumes only one woman and one lady
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    woman_patch = woman_patches[0]
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        return ""left""
    lady_patch = lady_patches[0]
    if woman_patch.horizontal_center < lady_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17993299,Is the horse to the left of a car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the horse to the left of a car?"")"
8717022,Is the small animal to the left of the vehicle that looks silver?," # assumes only one patch
    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        # If no small animal is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    for small_animal_patch in small_animal_patches:
        vehicle_patches = image_patch.find(""vehicle that looks silver"")
        # Question assumes only one vehicle patch
        if len(vehicle_patches) == 0:
            return ""no""
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > small_animal_patch.horizontal_center:
                return ""yes""
    return ""no"""
2998707,Which color is the chair that is on the right?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            return chair_patch.simple_query(""Which color is the chair that is on the right?"")
    return image_patch.simple_query(""Which color is the chair that is on the right?"") # if no chair is on the right, query the image directly"
171017786,Do you see any cups to the left of the monitor?," # assumes only one monitor patch
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one monitor patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    for cup_patch in cup_patches:
        if cup_patch.horizontal_center < monitor_patch.horizontal_center:
            return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?," # glasses are to the right of the girl
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    glasses_patch = glasses_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        return ""right""
    girl_patch = girl_patches[0]
    if glasses_patch.horizontal_center > girl_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1941568,What animal is in the water?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.lower > animal_patch.upper / 2:
            return animal_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"") # crop would include the water so keep it in the query"
17577787,Does the man's hair look short and white?," # hair is short and white
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    is_hair_short = man_patch.simple_query(""Does the man's hair look short?"") == ""yes""
    is_hair_white = man_patch.simple_query(""Does the man's hair look white?"") == ""yes""
    return bool_to_yesno(is_hair_short and is_hair_white)"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?," # assumes only one bottle and toilet patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    bottle_patch = image_patch.find(""bottle"")[0]
    toilet_patch = image_patch.find(""toilet"")[0]
    if len(chair_patches) == 0:
        return ""no""
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center < bottle_patch.horizontal_center:
            return ""yes""
    if toilet_patch.horizontal_center > bottle_patch.horizontal_center:
        return ""yes""
    return ""no"""
9825336,Which kind of furniture is the mat lying on?," # mat is a piece of furniture
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    return mat_patches[0].simple_query(""Which kind of furniture is the mat lying on?"") # crop would include the mat so keep it in the query"
11222427,Do you see fences or elephants?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?"," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture white?"") == ""yes"":
            return furniture_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    return furniture_patches[0].simple_query(""What kind of furniture is not white, the entertainment center or the bed?"") # crop would include the white so keep it in the query"
1152020,Do you see either any plate or tomato that are red?," # plate or tomato
    image_patch = ImagePatch(image)
    is_red = image_patch.verify_property(""plate"", ""red"") or image_patch.verify_property(""tomato"", ""red"")
    return bool_to_yesno(is_red)"
8961520,Who is surfing?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"") # crop would include the surfboard so keep it in the query"
18106780,Which room is it?," # assumes only one room
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""Which room is it?"")
    return room_patches[0].simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
1892692,What color do you think the bowl that is to the right of the person is?," # bowl is to the right of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for person_patch in person_patches:
        bowl_patches = image_patch.find(""bowl"")
        # Question assumes only one bowl patch
        if len(bowl_patches) == 0:
            return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
        for bowl_patch in bowl_patches:
            if bowl_patch.horizontal_center > person_patch.horizontal_center:
                return bowl_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    # If no bowl is found to the right of the person, query the image directly
    return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")"
6952082,What color is the hair?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"") # crop would include the hair so keep it in the query"
3768067,What color is the pot the statue is to the right of?," # assumes only one pot patch
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    for pot_patch in pot_patches:
        statue_patches = image_patch.find(""statue"")
        for statue_patch in statue_patches:
            if statue_patch.horizontal_center > pot_patch.horizontal_center:
                return pot_patch.simple_query(""What color is the pot the statue is to the right of?"")
    # If no statue is to the right of the pot, query the image directly
    return image_patch.simple_query(""What color is the pot the statue is to the right of?"")"
17866761,Is the clear glass on the shelf of the table?," # shelf of the table
    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    for clear_glass_patch in clear_glass_patches:
        shelf_of_table_patches = image_patch.find(""shelf of the table"")
        for shelf_of_table_patch in shelf_of_table_patches:
            if shelf_of_table_patch.horizontal_center > clear_glass_patch.horizontal_center:
                return ""yes""
    return ""no"""
798020,Does the skirt look black or yellow?," # skirt is yellow
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].best_text_match([""black"", ""yellow""])"
828981,How old is he?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How old is he?"") # crop would include the shirt so keep it in the query"
7236463,Of what color is the book?," # assumes only one book patch
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""Of what color is the book?"") # crop would include the book so keep it in the query"
6376684,What color is the car to the left of the train car?," # assumes only one train car
    image_patch = ImagePatch(image)
    train_car_patches = image_patch.find(""train car"")
    # Question assumes only one train car patch
    if len(train_car_patches) == 0:
        # If no train car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    for train_car_patch in train_car_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if car_patch.horizontal_center < train_car_patch.horizontal_center:
                return car_patch.simple_query(""What color is the car to the left of the train car?"")
    return train_car_patch.simple_query(""What color is the car to the left of the train car?"") # crop would include the train car so keep it in the query"
786798,Is this a photo of a beach?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a photo of a beach?"")"
19836753,What vehicles are to the left of the fence?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    for fence_patch in fence_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicles are to the left of the fence?"")
    return image_patch.simple_query(""What vehicles are to the left of the fence?"") # if no vehicle is found, query the image directly"
15284615,Who is playing?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    is_walking = (man_patch.simple_query(""Is the man walking?"") == ""yes"")
    if is_walking:
        is_holding_remote_control = (man_patch.simple_query(""Is the man holding a remote control?"") == ""yes"")
        if is_holding_remote_control:
            return ""yes""
    return ""no"""
17746396,What's the boy wearing?," # assumes only one boy patch
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    return boy_patches[0].simple_query(""What's the boy wearing?"") # crop would include the clothing so keep it in the query"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?," # assumes only one tap, bottle, and mug
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    bottle_patches = image_patch.find(""bottle"")
    mug_patches = image_patch.find(""mug"")
    # Question assumes only one tap, bottle, and mug patch
    if len(tap_patches) == 0 or len(bottle_patches) == 0 or len(mug_patches) == 0:
        # If no tap, bottle, or mug is found, query the image directly
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    tap_patch = tap_patches[0]
    bottle_patch = bottle_patches[0]
    mug_patch = mug_patches[0]
    if mug_patch.horizontal_center > bottle_patch.horizontal_center:
        return ""yes""
    elif bottle_patch.horizontal_center > tap_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
13826837,What color is the door?," # door is the object, color is the property
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    return door_patches[0].simple_query(""What color is the door?"") # crop would include the door so keep it in the query"
19249907,Are there any horses in the field?," # field is a place
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse""))"
2964690,What is in front of the mountains?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?," # assumes only one truck patch
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for truck_patch in truck_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
                return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?," # assumes only one scarf patch
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    if len(scarf_patches) == 0:
        return ""no""
    scarf_patch = scarf_patches[0]
    is_wool = scarf_patch.verify_property(""scarf"", ""wool"")
    is_long = scarf_patch.verify_property(""scarf"", ""long"")
    is_blue = scarf_patch.verify_property(""scarf"", ""blue"")
    return bool_to_yesno(is_wool and is_long and is_blue)"
1189986,Is the man behind the elephant holding a surfboard?," # assumes only one man and elephant patch
    image_patch = ImagePatch(image)
    man_patch = image_patch.find(""man"")[0]
    elephant_patch = image_patch.find(""elephant"")[0]
    if elephant_patch.horizontal_center > man_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
8792466,Which color is the closed window?," # closed window
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    for window_patch in window_patches:
        if window_patch.simple_query(""Is the window open or closed?"") == ""closed"":
            return window_patch.simple_query(""Which color is the closed window?"")
    # If no closed window is found, query the image directly
    return image_patch.simple_query(""Which color is the closed window?"")"
10188423,Who is wearing a shirt?," # shirt is not part of the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for shirt_patch in shirt_patches:
        wearing_shirt = (shirt_patch.simple_query(""Is the shirt wearing a shirt?"") == ""yes"")
        if wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no shirt is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?," # assumes only one vegetable patch
    image_patch = ImagePatch(image)
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > image_patch.horizontal_center:
            return vegetable_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    return vegetable_patches[0].simple_query(""What kind of vegetable is to the right of the girl?"") # crop would include the girl so keep her in the query"
4929965,Is there a black racket or clock in the picture?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.verify_property(""racket"", ""black"")
    is_black_clock = image_patch.verify_property(""clock"", ""black"")
    return bool_to_yesno(is_black_racket or is_black_clock)"
4782038,What kind of animal is white?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What color is the animal?"") == ""white"":
            return animal_patch.simple_query(""What kind of animal is white?"")
    # If no animal is white, query the image directly
    return image_patch.simple_query(""What kind of animal is white?"")"
14658201,Is the sheep that looks white and brown made of plastic?," # assumes only one sheep patch
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    for sheep_patch in sheep_patches:
        is_white = sheep_patch.simple_query(""Is the sheep white or brown?"") == ""white""
        is_brown = sheep_patch.simple_query(""Is the sheep white or brown?"") == ""brown""
        if is_white and is_brown:
            is_plastic = sheep_patch.simple_query(""Is the sheep made of plastic or wool?"") == ""plastic""
            return bool_to_yesno(is_plastic)
    return ""no"""
1441865,Do you see any boxes on the table under the grill?," # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        return ""no""
    for table_patch in table_patches:
        box_patches = image_patch.find(""box"")
        if len(box_patches) == 0:
            return ""no""
        for box_patch in box_patches:
            if box_patch.horizontal_center < table_patch.horizontal_center:
                return ""yes""
    return ""no"""
1424926,What is the tag on?," # assumes only one tag patch
    image_patch = ImagePatch(image)
    tag_patches = image_patch.find(""tag"")
    if len(tag_patches) == 0:
        # If no tag is found, query the image directly
        return image_patch.simple_query(""What is the tag on?"")
    return tag_patches[0].simple_query(""What is the tag on?"") # crop would include the tag so keep it in the query"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?," # assumes only one patch
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")"
3635257,Is there any freezer in this photo?," # freezer is a rare object
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer""))"
8821026,Are there either any bags or chairs?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?," # assumes only one bus driver
    image_patch = ImagePatch(image)
    bus_driver_patches = image_patch.find(""bus driver"")
    # Question assumes only one bus driver patch
    if len(bus_driver_patches) == 0:
        # If no bus driver is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    return bus_driver_patches[0].simple_query(""In what vehicle is the bus driver?"") # crop would include the vehicle so keep it in the query"
17204662,What is that man in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that man in front of?"")"
380866,Are there any girls or radios?," # assumes only one girl and one radio
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The girl is sitting on what?"")
    for girl_patch in girl_patches:
        return girl_patch.simple_query(""The girl is sitting on what?"") # crop would include the sitting so keep it in the query"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?," # assumes only one white lamp and one pillow
    image_patch = ImagePatch(image)
    white_lamp_patches = image_patch.find(""white lamp"")
    # Question assumes only one white lamp patch
    if len(white_lamp_patches) == 0:
        # If no white lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for white_lamp_patch in white_lamp_patches:
        pillow_patches = image_patch.find(""pillow"")
        # Question assumes only one pillow patch
        if len(pillow_patches) == 0:
            return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
        pillow_patch = pillow_patches[0]
        if white_lamp_patch.horizontal_center < pillow_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
16545552,What color do you think is the vehicle the girl is washing?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    return vehicle_patches[0].simple_query(""What color do you think is the vehicle the girl is washing?"") # crop would include the vehicle so keep it in the query"
16719872,Are there motorcycles to the left of the man who is wearing a hat?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    if len(motorcycle_patches) == 0:
        return ""no""
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?," # assumes only one garbage can and one person pushing a stroller
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    if len(garbage_can_patches) == 0:
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    for garbage_can_patch in garbage_can_patches:
        if garbage_can_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
13711589,What do the truck and the street sign have in common?," # assumes only one truck and one street sign
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    truck_patch = truck_patches[0]
    street_sign_patches = image_patch.find(""street sign"")
    # Question assumes only one street sign patch
    if len(street_sign_patches) == 0:
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    street_sign_patch = street_sign_patches[0]
    return truck_patch.simple_query(""What do the truck and the street sign have in common?"") # crop would include the street sign so keep it in the query"
10227573,Who is wearing a shirt?," # shirt is not part of the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for shirt_patch in shirt_patches:
        wearing_shirt = (shirt_patch.simple_query(""Is the shirt wearing a shirt?"") == ""yes"")
        if wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no shirt is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the man leading?"")
    return image_patch.simple_query(""What animal is the man leading?"") # if no animal is found, query the image directly"
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?," # assumes only one patch
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")"
7190226,Does the puddle look large?," # puddle is a noun
    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    return puddle_patches[0].simple_query(""Does the puddle look large?"") # crop would include the puddle so keep it in the query"
11675152,Who throws the frisbee?," # assumes only one frisbee patch
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Who throws the frisbee?"")
    for frisbee_patch in frisbee_patches:
        return frisbee_patch.simple_query(""Who throws the frisbee?"") # crop would include the frisbee so keep it in the query"
8723676,Which kind of animal is the water on?," # water on
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is the water on?"")
    return animal_patches[0].simple_query(""Which kind of animal is the water on?"") # crop would include the water so keep it in the query"
61046657,Do you think that traffic light is tall?," # assumes only one traffic light patch
    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    if len(traffic_light_patches) == 0:
        return ""no""
    for traffic_light_patch in traffic_light_patches:
        is_tall = (traffic_light_patch.simple_query(""Is the traffic light tall?"") == ""yes"")
        return bool_to_yesno(is_tall)"
9581034,On which side is the wine glass?," # assumes only one wine glass patch
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?," # assumes only one napkin and one pizza
    image_patch = ImagePatch(image)
    napkin_patch = image_patch.find(""napkin"")[0]
    pizza_patch = image_patch.find(""pizza"")[0]
    if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
18535266,Is the face mask made of the same material as the mask?," # assumes only one face mask patch
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    if len(face_mask_patches) == 0:
        return ""no""
    face_mask_patch = face_mask_patches[0]
    material_patches = face_mask_patch.find(""material"")
    if len(material_patches) == 0:
        return ""no""
    material_patch = material_patches[0]
    return bool_to_yesno(face_mask_patch.verify_property(""face mask"", material_patch.simple_query(""What material is the face mask made of?"")))"
11254215,What is the tan item of furniture?," # assumes only one tan item of furniture
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan item of furniture"")
    if len(tan_patches) == 0:
        return image_patch.simple_query(""What is the tan item of furniture?"")
    return tan_patches[0].simple_query(""What is the tan item of furniture?"") # crop would include the tan color so keep it in the query"
1852010,How is the device to the right of the device on the desk called?," # assumes only one patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > image_patch.horizontal_center:
            return device_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    return image_patch.simple_query(""How is the device to the right of the device on the desk called?"") # if no device is to the right, query the image directly"
1587534,Is the device on the floor black and large?," # assumes only one patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        return ""no""
    for device_patch in device_patches:
        is_on_floor = (device_patch.vertical_center < image_patch.vertical_center)
        is_black = (device_patch.simple_query(""What color is the device?"") == ""black"")
        is_large = (device_patch.simple_query(""What size is the device?"") == ""large"")
        if is_on_floor and is_black and is_large:
            return ""yes""
    return ""no"""
8470757,Are there any surfboards?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))"
11273949,Is the shirt white?," # shirt is the object, white is the property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return shirt_patches[0].verify_property(""shirt"", ""white"")"
7475238,What's the airplane in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?," # assumes only one horse patch
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        if horse_patch.horizontal_center > image_patch.horizontal_center / 2:
            return horse_patch.simple_query(""Where does the horse to the right of the hose run?"")
    return horse_patches[0].simple_query(""Where does the horse to the right of the hose run?"") # crop would include the hose so keep it in the query"
3932624,Are there either any gray chairs or laptops?," # gray chairs and laptops are not mutually exclusive
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?," # assumes only one water patch
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water brown or blue?"")
    return water_patches[0].best_text_match([""brown"", ""blue""])"
9256263,Which kind of furniture is brown?," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture brown?"") == ""yes"":
            return furniture_patch.simple_query(""Which kind of furniture is brown?"")
    return image_patch.simple_query(""Which kind of furniture is brown?"") # if no furniture is brown, query the image directly"
18719769,Is the man wearing glasses?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""Is the man wearing glasses?"") # crop would include the glasses so keep it in the query"
18342439,What animal is white?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What color is the animal?"") == ""white"":
            return animal_patch.simple_query(""What animal is white?"")
    # If no animal is white, query the image directly
    return image_patch.simple_query(""What animal is white?"")"
8665725,Who is wearing a coat?," # assumes only one patch
    image_patch = ImagePatch(image)
    wearing_coat = (image_patch.simple_query(""Is the person wearing a coat?"") == ""yes"")
    if wearing_coat:
        return image_patch.simple_query(""Who is wearing a coat?"")
    return ""no one"""
5440407,What vehicle isn't black?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""What color is the vehicle?"") == ""black"":
            return vehicle_patch.simple_query(""What vehicle isn't black?"")
    return vehicle_patches[0].simple_query(""What vehicle isn't black?"") # crop would include the black so keep it in the query"
4104707,On which side of the picture is the oven?," # assumes only one oven patch
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    if len(oven_patches) == 0:
        return image_patch.simple_query(""On which side of the picture is the oven, left or right?"")
    for oven_patch in oven_patches:
        if oven_patch.horizontal_center < image_patch.width / 2:
            return ""left""
        else:
            return ""right"""
3126763,What is common to the logo and the letter?," # logo and letter are the same object
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    return logo_patches[0].simple_query(""What is common to the logo and the letter?"") # crop would include the letter so keep it in the query"
18640925,What animal is in the water the man is walking through?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in the water the man is walking through?"")
    return animal_patches[0].simple_query(""What animal is in the water the man is walking through?"") # crop would include the water so keep it in the query"
125488,What is the man wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"") # crop would include the clothing so keep it in the query"
5925435,What is the sidewalk made of?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?," # assumes only one patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].simple_query(""What is the pattern of the coat?"") # crop would include the coat so keep it in the query"
4819547,What kind of furniture is white?," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture white?"") == ""yes"":
            return furniture_patch.simple_query(""What kind of furniture is white?"")
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is white?"")"
14263174,What color do you think the chair that is to the right of the other chair is?," # assumes only two chairs
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only two chair patches
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            return chair_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    return chair_patches[0].simple_query(""What color do you think the chair that is to the right of the other chair is?"") # crop would include the chair so keep it in the query"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?," # assumes only one man and one train
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    man_patch = man_patches[0]
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        return ""no""
    train_patch = train_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        return ""no""
    fence_patch = fence_patches[0]
    if man_patch.horizontal_center < train_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
9239936,Do the cows near the trees have white color?," # near, on, around, etc
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    for cow_patch in cow_patches:
        if cow_patch.horizontal_center > image_patch.horizontal_center / 2:
            return ""yes""
    return ""no"""
1885178,"In which part of the image is the remote control, the bottom or the top?"," # assumes only one remote control patch
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    if remote_control_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12341631,Which color is the bag in the top part?," # assumes only one bag patch
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    if bag_patch.vertical_center > image_patch.vertical_center:
        return bag_patch.simple_query(""Which color is the bag in the top part?"")
    return bag_patch.simple_query(""Which color is the bag in the bottom part?"") # crop would include the bag so keep it in the query"
5532909,"What is the weather like, cloudless or maybe rainy?"," # cloudless or maybe rainy
    image_patch = ImagePatch(image)
    weather_patches = image_patch.find(""weather"")
    # Question assumes only one weather patch
    if len(weather_patches) == 0:
        # If no weather is found, query the image directly
        return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")
    weather_patch = weather_patches[0]
    if weather_patch.simple_query(""Is the weather cloudless?"") == ""yes"":
        return ""cloudless""
    else:
        return ""maybe rainy"""
2618222,What is connected to the open laptop?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is connected to the open laptop?"")"
3252220,Of which color is the shirt the man wears?," # shirt the man wears
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = man_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""white""
    shirt_patch = shirt_patches[0]
    shirt_color = shirt_patch.simple_query(""Of which color is the shirt?"")
    return shirt_color"
8947801,What is in the vase?," # assumes only one vase patch
    image_patch = ImagePatch(image)
    vase_patches = image_patch.find(""vase"")
    if len(vase_patches) == 0:
        # If no vase is found, query the image directly
        return image_patch.simple_query(""What is in the vase?"")
    return vase_patches[0].simple_query(""What is in the vase?"") # crop would include the vase so keep it in the query"
10841562,Is the color of the pants the same as the shorts?," # assumes only one patch
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    if len(pants_patches) == 0:
        return ""no""
    for pants_patch in pants_patches:
        shorts_patches = image_patch.find(""shorts"")
        if len(shorts_patches) == 0:
            return ""no""
        for shorts_patch in shorts_patches:
            if pants_patch.horizontal_center > shorts_patch.horizontal_center:
                return ""yes""
    return ""no"""
15511838,What kind of furniture is to the left of the bucket?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")"
14495306,Is there any racket to the right of the person that the woman is to the left of?," # assumes only one woman and one person
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    woman_patch = woman_patches[0]
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
14841932,Do the tiles have square shape and black color?," # assumes only one tile patch
    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    if len(tile_patches) == 0:
        return ""no""
    tile_patch = tile_patches[0]
    is_square = tile_patch.verify_property(""tile"", ""square"")
    is_black = tile_patch.verify_property(""tile"", ""black"")
    return bool_to_yesno(is_square and is_black)"
41029381,What is the vehicle that is the same color as the shirt called?," # shirt is the same color as the vehicle
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    shirt_patch = shirt_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    vehicle_patch = vehicle_patches[0]
    return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"") # crop would include the shirt so keep it in the query"
161027428,Are there both windows and doors in the image?," # assumes only one window and door patch
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
16478246,Does the pillow to the right of the man have green color and large size?," # pillow to the right of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        return ""no""
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            is_green = pillow_patch.verify_property(""pillow"", ""green"")
            is_large = pillow_patch.verify_property(""pillow"", ""large"")
            return bool_to_yesno(is_green and is_large)
    return ""no"""
9450308,Is the happy person wearing a hat?," # assumes only one happy person
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    for happy_patch in happy_patches:
        is_wearing_hat = (happy_patch.simple_query(""Is the happy person wearing a hat?"") == ""yes"")
        if is_wearing_hat:
            return ""yes""
    return ""no"""
11850389,What place is this?," # place is a general term
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"") # place is a general term"
17250452,What kind of appliance is on the right of the drawer?," # assumes only one appliance patch
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center > image_patch.horizontal_center / 2:
            return appliance_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    return appliance_patches[0].simple_query(""What kind of appliance is on the right of the drawer?"") # crop would include the drawer so keep it in the query"
14857961,Is the lady to the right of a woman?," # assumes only one lady patch
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    for lady_patch in lady_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center > lady_patch.horizontal_center:
                return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?," # assumes only one pan patch
    image_patch = ImagePatch(image)
    pan_patch = image_patch.find(""pan"")
    if len(pan_patch) == 0:
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    pan_center = pan_patch[0].horizontal_center
    for utensil_patch in image_patch.find(""cooking utensil""):
        if utensil_patch.horizontal_center < pan_center:
            return utensil_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"") # if no utensil is found, query the image directly"
9745131,Which color is the truck that is to the left of the lamps?," # assumes only one truck and one lamp
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    truck_patch = truck_patches[0]
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        return ""no""
    for lamp_patch in lamp_patches:
        if truck_patch.horizontal_center < lamp_patch.horizontal_center:
            return truck_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""white"", ""black""])
    return ""no"""
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?," # assumes only one bird patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    for bird_patch in bird_patches:
        if bird_patch.vertical_center < image_patch.vertical_center:
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    return bird_patches[0].simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"") # crop would include the motorcycle so keep it in the query"
867818,Is the man on the skateboard?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    is_on_skateboard = (man_patch.simple_query(""Is the man on the skateboard?"") == ""yes"")
    return bool_to_yesno(is_on_skateboard)"
13896221,What is on the table?," # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    return table_patches[0].simple_query(""What is on the table?"") # crop would include the table so keep it in the query"
1964517,What is the food that is above the white paper?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the food that is above the white paper?"")"
15705231,Is the shelf to the left of a cabinet?," # assumes only one shelf and one cabinet
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if shelf_patch.horizontal_center < cabinet_patch.horizontal_center:
                return ""yes""
    return ""no"""
15693846,Is the motorcycle parked on the grass?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the motorcycle parked on the grass?"") # crop would include the grass so keep it in the query"
13872995,Who is jumping?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Is this a dog or a cat?"")
    return animal_patches[0].best_text_match([""dog"", ""cat""])"
12584623,What is the person with the bag wearing?," # assumes only one person with a bag
    image_patch = ImagePatch(image)
    person_with_bag_patches = image_patch.find(""person with bag"")
    # Question assumes only one person with a bag patch
    if len(person_with_bag_patches) == 0:
        # If no person with a bag is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    return person_with_bag_patches[0].simple_query(""What is the person with the bag wearing?"") # crop would include the bag so keep it in the query"
7202064,"What is this, a bus or a truck?"," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""bus"", ""truck""])"
16542208,Do you see either any beds or blankets there?," # assumes only one patch
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)"
11700224,Do you see both lettuce and salad?," # salad is a type of lettuce
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)"
1067136,Is the ball on the tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball on the tree?"")"
364079,What kind of furniture is to the right of the blanket?," # assumes only one patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for blanket_patch in blanket_patches:
        furniture_patches = image_patch.find(""furniture"")
        # Question assumes only one furniture patch
        if len(furniture_patches) == 0:
            return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    # If no furniture is found to the right of the blanket, query the image directly
    return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")"
2533062,How large is the ground the zebra is standing on?," # ground is a property
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    return zebra_patches[0].simple_query(""How large is the ground the zebra is standing on?"") # crop would include the zebra so keep it in the query"
19683710,The clock is inside what?," # assumes only one clock patch
    image_patch = ImagePatch(image)
    clock_patch = image_patch.find(""clock"")
    if len(clock_patch) == 0:
        return image_patch.simple_query(""The clock is inside what?"")
    return clock_patch[0].simple_query(""The clock is inside what?"") # crop would include the clock so keep it in the query"
15674863,Is the racket in the top part?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.vertical_center > image_patch.height / 2)"
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?," # assumes only one person wearing a shirt
    image_patch = ImagePatch(image)
    shirt_wearer_patches = image_patch.find(""person wearing a shirt"")
    # Question assumes only one shirt wearer patch
    if len(shirt_wearer_patches) == 0:
        # If no shirt wearer is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    shirt_wearer_patch = shirt_wearer_patches[0]
    right_of_shirt_wearer = image_patch.crop(shirt_wearer_patch.horizontal_center, shirt_wearer_patch.vertical_center, image_patch.width, image_patch.height)
    return right_of_shirt_wearer.exists(""skateboard"")"
2292637,What is the color of the shirt that the passenger is wearing?," # shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt, shirt"
9175259,What is the chair made of?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"") # crop would include the chair so keep it in the query"
8714882,How big is the carrot in the top of the picture?," # carrot is in the top of the picture
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    carrot_patch = carrot_patches[0]
    return carrot_patch.simple_query(""How big is the carrot in the top of the picture?"") # crop would include the top of the picture so keep it in the query"
1638685,What is the name of the vegetable that is on the yellow food?," # yellow food is a carrot
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"") # crop would include the carrot so keep it in the query"
5828256,Is the clock on a tower?," # assumes only one clock patch
    image_patch = ImagePatch(image)
    clock_patch = image_patch.find(""clock"")
    if len(clock_patch) == 0:
        return ""no""
    return bool_to_yesno(clock_patch[0].simple_query(""Is the clock on a tower?""))"
18937563,What kind of animal is orange?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What color is the animal?"") == ""orange"":
            return animal_patch.simple_query(""What kind of animal is orange?"")
    # If no animal is orange, query the image directly
    return image_patch.simple_query(""What kind of animal is orange?"")"
14360113,What is the smiling woman holding?," # assumes only one smiling woman
    image_patch = ImagePatch(image)
    smiling_woman_patches = image_patch.find(""smiling woman"")
    if len(smiling_woman_patches) == 0:
        return image_patch.simple_query(""What is the smiling woman holding?"")
    return smiling_woman_patches[0].simple_query(""What is the smiling woman holding?"") # crop would include the smile so keep it in the query"
593188,Is the hair short?," # assumes only one patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    for hair_patch in hair_patches:
        return bool_to_yesno(hair_patch.simple_query(""Is the hair short?"")) # crop would include the hair so keep it in the query"
10824666,Are there ladies to the left of the man that is wearing shorts?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    ladies_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(ladies_patches) == 0:
        return ""no""
    for lady_patch in ladies_patches:
        if lady_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?," # assumes only one gray car and one garbage bin
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    for gray_car_patch in gray_car_patches:
        garbage_bin_patches = image_patch.find(""garbage bin"")
        # Question assumes only one garbage bin patch
        if len(garbage_bin_patches) == 0:
            return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
        for garbage_bin_patch in garbage_bin_patches:
            if garbage_bin_patch.horizontal_center > gray_car_patch.horizontal_center:
                return ""right""
    return ""left"""
7574939,Is there any table or plate that is white?," # assumes only one table or plate
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        return ""no""
    for table_patch in table_patches:
        is_white = table_patch.simple_query(""Is the table white?"")
        if is_white == ""yes"":
            return ""yes""
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        return ""no""
    for plate_patch in plate_patches:
        is_white = plate_patch.simple_query(""Is the plate white?"")
        if is_white == ""yes"":
            return ""yes""
    return ""no"""
12252101,Is it outdoors?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it outdoors?"")) # crop would include the outdoors so keep it in the query"
6943442,What cooking utensil is on the oven?," # assumes only one cooking utensil and one oven
    image_patch = ImagePatch(image)
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        # If no cooking utensil is found, query the image directly
        return image_patch.simple_query(""What cooking utensil is on the oven?"")
    for cooking_utensil_patch in cooking_utensil_patches:
        oven_patches = image_patch.find(""oven"")
        # Question assumes only one oven patch
        if len(oven_patches) == 0:
            return ""no""
        for oven_patch in oven_patches:
            if cooking_utensil_patch.horizontal_center > oven_patch.horizontal_center:
                return cooking_utensil_patch.simple_query(""What cooking utensil is on the oven?"")
    return ""no"""
2977077,The propeller that looks red is what pattern?," # assumes only one propeller patch
    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    for propeller_patch in propeller_patches:
        if propeller_patch.simple_query(""What pattern is the propeller?"") == ""red"":
            return propeller_patch.simple_query(""The propeller that looks red is what pattern?"")
    return propeller_patches[0].simple_query(""The propeller that looks red is what pattern?"") # crop would include the red so keep it in the query"
11190306,Which kind of animal is to the left of the train?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.horizontal_center:
            return animal_patch.simple_query(""Which kind of animal is to the left of the train?"")
    return image_patch.simple_query(""Which kind of animal is to the left of the train?"") # if no animal is found, query the image directly"
5107190,Do you see both an airplane and a truck?," # assumes only one airplane and one truck
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?," # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"") # crop would include the child so keep it in the query"
12536783,What kind of animal is in front of the pole?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?," # glasses, man, t-shirt
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    glasses_patch = glasses_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patch = man_patches[0]
    t_shirt_patches = image_patch.find(""t-shirt"")
    # Question assumes only one t-shirt patch
    if len(t_shirt_patches) == 0:
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    t_shirt_patch = t_shirt_patches[0]
    if glasses_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
18655269,Which room is it?," # assumes only one room
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""Which room is it?"")
    return room_patches[0].simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
7405860,Is it indoors?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it indoors?""))"
1705569,Does the pot on top of the stove look black?," # assumes only one pot patch
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        return ""no""
    pot_patch = pot_patches[0]
    is_on_top_of_stove = pot_patch.simple_query(""Is the pot on top of the stove?"")
    if is_on_top_of_stove == ""yes"":
        is_black = pot_patch.simple_query(""Does the pot look black?"")
        return bool_to_yesno(is_black)
    return ""no"""
1028569,Are there both a cyclist and a helmet in the photo?," # helmet is part of the cyclist
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)"
13954115,Are there any men to the left of the person in the crowd?," # assumes only one person in the crowd
    image_patch = ImagePatch(image)
    person_in_crowd_patches = image_patch.find(""person in the crowd"")
    # Question assumes only one person in the crowd patch
    if len(person_in_crowd_patches) == 0:
        # If no person in the crowd is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    for person_in_crowd_patch in person_in_crowd_patches:
        men_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(men_patches) == 0:
            return ""no""
        for man_patch in men_patches:
            if man_patch.horizontal_center < person_in_crowd_patch.horizontal_center:
                return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?," # assumes only one patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < image_patch.horizontal_center:
            return device_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"") # if no device is to the left, query the image directly"
1017626,Who is inside the train?," # assumes only one train patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is inside the train?"")"
7650014,Which place is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?," # assumes only one person and one car
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the car doing?"")
    for person_patch in person_patches:
        car_patches = image_patch.find(""car"")
        # Question assumes only one car patch
        if len(car_patches) == 0:
            return image_patch.simple_query(""What is the person to the left of the car doing?"")
        for car_patch in car_patches:
            if car_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the left of the car doing?"")
    return image_patch.simple_query(""What is the person to the left of the car doing?"") # if no car is found, query the image directly"
1310985,Is the yellow vehicle to the left of a lamp?," # assumes only one yellow vehicle and one lamp
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        lamp_patches = image_patch.find(""lamp"")
        # Question assumes only one lamp patch
        if len(lamp_patches) == 0:
            return ""no""
        for lamp_patch in lamp_patches:
            if yellow_vehicle_patch.horizontal_center < lamp_patch.horizontal_center:
                return ""yes""
    return ""no"""
646935,Which room is it?," # assumes only one room
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""Which room is it?"")
    return room_patches[0].simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
9495263,Is the woman to the left or to the right of the man that wears a cap?," # assumes only one woman and one man
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    for woman_patch in woman_patches:
        man_patches = image_patch.find(""man"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
        for man_patch in man_patches:
            if woman_patch.horizontal_center < man_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
946016,Do you think the animal that is sitting-down is small or large?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal sitting-down?"") == ""yes"":
            return animal_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    # If no animal is sitting-down, query the image directly
    return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")"
9617920,Do the garbage can and the pan have the same color?," # assumes only one garbage can and pan patch
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    pan_patches = image_patch.find(""pan"")
    if len(garbage_can_patches) == 0 or len(pan_patches) == 0:
        return ""no""
    garbage_can_patch = garbage_can_patches[0]
    pan_patch = pan_patches[0]
    return bool_to_yesno(garbage_can_patch.verify_property(""garbage can"", ""color"") == pan_patch.verify_property(""pan"", ""color""))"
3578781,Which kind of clothing is black?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"")
    # If no clothing is black, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"")"
4695656,What is the lamp on?," # assumes only one lamp patch
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What is the lamp on?"")
    return lamp_patches[0].simple_query(""What is the lamp on?"") # crop would include the object on so keep it in the query"
13696926,The homes that are to the left of the people have what color?," # assumes only one patch
    image_patch = ImagePatch(image)
    homes_patches = image_patch.find(""home"")
    # Question assumes only one home patch
    if len(homes_patches) == 0:
        # If no home is found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    for home_patch in homes_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center > home_patch.horizontal_center:
                return home_patch.simple_query(""The homes that are to the left of the people have what color?"")
    return image_patch.simple_query(""The homes that are to the left of the people have what color?"") # if no home is found, query the image directly"
16946079,What is on the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?," # assumes only one napkin patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        return ""no""
    napkin_patch = napkin_patches[0]
    if napkin_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
11513897,What appliance is the label on?," # assumes only one label patch
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    for label_patch in label_patches:
        return label_patch.simple_query(""What appliance is the label on?"")
    return image_patch.simple_query(""What appliance is the label on?"") # if no label is found, query the image directly"
8240644,What is the color of the bird's tail?," # assumes only one bird patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What is the color of the bird's tail?"") # crop would include the tail so keep it in the query"
5245080,Is he to the right or to the left of the camera?," # assumes only one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17800894,Are there both a window and a door in the picture?," # assumes only one window and one door
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
191027873,Where is the snowboard?," # assumes only one patch
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    if len(snowboard_patches) == 0:
        return image_patch.simple_query(""Where is the snowboard?"")
    snowboard_patch = snowboard_patches[0]
    return snowboard_patch.simple_query(""Where is the snowboard?"") # crop would include the snowboard so keep it in the query"
1964079,Are the box and the paper the same color?," # box and paper are the same object
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    box_patch = box_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    return bool_to_yesno(box_patch.verify_property(""box"", ""color"") and paper_patch.verify_property(""paper"", ""color""))"
