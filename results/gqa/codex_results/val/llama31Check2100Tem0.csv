sample_id,query,generated_code
13151559,Is the large hair both white and soft?," # hair is a general term, so use the more specific term
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""long hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    hair_patch = hair_patches[0]
    is_white = hair_patch.verify_property(""long hair"", ""white"")
    is_soft = hair_patch.verify_property(""long hair"", ""soft"")
    return bool_to_yesno(is_white and is_soft)"
18370956,Who is eating the cupcake?," # contains a relation (eating, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is eating the cupcake?"") # crop would include the eating so keep it in the query"
6436809,What is the guy wearing?," # assumes only one guy
    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    if len(guy_patches) == 0:
        return image_patch.simple_query(""What is the guy wearing?"")
    return guy_patches[0].simple_query(""What is the guy wearing?"") # crop would include the clothing so keep it in the query"
117037,Which kind of food is to the right of the cabbage?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"") # crop would include the cabbage so keep it in the query"
758936,Who wears the cap?," # cap is a noun
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    return cap_patches[0].simple_query(""Who wears the cap?"") # crop would include the cap so keep it in the query"
111046440,Who is pointing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is pointing?"") # crop would include the pointing so keep it in the query"
15804389,Is the woman's hair short or long?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    hair_length = woman_patch.simple_query(""What is the length of the woman's hair, short or long?"")
    return hair_length"
11445636,The women are watching who?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The women are watching who?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patch = image_patch.find(""woman"")[0]
    dishwasher_patches = image_patch.find(""dishwasher"")
    for dishwasher_patch in dishwasher_patches:
        if dishwasher_patch.horizontal_center < woman_patch.horizontal_center:
            return bool_to_yesno(dishwasher_patch.verify_property(""dishwasher"", ""white"")) and bool_to_yesno(image_patch.verify_property(""kitchen"", ""inside"")) and bool_to_yesno(image_patch.verify_property(""gas stove"", ""white""))
    return ""no"""
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?," # assumes only one baby patch
    image_patch = ImagePatch(image)
    baby_patch = image_patch.find(""baby"")[0]
    bed_sheet_patches = image_patch.find(""bed sheet"")
    # Question assumes only one bed sheet patch
    if len(bed_sheet_patches) == 0:
        # If no bed sheet is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_sheet_patch = bed_sheet_patches[0]
    for piece_of_furniture_patch in image_patch.find(""piece of furniture""):
        if piece_of_furniture_patch.simple_query(""What is the name of the piece of furniture?"") == bed_sheet_patch.simple_query(""What is the color of the bed sheet?""):
            return piece_of_furniture_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    # If no piece of furniture is the same color as the bed sheet, pick the first piece of furniture
    return image_patch.find(""piece of furniture"")[0].simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"") # crop would include the bed sheet so keep it in the query"
758958,Is there either any red pillow or snowboard?," # returns yes or no
    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)"
143816,Which place is it?," # returns the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # returns the place"
13741513,Which side is the knife on?," # left or right
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    # Question assumes only one knife patch
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Which side is the knife on?"")
    knife_patch = knife_patches[0]
    if knife_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
17829769,What is the computer mouse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
17233738,What is the toddler holding?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toddler holding?"") # crop would include the object being held so keep it in the query"
2951242,Is the gray shirt sleeveless or short sleeved?," # shirt is the object, gray is the property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    gray_shirt_patch = shirt_patches[0]
    gray_shirt_sleeveless = gray_shirt_patch.verify_property(""gray shirt"", ""sleeveless"")
    gray_shirt_short_sleeved = gray_shirt_patch.verify_property(""gray shirt"", ""short sleeved"")
    if gray_shirt_sleeveless and gray_shirt_short_sleeved:
        return ""sleeveless""
    elif gray_shirt_sleeveless:
        return ""sleeveless""
    elif gray_shirt_short_sleeved:
        return ""short sleeved""
    else:
        return ""sleeveless"""
15241795,Is the tank top red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tank top red?"") # crop would include the top so keep it in the query"
13885234,Which kind of animal is in front of the rocks?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"") # crop would include the rocks so keep it in the query"
19335715,Do you see any grapes?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""grapes"")) # returns yes or no"
6455591,What type of furniture is white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of furniture is white?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1033761,What is the blue clothing item?," # returns the clothing item
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""blue""):
            return clothing_patch.simple_query(""What is the blue clothing item?"")
    # If no blue clothing is found, query the image directly
    return image_patch.simple_query(""What is the blue clothing item?"") # crop would include the blue clothing so keep it in the query"
17726504,Who is wearing the glasses?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query"
13112902,Is the woman wearing a bracelet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman wearing a bracelet?"") # crop would include the bracelet so keep it in the query"
698766,What is the food that is not white?," # assumes only one patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        if food_patch.simple_query(""Is the food white?"") == ""yes"":
            return food_patch.simple_query(""What is the food that is not white?"")
    return food_patches[0].simple_query(""What is the food that is not white?"") # if all food is white, pick the first food"
1332276,Are there both a cup and a bottle in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?," # color
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"") # crop would include the glove so keep it in the query"
18103787,Who is holding the helmet?," # helmet
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for helmet_patch in helmet_patches:
        return helmet_patch.simple_query(""Who is holding the helmet?"") # crop would include the helmet so keep it in the query"
2143247,What is the name of the food to the left of the donut that looks little?," # assumes only one donut patch
    image_patch = ImagePatch(image)
    donut_patch = image_patch.find(""donut"")[0]
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < donut_patch.horizontal_center and food_patch.width < donut_patch.width:
            return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    # If no food is to the left of the donut and looks little, pick the first food
    return food_patches[0].simple_query(""What is the name of the food to the left of the donut that looks little?"") # crop would include the donut and the size so keep it in the query"
3767951,Is the clock to the right or to the left of the man on the left?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    if len(clock_patches) == 0:
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    for clock_patch in clock_patches:
        if clock_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        elif clock_patch.horizontal_center < man_patch.horizontal_center:
            return ""left""
    return ""left"""
17655180,What's the sticker on?," # assumes only one sticker patch
    image_patch = ImagePatch(image)
    sticker_patch = image_patch.find(""sticker"")
    if len(sticker_patch) == 0:
        return image_patch.simple_query(""What's the sticker on?"")
    return sticker_patch[0].simple_query(""What's the sticker on?"") # crop would include the object so keep it in the query"
3468831,In front of what is this table?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In front of what is this table?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5888523,Do you see people to the right of the still car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see people to the right of the still car?"") # crop would include the car so keep it in the query"
7188981,Does the giraffe look adult?," # giraffe is an example of an object that can be adult or juvenile
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""adult"")) # giraffe is an example of an object that can be adult or juvenile"
16852802,Of what color are the pants?," # returns the color of the pants
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"") # crop would include the pants so keep it in the query"
9619158,What kind of watercraft is full of men?," # assumes only one patch
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    for watercraft_patch in watercraft_patches:
        is_full_of_men = (watercraft_patch.simple_query(""Is the watercraft full of men?"") == ""yes"")
        if is_full_of_men:
            return watercraft_patch.simple_query(""What kind of watercraft is full of men?"") # crop would include the men so keep it in the query
    # If no watercraft is full of men, pick the first watercraft
    return watercraft_patches[0].simple_query(""What kind of watercraft is full of men?"") # crop would include the men so keep it in the query"
3625225,On which side of the picture are the boats?," # left, right, or center
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    boat_patch = boat_patches[0]
    if boat_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    elif boat_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""center"""
7126345,Does the elephant to the left of the other elephant have large size?," # assumes only two elephant patches
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only two elephant patches
    if len(elephant_patches) < 2:
        # If no two elephants are found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_patch = elephant_patches[0]
    right_patch = elephant_patches[1]
    if left_patch.horizontal_center < right_patch.horizontal_center:
        return bool_to_yesno(left_patch.verify_property(""elephant"", ""large size""))
    else:
        return bool_to_yesno(right_patch.verify_property(""elephant"", ""large size"")) # crop would include the size so keep it in the query"
19834124,What is the girl holding?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What is the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What is the girl holding?"") # crop would include the object so keep it in the query"
4617704,Does the toilet seat that is not down appear to be white and open?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        return ""no""
    for toilet_patch in toilet_patches:
        is_white = toilet_patch.simple_query(""Is the toilet white?"") == ""yes""
        is_open = toilet_patch.simple_query(""Is the toilet open?"") == ""yes""
        if not is_white or not is_open:
            return ""no""
    return ""yes"""
5899539,Are there any bottles or mugs that are not purple?," # bottle or mug
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    mug_patches = image_patch.find(""mug"")
    # Question assumes only one bottle patch and one mug patch
    if len(bottle_patches) == 0 and len(mug_patches) == 0:
        # If no bottle or mug is found, query the image directly
        return image_patch.simple_query(""Are there any bottles or mugs that are not purple?"")
    for bottle_patch in bottle_patches:
        if bottle_patch.verify_property(""bottle"", ""purple"") == False:
            return ""yes""
    for mug_patch in mug_patches:
        if mug_patch.verify_property(""mug"", ""purple"") == False:
            return ""yes""
    return ""no"""
2631593,Which place is it?," # returns the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # returns the place"
12228864,Do you see any men to the right of the person that is in the living room?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"") # crop would include the living room so keep it in the query"
111054378,Is the small couch to the right or to the left of the bottle?," # assumes only one bottle patch
    image_patch = ImagePatch(image)
    small_couch_patches = image_patch.find(""small couch"")
    # Question assumes only one small couch patch
    if len(small_couch_patches) == 0:
        # If no small couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    for small_couch_patch in small_couch_patches:
        if small_couch_patch.horizontal_center > bottle_patch.horizontal_center:
            return ""right""
    return ""left"""
9392411,Is the bottle to the right or to the left of the appliance on the left?," # bottle is to the right of the appliance on the left
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""left""
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
    return ""right"""
16753829,What type of animal is sitting in the container in the bottom of the photo?," # assumes only one patch
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    for container_patch in container_patches:
        if container_patch.vertical_center < image_patch.vertical_center:
            return container_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    # If no container is found, query the image directly
    return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"") # crop would include the container so keep it in the query"
1345482,What is that train in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
459445,In which part is the silver device?," # phone, watch, etc
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""silver device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if device_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif device_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
11786203,What is the man on?," # contains a relation (on, in, with, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"") # crop would include the object so keep it in the query"
5200013,Is there a brown door or chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown"")
    # Question assumes only one brown patch
    if len(brown_patches) == 0:
        # If no brown is found, query the image directly
        return image_patch.simple_query(""Is there a brown door or chair?"")
    if brown_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""chair""
    else:
        return ""door"""
131031372,What is the napkin in?," # assumes only one patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What is the napkin in?"")
    return napkin_patches[0].simple_query(""What is the napkin in?"") # crop would include the contents so keep it in the query"
1241681,Are there any people behind the white dessert?," # cake or pie
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8553578,What is the Pikachu doing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the Pikachu doing?"") # crop would include the action so keep it in the query"
16711804,"On which side is the car, the left or the right?"," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patch = image_patch.find(""car"")[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the large mountains?"") # crop would include the mountains so keep it in the query"
5107295,What is in the sky?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
123768,What kind of watercraft is the fruit on?," # fruit is on a watercraft
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of watercraft is the fruit on?"") # contains a relation (on), so ask directly"
1827218,Is the bottle in the bottom of the image?," # bottle
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    if bottle_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    return ""no"""
10938155,What color is the sky?," # sky is a special case
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"") # sky is a special case"
4893512,Does the sail look white or red?," # assumes one sail patch
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    if len(sail_patches) == 0:
        return image_patch.simple_query(""Does the sail look white or red?"")
    sail_patch = sail_patches[0]
    return sail_patch.best_text_match([""white"", ""red""]) # crop would include the sail so keep it in the query"
3662784,Do you see either any traffic lights or cars?," # traffic light or car
    image_patch = ImagePatch(image)
    is_traffic_light = image_patch.exists(""traffic light"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_traffic_light or is_car)"
15515711,Are there any girls to the right of the yellow helmet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
6315316,Which kind of furniture is in front of the window?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is in front of the window?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
17736488,What appliance is to the left of the faucet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What appliance is to the left of the faucet?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
41050828,What is the color of the jacket?," # returns the color of the jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"") # crop would include the jacket so keep it in the query"
610914,Is the green boat to the right or to the left of the wood house?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13158346,Is the woman in the bottom part of the picture?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    return ""no"""
16318707,Are there either any colorful bikes or skateboards?," # returns yes or no
    image_patch = ImagePatch(image)
    colorful_bike_patches = image_patch.find(""bike"")
    colorful_skateboard_patches = image_patch.find(""skateboard"")
    return bool_to_yesno(len(colorful_bike_patches) > 0 or len(colorful_skateboard_patches) > 0)"
2805654,Is the bag to the right or to the left of the bench?," # assumes only one bag and one bench
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    bench_patches = image_patch.find(""bench"")
    if len(bag_patches) == 0 or len(bench_patches) == 0:
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    bag_patch = bag_patches[0]
    bench_patch = bench_patches[0]
    if bag_patch.horizontal_center > bench_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15315607,What do you think is in the sky?," # sky
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"") # sky"
2995829,What color is the truck near the gas station?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the truck near the gas station?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
12140940,"What are the headphones on, a sofa or a desk?"," # assumes only one patch
    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
    if headphones_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""desk""
    else:
        return ""sofa"""
727533,Does the bun look brown and toasted?," # assumes only one bun patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the bun look brown and toasted?"") # crop would include the bun so keep it in the query"
61044602,What is in the brown basket?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the brown basket?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
16827204,Is the marker different in color than the paper?," # returns yes or no
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    marker_patch = marker_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    if marker_patch.simple_query(""What color is the marker?"") != paper_patch.simple_query(""What color is the paper?""):
        return ""yes""
    return ""no"""
1284539,Is there a racket to the right of the man on the right side?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    right_man_patch = ImagePatch(image_patch.cropped_image, man_patch.right, man_patch.lower, image_patch.width, man_patch.upper)
    return bool_to_yesno(right_man_patch.exists(""man"")) # assumes only one man patch"
1257391,What place is this?," # returns the answer to ""What is this?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this?"") # returns the answer to ""What is this?"" by default"
16223517,What do you think is the color of the large device?," # crop would include the device so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the color of the large device?"") # crop would include the device so keep it in the query"
1024280,Does the shirt look long sleeved or sleeveless?," # shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    if shirt_patch.simple_query(""Does the shirt have long sleeves?"") == ""yes"":
        return ""long sleeved""
    else:
        return ""sleeveless"""
2769463,Which kind of animal is lying in the chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is lying in the chair?"") # crop would include the chair so keep it in the query"
18503776,Is the white box to the right of the crate the chair is to the right of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
3434581,Are there both a coffee table and a lamp?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?," # clay, metal, ceramic, plastic, wood, glass
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    # Question assumes only one flower pot patch
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return flower_pot_patches[0].verify_property(""flower pot"", ""clay"") # crop would include the material so keep it in the query"
191006281,Does the sky look clear and gray?," # clear and gray
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Does the sky look clear and gray?"")
    return bool_to_yesno(sky_patch.simple_query(""Is the sky clear and gray?"")) # crop would include the sky so keep it in the query"
681336,Do you see hats or gloves that are white?," # returns yes or no
    image_patch = ImagePatch(image)
    hat_patches = image_patch.find(""hat"")
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one hat patch and one glove patch
    if len(hat_patches) == 0 and len(glove_patches) == 0:
        # If no hat or glove is found, query the image directly
        return image_patch.simple_query(""Do you see hats or gloves that are white?"")
    for hat_patch in hat_patches:
        if hat_patch.simple_query(""Is the hat white?"") == ""yes"":
            return ""yes""
    for glove_patch in glove_patches:
        if glove_patch.simple_query(""Is the glove white?"") == ""yes"":
            return ""yes""
    return ""no"""
1300368,What is on the cabinet that is to the right of the keyboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"") # crop would include the cabinet and the keyboard so keep them in the query"
172394,What is the animal to the left of the tap called?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal to the left of the tap called?"") # crop would include the tap so keep it in the query"
738176,Is the chair on the right?," # assumes one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return ""no""
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
4194919,Is the child on the right of the picture?," # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        return ""no""
    return ""yes"" if child_patches[0].horizontal_center > image_patch.width / 2 else ""no"""
3585327,Who is on the surfboard?," # contains a relation (on, in, with, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard?"") # crop would include the surfboard so keep it in the query"
1711172,What size are the packages the candle is on top of?," # assumes only one candle patch
    image_patch = ImagePatch(image)
    candle_patch = image_patch.find(""candle"")[0]
    packages_patches = image_patch.find(""package"")
    # Question assumes only one package patch
    if len(packages_patches) == 0:
        # If no package is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    return packages_patches[0].simple_query(""What size are the packages the candle is on top of?"") # crop would include the candle so keep it in the query"
4353895,Who is on the snowboard on the right?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the snowboard on the right?"") # crop would include the snowboard so keep it in the query"
17929304,What is the vehicle that is on the road?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle that is on the road?"") # crop would include the road so keep it in the query"
1363574,What color is the crust?," # assumes only one bread patch
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return bread_patches[0].simple_query(""What color is the crust?"") # crop would include the crust so keep it in the query"
5672474,Is the plate to the left or to the right of the beer on the left?," # assumes one beer patch
    image_patch = ImagePatch(image)
    beer_patches = image_patch.find(""beer"")
    # Question assumes only one beer patch
    if len(beer_patches) == 0:
        # If no beer is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    beer_patch = beer_patches[0]
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        return ""left""
    for plate_patch in plate_patches:
        if plate_patch.horizontal_center < beer_patch.horizontal_center:
            return ""left""
    return ""right"""
11341284,What is the pattern of the mattress on the street?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the mattress on the street?"") # crop would include the street so keep it in the query"
14192693,Are there any boys behind the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any boys behind the fence?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
19203395,Is the white toilet paper to the right or to the left of the toilet?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    toilet_patch = toilet_patches[0]
    white_toilet_paper_patches = image_patch.find(""white toilet paper"")
    if len(white_toilet_paper_patches) == 0:
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    for white_toilet_paper_patch in white_toilet_paper_patches:
        if white_toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
            return ""right""
    return ""left"""
1194938,Are there any airplanes in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any airplanes in front of the building?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5350205,How clean is the road that the car is on the side of?," # dirty, clean, very clean
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    road_patch = road_patches[0]
    return road_patch.simple_query(""How clean is the road that the car is on the side of?"") # crop would include the car so keep it in the query"
4256016,"In which part of the picture is the black van, the bottom or the top?"," # assumes only one van patch
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    if len(van_patches) == 0:
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    van_patch = van_patches[0]
    if van_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the right of the fence doing?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
16471124,Does the horse have a different color than the boot?," # assumes only one horse and one boot
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one horse and one boot patch
    if len(horse_patches) == 0 or len(boot_patches) == 0:
        # If no horse or boot is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    horse_patch = horse_patches[0]
    boot_patch = boot_patches[0]
    if horse_patch.simple_query(""What color is the horse?"") != boot_patch.simple_query(""What color is the boot?""):
        return ""yes""
    return ""no"""
958247,Is the mouse to the right of a chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the mouse to the right of a chair?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
11179512,The basket made of plastic is what color?," # made of plastic
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    return basket_patches[0].simple_query(""What color is the basket made of plastic?"") # crop would include the plastic so keep it in the query"
8816272,Do you see any elephant to the left of the bird?," # assumes only one elephant and one bird patch
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    bird_patches = image_patch.find(""bird"")
    if len(elephant_patches) == 0 or len(bird_patches) == 0:
        return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
    for elephant_patch in elephant_patches:
        for bird_patch in bird_patches:
            if bird_patch.horizontal_center > elephant_patch.horizontal_center:
                return ""yes""
    return ""no"""
11168592,What is the animal in front of the lamp?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in front of the lamp?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
3568717,Who is wearing the jacket?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the jacket?"") # crop would include the jacket so keep it in the query"
7398502,What is the food to the left of the girl in the bottom of the photo?," # assumes one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    girl_patch = girl_patches[0]
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        return ""no""
    for food_patch in food_patches:
        if food_patch.horizontal_center < girl_patch.horizontal_center and food_patch.vertical_center > image_patch.vertical / 2:
            return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    return food_patches[0].simple_query(""What is the food to the left of the girl in the bottom of the photo?"") # crop would include the girl so keep it in the query"
5145864,What is the device that the camera is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that the camera is in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
788143,Is the man on the surfboard?," # contains a relation (on, in, with, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the surfboard?"") # crop would include the surfboard so keep it in the query"
15854501,What device has the same color as the device in the box?," # box is assumed to be a box
    image_patch = ImagePatch(image)
    device_in_box_patches = image_patch.find(""device in the box"")
    # Question assumes only one device patch
    if len(device_in_box_patches) == 0:
        # If no device is found in the box, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    device_in_box_patch = device_in_box_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    for device_patch in device_patches:
        if device_patch.simple_query(""What color is the device?"") == device_in_box_patch.simple_query(""What color is the device?""):
            return device_patch.simple_query(""What device has the same color as the device in the box?"")
    return ""no"""
3228067,What is the child wearing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child wearing?"") # crop would include the clothing so keep it in the query"
6817336,Is the blue sky behind a cathedral?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue sky behind a cathedral?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
6347271,"In which part of the image is the yellow pepper, the bottom or the top?"," # assumes only one yellow pepper
    image_patch = ImagePatch(image)
    yellow_pepper_patch = image_patch.find(""yellow pepper"")[0]
    if yellow_pepper_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?," # contains a relation (feeding, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the woman feeding?"") # crop would include the animal so keep it in the query"
3427727,On which side is the bucket?," # left or right
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    if bucket_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
31050314,Is the small chimney in the bottom part of the picture?," # chimney is small so it's in the bottom
    image_patch = ImagePatch(image)
    return ""yes"""
3503396,Are the pants purple?," # contains a property (color, size, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""pants"", ""purple"")) # crop would include the pants so keep it in the query"
11742862,Which kind of furniture is to the right of the paper towels?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"") # crop would include the paper towels so keep it in the query"
5891809,What kind of furniture is gray?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is gray?"") # crop would include the gray so keep it in the query"
5370528,Is the hair white and long?," # hair
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    hair_patch = hair_patches[0]
    is_white = hair_patch.verify_property(""hair"", ""white"")
    is_long = hair_patch.verify_property(""hair"", ""long"")
    return bool_to_yesno(is_white and is_long)"
781153,Do you see trains near the lamp post that looks white?," # contains a relation (near, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"") # crop would include the white post so keep it in the query"
5543456,Is the container to the left of the person that wears bracelets?," # container, person, bracelets
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
    for container_patch in container_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            return ""no""
        for person_patch in person_patches:
            is_wearing_bracelets = (person_patch.simple_query(""Is the person wearing bracelets?"") == ""yes"")
            if is_wearing_bracelets:
                if container_patch.horizontal_center < person_patch.horizontal_center:
                    return ""yes""
    return ""no"""
163134,What do you think is on the roof?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5603075,Is the shoe white or brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shoe white or brown?"") # crop would include the shoe so keep it in the query"
5511395,What is wrapped in paper?," # contains a relation (wrapped in, on top of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wrapped in paper?"") # crop would include the paper so keep it in the query"
5611256,Are there any couches in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch"")) # returns yes or no"
1162826,The man is in what?," # contains a relation (in, on, under, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is in what?"") # crop would include the man so keep it in the query"
81020685,Which color is the small house?," # color
    image_patch = ImagePatch(image)
    small_house_patches = image_patch.find(""small house"")
    # Question assumes only one small house patch
    if len(small_house_patches) == 0:
        # If no small house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    return small_house_patches[0].simple_query(""Which color is the small house?"") # crop would include the house so keep it in the query"
19640724,Who is in the bathroom?," # contains a relation (in, on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"") # crop would include the bathroom so keep it in the query"
289960,Do you see a racket to the right of the boy that is looking at the tie?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"") # crop would include the boy and the tie so keep them in the query"
9957748,Does the hair appear to be long and brown?," # hair is a general term
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair appear to be long and brown?"")
    hair_patch = hair_patches[0]
    return bool_to_yesno(hair_patch.verify_property(""hair"", ""long"") and hair_patch.verify_property(""hair"", ""brown"")) # hair is a general term"
21031610,What is the shoe that looks black and white resting on?," # assumes only one shoe patch
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    for shoe_patch in shoe_patches:
        if shoe_patch.simple_query(""What color is the shoe?"") == ""black and white"":
            return shoe_patch.simple_query(""What is the shoe resting on?"")
    # If no shoe is black and white, pick the first shoe
    return shoe_patches[0].simple_query(""What is the shoe resting on?"") # crop would include the object so keep it in the query"
12801921,What is the glass on?," # contains a relation (on, in, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the glass on?"") # crop would include the object so keep it in the query"
16243948,Is the white pillow under the black animal?," # assumes only one pillow and one animal
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center < animal_patch.horizontal_center:
            return ""yes""
    return ""no"""
457770,What kind of clothing is striped?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of clothing is striped?"") # crop would include the stripes so keep it in the query"
12603153,Are the child's eyes blue and open?," # returns yes or no
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    child_patch = child_patches[0]
    is_blue = child_patch.verify_property(""eyes"", ""blue"")
    is_open = child_patch.verify_property(""eyes"", ""open"")
    return bool_to_yesno(is_blue and is_open)"
9480973,What is located on top of the tub?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is located on top of the tub?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8399764,Is the fork to the right or to the left of the white plate?," # assumes only one white plate
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    if fork_patches[0].horizontal_center > white_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13420253,On which side of the photo is the chair?," # left, right
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    if chair_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
4747006,What is the label on?," # assumes only one object
    image_patch = ImagePatch(image)
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        # If no object is found, query the image directly
        return image_patch.simple_query(""What is the label on?"")
    return object_patches[0].simple_query(""What is the label on?"") # crop would include the label so keep it in the query"
3322787,What bird is to the left of the person that is wearing a shirt?," # assumes only one person wearing a shirt
    image_patch = ImagePatch(image)
    shirt_wearing_patches = image_patch.find(""person wearing a shirt"")
    # Question assumes only one shirt-wearing patch
    if len(shirt_wearing_patches) == 0:
        # If no person is wearing a shirt, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    shirt_wearing_patch = shirt_wearing_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return ""no""
    for bird_patch in bird_patches:
        if bird_patch.horizontal_center < shirt_wearing_patch.horizontal_center:
            return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    return ""no"""
6399594,On which side is the man?," # left or right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
6930120,Is the glass bowl on the right or on the left?," # assumes only one glass bowl patch
    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    if len(glass_bowl_patches) == 0:
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    glass_bowl_patch = glass_bowl_patches[0]
    if glass_bowl_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
12619961,What vehicles are to the left of the taxi?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicles are to the left of the taxi?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13362315,Is the basket on the shelf black and empty?," # basket is on the shelf
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    basket_patch = basket_patches[0]
    is_on_shelf = (basket_patch.upper > image_patch.height / 2) and (basket_patch.lower < image_patch.height / 2)
    is_black = (basket_patch.simple_query(""What color is the basket?"") == ""black"")
    is_empty = (basket_patch.simple_query(""Is the basket empty?"") == ""yes"")
    return bool_to_yesno(is_on_shelf and is_black and is_empty)"
3830854,What is the animal that is standing next to the donkey that is standing in the hay?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"") # crop would include the hay so keep it in the query"
18382324,Is this a bed or a table?," # assumes only one patch
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    table_patches = image_patch.find(""table"")
    if len(bed_patches) == 0 and len(table_patches) == 0:
        return image_patch.simple_query(""Is this a bed or a table?"")
    elif len(bed_patches) == 0:
        return ""table""
    elif len(table_patches) == 0:
        return ""bed""
    else:
        if bed_patches[0].horizontal_center > table_patches[0].horizontal_center:
            return ""bed""
        else:
            return ""table"""
18104571,"Which animal is that, a bird or a cat?"," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    return animal_patches[0].best_text_match([""bird"", ""cat""]) # crop would include the animal so keep it in the query"
2913379,Do you see any fence or pot?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)"
9294271,What is in front of the fence the zebra is kept in?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"") # crop would include the fence so keep it in the query"
10741434,What is the vegetable that is on top of the plate called?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"") # crop would include the plate so keep it in the query"
765962,Where is the car?," # returns the location of the car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Where is the car?"")
    return car_patches[0].simple_query(""Where is the car?"") # crop would include the car so keep it in the query"
12399262,Is there either a yellow truck or airplane?," # contains a disjunction (or), so ask directly
    image_patch = ImagePatch(image)
    yellow_truck_patches = image_patch.find(""yellow truck"")
    airplane_patches = image_patch.find(""airplane"")
    return bool_to_yesno(len(yellow_truck_patches) > 0 or len(airplane_patches) > 0)"
13964213,Is the man on the left of the photo?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
16171369,What is covered in the snow?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
181055844,On which side is the plastic bottle?," # left or right
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the plastic bottle?"") # contains a relation (left, right, etc), so ask directly"
5858491,Do you see any ropes on the fence that is on the left of the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"") # crop would include the fence so keep it in the query"
17834539,Are there any lamps in the scene?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp"")) # returns yes or no"
15658176,Who is wearing a helmet?," # helmet
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for helmet_patch in helmet_patches:
        return helmet_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query"
14372400,Does that coat have red color?," # assumes only one coat patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red"")) # crop would include the color so keep it in the query"
411886,Are there any curtains or blankets in this scene?," # returns yes or no
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patch = image_patch.find(""man"")[0]
    item_patches = image_patch.find(""item of furniture"")
    for item_patch in item_patches:
        if item_patch.horizontal_center < man_patch.horizontal_center:
            return item_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"") # if no item of furniture is found to the left of the man, query the image directly"
51039491,Is the fence black or red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the fence black or red?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
7425912,What animal is standing in the field?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is standing in the field?"") # crop would include the field so keep it in the query"
13136338,What animal is in front of the dog which is to the right of the bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
3775066,Which color are the cabinets in the bottom of the picture?," # bottom of the picture
    image_patch = ImagePatch(image)
    cabinets_patches = image_patch.find(""cabinets"")
    # Question assumes only one cabinet patch
    if len(cabinets_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    bottom_patch = image_patch.crop(0, 0, image_patch.width, image_patch.height // 2)
    return bottom_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"") # crop would include the bottom so keep it in the query"
17206239,Is the happy girl to the right of a player?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the happy girl to the right of a player?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
2992517,"What piece of furniture is not wooden, the table or the chair?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"") # crop would include the furniture so keep it in the query"
1827558,Which side of the image is the kettle on?," # left or right
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    kettle_patch = kettle_patches[0]
    if kettle_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
2785208,Where is the man?," # returns a string
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""Where is the man?"") # crop would include the man so keep it in the query"
6623967,Is the baby near the countertop chewing a computer mouses?," # near, on, in front of, behind, etc
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouse?"")
    for baby_patch in baby_patches:
        if baby_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
12804807,Is the small bottle open or closed?," # bottle is the object, open or closed is the property
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    bottle_patch = bottle_patches[0]
    return bottle_patch.simple_query(""Is the bottle open or closed?"") # crop would include the bottle so keep it in the query"
18437691,Is the clock small or large?," # assumes only one clock patch
    image_patch = ImagePatch(image)
    clock_patch = image_patch.find(""clock"")
    if len(clock_patch) == 0:
        return image_patch.simple_query(""Is the clock small or large?"")
    return clock_patch[0].simple_query(""Is the clock small or large?"") # crop would include the clock so keep it in the query"
9482318,Are there either any glasses or bottles in this photo?," # contains a disjunction (or), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""glasses"") or image_patch.exists(""bottle"")) # bottle is a common misspelling of bottle"
12362819,Is the sky blue or dark?," # sky is a general term, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue or dark?"") # sky is a general term, so ask directly"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"") # crop would include the shelf and the cup so keep it in the query"
1416636,Are there both bridges and chandeliers in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?"," # assumes one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""door"")) # returns yes or no"
13562221,What's the bear on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the bear on?"") # crop would include the object so keep it in the query"
9536851,Is the woman in front of the trees holding scissors?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"") # crop would include the trees and the scissors so keep them in the query"
9682405,What is on the machine?," # assumes only one machine patch
    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    if len(machine_patches) == 0:
        return image_patch.simple_query(""What is on the machine?"")
    return machine_patches[0].simple_query(""What is on the machine?"") # crop would include the object on the machine so keep it in the query"
8649435,What is on the white wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
12487033,Does the logo look red?," # returns yes or no
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""Does the logo look red?"")
    return bool_to_yesno(logo_patches[0].verify_property(""logo"", ""red"")) # crop would include the logo so keep it in the query"
14301289,What type of vehicle is to the left of the white vehicle?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
523976,Which kind of vehicle is large?," # assumes only one patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""What kind of vehicle is it?"") == ""car"":
            return ""car""
        elif vehicle_patch.simple_query(""What kind of vehicle is it?"") == ""bicycle"":
            return ""bicycle""
        elif vehicle_patch.simple_query(""What kind of vehicle is it?"") == ""scooter"":
            return ""scooter""
        elif vehicle_patch.simple_query(""What kind of vehicle is it?"") == ""motorcycle"":
            return ""motorcycle""
        elif vehicle_patch.simple_query(""What kind of vehicle is it?"") == ""train"":
            return ""train""
        elif vehicle_patch.simple_query(""What kind of vehicle is it?"") == ""ship"":
            return ""ship""
        elif vehicle_patch.simple_query(""What kind of vehicle is it?"") == ""airplane"":
            return ""airplane""
        elif vehicle_patch.simple_query(""What kind of vehicle is it?"") == ""helicopter"":
            return ""helicopter""
        elif vehicle_patch.simple_query(""What kind of vehicle is it?"") == ""boat"":
            return ""boat""
        elif vehicle_patch.simple_query(""What kind of vehicle is it?"
3423213,Who is in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18107197,Is the ottoman to the right or to the left of the brown chair?," # assumes only one patch for each object
    image_patch = ImagePatch(image)
    ottoman_patch = image_patch.find(""ottoman"")[0]
    brown_chair_patch = image_patch.find(""brown chair"")[0]
    if ottoman_patch.horizontal_center > brown_chair_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
5716578,Is there a laptop on the bed near the magazines?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8215791,Is the porcelain toilet to the left or to the right of the small trash can?," # assumes only one patch of each object
    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    small_trash_can_patches = image_patch.find(""small trash can"")
    if len(porcelain_toilet_patches) == 0 or len(small_trash_can_patches) == 0:
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    porcelain_toilet_patch = porcelain_toilet_patches[0]
    small_trash_can_patch = small_trash_can_patches[0]
    if porcelain_toilet_patch.horizontal_center < small_trash_can_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17528455,What is in front of the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
4896890,Do the goggles and the gloves have a different colors?," # goggles and gloves are the same object
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different color?"")
    goggles_patch = goggles_patches[0]
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one gloves patch
    if len(gloves_patches) == 0:
        return ""no""
    gloves_patch = gloves_patches[0]
    goggles_color = goggles_patch.simple_query(""What color are the goggles?"")
    gloves_color = gloves_patch.simple_query(""What color are the gloves?"")
    return bool_to_yesno(goggles_color != gloves_color)"
947724,Is there any purple pillow or kite in this photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"") and image_patch.verify_property(""pillow"", ""purple"")
    is_kite = image_patch.exists(""kite"") and image_patch.verify_property(""kite"", ""purple"")
    return bool_to_yesno(is_pillow or is_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?"," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > man_patch.horizontal_center:
            return people_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"") # if no people are found, query the image directly"
15492262,Which kind of furniture is white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is white?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
151032547,Is the bear on the right side?," # assumes only one bear patch
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    if len(bear_patches) == 0:
        return ""no""
    return ""yes"" if bear_patches[0].horizontal_center > image_patch.width / 2 else ""no"""
5698674,Are there either any planters or benches?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_planters = image_patch.exists(""planter"")
    is_benches = image_patch.exists(""bench"")
    return bool_to_yesno(is_planters or is_benches)"
19397103,What is the person that is standing staring at?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person that is standing staring at?"") # crop would include the standing and staring so keep it in the query"
11630681,What is the color of the necklace?," # assumes only one patch
    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    # Question assumes only one necklace patch
    if len(necklace_patches) == 0:
        # If no necklace is found, query the image directly
        return image_patch.simple_query(""What is the color of the necklace?"")
    return necklace_patches[0].simple_query(""What is the color of the necklace?"") # crop would include the necklace so keep it in the query"
248245,Is the table to the left or to the right of the fence?," # assumes only one table and one fence patch
    image_patch = ImagePatch(image)
    table_patch = image_patch.find(""table"")[0]
    fence_patch = image_patch.find(""fence"")[0]
    if table_patch.horizontal_center < fence_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
837033,Are there round windows or doors?," # round windows or doors
    image_patch = ImagePatch(image)
    round_window_patches = image_patch.find(""round window"")
    round_door_patches = image_patch.find(""round door"")
    return bool_to_yesno(len(round_window_patches) > 0 or len(round_door_patches) > 0)"
5249150,Are there any bears or napkins in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vehicle is to the left of the person?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
61006749,Who is dressed in pink?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is dressed in pink?"") # crop would include the pink so keep it in the query"
6122955,Does the pillow have yellow color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the pillow have yellow color?"") # crop would include the color so keep it in the query"
6861738,Is the old woman to the right or to the left of the faucet?," # assumes only one old woman and one faucet
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    faucet_patches = image_patch.find(""faucet"")
    if len(old_woman_patches) == 0 or len(faucet_patches) == 0:
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    old_woman_patch = old_woman_patches[0]
    faucet_patch = faucet_patches[0]
    if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15833048,Which kind of animal is on the road?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is on the road?"") # crop would include the road so keep it in the query"
9524339,What animal is large?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What is the size of the animal?"") == ""large"":
            return animal_patch.simple_query(""What animal is large?"")
    # If no large animal is found, query the image directly
    return image_patch.simple_query(""What animal is large?"") # crop would include the size so keep it in the query"
18255749,How clean are the sheets the pillow is to the right of?," # pillow is to the right of the sheets
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheets_patches = image_patch.find(""sheets"")
    # Question assumes only one sheets patch
    if len(sheets_patches) == 0:
        return ""unknown""
    sheets_patch = sheets_patches[0]
    return sheets_patch.simple_query(""How clean are the sheets the pillow is to the right of?"") # crop would include the pillow so keep it in the query"
19797097,What's the man wearing?," # returns the man's clothing
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"") # crop would include the clothing so keep it in the query"
6899090,Is the man to the right or to the left of the appliance that looks white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patches = image_patch.find(""appliance that looks white"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""left""
    appliance_patch = appliance_patches[0]
    if man_patch.horizontal_center > appliance_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
3357701,Does the dog to the right of the other dog have white color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If no two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    right_dog_patch = dog_patches[1]
    left_dog_patch = dog_patches[0]
    if right_dog_patch.horizontal_center > left_dog_patch.horizontal_center:
        return bool_to_yesno(right_dog_patch.verify_property(""dog"", ""white""))
    else:
        return bool_to_yesno(left_dog_patch.verify_property(""dog"", ""white"")) # if no dog is to the right, query the left dog"
2829418,What's the girl holding?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What's the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What's the girl holding?"") # crop would include the object so keep it in the query"
15930109,Which kind of vehicle is blue?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vehicle is blue?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1525382,What type of vegetable is on the food with the cheese?," # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"") # crop would include the cheese so keep it in the query"
8548980,Are there either players or hand soaps?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?"," # assumes only one patch
    image_patch = ImagePatch(image)
    sandwich_patches = image_patch.find(""sandwich"")
    # Question assumes only one sandwich patch
    if len(sandwich_patches) == 0:
        # If no sandwich is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    croissant_patches = image_patch.find(""croissant"")
    # Question assumes only one croissant patch
    if len(croissant_patches) == 0:
        return ""croissant""
    if sandwich_patch.simple_query(""Is the sandwich made?"") == ""no"":
        return ""sandwich""
    else:
        return ""croissant"""
6423906,Which kind of food is on the plate?," # assumes only one plate patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    return food_patches[0].simple_query(""Which kind of food is on the plate?"") # crop would include the food so keep it in the query"
1993231,Are the animals in the image of different types?," # returns yes or no
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    for i in range(len(animal_patches)):
        for j in range(i+1, len(animal_patches)):
            if animal_patches[i].simple_query(""What type of animal is this?"") != animal_patches[j].simple_query(""What type of animal is this?""):
                return ""yes""
    return ""no"""
13949656,Are there any people to the left of the tray?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any people to the left of the tray?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
184032,Does the fresh pineapple appear to be ripe?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"") # crop would include the pineapple so keep it in the query"
9392591,Are there chairs or smoothies?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"") # crop would include the sheep so keep it in the query"
9896138,Are there any boxes to the left of the screen in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in box_patches:
        if box_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1400333,What do you think is the man on?," # contains a relation (on, in, with, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the man on?"") # crop would include the object so keep it in the query"
13105327,Is the boot white or orange?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the boot white or orange?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
3659880,Does the wood boat have silver color?," # wood boat
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""Does the wood boat have silver color?"")
    return bool_to_yesno(boat_patches[0].verify_property(""wood boat"", ""silver"")) # crop would include the wood so keep it in the query"
1827802,Is the red pot on the appliance to the right of the mixer?," # assumes only one appliance patch
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    for red_pot_patch in red_pot_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center > mixer_patch.horizontal_center:
                return ""yes""
        mixer_patches = image_patch.find(""mixer"")
        for mixer_patch in mixer_patches:
            if appliance_patch.horizontal_center > mixer_patch.horizontal_center:
                return ""yes""
    return ""no"""
14809102,The phone that is in front of the camera is of what color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The phone that is in front of the camera is of what color?"") # crop would include the phone so keep it in the query"
61001545,What type of food is to the left of the silver spoon?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
799463,Are there both a window and a door in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
11260725,Does the water have small size and white color?," # water
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Does the water have small size and white color?"")
    water_patch = water_patches[0]
    return bool_to_yesno(water_patch.verify_property(""water"", ""small size"") and water_patch.verify_property(""water"", ""white"")) # crop would include the water so keep it in the query"
2397653,Are there any fences that are white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any fences that are white?"")
    for fence_patch in fence_patches:
        if fence_patch.simple_query(""What color is the fence?"") == ""white"":
            return ""yes""
    return ""no"""
1554603,Who is holding the animal?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is holding the animal?"") # crop would include the animal so keep it in the query"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8988476,What kind of furniture is presented in this photo?," # returns a list of furniture patches
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is presented in this photo?"") # returns a list of furniture patches"
10695214,What is the man with the backpack holding?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man with backpack"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    object_patches = man_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    return object_patches[0].simple_query(""What is the man with the backpack holding?"") # crop would include the object so keep it in the query"
91058050,Are there both mouse pads and computer mice in the photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_computer_mouse = image_patch.exists(""computer mouse"")
    return bool_to_yesno(is_mouse_pad and is_computer_mouse)"
1972064,Is the person in front of the tree wearing jeans?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")
    for person_patch in person_patches:
        is_wearing_jeans = (person_patch.simple_query(""Is the person wearing jeans?"") == ""yes"")
        if is_wearing_jeans:
            return ""yes""
    return ""no"""
167162,Is there a bike to the right of the purse that is to the right of the woman?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1695388,Who is wearing a shirt?," # shirt is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"") # shirt is a property, so ask directly"
10960149,Is the woman to the left or to the right of the man in the bottom?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) == 0 or len(woman_patches) == 0:
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16921984,What is the bent man to the right of the other men doing?," # assumes only one bent man patch
    image_patch = ImagePatch(image)
    bent_man_patch = image_patch.find(""bent man"")[0]
    other_men_patches = image_patch.find(""man"")
    # Question assumes only one other men patch
    if len(other_men_patches) == 0:
        # If no other men are found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    other_men_patch = other_men_patches[0]
    return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"") # crop would include the other men so keep it in the query"
12175564,What animal are the men to the right of the girl leading?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal are the men to the right of the girl leading?"") # crop would include the animal so keep it in the query"
1219606,On which side of the image is the house?," # left, right, or center
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    house_patch = house_patches[0]
    if house_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    elif house_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""center"""
1770499,Is the black suitcase to the right or to the left of the person on the left?," # assumes only one person patch
    image_patch = ImagePatch(image)
    suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one suitcase patch
    if len(suitcase_patches) == 0:
        # If no suitcase is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    suitcase_patch = suitcase_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    person_patch = person_patches[0]
    if suitcase_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
5282406,Is the pot to the left of a chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the pot to the left of a chair?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
10914401,Where are the people?," # returns a string
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        elif people_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
        elif people_patch.vertical_center < image_patch.vertical_center:
            return ""bottom""
        else:
            return ""top""
    return ""top"""
1919722,What animal is eating the grass?," # contains a relation (eating), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is eating the grass?"") # crop would include the eating so keep it in the query"
9681008,Who is wearing a helmet?," # helmet
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for helmet_patch in helmet_patches:
        return helmet_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query"
16861675,Who is on the surfboard in the middle of the photo?," # assumes one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"") # crop would include the middle so keep it in the query"
10947426,What is the color of the lizard beside the banana?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the lizard beside the banana?"") # crop would include the banana so keep it in the query"
18200684,Is the wine glass in the top or in the bottom part?," # assumes only one wine glass patch
    image_patch = ImagePatch(image)
    wine_glass_patch = image_patch.find(""wine glass"")[0]
    if wine_glass_patch.vertical_center > image_patch.vertical_center:
        return ""top""
    else:
        return ""bottom"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"") # crop would include the people so keep it in the query"
171012637,Is the teddy bear to the right of a suitcase?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
19861372,Is the woman's hair long or short?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    hair_length = woman_patch.simple_query(""What is the length of the woman's hair, long or short?"")
    return hair_length"
623889,Are both the television and the armchair the same color?," # returns yes or no
    image_patch = ImagePatch(image)
    is_tv = image_patch.exists(""television"")
    is_armchair = image_patch.exists(""armchair"")
    if is_tv and is_armchair:
        tv_patch = image_patch.find(""television"")[0]
        armchair_patch = image_patch.find(""armchair"")[0]
        return bool_to_yesno(tv_patch.simple_query(""What color is the object?"") == armchair_patch.simple_query(""What color is the object?""))
    return ""yes"""
4917605,Is the shoe white or brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shoe white or brown?"") # crop would include the shoe so keep it in the query"
91055143,What is on the table?," # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        return image_patch.simple_query(""What is on the table?"")
    return table_patches[0].simple_query(""What is on the table?"") # crop would include the table so keep it in the query"
5430643,What do you think sits on the plate to the left of the tomato?," # assumes only one plate and one tomato
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    for plate_patch in plate_patches:
        tomato_patches = image_patch.find(""tomato"")
        if len(tomato_patches) == 0:
            return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
        for tomato_patch in tomato_patches:
            if tomato_patch.horizontal_center > plate_patch.horizontal_center:
                return plate_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"") # if no object is found, query the image directly"
523936,Is the woman in the top part of the picture?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center > image_patch.vertical_center:
        return ""yes""
    return ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?," # bottle on nightstand on bed
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    for bottle_patch in bottle_patches:
        is_on_nightstand = (bottle_patch.simple_query(""Is the bottle on the nightstand?"") == ""yes"")
        is_on_bed = (bottle_patch.simple_query(""Is the bottle on the bed?"") == ""yes"")
        if is_on_nightstand and is_on_bed:
            return ""yes""
    return ""no"""
14292161,The pot is of which color?," # assumes only one pot patch
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        return image_patch.simple_query(""The pot is of which color?"")
    pot_patch = pot_patches[0]
    return pot_patch.simple_query(""The pot is of which color?"") # crop would include the pot so keep it in the query"
17495150,"What device is black, the microphone or the laptop?"," # assumes only one device patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.simple_query(""What color is the device, black or white?"") == ""black"":
            return device_patch.simple_query(""What device is black, the microphone or the laptop?"")
    return image_patch.simple_query(""What device is black, the microphone or the laptop?"") # if no device is black, query the image directly"
1521847,Is the cat on a desk?," # contains a relation (on, in, under, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the cat on a desk?"") # crop would include the desk so keep it in the query"
16465081,The man is holding what?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patch = image_patch.find(""man"")[0]
    return man_patch.simple_query(""The man is holding what?"") # crop would include the object being held so keep it in the query"
17387032,What is on the post?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1892436,What is in front of the kids that are looking at the cake?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"") # crop would include the cake so keep it in the query"
18906705,How big is the crowd?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How big is the crowd?"") # assumes the crowd is in the image"
6157200,Does the sign on the pole have white color?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""sign on the pole"", ""white"") # crop would include the pole so keep it in the query"
16760226,What's the laptop in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
111054070,How large is the bed?," # returns the size of the bed
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    bed_patch = bed_patches[0]
    return bed_patch.simple_query(""What size is the bed?"") # crop would include the bed so keep it in the query"
14143886,Where is the person with the luggage standing on?," # ground, grass, dirt, etc
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person with luggage"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    return person_patches[0].simple_query(""Where is the person with the luggage standing on?"") # ground, grass, dirt, etc"
19872633,Are there either any fire extinguishers or pepper shakers?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)"
12755010,Is the bottle to the right of a napkin?," # bottle and napkin are assumed to be the same size
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    for bottle_patch in bottle_patches:
        napkin_patches = image_patch.find(""napkin"")
        # Question assumes only one napkin patch
        if len(napkin_patches) == 0:
            return ""no""
        napkin_patch = napkin_patches[0]
        if bottle_patch.horizontal_center > napkin_patch.horizontal_center:
            return ""yes""
    return ""no"""
2747001,Are there any soaps or bombs?," # bomb is a type of soap
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see baby giraffes or elephants?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
6898877,What is the sign on?," # contains a relation (on, in, at, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"") # crop would include the sign so keep it in the query"
15862812,What is the sticker on?," # assumes only one sticker patch
    image_patch = ImagePatch(image)
    sticker_patch = image_patch.find(""sticker"")
    if len(sticker_patch) == 0:
        return image_patch.simple_query(""What is the sticker on?"")
    return sticker_patch[0].simple_query(""What is the sticker on?"") # crop would include the object so keep it in the query"
141031470,On which side of the image is the white towel?," # left or right
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    if towel_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
41026846,Who rides a motorcycle?," # assumes only one motorcycle patch
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    if len(motorcycle_patches) == 0:
        return image_patch.simple_query(""Who rides a motorcycle?"")
    rider_patches = motorcycle_patches[0].find(""rider"")
    if len(rider_patches) == 0:
        return image_patch.simple_query(""Who rides a motorcycle?"")
    return rider_patches[0].simple_query(""Who rides a motorcycle?"") # crop would include the rider so keep it in the query"
16540391,What is around the bathtub the towel is on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the bathtub the towel is on?"") # crop would include the bathtub and the towel so keep it in the query"
7469617,Is the man to the left or to the right of the person that is to the left of the people?," # assumes only one patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""left""
    people_patch = people_patches[0]
    left_of_people_patches = image_patch.find(""people"")
    # Question assumes only one left_of_people patch
    if len(left_of_people_patches) == 0:
        return ""left""
    left_of_people_patch = left_of_people_patches[0]
    if left_of_people_patch.horizontal_center < people_patch.horizontal_center:
        return ""left""
    else:
        if man_patch.horizontal_center < people_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
64308,What's located on top of the soup?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's located on top of the soup?"") # crop would include the soup so keep it in the query"
16660910,Are both the fence and the bench made of the same material?," # assumes only one fence and one bench patch
    image_patch = ImagePatch(image)
    fence_patch = image_patch.find(""fence"")[0]
    bench_patch = image_patch.find(""bench"")[0]
    return bool_to_yesno(fence_patch.simple_query(""What material is the fence made of?"") == bench_patch.simple_query(""What material is the bench made of?"")) # crop would include the material so keep it in the query"
3196255,Are there helmets that are not white?," # helmet is a noun
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.simple_query(""Is the helmet white?"") == ""yes"":
            return ""no""
    return ""yes"""
2992630,Is the bowl to the right or to the left of the man that is drinking?," # assumes only one man and one bowl
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return ""left""
    bowl_patch = bowl_patches[0]
    if bowl_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
513894,Is the person above the sand wearing glasses?," # contains a relation (above, below, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person above the sand wearing glasses?"") # crop would include the glasses so keep it in the query"
14167599,Is the color of the life preserver the same as that of the house?," # life preserver
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    # Question assumes only one life preserver patch
    if len(life_preserver_patches) == 0:
        # If no life preserver is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    life_preserver_color = life_preserver_patches[0].simple_query(""What color is the life preserver?"")
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        return ""no""
    house_color = house_patches[0].simple_query(""What color is the house?"")
    return bool_to_yesno(life_preserver_color == house_color)"
18264755,How is the weather?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
6711450,What is the animal that is looking into the toilet that is not closed?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"") # crop would include the toilet and the animal so keep it in the query"
8641613,Do you see any helmets in the picture that are not red?," # helmet is a noun, so go step by step
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        is_not_red = helmet_patch.simple_query(""Is the helmet red?"") != ""yes""
        if is_not_red:
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?," # holds
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    return happy_patches[0].simple_query(""What does the happy person hold?"") # crop would include the object held so keep it in the query"
8461507,Are there either tissue boxes or lamps in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is it?"")
    return animal_patches[0].simple_query(""Which kind of animal is it?"") # crop would include the animal so keep it in the query"
19102906,What type of drink is to the left of the plate?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of drink is to the left of the plate?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18315440,Is the sky cloudy and blue?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cloudy = image_patch.verify_property(""sky"", ""cloudy"")
    is_blue = image_patch.verify_property(""sky"", ""blue"")
    return bool_to_yesno(is_cloudy and is_blue)"
453061,Is the fork on the right of the image?," # assumes only one fork patch
    image_patch = ImagePatch(image)
    fork_patch = image_patch.find(""fork"")[0]
    if fork_patch.horizontal_center > image_patch.width / 2:
        return ""yes""
    return ""no"""
71002567,"What is the broccoli on, a table or a nightstand?"," # contains a relation (on, next to, in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"") # crop would include the object it is on, so keep it in the query"
17465089,Is the field green and small?," # returns yes or no
    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Is the field green and small?"") # crop would include the field so keep it in the query
    field_patch = field_patches[0]
    is_green = field_patch.verify_property(""field"", ""green"")
    is_small = field_patch.verify_property(""field"", ""small"")
    return bool_to_yesno(is_green and is_small)"
16150157,What is on the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
17882658,Is the van to the left or to the right of the SUV on the right side?," # assumes only one van and one SUV
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    van_patch = van_patches[0]
    suv_patches = image_patch.find(""suv"")
    # Question assumes only one SUV patch
    if len(suv_patches) == 0:
        return ""left""
    suv_patch = suv_patches[0]
    if van_patch.horizontal_center < suv_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15101358,Is the girl to the left of the boy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the girl to the left of the boy?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
12785181,What animals are in the grass?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in the grass?"") # crop would include the grass so keep it in the query"
348093,Are there both an apple and a bag in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)"
314181,Which sign is shown?," # assumes only one sign
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    if len(sign_patches) == 0:
        return image_patch.simple_query(""Which sign is shown?"")
    return sign_patches[0].simple_query(""Which sign is shown?"") # crop would include the sign so keep it in the query"
16275314,"On which side is the woman, the right or the left?"," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
19535592,Who runs on the sand?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who runs on the sand?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
156886,Is there a giraffe near the bush?," # giraffe is not near the bush
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    return ""no"""
1756642,Which place is it?," # returns the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # returns the place"
11177243,Who wears the shirt?," # shirt is a property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    for shirt_patch in shirt_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            return image_patch.simple_query(""Who wears the shirt?"")
        for person_patch in person_patches:
            if person_patch.simple_query(""Is the person wearing the shirt?"") == ""yes"":
                return person_patch.simple_query(""Who wears the shirt?"")
    # If no person is wearing the shirt, pick the first person
    return person_patches[0].simple_query(""Who wears the shirt?"") # crop would include the shirt so keep it in the query"
1972390,What type of animal is standing in the field?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal is standing in the field?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14579439,Is the stuffed animal on the right?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.horizontal_center > image_patch.width / 2)"
6645395,Is the gray building behind the passengers that are boarding the airplane?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
19610200,Is the fence metallic?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the fence metallic?"")
    fence_patch = fence_patches[0]
    return bool_to_yesno(fence_patch.verify_property(""fence"", ""metallic"")) # crop would include the fence so keep it in the query"
5299471,What does the girl that to the left of the trashcan carry?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"") # crop would include the trashcan so keep it in the query"
7548203,Which kind of vegetable is on the pizza?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vegetable is on the pizza?"") # crop would include the pizza so keep it in the query"
91027737,On which side is the pan?," # left or right
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
19133443,Are the black cars in the top part of the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    if black_car_patches[0].vertical_center > image_patch.vertical_center:
        return ""yes""
    return ""no"""
6144031,Who is in the living room?," # assumes one living room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"") # crop would include the living room so keep it in the query"
14300987,What is the sink made of?," # assumes only one sink patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"") # crop would include the sink so keep it in the query"
16464341,Is there a black cat or bird?," # bird or cat
    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return ""bird"" if is_bird else ""black cat"""
1241741,Do you see a bicycle or a biker in this picture?," # contains a relation (bicycle, biker), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see a bicycle or a biker in this picture?"") # contains a relation (bicycle, biker), so ask directly"
844747,Are there both a pillow and a kitten in the image?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""pillow"") and image_patch.exists(""kitten"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1104500,What kind of food is in the box?," # box is a container
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of food is in the box?"") # box is a container, so ask directly"
4204973,What is the food that is to the left of the kid called?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the food that is to the left of the kid called?"") # crop would include the food so keep it in the query"
11820726,"What device is the desk in front of, a television or a printer?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18114588,Do you see a helmet there?," # helmet
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""helmet"")) # helmet"
11950874,What animal is standing on the ground?," # ground is a property
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""What is the animal standing on?"") == ""ground"":
            return animal_patch.simple_query(""What animal is standing on the ground?"")
    # If no animal is standing on the ground, pick the first animal
    return animal_patches[0].simple_query(""What animal is standing on the ground?"") # ground is a property so keep it in the query"
10216953,Is the small car to the left of the fork on the right?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the small car to the left of the fork on the right?"") # crop would include the fork so keep it in the query"
16184942,Does that grass look brown and short?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""grass"", ""brown"") and image_patch.verify_property(""grass"", ""short"")) # crop would include the grass so keep it in the query"
6312238,Is the hydrant to the left of the car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the hydrant to the left of the car?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
16646227,On which side of the picture is the gray car?," # left or right
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    gray_car_patch = gray_car_patches[0]
    if gray_car_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?," # assumes only one patch for each object
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    if len(ball_patches) == 0:
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for ball_patch in ball_patches:
        sneakers_patches = image_patch.find(""sneakers"")
        for sneakers_patch in sneakers_patches:
            if ball_patch.horizontal_center > sneakers_patch.horizontal_center:
                return ""right""
            elif ball_patch.horizontal_center < sneakers_patch.horizontal_center:
                return ""left""
    return ""right"" # if no ball is found, assume it is to the right of the person wearing sneakers"
3443704,What is the woman wearing?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is the woman wearing?"") # crop would include the clothing so keep it in the query"
19313572,What is the color of the tent to the left of the vehicles?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
10885675,What is the toilet seat made of?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet seat made of?"") # crop would include the seat so keep it in the query"
6926432,What animal is resting on the blanket?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    return animal_patches[0].simple_query(""What animal is resting on the blanket?"") # crop would include the blanket so keep it in the query"
14561612,What color do you think the bikini that the woman is wearing is?," # bikini is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"") # crop would include the bikini so keep it in the query"
6587755,Are both the room and the bowl the same color?," # returns yes or no
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    # Question assumes only one room patch
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""Are both the room and the bowl the same color?"")
    room_patch = room_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return ""no""
    bowl_patch = bowl_patches[0]
    return bool_to_yesno(room_patch.simple_query(""What color is the room?"") == bowl_patch.simple_query(""What color is the bowl?"")) # crop would include the bowl so keep it in the query"
4479543,Is the barn white or brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the barn white or brown?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
972522,Does the box look white or brown?," # box is a general term
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].best_text_match([""white"", ""brown""]) # box is a general term, so best match is sufficient"
3948528,What is the bowl made of?," # assumes only one bowl patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bowl made of?"") # crop would include the bowl so keep it in the query"
15724828,Is the bench in front of the rock gray or red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the bench in front of the rock gray or red?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
866459,On which side is the couch?," # left or right
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the couch?"") # contains a relation (left, right, etc), so ask directly"
8614812,Is the person that is playing wearing shorts?," # contains a relation (playing, wearing, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person that is playing wearing shorts?"") # crop would include the playing so keep it in the query"
167438,What is wearing the ground?," # ground is a noun
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"") # ground is a noun, so ask directly"
9418088,Which kind of furniture is wooden?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is wooden?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1042377,Who is standing beside the person that is wearing a dress?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"") # crop would include the dress so keep it in the query"
16889676,Is it an indoors or outdoors scene?," # image is the original image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"") # query the original image"
10324400,How fat are the long skis?," # fat skis
    image_patch = ImagePatch(image)
    long_ski_patches = image_patch.find(""long ski"")
    # Question assumes only one long ski patch
    if len(long_ski_patches) == 0:
        # If no long ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    return long_ski_patches[0].simple_query(""How fat are the long skis?"") # crop would include the skis so keep it in the query"
2211743,Is the sky clear or overcast?," # assumes the sky is in the top of the image
    image_patch = ImagePatch(image)
    if image_patch.upper > image_patch.height / 2:
        return image_patch.simple_query(""What is the sky, clear or overcast?"")
    else:
        return image_patch.simple_query(""What is the ground, grass or dirt?"") # assumes the ground is in the bottom of the image"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?," # assumes only one patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    pencil_patches = image_patch.find(""pencil"")
    if len(bottle_patches) == 0 or len(pencil_patches) == 0:
        return ""no""
    for bottle_patch in bottle_patches:
        for pencil_patch in pencil_patches:
            if bottle_patch.horizontal_center < pencil_patch.horizontal_center and bottle_patch.vertical_center < pencil_patch.vertical_center:
                return ""yes""
    return ""no"""
15478302,Is there any dark door or window in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    dark_patches = image_patch.find(""door"") + image_patch.find(""window"")
    return bool_to_yesno(len(dark_patches) > 0)"
18414234,Do you see either a knife or a chair in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)"
19779815,Is the book red or yellow?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the book red or yellow?"") # crop would include the color so keep it in the query"
7257283,Are there men to the left of the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""man"")) and image_patch.horizontal_center > 0"
6621625,On which side of the picture is the bench?," # left, right, or center
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    if bench_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    elif bench_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""center"""
19311589,Are there both fences and horses in this picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?," # assumes one patch
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"") # crop would include the container and the person so keep it in the query"
171031333,Do you see blankets in the picture that are not black?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""blanket"") and not image_patch.verify_property(""blanket"", ""black"")) # crop would include the color so keep it in the query"
16695341,What is the fence made of?," # fence is a common object
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"") # crop would include the fence so keep it in the query"
8314287,Do you see any bottle or child there?," # bottle or child
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)"
5111363,Are there chairs or tables that are not blue?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    table_patches = image_patch.find(""table"")
    is_chair_blue = False
    is_table_blue = False
    for chair_patch in chair_patches:
        is_chair_blue = is_chair_blue or chair_patch.verify_property(""chair"", ""blue"")
    for table_patch in table_patches:
        is_table_blue = is_table_blue or table_patch.verify_property(""table"", ""blue"")
    return bool_to_yesno(not is_chair_blue or not is_table_blue)"
9230971,Which place is it?," # returns the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # assumes the place is in the image"
132422,Does the hair have short length and white color?," # hair
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    hair_patch = hair_patches[0]
    return bool_to_yesno(hair_patch.verify_property(""hair"", ""short"") and hair_patch.verify_property(""hair"", ""white"")) # crop would include the hair so keep it in the query"
4822200,Do you see any lettuce on the food with the meat?," # food with meat
    image_patch = ImagePatch(image)
    meat_patches = image_patch.find(""meat"")
    # Question assumes only one meat patch
    if len(meat_patches) == 0:
        # If no meat is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    meat_patch = meat_patches[0]
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        return ""no""
    for lettuce_patch in lettuce_patches:
        if lettuce_patch.horizontal_center > meat_patch.horizontal_center:
            return ""yes""
    return ""no"""
3726666,What device is to the left of the curtain that is to the left of the glasses?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
9954849,What kind of furniture is it?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is it?"") # crop would include the furniture so keep it in the query"
19409495,Are there any red trains or buses?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""red train"") or image_patch.exists(""red bus"")) # bus and train are in the same patch"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"") # crop would include the lettuce so keep it in the query"
623393,"What type of clothing is tan, the hat or the vest?"," # tan, hat, vest
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return tan_patches[0].simple_query(""What type of clothing is tan, the hat or the vest?"")
    vest_patches = image_patch.find(""vest"")
    # Question assumes only one vest patch
    if len(vest_patches) == 0:
        return tan_patches[0].simple_query(""What type of clothing is tan, the hat or the vest?"")
    tan_patch = tan_patches[0]
    hat_patch = hat_patches[0]
    vest_patch = vest_patches[0]
    if tan_patch.horizontal_center > hat_patch.horizontal_center and tan_patch.horizontal_center > vest_patch.horizontal_center:
        return ""vest""
    elif hat_patch.horizontal_center > tan_patch.horizontal_center and hat_patch.horizontal_center > vest_patch.horizontal_center:
        return ""vest""
    else:
        return ""hat"""
6436448,Is the color of the skirt the same as the scarf?," # returns yes or no
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"") # crop would include the scarf so keep it in the query
    skirt_color = skirt_patches[0].simple_query(""What color is the skirt?"")
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        return ""no""
    scarf_color = scarf_patches[0].simple_query(""What color is the scarf?"")
    return bool_to_yesno(skirt_color == scarf_color)"
3303313,Is the blanket under a cat?," # contains a relation (under, above, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blanket under a cat?"") # crop would include the cat so keep it in the query"
443663,What color is the picture?," # returns the color of the picture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"") # returns the color of the picture"
17267472,Is there any umbrella to the right of the man?," # umbrella is not in the image
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        return ""no""
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1885406,What is the toy on the bed?," # contains a relation (on, in, under, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toy on the bed?"") # crop would include the bed so keep it in the query"
5557965,On which side is the bag?," # left or right
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag, left or right?"")
    if bag_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?," # left or right
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    if banana_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
3196355,What does the batter hold?," # batter is a noun
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What does the batter hold?"") # batter is a noun"
14470748,Who wears a jacket?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who wears a jacket?"") # crop would include the jacket so keep it in the query"
16537736,Are there any houses behind the shrubs?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there any houses behind the shrubs?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1129541,What piece of furniture is made of wood?," # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        is_wood = furniture_patch.simple_query(""What material is the furniture made of?"") == ""wood""
        if is_wood:
            return furniture_patch.simple_query(""What piece of furniture is made of wood?"")
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""What piece of furniture is made of wood?"") # crop would include the wood so keep it in the query"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?," # assumes only one man and one racket
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one man and one hat patch
    if len(man_patches) == 0 or len(hat_patches) == 0:
        # If no man or hat is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    hat_patch = hat_patches[0]
    if man_patch.horizontal_center > hat_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
12416703,Where is that cat?," # assumes one cat patch
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    if len(cat_patches) == 0:
        return image_patch.simple_query(""Where is that cat?"")
    return cat_patches[0].simple_query(""Where is that cat?"") # crop would include the cat so keep it in the query"
15603088,The animal to the right of the envelope is lying on what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"") # crop would include the envelope so keep it in the query"
5329077,Is the man on a bench?," # contains a relation (on, in, with, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on a bench?"") # crop would include the bench so keep it in the query"
1945705,What kind of device is to the left of the device that looks silver and gray?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"") # crop would include the color so keep it in the query"
17520003,What vehicle is to the right of the pine tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the pine tree?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1259983,Who is wearing pants?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing pants?"") # crop would include the pants so keep it in the query"
6413378,Is there a black keyboard or camera?," # returns yes or no
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""Is there a black keyboard or camera?"")
    for keyboard_patch in keyboard_patches:
        if keyboard_patch.simple_query(""Is the keyboard black?"") == ""yes"":
            return ""keyboard""
    camera_patches = image_patch.find(""camera"")
    # Question assumes only one camera patch
    if len(camera_patches) == 0:
        return ""no""
    for camera_patch in camera_patches:
        if camera_patch.simple_query(""Is the camera black?"") == ""yes"":
            return ""camera""
    return ""no"""
947305,Is the sunny water blue and high?," # water is the object
    image_patch = ImagePatch(image)
    is_blue = image_patch.verify_property(""water"", ""blue"")
    is_high = image_patch.verify_property(""water"", ""high"")
    return bool_to_yesno(is_blue and is_high)"
4367817,What type of animal in this scene is brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal in this scene is brown?"") # crop would include the brown so keep it in the query"
15485572,What is the vegetable on the hot dog with the cheese?," # contains a relation (on, with, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"") # crop would include the cheese and hot dog so keep it in the query"
12661142,What is the appliance in the kitchen called?," # kitchen appliance
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the appliance in the kitchen called?"") # crop would include the kitchen so keep it in the query"
41012743,The arrow is on what?," # assumes only one arrow patch
    image_patch = ImagePatch(image)
    arrow_patch = image_patch.find(""arrow"")
    if len(arrow_patch) == 0:
        return image_patch.simple_query(""The arrow is on what?"")
    return arrow_patch[0].simple_query(""The arrow is on what?"") # crop would include the object so keep it in the query"
4777414,What color is the bicycle in the bottom of the photo?," # assumes only one patch
    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    if len(bicycle_patches) == 0:
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    bottom_patch = image_patch.crop(0, 0, image_patch.width, image_patch.height // 2)
    return bottom_patch.simple_query(""What color is the bicycle in the bottom of the photo?"") # crop would include the bottom so keep it in the query"
1185988,What is the device on top of the table that is to the right of the trashcan?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13582968,Was granite used to make that floor?," # granite is a type of rock
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    # Question assumes only one floor patch
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""Was granite used to make that floor?"")
    return floor_patches[0].verify_property(""floor"", ""granite"") # crop would include the floor so keep it in the query"
6235273,Are there women in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""woman"")) # returns yes or no"
5377974,What is the girl playing with?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the girl playing with?"") # crop would include the girl so keep it in the query"
51037065,On which side of the image is the fridge?," # left or right
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    if fridge_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
5299477,Which kind of bag does the girl carry?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of bag does the girl carry?"") # crop would include the bag so keep it in the query"
15135617,Is the white dog on a bench?," # contains a relation (on, next to, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white dog on a bench?"") # crop would include the bench so keep it in the query"
1111583,Is the male person to the right of a person?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    male_patches = image_patch.find(""male person"")
    # Question assumes only one male patch
    if len(male_patches) == 0:
        # If no male is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_patch in male_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center < male_patch.horizontal_center:
                return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
15610844,What kind of place is shown?," # assumes one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"") # assumes one patch"
11869032,Is the banana below a bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the banana below a bird?"") # crop would include the bird so keep it in the query"
9878360,What color is the vehicle to the left of the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the vehicle to the left of the fence?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
481765,Are there either any buses or trains in the image?," # bus or train
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?," # fence is a common object
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"") # crop would include the fence so keep it in the query"
9218340,Does the man to the left of the traffic cone wear a cap?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes only one traffic cone patch
    if len(traffic_cone_patches) == 0:
        return ""no""
    traffic_cone_patch = traffic_cone_patches[0]
    if man_patch.horizontal_center < traffic_cone_patch.horizontal_center:
        return ""yes""
    return ""no"""
11981238,What is common to the blazer and the suit?," # common to two objects
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    # Question assumes only one blazer patch
    if len(blazer_patches) == 0:
        # If no blazer is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one suit patch
    if len(suit_patches) == 0:
        return ""no""
    common_property = None
    for property in [""color"", ""material"", ""style"", ""pattern"", ""length"", ""width"", ""shape"", ""size"", ""brand"", ""label"", ""season"", ""occasion"", ""era"", ""period"", ""culture"", ""origin"", ""country"", ""region"", ""location"", ""place"", ""setting"", ""context"", ""situation"", ""condition"", ""state"", ""status"", ""position"", ""orientation"", ""direction"", ""angle"", ""slope"", ""tilt"", ""lean"", ""balance"", ""weight"", ""load"", ""pressure"", ""force"", ""torque"", ""moment"", ""rotation"", ""spin"", ""twist"", ""turn"", ""curl"", ""wave"", ""ripple"", ""pattern"", ""texture"", ""surface"", ""skin"", ""hide"", ""fur"", ""hair"", ""beard"", ""mustache"", ""whiskers"", ""eyebrows"", ""lashes"", ""nails"", ""fingernails"
16245,Is the shirt white or green?," # shirt is the object, white and green are the properties
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""white"", ""green""]) # shirt is the object, white and green are the properties"
2595103,"In which part of the image are the cars, the bottom or the top?"," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?"," # assumes one patch
    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""How does the sand look, dry or wet?"")
    sand_patch = sand_patches[0]
    if sand_patch.simple_query(""Is the sand wet?"") == ""yes"":
        return ""wet""
    else:
        return ""dry"""
4325920,Are there fruits to the right of the banana which is on the table?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"") # crop would include the table so keep it in the query"
6376614,What color is the car in the middle?," # returns the color of the car in the middle
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    middle_patch = ImagePatch(image_patch.cropped_image, (image_patch.width / 2) - (image_patch.width / 4), (image_patch.height / 2) - (image_patch.height / 4), (image_patch.width / 2) + (image_patch.width / 4), (image_patch.height / 2) + (image_patch.height / 4))
    return middle_patch.simple_query(""What color is the car in the middle?"") # crop would include the middle so keep it in the query"
712063,What's the lamp made of?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the lamp made of?"") # crop would include the lamp so keep it in the query"
19358285,Which kind of furniture is to the right of the pillow?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
9647343,What type of material is the patio made of?," # patio
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"") # patio"
12545434,Who is wearing the suit?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the suit?"") # crop would include the suit so keep it in the query"
12894285,What is the color of the clouds in the sky?," # sky is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the clouds in the sky?"") # sky is a relation, so ask directly"
9843309,Do the flowers look orange?," # assumes only one patch
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flowers"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flowers"", ""orange"")) # crop would include the color so keep it in the query"
618996,Is there a chair or a bed in this image?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there trucks to the left of the umbrella?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
867869,What color are the pants the man is wearing?," # returns the color of the pants
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = man_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return ""no""
    return pants_patches[0].simple_query(""What color are the pants the man is wearing?"") # crop would include the pants so keep it in the query"
551601,Are there any pillows or chairs in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there women to the left of the person with the bag?"") # bag is a relation, so keep it in the query"
5925408,What is the bike in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
11328059,What type of fast food is shown in this photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of fast food is shown in this photo?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15427544,Are there either beds or desks in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)"
13778498,What type of vehicle is behind the green tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
41019603,What is the child standing on?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child standing on?"") # crop would include the object so keep it in the query"
11705574,What is the wooden item of furniture called?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wooden item of furniture called?"") # crop would include the wood so keep it in the query"
16817277,Is the man to the left or to the right of the woman?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) == 0 or len(woman_patches) == 0:
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?," # shirt is a property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for shirt_patch in shirt_patches:
        is_wearing_shirt = (shirt_patch.simple_query(""Is the person wearing the shirt?"") == ""yes"")
        if is_wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query
    # If no one is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query"
18546659,What is the fence made of?," # fence is a common object
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"") # crop would include the fence so keep it in the query"
10519192,What color is the kite that looks triangular?," # assumes only one kite patch
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    for kite_patch in kite_patches:
        if kite_patch.simple_query(""What shape is the kite?"") == ""triangular"":
            return kite_patch.simple_query(""What color is the kite?"")
    # If no triangular kite is found, query the image directly
    return image_patch.simple_query(""What color is the kite that looks triangular?"") # crop would include the shape so keep it in the query"
1672200,Who is drinking?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is drinking?"") # crop would include the drink so keep it in the query"
5703748,Is the building behind the tree white or brown?," # contains a relation (behind, in front of, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the building behind the tree white or brown?"") # crop would include the tree so keep it in the query"
5749240,Are the glove and the undershirt both black?," # returns yes or no
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    glove_patch = glove_patches[0]
    undershirt_patches = image_patch.find(""undershirt"")
    # Question assumes only one undershirt patch
    if len(undershirt_patches) == 0:
        return ""no""
    undershirt_patch = undershirt_patches[0]
    return bool_to_yesno(glove_patch.verify_property(""glove"", ""black"") and undershirt_patch.verify_property(""undershirt"", ""black"")) # crop would include the undershirt so keep it in the query"
18573157,Is the juice in a cup?," # assumes only one object
    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    if len(juice_patches) == 0:
        return ""no""
    return ""yes"" if juice_patches[0].simple_query(""Is the juice in a cup?"") == ""yes"" else ""no"""
3445929,Is the brown horse on the right side of the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the brown horse on the right side of the photo?"") # crop would include the horse so keep it in the query"
16541709,Where is the grass?," # returns the location of the grass
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"") # crop would include the grass so keep it in the query"
15764335,Are there any dogs on the tan sand?," # tan sand
    image_patch = ImagePatch(image)
    is_dog = image_patch.exists(""dog"")
    is_tan_sand = image_patch.verify_property(""sand"", ""tan"")
    return bool_to_yesno(is_dog and is_tan_sand)"
1478089,Are the door and the garage door made of the same material?," # material
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_patch = door_patches[0]
    garage_door_patches = image_patch.find(""garage door"")
    # Question assumes only one garage door patch
    if len(garage_door_patches) == 0:
        return ""no""
    garage_door_patch = garage_door_patches[0]
    door_material = door_patch.simple_query(""What material is the door made of?"")
    garage_door_material = garage_door_patch.simple_query(""What material is the garage door made of?"")
    return bool_to_yesno(door_material == garage_door_material)"
1250685,Was this picture taken in a bathroom or at a dining room?," # bathroom or dining room
    image_patch = ImagePatch(image)
    is_bathroom = image_patch.verify_property(""room"", ""bathroom"")
    is_dining_room = image_patch.verify_property(""room"", ""dining room"")
    if is_bathroom:
        return ""bathroom""
    elif is_dining_room:
        return ""dining room""
    else:
        return ""other"""
10436844,Is the zebra's nose soft and brown?," # assumes one zebra patch
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    if len(zebra_patches) == 0:
        return ""no""
    zebra_patch = zebra_patches[0]
    is_nose_soft = zebra_patch.verify_property(""nose"", ""soft"")
    is_nose_brown = zebra_patch.verify_property(""nose"", ""brown"")
    return bool_to_yesno(is_nose_soft and is_nose_brown)"
10683765,Does the shirt have blue color?," # crop would include the shirt so keep it in the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return shirt_patches[0].verify_property(""shirt"", ""blue"") # crop would include the shirt so keep it in the query"
1593352,Do the draperies look white and striped?," # returns a yes or no
    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""drapery"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    drapery_patch = drapery_patches[0]
    is_white = drapery_patch.simple_query(""Is the drapery white?"") == ""yes""
    is_striped = drapery_patch.simple_query(""Is the drapery striped?"") == ""yes""
    return bool_to_yesno(is_white and is_striped)"
16553304,Are the trunks both long and wide?," # elephant
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    trunk_patch = trunk_patches[0]
    is_long = trunk_patch.verify_property(""trunk"", ""long"")
    is_wide = trunk_patch.verify_property(""trunk"", ""wide"")
    return bool_to_yesno(is_long and is_wide)"
7165102,Is the car on the left of the photo?," # assumes one car patch
    image_patch = ImagePatch(image)
    car_patch = image_patch.find(""car"")[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    yellow_green_banana_patches = image_patch.find(""banana that looks yellow and green"")
    # Question assumes only one yellow green banana patch
    if len(yellow_green_banana_patches) == 0:
        # If no yellow green banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for yellow_green_banana_patch in yellow_green_banana_patches:
        is_short = (yellow_green_banana_patch.simple_query(""Is the banana that looks yellow and green short?"") == ""yes"")
        if is_short:
            return ""yes""
    return ""no"""
19279872,What is the man to the right of the helmet wearing?," # helmet is the object, man is the subject
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    helmet_patch = helmet_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    if helmet_patch.horizontal_center < man_patch.horizontal_center:
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    return man_patch.simple_query(""What is the man to the right of the helmet wearing?"") # crop would include the helmet so keep it in the query"
4285513,What is the color of the floor?," # returns the color of the floor
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor?"") # assumes the floor is at the bottom of the image"
3974266,Do the trousers look tan?," # tan is a color
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan"")) # tan is a color"
11595009,What are the devices to the right of the device that is to the right of the remote control?," # assumes only one remote control patch
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    right_of_remote_control = remote_control_patches[0]
    right_of_right_of_remote_control = right_of_remote_control
    for _ in range(2):
        right_of_right_of_remote_control = right_of_right_of_remote_control.find(""device"")[0]
    return right_of_right_of_remote_control.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"") # crop would include the devices so keep it in the query"
6183000,Are there nightstands or beds?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""nightstand"") or image_patch.exists(""bed"")) # or image_patch.exists(""couch"")) # or image_patch.exists(""sofa"")) # or image_patch.exists(""chair"")) # or image_patch.exists(""table"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch.exists(""shelf"")) # or image_patch"
14143982,Is it an outdoors scene?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it an outdoors scene?"")) # returns yes or no"
6123160,Are the speakers to the left of a Wii controller?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
3681634,Is the plastic fork in the top or in the bottom part of the photo?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"") # crop would include the fork so keep it in the query"
13629530,What is the vehicle on the street?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle on the street?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1718325,Are there chairs or windows in the scene?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?," # hat the man is in
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""no""
    hat_patch = hat_patches[0]
    return hat_patch.simple_query(""What color is the hat the man is in?"") # crop would include the man so keep it in the query"
1849976,What vegetables are to the left of the spoon?," # assumes only one spoon patch
    image_patch = ImagePatch(image)
    spoon_patch = image_patch.find(""spoon"")[0]
    left_patch = image_patch.crop(0, 0, spoon_patch.horizontal_center, spoon_patch.vertical_center)
    return left_patch.simple_query(""What vegetables are to the left of the spoon?"") # crop would include the spoon so keep it in the query"
14827816,Is the statue made of bronze or stone?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the statue made of bronze or stone?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
857204,What's the woman wearing?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"") # crop would include the clothing so keep it in the query"
2201105,Is the ball pink?," # ball is a general term, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball pink?"") # ball is a general term, so ask directly"
14616023,What piece of furniture are the cords in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
161027411,Are there both doors and windows in this photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?," # left or right
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    if black_car_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    striped_animal_patches = image_patch.find(""striped animal"")
    return striped_animal_patches[0].simple_query(""What is the striped animal called?"") # crop would include the stripes so keep it in the query"
1479068,Is it outdoors?," # assumes one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it outdoors?"")) # assumes one patch"
16155046,Is the dry grass below a zebra?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the dry grass below a zebra?"") # crop would include the grass and the zebra so keep it in the query"
16515071,What is the person in the water wearing?," # contains a relation (in, on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person in the water wearing?"") # crop would include the water so keep it in the query"
161015042,Who is wearing the goggles?," # goggles
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the goggles?"") # goggles"
19149868,What is pulled by the lady?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is pulled by the lady?"") # crop would include the lady so keep it in the query"
5199994,What's the man wearing?," # returns the man's clothing
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"") # crop would include the clothing so keep it in the query"
19184475,Are the man glasses on the left side of the image?," # glasses on the left
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center < man_patch.horizontal_center:
        return ""yes""
    return ""no"""
7149602,Is the shirt orange or blue?," # shirt is the object, orange and blue are the properties
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    shirt_patch = shirt_patches[0]
    shirt_color = shirt_patch.simple_query(""What color is the shirt?"")
    if shirt_color == ""orange"":
        return ""orange""
    elif shirt_color == ""blue"":
        return ""blue""
    else:
        return ""orange"" # default to orange if shirt is neither blue nor orange"
19479555,What is the person to the right of the benches holding?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the right of the benches holding?"") # crop would include the object being held so keep it in the query"
19273393,Are there both a door and a window in this photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
6481656,What is the man doing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"") # crop would include the man so keep it in the query"
13127703,What kind of drink is to the left of the bottle the woman is pouring?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"") # crop would include the bottle so keep it in the query"
2378018,What is the toilet in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8430841,Is the frisbee to the left of the guy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the frisbee to the left of the guy?"") # crop would include the guy so keep it in the query"
18616818,The man is watching who?," # contains a relation (watching, looking at, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is watching who?"") # crop would include the man so keep it in the query"
179526,Is the white dog behind a girl?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white dog behind a girl?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
21018827,Is the river murky and calm?," # river is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the river murky and calm?"") # crop would include the river so keep it in the query"
3697449,Who is wearing a shirt?," # shirt is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"") # shirt is a property, so ask directly"
3697807,Are there both a racket and a toothbrush in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?," # assumes only one car and one sign
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one car and one sign patch
    if len(car_patches) == 0 or len(sign_patches) == 0:
        # If no car or sign is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patch = sign_patches[0]
    common_property = None
    for property in [""color"", ""shape"", ""size"", ""material"", ""brand"", ""model"", ""year"", ""location"", ""orientation"", ""position""]:
        car_property = car_patch.verify_property(""car"", property)
        sign_property = sign_patch.verify_property(""sign"", property)
        if car_property and sign_property:
            common_property = property
            break
    if common_property is None:
        return ""nothing""
    return common_property"
11764476,Which place is it?," # returns the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # returns the place"
4903948,On what kind of furniture is the plate?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On what kind of furniture is the plate?"") # crop would include the plate so keep it in the query"
61022361,What is the painting that is to the left of the clock hanging on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"") # crop would include the clock so keep it in the query"
1527392,"What color is the fence, tan or black?"," # tan or black
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    return fence_patches[0].best_text_match([""tan"", ""black""]) # tan or black"
19229351,Do you see both bowls and carrots?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bowl"") and image_patch.exists(""carrot"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1297082,On which side is the silver fork?," # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        return image_patch.simple_query(""On which side is the silver fork?"")
    fork_patch = fork_patches[0]
    if fork_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16757832,Are there any blue helmets or napkins?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.verify_property(""blue helmet"", ""blue"")
    is_napkin = image_patch.verify_property(""napkin"", ""blue"")
    return bool_to_yesno(is_blue_helmet or is_napkin)"
839816,"In which part of the photo is the racket, the top or the bottom?"," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"") # crop would include the racket so keep it in the query"
12385226,Is there a mirror in the bathroom?," # bathroom is a property of the room
    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        # If no mirror is found, query the image directly
        return image_patch.simple_query(""Is there a mirror in the bathroom?"")
    return ""yes"""
18720852,Are there either blankets or tents in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
19453453,Who is wearing a shirt?," # shirt is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"") # shirt is a property, so ask directly"
19562503,Is the house in the bottom part or in the top of the photo?," # assumes one house patch
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    if len(house_patches) == 0:
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    house_patch = house_patches[0]
    if house_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the flowers that look red?"") # crop would include the red flowers so keep it in the query"
15710688,Is the shirt short sleeved or sleeveless?," # shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    if shirt_patch.simple_query(""Is the shirt short sleeved?"") == ""yes"":
        return ""short sleeved""
    else:
        return ""sleeveless"""
5533952,What are the white wires connected to?," # assumes only one patch
    image_patch = ImagePatch(image)
    white_wire_patches = image_patch.find(""white wire"")
    # Question assumes only one white wire patch
    if len(white_wire_patches) == 0:
        # If no white wire is found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    return white_wire_patches[0].simple_query(""What are the white wires connected to?"") # crop would include the connection so keep it in the query"
11313555,"What type of furniture is that, a table or a nightstand?"," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    furniture_patch = furniture_patches[0]
    if furniture_patch.width > furniture_patch.height:
        return ""table""
    else:
        return ""nightstand"""
10508893,What animals are in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in front of the trees?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14501997,What is the gate made of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the gate made of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
45624,What color is the device on top of the table?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the device on top of the table?"") # crop would include the table so keep it in the query"
181032044,Are these closed drawers?," # assumes only one patch
    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    return bool_to_yesno(drawer_patches[0].verify_property(""drawer"", ""closed"")) # crop would include the state of the drawer so keep it in the query"
383,What kind of furniture is made of wood?," # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""What material is the furniture made of?"") == ""wood"":
            return furniture_patch.simple_query(""What kind of furniture is made of wood?"")
    # If no furniture is made of wood, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is made of wood?"") # crop would include the wood so keep it in the query"
101054962,What is the person by the bananas wearing?," # crop would include the bananas so keep them in the query
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    return person_patches[0].simple_query(""What is the person by the bananas wearing?"") # crop would include the bananas so keep them in the query"
759165,What is the color of the tower in the middle of the picture?," # image is a 3D array
    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    # Question assumes only one tower patch
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    tower_patch = tower_patches[0]
    horizontal_center = image_patch.width / 2
    if tower_patch.horizontal_center > horizontal_center:
        return tower_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    else:
        return tower_patch.simple_query(""What is the color of the tower to the left of the middle of the picture?"") # crop would include the left of the middle so keep it in the query"
10775539,Is this giraffe tall and white?," # giraffe is a tall animal
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is this giraffe tall and white?"")
    giraffe_patch = giraffe_patches[0]
    is_tall = giraffe_patch.height > image_patch.height / 2
    is_white = giraffe_patch.simple_query(""What color is the giraffe?"") == ""white""
    return bool_to_yesno(is_tall and is_white)"
19981804,On which side of the photo is the colorful screen?," # left, right, or center
    image_patch = ImagePatch(image)
    colorful_screen_patches = image_patch.find(""colorful screen"")
    # Question assumes only one colorful screen patch
    if len(colorful_screen_patches) == 0:
        # If no colorful screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    colorful_screen_patch = colorful_screen_patches[0]
    if colorful_screen_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    elif colorful_screen_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""center"""
7903654,Is the tap on the left side or on the right?," # tap is a common name for a faucet
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    if tap_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
6206183,Which place is it?," # returns the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # returns the place"
15212437,Is the coat black or beige?," # assumes one patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    coat_patch = coat_patches[0]
    return coat_patch.best_text_match([""black"", ""beige""]) # crop would include the coat so keep it in the query"
13123207,Does the kite near the field look high and red?," # contains a relation (near, etc), so ask directly
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    kite_patch = kite_patches[0]
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        return ""no""
    field_patch = field_patches[0]
    is_high = kite_patch.simple_query(""Is the kite high or low?"") == ""high""
    is_red = kite_patch.simple_query(""What color is the kite?"") == ""red""
    return bool_to_yesno(is_high and is_red)"
7740092,Are there any utensils in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""utensil"")) # assumes one patch"
8774975,What is around the guy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
17728574,Do you see bananas or cookies?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see bananas or cookies?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14274506,Is the staircase different in color than the sky?," # returns yes or no
    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    # Question assumes only one staircase patch
    if len(staircase_patches) == 0:
        # If no staircase is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    staircase_patch = staircase_patches[0]
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        return ""no""
    sky_patch = sky_patches[0]
    if staircase_patch.simple_query(""What color is the staircase?"") != sky_patch.simple_query(""What color is the sky?""):
        return ""yes""
    return ""no"""
1605874,What color are the containers that are on the right?," # assumes only one container patch
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    if len(container_patches) == 0:
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center > image_patch.horizontal_center:
            return container_patch.simple_query(""What color are the containers that are on the right?"")
    return image_patch.simple_query(""What color are the containers that are on the right?"") # if no container is on the right, query the image directly"
12495781,Are the people to the right or to the left of the cone that is orange?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"") # crop would include the cone so keep it in the query"
14165681,"What type of clothing is light, the sweater or the cap?"," # light is a property
    image_patch = ImagePatch(image)
    light_patches = image_patch.find(""light"")
    # Question assumes only one light patch
    if len(light_patches) == 0:
        # If no light is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    for light_patch in light_patches:
        if light_patch.simple_query(""Is the light clothing a sweater or a cap?"") == ""sweater"":
            return ""sweater""
    return ""cap"""
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"") # crop would include the jeans so keep it in the query"
5617223,"What color is the container to the left of the horse, green or silver?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    for container_patch in container_patches:
        horse_patches = image_patch.find(""horse"")
        # Question assumes only one horse patch
        if len(horse_patches) == 0:
            # If no horse is found, query the image directly
            return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
        for horse_patch in horse_patches:
            if horse_patch.horizontal_center > container_patch.horizontal_center:
                return container_patch.simple_query(""What color is the container, green or silver?"")
    # If no container is to the left of the horse, pick the first container
    return container_patches[0].simple_query(""What color is the container, green or silver?"") # crop would include the horse so keep it in the query"
2428964,Is the water gray or teal?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the water gray or teal?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
19620769,Which place is it?," # returns the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # assumes the place is the main object in the image"
14785459,On which side of the picture is the lamp?," # left or right
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    if lamp_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    if len(brown_animal_patches) == 0:
        return ""no""
    return bool_to_yesno(brown_animal_patches[0].simple_query(""Does the brown animal look tiny?"")) # crop would include the size so keep it in the query"
5672532,Does that shirt look long sleeved?," # shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    shirt_patch = shirt_patches[0]
    return bool_to_yesno(shirt_patch.verify_property(""shirt"", ""long sleeved"")) # crop would include the sleeves so keep it in the query"
6146439,Does the box look green?," # box is a general term, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the box look green?"") # box is a general term, so ask directly"
1910285,Is the white container on the left of the image?," # assumes only one patch
    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    if len(white_container_patches) == 0:
        return ""no""
    white_container_patch = white_container_patches[0]
    if white_container_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
13362134,Is that shower curtain to the left of a toilet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
161060488,Is there any cabinet to the right of the stove?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there any cabinet to the right of the stove?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
111055042,Is the chair on the right?," # assumes one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return ""no""
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
151068,Which kind of clothing is white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of clothing is white?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
19387951,Is this place the forest or the garden?," # forest or garden
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1781695,What's on the blanket?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's on the blanket?"") # crop would include the object on the blanket so keep it in the query"
17699779,Is she on a bed?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is she on a bed?"") # crop would include the bed so keep it in the query"
464441,"What piece of furniture is the blanket on, a bed or a sofa?"," # assumes only one patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    for blanket_patch in blanket_patches:
        is_bed = blanket_patch.simple_query(""Is the blanket on a bed or a sofa?"")
        if is_bed == ""bed"":
            return ""bed""
        elif is_bed == ""sofa"":
            return ""sofa""
    # If no piece of furniture is found, query the image directly
    return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"") # crop would include the furniture so keep it in the query"
9505496,Are the wires above a man?," # contains a relation (above, below, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the wires above a man?"") # crop would include the man so keep it in the query"
4625512,What is the woman doing?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the woman doing?"")
    return woman_patches[0].simple_query(""What is the woman doing?"") # crop would include the woman so keep it in the query"
9441941,Is the woman's hair red or black?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman's hair red or black?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
2387432,What's on the table?," # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        return image_patch.simple_query(""What's on the table?"")
    return table_patches[0].simple_query(""What's on the table?"") # crop would include the table so keep it in the query"
10534717,What is the pillow on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pillow on?"") # crop would include the object so keep it in the query"
19335685,"What fruits is the container behind of, apples or bananas?"," # contains a relation (behind), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"") # crop would include the fruits so keep it in the query"
3127817,The goat is standing in what?," # surface
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The goat is standing in what?"") # surface"
1588567,Where does the man that to the right of the mirror sit?," # mirror is to the left of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    man_patch = man_patches[0]
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        return ""no""
    mirror_patch = mirror_patches[0]
    if mirror_patch.horizontal_center < man_patch.horizontal_center:
        return man_patch.simple_query(""Where does the man sit?"")
    else:
        return mirror_patch.simple_query(""Where does the man sit?"") # mirror is to the left of the man"
7399543,What is the floor made of?," # assumes one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the floor made of?"") # assumes one patch"
13741124,What kind of animal is the house behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is the house behind of?"") # crop would include the house so keep it in the query"
1174904,Is the cobblestone sidewalk both large and gray?," # cobblestone is a type of stone
    image_patch = ImagePatch(image)
    cobblestone_patches = image_patch.find(""cobblestone"")
    # Question assumes only one cobblestone patch
    if len(cobblestone_patches) == 0:
        # If no cobblestone is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    cobblestone_patch = cobblestone_patches[0]
    is_large = (cobblestone_patch.simple_query(""Is the cobblestone large?"") == ""yes"")
    is_gray = (cobblestone_patch.simple_query(""Is the cobblestone gray?"") == ""yes"")
    return bool_to_yesno(is_large and is_gray)"
13375231,What is the lettuce on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lettuce on?"") # crop would include the object so keep it in the query"
1194027,Which kind of clothing is black?," # assumes only one patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What color is the clothing?"") == ""black"":
            return clothing_patch.simple_query(""What kind of clothing is black?"")
    # If no clothing is black, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black clothing so keep it in the query"
9963477,Is the statue wearing a dress?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the statue wearing a dress?"") # crop would include the dress so keep it in the query"
1151995,Which side of the photo is the yellow vase on?," # left or right
    image_patch = ImagePatch(image)
    yellow_vase_patches = image_patch.find(""yellow vase"")
    # Question assumes only one yellow vase patch
    if len(yellow_vase_patches) == 0:
        # If no yellow vase is found, query the image directly
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    yellow_vase_patch = yellow_vase_patches[0]
    if yellow_vase_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
712821,What is common to the bear and the belt?," # common to two objects
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    belt_patches = image_patch.find(""belt"")
    # Question assumes only one belt patch
    if len(belt_patches) == 0:
        return ""no""
    common_property = None
    for property in [""brown"", ""leather"", ""metal"", ""red"", ""blue"", ""green"", ""yellow"", ""black"", ""white"", ""gray"", ""tan"", ""beige"", ""brown"", ""tan"", ""beige"", ""gray"", ""black"", ""white"", ""blue"", ""green"", ""yellow"", ""red"", ""metal"", ""leather"", ""wood"", ""plastic"", ""cotton"", ""wool"", ""silk"", ""linen"", ""polyester"", ""nylon"", ""spandex"", ""elastane"", ""cork"", ""rubber"", ""vinyl"", ""aluminum"", ""copper"", ""brass"", ""bronze"", ""iron"", ""steel"", ""gold"", ""silver"", ""platinum"", ""titanium"", ""zinc"", ""tin"", ""lead"", ""mercury"", ""cadmium"", ""bismuth"", ""antimony"", ""arsenic"", ""selenium"", """
1757418,What is the vehicle to the right of the car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle to the right of the car?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
7624100,Are the trunks that are gray wet and large?," # elephant
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunk_patches:
        is_gray = trunk_patch.simple_query(""Is the trunk gray, brown, or black?"")
        is_wet = trunk_patch.simple_query(""Is the trunk wet or dry?"")
        is_large = trunk_patch.simple_query(""Is the trunk large or small?"")
        if is_gray == ""gray"" and is_wet == ""wet"" and is_large == ""large"":
            return ""yes""
    return ""no"""
1125474,"On which side of the photo is the iron fence, the right or the left?"," # assumes one iron fence patch
    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    if len(iron_fence_patches) == 0:
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    iron_fence_patch = iron_fence_patches[0]
    if iron_fence_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1300375,What is the name of the item of furniture that the printer is on?," # contains a relation (on, in, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"") # crop would include the printer so keep it in the query"
5925196,What's the building covered by?," # assumes only one building patch
    image_patch = ImagePatch(image)
    building_patch = image_patch.find(""building"")
    if len(building_patch) == 0:
        return image_patch.simple_query(""What's the building covered by?"")
    return building_patch[0].simple_query(""What's the building covered by?"") # crop would include the covering so keep it in the query"
1948055,What watercraft is the white rope tying?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What watercraft is the white rope tying?"") # crop would include the rope so keep it in the query"
8540582,What kind of animal is in front of the leafy trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"") # crop would include the trees so keep it in the query"
3719411,What does the walking woman by the bus wear?," # bus is in the background
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    return woman_patches[0].simple_query(""What does the walking woman by the bus wear?"") # crop would include the bus so keep it in the query"
1129508,Is the controller to the left of a pillow?," # assumes only one patch
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        # Question assumes only one pillow patch
        if len(pillow_patches) == 0:
            return ""no""
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > controller_patch.horizontal_center:
                return ""yes""
    return ""no"""
18664084,Is there any sheep by the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there any sheep by the fence?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
6912079,What animal is this?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is this?"")
    return animal_patches[0].simple_query(""What animal is this?"") # crop would include the animal so keep it in the query"
3412029,Where is the person?," # returns the location of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person?"")
    return person_patches[0].simple_query(""Where is the person?"") # crop would include the person so keep it in the query"
14161122,What animal is in the water?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"") # crop would include the water so keep it in the query"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15699496,What is the cup that looks clean made of?," # assumes only one cup patch
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    for cup_patch in cup_patches:
        if cup_patch.simple_query(""Is the cup clean?"") == ""yes"":
            return cup_patch.simple_query(""What is the cup made of?"")
    # If no clean cup is found, query the image directly
    return image_patch.simple_query(""What is the cup that looks clean made of?"") # crop would include the cleanliness so keep it in the query"
12765451,What animals are to the right of the ladder?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are to the right of the ladder?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
191044307,What animal is black?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is black?"") # crop would include the black so keep it in the query"
12639181,Who is wearing shorts?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query"
10630949,Is the person that is not male wearing an elbow pad?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""What is the gender of the person?"") != ""male"":
            return bool_to_yesno(person_patch.verify_property(""person"", ""elbow pad""))
    return ""no"""
14544602,What is the boy holding?," # assumes only one boy patch
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    return boy_patch.simple_query(""What is the boy holding?"") # crop would include the object being held so keep it in the query"
2986699,Of what material the dish?," # material
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Of what material the dish?"") # material"
161013513,What kind of animal is on the street?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is on the street?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15143936,What animal is before the roof?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is before the roof?"") # crop would include the roof so keep it in the query"
1955043,Who is playing with the ball?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing with the ball?"") # crop would include the ball so keep it in the query"
91044150,What is the name of the animals in front of the trees beside the river?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13483129,What kind of fruit is hanging?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is hanging?"") # crop would include the hanging so keep it in the query"
7317299,What is under the bush?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is under the bush?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
17432396,Are there kangaroos or birds in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""kangaroo"") or image_patch.exists(""bird"")) # crop would include the bird so keep it in the query"
10457241,What is the color of the trousers?," # returns the color of the trousers
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"") # crop would include the color so keep it in the query"
2913850,Is the placemat in the bottom or in the top part?," # bottom or top
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?," # assumes only one object covered with blanket
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered with blanket?"") # crop would include the blanket so keep it in the query"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"") # crop would include the sweater so keep it in the query"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?"," # assumes only one desk patch
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    if len(desk_patches) == 0:
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    desk_patch = desk_patches[0]
    if desk_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)"
19737232,Is the book on the right of the picture?," # assumes one book patch
    image_patch = ImagePatch(image)
    book_patch = image_patch.find(""book"")[0]
    return bool_to_yesno(book_patch.horizontal_center > image_patch.width / 2)"
475064,Who is wearing the glasses?," # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query"
8594579,Is there a woman to the right of the orange object that is to the right of the person?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14602992,Which side of the image is the couch on?," # left or right
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which side of the image is the couch on?"") # left or right"
9944587,How tall is the man that is wearing a shirt?," # height
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    man_patch = man_patches[0]
    if man_patch.verify_property(""man"", ""wearing a shirt""):
        return man_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    return man_patch.simple_query(""How tall is the man?"") # crop would include the shirt so keep it in the query"
13736712,Are there any giraffes?," # giraffe
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe"")) # giraffe is the same as giraffe"
6996118,The young girl is wearing what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The young girl is wearing what?"") # crop would include the girl so keep it in the query"
19992576,Is the basket on the floor small and brown?," # returns yes or no
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    basket_patch = basket_patches[0]
    if basket_patch.horizontal_center < image_patch.horizontal_center and basket_patch.horizontal_center > image_patch.horizontal_center - image_patch.width / 2 and basket_patch.vertical_center < image_patch.vertical_center and basket_patch.vertical_center > image_patch.vertical_center - image_patch.height / 2:
        if basket_patch.width < image_patch.width / 2 and basket_patch.height < image_patch.height / 2:
            if basket_patch.simple_query(""What color is the basket?"") == ""brown"":
                return ""yes""
    return ""no"""
17332401,What is the boy in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15586294,Which side is the leather armchair on?," # assumes one armchair patch
    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""leather armchair"")
    if len(armchair_patches) == 0:
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    return ""left"" if armchair_patches[0].horizontal_center < image_patch.width / 2 else ""right"""
15658324,What is the horse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patch = image_patch.find(""man"")[0]
    controller_color = man_patch.simple_query(""What color is the controller the man is holding?"")
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        furniture_color = furniture_patch.simple_query(""What color is the furniture?"")
        if furniture_color == controller_color:
            return furniture_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    # If no furniture has the same color as the controller, pick the first furniture
    return furniture_patches[0].simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"") # crop would include the controller so keep it in the query"
2531874,Who is playing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"") # crop would include the playing so keep it in the query"
3112009,Is the plate on the left side?," # assumes only one plate patch
    image_patch = ImagePatch(image)
    plate_patch = image_patch.find(""plate"")[0]
    return bool_to_yesno(plate_patch.horizontal_center < image_patch.horizontal_center)"
1527613,On which side of the picture is the bag?," # left or right
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?," # road and roof are assumed to be the same width
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""Are both the road and the roof the same color?"")
    road_patch = road_patches[0]
    roof_patches = image_patch.find(""roof"")
    # Question assumes only one roof patch
    if len(roof_patches) == 0:
        return ""yes""
    roof_patch = roof_patches[0]
    return bool_to_yesno(road_patch.simple_query(""What color is the road?"") == roof_patch.simple_query(""What color is the roof?"")) # crop would include the road and roof so keep it in the query"
161027384,What is the green rug hanging on?," # contains a relation (hanging on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the green rug hanging on?"") # crop would include the hanging so keep it in the query"
14153714,Who is using the laptop?," # contains a relation (using, on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is using the laptop?"") # crop would include the laptop so keep it in the query"
1969500,Who in the photo is standing?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who in the photo is standing?"") # crop would include the standing so keep it in the query"
693318,Do you see any plates in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate"")) # returns yes or no"
19613394,The person on the skateboard is wearing what?," # returns the color of the shirt
    image_patch = ImagePatch(image)
    person_on_skateboard_patches = image_patch.find(""person on a skateboard"")
    # Question assumes only one person on a skateboard patch
    if len(person_on_skateboard_patches) == 0:
        # If no person on a skateboard is found, query the image directly
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    shirt_patches = person_on_skateboard_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no shirt""
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""red"", ""blue"", ""white"", ""black"", ""green"", ""yellow"", ""orange"", ""purple""]) # add more colors as needed"
19927237,Is the blue car in front of the white van?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue car in front of the white van?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
31054022,What is the box sitting on?," # contains a relation (on, next to, in front of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the box sitting on?"") # crop would include the object it is sitting on so keep it in the query"
17634413,Does the ground look snowy and brown?," # ground is a general term
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Does the ground look snowy and brown?"")
    ground_patch = ground_patches[0]
    is_snowy = ground_patch.verify_property(""ground"", ""snowy"")
    is_brown = ground_patch.verify_property(""ground"", ""brown"")
    return bool_to_yesno(is_snowy and is_brown)"
15185768,Does the sky look blue and clear?," # returns yes or no
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Does the sky look blue and clear?"") # crop would include the sky so keep it in the query
    return bool_to_yesno(sky_patches[0].simple_query(""Is the sky blue and clear?"")) # crop would include the sky so keep it in the query"
1589160,Does the person that is sitting lean against a fire hydrant?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"") # crop would include the sitting and the fire hydrant so keep it in the query"
2142522,Are there any shopping carts or mannequins in this photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)"
17362234,Are there cages or scrub brushes in this picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cage"") or image_patch.exists(""scrub brush"")) # or operator is used to check for either"
4955854,Is the lamp below the chain?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the lamp below the chain?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
10463545,Is the computer to the right of the other computer silver or black?," # assumes only one patch per object
    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    # Question assumes only one computer patch
    if len(computer_patches) == 0:
        # If no computer is found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    for computer_patch in computer_patches:
        other_computer_patches = image_patch.find(""computer"")
        for other_computer_patch in other_computer_patches:
            if other_computer_patch.horizontal_center < computer_patch.horizontal_center:
                return computer_patch.best_text_match([""silver"", ""black""])
    return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"") # if no other computer is found, query the image directly"
2265037,What is the girl wearing?," # returns the clothing item
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"") # crop would include the clothing so keep it in the query"
15485146,Are there any blue numbers or letters?," # returns yes or no
    image_patch = ImagePatch(image)
    blue_number_patches = image_patch.find(""blue number"")
    blue_letter_patches = image_patch.find(""blue letter"")
    return bool_to_yesno(len(blue_number_patches) > 0 or len(blue_letter_patches) > 0)"
3483992,Is the long bus to the left or to the right of the person with the backpack?," # bus is long, backpack is small
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one bus patch and one backpack patch
    if len(bus_patches) == 0 or len(backpack_patches) == 0:
        # If no bus or backpack is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    bus_patch = bus_patches[0]
    backpack_patch = backpack_patches[0]
    if bus_patch.horizontal_center < backpack_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
13598461,What is the device that is not on called?," # assumes only one device patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    for device_patch in device_patches:
        if not device_patch.verify_property(""device"", ""on""):
            return device_patch.simple_query(""What is the device that is not on called?"") # crop would include the device so keep it in the query
    # If all devices are on, pick the first device
    return device_patches[0].simple_query(""What is the device that is not on called?"") # crop would include the device so keep it in the query"
13885436,The sky has what color?," # sky is a general term
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"") # sky is a general term"
7432467,Is the black container to the left of the man that is on the motorcycle?," # assumes only one man and one motorcycle
    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        # If no black container is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    for black_container_patch in black_container_patches:
        man_patches = image_patch.find(""man on motorcycle"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            return ""no""
        man_patch = man_patches[0]
        if black_container_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
19540096,Is the fire in an oven?," # contains a relation (in, on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the fire in an oven?"") # crop would include the oven so keep it in the query"
18291107,The horse is where?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The horse is where?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5435474,Is the man that is to the left of the motorbike wearing a hat?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"") # crop would include the hat so keep it in the query"
226307,Are there any tables in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table"")) # returns yes or no"
1944826,Who is reflected in the mirror?," # mirror is a reflective surface
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is reflected in the mirror?"") # mirror is a reflective surface, so ask directly"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    woman_patch = woman_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    if len(cooking_utensil_patches) == 0:
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    for cooking_utensil_patch in cooking_utensil_patches:
        if cooking_utensil_patch.horizontal_center > woman_patch.horizontal_center:
            if cooking_utensil_patch.vertical_center > image_patch.vertical_center / 2:
                return cooking_utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    return cooking_utensil_patches[0].simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"") # crop would include the stove and the woman so keep it in the query"
18435846,What is the color of the balloon that is to the right of the backpack?," # balloon and backpack are assumed to be found
    image_patch = ImagePatch(image)
    balloon_patches = image_patch.find(""balloon"")
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one balloon patch and one backpack patch
    if len(balloon_patches) == 0 or len(backpack_patches) == 0:
        # If no balloon or backpack is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    balloon_patch = balloon_patches[0]
    backpack_patch = backpack_patches[0]
    if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
        return balloon_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    else:
        return backpack_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"") # crop would include the backpack so keep it in the query"
8390894,Is the woman to the right of the man sitting on a sofa?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"") # crop would include the sofa so keep it in the query"
18896007,Which side of the image is the pot on?," # left or right
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
19323898,Is that pillow on a couch?," # assumes only one patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is that pillow on a couch?"")
    for pillow_patch in pillow_patches:
        is_on_couch = pillow_patch.simple_query(""Is the pillow on a couch?"") == ""yes""
        if is_on_couch:
            return ""yes""
    return ""no"""
1281034,Where are the trees?," # returns the horizontal center of the trees
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Where are the trees?"")
    return tree_patches[0].simple_query(""Where are the trees?"") # crop would include the tree so keep it in the query"
13515147,What is on the cow?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the cow?"") # crop would include the object on the cow so keep it in the query"
91036716,What is the skater doing?," # assumes only one skater patch
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    if len(skater_patches) == 0:
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"") # crop would include the action so keep it in the query"
17791510,What is the person to the left of the boy carrying?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the left of the boy carrying?"") # crop would include the object being carried so keep it in the query"
13152020,Is the ground wet or dry?," # ground is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ground wet or dry?"") # ground is a noun, so ask directly"
19312096,"On which side is the purse, the left or the right?"," # assumes only one purse patch
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) == 0:
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    purse_patch = purse_patches[0]
    if purse_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bread"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
9113663,Do you see either any snow or sand that are white?," # snow and sand are white
    image_patch = ImagePatch(image)
    is_snow = image_patch.exists(""snow"")
    is_sand = image_patch.exists(""sand"")
    return bool_to_yesno(is_snow or is_sand)"
10243612,Which place is it?," # returns the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # returns the place"
555062,What vegetable is to the left of the napkin?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15599523,Is the dog on the right side?," # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    if len(dog_patches) == 0:
        return ""no""
    return bool_to_yesno(dog_patches[0].horizontal_center > image_patch.horizontal_center)"
101019673,What is the man wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"") # crop would include the clothing so keep it in the query"
333047,Do you see any men to the right of the orange tent?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any men to the right of the orange tent?"") # crop would include the tent so keep it in the query"
13907796,Is the shirt striped and green?," # shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    shirt_patch = shirt_patches[0]
    is_striped = shirt_patch.simple_query(""Is the shirt striped?"") == ""yes""
    is_green = shirt_patch.simple_query(""Is the shirt green?"") == ""yes""
    return bool_to_yesno(is_striped and is_green)"
17207604,Are there either bottles or shelves?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
7165131,Is that train engine small or large?," # assumes only one train engine patch
    image_patch = ImagePatch(image)
    train_engine_patches = image_patch.find(""train engine"")
    if len(train_engine_patches) == 0:
        return image_patch.simple_query(""Is that train engine small or large?"")
    train_engine_patch = train_engine_patches[0]
    if train_engine_patch.width < 100 or train_engine_patch.height < 100:
        return ""small""
    else:
        return ""large"""
21049362,Where are the railroad tracks?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"") # crop would include the tracks so keep it in the query"
6224352,What is the animal looking at?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal looking at?"") # crop would include the object so keep it in the query"
14367593,What are the children playing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the children playing?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
598297,Are there combs or figurines in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)"
16409127,What is the wire on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"") # crop would include the object on so keep it in the query"
5841062,Is the tunnel small or large?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tunnel small or large?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
17560468,Do you see trains or windows?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?," # near
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the person near the man wearing?"") # near"
12352375,Is the vehicle that is sitting down black or blue?," # contains a relation (sitting down), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"") # crop would include the sitting down so keep it in the query"
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5800248,Is it outdoors?," # assumes one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it outdoors?"")) # assumes one patch"
4604785,Does the pizza slice to the left of the pizza have large size?," # assumes only one pizza patch
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    for pizza_patch in pizza_patches:
        left_pizza_patch = pizza_patch.crop(0, 0, pizza_patch.width // 2, pizza_patch.height)
        right_pizza_patch = pizza_patch.crop(pizza_patch.width // 2, 0, pizza_patch.width, pizza_patch.height)
        if left_pizza_patch.simple_query(""What size is the pizza slice to the left of the pizza?"") == ""large"":
            return ""yes""
    return ""no"""
15185845,What's the man wearing?," # returns the man's clothing
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"") # crop would include the clothing so keep it in the query"
2282232,Where is the snow?," # returns the location of the snow
    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    # Question assumes only one snow patch
    if len(snow_patches) == 0:
        # If no snow is found, query the image directly
        return image_patch.simple_query(""Where is the snow?"")
    snow_patch = snow_patches[0]
    if snow_patch.horizontal_center == image_patch.horizontal_center:
        return ""below""
    elif snow_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
7889197,Who is wearing a shirt?," # shirt is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"") # shirt is a property, so ask directly"
11292587,Are there either any blankets or pictures in the photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)"
154682,Where does the bird stand on?," # assumes one bird patch
    image_patch = ImagePatch(image)
    bird_patch = image_patch.find(""bird"")[0]
    return bird_patch.simple_query(""Where does the bird stand on?"") # crop would include the object so keep it in the query"
10435315,Is the man holding a racket?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    is_holding_racket = (man_patch.simple_query(""Is the man holding a racket?"") == ""yes"")
    return bool_to_yesno(is_holding_racket)"
121035887,Do the man shorts have white color?," # man shorts
    image_patch = ImagePatch(image)
    man_shorts_patches = image_patch.find(""man shorts"")
    # Question assumes only one man shorts patch
    if len(man_shorts_patches) == 0:
        # If no man shorts are found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    return man_shorts_patches[0].verify_property(""man shorts"", ""white"") # crop would include the color so keep it in the query"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"") # crop would include the man and cows so keep them in the query"
19659501,What is the color of the umbrella the bird is on?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the umbrella the bird is on?"") # crop would include the bird so keep it in the query"
10595217,Where is the grass?," # returns the location of the grass
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"") # crop would include the grass so keep it in the query"
14803743,Which kind of clothing is black?," # assumes only one patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What color is the clothing?"") == ""black"":
            return clothing_patch.simple_query(""What kind of clothing is black?"")
    # If no clothing is black, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black clothing so keep it in the query"
19743238,Is the man on the right side?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.width / 2:
        return ""yes""
    return ""no"""
3965204,Are the mountains covered with snow?," # returns yes or no
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    mountain_patch = mountain_patches[0]
    return bool_to_yesno(mountain_patch.verify_property(""mountain"", ""snow"")) # Differs from 'exists' in that it presupposes the existence of the object specified by object_name, instead checking whether the object possesses the property"
141024710,Are there both windows and cars in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?," # shirt is the object of interest
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    shirt_patch = shirt_patches[0]
    shirt_color = shirt_patch.simple_query(""What color do you think the shirt is?"")
    return shirt_color"
3623367,What's he doing?," # assumes one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's he doing?"") # crop would include the action so keep it in the query"
15634950,Where is the giraffe in front of the hay eating from?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"") # crop would include the eating so keep it in the query"
16644500,What animal is the log pulled by?," # contains a relation (pulled by), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the log pulled by?"") # crop would include the log so keep it in the query"
3202108,Which side is the car on?," # left or right
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
10137201,Are the papers in the bottom part of the picture?," # bottom
    image_patch = ImagePatch(image)
    papers_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(papers_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    if papers_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?," # assumes only one patch
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    boy_patch = boy_patches[0]
    leftmost_patch = None
    for patch in image_patch.find(""person""):
        if leftmost_patch is None or patch.horizontal_center < leftmost_patch.horizontal_center:
            leftmost_patch = patch
    if boy_patch.horizontal_center < leftmost_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8438091,The picture is what color?," # returns the color of the picture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The picture is what color?"") # returns the color of the picture"
4325939,On which side of the photo is the banana?," # left, right
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
1425189,What is the name of the brown piece of furniture?," # assumes only one patch
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown piece of furniture"")
    if len(brown_patches) == 0:
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return brown_patches[0].simple_query(""What is the name of the brown piece of furniture?"") # crop would include the brown color so keep it in the query"
5119962,Is the man to the right of glasses?," # glasses is a relation
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if man_patches[0].horizontal_center > glasses_patch.horizontal_center:
        return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    toilet_patch = toilet_patches[0]
    lid_position = toilet_patch.simple_query(""Is the toilet lid down or up?"")
    return lid_position"
6522554,Which kind of device does the man hold?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patch = image_patch.find(""man"")[0]
    device_patches = man_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return man_patch.simple_query(""Which kind of device does the man hold?"")
    return device_patches[0].simple_query(""Which kind of device does the man hold?"") # crop would include the device so keep it in the query"
870619,What is the device to the left of the person that is to the left of the television?," # assumes only one patch for each object
    image_patch = ImagePatch(image)
    patches = image_patch.find(""television"")
    if len(patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    for patch in patches:
        patches = image_patch.find(""person"")
        for patch in patches:
            if patch.horizontal_center > patch2.horizontal_center:
                patches = image_patch.find(""device"")
                for patch in patches:
                    if patch.horizontal_center > patch2.horizontal_center:
                        return patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"") # if no device is found, query the image directly"
12713794,Does the woman to the left of the man wear a necklace?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < man_patch.horizontal_center:
            return bool_to_yesno(woman_patch.verify_property(""woman"", ""necklace""))
    return ""no"""
824070,What is the man doing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"") # crop would include the man so keep it in the query"
11593733,Which kind of furniture is right to the pillow?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is right to the pillow?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
3357821,Does the dog to the left of the other dog look small or large?," # assumes only two dogs
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If no two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog_patch = dog_patches[0]
    right_dog_patch = dog_patches[1]
    if left_dog_patch.horizontal_center < right_dog_patch.horizontal_center:
        return left_dog_patch.simple_query(""Does the dog look small or large?"")
    else:
        return right_dog_patch.simple_query(""Does the dog look small or large?"") # crop would include the other dog so keep it in the query"
338026,Are the white candles short or tall?," # assumes only one patch
    image_patch = ImagePatch(image)
    white_candle_patches = image_patch.find(""white candle"")
    # Question assumes only one white candle patch
    if len(white_candle_patches) == 0:
        # If no white candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    white_candle_patch = white_candle_patches[0]
    height = white_candle_patch.height
    if height < 50:
        return ""short""
    elif height > 100:
        return ""tall""
    else:
        return ""medium"""
15346232,What kind of fruit is the girl holding?," # contains a relation (holding, eating, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is the girl holding?"") # crop would include the fruit so keep it in the query"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?"," # assumes only one yellow vehicle
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    if len(yellow_vehicle_patches) == 0:
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    yellow_vehicle_patch = yellow_vehicle_patches[0]
    if yellow_vehicle_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
81030271,Is the gray car to the right or to the left of the cart?," # assumes only one gray car and one cart
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    cart_patches = image_patch.find(""cart"")
    if len(gray_car_patches) == 0 or len(cart_patches) == 0:
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    gray_car_patch = gray_car_patches[0]
    cart_patch = cart_patches[0]
    if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"") # crop would include the canister so keep it in the query"
8240699,What animal is in front of the bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the bird?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
10105081,Is the fence white or green?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the fence white or green?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13613689,Is there a train or a fence in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a train or a fence in the picture?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
10662521,What is the bottle made of?," # bottle is made of
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"") # crop would include the bottle so keep it in the query"
1152309,Which kind of fruit is on the plate?," # assumes only one plate patch
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    if len(fruit_patches) == 0:
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    return fruit_patches[0].simple_query(""Which kind of fruit is on the plate?"") # crop would include the plate so keep it in the query"
16701575,What device is to the right of the cake?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is to the right of the cake?"") # crop would include the cake so keep it in the query"
6572516,What material is the ceiling?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"") # crop would include the ceiling so keep it in the query"
11213633,Are there both magazines and umbrellas?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?," # assumes a square image
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    middle_x = image_patch.width / 2
    middle_y = image_patch.height / 2
    for egg_patch in egg_patches:
        if abs(egg_patch.horizontal_center - middle_x) < 50 and abs(egg_patch.vertical_center - middle_y) < 50:
            return egg_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    # If no egg is in the middle, pick the first egg
    return egg_patches[0].simple_query(""What is the color of the egg in the middle of the picture?"") # crop would include the middle so keep it in the query"
14371534,Are the gold pans on the right part or on the left?," # assumes only one gold pan patch
    image_patch = ImagePatch(image)
    gold_pan_patches = image_patch.find(""gold pan"")
    if len(gold_pan_patches) == 0:
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    gold_pan_patch = gold_pan_patches[0]
    if gold_pan_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16538076,What does the man that is not tall wear?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if man_patch.simple_query(""Is the man tall?"") == ""no"":
            return man_patch.simple_query(""What is the man wearing?"")
    # If no man is not tall, pick the first man
    return man_patches[0].simple_query(""What is the man wearing?"") # crop would include the man so keep it in the query"
5483644,"On which side is the woman, the left or the right?"," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?," # returns the answer to ""What is this?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this?"") # returns the answer to ""What is this?"" if no question is provided"
1290926,Are there either any life vests or flags?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)"
18273738,Do you see a cup?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cup"")) # returns yes or no"
4211922,Who is sitting on the table?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is sitting on the table?"") # crop would include the table so keep it in the query"
6587526,What is the color of the girl to the left of the other girl?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"") # crop would include the other girl so keep it in the query"
6599090,What is the person to the right of the car holding?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the right of the car holding?"") # crop would include the car so keep it in the query"
1174895,What is the vehicle in the parking lot?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle in the parking lot?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14755158,Who is the woman in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the woman in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18349161,Where does the cow that is standing stand?," # assumes only one cow patch
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    return cow_patches[0].simple_query(""Where does the cow that is standing stand?"") # crop would include the standing so keep it in the query"
7472884,On which side is the tap?," # left or right
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    if tap_patches[0].horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
111051831,On which side of the image is the cabinet?," # left, right
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""left"""
3590007,On which side of the image is the fork?," # left or right
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    if fork_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"") # crop would include the bag so keep it in the query"
577862,Are the artwork and the computer desk made of the same material?," # returns yes or no
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    artwork_patch = artwork_patches[0]
    computer_desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one computer desk patch
    if len(computer_desk_patches) == 0:
        return ""no""
    computer_desk_patch = computer_desk_patches[0]
    return bool_to_yesno(artwork_patch.verify_property(""artwork"", ""material"") and computer_desk_patch.verify_property(""computer desk"", ""material"")) # assumes only one material"
14298125,Who is playing Wii?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"") # crop would include the Wii so keep it in the query"
9382689,What's the floor made of?," # assumes one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the floor made of?"") # assumes one patch"
12889614,Who is wearing the dress?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the dress?"") # crop would include the dress so keep it in the query"
15127108,Does the tea pot above the receipt look short and white?," # receipt is a special case
    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    # Question assumes only one tea pot patch
    if len(tea_pot_patches) == 0:
        # If no tea pot is found, query the image directly
        return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")
    tea_pot_patch = tea_pot_patches[0]
    receipt_patches = image_patch.find(""receipt"")
    # Question assumes only one receipt patch
    if len(receipt_patches) == 0:
        return ""no""
    receipt_patch = receipt_patches[0]
    if tea_pot_patch.horizontal_center > receipt_patch.horizontal_center:
        return ""no""
    return bool_to_yesno(tea_pot_patch.simple_query(""Is the tea pot short and white?"")) # crop would include the receipt so keep it in the query"
15632653,Which room is it?," # assumes one room patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
485962,Which kind of clothing is black?," # assumes only one patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What color is the clothing?"") == ""black"":
            return clothing_patch.simple_query(""What kind of clothing is black?"")
    # If no clothing is black, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black clothing so keep it in the query"
490992,Is the fence on the left side or on the right of the picture?," # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?," # mountain is a general term, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do the mountains look rocky?"") # mountain is a general term, so ask directly"
17573742,Is the woman to the right of the camera wearing a coat?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
3395780,Is the vehicle to the left of the parking meter covered in rain?," # returns yes or no
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    for vehicle_patch in vehicle_patches:
        parking_meter_patches = image_patch.find(""parking meter"")
        # Question assumes only one parking meter patch
        if len(parking_meter_patches) == 0:
            return ""no""
        if vehicle_patch.horizontal_center < parking_meter_patch.horizontal_center:
            return bool_to_yesno(vehicle_patch.verify_property(""vehicle"", ""rain""))
    return ""no"""
1542668,Is there a black laptop or desk?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a black laptop or desk?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1655442,What type of food is to the right of the waffles that are to the right of the person?," # assumes only one patch
    image_patch = ImagePatch(image)
    waffles_patches = image_patch.find(""waffles"")
    # Question assumes only one waffles patch
    if len(waffles_patches) == 0:
        # If no waffles are found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for waffles_patch in waffles_patches:
        if waffles_patch.horizontal_center > image_patch.horizontal_center:
            return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
        food_patches = image_patch.find(""food"")
        # Question assumes only one food patch
        if len(food_patches) == 0:
            return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
        for food_patch in food_patches:
            if food_patch.horizontal_center > waffles_patch.horizontal_center:
                return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"") # if no food is found, query the image directly"
395290,How large is the bag?," # returns the size of the bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"") # crop would include the bag so keep it in the query"
16138893,Are there both motorcycles and cars in this scene?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query"
171032184,What hangs from the windows?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15962394,Are there both spoons and plates in the image?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8197176,What color is the jacket that the man wears?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = man_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return ""no""
    jacket_patch = jacket_patches[0]
    return jacket_patch.simple_query(""What color is the jacket that the man wears?"") # crop would include the man so keep it in the query"
3440931,What are that pieces of furniture called?," # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are that pieces of furniture called?"") # crop would include the furniture so keep it in the query"
337924,What is the fruit that is to the left of the chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
16208211,What do you think are the bowls on?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think are the bowls on?"") # crop would include the object so keep it in the query"
18330260,Is the sky above the trees open and clear?," # sky is above the trees
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky open and clear?"") # sky is above the trees, so no need to specify the relation"
14119691,Does the squirrel to the right of the stuffed dog look white?," # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""stuffed dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for dog_patch in dog_patches:
        squirrel_patches = image_patch.find(""squirrel"")
        # Question assumes only one squirrel patch
        if len(squirrel_patches) == 0:
            return ""no""
        for squirrel_patch in squirrel_patches:
            if squirrel_patch.horizontal_center > dog_patch.horizontal_center:
                return bool_to_yesno(squirrel_patch.verify_property(""squirrel"", ""white""))
    return ""no"""
18437694,Does the clock to the right of the statue have gold color and tiny size?," # assumes only one clock patch
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Does the clock to the right of the statue have gold color and tiny size?"")
    for clock_patch in clock_patches:
        statue_patches = image_patch.find(""statue"")
        # Question assumes only one statue patch
        if len(statue_patches) == 0:
            return ""no""
        for statue_patch in statue_patches:
            if clock_patch.horizontal_center > statue_patch.horizontal_center:
                return bool_to_yesno(clock_patch.verify_property(""clock"", ""gold"") and clock_patch.verify_property(""clock"", ""tiny""))
    return ""no"""
1252960,Where was the photo taken?," # returns the location
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"") # assumes the location is in the image"
17454895,Is there a frisbee on the grass?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a frisbee on the grass?"") # crop would include the grass so keep it in the query"
13180513,Are there either cakes or containers in the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?," # assumes only one police officer patch
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    for blue_car_patch in blue_car_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < police_patch.horizontal_center:
                return ""left""
        police_patches = image_patch.find(""police officer"")
        for police_patch in police_patches:
            if blue_car_patch.horizontal_center < vehicle_patch.horizontal_center:
                return ""behind""
            else:
                return ""front""
    return ""front"""
5785831,What is in the glass?," # contains a relation (in, on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the glass?"") # crop would include the glass so keep it in the query"
19246241,Are there any brown benches or buckets?," # returns yes or no
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_bucket = image_patch.exists(""bucket"")
    return bool_to_yesno(is_brown_bench or is_bucket)"
3243803,"Where in the picture is the spoon, on the right or on the left?"," # assumes only one spoon patch
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
6952486,Does the shirt look white?," # shirt is the object, white is the property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white"")) # shirt is the object, white is the property"
17401425,Is there a bag that is not brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if bag_patch.simple_query(""What color is the bag?"") != ""brown"":
            return ""yes""
    return ""no"""
481240,"Which kind of furniture is large, the shelf or the cupboard?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8531943,Are there any screens or bags?," # returns yes or no
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)"
1969545,What is she wearing?," # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    return woman_patches[0].simple_query(""What is she wearing?"") # crop would include the clothing so keep it in the query"
91045271,"Which appliance is not white, the freezer or the ice maker?"," # freezer and ice maker are both white
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    for appliance_patch in appliance_patches:
        if appliance_patch.simple_query(""Is the appliance white?"") == ""no"":
            return appliance_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    return ""freezer"" # if all appliances are white, return the first one"
1051870,Are there chairs or tables that are not green?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    table_patches = image_patch.find(""table"")
    is_green = image_patch.verify_property(""chair"", ""green"") or image_patch.verify_property(""table"", ""green"")
    return bool_to_yesno(not is_green) # returns yes if not green, no if green"
1366363,Does the taxi have a different color than the truck?," # taxi and truck are assumed to be the only vehicles
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one taxi and one truck patch
    if len(taxi_patches) == 0 or len(truck_patches) == 0:
        # If no taxi or truck is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    taxi_patch = taxi_patches[0]
    truck_patch = truck_patches[0]
    taxi_color = taxi_patch.simple_query(""What color is the taxi?"")
    truck_color = truck_patch.simple_query(""What color is the truck?"")
    return bool_to_yesno(taxi_color != truck_color)"
5460839,In which part of the image is the dog?," # horizontal_center
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    if dog_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif dog_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
18899476,What type of vegetable is to the right of the rice that is on the plate?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8606903,What food item is not wide?," # assumes only one food item
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food item"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if food_patch.width < image_patch.width / 2:
            return food_patch.simple_query(""What food item is not wide?"")
    # If no food is wide, pick the first food
    return food_patches[0].simple_query(""What food item is not wide?"") # crop would include the width so keep it in the query"
18394861,Are there any folding chairs or skateboards?," # returns yes or no
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there an elephant near the pond?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1575941,Which place is it?," # returns the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # returns the place"
9725865,What is the color of the floor that the desk is on top of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"") # crop would include the floor so keep it in the query"
16654241,Is the TV on the left or on the right?," # assumes only one TV patch
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    if len(tv_patches) == 0:
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    tv_patch = tv_patches[0]
    if tv_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
18685233,Which kind of vehicle is to the left of the flags?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"") # crop would include the flags so keep it in the query"
9796068,Are there both a fence and a sheep in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?," # returns yes or no
    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue blanket or towel"")
    # Question assumes only one patch
    if len(blue_patches) == 0:
        # If no blue patch is found, query the image directly
        return image_patch.simple_query(""Do you see any blue blanket or towel?"")
    return bool_to_yesno(blue_patches[0].verify_property(""blue blanket or towel"", ""blue"")) # crop would include the color so keep it in the query"
1110330,Is the pillow to the left of the frog cream colored or green?," # pillow is cream colored, frog is green
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    for pillow_patch in pillow_patches:
        frog_patches = image_patch.find(""frog"")
        # Question assumes only one frog patch
        if len(frog_patches) == 0:
            return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
        if pillow_patch.horizontal_center < frog_patch.horizontal_center:
            return ""cream colored""
    return ""green"""
511507,Is the antenna on the aircraft?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.verify_property(""antenna"", ""on the aircraft"") # crop would include the aircraft so keep it in the query"
10464417,"In which part is the tent, the top or the bottom?"," # assumes only one patch
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center > image_patch.vertical_center:
        return ""top""
    else:
        return ""bottom"""
10816730,Is the tree in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tree in front of the building?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18766115,Who is walking?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is walking?"") # crop would include the action so keep it in the query"
10625851,Are there either any fruits or plates in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?," # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return ""no""
    return person_patch.simple_query(""Is the person wearing a coat?"") # crop would include the coat so keep it in the query"
4194722,Is the man wearing a helmet?," # helmet is a property of man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    return bool_to_yesno(man_patches[0].verify_property(""man"", ""helmet"")) # helmet is a property of man"
414248,"What animal are the women near the ocean riding, a pig or a horse?"," # contains a relation (near, on, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"") # crop would include the ocean so keep it in the query"
683094,Who is wearing the shirt?," # shirt is a property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for shirt_patch in shirt_patches:
        is_wearing_shirt = (shirt_patch.simple_query(""Is the person wearing the shirt?"") == ""yes"")
        if is_wearing_shirt:
            return shirt_patch.simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query
    # If no one is wearing a shirt, pick the first shirt
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query"
12140603,What device is to the left of the headphones?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is to the left of the headphones?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
5575209,The flowers are where?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The flowers are where?"") # assumes only one patch"
8773829,Which kind of furniture is made of wood?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is made of wood?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
12636428,Which kind of animal is black?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is black?"") # crop would include the black so keep it in the query"
1020584,What animals is the car behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals is the car behind of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
11879418,The man is standing on what?," # contains a relation (on, in, under, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is standing on what?"") # crop would include the object so keep it in the query"
12334288,What device is to the left of the cabinet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is to the left of the cabinet?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
691610,Is the monitor to the left of a book?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the monitor to the left of a book?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
7552714,Is the color of the jacket black?," # returns yes or no
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return bool_to_yesno(jacket_patches[0].verify_property(""jacket"", ""black"")) # crop would include the color so keep it in the query"
8492422,Is the man to the left of a boy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man to the left of a boy?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13248061,What type of device is to the left of the keyboard in the bottom of the image?," # bottom
    image_patch = ImagePatch(image, 0, image_patch.height - 100, image_patch.width, image_patch.height) # bottom
    return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"") # bottom"
18252454,What is common to the roof and the sky?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is common to the roof and the sky?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14443687,What do the cat and the book have in common?," # assumes only one cat and one book
    image_patch = ImagePatch(image)
    cat_patch = image_patch.find(""cat"")[0]
    book_patch = image_patch.find(""book"")[0]
    common_properties = set(cat_patch.simple_query(""What are you made of?"")) & set(book_patch.simple_query(""What are you made of?""))
    return common_properties.pop() # assumes only one common property"
14571335,Who is wearing trousers?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing trousers?"") # crop would include the trousers so keep it in the query"
474885,Who wears a cap?," # cap is a noun
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    return cap_patches[0].simple_query(""Who wears a cap?"") # cap is a noun, so keep it in the query"
141013015,"What color is the toilet, brown or white?"," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].best_text_match([""brown"", ""white""]) # crop would include the color so keep it in the query"
5515816,On which side of the image is the fence?," # left, right, or center
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    elif fence_patch.horizontal_center > image_patch.width / 2:
        return ""right""
    else:
        return ""center"""
16774696,What is the surfer wearing?," # surfer is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the surfer wearing?"") # crop would include the surfer so keep it in the query"
13701956,Is there any grass or sand that is not dry?," # returns yes or no
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one patch of each
    if len(grass_patches) == 0 and len(sand_patches) == 0:
        return ""no""
    for patch in grass_patches + sand_patches:
        if patch.simple_query(""Is the patch wet?"") == ""yes"":
            return ""yes""
    return ""no"""
11606870,Is there a cow or a zebra in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a cow or a zebra in the picture?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
1589297,Does the fire hydrant look modern?," # returns yes or no
    image_patch = ImagePatch(image)
    fire_hydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(fire_hydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    return bool_to_yesno(fire_hydrant_patches[0].verify_property(""fire hydrant"", ""modern"")) # crop would include the fire hydrant so keep it in the query"
942308,Is the cup empty or full?," # assumes only one cup patch
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        return image_patch.simple_query(""Is the cup empty or full?"")
    cup_patch = cup_patches[0]
    return cup_patch.simple_query(""Is the cup empty or full?"") # crop would include the liquid so keep it in the query"
15815976,Is the woman wearing a scarf?," # contains a property (wearing, eating, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman wearing a scarf?"") # crop would include the scarf so keep it in the query"
3193231,Do you see either parking meters or brooms in the picture?," # parking meter or broom
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)"
314218,Is the sign in front of the bridge small and white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    sign_patch = sign_patches[0]
    bridge_patches = image_patch.find(""bridge"")
    # Question assumes only one bridge patch
    if len(bridge_patches) == 0:
        return ""no""
    bridge_patch = bridge_patches[0]
    is_small = sign_patch.simple_query(""Is the sign small?"") == ""yes""
    is_white = sign_patch.simple_query(""Is the sign white?"") == ""yes""
    is_in_front = sign_patch.horizontal_center > bridge_patch.horizontal_center
    return bool_to_yesno(is_small and is_white and is_in_front)"
18130465,Does the umbrella that is not dry look orange and open?," # assumes only one patch
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.simple_query(""Is the umbrella dry?"") == ""no"":
            if umbrella_patch.simple_query(""Does the umbrella look orange?"") == ""yes"":
                if umbrella_patch.simple_query(""Is the umbrella open?"") == ""yes"":
                    return ""yes""
    return ""no"""
7920817,What's in the paper?," # paper is a general term
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's in the paper?"") # paper is a general term"
18167292,What is on the bun in the top?," # assumes only one top patch
    image_patch = ImagePatch(image)
    top_patches = image_patch.find(""top"")
    # Question assumes only one top patch
    if len(top_patches) == 0:
        # If no top is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    return top_patches[0].simple_query(""What is on the bun in the top?"") # crop would include the bun so keep it in the query"
16929928,What is the fence made of?," # fence is a common object
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"") # crop would include the fence so keep it in the query"
14113312,Is the woman to the left or to the right of the lady?," # assumes only one woman and one lady
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    lady_patches = image_patch.find(""lady"")
    if len(woman_patches) == 0 or len(lady_patches) == 0:
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    woman_patch = woman_patches[0]
    lady_patch = lady_patches[0]
    if woman_patch.horizontal_center < lady_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17993299,Is the horse to the left of a car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the horse to the left of a car?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
8717022,Is the small animal to the left of the vehicle that looks silver?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
2998707,Which color is the chair that is on the right?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    rightmost_chair_patch = max(chair_patches, key=lambda patch: patch.horizontal_center)
    return rightmost_chair_patch.simple_query(""Which color is the chair that is on the right?"") # crop would include the right so keep it in the query"
171017786,Do you see any cups to the left of the monitor?," # assumes only one monitor patch
    image_patch = ImagePatch(image)
    monitor_patch = image_patch.find(""monitor"")[0]
    cup_patches = image_patch.find(""cup"")
    for cup_patch in cup_patches:
        if cup_patch.horizontal_center < monitor_patch.horizontal_center:
            return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    glasses_patch = man_patch.find(""glasses"")[0]
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center > glasses_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
1941568,What animal is in the water?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"") # crop would include the water so keep it in the query"
17577787,Does the man's hair look short and white?," # hair
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    is_short = man_patch.simple_query(""Does the man's hair look short?"") == ""yes""
    is_white = man_patch.simple_query(""Does the man's hair look white?"") == ""yes""
    return bool_to_yesno(is_short and is_white)"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
9825336,Which kind of furniture is the mat lying on?," # mat is a piece of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is the mat lying on?"") # mat is a piece of furniture"
11222427,Do you see fences or elephants?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"") # crop would include the color so keep it in the query"
1152020,Do you see either any plate or tomato that are red?," # plate or tomato
    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""plate"") and image_patch.verify_property(""plate"", ""red"")
    is_red_tomato = image_patch.exists(""tomato"") and image_patch.verify_property(""tomato"", ""red"")
    return bool_to_yesno(is_red_plate or is_red_tomato)"
8961520,Who is surfing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"") # crop would include the surfboard so keep it in the query"
18106780,Which room is it?," # assumes one room patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
1892692,What color do you think the bowl that is to the right of the person is?," # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for person_patch in person_patches:
        bowl_patches = image_patch.find(""bowl"")
        # Question assumes only one bowl patch
        if len(bowl_patches) == 0:
            return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
        for bowl_patch in bowl_patches:
            if bowl_patch.horizontal_center > person_patch.horizontal_center:
                return bowl_patch.simple_query(""What color is the bowl?"")
    # If no bowl is to the right of the person, query the image directly
    return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"") # crop would include the bowl so keep it in the query"
6952082,What color is the hair?," # hair is a general term
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"") # crop would include the hair so keep it in the query"
3768067,What color is the pot the statue is to the right of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the pot the statue is to the right of?"") # crop would include the pot so keep it in the query"
17866761,Is the clear glass on the shelf of the table?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the clear glass on the shelf of the table?"") # crop would include the shelf so keep it in the query"
798020,Does the skirt look black or yellow?," # skirt is a color
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].simple_query(""Does the skirt look black or yellow?"") # crop would include the color so keep it in the query"
828981,How old is he?," # age is a property
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How old is he?"")
    return man_patches[0].simple_query(""How old is he?"") # crop would include the age so keep it in the query"
7236463,Of what color is the book?," # color
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""Of what color is the book?"") # crop would include the book so keep it in the query"
6376684,What color is the car to the left of the train car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the car to the left of the train car?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
786798,Is this a photo of a beach?," # beach
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""beach"", ""photo"")) # beach is a photo, so ask directly"
19836753,What vehicles are to the left of the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicles are to the left of the fence?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15284615,Who is playing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"") # crop would include the playing so keep it in the query"
16785170,Is the man that is walking holding a remote control?," # contains a relation (holding, walking, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man that is walking holding a remote control?"") # crop would include the man and the remote control so keep it in the query"
17746396,What's the boy wearing?," # assumes only one boy patch
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        return image_patch.simple_query(""What's the boy wearing?"")
    return boy_patches[0].simple_query(""What's the boy wearing?"") # crop would include the clothing so keep it in the query"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13826837,What color is the door?," # door is a general term, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the door?"") # door is a general term, so ask directly"
19249907,Are there any horses in the field?," # field is a noun, so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse"")) # field is a noun, so ask directly"
2964690,What is in front of the mountains?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13396373,Are there vehicles to the right of the truck?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for truck_patch in truck_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
                return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?," # returns a boolean
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    scarf_patch = scarf_patches[0]
    is_made_of_wool = scarf_patch.simple_query(""Is the scarf made of wool?"") == ""yes""
    is_long = scarf_patch.simple_query(""Does the scarf seem to be long?"") == ""yes""
    is_blue = scarf_patch.simple_query(""Does the scarf seem to be blue?"") == ""yes""
    return bool_to_yesno(is_made_of_wool and is_long and is_blue)"
1189986,Is the man behind the elephant holding a surfboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"") # crop would include the surfboard so keep it in the query"
8792466,Which color is the closed window?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which color is the closed window?"") # crop would include the window so keep it in the query"
10188423,Who is wearing a shirt?," # shirt is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"") # shirt is a property, so ask directly"
8965417,What kind of vegetable is to the right of the girl?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"") # crop would include the girl so keep it in the query"
4929965,Is there a black racket or clock in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_clock = image_patch.exists(""clock"")
    return bool_to_yesno(is_black_racket or is_clock)"
4782038,What kind of animal is white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is white?"") # crop would include the white so keep it in the query"
14658201,Is the sheep that looks white and brown made of plastic?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"") # crop would include the sheep so keep it in the query"
1441865,Do you see any boxes on the table under the grill?," # assumes a table and a grill
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    for box_patch in box_patches:
        if box_patch.horizontal_center < image_patch.horizontal_center and box_patch.vertical_center > image_patch.vertical_center - image_patch.height / 2:
            return ""yes""
    return ""no"""
1424926,What is the tag on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tag on?"") # crop would include the tag so keep it in the query"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
3635257,Is there any freezer in this photo?," # freezer is a rare object
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer"")) # freezer is a rare object"
8821026,Are there either any bags or chairs?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bag"") or image_patch.exists(""chair"")) # or image_patch.exists(""chair"") or image_patch.exists(""bench"") or image_patch.exists(""couch"") or image_patch.exists(""sofa"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or image_patch.exists(""bench"") or"
13669952,In what vehicle is the bus driver?," # assumes only one bus patch
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    if len(bus_patches) == 0:
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    return bus_patches[0].simple_query(""In what vehicle is the bus driver?"") # crop would include the driver so keep it in the query"
17204662,What is that man in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that man in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
380866,Are there any girls or radios?," # returns yes or no
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?," # contains a relation (on, in, under, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The girl is sitting on what?"") # crop would include the object so keep it in the query"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?," # assumes one patch per object
    image_patch = ImagePatch(image)
    white_lamp_patches = image_patch.find(""white lamp"")
    if len(white_lamp_patches) == 0:
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for white_lamp_patch in white_lamp_patches:
        pillow_patches = image_patch.find(""pillow"")
        if len(pillow_patches) == 0:
            return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center == image_patch.horizontal_center:
                return ""left"" if white_lamp_patch.horizontal_center < image_patch.horizontal_center else ""right""
    return ""left"" # if no pillow is found, assume the white lamp is to the left of the center"
16545552,What color do you think is the vehicle the girl is washing?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    return vehicle_patches[0].simple_query(""What color do you think is the vehicle the girl is washing?"") # crop would include the girl and the vehicle so keep it in the query"
16719872,Are there motorcycles to the left of the man who is wearing a hat?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"") # crop would include the hat so keep it in the query"
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?," # assumes one garbage can and one person pushing a stroller
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    person_pushing_stroller_patches = image_patch.find(""person pushing a stroller"")
    if len(garbage_can_patches) == 0 or len(person_pushing_stroller_patches) == 0:
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    garbage_can_patch = garbage_can_patches[0]
    person_pushing_stroller_patch = person_pushing_stroller_patches[0]
    if garbage_can_patch.horizontal_center > person_pushing_stroller_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13711589,What do the truck and the street sign have in common?," # assumes only one truck and one street sign
    image_patch = ImagePatch(image)
    truck_patch = image_patch.find(""truck"")[0]
    street_sign_patch = image_patch.find(""street sign"")[0]
    common_properties = truck_patch.verify_property(""truck"", ""color"") and street_sign_patch.verify_property(""street sign"", ""color"")
    if common_properties:
        return truck_patch.simple_query(""What color are the truck and the street sign?"")
    else:
        return truck_patch.simple_query(""What do the truck and the street sign have in common?"") # crop would include the color so keep it in the query"
10227573,Who is wearing a shirt?," # shirt is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a shirt?"") # shirt is a property, so ask directly"
161071156,What animal is the man leading?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the man leading?"") # crop would include the animal so keep it in the query"
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
7190226,Does the puddle look large?," # puddle is a noun
    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    puddle_patch = puddle_patches[0]
    return puddle_patch.verify_property(""puddle"", ""large"") # puddle is a noun, so no need to ask ""What is the puddle?"""
11675152,Who throws the frisbee?," # assumes only one frisbee patch
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Who throws the frisbee?"")
    for frisbee_patch in frisbee_patches:
        return frisbee_patch.simple_query(""Who throws the frisbee?"") # crop would include the frisbee so keep it in the query"
8723676,Which kind of animal is the water on?," # contains a relation (on, in, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is the water on?"") # crop would include the water so keep it in the query"
61046657,Do you think that traffic light is tall?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""traffic light"", ""tall"")) # crop would include the light so keep it in the query"
9581034,On which side is the wine glass?," # assumes only one wine glass patch
    image_patch = ImagePatch(image)
    wine_glass_patch = image_patch.find(""wine glass"")[0]
    if wine_glass_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?," # assumes only one pizza patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
            return ""right""
    return ""left"""
18535266,Is the face mask made of the same material as the mask?," # assumes only one face patch and one mask patch
    image_patch = ImagePatch(image)
    face_patch = image_patch.find(""face"")[0]
    mask_patch = image_patch.find(""mask"")[0]
    face_material = face_patch.simple_query(""What material is the face mask made of?"")
    mask_material = mask_patch.simple_query(""What material is the mask made of?"")
    return bool_to_yesno(face_material == mask_material)"
11254215,What is the tan item of furniture?," # tan item of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tan item of furniture?"") # tan item of furniture"
1852010,How is the device to the right of the device on the desk called?," # assumes only one patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > image_patch.horizontal_center:
            return device_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    return image_patch.simple_query(""How is the device to the right of the device on the desk called?"") # if no device is to the right, query the image directly"
1587534,Is the device on the floor black and large?," # returns yes or no
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    device_patch = device_patches[0]
    if device_patch.lower > image_patch.upper / 2: # on the floor
        if device_patch.simple_query(""What color is the device?"") == ""black"":
            if device_patch.simple_query(""What size is the device?"") == ""large"":
                return ""yes""
    return ""no"""
8470757,Are there any surfboards?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard"")) # assumes one patch"
11273949,Is the shirt white?," # shirt is the object, white is the property
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white"")) # shirt is the object, white is the property"
7475238,What's the airplane in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
16685900,Where does the horse to the right of the hose run?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where does the horse to the right of the hose run?"") # crop would include the hose so keep it in the query"
3932624,Are there either any gray chairs or laptops?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?," # water is a noun
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the water brown or blue?"") # water is a noun, so ask directly"
9256263,Which kind of furniture is brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is brown?"") # crop would include the brown so keep it in the query"
18719769,Is the man wearing glasses?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""glasses"")) # assumes only one man patch"
18342439,What animal is white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is white?"") # crop would include the white so keep it in the query"
8665725,Who is wearing a coat?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a coat?"") # crop would include the coat so keep it in the query"
5440407,What vehicle isn't black?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle isn't black?"") # crop would include the color so keep it in the query"
4104707,On which side of the picture is the oven?," # left or right
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patches[0].horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
3126763,What is common to the logo and the letter?," # returns a string
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    letter_patches = image_patch.find(""letter"")
    # Question assumes only one letter patch
    if len(letter_patches) == 0:
        return ""no common property""
    logo_patch = logo_patches[0]
    letter_patch = letter_patches[0]
    common_properties = [""red"", ""blue"", ""green"", ""yellow"", ""orange"", ""purple"", ""black"", ""white"", ""gray"", ""brown"", ""pink"", ""turquoise"", ""silver"", ""gold""]
    for property in common_properties:
        if logo_patch.verify_property(""logo"", property) and letter_patch.verify_property(""letter"", property):
            return property
    return ""no common property"""
18640925,What animal is in the water the man is walking through?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water the man is walking through?"") # crop would include the water so keep it in the query"
125488,What is the man wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"") # crop would include the clothing so keep it in the query"
5925435,What is the sidewalk made of?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"") # crop would include the sidewalk so keep it in the query"
17563472,What is the pattern of the coat?," # returns the pattern of the coat
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].simple_query(""What is the pattern of the coat?"") # crop would include the pattern so keep it in the query"
4819547,What kind of furniture is white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is white?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14263174,What color do you think the chair that is to the right of the other chair is?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"") # crop would include the chair so keep it in the query"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
9239936,Do the cows near the trees have white color?," # contains a relation (near, around, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do the cows near the trees have white color?"") # crop would include the trees so keep it in the query"
1885178,"In which part of the image is the remote control, the bottom or the top?"," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"") # crop would include the remote so keep it in the query"
12341631,Which color is the bag in the top part?," # bag is in the top part
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    if bag_patch.vertical_center > image_patch.vertical_center:
        return bag_patch.simple_query(""Which color is the bag in the top part?"")
    else:
        return bag_patch.simple_query(""Which color is the bag in the bottom part?"") # bag is in the bottom part"
5532909,"What is the weather like, cloudless or maybe rainy?"," # cloudless or rainy
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"") # cloudless or rainy"
2618222,What is connected to the open laptop?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is connected to the open laptop?"") # crop would include the laptop so keep it in the query"
3252220,Of which color is the shirt the man wears?," # shirt is the object, man is the subject
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""white""
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""Of which color is the shirt the man wears?"") # crop would include the shirt so keep it in the query"
8947801,What is in the vase?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the vase?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
10841562,Is the color of the pants the same as the shorts?," # returns yes or no
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants is found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    pants_color = pants_patches[0].simple_query(""What color are the pants?"")
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    shorts_color = shorts_patches[0].simple_query(""What color are the shorts?"")
    return bool_to_yesno(pants_color == shorts_color)"
15511838,What kind of furniture is to the left of the bucket?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"") # crop would include the bucket so keep it in the query"
14495306,Is there any racket to the right of the person that the woman is to the left of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
14841932,Do the tiles have square shape and black color?," # returns yes or no
    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    # Question assumes only one tile patch
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    tile_patch = tile_patches[0]
    return bool_to_yesno(tile_patch.verify_property(""tile"", ""square"") and tile_patch.verify_property(""tile"", ""black"")) # crop would include the shape and color so keep it in the query"
41029381,What is the vehicle that is the same color as the shirt called?," # shirt and vehicle are the same color
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    shirt_patch = shirt_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no vehicle found""
    vehicle_patch = vehicle_patches[0]
    return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"") # crop would include the shirt so keep it in the query"
161027428,Are there both windows and doors in the image?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
16478246,Does the pillow to the right of the man have green color and large size?," # returns yes or no
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        return ""no""
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""))
    return ""no"""
9450308,Is the happy person wearing a hat?," # returns yes or no
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    happy_patch = happy_patches[0]
    is_wearing_hat = (happy_patch.simple_query(""Is the happy person wearing a hat?"") == ""yes"")
    return bool_to_yesno(is_wearing_hat)"
11850389,What place is this?," # returns the answer to ""What is this?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this?"") # returns the answer to ""What is this?"" by default"
17250452,What kind of appliance is on the right of the drawer?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"") # crop would include the appliance so keep it in the query"
14857961,Is the lady to the right of a woman?," # lady and woman are the same object
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    for lady_patch in lady_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center < lady_patch.horizontal_center:
                return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?," # assumes only one pan patch
    image_patch = ImagePatch(image)
    pan_patch = image_patch.find(""pan"")[0]
    pan_center = pan_patch.horizontal_center
    pan_right = pan_center + (pan_patch.width / 2)
    pan_left = pan_center - (pan_patch.width / 2)
    cooking_utensils_patches = image_patch.find(""cooking utensils"")
    cooking_utensils = []
    for utensil_patch in cooking_utensils_patches:
        if utensil_patch.horizontal_center < pan_right and utensil_patch.horizontal_center > pan_left:
            cooking_utensils.append(utensil_patch)
    if len(cooking_utensils) == 0:
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return cooking_utensils[0].simple_query(""What cooking utensils are to the left of the pan on the right side?"") # crop would include the pan on the right so keep it in the query"
9745131,Which color is the truck that is to the left of the lamps?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"") # crop would include the lamps so keep it in the query"
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?," # image is assumed to be in the correct orientation
    image_patch = ImagePatch(image, 0, image.shape[1] - 1, image.shape[2], image.shape[1]) # crop the bottom of the image
    motorcycle_color = image_patch.simple_query(""What color is the motorcycle in the bottom of the image?"")
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    for bird_patch in bird_patches:
        if bird_patch.simple_query(""What color is the bird?"") == motorcycle_color:
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    # If no bird is the same color as the motorcycle, pick the first bird
    return bird_patches[0].simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"") # crop would include the motorcycle so keep it in the query"
867818,Is the man on the skateboard?," # contains a relation (on, in, with, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the skateboard?"") # crop would include the man and the skateboard so keep it in the query"
13896221,What is on the table?," # assumes only one table patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"") # crop would include the table so keep it in the query"
1964517,What is the food that is above the white paper?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the food that is above the white paper?"") # crop would include the white paper so keep it in the query"
15705231,Is the shelf to the left of a cabinet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shelf to the left of a cabinet?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
15693846,Is the motorcycle parked on the grass?," # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the motorcycle parked on the grass?"") # contains a relation (on, next to, etc), so ask directly"
13872995,Who is jumping?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is jumping?"") # crop would include the jump so keep it in the query"
4502830,Is this a dog or a cat?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""Is this a dog or a cat?"")
    return animal_patches[0].simple_query(""Is this a dog or a cat?"") # crop would include the animal so keep it in the query"
12584623,What is the person with the bag wearing?," # bag is a property of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    return person_patches[0].simple_query(""What is the person with the bag wearing?"") # crop would include the bag so keep it in the query"
7202064,"What is this, a bus or a truck?"," # bus or truck
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""bus"", ""truck""]) # bus or truck"
16542208,Do you see either any beds or blankets there?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)"
11700224,Do you see both lettuce and salad?," # salad is a type of lettuce
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)"
1067136,Is the ball on the tree?," # contains a relation (on, in, under, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball on the tree?"") # crop would include the tree so keep it in the query"
364079,What kind of furniture is to the right of the blanket?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"") # crop would include the furniture so keep it in the query"
2533062,How large is the ground the zebra is standing on?," # returns the area of the ground
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    zebra_patch = zebra_patches[0]
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        return ""unknown""
    ground_patch = ground_patches[0]
    return ground_patch.width * ground_patch.height"
19683710,The clock is inside what?," # contains a relation (inside, outside, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The clock is inside what?"") # crop would include the inside so keep it in the query"
15674863,Is the racket in the top part?," # assumes only one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.vertical_center > image_patch.height / 2)"
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"") # crop would include the shirt so keep it in the query"
2292637,What is the color of the shirt that the passenger is wearing?," # shirt, not shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"") # crop would include the shirt so keep it in the query"
9175259,What is the chair made of?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patch = image_patch.find(""chair"")
    if len(chair_patch) == 0:
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patch[0].simple_query(""What is the chair made of?"") # crop would include the chair so keep it in the query"
8714882,How big is the carrot in the top of the picture?," # crop would include the top so keep it in the query
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    return carrot_patches[0].simple_query(""How big is the carrot in the top of the picture?"") # crop would include the top so keep it in the query"
1638685,What is the name of the vegetable that is on the yellow food?," # assumes only one yellow food patch
    image_patch = ImagePatch(image)
    yellow_food_patches = image_patch.find(""yellow food"")
    # Question assumes only one yellow food patch
    if len(yellow_food_patches) == 0:
        # If no yellow food is found, query the image directly
        return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    yellow_food_patch = yellow_food_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > yellow_food_patch.horizontal_center:
            return vegetable_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    return vegetable_patches[0].simple_query(""What is the name of the vegetable that is on the yellow food?"") # crop would include the yellow food so keep it in the query"
5828256,Is the clock on a tower?," # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the clock on a tower?"") # crop would include the tower so keep it in the query"
18937563,What kind of animal is orange?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is orange?"") # crop would include the orange so keep it in the query"
14360113,What is the smiling woman holding?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the smiling woman holding?"") # crop would include the object so keep it in the query"
593188,Is the hair short?," # hair is a general term
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    return bool_to_yesno(hair_patches[0].verify_property(""hair"", ""short"")) # crop would include the hair so keep it in the query"
10824666,Are there ladies to the left of the man that is wearing shorts?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    is_wearing_shorts = (man_patch.simple_query(""Is the man wearing shorts?"") == ""yes"")
    if not is_wearing_shorts:
        return ""no""
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        return ""no""
    for lady_patch in lady_patches:
        if lady_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?," # assumes only one gray car and one garbage bin
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    garbage_bin_patches = image_patch.find(""garbage bin"")
    if len(gray_car_patches) == 0 or len(garbage_bin_patches) == 0:
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    gray_car_patch = gray_car_patches[0]
    garbage_bin_patch = garbage_bin_patches[0]
    if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7574939,Is there any table or plate that is white?," # table or plate
    image_patch = ImagePatch(image)
    is_table = image_patch.exists(""table"")
    is_plate = image_patch.exists(""plate"")
    if is_table or is_plate:
        return ""yes""
    return ""no"""
12252101,Is it outdoors?," # assumes one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it outdoors?"")) # assumes one patch"
6943442,What cooking utensil is on the oven?," # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What cooking utensil is on the oven?"") # crop would include the oven so keep it in the query"
2977077,The propeller that looks red is what pattern?," # propeller is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The propeller that looks red is what pattern?"") # propeller is a relation, so ask directly"
11190306,Which kind of animal is to the left of the train?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is to the left of the train?"") # crop would include the train so keep it in the query"
5107190,Do you see both an airplane and a truck?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""airplane"") and image_patch.exists(""truck"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
4360982,How old is the child?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How old is the child?"") # assumes only one child patch"
12536783,What kind of animal is in front of the pole?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the pole?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?," # assumes only one man and one glasses
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    t_shirt_man_patch = None
    glasses_patches = image_patch.find(""glasses"")
    glasses_patch = None
    for man_patch in man_patches:
        if man_patch.simple_query(""Is the man wearing a t-shirt?"") == ""yes"":
            t_shirt_man_patch = man_patch
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center > t_shirt_man_patch.horizontal_center:
            return ""right""
        else:
            return ""left""
    return ""left"""
18655269,Which room is it?," # assumes one room patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
7405860,Is it indoors?," # assumes one patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it indoors?"")) # assumes one patch"
1705569,Does the pot on top of the stove look black?," # assumes one pot patch
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        return ""no""
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center > stove_patch.horizontal_center:
        return ""yes""
    return ""no"""
1028569,Are there both a cyclist and a helmet in the photo?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cyclist"") and image_patch.exists(""helmet"")) # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
13954115,Are there any men to the left of the person in the crowd?," # assumes one patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"") # crop would include the keyboard so keep it in the query"
1017626,Who is inside the train?," # contains a relation (inside, outside, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is inside the train?"") # crop would include the inside so keep it in the query"
7650014,Which place is it?," # returns the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"") # returns the place"
15889871,What is the person to the left of the car doing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the left of the car doing?"") # crop would include the car so keep it in the query"
1310985,Is the yellow vehicle to the left of a lamp?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
646935,Which room is it?," # assumes one room patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"") # crop would include the room so keep it in the query"
9495263,Is the woman to the left or to the right of the man that wears a cap?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) == 0 or len(woman_patches) == 0:
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
946016,Do you think the animal that is sitting-down is small or large?," # animal is sitting down
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    if animal_patches[0].simple_query(""Is the animal small or large?"") == ""small"":
        return ""small""
    else:
        return ""large"""
9617920,Do the garbage can and the pan have the same color?," # garbage can and pan
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        return ""no""
    garbage_can_patch = garbage_can_patches[0]
    pan_patch = pan_patches[0]
    return bool_to_yesno(garbage_can_patch.verify_property(""garbage can"", ""color"") and pan_patch.verify_property(""pan"", ""color"")) # color is a property of the object, not the patch"
3578781,Which kind of clothing is black?," # assumes only one patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""What color is the clothing?"") == ""black"":
            return clothing_patch.simple_query(""What kind of clothing is black?"")
    # If no clothing is black, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"") # crop would include the black clothing so keep it in the query"
4695656,What is the lamp on?," # assumes only one lamp patch
    image_patch = ImagePatch(image)
    lamp_patch = image_patch.find(""lamp"")
    if len(lamp_patch) == 0:
        return image_patch.simple_query(""What is the lamp on?"")
    return lamp_patch[0].simple_query(""What is the lamp on?"") # crop would include the object so keep it in the query"
13696926,The homes that are to the left of the people have what color?," # assumes only one patch
    image_patch = ImagePatch(image)
    home_patches = image_patch.find(""home"")
    # Question assumes only one home patch
    if len(home_patches) == 0:
        # If no home is found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    for home_patch in home_patches:
        if home_patch.horizontal_center < image_patch.horizontal_center:
            return home_patch.simple_query(""What color are the homes to the left of the people?"")
    return home_patches[0].simple_query(""What color are the homes to the left of the people?"") # crop would include the people so keep it in the query"
16946079,What is on the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"") # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly"
18986542,Is the napkin on the right side?," # assumes only one napkin patch
    image_patch = ImagePatch(image)
    napkin_patch = image_patch.find(""napkin"")[0]
    return bool_to_yesno(napkin_patch.horizontal_center > image_patch.horizontal_center)"
11513897,What appliance is the label on?," # assumes only one label patch
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    if len(label_patches) == 0:
        return image_patch.simple_query(""What appliance is the label on?"")
    return label_patches[0].simple_query(""What appliance is the label on?"") # crop would include the label so keep it in the query"
8240644,What is the color of the bird's tail?," # bird's tail
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What is the color of the bird's tail?"") # crop would include the tail so keep it in the query"
5245080,Is he to the right or to the left of the camera?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    if person_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17800894,Are there both a window and a door in the picture?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
191027873,Where is the snowboard?," # assumes only one patch
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    if len(snowboard_patches) == 0:
        return image_patch.simple_query(""Where is the snowboard?"")
    return snowboard_patches[0].simple_query(""Where is the snowboard?"") # crop would include the snowboard so keep it in the query"
1964079,Are the box and the paper the same color?," # returns yes or no
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    box_patch = box_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    return bool_to_yesno(box_patch.simple_query(""What color is the box?"") == paper_patch.simple_query(""What color is the paper?"")) # crop would include the color so keep it in the query"
