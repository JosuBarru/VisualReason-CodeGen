sample_id,query,generated_code
13151559,Is the large hair both white and soft?," # assumes one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    hair_patch = hair_patches[0]
    is_white = hair_patch.verify_property(""hair"", ""white"")
    is_soft = hair_patch.verify_property(""hair"", ""soft"")
    return bool_to_yesno(is_white and is_soft)"
18370956,Who is eating the cupcake?," # assumes one cupcake patch
    image_patch = ImagePatch(image)
    cupcake_patches = image_patch.find(""cupcake"")
    if len(cupcake_patches) == 0:
        # If no cupcake is found, query the image directly
        return image_patch.simple_query(""Who is eating the cupcake?"")
    for cupcake_patch in cupcake_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > cupcake_patch.horizontal_center:
                return person_patch.simple_query(""Who is eating the cupcake?"")
    return ""no one"""
6436809,What is the guy wearing?," # returns the answer to ""What is the guy wearing?""
    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    # Question assumes only one guy patch
    if len(guy_patches) == 0:
        # If no guy is found, query the image directly
        return image_patch.simple_query(""What is the guy wearing?"")
    return guy_patches[0].simple_query(""What is the guy wearing?"")"
117037,Which kind of food is to the right of the cabbage?," # assumes one cabbage patch
    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    cabbage_patch = cabbage_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center > cabbage_patch.horizontal_center:
            return food_patch.simple_query(""What kind of food is to the right of the cabbage?"")
    return ""no"""
758936,Who wears the cap?," # assumes one cap
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    return cap_patches[0].simple_query(""Who is wearing the cap?"")"
111046440,Who is pointing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is pointing?"")
    return person_patches[0].simple_query(""Who is pointing?"")"
15804389,Is the woman's hair short or long?," # assumes one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""Is the woman's hair short or long?"")"
11445636,The women are watching who?," # assumes only one woman
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The women are watching who?"")"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?," # returns a boolean
    image_patch = ImagePatch(image)
    dishwasher_patches = image_patch.find(""dishwasher"")
    # Question assumes only one dishwasher patch
    if len(dishwasher_patches) == 0:
        # If no dishwasher is found, query the image directly
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    for dishwasher_patch in dishwasher_patches:
        if dishwasher_patch.verify_property(""dishwasher"", ""white""):
            gas_stove_patches = image_patch.find(""gas stove"")
            # Question assumes only one gas stove patch
            if len(gas_stove_patches) == 0:
                return ""no""
            for gas_stove_patch in gas_stove_patches:
                if gas_stove_patch.verify_property(""gas stove"", ""white""):
                    return ""yes""
    return ""no"""
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?," # assumes one bed and one baby
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one bed and one baby patch
    if len(bed_patches) == 0 or len(baby_patches) == 0:
        # If no bed or baby is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_patch = bed_patches[0]
    baby_patch = baby_patches[0]
    if baby_patch.horizontal_center > bed_patch.horizontal_center:
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_color = bed_patch.simple_query(""What color is the bed?"")
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""What color is the furniture?"") == bed_color:
            return furniture_patch.simple_query(""What is the name of the furniture?"")
    return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")"
758958,Is there either any red pillow or snowboard?," # returns yes or no
    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)"
143816,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?," # assumes one knife
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Which side is the knife on?"")
    knife_patch = knife_patches[0]
    if knife_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17829769,What is the computer mouse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?," # assumes one toddler patch
    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    for toddler_patch in toddler_patches:
        holding_patches = image_patch.find(""holding"")
        for holding_patch in holding_patches:
            if holding_patch.horizontal_center > toddler_patch.horizontal_center:
                return holding_patch.simple_query(""What is the toddler holding?"")
    return ""nothing"""
2951242,Is the gray shirt sleeveless or short sleeved?," # assumes one gray shirt
    image_patch = ImagePatch(image)
    gray_shirt_patches = image_patch.find(""gray shirt"")
    # Question assumes only one gray shirt patch
    if len(gray_shirt_patches) == 0:
        # If no gray shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    gray_shirt_patch = gray_shirt_patches[0]
    return gray_shirt_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")"
15241795,Is the tank top red?," # returns a boolean
    image_patch = ImagePatch(image)
    tank_top_patches = image_patch.find(""tank top"")
    # Question assumes only one tank top patch
    if len(tank_top_patches) == 0:
        # If no tank top is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the tank top red?""))
    return bool_to_yesno(tank_top_patches[0].verify_property(""tank top"", ""red""))"
13885234,Which kind of animal is in front of the rocks?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""grapes""))"
6455591,What type of furniture is white?," # returns the type of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What type of furniture is white?"")
    return ""no"""
1033761,What is the blue clothing item?," # returns the name of the clothing item
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""blue""):
            return clothing_patch.simple_query(""What is the blue clothing item?"") # crop would include the clothing so keep it in the query
    # If no blue clothing is found, query the image directly
    return image_patch.simple_query(""What is the blue clothing item?"")"
17726504,Who is wearing the glasses?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        is_wearing_glasses = person_patch.simple_query(""Is the person wearing glasses?"") == ""yes""
        if is_wearing_glasses:
            return person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no person is wearing glasses, query the image directly
    return image_patch.simple_query(""Who is wearing the glasses?"")"
13112902,Is the woman wearing a bracelet?," # assumes one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    woman_patch = woman_patches[0]
    return bool_to_yesno(woman_patch.verify_property(""woman"", ""wearing a bracelet""))"
698766,What is the food that is not white?," # returns the name of the food
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""white""):
            return food_patch.simple_query(""What is the food that is not white?"")
    # If no food is not white, query the image directly
    return image_patch.simple_query(""What is the food that is not white?"")"
1332276,Are there both a cup and a bottle in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?," # returns the color of the glove
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?," # assumes one helmet patch
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for helmet_patch in helmet_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > helmet_patch.horizontal_center:
                return person_patch.simple_query(""Who is holding the helmet?"")
    return ""no one"""
2143247,What is the name of the food to the left of the donut that looks little?," # assumes one donut patch
    image_patch = ImagePatch(image)
    donut_patches = image_patch.find(""donut"")
    if len(donut_patches) == 0:
        # If no donut is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    donut_patch = donut_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < donut_patch.horizontal_center:
            return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    return ""no food to the left of the donut that looks little"""
3767951,Is the clock to the right or to the left of the man on the left?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    clock_patch = clock_patches[0]
    if clock_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17655180,What's the sticker on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?," # assumes one car patch
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    for car_patch in car_patches:
        for people_patch in people_patches:
            if people_patch.horizontal_center > car_patch.horizontal_center:
                return ""yes""
    return ""no"""
7188981,Does the giraffe look adult?," # assumes one giraffe patch
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""adult""))"
16852802,Of what color are the pants?," # returns the color of the pants
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"")"
9619158,What kind of watercraft is full of men?," # assumes one watercraft patch
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    watercraft_patch = watercraft_patches[0]
    men_patches = watercraft_patch.find(""man"")
    if len(men_patches) == 0:
        # If no men are found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    return watercraft_patch.simple_query(""What kind of watercraft is full of men?"")"
3625225,On which side of the picture are the boats?," # assumes one boat
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    boat_patch = boat_patches[0]
    if boat_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?," # assumes only two elephant patches
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only two elephant patches
    if len(elephant_patches) < 2:
        # If not two elephants are found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_elephant = elephant_patches[0]
    right_elephant = elephant_patches[1]
    if left_elephant.horizontal_center < right_elephant.horizontal_center:
        return bool_to_yesno(left_elephant.verify_property(""elephant"", ""large""))
    else:
        return bool_to_yesno(right_elephant.verify_property(""elephant"", ""large""))"
19834124,What is the girl holding?," # assumes one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    girl_patch = girl_patches[0]
    holding_patches = image_patch.find(""holding"")
    # Question assumes only one holding patch
    if len(holding_patches) == 0:
        return image_patch.simple_query(""What is the girl holding?"")
    return holding_patches[0].simple_query(""What is the girl holding?"")"
4617704,Does the toilet seat that is not down appear to be white and open?," # assumes one toilet seat
    image_patch = ImagePatch(image)
    toilet_seats = image_patch.find(""toilet seat"")
    if len(toilet_seats) == 0:
        # If no toilet seat is found, query the image directly
        return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")
    for toilet_seat in toilet_seats:
        if not toilet_seat.verify_property(""toilet seat"", ""down""):
            if toilet_seat.verify_property(""toilet seat"", ""white"") and toilet_seat.verify_property(""toilet seat"", ""open""):
                return ""yes""
    return ""no"""
5899539,Are there any bottles or mugs that are not purple?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_mug = image_patch.exists(""mug"")
    if is_bottle or is_mug:
        bottle_patches = image_patch.find(""bottle"")
        mug_patches = image_patch.find(""mug"")
        for bottle_patch in bottle_patches:
            if not bottle_patch.verify_property(""bottle"", ""purple""):
                return ""yes""
        for mug_patch in mug_patches:
            if not mug_patch.verify_property(""mug"", ""purple""):
                return ""yes""
    return ""no"""
2631593,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?," # assumes one person in the living room
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    person_patch = person_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return ""no""
    for man_patch in man_patches:
        if man_patch.horizontal_center > person_patch.horizontal_center:
            return ""yes""
    return ""no"""
111054378,Is the small couch to the right or to the left of the bottle?," # assumes one small couch and one bottle
    image_patch = ImagePatch(image)
    small_couch_patches = image_patch.find(""small couch"")
    bottle_patches = image_patch.find(""bottle"")
    if len(small_couch_patches) == 0 or len(bottle_patches) == 0:
        # If no small couch or bottle is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    small_couch_patch = small_couch_patches[0]
    bottle_patch = bottle_patches[0]
    if small_couch_patch.horizontal_center > bottle_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
9392411,Is the bottle to the right or to the left of the appliance on the left?," # assumes one appliance on the left
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    for bottle_patch in bottle_patches:
        appliance_patches = image_patch.find(""appliance"")
        # Question assumes only one appliance patch
        if len(appliance_patches) == 0:
            return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
        appliance_patch = appliance_patches[0]
        if appliance_patch.horizontal_center < image_patch.horizontal_center:
            if bottle_patch.horizontal_center > appliance_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
    return ""left"""
16753829,What type of animal is sitting in the container in the bottom of the photo?," # container is a box
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    container_patch = container_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    animal_patch = animal_patches[0]
    if container_patch.lower > animal_patch.lower:
        return animal_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    return animal_patch.simple_query(""What type of animal is sitting in the container in the top of the photo?"")"
1345482,What is that train in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?," # This is a very complex query
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    girl_patch = girl_patches[0]
    palm_tree_patches = image_patch.find(""palm tree"")
    # Question assumes only one palm tree patch
    if len(palm_tree_patches) == 0:
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    palm_tree_patch = palm_tree_patches[0]
    if palm_tree_patch.horizontal_center > girl_patch.horizontal_center:
        car_patches = image_patch.find(""car"")
        # Question assumes only one car patch
        if len(car_patches) == 0:
            return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
        for car_patch in car_patches:
            if car_patch.horizontal_center > palm_tree_patch.horizontal_center:
                return ""yes""
    return ""no"""
459445,In which part is the silver device?," # assumes only one silver device
    image_patch = ImagePatch(image)
    silver_device_patches = image_patch.find(""silver device"")
    if len(silver_device_patches) == 0:
        # If no silver device is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if silver_device_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11786203,What is the man on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?," # returns yes or no
    image_patch = ImagePatch(image)
    is_brown_door = image_patch.exists(""brown door"")
    is_brown_chair = image_patch.exists(""brown chair"")
    return bool_to_yesno(is_brown_door or is_brown_chair)"
131031372,What is the napkin in?," # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the napkin in?"")"
1241681,Are there any people behind the white dessert?," # assumes one white dessert
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    dessert_patches = image_patch.find(""white dessert"")
    # Question assumes only one white dessert patch
    if len(dessert_patches) == 0:
        # If no white dessert is found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    for people_patch in people_patches:
        for dessert_patch in dessert_patches:
            if people_patch.horizontal_center < dessert_patch.horizontal_center:
                return ""yes""
    return ""no"""
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")"
8553578,What is the Pikachu doing?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?"," # assumes one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the large mountains?"")"
5107295,What is in the sky?," # contains a relation (in the sky), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of watercraft is the fruit on?"")"
1827218,Is the bottle in the bottom of the image?," # bottle is a common object, so it's better to ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the bottle in the bottom of the image?"")"
10938155,What color is the sky?," # returns the color of the sky
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?," # assumes one sail
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    sail_patch = sail_patches[0]
    return sail_patch.best_text_match([""white"", ""red""])"
3662784,Do you see either any traffic lights or cars?," # returns yes or no
    image_patch = ImagePatch(image)
    is_traffic_light = image_patch.exists(""traffic light"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_traffic_light or is_car)"
15515711,Are there any girls to the right of the yellow helmet?," # assumes one yellow helmet
    image_patch = ImagePatch(image)
    yellow_helmet_patches = image_patch.find(""yellow helmet"")
    # Question assumes only one yellow helmet patch
    if len(yellow_helmet_patches) == 0:
        # If no yellow helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    yellow_helmet_patch = yellow_helmet_patches[0]
    girl_patches = image_patch.find(""girl"")
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center > yellow_helmet_patch.horizontal_center:
            return ""yes""
    return ""no"""
6315316,Which kind of furniture is in front of the window?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?," # assumes only one faucet
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center < image_patch.find(""faucet"")[0].horizontal_center:
            return appliance_patch.simple_query(""What appliance is to the left of the faucet?"")
    return ""no"""
41050828,What is the color of the jacket?," # returns the color of the jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"")"
610914,Is the green boat to the right or to the left of the wood house?," # assumes one green boat and one wood house
    image_patch = ImagePatch(image)
    green_boat_patches = image_patch.find(""green boat"")
    wood_house_patches = image_patch.find(""wood house"")
    if len(green_boat_patches) == 0 or len(wood_house_patches) == 0:
        # If no green boat or wood house is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    green_boat_patch = green_boat_patches[0]
    wood_house_patch = wood_house_patches[0]
    if green_boat_patch.horizontal_center > wood_house_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13158346,Is the woman in the bottom part of the picture?," # assumes one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
16318707,Are there either any colorful bikes or skateboards?," # returns yes or no
    image_patch = ImagePatch(image)
    is_colorful_bike = image_patch.exists(""colorful bike"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_colorful_bike or is_skateboard)"
2805654,Is the bag to the right or to the left of the bench?," # assumes one bag and one bench
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    bench_patches = image_patch.find(""bench"")
    if len(bag_patches) == 0 or len(bench_patches) == 0:
        # If no bag or bench is found, query the image directly
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    bag_patch = bag_patches[0]
    bench_patch = bench_patches[0]
    if bag_patch.horizontal_center > bench_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15315607,What do you think is in the sky?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the truck near the gas station?"")"
12140940,"What are the headphones on, a sofa or a desk?"," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")"
727533,Does the bun look brown and toasted?," # assumes one bun patch
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    bun_patch = bun_patches[0]
    return bool_to_yesno(bun_patch.verify_property(""bun"", ""brown"") and bun_patch.verify_property(""bun"", ""toasted""))"
61044602,What is in the brown basket?," # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the brown basket?"")"
16827204,Is the marker different in color than the paper?," # returns yes or no
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    marker_color = marker_patches[0].simple_query(""What color is the marker?"")
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_color = paper_patches[0].simple_query(""What color is the paper?"")
    return bool_to_yesno(marker_color != paper_color)"
1284539,Is there a racket to the right of the man on the right side?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    man_patch = man_patches[0]
    # Question assumes only one man patch
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""no""
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1257391,What place is this?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
16223517,What do you think is the color of the large device?," # returns the color of the large device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What do you think is the color of the large device?"")
    return device_patches[0].simple_query(""What do you think is the color of the large device?"")"
1024280,Does the shirt look long sleeved or sleeveless?," # returns a boolean
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?""))
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""long sleeved""))"
2769463,Which kind of animal is lying in the chair?," # assumes one chair and one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    chair_patches = image_patch.find(""chair"")
    if len(animal_patches) == 0 or len(chair_patches) == 0:
        # If no animal or chair is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    animal_patch = animal_patches[0]
    chair_patch = chair_patches[0]
    if animal_patch.horizontal_center < chair_patch.horizontal_center:
        return animal_patch.simple_query(""Which kind of animal is lying in the chair?"")
    else:
        return animal_patch.simple_query(""Which kind of animal is standing in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?," # assumes one white box and one crate
    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    crate_patches = image_patch.find(""crate"")
    if len(white_box_patches) == 0 or len(crate_patches) == 0:
        # If no white box or crate is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    white_box_patch = white_box_patches[0]
    crate_patch = crate_patches[0]
    if white_box_patch.horizontal_center > crate_patch.horizontal_center:
        return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?," # returns yes or no
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?," # assumes one flower pot
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return bool_to_yesno(flower_pot_patches[0].verify_property(""flower pot"", ""clay""))"
191006281,Does the sky look clear and gray?," # clear and gray are properties
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""clear"") and image_patch.verify_property(""sky"", ""gray""))"
681336,Do you see hats or gloves that are white?," # returns yes or no
    image_patch = ImagePatch(image)
    is_hat = image_patch.exists(""hat"")
    is_glove = image_patch.exists(""glove"")
    if is_hat or is_glove:
        return ""yes""
    return ""no"""
1300368,What is on the cabinet that is to the right of the keyboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")"
172394,What is the animal to the left of the tap called?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal to the left of the tap called?"")"
738176,Is the chair on the right?," # assumes one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return image_patch.simple_query(""Is the chair on the right?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
4194919,Is the child on the right of the picture?," # assumes one child and one picture
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    picture_patches = image_patch.find(""picture"")
    if len(child_patches) == 0 or len(picture_patches) == 0:
        # If no child or picture is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    child_patch = child_patches[0]
    picture_patch = picture_patches[0]
    if child_patch.horizontal_center > picture_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
3585327,Who is on the surfboard?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard?"")"
1711172,What size are the packages the candle is on top of?," # returns a list of strings
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    for candle_patch in candle_patches:
        package_patches = image_patch.find(""package"")
        # Question assumes only one package patch
        if len(package_patches) == 0:
            return image_patch.simple_query(""What size are the packages the candle is on top of?"")
        package_patch = package_patches[0]
        if package_patch.vertical_center < candle_patch.vertical_center:
            return package_patch.simple_query(""What size are the packages the candle is on top of?"")
    return image_patch.simple_query(""What size are the packages the candle is on top of?"")"
4353895,Who is on the snowboard on the right?," # assumes one snowboard and one person
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    person_patches = image_patch.find(""person"")
    if len(snowboard_patches) == 0 or len(person_patches) == 0:
        # If no snowboard or person is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    snowboard_patch = snowboard_patches[0]
    person_patch = person_patches[0]
    if person_patch.horizontal_center > snowboard_patch.horizontal_center:
        return person_patch.simple_query(""Who is on the snowboard on the right?"")
    return person_patch.simple_query(""Who is on the snowboard on the left?"")"
17929304,What is the vehicle that is on the road?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?," # assumes only one bread patch
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return bread_patches[0].simple_query(""What color is the crust?"")"
5672474,Is the plate to the left or to the right of the beer on the left?," # assumes one beer patch
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    plate_patch = plate_patches[0]
    beer_patches = image_patch.find(""beer"")
    # Question assumes only one beer patch
    if len(beer_patches) == 0:
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    beer_patch = beer_patches[0]
    if plate_patch.horizontal_center < beer_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
11341284,What is the pattern of the mattress on the street?," # returns the pattern of the mattress on the street
    image_patch = ImagePatch(image)
    mattress_patches = image_patch.find(""mattress"")
    # Question assumes only one mattress patch
    if len(mattress_patches) == 0:
        # If no mattress is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the mattress on the street?"")
    return mattress_patches[0].simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?," # returns a boolean
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Are there any boys behind the fence?""))
    for boy_patch in boy_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center > boy_patch.horizontal_center:
                return ""yes""
    return ""no"""
19203395,Is the white toilet paper to the right or to the left of the toilet?," # assumes one toilet and one white toilet paper
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    white_toilet_paper_patches = image_patch.find(""white toilet paper"")
    if len(toilet_patches) == 0 or len(white_toilet_paper_patches) == 0:
        # If no toilet or white toilet paper is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    toilet_patch = toilet_patches[0]
    white_toilet_paper_patch = white_toilet_paper_patches[0]
    if white_toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1194938,Are there any airplanes in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""airplane"") and image_patch.exists(""building"") and image_patch.verify_property(""airplane"", ""in front of"") and image_patch.verify_property(""building"", ""in front of""))"
5350205,How clean is the road that the car is on the side of?," # assumes one road and one car
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    car_patches = image_patch.find(""car"")
    if len(road_patches) == 0 or len(car_patches) == 0:
        # If no road or car is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    road_patch = road_patches[0]
    car_patch = car_patches[0]
    if road_patch.horizontal_center < car_patch.horizontal_center:
        return road_patch.simple_query(""How clean is the road that the car is on the side of?"")
    else:
        return road_patch.simple_query(""How clean is the road that the car is on the side of?"")"
4256016,"In which part of the picture is the black van, the bottom or the top?"," # assumes one van
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    van_patch = van_patches[0]
    if van_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the right of the fence doing?"")"
16471124,Does the horse have a different color than the boot?," # returns yes or no
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    horse_color = horse_patches[0].simple_query(""What color is the horse?"")
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        return ""no""
    boot_color = boot_patches[0].simple_query(""What color is the boot?"")
    return ""yes"" if horse_color != boot_color else ""no"""
958247,Is the mouse to the right of a chair?," # assumes one mouse and one chair
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    chair_patches = image_patch.find(""chair"")
    if len(mouse_patches) == 0 or len(chair_patches) == 0:
        # If no mouse or chair is found, query the image directly
        return image_patch.simple_query(""Is the mouse to the right of a chair?"")
    mouse_patch = mouse_patches[0]
    chair_patch = chair_patches[0]
    return bool_to_yesno(mouse_patch.horizontal_center > chair_patch.horizontal_center)"
11179512,The basket made of plastic is what color?," # returns the color of the basket
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    return basket_patches[0].simple_query(""What color is the basket?"")"
8816272,Do you see any elephant to the left of the bird?," # returns yes or no
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
    for elephant_patch in elephant_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if bird_patch.horizontal_center < elephant_patch.horizontal_center:
                return ""yes""
    return ""no"""
11168592,What is the animal in front of the lamp?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the jacket?"")
    for person_patch in person_patches:
        is_wearing_jacket = (person_patch.simple_query(""Is the person wearing a jacket?"") == ""yes"")
        if is_wearing_jacket:
            return person_patch.simple_query(""Who is wearing the jacket?"") # crop would include the jacket so keep it in the query
    # If no person is wearing a jacket, pick the first person
    return person_patches[0].simple_query(""Who is wearing the jacket?"")"
7398502,What is the food to the left of the girl in the bottom of the photo?," # assumes one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    girl_patch = girl_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < girl_patch.horizontal_center and food_patch.vertical_center == girl_patch.vertical_center:
            return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")"
5145864,What is the device that the camera is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that the camera is in front of?"")"
788143,Is the man on the surfboard?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the surfboard?"")"
15854501,What device has the same color as the device in the box?," # assumes one device in the box
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    device_patch = device_patches[0]
    device_color = device_patch.simple_query(""What color is the device?"")
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.simple_query(""What color is the device?"") == device_color:
            return device_patch.simple_query(""What device has the same color as the device in the box?"")
    return ""no"""
3228067,What is the child wearing?," # returns the answer to ""What is the child wearing?""
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    return child_patches[0].simple_query(""What is the child wearing?"")"
6817336,Is the blue sky behind a cathedral?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue sky behind a cathedral?"")"
6347271,"In which part of the image is the yellow pepper, the bottom or the top?"," # image is a 3D numpy array
    image_patch = ImagePatch(image)
    yellow_pepper_patches = image_patch.find(""yellow pepper"")
    # Question assumes only one yellow pepper patch
    if len(yellow_pepper_patches) == 0:
        # If no yellow pepper is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    if yellow_pepper_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?," # assumes one woman and one animal
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    animal_patches = image_patch.find(""animal"")
    if len(woman_patches) == 0 or len(animal_patches) == 0:
        # If no woman or animal is found, query the image directly
        return image_patch.simple_query(""What animal is the woman feeding?"")
    woman_patch = woman_patches[0]
    animal_patch = animal_patches[0]
    if woman_patch.horizontal_center < animal_patch.horizontal_center:
        return animal_patch.simple_query(""What animal is the woman feeding?"")
    else:
        return woman_patch.simple_query(""What animal is the woman feeding?"")"
3427727,On which side is the bucket?," # assumes one bucket
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    bucket_patch = bucket_patches[0]
    if bucket_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
31050314,Is the small chimney in the bottom part of the picture?," # assumes one chimney patch
    image_patch = ImagePatch(image)
    chimney_patches = image_patch.find(""chimney"")
    if len(chimney_patches) == 0:
        # If no chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    chimney_patch = chimney_patches[0]
    if chimney_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3503396,Are the pants purple?," # returns yes or no
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    return bool_to_yesno(pants_patches[0].verify_property(""pants"", ""purple""))"
11742862,Which kind of furniture is to the right of the paper towels?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")"
5891809,What kind of furniture is gray?," # returns the first gray furniture found
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""gray""):
            return furniture_patch.simple_query(""What kind of furniture is gray?"")
    return ""no"""
5370528,Is the hair white and long?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    person_patch = person_patches[0]
    is_white = person_patch.verify_property(""hair"", ""white"")
    is_long = person_patch.verify_property(""hair"", ""long"")
    return bool_to_yesno(is_white and is_long)"
781153,Do you see trains near the lamp post that looks white?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")"
5543456,Is the container to the left of the person that wears bracelets?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")"
163134,What do you think is on the roof?," # assumes one roof patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?," # returns a boolean
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
5511395,What is wrapped in paper?," # paper is a property of the object, so check if the object has the property
    image_patch = ImagePatch(image)
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        # If no object is found, query the image directly
        return image_patch.simple_query(""What is wrapped in paper?"")
    for object_patch in object_patches:
        if object_patch.verify_property(""object"", ""paper""):
            return object_patch.simple_query(""What is wrapped in paper?"")
    return ""nothing"""
5611256,Are there any couches in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch""))"
1162826,The man is in what?," # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is in what?"")"
81020685,Which color is the small house?," # returns the color of the small house
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    if house_patches[0].verify_property(""house"", ""small""):
        return house_patches[0].simple_query(""What color is the small house?"")
    return image_patch.simple_query(""Which color is the small house?"")"
19640724,Who is in the bathroom?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is in the bathroom?"")
    return person_patches[0].simple_query(""Who is in the bathroom?"")"
289960,Do you see a racket to the right of the boy that is looking at the tie?," # assumes one boy and one tie
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    tie_patches = image_patch.find(""tie"")
    # Question assumes one boy and one tie patch
    if len(boy_patches) == 0 or len(tie_patches) == 0:
        # If no boy or tie is found, query the image directly
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    boy_patch = boy_patches[0]
    tie_patch = tie_patches[0]
    racket_patches = image_patch.find(""racket"")
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > boy_patch.horizontal_center and racket_patch.horizontal_center < tie_patch.horizontal_center:
            return ""yes""
    return ""no"""
9957748,Does the hair appear to be long and brown?," # hair is a property of a person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the hair appear to be long and brown?"")
    person_patch = person_patches[0]
    return bool_to_yesno(person_patch.verify_property(""hair"", ""long"") and person_patch.verify_property(""hair"", ""brown""))"
21031610,What is the shoe that looks black and white resting on?," # assumes one shoe patch
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    shoe_patch = shoe_patches[0]
    if shoe_patch.verify_property(""shoe"", ""black and white""):
        return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?," # assumes one white pillow and one black animal
    image_patch = ImagePatch(image)
    white_pillow_patches = image_patch.find(""white pillow"")
    black_animal_patches = image_patch.find(""black animal"")
    if len(white_pillow_patches) == 0 or len(black_animal_patches) == 0:
        # If no white pillow or black animal is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    white_pillow_patch = white_pillow_patches[0]
    black_animal_patch = black_animal_patches[0]
    if white_pillow_patch.vertical_center > black_animal_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
457770,What kind of clothing is striped?," # returns a list of clothing types
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    return clothing_patches[0].best_text_match([""shirt"", ""pants"", ""dress""])"
12603153,Are the child's eyes blue and open?," # returns a boolean
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Are the child's eyes blue and open?""))
    child_patch = child_patches[0]
    return bool_to_yesno(child_patch.verify_property(""eyes"", ""blue"") and child_patch.verify_property(""eyes"", ""open""))"
9480973,What is located on top of the tub?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?," # assumes one white plate
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    for fork_patch in fork_patches:
        plate_patches = image_patch.find(""white plate"")
        # Question assumes only one white plate patch
        if len(plate_patches) == 0:
            return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
        plate_patch = plate_patches[0]
        if fork_patch.horizontal_center > plate_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
13420253,On which side of the photo is the chair?," # assumes one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?," # assumes one label and one object
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    object_patches = image_patch.find(""object"")
    if len(label_patches) == 0 or len(object_patches) == 0:
        # If no label or object is found, query the image directly
        return image_patch.simple_query(""What is the label on?"")
    label_patch = label_patches[0]
    object_patch = object_patches[0]
    return label_patch.simple_query(""What is the label on?"") # crop would include the object so keep it in the query"
3322787,What bird is to the left of the person that is wearing a shirt?," # assumes one person and one bird
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    shirt_patch = shirt_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    bird_patch = bird_patches[0]
    if bird_patch.horizontal_center < person_patch.horizontal_center:
        return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")"
6399594,On which side is the man?," # left or right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6930120,Is the glass bowl on the right or on the left?," # assumes one glass bowl
    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    if len(glass_bowl_patches) == 0:
        # If no glass bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    glass_bowl_patch = glass_bowl_patches[0]
    if glass_bowl_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
12619961,What vehicles are to the left of the taxi?," # returns a list of strings
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    taxi_patch = taxi_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return []
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.horizontal_center < taxi_patch.horizontal_center:
        return [vehicle_patch.simple_query(""What vehicle is to the left of the taxi?"")]
    return []"
13362315,Is the basket on the shelf black and empty?," # returns a boolean
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the basket on the shelf black and empty?""))
    basket_patch = basket_patches[0]
    is_on_shelf = basket_patch.simple_query(""Is the basket on the shelf?"")
    is_black = basket_patch.simple_query(""Is the basket black?"")
    is_empty = basket_patch.simple_query(""Is the basket empty?"")
    return bool_to_yesno(is_on_shelf and is_black and is_empty)"
3830854,What is the animal that is standing next to the donkey that is standing in the hay?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")"
18382324,Is this a bed or a table?," # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is this a bed or a table?""))"
18104571,"Which animal is that, a bird or a cat?"," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    animal_patch = animal_patches[0]
    return animal_patch.best_text_match([""bird"", ""cat""])"
2913379,Do you see any fence or pot?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)"
9294271,What is in front of the fence the zebra is kept in?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")"
10741434,What is the vegetable that is on top of the plate called?," # contains a relation (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")"
765962,Where is the car?," # returns the location of the car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Where is the car?"")
    return car_patches[0].simple_query(""Where is the car?"")"
12399262,Is there either a yellow truck or airplane?," # returns yes or no
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)"
13964213,Is the man on the left of the photo?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
16171369,What is covered in the snow?," # assumes one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?," # assumes one plastic bottle
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""plastic bottle"")
    if len(bottle_patches) == 0:
        # If no plastic bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5858491,Do you see any ropes on the fence that is on the left of the picture?," # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        rope_patches = image_patch.find(""rope"")
        if len(rope_patches) > 0:
            return ""yes""
    return ""no"""
17834539,Are there any lamps in the scene?," # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp""))"
15658176,Who is wearing a helmet?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        is_wearing_helmet = (person_patch.simple_query(""Is the person wearing a helmet?"") == ""yes"")
        if is_wearing_helmet:
            return person_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no person is wearing a helmet, query the image directly
    return image_patch.simple_query(""Who is wearing a helmet?"")"
14372400,Does that coat have red color?," # returns yes or no
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red""))"
411886,Are there any curtains or blankets in this scene?," # returns yes or no
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?," # assumes one man and one remote
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    remote_patches = image_patch.find(""remote"")
    # Question assumes only one remote patch
    if len(remote_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    remote_patch = remote_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center < man_patch.horizontal_center and furniture_patch.horizontal_center > remote_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")"
51039491,Is the fence black or red?," # returns a boolean
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    return fence_patches[0].best_text_match([""black"", ""red""])"
7425912,What animal is standing in the field?," # assumes one field
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is standing in the field?"")"
13136338,What animal is in front of the dog which is to the right of the bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")"
3775066,Which color are the cabinets in the bottom of the picture?," # assumes one cabinet patch
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.vertical_center < image_patch.vertical_center:
        return cabinet_patch.simple_query(""What color are the cabinets?"")
    else:
        return ""no"""
17206239,Is the happy girl to the right of a player?," # assumes one happy girl and one player
    image_patch = ImagePatch(image)
    happy_girl_patches = image_patch.find(""happy girl"")
    player_patches = image_patch.find(""player"")
    if len(happy_girl_patches) == 0 or len(player_patches) == 0:
        # If no happy girl or player is found, query the image directly
        return image_patch.simple_query(""Is the happy girl to the right of a player?"")
    happy_girl_patch = happy_girl_patches[0]
    player_patch = player_patches[0]
    if happy_girl_patch.horizontal_center > player_patch.horizontal_center:
        return ""yes""
    return ""no"""
2992517,"What piece of furniture is not wooden, the table or the chair?"," # assumes one table and one chair
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one table and one chair patch
    if len(table_patches) == 0 or len(chair_patches) == 0:
        # If no table or chair is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    table_patch = table_patches[0]
    chair_patch = chair_patches[0]
    if table_patch.verify_property(""table"", ""wooden"") and chair_patch.verify_property(""chair"", ""wooden""):
        return ""none""
    elif not table_patch.verify_property(""table"", ""wooden"") and chair_patch.verify_property(""chair"", ""wooden""):
        return ""table""
    else:
        return ""chair"""
1827558,Which side of the image is the kettle on?," # assumes one kettle patch
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    kettle_patch = kettle_patches[0]
    if kettle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2785208,Where is the man?," # returns the location of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif man_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
6623967,Is the baby near the countertop chewing a computer mouses?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouse?"")"
12804807,Is the small bottle open or closed?," # bottle is a container
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    bottle_patch = bottle_patches[0]
    return bottle_patch.simple_query(""Is the small bottle open or closed?"")"
18437691,Is the clock small or large?," # returns a boolean
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    return bool_to_yesno(clock_patches[0].verify_property(""clock"", ""small""))"
9482318,Are there either any glasses or bottles in this photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_glasses = image_patch.exists(""glasses"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glasses or is_bottle)"
12362819,Is the sky blue or dark?," # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""blue""))"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?," # assumes one shelf and one cup
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one shelf and one cup patch
    if len(shelf_patches) == 0 or len(cup_patches) == 0:
        # If no shelf or cup is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    shelf_patch = shelf_patches[0]
    cup_patch = cup_patches[0]
    if cup_patch.horizontal_center > shelf_patch.horizontal_center:
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    return image_patch.simple_query(""What is the piece of furniture to the left of the shelf the cup is on called?"")"
1416636,Are there both bridges and chandeliers in this photograph?," # returns a boolean
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?"," # assumes one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""door""))"
13562221,What's the bear on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the bear on?"")"
9536851,Is the woman in front of the trees holding scissors?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")"
9682405,What is on the machine?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the machine?"")"
8649435,What is on the white wall?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?," # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""logo"", ""red""))"
14301289,What type of vehicle is to the left of the white vehicle?," # assumes one white vehicle
    image_patch = ImagePatch(image)
    white_vehicle_patches = image_patch.find(""white vehicle"")
    # Question assumes only one white vehicle patch
    if len(white_vehicle_patches) == 0:
        # If no white vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    white_vehicle_patch = white_vehicle_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < white_vehicle_patch.horizontal_center:
            return vehicle_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    return ""no"""
523976,Which kind of vehicle is large?," # returns the answer to the question
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""large""):
            return vehicle_patch.simple_query(""Which kind of vehicle is large?"") # crop would include the vehicle so keep it in the query
    # If no vehicle is large, query the image directly
    return image_patch.simple_query(""Which kind of vehicle is large?"")"
3423213,Who is in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?," # assumes one brown chair and one ottoman
    image_patch = ImagePatch(image)
    ottoman_patches = image_patch.find(""ottoman"")
    brown_chair_patches = image_patch.find(""brown chair"")
    if len(ottoman_patches) == 0 or len(brown_chair_patches) == 0:
        # If no ottoman or brown chair is found, query the image directly
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    ottoman_patch = ottoman_patches[0]
    brown_chair_patch = brown_chair_patches[0]
    if ottoman_patch.horizontal_center > brown_chair_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
5716578,Is there a laptop on the bed near the magazines?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")"
8215791,Is the porcelain toilet to the left or to the right of the small trash can?," # assumes one porcelain toilet and one small trash can
    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    small_trash_can_patches = image_patch.find(""small trash can"")
    if len(porcelain_toilet_patches) == 0 or len(small_trash_can_patches) == 0:
        # If no porcelain toilet or small trash can is found, query the image directly
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    porcelain_toilet_patch = porcelain_toilet_patches[0]
    small_trash_can_patch = small_trash_can_patches[0]
    if porcelain_toilet_patch.horizontal_center < small_trash_can_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17528455,What is in front of the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?," # returns yes or no
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"")
    goggles_color = goggles_patches[0].simple_query(""What color are the goggles?"")
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one gloves patch
    if len(gloves_patches) == 0:
        return ""no""
    gloves_color = gloves_patches[0].simple_query(""What color are the gloves?"")
    return bool_to_yesno(goggles_color != gloves_color)"
947724,Is there any purple pillow or kite in this photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_purple_pillow = image_patch.exists(""purple pillow"")
    is_kite = image_patch.exists(""kite"")
    return bool_to_yesno(is_purple_pillow or is_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?"," # returns a list of strings
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""person"")
    # Question assumes at least one person patch
    if len(people_patches) == 0:
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    for person_patch in people_patches:
        if person_patch.horizontal_center > man_patch.horizontal_center:
            return person_patch.simple_query(""standing or sitting"")"
15492262,Which kind of furniture is white?," # returns the first white furniture found
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""Which kind of furniture is white?"")
    return ""no"""
151032547,Is the bear on the right side?," # assumes one bear patch
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    bear_patch = bear_patches[0]
    if bear_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
5698674,Are there either any planters or benches?," # returns yes or no
    image_patch = ImagePatch(image)
    is_planters = image_patch.exists(""planters"")
    is_benches = image_patch.exists(""benches"")
    return bool_to_yesno(is_planters or is_benches)"
19397103,What is the person that is standing staring at?," # assumes one person and one object
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    object_patches = image_patch.find(""object"")
    # Question assumes only one person and one object patch
    if len(person_patches) == 0 or len(object_patches) == 0:
        # If no person or object is found, query the image directly
        return image_patch.simple_query(""What is the person that is standing staring at?"")
    person_patch = person_patches[0]
    object_patch = object_patches[0]
    return person_patch.simple_query(""What is the person that is standing staring at?"") # crop would include the object so keep it in the query"
11630681,What is the color of the necklace?," # returns the color of the necklace
    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    # Question assumes only one necklace patch
    if len(necklace_patches) == 0:
        # If no necklace is found, query the image directly
        return image_patch.simple_query(""What is the color of the necklace?"")
    return necklace_patches[0].simple_query(""What is the color of the necklace?"")"
248245,Is the table to the left or to the right of the fence?," # assumes one table and one fence
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    fence_patches = image_patch.find(""fence"")
    if len(table_patches) == 0 or len(fence_patches) == 0:
        # If no table or fence is found, query the image directly
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    table_patch = table_patches[0]
    fence_patch = fence_patches[0]
    if table_patch.horizontal_center < fence_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
837033,Are there round windows or doors?," # returns yes or no
    image_patch = ImagePatch(image)
    is_round_window = image_patch.exists(""round window"")
    is_round_door = image_patch.exists(""round door"")
    return bool_to_yesno(is_round_window or is_round_door)"
5249150,Are there any bears or napkins in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")"
61006749,Who is dressed in pink?," # returns the name of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is dressed in pink?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person dressed in pink?"") == ""yes"":
            return person_patch.simple_query(""Who is dressed in pink?"") # crop would include the person so keep it in the query
    return ""no one"""
6122955,Does the pillow have yellow color?," # returns a boolean
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the pillow have yellow color?""))
    return bool_to_yesno(pillow_patches[0].verify_property(""pillow"", ""yellow""))"
6861738,Is the old woman to the right or to the left of the faucet?," # assumes only one old woman and one faucet
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    faucet_patches = image_patch.find(""faucet"")
    if len(old_woman_patches) == 0 or len(faucet_patches) == 0:
        # If no old woman or faucet is found, query the image directly
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    old_woman_patch = old_woman_patches[0]
    faucet_patch = faucet_patches[0]
    if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15833048,Which kind of animal is on the road?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is on the road?"")"
9524339,What animal is large?," # returns the name of the animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""large""):
            return animal_patch.simple_query(""What animal is large?"")
    return ""no animal is large"""
18255749,How clean are the sheets the pillow is to the right of?," # assumes one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheet_patches = image_patch.find(""sheet"")
    # Question assumes only one sheet patch
    if len(sheet_patches) == 0:
        # If no sheet is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    sheet_patch = sheet_patches[0]
    if pillow_patch.horizontal_center > sheet_patch.horizontal_center:
        return sheet_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    else:
        return sheet_patch.simple_query(""How clean are the sheets the pillow is to the left of?"")"
19797097,What's the man wearing?," # returns the answer to ""What's the man wearing?""
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
6899090,Is the man to the right or to the left of the appliance that looks white?," # assumes one man and one appliance
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    appliance_patches = image_patch.find(""appliance"")
    if len(man_patches) == 0 or len(appliance_patches) == 0:
        # If no man or appliance is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patch = appliance_patches[0]
    if man_patch.horizontal_center > appliance_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
3357701,Does the dog to the right of the other dog have white color?," # assumes one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    for i in range(len(dog_patches)):
        for j in range(i+1, len(dog_patches)):
            if dog_patches[j].horizontal_center > dog_patches[i].horizontal_center:
                if dog_patches[j].verify_property(""dog"", ""white""):
                    return ""yes""
    return ""no"""
2829418,What's the girl holding?," # assumes one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What's the girl holding?"")
    girl_patch = girl_patches[0]
    holding_patches = image_patch.find(""holding"")
    # Question assumes only one holding patch
    if len(holding_patches) == 0:
        return image_patch.simple_query(""What's the girl holding?"")
    return holding_patches[0].simple_query(""What's the girl holding?"")"
15930109,Which kind of vehicle is blue?," # returns the name of the vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""blue""):
            return vehicle_patch.simple_query(""Which kind of vehicle is blue?"") # crop would include the color so keep it in the query
    return ""no"""
1525382,What type of vegetable is on the food with the cheese?," # assumes one food patch and one cheese patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    cheese_patches = image_patch.find(""cheese"")
    if len(food_patches) == 0 or len(cheese_patches) == 0:
        # If no food or cheese is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    food_patch = food_patches[0]
    cheese_patch = cheese_patches[0]
    if food_patch.horizontal_center > cheese_patch.horizontal_center:
        return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")"
8548980,Are there either players or hand soaps?," # returns a boolean
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?"," # assumes only one sandwich and one croissant
    image_patch = ImagePatch(image)
    sandwich_patches = image_patch.find(""sandwich"")
    croissant_patches = image_patch.find(""croissant"")
    if len(sandwich_patches) == 0 or len(croissant_patches) == 0:
        # If no sandwich or croissant is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    if sandwich_patches[0].verify_property(""food"", ""made""):
        return ""croissant""
    else:
        return ""sandwich"""
6423906,Which kind of food is on the plate?," # assumes one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    plate_patch = plate_patches[0]
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    food_patch = food_patches[0]
    return food_patch.simple_query(""Which kind of food is on the plate?"")"
1993231,Are the animals in the image of different types?," # returns yes or no
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    animal_types = set()
    for animal_patch in animal_patches:
        animal_type = animal_patch.simple_query(""What type of animal is this?"")
        animal_types.add(animal_type)
    return bool_to_yesno(len(animal_types) > 1)"
13949656,Are there any people to the left of the tray?," # assumes one tray
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one tray patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for people_patch in people_patches:
        tray_patches = image_patch.find(""tray"")
        for tray_patch in tray_patches:
            if tray_patch.horizontal_center > people_patch.horizontal_center:
                return ""yes""
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?," # assumes one pineapple patch
    image_patch = ImagePatch(image)
    pineapple_patches = image_patch.find(""pineapple"")
    if len(pineapple_patches) == 0:
        # If no pineapple is found, query the image directly
        return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")
    return bool_to_yesno(pineapple_patches[0].verify_property(""pineapple"", ""ripe""))"
9392591,Are there chairs or smoothies?," # returns yes or no
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?," # assumes one sheep patch
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    sheep_patch = sheep_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > sheep_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is to the right of the sheep?"")
    return ""no"""
9896138,Are there any boxes to the left of the screen in the picture?," # screen is the entire image
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in box_patches:
        if box_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1400333,What do you think is the man on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?," # returns a boolean
    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    return boot_patches[0].best_text_match([""white"", ""orange""])"
3659880,Does the wood boat have silver color?," # returns a boolean
    image_patch = ImagePatch(image)
    wood_boat_patches = image_patch.find(""wood boat"")
    # Question assumes only one wood boat patch
    if len(wood_boat_patches) == 0:
        # If no wood boat is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the wood boat have silver color?""))
    return bool_to_yesno(wood_boat_patches[0].verify_property(""wood boat"", ""silver""))"
1827802,Is the red pot on the appliance to the right of the mixer?," # assumes one red pot and one appliance to the right of the mixer
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    red_pot_patch = red_pot_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch to the right of the mixer
    if len(appliance_patches) == 0:
        return ""no""
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center > red_pot_patch.horizontal_center:
            return ""yes""
    return ""no"""
14809102,The phone that is in front of the camera is of what color?," # assumes one phone and one camera
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    camera_patches = image_patch.find(""camera"")
    if len(phone_patches) == 0 or len(camera_patches) == 0:
        # If no phone or camera is found, query the image directly
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    phone_patch = phone_patches[0]
    camera_patch = camera_patches[0]
    if phone_patch.horizontal_center > camera_patch.horizontal_center:
        return phone_patch.simple_query(""What color is the phone?"")
    else:
        return phone_patch.simple_query(""What color is the phone?"")"
61001545,What type of food is to the left of the silver spoon?," # assumes one spoon patch
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    spoon_patch = spoon_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < spoon_patch.horizontal_center:
            return food_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    return ""no"""
799463,Are there both a window and a door in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
11260725,Does the water have small size and white color?," # returns a boolean
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the water have small size and white color?""))
    water_patch = water_patches[0]
    return bool_to_yesno(water_patch.verify_property(""water"", ""small"") and water_patch.verify_property(""water"", ""white""))"
2397653,Are there any fences that are white?," # returns yes or no
    image_patch = ImagePatch(image)
    is_white = image_patch.verify_property(""fence"", ""white"")
    return bool_to_yesno(is_white)"
1554603,Who is holding the animal?," # assumes one animal and one person
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    person_patches = image_patch.find(""person"")
    if len(animal_patches) == 0 or len(person_patches) == 0:
        # If no animal or person is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    animal_patch = animal_patches[0]
    person_patch = person_patches[0]
    if animal_patch.horizontal_center < person_patch.horizontal_center:
        return person_patch.simple_query(""Who is holding the animal?"")
    else:
        return person_patch.simple_query(""Who is holding the animal?"")"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?," # assumes one stroller patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patch = man_patches[0]
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    stroller_patch = stroller_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    people_patch = people_patches[0]
    if man_patch.horizontal_center > people_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
8988476,What kind of furniture is presented in this photo?," # returns the answer to ""What kind of furniture is presented in this photo?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?," # assumes one man and one backpack
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    backpack_patches = image_patch.find(""backpack"")
    if len(man_patches) == 0 or len(backpack_patches) == 0:
        # If no man or backpack is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patch = backpack_patches[0]
    if man_patch.horizontal_center < backpack_patch.horizontal_center:
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    return image_patch.simple_query(""What is the man holding?"")"
91058050,Are there both mouse pads and computer mice in the photograph?," # returns a boolean
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_computer_mouse = image_patch.exists(""computer mouse"")
    return bool_to_yesno(is_mouse_pad and is_computer_mouse)"
1972064,Is the person in front of the tree wearing jeans?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")"
167162,Is there a bike to the right of the purse that is to the right of the woman?," # assumes one woman and one purse
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    woman_patch = woman_patches[0]
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) == 0:
        return ""no""
    purse_patch = purse_patches[0]
    if purse_patch.horizontal_center < woman_patch.horizontal_center:
        return ""no""
    bike_patches = image_patch.find(""bike"")
    for bike_patch in bike_patches:
        if bike_patch.horizontal_center > purse_patch.horizontal_center:
            return ""yes""
    return ""no"""
1695388,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?," # assumes one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16921984,What is the bent man to the right of the other men doing?," # assumes one bent man and one other man
    image_patch = ImagePatch(image)
    bent_man_patches = image_patch.find(""bent man"")
    # Question assumes only one bent man patch
    if len(bent_man_patches) == 0:
        # If no bent man is found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    bent_man_patch = bent_man_patches[0]
    other_man_patches = image_patch.find(""man"")
    # Question assumes only one other man patch
    if len(other_man_patches) == 0:
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    other_man_patch = other_man_patches[0]
    if bent_man_patch.horizontal_center > other_man_patch.horizontal_center:
        return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return bent_man_patch.simple_query(""What is the bent man to the left of the other men doing?"")"
12175564,What animal are the men to the right of the girl leading?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")"
1219606,On which side of the image is the house?," # left or right
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1770499,Is the black suitcase to the right or to the left of the person on the left?," # assumes one person on the left
    image_patch = ImagePatch(image)
    black_suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one black suitcase patch
    if len(black_suitcase_patches) == 0:
        # If no black suitcase is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    black_suitcase_patch = black_suitcase_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    person_patch = person_patches[0]
    if black_suitcase_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
5282406,Is the pot to the left of a chair?," # assumes one pot and one chair
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    chair_patches = image_patch.find(""chair"")
    if len(pot_patches) == 0 or len(chair_patches) == 0:
        # If no pot or chair is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    pot_patch = pot_patches[0]
    chair_patch = chair_patches[0]
    return bool_to_yesno(pot_patch.horizontal_center < chair_patch.horizontal_center)"
10914401,Where are the people?," # returns the location of the people
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    people_patch = people_patches[0]
    if people_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif people_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
1919722,What animal is eating the grass?," # returns the name of the animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is eating the grass?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""eating""):
            return animal_patch.simple_query(""What animal is eating the grass?"") # crop would include eating so keep it in the query
    # If no animal is eating, query the image directly
    return image_patch.simple_query(""What animal is eating the grass?"")"
9681008,Who is wearing a helmet?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        is_wearing_helmet = (person_patch.simple_query(""Is the person wearing a helmet?"") == ""yes"")
        if is_wearing_helmet:
            return person_patch.simple_query(""Who is wearing a helmet?"") # crop would include the helmet so keep it in the query
    # If no person is wearing a helmet, query the image directly
    return image_patch.simple_query(""Who is wearing a helmet?"")"
16861675,Who is on the surfboard in the middle of the photo?," # assumes one surfboard
    image_patch = ImagePatch(image)
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        # If no surfboard is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    surfboard_patch = surfboard_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center == surfboard_patch.horizontal_center and person_patch.vertical_center == surfboard_patch.vertical_center:
        return person_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")"
10947426,What is the color of the lizard beside the banana?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the lizard beside the banana?"")"
18200684,Is the wine glass in the top or in the bottom part?," # assumes only one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?," # assumes one vehicle and one group of people
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    people_patches = image_patch.find(""people"")
    # Question assumes only one vehicle and one group of people
    if len(vehicle_patches) == 0 or len(people_patches) == 0:
        # If no vehicle or people are found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    vehicle_patch = vehicle_patches[0]
    people_patch = people_patches[0]
    if vehicle_patch.horizontal_center < people_patch.horizontal_center:
        return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    return vehicle_patch.simple_query(""What kind of vehicle is to the right of the people that are in the middle of the picture?"")"
171012637,Is the teddy bear to the right of a suitcase?," # assumes one teddy bear and one suitcase
    image_patch = ImagePatch(image)
    teddy_bear_patches = image_patch.find(""teddy bear"")
    suitcase_patches = image_patch.find(""suitcase"")
    if len(teddy_bear_patches) == 0 or len(suitcase_patches) == 0:
        # If no teddy bear or suitcase is found, query the image directly
        return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"")
    teddy_bear_patch = teddy_bear_patches[0]
    suitcase_patch = suitcase_patches[0]
    if teddy_bear_patch.horizontal_center > suitcase_patch.horizontal_center:
        return ""yes""
    return ""no"""
19861372,Is the woman's hair long or short?," # assumes one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""Is the woman's hair long or short?"")"
623889,Are both the television and the armchair the same color?," # returns yes or no
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""television"")
    # Question assumes only one tv patch
    if len(tv_patches) == 0:
        # If no tv is found, query the image directly
        return image_patch.simple_query(""Are both the television and the armchair the same color?"")
    armchair_patches = image_patch.find(""armchair"")
    # Question assumes only one armchair patch
    if len(armchair_patches) == 0:
        return ""no""
    tv_color = tv_patches[0].simple_query(""What color is the television?"")
    armchair_color = armchair_patches[0].simple_query(""What color is the armchair?"")
    return bool_to_yesno(tv_color == armchair_color)"
4917605,Is the shoe white or brown?," # returns a boolean
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
91055143,What is on the table?," # assumes one table
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
5430643,What do you think sits on the plate to the left of the tomato?," # assumes one tomato patch
    image_patch = ImagePatch(image)
    tomato_patches = image_patch.find(""tomato"")
    if len(tomato_patches) == 0:
        # If no tomato is found, query the image directly
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    tomato_patch = tomato_patches[0]
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    plate_patch = plate_patches[0]
    if plate_patch.horizontal_center < tomato_patch.horizontal_center:
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    else:
        return image_patch.simple_query(""What do you think sits on the plate to the right of the tomato?"")"
523936,Is the woman in the top part of the picture?," # assumes one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")"
14292161,The pot is of which color?," # returns the color of the pot
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].simple_query(""What color is the pot?"")"
17495150,"What device is black, the microphone or the laptop?"," # returns the device that is black
    image_patch = ImagePatch(image)
    microphone_patches = image_patch.find(""microphone"")
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one microphone and one laptop patch
    if len(microphone_patches) == 0 or len(laptop_patches) == 0:
        # If no microphone or laptop is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    for microphone_patch in microphone_patches:
        if microphone_patch.verify_property(""microphone"", ""black""):
            return ""microphone""
    for laptop_patch in laptop_patches:
        if laptop_patch.verify_property(""laptop"", ""black""):
            return ""laptop""
    return ""microphone"""
1521847,Is the cat on a desk?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the cat on a desk?"")"
16465081,The man is holding what?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    holding_patches = image_patch.find(""holding"")
    # Question assumes only one holding patch
    if len(holding_patches) == 0:
        return image_patch.simple_query(""The man is holding what?"")
    return holding_patches[0].simple_query(""What is the man holding?"")"
17387032,What is on the post?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")"
18906705,How big is the crowd?," # returns the number of people in the crowd
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""person"")
    return str(len(people_patches))"
6157200,Does the sign on the pole have white color?," # assumes one sign and one pole
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    pole_patches = image_patch.find(""pole"")
    if len(sign_patches) == 0 or len(pole_patches) == 0:
        # If no sign or pole is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    sign_patch = sign_patches[0]
    pole_patch = pole_patches[0]
    return bool_to_yesno(sign_patch.verify_property(""sign"", ""white"") and pole_patch.verify_property(""pole"", ""white""))"
16760226,What's the laptop in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?," # returns the size of the bed
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    return bed_patches[0].simple_query(""How large is the bed?"")"
14143886,Where is the person with the luggage standing on?," # assumes one person and one luggage
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    luggage_patches = image_patch.find(""luggage"")
    if len(person_patches) == 0 or len(luggage_patches) == 0:
        # If no person or luggage is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    person_patch = person_patches[0]
    luggage_patch = luggage_patches[0]
    if person_patch.vertical_center < luggage_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19872633,Are there either any fire extinguishers or pepper shakers?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)"
12755010,Is the bottle to the right of a napkin?," # bottle and napkin are not in the image
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    for bottle_patch in bottle_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if napkin_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""yes""
    return ""no"""
2747001,Are there any soaps or bombs?," # returns yes or no
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?," # returns yes or no
    image_patch = ImagePatch(image)
    is_giraffe = image_patch.exists(""giraffe"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_giraffe or is_elephant)"
6898877,What is the sign on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"")"
15862812,What is the sticker on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sticker on?"")"
141031470,On which side of the image is the white towel?," # assumes one white towel
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""white towel"")
    if len(towel_patches) == 0:
        # If no white towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    towel_patch = towel_patches[0]
    if towel_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
41026846,Who rides a motorcycle?," # assumes one motorcycle patch
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Who rides a motorcycle?"")
    return motorcycle_patches[0].simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the bathtub the towel is on?"")"
7469617,Is the man to the left or to the right of the person that is to the left of the people?," # assumes only one man and one person to the left of the people
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    person_patch = person_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    people_patch = people_patches[0]
    if man_patch.horizontal_center < person_patch.horizontal_center and person_patch.horizontal_center < people_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
64308,What's located on top of the soup?," # contains a relation (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?," # assumes one fence and one bench
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    bench_patches = image_patch.find(""bench"")
    if len(fence_patches) == 0 or len(bench_patches) == 0:
        # If no fence or bench is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    fence_material = fence_patches[0].simple_query(""What material is the fence made of?"")
    bench_material = bench_patches[0].simple_query(""What material is the bench made of?"")
    return bool_to_yesno(fence_material == bench_material)"
3196255,Are there helmets that are not white?," # returns yes or no
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmet_patches:
        if not helmet_patch.verify_property(""helmet"", ""white""):
            return ""yes""
    return ""no"""
2992630,Is the bowl to the right or to the left of the man that is drinking?," # assumes one man and one bowl
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    bowl_patches = image_patch.find(""bowl"")
    if len(man_patches) == 0 or len(bowl_patches) == 0:
        # If no man or bowl is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    bowl_patch = bowl_patches[0]
    if bowl_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
513894,Is the person above the sand wearing glasses?," # assumes one person and one sand patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    sand_patches = image_patch.find(""sand"")
    if len(person_patches) == 0 or len(sand_patches) == 0:
        # If no person or sand is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    person_patch = person_patches[0]
    sand_patch = sand_patches[0]
    if person_patch.vertical_center < sand_patch.vertical_center:
        return image_patch.simple_query(""Is the person wearing glasses?"")
    else:
        return ""no"""
14167599,Is the color of the life preserver the same as that of the house?," # assumes one life preserver and one house
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    house_patches = image_patch.find(""house"")
    if len(life_preserver_patches) == 0 or len(house_patches) == 0:
        # If no life preserver or house is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    life_preserver_color = life_preserver_patches[0].simple_query(""What color is the life preserver?"")
    house_color = house_patches[0].simple_query(""What color is the house?"")
    return bool_to_yesno(life_preserver_color == house_color)"
18264755,How is the weather?," # weather is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?," # assumes one toilet and one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet and one animal
    if len(animal_patches) == 0 or len(toilet_patches) == 0:
        # If no animal or toilet is found, query the image directly
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    animal_patch = animal_patches[0]
    toilet_patch = toilet_patches[0]
    if not toilet_patch.verify_property(""toilet"", ""closed""):
        return animal_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    return animal_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")"
8641613,Do you see any helmets in the picture that are not red?," # returns yes or no
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        if not helmet_patch.verify_property(""helmet"", ""red""):
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?," # assumes one happy person
    image_patch = ImagePatch(image)
    happy_person_patches = image_patch.find(""happy person"")
    if len(happy_person_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    happy_person_patch = happy_person_patches[0]
    object_patches = happy_person_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        # If no object is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    return object_patches[0].simple_query(""What does the happy person hold?"")"
8461507,Are there either tissue boxes or lamps in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?," # returns the answer to ""What is this?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this?"")"
19102906,What type of drink is to the left of the plate?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of drink is to the left of the plate?"")"
18315440,Is the sky cloudy and blue?," # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""cloudy"") and image_patch.verify_property(""sky"", ""blue""))"
453061,Is the fork on the right of the image?," # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork on the right of the image?"")
    return bool_to_yesno(fork_patches[0].horizontal_center > image_patch.horizontal_center)"
71002567,"What is the broccoli on, a table or a nightstand?"," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")"
17465089,Is the field green and small?," # returns a boolean
    image_patch = ImagePatch(image)
    is_green = image_patch.verify_property(""field"", ""green"")
    is_small = image_patch.verify_property(""field"", ""small"")
    return bool_to_yesno(is_green and is_small)"
16150157,What is on the wall?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?," # assumes one van and one SUV
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    suv_patches = image_patch.find(""SUV"")
    if len(van_patches) == 0 or len(suv_patches) == 0:
        # If no van or SUV is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    van_patch = van_patches[0]
    suv_patch = suv_patches[0]
    if van_patch.horizontal_center < suv_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15101358,Is the girl to the left of the boy?," # assumes one girl and one boy
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    boy_patches = image_patch.find(""boy"")
    if len(girl_patches) == 0 or len(boy_patches) == 0:
        # If no girl or boy is found, query the image directly
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    girl_patch = girl_patches[0]
    boy_patch = boy_patches[0]
    return bool_to_yesno(girl_patch.horizontal_center < boy_patch.horizontal_center)"
12785181,What animals are in the grass?," # returns a list of strings
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animals are in the grass?"")
    return [animal_patch.simple_query(""What animal is in the grass?"") for animal_patch in animal_patches]"
348093,Are there both an apple and a bag in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)"
314181,Which sign is shown?," # returns the name of the sign
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Which sign is shown?"")
    return sign_patches[0].simple_query(""Which sign is shown?"")"
16275314,"On which side is the woman, the right or the left?"," # assumes one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19535592,Who runs on the sand?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who runs on the sand?"")"
156886,Is there a giraffe near the bush?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a giraffe near the bush?"")"
1756642,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    return person_patches[0].simple_query(""Who wears the shirt?"")"
1972390,What type of animal is standing in the field?," # assumes one field
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal is standing in the field?"")"
14579439,Is the stuffed animal on the right?," # assumes one stuffed animal
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    stuffed_animal_patch = stuffed_animal_patches[0]
    if stuffed_animal_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
6645395,Is the gray building behind the passengers that are boarding the airplane?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")"
19610200,Is the fence metallic?," # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return bool_to_yesno(fence_patches[0].verify_property(""fence"", ""metallic""))"
5299471,What does the girl that to the left of the trashcan carry?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")"
7548203,Which kind of vegetable is on the pizza?," # assumes one pizza patch
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    pizza_patch = pizza_patches[0]
    vegetable_patches = pizza_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        # If no vegetable is found, query the image directly
        return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    return vegetable_patches[0].simple_query(""Which kind of vegetable is on the pizza?"")"
91027737,On which side is the pan?," # assumes one pan
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    car_patch = car_patches[0]
    if car_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
6144031,Who is in the living room?," # assumes one living room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?," # assumes one sink
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?," # returns yes or no
    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return bool_to_yesno(is_bicycle or is_biker)"
844747,Are there both a pillow and a kitten in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)"
1104500,What kind of food is in the box?," # assumes one box
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What kind of food is in the box?"")
    return box_patches[0].simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?," # assumes one food patch and one kid patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    kid_patches = image_patch.find(""kid"")
    if len(food_patches) == 0 or len(kid_patches) == 0:
        # If no food or kid is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    food_patch = food_patches[0]
    kid_patch = kid_patches[0]
    if food_patch.horizontal_center < kid_patch.horizontal_center:
        return food_patch.simple_query(""What is the food that is to the left of the kid called?"")
    else:
        return food_patch.simple_query(""What is the food that is to the right of the kid called?"")"
11820726,"What device is the desk in front of, a television or a printer?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")"
18114588,Do you see a helmet there?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""helmet""))"
11950874,What animal is standing on the ground?," # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    animal_patch = animal_patches[0]
    return animal_patch.simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?," # assumes one car and one fork
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    fork_patches = image_patch.find(""fork"")
    if len(car_patches) == 0 or len(fork_patches) == 0:
        # If no car or fork is found, query the image directly
        return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")
    car_patch = car_patches[0]
    fork_patch = fork_patches[0]
    return bool_to_yesno(car_patch.horizontal_center < fork_patch.horizontal_center)"
16184942,Does that grass look brown and short?," # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""grass"", ""brown"") and image_patch.verify_property(""grass"", ""short""))"
6312238,Is the hydrant to the left of the car?," # assumes one hydrant and one car
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    car_patches = image_patch.find(""car"")
    if len(hydrant_patches) == 0 or len(car_patches) == 0:
        # If no hydrant or car is found, query the image directly
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    hydrant_patch = hydrant_patches[0]
    car_patch = car_patches[0]
    return bool_to_yesno(hydrant_patch.horizontal_center < car_patch.horizontal_center)"
16646227,On which side of the picture is the gray car?," # assumes one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?," # assumes one person and one ball
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    ball_patches = image_patch.find(""ball"")
    if len(person_patches) == 0 or len(ball_patches) == 0:
        # If no person or ball is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    person_patch = person_patches[0]
    ball_patch = ball_patches[0]
    if ball_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
3443704,What is the woman wearing?," # returns the answer to ""What is the woman wearing?""
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is the woman wearing?"")"
19313572,What is the color of the tent to the left of the vehicles?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")"
10885675,What is the toilet seat made of?," # assumes one toilet seat
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet seat"")
    if len(toilet_patches) == 0:
        # If no toilet seat is found, query the image directly
        return image_patch.simple_query(""What is the toilet seat made of?"")
    return toilet_patches[0].simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?," # assumes one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    blanket_patch = blanket_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.vertical_center > blanket_patch.vertical_center:
            return animal_patch.simple_query(""What animal is resting on the blanket?"")
    return image_patch.simple_query(""What animal is resting on the blanket?"")"
14561612,What color do you think the bikini that the woman is wearing is?," # returns the color of the bikini
    image_patch = ImagePatch(image)
    bikini_patches = image_patch.find(""bikini"")
    # Question assumes only one bikini patch
    if len(bikini_patches) == 0:
        # If no bikini is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    return bikini_patches[0].simple_query(""What color is the bikini?"")"
6587755,Are both the room and the bowl the same color?," # returns yes or no
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    # Question assumes only one room patch
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""Are both the room and the bowl the same color?"")
    room_color = room_patches[0].simple_query(""What color is the room?"")
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return ""no""
    bowl_color = bowl_patches[0].simple_query(""What color is the bowl?"")
    return bool_to_yesno(room_color == bowl_color)"
4479543,Is the barn white or brown?," # assumes one barn patch
    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    return barn_patches[0].best_text_match([""white"", ""brown""])"
972522,Does the box look white or brown?," # returns a boolean
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the box look white or brown?""))
    return bool_to_yesno(box_patches[0].verify_property(""box"", ""white""))"
3948528,What is the bowl made of?," # assumes one bowl
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What is the bowl made of?"")
    return bowl_patches[0].simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")"
866459,On which side is the couch?," # assumes one couch patch
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8614812,Is the person that is playing wearing shorts?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    person_patch = person_patches[0]
    return bool_to_yesno(person_patch.verify_property(""person"", ""wearing shorts""))"
167438,What is wearing the ground?," # ground is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?," # returns a list of strings
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wooden""):
            return furniture_patch.simple_query(""Which kind of furniture is wooden?"") # crop would include the furniture so keep it in the query
    return []"
1042377,Who is standing beside the person that is wearing a dress?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""scene"", ""indoors""))"
10324400,How fat are the long skis?," # returns a string
    image_patch = ImagePatch(image)
    ski_patches = image_patch.find(""ski"")
    # Question assumes only one ski patch
    if len(ski_patches) == 0:
        # If no ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    return ski_patches[0].simple_query(""How fat are the long skis?"")"
2211743,Is the sky clear or overcast?," # assumes the sky is the top part of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?," # assumes only one pencil patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
    for bottle_patch in bottle_patches:
        if bottle_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
15478302,Is there any dark door or window in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_dark_door = image_patch.exists(""dark door"")
    is_dark_window = image_patch.exists(""dark window"")
    return bool_to_yesno(is_dark_door or is_dark_window)"
18414234,Do you see either a knife or a chair in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)"
19779815,Is the book red or yellow?," # returns a boolean
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    return book_patches[0].best_text_match([""red"", ""yellow""])"
7257283,Are there men to the left of the picture?," # image is the original image
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there men to the left of the picture?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6621625,On which side of the picture is the bench?," # assumes one bench
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    bench_patch = bench_patches[0]
    if bench_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19311589,Are there both fences and horses in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")"
171031333,Do you see blankets in the picture that are not black?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""blanket"") and not image_patch.verify_property(""blanket"", ""black""))"
16695341,What is the fence made of?," # returns the material of the fence
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)"
5111363,Are there chairs or tables that are not blue?," # returns yes or no
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    if is_chair or is_table:
        return ""yes""
    return ""no"""
9230971,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?," # returns a boolean
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the hair have short length and white color?""))
    return bool_to_yesno(hair_patches[0].verify_property(""hair"", ""short"") and hair_patches[0].verify_property(""hair"", ""white""))"
4822200,Do you see any lettuce on the food with the meat?," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    for food_patch in food_patches:
        lettuce_patches = food_patch.find(""lettuce"")
        if len(lettuce_patches) > 0:
            return ""yes""
    return ""no"""
3726666,What device is to the left of the curtain that is to the left of the glasses?," # assumes only one device, curtain, and glasses
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    device_patch = device_patches[0]
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    curtain_patch = curtain_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    glasses_patch = glasses_patches[0]
    if curtain_patch.horizontal_center > glasses_patch.horizontal_center:
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    if device_patch.horizontal_center < curtain_patch.horizontal_center:
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    return device_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")"
9954849,What kind of furniture is it?," # returns the answer to ""What kind of furniture is it?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?," # returns yes or no
    image_patch = ImagePatch(image)
    is_red_train = image_patch.exists(""red train"")
    is_red_bus = image_patch.exists(""red bus"")
    return bool_to_yesno(is_red_train or is_red_bus)"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?," # this is a very complex query
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")"
623393,"What type of clothing is tan, the hat or the vest?"," # returns the type of clothing
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    for tan_patch in tan_patches:
        hat_patches = image_patch.find(""hat"")
        for hat_patch in hat_patches:
            if hat_patch.horizontal_center > tan_patch.horizontal_center:
                return ""hat""
        vest_patches = image_patch.find(""vest"")
        for vest_patch in vest_patches:
            if vest_patch.horizontal_center > tan_patch.horizontal_center:
                return ""vest""
    return ""tan"""
6436448,Is the color of the skirt the same as the scarf?," # returns yes or no
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        return ""no""
    return bool_to_yesno(scarf_patches[0].verify_property(""scarf"", ""same color as the skirt""))"
3303313,Is the blanket under a cat?," # contains a relation (under), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blanket under a cat?"")"
443663,What color is the picture?," # returns the color of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        return ""no""
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1885406,What is the toy on the bed?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toy on the bed?"")"
5557965,On which side is the bag?," # left or right
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?," # assumes one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    banana_patch = banana_patches[0]
    if banana_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3196355,What does the batter hold?," # batter is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What does the batter hold?"")"
14470748,Who wears a jacket?," # returns the name of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for person_patch in person_patches:
        is_wearing_jacket = (person_patch.simple_query(""Is the person wearing a jacket?"") == ""yes"")
        if is_wearing_jacket:
            return person_patch.simple_query(""Who is wearing a jacket?"") # crop would include the jacket so keep it in the query
    # If no person is wearing a jacket, pick the first person
    return person_patches[0].simple_query(""Who is wearing a jacket?"")"
16537736,Are there any houses behind the shrubs?," # assumes one shrub patch
    image_patch = ImagePatch(image)
    shrub_patches = image_patch.find(""shrub"")
    if len(shrub_patches) == 0:
        # If no shrub is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    for shrub_patch in shrub_patches:
        house_patches = image_patch.find(""house"")
        for house_patch in house_patches:
            if house_patch.horizontal_center > shrub_patch.horizontal_center:
                return ""yes""
    return ""no"""
1129541,What piece of furniture is made of wood?," # returns the name of the piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wood""):
            return furniture_patch.simple_query(""What piece of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, query the image directly
    return image_patch.simple_query(""What piece of furniture is made of wood?"")"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?," # assumes one man and one racket
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    if len(hat_patches) == 0:
        # If no hat is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    hat_patch = hat_patches[0]
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    racket_patch = racket_patches[0]
    if racket_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
12416703,Where is that cat?," # returns the location of the cat
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Where is that cat?"")
    return cat_patches[0].simple_query(""Where is that cat?"")"
15603088,The animal to the right of the envelope is lying on what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")"
5329077,Is the man on a bench?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on a bench?"")"
1945705,What kind of device is to the left of the device that looks silver and gray?," # assumes one device patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    device_patch = device_patches[0]
    silver_gray_device_patches = image_patch.find(""device"")
    for silver_gray_device_patch in silver_gray_device_patches:
        if silver_gray_device_patch.horizontal_center < device_patch.horizontal_center:
            return silver_gray_device_patch.best_text_match([""phone"", ""computer"", ""tablet""])
    return ""no"""
17520003,What vehicle is to the right of the pine tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")"
1259983,Who is wearing pants?," # returns the name of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    for person_patch in person_patches:
        is_wearing_pants = person_patch.verify_property(""person"", ""wearing_pants"")
        if is_wearing_pants:
            return person_patch.simple_query(""Who is wearing pants?"") # crop would include the pants so keep it in the query
    # If no person is wearing pants, query the image directly
    return image_patch.simple_query(""Who is wearing pants?"")"
6413378,Is there a black keyboard or camera?," # returns yes or no
    image_patch = ImagePatch(image)
    is_black_keyboard = image_patch.exists(""black keyboard"")
    is_camera = image_patch.exists(""camera"")
    return bool_to_yesno(is_black_keyboard or is_camera)"
947305,Is the sunny water blue and high?," # returns a boolean
    image_patch = ImagePatch(image)
    is_blue = image_patch.verify_property(""water"", ""blue"")
    is_high = image_patch.verify_property(""water"", ""high"")
    return bool_to_yesno(is_blue and is_high)"
4367817,What type of animal in this scene is brown?," # returns the type of animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""brown""):
            return animal_patch.simple_query(""What type of animal in this scene is brown?"")
    return ""no animal is brown"""
15485572,What is the vegetable on the hot dog with the cheese?," # assumes one hot dog and one cheese
    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog"")
    cheese_patches = image_patch.find(""cheese"")
    # Question assumes one hot dog and one cheese patch
    if len(hot_dog_patches) == 0 or len(cheese_patches) == 0:
        # If no hot dog or cheese is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    hot_dog_patch = hot_dog_patches[0]
    cheese_patch = cheese_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes one vegetable patch
    if len(vegetable_patches) == 0:
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > hot_dog_patch.horizontal_center and vegetable_patch.horizontal_center < cheese_patch.horizontal_center:
            return vegetable_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")"
12661142,What is the appliance in the kitchen called?," # assumes one appliance
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    return appliance_patches[0].simple_query(""What is the appliance in the kitchen called?"")"
41012743,The arrow is on what?," # arrow is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The arrow is on what?"")"
4777414,What color is the bicycle in the bottom of the photo?," # assumes only one bicycle patch
    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    if len(bicycle_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    bicycle_patch = bicycle_patches[0]
    if bicycle_patch.vertical_center < image_patch.vertical_center:
        return bicycle_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    else:
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")"
1185988,What is the device on top of the table that is to the right of the trashcan?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")"
13582968,Was granite used to make that floor?," # assumes one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""Was granite used to make that floor?"")
    return bool_to_yesno(floor_patches[0].verify_property(""floor"", ""granite""))"
6235273,Are there women in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""woman""))"
5377974,What is the girl playing with?," # contains a relation (playing with), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the girl playing with?"")"
51037065,On which side of the image is the fridge?," # left or right
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    if fridge_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5299477,Which kind of bag does the girl carry?," # assumes one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    girl_patch = girl_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    bag_patch = bag_patches[0]
    return bag_patch.best_text_match([""backpack"", ""handbag"", ""suitcase""])"
15135617,Is the white dog on a bench?," # assumes one white dog and one bench
    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    bench_patches = image_patch.find(""bench"")
    if len(white_dog_patches) == 0 or len(bench_patches) == 0:
        # If no white dog or bench is found, query the image directly
        return image_patch.simple_query(""Is the white dog on a bench?"")
    white_dog_patch = white_dog_patches[0]
    bench_patch = bench_patches[0]
    if white_dog_patch.horizontal_center > bench_patch.horizontal_center:
        return ""yes""
    return ""no"""
1111583,Is the male person to the right of a person?," # assumes one male person and one person
    image_patch = ImagePatch(image)
    male_person_patches = image_patch.find(""male person"")
    person_patches = image_patch.find(""person"")
    if len(male_person_patches) == 0 or len(person_patches) == 0:
        # If no male person or person is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    male_person_patch = male_person_patches[0]
    person_patch = person_patches[0]
    if male_person_patch.horizontal_center > person_patch.horizontal_center:
        return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
15610844,What kind of place is shown?," # returns the answer to ""What kind of place is shown?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")"
11869032,Is the banana below a bird?," # assumes one banana and one bird
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    bird_patches = image_patch.find(""bird"")
    if len(banana_patches) == 0 or len(bird_patches) == 0:
        # If no banana or bird is found, query the image directly
        return image_patch.simple_query(""Is the banana below a bird?"")
    banana_patch = banana_patches[0]
    bird_patch = bird_patches[0]
    if banana_patch.vertical_center > bird_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
9878360,What color is the vehicle to the left of the fence?," # assumes one vehicle and one fence
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    fence_patches = image_patch.find(""fence"")
    if len(vehicle_patches) == 0 or len(fence_patches) == 0:
        # If no vehicle or fence is found, query the image directly
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    vehicle_patch = vehicle_patches[0]
    fence_patch = fence_patches[0]
    if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
        return vehicle_patch.simple_query(""What color is the vehicle?"")
    else:
        return fence_patch.simple_query(""What color is the fence?"")"
481765,Are there either any buses or trains in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?," # returns the material of the fence
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?," # assumes one man and one traffic cone
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes one man and one traffic cone
    if len(man_patches) == 0 or len(traffic_cone_patches) == 0:
        # If no man or traffic cone is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    traffic_cone_patch = traffic_cone_patches[0]
    if man_patch.horizontal_center < traffic_cone_patch.horizontal_center:
        return bool_to_yesno(man_patch.verify_property(""man"", ""cap""))
    return ""no"""
11981238,What is common to the blazer and the suit?," # returns a string
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    # Question assumes only one blazer patch
    if len(blazer_patches) == 0:
        # If no blazer is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    blazer_patch = blazer_patches[0]
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one suit patch
    if len(suit_patches) == 0:
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    suit_patch = suit_patches[0]
    common = []
    for property in [""color"", ""material"", ""style""]:
        if blazer_patch.verify_property(""blazer"", property) and suit_patch.verify_property(""suit"", property):
            common.append(property)
    if len(common) == 0:
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    return "", "".join(common)"
16245,Is the shirt white or green?," # returns a boolean
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    return shirt_patches[0].best_text_match([""white"", ""green""])"
2595103,"In which part of the image are the cars, the bottom or the top?"," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?"," # assumes one patch of sand
    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""How does the sand look, dry or wet?"")
    sand_patch = sand_patches[0]
    return sand_patch.simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?," # assumes one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    banana_patch = banana_patches[0]
    fruit_patches = image_patch.find(""fruit"")
    for fruit_patch in fruit_patches:
        if fruit_patch.horizontal_center > banana_patch.horizontal_center:
            return ""yes""
    return ""no"""
6376614,What color is the car in the middle?," # assumes one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    car_patch = car_patches[0]
    return car_patch.simple_query(""What color is the car in the middle?"")"
712063,What's the lamp made of?," # returns the material of the lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What's the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")"
9647343,What type of material is the patio made of?," # assumes one patio
    image_patch = ImagePatch(image)
    patio_patches = image_patch.find(""patio"")
    if len(patio_patches) == 0:
        # If no patio is found, query the image directly
        return image_patch.simple_query(""What type of material is the patio made of?"")
    return patio_patches[0].simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the suit?"")
    for person_patch in person_patches:
        is_wearing_suit = person_patch.simple_query(""Is the person wearing a suit?"") == ""yes""
        if is_wearing_suit:
            return person_patch.simple_query(""Who is wearing the suit?"") # crop would include the suit so keep it in the query
    # If no person is wearing a suit, query the image directly
    return image_patch.simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?," # assumes the sky is the top part of the image
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""What is the color of the clouds in the sky?"")
    return sky_patches[0].simple_query(""What is the color of the clouds in the sky?"")"
9843309,Do the flowers look orange?," # returns yes or no
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flower"", ""orange""))"
618996,Is there a chair or a bed in this image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?," # assumes only one umbrella
    image_patch = ImagePatch(image)
    umbrella_patch = image_patch.find(""umbrella"")[0]
    truck_patches = image_patch.find(""truck"")
    for truck_patch in truck_patches:
        if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
            return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?," # returns the color of the pants
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    pants_patch = pants_patches[0]
    return pants_patch.simple_query(""What color are the pants the man is wearing?"")"
551601,Are there any pillows or chairs in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?," # assumes one person with a bag
    image_patch = ImagePatch(image)
    person_with_bag_patches = image_patch.find(""person with a bag"")
    # Question assumes only one person with a bag patch
    if len(person_with_bag_patches) == 0:
        # If no person with a bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    person_with_bag_patch = person_with_bag_patches[0]
    woman_patches = image_patch.find(""woman"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < person_with_bag_patch.horizontal_center:
            return ""yes""
    return ""no"""
5925408,What is the bike in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?," # returns the type of fast food
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)"
13778498,What type of vehicle is behind the green tree?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"")"
41019603,What is the child standing on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?," # assumes only one wooden item of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?," # assumes one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    person_patch = person_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Who is wearing the shirt?"")
    shirt_patch = shirt_patches[0]
    if shirt_patch.horizontal_center > person_patch.horizontal_center:
        return person_patch.simple_query(""Who is wearing the shirt?"")
    else:
        return person_patch.simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?," # returns the material of the fence
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?," # assumes one kite patch
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    kite_patch = kite_patches[0]
    return kite_patch.simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is drinking?"")
    person_patch = person_patches[0]
    drink_patches = image_patch.find(""drink"")
    # Question assumes only one drink patch
    if len(drink_patches) == 0:
        return image_patch.simple_query(""Who is drinking?"")
    drink_patch = drink_patches[0]
    if drink_patch.horizontal_center > person_patch.horizontal_center:
        return person_patch.simple_query(""Who is drinking?"")
    else:
        return person_patch.simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the building behind the tree white or brown?"")"
5749240,Are the glove and the undershirt both black?," # returns yes or no
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    glove_patch = glove_patches[0]
    undershirt_patches = image_patch.find(""undershirt"")
    # Question assumes only one undershirt patch
    if len(undershirt_patches) == 0:
        return ""no""
    undershirt_patch = undershirt_patches[0]
    return bool_to_yesno(glove_patch.verify_property(""glove"", ""black"") and undershirt_patch.verify_property(""undershirt"", ""black""))"
18573157,Is the juice in a cup?," # returns a boolean
    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    # Question assumes only one juice patch
    if len(juice_patches) == 0:
        # If no juice is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the juice in a cup?""))
    return bool_to_yesno(juice_patches[0].verify_property(""juice"", ""in a cup""))"
3445929,Is the brown horse on the right side of the photo?," # assumes one horse patch
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    for horse_patch in horse_patches:
        if horse_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
16541709,Where is the grass?," # returns the location of the grass
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"")"
15764335,Are there any dogs on the tan sand?," # returns a boolean
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Are there any dogs on the tan sand?""))
    for dog_patch in dog_patches:
        if dog_patch.simple_query(""Is the dog on the tan sand?"") == ""yes"":
            return ""yes""
    return ""no"""
1478089,Are the door and the garage door made of the same material?," # assumes one door and one garage door
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    garage_door_patches = image_patch.find(""garage door"")
    if len(door_patches) == 0 or len(garage_door_patches) == 0:
        # If no door or garage door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_material = door_patches[0].simple_query(""What material is the door made of?"")
    garage_door_material = garage_door_patches[0].simple_query(""What material is the garage door made of?"")
    return bool_to_yesno(door_material == garage_door_material)"
1250685,Was this picture taken in a bathroom or at a dining room?," # assumes one image patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"")"
10436844,Is the zebra's nose soft and brown?," # assumes one zebra patch
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    zebra_patch = zebra_patches[0]
    return bool_to_yesno(zebra_patch.verify_property(""zebra"", ""soft"") and zebra_patch.verify_property(""zebra"", ""brown""))"
10683765,Does the shirt have blue color?," # returns a boolean
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the shirt have blue color?""))
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""blue""))"
1593352,Do the draperies look white and striped?," # draperies is a plural noun
    image_patch = ImagePatch(image)
    draperies_patches = image_patch.find(""draperies"")
    # Question assumes only one draperies patch
    if len(draperies_patches) == 0:
        # If no draperies are found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    draperies_patch = draperies_patches[0]
    is_white = draperies_patch.verify_property(""draperies"", ""white"")
    is_striped = draperies_patch.verify_property(""draperies"", ""striped"")
    return bool_to_yesno(is_white and is_striped)"
16553304,Are the trunks both long and wide?," # assumes only one trunk
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    trunk_patch = trunk_patches[0]
    is_long = trunk_patch.verify_property(""trunk"", ""long"")
    is_wide = trunk_patch.verify_property(""trunk"", ""wide"")
    return bool_to_yesno(is_long and is_wide)"
7165102,Is the car on the left of the photo?," # assumes only one car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return ""no""
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?," # assumes only one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    banana_patch = banana_patches[0]
    is_yellow = banana_patch.simple_query(""Is the banana yellow?"")
    is_green = banana_patch.simple_query(""Is the banana green?"")
    is_short = banana_patch.simple_query(""Is the banana short?"")
    return bool_to_yesno(is_yellow and is_green and is_short)"
19279872,What is the man to the right of the helmet wearing?," # assumes one man and one helmet
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    helmet_patches = image_patch.find(""helmet"")
    if len(man_patches) == 0 or len(helmet_patches) == 0:
        # If no man or helmet is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    helmet_patch = helmet_patches[0]
    if man_patch.horizontal_center > helmet_patch.horizontal_center:
        return man_patch.simple_query(""What is the man wearing?"")
    else:
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")"
4285513,What is the color of the floor?," # returns the color of the floor
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor?"")"
3974266,Do the trousers look tan?," # returns yes or no
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan""))"
11595009,What are the devices to the right of the device that is to the right of the remote control?," # assumes only one remote control patch
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    remote_control_patch = remote_control_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > remote_control_patch.horizontal_center:
            device_patches_right = image_patch.find(""device"")
            for device_patch_right in device_patches_right:
                if device_patch_right.horizontal_center > device_patch.horizontal_center:
                    return device_patch_right.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    return ""no"""
6183000,Are there nightstands or beds?," # returns yes or no
    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_nightstand or is_bed)"
14143982,Is it an outdoors scene?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""scene"", ""outdoors""))"
6123160,Are the speakers to the left of a Wii controller?," # assumes one speaker and one Wii controller
    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    wii_controller_patches = image_patch.find(""Wii controller"")
    if len(speaker_patches) == 0 or len(wii_controller_patches) == 0:
        # If no speaker or Wii controller is found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    speaker_patch = speaker_patches[0]
    wii_controller_patch = wii_controller_patches[0]
    return bool_to_yesno(speaker_patch.horizontal_center < wii_controller_patch.horizontal_center)"
3681634,Is the plastic fork in the top or in the bottom part of the photo?," # assumes only one plastic fork
    image_patch = ImagePatch(image)
    plastic_fork_patches = image_patch.find(""plastic fork"")
    if len(plastic_fork_patches) == 0:
        # If no plastic fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    plastic_fork_patch = plastic_fork_patches[0]
    if plastic_fork_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
13629530,What is the vehicle on the street?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?," # returns yes or no
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?," # returns the color of the hat the man is in
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return image_patch.simple_query(""What color is the hat the man is in?"")
    hat_patch = hat_patches[0]
    return hat_patch.simple_query(""What color is the hat the man is in?"")"
1849976,What vegetables are to the left of the spoon?," # assumes one spoon patch
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    for spoon_patch in spoon_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < spoon_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetable is to the left of the spoon?"") # crop would include the spoon so keep it in the query
    # If no vegetable is to the left of the spoon, query the image directly
    return image_patch.simple_query(""What vegetables are to the left of the spoon?"")"
14827816,Is the statue made of bronze or stone?," # assumes only one statue
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    statue_patch = statue_patches[0]
    return statue_patch.best_text_match([""bronze"", ""stone""])"
857204,What's the woman wearing?," # returns the answer to ""What's the woman wearing?""
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"")"
2201105,Is the ball pink?," # returns yes or no
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return bool_to_yesno(ball_patches[0].verify_property(""ball"", ""pink""))"
14616023,What piece of furniture are the cords in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?," # left or right
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?," # returns the name of the striped animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the striped animal called?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""striped""):
            return animal_patch.simple_query(""What is the striped animal called?"") # crop would include the striped animal so keep it in the query
    # If no striped animal is found, query the image directly
    return image_patch.simple_query(""What is the striped animal called?"")"
1479068,Is it outdoors?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""outdoor"", ""outdoor""))"
16155046,Is the dry grass below a zebra?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the dry grass below a zebra?"")"
16515071,What is the person in the water wearing?," # assumes one person and one water patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    water_patches = image_patch.find(""water"")
    if len(person_patches) == 0 or len(water_patches) == 0:
        # If no person or water is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    person_patch = person_patches[0]
    water_patch = water_patches[0]
    if person_patch.horizontal_center > water_patch.horizontal_center:
        return person_patch.simple_query(""What is the person in the water wearing?"")
    else:
        return person_patch.simple_query(""What is the person in the water wearing?"")"
161015042,Who is wearing the goggles?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the goggles?"")
    for person_patch in person_patches:
        goggles_patches = image_patch.find(""goggles"")
        # Question assumes only one goggles patch
        if len(goggles_patches) == 0:
            return image_patch.simple_query(""Who is wearing the goggles?"")
        goggles_patch = goggles_patches[0]
        if goggles_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.simple_query(""Who is wearing the goggles?"")
    return image_patch.simple_query(""Who is wearing the goggles?"")"
19149868,What is pulled by the lady?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is pulled by the lady?"")"
5199994,What's the man wearing?," # returns the answer to ""What's the man wearing?""
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
19184475,Are the man glasses on the left side of the image?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center < man_patch.horizontal_center:
        return ""yes""
    return ""no"""
7149602,Is the shirt orange or blue?," # returns a boolean
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""orange""))"
19479555,What is the person to the right of the benches holding?," # assumes one person and one bench
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    bench_patches = image_patch.find(""bench"")
    if len(person_patches) == 0 or len(bench_patches) == 0:
        # If no person or bench is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    person_patch = person_patches[0]
    bench_patch = bench_patches[0]
    if person_patch.horizontal_center > bench_patch.horizontal_center:
        return person_patch.simple_query(""What is the person holding?"")
    else:
        return person_patch.simple_query(""What is the person holding?"")"
19273393,Are there both a door and a window in this photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
6481656,What is the man doing?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"")"
13127703,What kind of drink is to the left of the bottle the woman is pouring?," # bottle is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")"
2378018,What is the toilet in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"")"
8430841,Is the frisbee to the left of the guy?," # assumes one guy and one frisbee
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    guy_patches = image_patch.find(""guy"")
    if len(frisbee_patches) == 0 or len(guy_patches) == 0:
        # If no frisbee or guy is found, query the image directly
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    frisbee_patch = frisbee_patches[0]
    guy_patch = guy_patches[0]
    return bool_to_yesno(frisbee_patch.horizontal_center < guy_patch.horizontal_center)"
18616818,The man is watching who?," # contains a relation (watching), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is watching who?"")"
179526,Is the white dog behind a girl?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white dog behind a girl?"")"
21018827,Is the river murky and calm?," # returns a boolean
    image_patch = ImagePatch(image)
    is_murky = image_patch.verify_property(""river"", ""murky"")
    is_calm = image_patch.verify_property(""river"", ""calm"")
    return bool_to_yesno(is_murky and is_calm)"
3697449,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?," # returns a list of strings
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    sign_patch = sign_patches[0]
    common_properties = []
    for property in [""color"", ""shape"", ""size"", ""material""]:
        if car_patch.verify_property(""car"", property) and sign_patch.verify_property(""sign"", property):
            common_properties.append(property)
    if len(common_properties) == 0:
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    return "", "".join(common_properties)"
11764476,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?," # assumes one plate and one furniture
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    furniture_patches = image_patch.find(""furniture"")
    if len(plate_patches) == 0 or len(furniture_patches) == 0:
        # If no plate or furniture is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    plate_patch = plate_patches[0]
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""What kind of furniture is the plate on?"")"
61022361,What is the painting that is to the left of the clock hanging on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")"
1527392,"What color is the fence, tan or black?"," # returns the color of the fence
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    return fence_patches[0].best_text_match([""tan"", ""black""])"
19229351,Do you see both bowls and carrots?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)"
1297082,On which side is the silver fork?," # assumes one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    fork_patch = fork_patches[0]
    if fork_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16757832,Are there any blue helmets or napkins?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.exists(""blue helmet"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_blue_helmet or is_napkin)"
839816,"In which part of the photo is the racket, the top or the bottom?"," # assumes only one racket patch
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12385226,Is there a mirror in the bathroom?," # assumes one mirror and one bathroom
    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    if len(mirror_patches) == 0:
        return ""no""
    mirror_patch = mirror_patches[0]
    bathroom_patches = image_patch.find(""bathroom"")
    if len(bathroom_patches) == 0:
        return ""no""
    bathroom_patch = bathroom_patches[0]
    if mirror_patch.horizontal_center > bathroom_patch.horizontal_center:
        return ""yes""
    return ""no"""
18720852,Are there either blankets or tents in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    woman_patch = woman_patches[0]
    cardboard_box_patches = image_patch.find(""cardboard box"")
    # Question assumes only one cardboard box patch
    if len(cardboard_box_patches) == 0:
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    for cardboard_box_patch in cardboard_box_patches:
        if cardboard_box_patch.horizontal_center > woman_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
19453453,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?," # assumes one house
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    house_patch = house_patches[0]
    if house_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the flowers that look red?"")"
15710688,Is the shirt short sleeved or sleeveless?," # returns yes or no
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    return bool_to_yesno(shirt_patch.verify_property(""shirt"", ""short sleeved"") or shirt_patch.verify_property(""shirt"", ""sleeveless""))"
5533952,What are the white wires connected to?," # assumes only one white wire
    image_patch = ImagePatch(image)
    white_wire_patches = image_patch.find(""white wire"")
    if len(white_wire_patches) == 0:
        # If no white wire is found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    white_wire_patch = white_wire_patches[0]
    return white_wire_patch.simple_query(""What are the white wires connected to?"")"
11313555,"What type of furniture is that, a table or a nightstand?"," # assumes one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    furniture_patch = furniture_patches[0]
    is_table = furniture_patch.verify_property(""furniture"", ""table"")
    is_nightstand = furniture_patch.verify_property(""furniture"", ""nightstand"")
    if is_table:
        return ""table""
    elif is_nightstand:
        return ""nightstand""
    else:
        return ""neither"""
10508893,What animals are in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in front of the trees?"")"
14501997,What is the gate made of?," # assumes one gate
    image_patch = ImagePatch(image)
    gate_patches = image_patch.find(""gate"")
    if len(gate_patches) == 0:
        # If no gate is found, query the image directly
        return image_patch.simple_query(""What is the gate made of?"")
    return gate_patches[0].simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?," # assumes one device and one table
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    table_patches = image_patch.find(""table"")
    if len(device_patches) == 0 or len(table_patches) == 0:
        # If no device or table is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    device_patch = device_patches[0]
    table_patch = table_patches[0]
    if device_patch.vertical_center < table_patch.vertical_center:
        return device_patch.simple_query(""What color is the device on top of the table?"")
    else:
        return image_patch.simple_query(""What color is the device on top of the table?"")"
181032044,Are these closed drawers?," # assumes one drawer
    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    return bool_to_yesno(drawer_patches[0].verify_property(""drawer"", ""closed""))"
383,What kind of furniture is made of wood?," # returns the type of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wood""):
            return furniture_patch.simple_query(""What kind of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, query the image directly
    return image_patch.simple_query(""What kind of furniture is made of wood?"")"
101054962,What is the person by the bananas wearing?," # contains a relation (by), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person by the bananas wearing?"")"
759165,What is the color of the tower in the middle of the picture?," # assumes one tower
    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    tower_patch = tower_patches[0]
    return tower_patch.simple_query(""What is the color of the tower in the middle of the picture?"")"
10775539,Is this giraffe tall and white?," # returns a boolean
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is this giraffe tall and white?""))
    giraffe_patch = giraffe_patches[0]
    return bool_to_yesno(giraffe_patch.verify_property(""giraffe"", ""tall"") and giraffe_patch.verify_property(""giraffe"", ""white""))"
19981804,On which side of the photo is the colorful screen?," # assumes one screen patch
    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""screen"")
    if len(screen_patches) == 0:
        # If no screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    screen_patch = screen_patches[0]
    if screen_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7903654,Is the tap on the left side or on the right?," # assumes one tap
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    tap_patch = tap_patches[0]
    if tap_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6206183,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?," # returns a boolean
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""black""))"
13123207,Does the kite near the field look high and red?," # assumes one kite and one field
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    field_patches = image_patch.find(""field"")
    # Question assumes only one kite and one field patch
    if len(kite_patches) == 0 or len(field_patches) == 0:
        # If no kite or field is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    kite_patch = kite_patches[0]
    field_patch = field_patches[0]
    if kite_patch.horizontal_center > field_patch.horizontal_center:
        return bool_to_yesno(kite_patch.verify_property(""kite"", ""high"") and kite_patch.verify_property(""kite"", ""red""))
    return ""no"""
7740092,Are there any utensils in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""utensil""))"
8774975,What is around the guy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?," # returns yes or no
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?," # returns yes or no
    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    # Question assumes only one staircase patch
    if len(staircase_patches) == 0:
        # If no staircase is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    staircase_color = staircase_patches[0].simple_query(""What color is the staircase?"")
    sky_color = image_patch.simple_query(""What color is the sky?"")
    return bool_to_yesno(staircase_color != sky_color)"
1605874,What color are the containers that are on the right?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color are the containers that are on the right?"")"
12495781,Are the people to the right or to the left of the cone that is orange?," # assumes one orange cone
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    people_patch = people_patches[0]
    orange_cone_patches = image_patch.find(""orange cone"")
    # Question assumes only one orange cone patch
    if len(orange_cone_patches) == 0:
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    orange_cone_patch = orange_cone_patches[0]
    if people_patch.horizontal_center > orange_cone_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
14165681,"What type of clothing is light, the sweater or the cap?"," # returns the type of clothing
    image_patch = ImagePatch(image)
    light_patches = image_patch.find(""light"")
    # Question assumes only one light patch
    if len(light_patches) == 0:
        # If no light is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    light_patch = light_patches[0]
    sweater_patches = image_patch.find(""sweater"")
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one sweater and cap patch
    if len(sweater_patches) == 0 or len(cap_patches) == 0:
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    sweater_patch = sweater_patches[0]
    cap_patch = cap_patches[0]
    if light_patch.horizontal_center < sweater_patch.horizontal_center and light_patch.horizontal_center < cap_patch.horizontal_center:
        return ""sweater""
    elif light_patch.horizontal_center > sweater_patch.horizontal_center and light_patch.horizontal_center > cap_patch.horizontal_center:
        return ""cap""
    else:
        return ""cap"""
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?," # assumes one girl patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    for chair_patch in chair_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if girl_patch.horizontal_center > chair_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
5617223,"What color is the container to the left of the horse, green or silver?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    container_patch = container_patches[0]
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    horse_patch = horse_patches[0]
    if container_patch.horizontal_center < horse_patch.horizontal_center:
        return container_patch.best_text_match([""green"", ""silver""])
    return ""no"""
2428964,Is the water gray or teal?," # returns a boolean
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].best_text_match([""gray"", ""teal""])"
19620769,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?," # assumes one lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    lamp_patch = lamp_patches[0]
    if lamp_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?," # returns yes or no
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    # Question assumes only one brown animal patch
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    brown_animal_patch = brown_animal_patches[0]
    return bool_to_yesno(brown_animal_patch.verify_property(""brown animal"", ""tiny""))"
5672532,Does that shirt look long sleeved?," # returns a boolean
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does that shirt look long sleeved?""))
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""long sleeved""))"
6146439,Does the box look green?," # returns yes or no
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look green?"")
    return bool_to_yesno(box_patches[0].verify_property(""box"", ""green""))"
1910285,Is the white container on the left of the image?," # assumes one white container
    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    if len(white_container_patches) == 0:
        # If no white container is found, query the image directly
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    white_container_patch = white_container_patches[0]
    if white_container_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no"""
13362134,Is that shower curtain to the left of a toilet?," # assumes one shower curtain and one toilet
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    toilet_patches = image_patch.find(""toilet"")
    if len(shower_curtain_patches) == 0 or len(toilet_patches) == 0:
        # If no shower curtain or toilet is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    shower_curtain_patch = shower_curtain_patches[0]
    toilet_patch = toilet_patches[0]
    return bool_to_yesno(shower_curtain_patch.horizontal_center < toilet_patch.horizontal_center)"
161060488,Is there any cabinet to the right of the stove?," # assumes one stove
    image_patch = ImagePatch(image)
    stove_patches = image_patch.find(""stove"")
    # Question assumes only one stove patch
    if len(stove_patches) == 0:
        # If no stove is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for stove_patch in stove_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > stove_patch.horizontal_center:
                return ""yes""
    return ""no"""
111055042,Is the chair on the right?," # assumes one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return image_patch.simple_query(""Is the chair on the right?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
151068,Which kind of clothing is white?," # returns the first clothing patch that is white
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""white""):
            return clothing_patch.simple_query(""Which kind of clothing is white?"")
    return ""no"""
19387951,Is this place the forest or the garden?," # assumes one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"")"
1781695,What's on the blanket?," # returns the first object found on the blanket
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What's on the blanket?"")
    for blanket_patch in blanket_patches:
        object_patches = image_patch.find(""object"")
        for object_patch in object_patches:
            if object_patch.horizontal_center > blanket_patch.horizontal_center:
                return object_patch.simple_query(""What's on the blanket?"")
    return image_patch.simple_query(""What's on the blanket?"")"
17699779,Is she on a bed?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is she on a bed?"")
    person_patch = person_patches[0]
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        return ""no""
    bed_patch = bed_patches[0]
    return bool_to_yesno(person_patch.vertical_center < bed_patch.vertical_center)"
464441,"What piece of furniture is the blanket on, a bed or a sofa?"," # assumes one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    blanket_patch = blanket_patches[0]
    bed_patches = image_patch.find(""bed"")
    sofa_patches = image_patch.find(""sofa"")
    if len(bed_patches) > 0 and len(sofa_patches) > 0:
        # If both bed and sofa are found, ask directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    elif len(bed_patches) > 0:
        return ""bed""
    elif len(sofa_patches) > 0:
        return ""sofa""
    else:
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")"
9505496,Are the wires above a man?," # contains a relation (above, below, to the left of, to the right of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Are the wires above a man?"")"
4625512,What is the woman doing?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman doing?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""What is the woman doing?"")"
9441941,Is the woman's hair red or black?," # assumes one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    woman_patch = woman_patches[0]
    return woman_patch.best_text_match([""red"", ""black""])"
2387432,What's on the table?," # assumes one table
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's on the table?"")"
10534717,What is the pillow on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pillow on?"")"
19335685,"What fruits is the container behind of, apples or bananas?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")"
3127817,The goat is standing in what?," # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The goat is standing in what?"")"
1588567,Where does the man that to the right of the mirror sit?," # assumes one mirror and one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one man and one mirror patch
    if len(man_patches) == 0 or len(mirror_patches) == 0:
        # If no man or mirror is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    man_patch = man_patches[0]
    mirror_patch = mirror_patches[0]
    if man_patch.horizontal_center > mirror_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
7399543,What is the floor made of?," # returns the answer to the question
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is the house behind of?"")"
1174904,Is the cobblestone sidewalk both large and gray?," # returns a boolean
    image_patch = ImagePatch(image)
    cobblestone_patches = image_patch.find(""cobblestone"")
    # Question assumes only one cobblestone patch
    if len(cobblestone_patches) == 0:
        # If no cobblestone is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?""))
    cobblestone_patch = cobblestone_patches[0]
    is_large = cobblestone_patch.verify_property(""cobblestone"", ""large"")
    is_gray = cobblestone_patch.verify_property(""cobblestone"", ""gray"")
    return bool_to_yesno(is_large and is_gray)"
13375231,What is the lettuce on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lettuce on?"")"
1194027,Which kind of clothing is black?," # returns a list of clothing types
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return clothing_patches[0].best_text_match([""shirt"", ""pants"", ""dress"", ""jacket""])"
9963477,Is the statue wearing a dress?," # assumes only one statue
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    return bool_to_yesno(statue_patches[0].verify_property(""statue"", ""wearing a dress""))"
1151995,Which side of the photo is the yellow vase on?," # assumes one yellow vase
    image_patch = ImagePatch(image)
    yellow_vase_patches = image_patch.find(""yellow vase"")
    if len(yellow_vase_patches) == 0:
        # If no yellow vase is found, query the image directly
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    yellow_vase_patch = yellow_vase_patches[0]
    if yellow_vase_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
712821,What is common to the bear and the belt?," # assumes one bear and one belt
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    belt_patches = image_patch.find(""belt"")
    if len(bear_patches) == 0 or len(belt_patches) == 0:
        # If no bear or belt is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    bear_patch = bear_patches[0]
    belt_patch = belt_patches[0]
    common = set(bear_patch.simple_query(""What is common to the bear and the belt?"").split("", "")) & set(belt_patch.simple_query(""What is common to the bear and the belt?"").split("", ""))
    if len(common) == 0:
        return ""nothing""
    return "", "".join(common)"
1757418,What is the vehicle to the right of the car?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the vehicle to the right of the car?"")"
7624100,Are the trunks that are gray wet and large?," # returns yes or no
    image_patch = ImagePatch(image)
    trunks_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunks_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunks_patches:
        is_gray = trunk_patch.verify_property(""trunk"", ""gray"")
        is_wet = trunk_patch.verify_property(""trunk"", ""wet"")
        is_large = trunk_patch.verify_property(""trunk"", ""large"")
        if is_gray and is_wet and is_large:
            return ""yes""
    return ""no"""
1125474,"On which side of the photo is the iron fence, the right or the left?"," # assumes one iron fence patch
    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    if len(iron_fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    iron_fence_patch = iron_fence_patches[0]
    if iron_fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1300375,What is the name of the item of furniture that the printer is on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")"
5925196,What's the building covered by?," # assumes one building patch
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""What's the building covered by?"")
    building_patch = building_patches[0]
    return building_patch.simple_query(""What's the building covered by?"")"
1948055,What watercraft is the white rope tying?," # assumes one white rope
    image_patch = ImagePatch(image)
    white_rope_patches = image_patch.find(""white rope"")
    # Question assumes only one white rope patch
    if len(white_rope_patches) == 0:
        # If no white rope is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    white_rope_patch = white_rope_patches[0]
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    watercraft_patch = watercraft_patches[0]
    return watercraft_patch.simple_query(""What watercraft is the white rope tying?"")"
8540582,What kind of animal is in front of the leafy trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?," # contains a relation (by), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What does the walking woman by the bus wear?"")"
1129508,Is the controller to the left of a pillow?," # assumes one controller and one pillow
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    pillow_patches = image_patch.find(""pillow"")
    if len(controller_patches) == 0 or len(pillow_patches) == 0:
        # If no controller or pillow is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    controller_patch = controller_patches[0]
    pillow_patch = pillow_patches[0]
    return bool_to_yesno(controller_patch.horizontal_center < pillow_patch.horizontal_center)"
18664084,Is there any sheep by the fence?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is there any sheep by the fence?""))"
6912079,What animal is this?," # returns the answer to ""What is this?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this?"")"
3412029,Where is the person?," # returns the location of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif person_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    elif person_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
14161122,What animal is in the water?," # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?," # assumes one parent and one baby
    image_patch = ImagePatch(image)
    parent_patches = image_patch.find(""parent"")
    baby_patches = image_patch.find(""baby"")
    # Question assumes one parent and one baby
    if len(parent_patches) == 0 or len(baby_patches) == 0:
        # If no parent or baby is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    parent_patch = parent_patches[0]
    baby_patch = baby_patches[0]
    if parent_patch.horizontal_center < baby_patch.horizontal_center:
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > baby_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")"
15699496,What is the cup that looks clean made of?," # assumes only one cup patch
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    cup_patch = cup_patches[0]
    return cup_patch.simple_query(""What is the cup that looks clean made of?"")"
12765451,What animals are to the right of the ladder?," # returns a list of strings
    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for ladder_patch in ladder_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > ladder_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is to the right of the ladder?"")
    return []"
191044307,What animal is black?," # returns the name of the animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What animal is black?"")
    return ""no animal is black"""
12639181,Who is wearing shorts?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = person_patch.simple_query(""Is the person wearing shorts?"") == ""yes""
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, query the image directly
    return image_patch.simple_query(""Who is wearing shorts?"")"
10630949,Is the person that is not male wearing an elbow pad?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person male?"") == ""no"":
            return bool_to_yesno(person_patch.verify_property(""person"", ""elbow pad""))
    return ""no"""
14544602,What is the boy holding?," # assumes one boy
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    holding_patches = image_patch.find(""holding"")
    # Question assumes only one holding patch
    if len(holding_patches) == 0:
        return image_patch.simple_query(""What is the boy holding?"")
    return holding_patches[0].simple_query(""What is the boy holding?"")"
2986699,Of what material the dish?," # material is a property
    image_patch = ImagePatch(image)
    dish_patches = image_patch.find(""dish"")
    # Question assumes only one dish patch
    if len(dish_patches) == 0:
        # If no dish is found, query the image directly
        return image_patch.simple_query(""Of what material is the dish?"")
    return dish_patches[0].best_text_match([""wood"", ""metal"", ""plastic"", ""glass"", ""ceramic""])"
161013513,What kind of animal is on the street?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is on the street?"")"
15143936,What animal is before the roof?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is before the roof?"")"
1955043,Who is playing with the ball?," # contains a relation (playing with), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing with the ball?"")"
91044150,What is the name of the animals in front of the trees beside the river?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?," # assumes only one fruit patch
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is hanging?"")
    return fruit_patches[0].simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?," # contains a relation (under), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)"
10457241,What is the color of the trousers?," # returns the color of the trousers
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"")"
2913850,Is the placemat in the bottom or in the top part?," # assumes one placemat
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    placemat_patch = placemat_patches[0]
    if placemat_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?," # assumes one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What is covered with blanket?"")
    return blanket_patches[0].simple_query(""What is covered with blanket?"")"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?," # assumes one man and one item of furniture
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    man_patch = man_patches[0]
    sweater_patches = image_patch.find(""sweater"")
    # Question assumes only one sweater patch
    if len(sweater_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    sweater_patch = sweater_patches[0]
    if man_patch.horizontal_center > sweater_patch.horizontal_center:
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    furniture_patch = furniture_patches[0]
    if furniture_patch.horizontal_center > man_patch.horizontal_center:
        return furniture_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?"," # assumes one desk drawer
    image_patch = ImagePatch(image)
    desk_drawer_patches = image_patch.find(""desk drawer"")
    if len(desk_drawer_patches) == 0:
        # If no desk drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    desk_drawer_patch = desk_drawer_patches[0]
    if desk_drawer_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?," # returns yes or no
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)"
19737232,Is the book on the right of the picture?," # assumes one book and one picture
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    picture_patches = image_patch.find(""picture"")
    if len(book_patches) == 0 or len(picture_patches) == 0:
        # If no book or picture is found, query the image directly
        return image_patch.simple_query(""Is the book on the right of the picture?"")
    book_patch = book_patches[0]
    picture_patch = picture_patches[0]
    if book_patch.horizontal_center > picture_patch.horizontal_center:
        return ""yes""
    return ""no"""
475064,Who is wearing the glasses?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        is_wearing_glasses = person_patch.simple_query(""Is the person wearing glasses?"") == ""yes""
        if is_wearing_glasses:
            return person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no person is wearing glasses, query the image directly
    return image_patch.simple_query(""Who is wearing the glasses?"")"
8594579,Is there a woman to the right of the orange object that is to the right of the person?," # assumes one person and one orange object
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    person_patch = person_patches[0]
    orange_patches = image_patch.find(""orange"")
    # Question assumes only one orange patch
    if len(orange_patches) == 0:
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    orange_patch = orange_patches[0]
    if orange_patch.horizontal_center > person_patch.horizontal_center:
        woman_patches = image_patch.find(""woman"")
        # Question assumes only one woman patch
        if len(woman_patches) == 0:
            return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center > orange_patch.horizontal_center:
                return ""yes""
    return ""no"""
14602992,Which side of the image is the couch on?," # left or right
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
9944587,How tall is the man that is wearing a shirt?," # returns the height of the man in cm
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    man_patch = man_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no""
    shirt_patch = shirt_patches[0]
    return str(man_patch.vertical_center - shirt_patch.vertical_center)"
13736712,Are there any giraffes?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe""))"
6996118,The young girl is wearing what?," # assumes one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The young girl is wearing what?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What is the girl wearing?"")"
19992576,Is the basket on the floor small and brown?," # returns a boolean
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the basket on the floor small and brown?""))
    basket_patch = basket_patches[0]
    is_on_floor = basket_patch.simple_query(""Is the basket on the floor?"")
    is_small = basket_patch.simple_query(""Is the basket small?"")
    is_brown = basket_patch.simple_query(""Is the basket brown?"")
    return bool_to_yesno(is_on_floor and is_small and is_brown)"
17332401,What is the boy in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"")"
15586294,Which side is the leather armchair on?," # assumes one armchair
    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""armchair"")
    if len(armchair_patches) == 0:
        # If no armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    armchair_patch = armchair_patches[0]
    if armchair_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15658324,What is the horse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?," # assumes one controller
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    controller_patch = controller_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture the same color as the controller?"") == ""yes"":
            return furniture_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    return ""no"""
2531874,Who is playing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is playing?"")
    return person_patches[0].simple_query(""Who is playing?"")"
3112009,Is the plate on the left side?," # assumes one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    plate_patch = plate_patches[0]
    if plate_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
1527613,On which side of the picture is the bag?," # assumes one bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?," # returns yes or no
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return image_patch.simple_query(""Are both the road and the roof the same color?"")
    road_color = road_patches[0].simple_query(""What color is the road?"")
    roof_patches = image_patch.find(""roof"")
    # Question assumes only one roof patch
    if len(roof_patches) == 0:
        return ""no""
    roof_color = roof_patches[0].simple_query(""What color is the roof?"")
    return bool_to_yesno(road_color == roof_color)"
161027384,What is the green rug hanging on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?," # assumes one laptop patch
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Who is using the laptop?"")
    return laptop_patches[0].simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who in the photo is standing?"")
    return person_patches[0].simple_query(""Who in the photo is standing?"")"
693318,Do you see any plates in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate""))"
19613394,The person on the skateboard is wearing what?," # assumes one person and one skateboard
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    skateboard_patches = image_patch.find(""skateboard"")
    if len(person_patches) == 0 or len(skateboard_patches) == 0:
        # If no person or skateboard is found, query the image directly
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    person_patch = person_patches[0]
    skateboard_patch = skateboard_patches[0]
    return person_patch.simple_query(""What is the person wearing?"")"
19927237,Is the blue car in front of the white van?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue car in front of the white van?"")"
31054022,What is the box sitting on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?," # ground is a common noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the ground look snowy and brown?"")"
15185768,Does the sky look blue and clear?," # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""blue"") and image_patch.verify_property(""sky"", ""clear""))"
1589160,Does the person that is sitting lean against a fire hydrant?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")"
2142522,Are there any shopping carts or mannequins in this photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)"
17362234,Are there cages or scrub brushes in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)"
4955854,Is the lamp below the chain?," # assumes one lamp and one chain
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    chain_patches = image_patch.find(""chain"")
    if len(lamp_patches) == 0 or len(chain_patches) == 0:
        # If no lamp or chain is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    lamp_patch = lamp_patches[0]
    chain_patch = chain_patches[0]
    return bool_to_yesno(lamp_patch.vertical_center > chain_patch.vertical_center)"
10463545,Is the computer to the right of the other computer silver or black?," # assumes one computer patch
    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    if len(computer_patches) == 0:
        # If no computer is found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    computer_patch = computer_patches[0]
    other_computer_patches = image_patch.find(""computer"")
    # Question assumes only one other computer patch
    if len(other_computer_patches) == 0:
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    other_computer_patch = other_computer_patches[0]
    if other_computer_patch.horizontal_center > computer_patch.horizontal_center:
        return computer_patch.best_text_match([""silver"", ""black""])
    return computer_patch.best_text_match([""silver"", ""black""])"
2265037,What is the girl wearing?," # returns the answer to ""What is the girl wearing?""
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_number = image_patch.exists(""blue number"")
    is_blue_letter = image_patch.exists(""blue letter"")
    return bool_to_yesno(is_blue_number or is_blue_letter)"
3483992,Is the long bus to the left or to the right of the person with the backpack?," # assumes one person with a backpack
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    bus_patch = bus_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    person_patch = person_patches[0]
    if bus_patch.horizontal_center < person_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
13598461,What is the device that is not on called?," # assumes one device patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    device_patch = device_patches[0]
    on_patches = image_patch.find(""on"")
    # Question assumes only one on patch
    if len(on_patches) == 0:
        return image_patch.simple_query(""What is the device that is not on called?"")
    on_patch = on_patches[0]
    if on_patch.horizontal_center > device_patch.horizontal_center:
        return device_patch.simple_query(""What is the device that is not on called?"")
    else:
        return device_patch.simple_query(""What is the device that is on called?"")"
13885436,The sky has what color?," # returns the color of the sky
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"")"
7432467,Is the black container to the left of the man that is on the motorcycle?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")"
19540096,Is the fire in an oven?," # assumes one fire and one oven
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    oven_patches = image_patch.find(""oven"")
    if len(fire_patches) == 0 or len(oven_patches) == 0:
        # If no fire or oven is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    fire_patch = fire_patches[0]
    oven_patch = oven_patches[0]
    return bool_to_yesno(fire_patch.horizontal_center < oven_patch.horizontal_center)"
18291107,The horse is where?," # assumes one horse patch
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""The horse is where?"")
    return horse_patches[0].simple_query(""The horse is where?"")"
5435474,Is the man that is to the left of the motorbike wearing a hat?," # assumes one man and one motorbike
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    motorbike_patches = image_patch.find(""motorbike"")
    # Question assumes only one man and one motorbike patch
    if len(man_patches) == 0 or len(motorbike_patches) == 0:
        # If no man or motorbike is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    man_patch = man_patches[0]
    motorbike_patch = motorbike_patches[0]
    if man_patch.horizontal_center < motorbike_patch.horizontal_center:
        return bool_to_yesno(man_patch.verify_property(""man"", ""hat""))
    return ""no"""
226307,Are there any tables in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))"
1944826,Who is reflected in the mirror?," # assumes one mirror patch
    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    if len(mirror_patches) == 0:
        # If no mirror is found, query the image directly
        return image_patch.simple_query(""Who is reflected in the mirror?"")
    mirror_patch = mirror_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > mirror_patch.horizontal_center:
            return person_patch.simple_query(""Who is reflected in the mirror?"")
    return ""no one"""
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?," # assumes one woman and one cooking utensil
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    woman_patch = woman_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    if len(cooking_utensil_patches) == 0:
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    cooking_utensil_patch = cooking_utensil_patches[0]
    if cooking_utensil_patch.horizontal_center > woman_patch.horizontal_center and cooking_utensil_patch.vertical_center < woman_patch.vertical_center:
        return cooking_utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")"
18435846,What is the color of the balloon that is to the right of the backpack?," # assumes one balloon and one backpack
    image_patch = ImagePatch(image)
    balloon_patches = image_patch.find(""balloon"")
    backpack_patches = image_patch.find(""backpack"")
    if len(balloon_patches) == 0 or len(backpack_patches) == 0:
        # If no balloon or backpack is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    balloon_patch = balloon_patches[0]
    backpack_patch = backpack_patches[0]
    if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
        return balloon_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    return balloon_patch.simple_query(""What is the color of the balloon that is to the left of the backpack?"")"
8390894,Is the woman to the right of the man sitting on a sofa?," # assumes one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    sofa_patches = image_patch.find(""sofa"")
    # Question assumes one sofa patch
    if len(sofa_patches) == 0:
        return ""no""
    sofa_patch = sofa_patches[0]
    if woman_patch.horizontal_center > man_patch.horizontal_center and sofa_patch.horizontal_center < man_patch.horizontal_center:
        return ""yes""
    return ""no"""
18896007,Which side of the image is the pot on?," # left or right
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19323898,Is that pillow on a couch?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is that pillow on a couch?"")"
1281034,Where are the trees?," # returns the location of the trees
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Where are the trees?"")
    tree_patch = tree_patches[0]
    if tree_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif tree_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
13515147,What is on the cow?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the cow?"")"
91036716,What is the skater doing?," # assumes one skater patch
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the left of the boy carrying?"")"
13152020,Is the ground wet or dry?," # assumes the ground is the bottom of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ground wet or dry?"")"
19312096,"On which side is the purse, the left or the right?"," # assumes one purse
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    purse_patch = purse_patches[0]
    if purse_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bread""))"
9113663,Do you see either any snow or sand that are white?," # returns yes or no
    image_patch = ImagePatch(image)
    is_snow = image_patch.exists(""snow"") and image_patch.verify_property(""snow"", ""white"")
    is_sand = image_patch.exists(""sand"") and image_patch.verify_property(""sand"", ""white"")
    return bool_to_yesno(is_snow or is_sand)"
10243612,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"")"
15599523,Is the dog on the right side?," # assumes one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    dog_patch = dog_patches[0]
    if dog_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
101019673,What is the man wearing?," # returns the answer to ""What is the man wearing?""
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    return man_patches[0].simple_query(""What is the man wearing?"")"
333047,Do you see any men to the right of the orange tent?," # returns yes or no
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for man_patch in man_patches:
        orange_tent_patches = image_patch.find(""orange tent"")
        # Question assumes only one orange tent patch
        if len(orange_tent_patches) == 0:
            return ""no""
        for orange_tent_patch in orange_tent_patches:
            if orange_tent_patch.horizontal_center < man_patch.horizontal_center:
                return ""yes""
    return ""no"""
13907796,Is the shirt striped and green?," # returns a boolean
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the shirt striped and green?""))
    shirt_patch = shirt_patches[0]
    return bool_to_yesno(shirt_patch.verify_property(""shirt"", ""striped"") and shirt_patch.verify_property(""shirt"", ""green""))"
17207604,Are there either bottles or shelves?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?," # assumes one train patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    train_patch = train_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > train_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    return ""no"""
7165131,Is that train engine small or large?," # assumes one train engine patch
    image_patch = ImagePatch(image)
    train_engine_patches = image_patch.find(""train engine"")
    if len(train_engine_patches) == 0:
        # If no train engine is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    train_engine_patch = train_engine_patches[0]
    if train_engine_patch.width < 100:
        return ""small""
    else:
        return ""large"""
21049362,Where are the railroad tracks?," # returns the location of the railroad tracks
    image_patch = ImagePatch(image)
    railroad_patches = image_patch.find(""railroad tracks"")
    # Question assumes only one railroad patch
    if len(railroad_patches) == 0:
        # If no railroad tracks are found, query the image directly
        return image_patch.simple_query(""Where are the railroad tracks?"")
    return railroad_patches[0].simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?," # returns a list of strings
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the children playing?"")"
598297,Are there combs or figurines in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)"
16409127,What is the wire on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?," # assumes one tunnel patch
    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    tunnel_patch = tunnel_patches[0]
    if tunnel_patch.width < 100:
        return ""small""
    else:
        return ""large"""
17560468,Do you see trains or windows?," # returns yes or no
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person near the man wearing?"")"
12352375,Is the vehicle that is sitting down black or blue?," # assumes one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    vehicle_patch = vehicle_patches[0]
    is_sitting_down = vehicle_patch.verify_property(""vehicle"", ""sitting down"")
    if is_sitting_down:
        return vehicle_patch.best_text_match([""black"", ""blue""])
    else:
        return ""neither"""
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?," # assumes one white thing and one metal trash can
    image_patch = ImagePatch(image)
    white_thing_patches = image_patch.find(""white thing"")
    metal_trash_can_patches = image_patch.find(""metal trash can"")
    if len(white_thing_patches) == 0 or len(metal_trash_can_patches) == 0:
        # If no white thing or metal trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    white_thing_patch = white_thing_patches[0]
    metal_trash_can_patch = metal_trash_can_patches[0]
    if metal_trash_can_patch.horizontal_center < white_thing_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5800248,Is it outdoors?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""outdoor"", ""outdoor""))"
4604785,Does the pizza slice to the left of the pizza have large size?," # assumes one pizza slice and one pizza
    image_patch = ImagePatch(image)
    pizza_slics = image_patch.find(""pizza slice"")
    # Question assumes only one pizza slice patch
    if len(pizza_slics) == 0:
        # If no pizza slice is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    pizza_slic = pizza_slics[0]
    pizza = image_patch.find(""pizza"")[0]
    if pizza_slic.horizontal_center < pizza.horizontal_center:
        return bool_to_yesno(pizza_slic.verify_property(""pizza slice"", ""large""))
    else:
        return ""no"""
15185845,What's the man wearing?," # returns the answer to ""What's the man wearing?""
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
2282232,Where is the snow?," # returns the location of the snow
    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    # Question assumes only one snow patch
    if len(snow_patches) == 0:
        # If no snow is found, query the image directly
        return image_patch.simple_query(""Where is the snow?"")
    return snow_patches[0].simple_query(""Where is the snow?"")"
7889197,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)"
154682,Where does the bird stand on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where does the bird stand on?"")"
10435315,Is the man holding a racket?," # assumes one man and one racket
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
121035887,Do the man shorts have white color?," # returns a boolean
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Do the man shorts have white color?""))
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""white""))"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?," # assumes one man and one cow
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    cow_patch = cow_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.horizontal_center < man_patch.horizontal_center and man_patch.horizontal_center < cow_patch.horizontal_center:
        return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")"
19659501,What is the color of the umbrella the bird is on?," # assumes one umbrella and one bird
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    bird_patches = image_patch.find(""bird"")
    if len(umbrella_patches) == 0 or len(bird_patches) == 0:
        # If no umbrella or bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    umbrella_patch = umbrella_patches[0]
    bird_patch = bird_patches[0]
    if umbrella_patch.horizontal_center > bird_patch.horizontal_center:
        return umbrella_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    else:
        return umbrella_patch.simple_query(""What is the color of the umbrella the bird is on?"")"
10595217,Where is the grass?," # returns the location of the grass
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"")"
14803743,Which kind of clothing is black?," # returns a list of clothing types
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return clothing_patches[0].best_text_match([""shirt"", ""pants"", ""dress"", ""jacket""])"
19743238,Is the man on the right side?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
3965204,Are the mountains covered with snow?," # returns a boolean
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Are the mountains covered with snow?""))
    mountain_patch = mountain_patches[0]
    return bool_to_yesno(mountain_patch.verify_property(""mountain"", ""snow""))"
141024710,Are there both windows and cars in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?," # returns the color of the shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    return shirt_patches[0].simple_query(""What color is the shirt?"")"
3623367,What's he doing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What's he doing?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""What's he doing?"")"
15634950,Where is the giraffe in front of the hay eating from?," # assumes one giraffe and one hay
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    hay_patches = image_patch.find(""hay"")
    # Question assumes only one giraffe and one hay patch
    if len(giraffe_patches) == 0 or len(hay_patches) == 0:
        # If no giraffe or hay is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    giraffe_patch = giraffe_patches[0]
    hay_patch = hay_patches[0]
    if giraffe_patch.horizontal_center > hay_patch.horizontal_center:
        return ""right""
    elif giraffe_patch.horizontal_center < hay_patch.horizontal_center:
        return ""left""
    else:
        return ""center"""
16644500,What animal is the log pulled by?," # contains a relation (pulled by), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the log pulled by?"")"
3202108,Which side is the car on?," # left or right
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10137201,Are the papers in the bottom part of the picture?," # papers are not a single object, so find all of them
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    for paper_patch in paper_patches:
        if paper_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?," # assumes one person and one boy
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    boy_patches = image_patch.find(""boy"")
    if len(person_patches) == 0 or len(boy_patches) == 0:
        # If no person or boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    person_patch = person_patches[0]
    boy_patch = boy_patches[0]
    if boy_patch.horizontal_center < person_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8438091,The picture is what color?," # returns the color of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")"
4325939,On which side of the photo is the banana?," # assumes one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    banana_patch = banana_patches[0]
    if banana_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1425189,What is the name of the brown piece of furniture?," # returns the name of the brown piece of furniture
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown"")
    # Question assumes only one brown patch
    if len(brown_patches) == 0:
        # If no brown is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    brown_patch = brown_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    furniture_patch = furniture_patches[0]
    if brown_patch.horizontal_center > furniture_patch.horizontal_center:
        return furniture_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return brown_patch.simple_query(""What is the name of the brown piece of furniture?"")"
5119962,Is the man to the right of glasses?," # assumes one man and one glasses
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    glasses_patches = image_patch.find(""glasses"")
    if len(man_patches) == 0 or len(glasses_patches) == 0:
        # If no man or glasses are found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    man_patch = man_patches[0]
    glasses_patch = glasses_patches[0]
    if man_patch.horizontal_center > glasses_patch.horizontal_center:
        return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?," # assumes one toilet
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    toilet_patch = toilet_patches[0]
    return toilet_patch.simple_query(""Is the toilet lid down or up?"")"
6522554,Which kind of device does the man hold?," # assumes one man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    device_patch = device_patches[0]
    return device_patch.simple_query(""Which kind of device does the man hold?"")"
870619,What is the device to the left of the person that is to the left of the television?," # assumes one person and one television
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    person_patch = person_patches[0]
    television_patches = image_patch.find(""television"")
    # Question assumes only one television patch
    if len(television_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    television_patch = television_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < person_patch.horizontal_center and person_patch.horizontal_center < television_patch.horizontal_center:
            return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")"
12713794,Does the woman to the left of the man wear a necklace?," # assumes one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes one man and one woman
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return bool_to_yesno(woman_patch.verify_property(""woman"", ""necklace""))
    return ""no"""
824070,What is the man doing?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"")"
11593733,Which kind of furniture is right to the pillow?," # assumes one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is right to the pillow?"")
    return ""no"""
3357821,Does the dog to the left of the other dog look small or large?," # assumes only two dogs
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If no two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog = dog_patches[0]
    right_dog = dog_patches[1]
    if left_dog.horizontal_center < right_dog.horizontal_center:
        return left_dog.simple_query(""Does the dog look small or large?"")
    else:
        return right_dog.simple_query(""Does the dog look small or large?"")"
338026,Are the white candles short or tall?," # assumes only one white candle
    image_patch = ImagePatch(image)
    white_candle_patches = image_patch.find(""white candle"")
    # Question assumes only one white candle patch
    if len(white_candle_patches) == 0:
        # If no white candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    white_candle_patch = white_candle_patches[0]
    if white_candle_patch.height < image_patch.height / 2:
        return ""short""
    else:
        return ""tall"""
15346232,What kind of fruit is the girl holding?," # assumes one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    girl_patch = girl_patches[0]
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    fruit_patch = fruit_patches[0]
    return fruit_patch.best_text_match([""apple"", ""banana"", ""orange""])"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?"," # assumes one yellow vehicle
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    yellow_vehicle_patch = yellow_vehicle_patches[0]
    if yellow_vehicle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
81030271,Is the gray car to the right or to the left of the cart?," # assumes one gray car and one cart
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    cart_patches = image_patch.find(""cart"")
    if len(gray_car_patches) == 0 or len(cart_patches) == 0:
        # If no gray car or cart is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    gray_car_patch = gray_car_patches[0]
    cart_patch = cart_patches[0]
    if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?," # assumes one canister patch
    image_patch = ImagePatch(image)
    canister_patches = image_patch.find(""canister"")
    if len(canister_patches) == 0:
        # If no canister is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    canister_patch = canister_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    for cooking_utensil_patch in cooking_utensil_patches:
        if cooking_utensil_patch.horizontal_center > canister_patch.horizontal_center:
            return cooking_utensil_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    return ""no"""
8240699,What animal is in front of the bird?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the bird?"")"
10105081,Is the fence white or green?," # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].best_text_match([""white"", ""green""])"
13613689,Is there a train or a fence in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)"
10662521,What is the bottle made of?," # bottle is a container
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?," # assumes one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    plate_patch = plate_patches[0]
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    fruit_patch = fruit_patches[0]
    return fruit_patch.best_text_match([""apple"", ""banana"", ""orange""])"
16701575,What device is to the right of the cake?," # assumes one cake patch
    image_patch = ImagePatch(image)
    cake_patches = image_patch.find(""cake"")
    if len(cake_patches) == 0:
        # If no cake is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    cake_patch = cake_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > cake_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the right of the cake?"")
    return ""no"""
6572516,What material is the ceiling?," # ceiling is not a common object, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?," # returns yes or no
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?," # assumes one egg patch
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    egg_patch = egg_patches[0]
    return egg_patch.simple_query(""What is the color of the egg in the middle of the picture?"")"
14371534,Are the gold pans on the right part or on the left?," # assumes only one gold pan
    image_patch = ImagePatch(image)
    gold_pan_patches = image_patch.find(""gold pan"")
    # Question assumes only one gold pan patch
    if len(gold_pan_patches) == 0:
        # If no gold pan is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    gold_pan_patch = gold_pan_patches[0]
    if gold_pan_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16538076,What does the man that is not tall wear?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if not man_patch.verify_property(""man"", ""tall""):
            return man_patch.simple_query(""What does the man wear?"")
    # If no man is not tall, query the image directly
    return image_patch.simple_query(""What does the man that is not tall wear?"")"
5483644,"On which side is the woman, the left or the right?"," # assumes one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?," # returns the answer to ""What is this?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this?"")"
1290926,Are there either any life vests or flags?," # returns yes or no
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)"
18273738,Do you see a cup?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cup""))"
4211922,Who is sitting on the table?," # assumes one table
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Who is sitting on the table?"")
    table_patch = table_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is sitting on the table?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > table_patch.horizontal_center:
            return person_patch.simple_query(""Who is sitting on the table?"")
    return image_patch.simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?," # assumes one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) < 2:
        # If there is not two girls, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    left_girl = girl_patches[0]
    right_girl = girl_patches[1]
    if left_girl.horizontal_center < right_girl.horizontal_center:
        return left_girl.simple_query(""What is the color of the girl?"")
    else:
        return right_girl.simple_query(""What is the color of the girl?"")"
6599090,What is the person to the right of the car holding?," # assumes one car and one person
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    person_patches = image_patch.find(""person"")
    if len(car_patches) == 0 or len(person_patches) == 0:
        # If no car or person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    car_patch = car_patches[0]
    person_patch = person_patches[0]
    if person_patch.horizontal_center > car_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the right of the car holding?"")
    return person_patch.simple_query(""What is the person to the left of the car holding?"")"
1174895,What is the vehicle in the parking lot?," # assumes one vehicle and one parking lot
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    parking_lot_patches = image_patch.find(""parking lot"")
    if len(vehicle_patches) == 0 or len(parking_lot_patches) == 0:
        # If no vehicle or parking lot is found, query the image directly
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    vehicle_patch = vehicle_patches[0]
    parking_lot_patch = parking_lot_patches[0]
    return vehicle_patch.simple_query(""What is the vehicle in the parking lot?"")"
14755158,Who is the woman in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the woman in front of?"")"
18349161,Where does the cow that is standing stand?," # assumes one cow patch
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    cow_patch = cow_patches[0]
    return cow_patch.simple_query(""Where does the cow that is standing stand?"")"
7472884,On which side is the tap?," # left or right
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    tap_patch = tap_patches[0]
    if tap_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
111051831,On which side of the image is the cabinet?," # assumes one cabinet
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?," # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    fork_patch = fork_patches[0]
    if fork_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    person_patch = person_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""no""
    bag_patch = bag_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    if man_patch.horizontal_center > bag_patch.horizontal_center:
        return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?," # returns a boolean
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Are the artwork and the computer desk made of the same material?""))
    artwork_patch = artwork_patches[0]
    computer_desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one computer desk patch
    if len(computer_desk_patches) == 0:
        return bool_to_yesno(image_patch.simple_query(""Are the artwork and the computer desk made of the same material?""))
    computer_desk_patch = computer_desk_patches[0]
    return bool_to_yesno(artwork_patch.verify_property(""artwork"", ""material"") == computer_desk_patch.verify_property(""computer desk"", ""material""))"
14298125,Who is playing Wii?," # assumes one person is playing Wii
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")"
9382689,What's the floor made of?," # returns the answer to the question
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the dress?"")
    for person_patch in person_patches:
        is_wearing_dress = (person_patch.simple_query(""Is the person wearing a dress?"") == ""yes"")
        if is_wearing_dress:
            return person_patch.simple_query(""Who is wearing the dress?"") # crop would include the dress so keep it in the query
    # If no person is wearing a dress, pick the first person
    return person_patches[0].simple_query(""Who is wearing the dress?"")"
15127108,Does the tea pot above the receipt look short and white?," # returns a boolean
    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    # Question assumes only one tea pot patch
    if len(tea_pot_patches) == 0:
        # If no tea pot is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the tea pot above the receipt look short and white?""))
    tea_pot_patch = tea_pot_patches[0]
    receipt_patches = image_patch.find(""receipt"")
    # Question assumes only one receipt patch
    if len(receipt_patches) == 0:
        return bool_to_yesno(image_patch.simple_query(""Does the tea pot above the receipt look short and white?""))
    receipt_patch = receipt_patches[0]
    if tea_pot_patch.vertical_center < receipt_patch.vertical_center:
        return bool_to_yesno(tea_pot_patch.verify_property(""tea pot"", ""short"") and tea_pot_patch.verify_property(""tea pot"", ""white""))
    return bool_to_yesno(False)"
15632653,Which room is it?," # returns the name of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?," # returns a list of clothing types
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return clothing_patches[0].best_text_match([""shirt"", ""pants"", ""dress"", ""jacket""])"
490992,Is the fence on the left side or on the right of the picture?," # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?," # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""mountains"", ""rocky""))"
17573742,Is the woman to the right of the camera wearing a coat?," # camera is not a standard object, so ask directly
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    for woman_patch in woman_patches:
        coat_patches = image_patch.find(""coat"")
        # Question assumes only one coat patch
        if len(coat_patches) == 0:
            return ""no""
        for coat_patch in coat_patches:
            if coat_patch.horizontal_center > woman_patch.horizontal_center:
                return ""yes""
    return ""no"""
3395780,Is the vehicle to the left of the parking meter covered in rain?," # assumes one vehicle and one parking meter
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    parking_meter_patches = image_patch.find(""parking meter"")
    if len(vehicle_patches) == 0 or len(parking_meter_patches) == 0:
        # If no vehicle or parking meter is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    vehicle_patch = vehicle_patches[0]
    parking_meter_patch = parking_meter_patches[0]
    if vehicle_patch.horizontal_center < parking_meter_patch.horizontal_center:
        return bool_to_yesno(image_patch.verify_property(""vehicle"", ""rain""))
    return ""no"""
1542668,Is there a black laptop or desk?," # returns yes or no
    image_patch = ImagePatch(image)
    is_black_laptop = image_patch.exists(""black laptop"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_black_laptop or is_desk)"
1655442,What type of food is to the right of the waffles that are to the right of the person?," # assumes only one person and one waffle
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    person_patch = person_patches[0]
    waffle_patches = image_patch.find(""waffle"")
    # Question assumes only one waffle patch
    if len(waffle_patches) == 0:
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    waffle_patch = waffle_patches[0]
    if waffle_patch.horizontal_center > person_patch.horizontal_center:
        food_patches = image_patch.find(""food"")
        # Question assumes only one food patch
        if len(food_patches) == 0:
            return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
        return food_patches[0].simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")"
395290,How large is the bag?," # returns the size of the bag in inches
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return str(bag_patches[0].width) + "" x "" + str(bag_patches[0].height)"
16138893,Are there both motorcycles and cars in this scene?," # returns yes or no
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = person_patch.simple_query(""Is the person wearing shorts?"") == ""yes""
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, query the image directly
    return image_patch.simple_query(""Who is wearing shorts?"")"
171032184,What hangs from the windows?," # contains a relation (hanging from), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")"
8197176,What color is the jacket that the man wears?," # returns the color of the jacket
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    jacket_patch = jacket_patches[0]
    return jacket_patch.simple_query(""What color is the jacket that the man wears?"")"
3440931,What are that pieces of furniture called?," # returns a list of strings
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What are those pieces of furniture called?"")
    return furniture_patches[0].simple_query(""What are those pieces of furniture called?"")"
337924,What is the fruit that is to the left of the chair?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?," # assumes one bowl patch
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    bowl_patch = bowl_patches[0]
    return bowl_patch.simple_query(""What do you think are the bowls on?"")"
18330260,Is the sky above the trees open and clear?," # assumes one sky patch and one tree patch
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    tree_patches = image_patch.find(""tree"")
    if len(sky_patches) == 0 or len(tree_patches) == 0:
        # If no sky or tree is found, query the image directly
        return image_patch.simple_query(""Is the sky above the trees open and clear?"")
    sky_patch = sky_patches[0]
    tree_patch = tree_patches[0]
    if sky_patch.vertical_center < tree_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
14119691,Does the squirrel to the right of the stuffed dog look white?," # assumes one squirrel and one stuffed dog
    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    stuffed_dog_patches = image_patch.find(""stuffed dog"")
    if len(squirrel_patches) == 0 or len(stuffed_dog_patches) == 0:
        # If no squirrel or stuffed dog is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for squirrel_patch in squirrel_patches:
        for stuffed_dog_patch in stuffed_dog_patches:
            if squirrel_patch.horizontal_center > stuffed_dog_patch.horizontal_center:
                return bool_to_yesno(squirrel_patch.verify_property(""squirrel"", ""white""))
    return ""no"""
18437694,Does the clock to the right of the statue have gold color and tiny size?," # returns a boolean
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Does the clock to the right of the statue have gold color and tiny size?"")
    for clock_patch in clock_patches:
        if clock_patch.horizontal_center > image_patch.horizontal_center:
            if clock_patch.verify_property(""clock"", ""gold"") and clock_patch.verify_property(""clock"", ""tiny""):
                return ""yes""
    return ""no"""
1252960,Where was the photo taken?," # This is a property of the image itself, not the objects in it
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a frisbee on the grass?"")"
13180513,Are there either cakes or containers in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?," # returns yes or no
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?," # assumes one police officer and one blue car
    image_patch = ImagePatch(image)
    police_officer_patches = image_patch.find(""police officer"")
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes one police officer and one blue car
    if len(police_officer_patches) == 0 or len(blue_car_patches) == 0:
        # If no police officer or blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    police_officer_patch = police_officer_patches[0]
    blue_car_patch = blue_car_patches[0]
    if blue_car_patch.horizontal_center > police_officer_patch.horizontal_center:
        return ""behind""
    else:
        return ""in front of"""
5785831,What is in the glass?," # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the glass?"")"
19246241,Are there any brown benches or buckets?," # returns yes or no
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_bucket = image_patch.exists(""bucket"")
    return bool_to_yesno(is_brown_bench or is_bucket)"
3243803,"Where in the picture is the spoon, on the right or on the left?"," # assumes one spoon
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6952486,Does the shirt look white?," # returns a boolean
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the shirt look white?""))
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))"
17401425,Is there a bag that is not brown?," # returns yes or no
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if not bag_patch.verify_property(""bag"", ""brown""):
            return ""yes""
    return ""no"""
481240,"Which kind of furniture is large, the shelf or the cupboard?"," # assumes only one shelf and one cupboard
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    if len(shelf_patches) == 0 or len(cupboard_patches) == 0:
        # If no shelf or cupboard is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    if shelf_patches[0].width > cupboard_patches[0].width:
        return ""shelf""
    else:
        return ""cupboard"""
8531943,Are there any screens or bags?," # returns yes or no
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)"
1969545,What is she wearing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    return person_patches[0].simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?"," # freezer and ice maker are not in the image
    image_patch = ImagePatch(image)
    freezer_patches = image_patch.find(""freezer"")
    # Question assumes only one freezer patch
    if len(freezer_patches) == 0:
        # If no freezer is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    freezer_patch = freezer_patches[0]
    is_white = freezer_patch.verify_property(""freezer"", ""white"")
    if is_white:
        return ""ice maker""
    else:
        return ""freezer"""
1051870,Are there chairs or tables that are not green?," # returns yes or no
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    if is_chair or is_table:
        return ""yes""
    return ""no"""
1366363,Does the taxi have a different color than the truck?," # returns yes or no
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    taxi_color = taxi_patches[0].simple_query(""What color is the taxi?"")
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        return ""no""
    truck_color = truck_patches[0].simple_query(""What color is the truck?"")
    return bool_to_yesno(taxi_color != truck_color)"
5460839,In which part of the image is the dog?," # returns the part of the image where the dog is
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    dog_patch = dog_patches[0]
    if dog_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif dog_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        if dog_patch.vertical_center < image_patch.vertical_center:
            return ""bottom""
        else:
            return ""top"""
18899476,What type of vegetable is to the right of the rice that is on the plate?," # assumes one rice patch and one vegetable patch
    image_patch = ImagePatch(image)
    rice_patches = image_patch.find(""rice"")
    if len(rice_patches) == 0:
        # If no rice is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    rice_patch = rice_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > rice_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")"
8606903,What food item is not wide?," # assumes only one food item
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""wide""):
            return food_patch.simple_query(""What food item is not wide?"")
    # If no food is not wide, query the image directly
    return image_patch.simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?," # returns yes or no
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there an elephant near the pond?"")"
1575941,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?," # contains a relation (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")"
16654241,Is the TV on the left or on the right?," # assumes one TV patch
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    tv_patch = tv_patches[0]
    if tv_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
18685233,Which kind of vehicle is to the left of the flags?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")"
9796068,Are there both a fence and a sheep in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_blanket = image_patch.exists(""blue blanket"")
    is_blue_towel = image_patch.exists(""blue towel"")
    return bool_to_yesno(is_blue_blanket or is_blue_towel)"
1110330,Is the pillow to the left of the frog cream colored or green?," # returns a list of strings
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    for pillow_patch in pillow_patches:
        frog_patches = image_patch.find(""frog"")
        # Question assumes only one frog patch
        if len(frog_patches) == 0:
            return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
        for frog_patch in frog_patches:
            if frog_patch.horizontal_center < pillow_patch.horizontal_center:
                return pillow_patch.best_text_match([""cream colored"", ""green""])
    return ""no"""
511507,Is the antenna on the aircraft?," # assumes one aircraft patch
    image_patch = ImagePatch(image)
    antenna_patches = image_patch.find(""antenna"")
    if len(antenna_patches) == 0:
        # If no antenna is found, query the image directly
        return image_patch.simple_query(""Is the antenna on the aircraft?"")
    for antenna_patch in antenna_patches:
        if antenna_patch.simple_query(""Is the antenna on the aircraft?"") == ""yes"":
            return ""yes""
    return ""no"""
10464417,"In which part is the tent, the top or the bottom?"," # assumes only one tent patch
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
10816730,Is the tree in front of the building?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tree in front of the building?"")"
18766115,Who is walking?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is walking?"")
    return person_patches[0].simple_query(""Who is walking?"")"
10625851,Are there either any fruits or plates in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?," # returns yes or no
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    for person_patch in person_patches:
        is_wearing_coat = person_patch.verify_property(""person"", ""coat"")
        if is_wearing_coat:
            return ""yes""
    return ""no"""
4194722,Is the man wearing a helmet?," # returns a boolean
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the man wearing a helmet?""))
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""wearing helmet""))"
414248,"What animal are the women near the ocean riding, a pig or a horse?"," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")"
683094,Who is wearing the shirt?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    person_patch = person_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Who is wearing the shirt?"")
    shirt_patch = shirt_patches[0]
    if shirt_patch.horizontal_center > person_patch.horizontal_center:
        return person_patch.simple_query(""Who is wearing the shirt?"")
    else:
        return person_patch.simple_query(""Who is wearing the shirt?"")"
12140603,What device is to the left of the headphones?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is to the left of the headphones?"")"
5575209,The flowers are where?," # assumes only one patch
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    return flower_patches[0].simple_query(""The flowers are where?"")"
8773829,Which kind of furniture is made of wood?," # returns the name of the furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wood""):
            return furniture_patch.simple_query(""Which kind of furniture is made of wood?"") # crop would include the wood so keep it in the query
    # If no furniture is made of wood, query the image directly
    return image_patch.simple_query(""Which kind of furniture is made of wood?"")"
12636428,Which kind of animal is black?," # returns the first animal that is black
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""Which kind of animal is black?"")
    return ""no animal is black"""
1020584,What animals is the car behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals is the car behind of?"")"
11879418,The man is standing on what?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is standing on what?"")"
12334288,What device is to the left of the cabinet?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is to the left of the cabinet?"")"
691610,Is the monitor to the left of a book?," # assumes one monitor and one book
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    book_patches = image_patch.find(""book"")
    if len(monitor_patches) == 0 or len(book_patches) == 0:
        return ""no""
    monitor_patch = monitor_patches[0]
    book_patch = book_patches[0]
    return bool_to_yesno(monitor_patch.horizontal_center < book_patch.horizontal_center)"
7552714,Is the color of the jacket black?," # returns a boolean
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the color of the jacket black?""))
    return bool_to_yesno(jacket_patches[0].verify_property(""jacket"", ""black""))"
8492422,Is the man to the left of a boy?," # assumes one man and one boy
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    boy_patches = image_patch.find(""boy"")
    if len(man_patches) == 0 or len(boy_patches) == 0:
        # If no man or boy is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    man_patch = man_patches[0]
    boy_patch = boy_patches[0]
    return bool_to_yesno(man_patch.horizontal_center < boy_patch.horizontal_center)"
13248061,What type of device is to the left of the keyboard in the bottom of the image?," # assumes only one device and one keyboard
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    device_patch = device_patches[0]
    keyboard_patches = image_patch.find(""keyboard"")
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    keyboard_patch = keyboard_patches[0]
    if device_patch.horizontal_center < keyboard_patch.horizontal_center and device_patch.vertical_center > image_patch.vertical_center - image_patch.height / 2:
        return device_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")"
18252454,What is common to the roof and the sky?," # assumes only one roof and one sky
    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    sky_patches = image_patch.find(""sky"")
    if len(roof_patches) == 0 or len(sky_patches) == 0:
        # If no roof or sky is found, query the image directly
        return image_patch.simple_query(""What is common to the roof and the sky?"")
    roof_patch = roof_patches[0]
    sky_patch = sky_patches[0]
    return roof_patch.best_text_match([""blue"", ""white"", ""gray"", ""brown"", ""green""])"
14443687,What do the cat and the book have in common?," # returns a list of strings
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    cat_patch = cat_patches[0]
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    book_patch = book_patches[0]
    common_properties = []
    for property in [""color"", ""shape"", ""size"", ""material"", ""texture"", ""pattern""]:
        if cat_patch.verify_property(""cat"", property) and book_patch.verify_property(""book"", property):
            common_properties.append(property)
    if len(common_properties) == 0:
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    return "", "".join(common_properties)"
14571335,Who is wearing trousers?," # returns the name of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing trousers?"")
    for person_patch in person_patches:
        is_wearing_trousers = (person_patch.simple_query(""Is the person wearing trousers?"") == ""yes"")
        if is_wearing_trousers:
            return person_patch.simple_query(""Who is wearing trousers?"") # crop would include the trousers so keep it in the query
    # If no person is wearing trousers, pick the first person
    return person_patches[0].simple_query(""Who is wearing trousers?"")"
474885,Who wears a cap?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""wearing cap""):
            return person_patch.simple_query(""Who wears a cap?"") # crop would include the cap so keep it in the query
    return ""no one"""
141013015,"What color is the toilet, brown or white?"," # returns the color of the toilet
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].best_text_match([""brown"", ""white""])"
5515816,On which side of the image is the fence?," # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16774696,What is the surfer wearing?," # returns the answer to ""What is the surfer wearing?""
    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    # Question assumes only one surfer patch
    if len(surfer_patches) == 0:
        # If no surfer is found, query the image directly
        return image_patch.simple_query(""What is the surfer wearing?"")
    return surfer_patches[0].simple_query(""What is the surfer wearing?"")"
13701956,Is there any grass or sand that is not dry?," # returns yes or no
    image_patch = ImagePatch(image)
    is_grass = image_patch.exists(""grass"")
    is_sand = image_patch.exists(""sand"")
    if is_grass or is_sand:
        for patch in image_patch.find(""grass"") + image_patch.find(""sand""):
            if not patch.verify_property(""grass"", ""dry"") and not patch.verify_property(""sand"", ""dry""):
                return ""yes""
    return ""no"""
11606870,Is there a cow or a zebra in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?," # assumes one fire hydrant patch
    image_patch = ImagePatch(image)
    fire_hydrant_patches = image_patch.find(""fire hydrant"")
    if len(fire_hydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    return bool_to_yesno(fire_hydrant_patches[0].verify_property(""fire hydrant"", ""modern""))"
942308,Is the cup empty or full?," # assumes one cup
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    cup_patch = cup_patches[0]
    return cup_patch.simple_query(""Is the cup empty or full?"")"
15815976,Is the woman wearing a scarf?," # assumes one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    woman_patch = woman_patches[0]
    return bool_to_yesno(woman_patch.verify_property(""woman"", ""scarf""))"
3193231,Do you see either parking meters or brooms in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)"
314218,Is the sign in front of the bridge small and white?," # assumes one sign and one bridge
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    bridge_patches = image_patch.find(""bridge"")
    if len(sign_patches) == 0 or len(bridge_patches) == 0:
        # If no sign or bridge is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    sign_patch = sign_patches[0]
    bridge_patch = bridge_patches[0]
    if sign_patch.horizontal_center < bridge_patch.horizontal_center and sign_patch.simple_query(""Is the sign small and white?"") == ""yes"":
        return ""yes""
    return ""no"""
18130465,Does the umbrella that is not dry look orange and open?," # returns a boolean
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.verify_property(""umbrella"", ""dry""):
            continue
        is_orange = umbrella_patch.verify_property(""umbrella"", ""orange"")
        is_open = umbrella_patch.verify_property(""umbrella"", ""open"")
        if is_orange and is_open:
            return ""yes""
    return ""no"""
7920817,What's in the paper?," # paper is a container
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?," # assumes only one bun
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    bun_patch = bun_patches[0]
    if bun_patch.upper < image_patch.upper / 2:
        return image_patch.simple_query(""What is on the bun in the top?"")
    else:
        return image_patch.simple_query(""What is on the bun in the bottom?"")"
16929928,What is the fence made of?," # returns the material of the fence
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?," # assumes one woman and one lady
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    lady_patches = image_patch.find(""lady"")
    if len(woman_patches) == 0 or len(lady_patches) == 0:
        # If no woman or lady is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    woman_patch = woman_patches[0]
    lady_patch = lady_patches[0]
    if woman_patch.horizontal_center < lady_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17993299,Is the horse to the left of a car?," # assumes one horse and one car
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    car_patches = image_patch.find(""car"")
    if len(horse_patches) == 0 or len(car_patches) == 0:
        # If no horse or car is found, query the image directly
        return image_patch.simple_query(""Is the horse to the left of a car?"")
    horse_patch = horse_patches[0]
    car_patch = car_patches[0]
    return bool_to_yesno(horse_patch.horizontal_center < car_patch.horizontal_center)"
8717022,Is the small animal to the left of the vehicle that looks silver?," # assumes one small animal and one vehicle
    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    vehicle_patches = image_patch.find(""vehicle"")
    if len(small_animal_patches) == 0 or len(vehicle_patches) == 0:
        # If no small animal or vehicle is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    small_animal_patch = small_animal_patches[0]
    vehicle_patch = vehicle_patches[0]
    if small_animal_patch.horizontal_center < vehicle_patch.horizontal_center and vehicle_patch.simple_query(""Is the vehicle silver?"") == ""yes"":
        return ""yes""
    return ""no"""
2998707,Which color is the chair that is on the right?," # assumes one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return chair_patch.simple_query(""What color is the chair?"")
    return image_patch.simple_query(""Which color is the chair that is on the right?"")"
171017786,Do you see any cups to the left of the monitor?," # returns yes or no
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    for cup_patch in cup_patches:
        if cup_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?," # assumes one man and one girl
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one man and one girl patch
    if len(man_patches) == 0 or len(girl_patches) == 0:
        # If no man or girl is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    girl_patch = girl_patches[0]
    if girl_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1941568,What animal is in the water?," # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")"
17577787,Does the man's hair look short and white?," # returns a boolean
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the man's hair look short and white?""))
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""short white hair""))"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?," # bottle is to the right of the toilet
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    for bottle_patch in bottle_patches:
        toilet_patches = image_patch.find(""toilet"")
        # Question assumes only one toilet patch
        if len(toilet_patches) == 0:
            return ""no""
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center > bottle_patch.horizontal_center:
                chair_patches = image_patch.find(""chair"")
                # Question assumes only one chair patch
                if len(chair_patches) == 0:
                    return ""no""
                for chair_patch in chair_patches:
                    if chair_patch.horizontal_center < bottle_patch.horizontal_center:
                        return ""yes""
    return ""no"""
9825336,Which kind of furniture is the mat lying on?," # assumes one mat patch
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    mat_patch = mat_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if mat_patch.vertical_center > furniture_patch.vertical_center:
            return furniture_patch.simple_query(""What kind of furniture is the mat lying on?"")
    return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")"
11222427,Do you see fences or elephants?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?"," # returns the first non-white furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture white?"") == ""no"":
            if furniture_patch.simple_query(""Is the furniture the entertainment center?"") == ""no"":
                if furniture_patch.simple_query(""Is the furniture the bed?"") == ""no"":
                    return furniture_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    return ""entertainment center"""
1152020,Do you see either any plate or tomato that are red?," # returns yes or no
    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""red plate"")
    is_red_tomato = image_patch.exists(""red tomato"")
    return bool_to_yesno(is_red_plate or is_red_tomato)"
8961520,Who is surfing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is surfing?"")
    return person_patches[0].simple_query(""Who is surfing?"")"
18106780,Which room is it?," # returns the name of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
1892692,What color do you think the bowl that is to the right of the person is?," # assumes one person and one bowl
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    person_patch = person_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > person_patch.horizontal_center:
            return bowl_patch.simple_query(""What color is the bowl?"")
    return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")"
6952082,What color is the hair?," # returns the color of the hair
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"")"
3768067,What color is the pot the statue is to the right of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the pot the statue is to the right of?"")"
17866761,Is the clear glass on the shelf of the table?," # assumes one table and one shelf
    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    clear_glass_patch = clear_glass_patches[0]
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        return ""no""
    table_patch = table_patches[0]
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        return ""no""
    shelf_patch = shelf_patches[0]
    if (clear_glass_patch.horizontal_center > table_patch.horizontal_center and
        clear_glass_patch.horizontal_center < shelf_patch.horizontal_center and
        clear_glass_patch.vertical_center > table_patch.vertical_center and
        clear_glass_patch.vertical_center < shelf_patch.vertical_center):
        return ""yes""
    return ""no"""
798020,Does the skirt look black or yellow?," # returns a boolean
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the skirt look black or yellow?""))
    return bool_to_yesno(skirt_patches[0].verify_property(""skirt"", ""black""))"
828981,How old is he?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""How old is he?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""How old is he?"")"
7236463,Of what color is the book?," # returns the color of the book
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""Of what color is the book?"")"
6376684,What color is the car to the left of the train car?," # assumes one train car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    for car_patch in car_patches:
        train_car_patches = image_patch.find(""train car"")
        for train_car_patch in train_car_patches:
            if train_car_patch.horizontal_center > car_patch.horizontal_center:
                return car_patch.simple_query(""What color is the car to the left of the train car?"")
    return ""no"""
786798,Is this a photo of a beach?," # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""beach"", ""beach""))"
19836753,What vehicles are to the left of the fence?," # returns a list of strings
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    for vehicle_patch in vehicle_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center > vehicle_patch.horizontal_center:
                return [vehicle_patch.simple_query(""What vehicle is to the left of the fence?"")]
    return []"
15284615,Who is playing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is playing?"")
    return person_patches[0].simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?," # assumes one man and one remote control
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    remote_control_patches = image_patch.find(""remote control"")
    if len(man_patches) == 0 or len(remote_control_patches) == 0:
        # If no man or remote control is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    remote_control_patch = remote_control_patches[0]
    return bool_to_yesno(man_patch.horizontal_center < remote_control_patch.horizontal_center)"
17746396,What's the boy wearing?," # returns the answer to ""What's the boy wearing?""
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    return boy_patches[0].simple_query(""What's the boy wearing?"")"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?," # assumes only one tap, one bottle, and one mug
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    tap_patch = tap_patches[0]
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.horizontal_center < tap_patch.horizontal_center:
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    mug_patches = image_patch.find(""mug"")
    if len(mug_patches) == 0:
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    for mug_patch in mug_patches:
        if mug_patch.horizontal_center > bottle_patch.horizontal_center:
            return ""yes""
    return ""no"""
13826837,What color is the door?," # returns the color of the door
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    return door_patches[0].simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse""))"
2964690,What is in front of the mountains?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?," # assumes one truck patch
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    truck_patch = truck_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
            return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?," # returns a boolean
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?""))
    scarf_patch = scarf_patches[0]
    is_long = scarf_patch.verify_property(""scarf"", ""long"")
    is_blue = scarf_patch.verify_property(""scarf"", ""blue"")
    return bool_to_yesno(is_long and is_blue)"
1189986,Is the man behind the elephant holding a surfboard?," # assumes one man and one elephant
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    elephant_patches = image_patch.find(""elephant"")
    if len(man_patches) == 0 or len(elephant_patches) == 0:
        # If no man or elephant is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    man_patch = man_patches[0]
    elephant_patch = elephant_patches[0]
    if man_patch.horizontal_center < elephant_patch.horizontal_center:
        return image_patch.simple_query(""Is the man holding a surfboard?"")
    return ""no"""
8792466,Which color is the closed window?," # returns the color of the closed window
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    return window_patches[0].simple_query(""What color is the window?"")"
10188423,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")"
4929965,Is there a black racket or clock in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_clock = image_patch.exists(""clock"")
    return bool_to_yesno(is_black_racket or is_clock)"
4782038,What kind of animal is white?," # returns the first white animal found
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What kind of animal is white?"")
    return ""no animal is white"""
14658201,Is the sheep that looks white and brown made of plastic?," # returns a boolean
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    sheep_patch = sheep_patches[0]
    is_white = sheep_patch.verify_property(""sheep"", ""white"")
    is_brown = sheep_patch.verify_property(""sheep"", ""brown"")
    is_plastic = sheep_patch.verify_property(""sheep"", ""plastic"")
    return bool_to_yesno(is_white and is_brown and is_plastic)"
1441865,Do you see any boxes on the table under the grill?," # assumes one table and one grill
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    grill_patches = image_patch.find(""grill"")
    # Question assumes only one table and one grill patch
    if len(table_patches) == 0 or len(grill_patches) == 0:
        # If no table or grill is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    table_patch = table_patches[0]
    grill_patch = grill_patches[0]
    if table_patch.vertical_center > grill_patch.vertical_center:
        return ""no""
    box_patches = image_patch.find(""box"")
    for box_patch in box_patches:
        if box_patch.vertical_center > table_patch.vertical_center and box_patch.vertical_center < grill_patch.vertical_center:
            return ""yes""
    return ""no"""
1424926,What is the tag on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?," # assumes one person and one laptop
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes one person and one laptop patch
    if len(person_patches) == 0 or len(laptop_patches) == 0:
        # If no person or laptop is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    person_patch = person_patches[0]
    laptop_patch = laptop_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > laptop_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    return ""no"""
3635257,Is there any freezer in this photo?," # freezer is a noun, so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer""))"
8821026,Are there either any bags or chairs?," # returns a boolean
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?," # assumes one bus driver
    image_patch = ImagePatch(image)
    bus_driver_patches = image_patch.find(""bus driver"")
    if len(bus_driver_patches) == 0:
        # If no bus driver is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    return bus_driver_patches[0].simple_query(""In what vehicle is the bus driver?"")"
17204662,What is that man in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that man in front of?"")"
380866,Are there any girls or radios?," # returns yes or no
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The girl is sitting on what?"")"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?," # assumes one pillow patch
    image_patch = ImagePatch(image)
    white_lamp_patches = image_patch.find(""white lamp"")
    # Question assumes only one white lamp patch
    if len(white_lamp_patches) == 0:
        # If no white lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    white_lamp_patch = white_lamp_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    pillow_patch = pillow_patches[0]
    if white_lamp_patch.horizontal_center < pillow_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16545552,What color do you think is the vehicle the girl is washing?," # returns the color of the vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    vehicle_patch = vehicle_patches[0]
    return vehicle_patch.simple_query(""What color is the vehicle?"")"
16719872,Are there motorcycles to the left of the man who is wearing a hat?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    if len(hat_patches) == 0:
        return ""no""
    hat_patch = hat_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.horizontal_center < man_patch.horizontal_center and motorcycle_patch.horizontal_center > hat_patch.horizontal_center:
            return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?," # assumes one person and one garbage can
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    garbage_can_patches = image_patch.find(""garbage can"")
    if len(person_patches) == 0 or len(garbage_can_patches) == 0:
        # If no person or garbage can is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    person_patch = person_patches[0]
    garbage_can_patch = garbage_can_patches[0]
    if garbage_can_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13711589,What do the truck and the street sign have in common?," # returns a string
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    truck_patch = truck_patches[0]
    street_sign_patches = image_patch.find(""street sign"")
    # Question assumes only one street sign patch
    if len(street_sign_patches) == 0:
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    street_sign_patch = street_sign_patches[0]
    common_properties = []
    for property in [""color"", ""shape"", ""size"", ""material""]:
        if truck_patch.verify_property(""truck"", property) and street_sign_patch.verify_property(""street sign"", property):
            common_properties.append(property)
    if len(common_properties) == 0:
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    return "", "".join(common_properties)"
10227573,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?," # contains a relation (leading), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is the man leading?"")"
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")"
7190226,Does the puddle look large?," # returns yes or no
    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    return bool_to_yesno(puddle_patches[0].verify_property(""puddle"", ""large""))"
11675152,Who throws the frisbee?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who throws the frisbee?"")
    person_patch = person_patches[0]
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        return image_patch.simple_query(""Who throws the frisbee?"")
    frisbee_patch = frisbee_patches[0]
    if frisbee_patch.horizontal_center > person_patch.horizontal_center:
        return person_patch.simple_query(""Who throws the frisbee?"")
    else:
        return person_patch.simple_query(""Who throws the frisbee?"")"
8723676,Which kind of animal is the water on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is the water on?"")"
61046657,Do you think that traffic light is tall?," # assumes one traffic light patch
    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    if len(traffic_light_patches) == 0:
        # If no traffic light is found, query the image directly
        return image_patch.simple_query(""Do you think that traffic light is tall?"")
    return bool_to_yesno(traffic_light_patches[0].verify_property(""traffic light"", ""tall""))"
9581034,On which side is the wine glass?," # assumes one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?," # assumes one pizza patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    pizza_patches = image_patch.find(""pizza"")
    if len(napkin_patches) == 0 or len(pizza_patches) == 0:
        # If no napkin or pizza is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        for pizza_patch in pizza_patches:
            if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
                return ""right""
            elif napkin_patch.horizontal_center < pizza_patch.horizontal_center:
                return ""left""
    return ""no"""
18535266,Is the face mask made of the same material as the mask?," # assumes one face mask and one mask
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    mask_patches = image_patch.find(""mask"")
    if len(face_mask_patches) == 0 or len(mask_patches) == 0:
        # If no face mask or mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    face_mask_patch = face_mask_patches[0]
    mask_patch = mask_patches[0]
    return bool_to_yesno(face_mask_patch.verify_property(""face mask"", ""same material as mask"") and mask_patch.verify_property(""mask"", ""same material as face mask""))"
11254215,What is the tan item of furniture?," # returns the first tan item of furniture
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What is the tan item of furniture?"")
    return tan_patches[0].simple_query(""What is the tan item of furniture?"")"
1852010,How is the device to the right of the device on the desk called?," # assumes one device on the desk
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    device_patch = device_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > device_patch.horizontal_center:
            return device_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")"
1587534,Is the device on the floor black and large?," # returns a boolean
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the device on the floor black and large?""))
    device_patch = device_patches[0]
    is_on_floor = device_patch.simple_query(""Is the device on the floor?"") == ""yes""
    is_black = device_patch.simple_query(""Is the device black?"") == ""yes""
    is_large = device_patch.simple_query(""Is the device large?"") == ""yes""
    return bool_to_yesno(is_on_floor and is_black and is_large)"
8470757,Are there any surfboards?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))"
11273949,Is the shirt white?," # returns yes or no
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))"
7475238,What's the airplane in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?," # assumes one horse and one hose
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    hose_patches = image_patch.find(""hose"")
    if len(horse_patches) == 0 or len(hose_patches) == 0:
        # If no horse or hose is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        for hose_patch in hose_patches:
            if horse_patch.horizontal_center > hose_patch.horizontal_center:
                return horse_patch.simple_query(""Where does the horse run?"")
    return ""no"""
3932624,Are there either any gray chairs or laptops?," # returns yes or no
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?," # returns a boolean
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is the water brown or blue?""))"
9256263,Which kind of furniture is brown?," # returns the first brown furniture found
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""brown""):
            return furniture_patch.simple_query(""Which kind of furniture is brown?"")
    return ""no"""
18719769,Is the man wearing glasses?," # returns a boolean
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the man wearing glasses?""))
    return bool_to_yesno(man_patches[0].verify_property(""man"", ""glasses""))"
18342439,What animal is white?," # returns the first white animal found
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What animal is white?"")
    return ""no animal is white"""
8665725,Who is wearing a coat?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a coat?"")
    for person_patch in person_patches:
        is_wearing_coat = (person_patch.simple_query(""Is the person wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return person_patch.simple_query(""Who is wearing a coat?"") # crop would include the coat so keep it in the query
    # If no person is wearing a coat, query the image directly
    return image_patch.simple_query(""Who is wearing a coat?"")"
5440407,What vehicle isn't black?," # returns the name of the vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicle_patches:
        if not vehicle_patch.verify_property(""vehicle"", ""black""):
            return vehicle_patch.simple_query(""What vehicle isn't black?"")
    # If no vehicle isn't black, query the image directly
    return image_patch.simple_query(""What vehicle isn't black?"")"
4104707,On which side of the picture is the oven?," # assumes one oven
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    oven_patch = oven_patches[0]
    if oven_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3126763,What is common to the logo and the letter?," # returns a string
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    logo_patch = logo_patches[0]
    letter_patches = image_patch.find(""letter"")
    # Question assumes only one letter patch
    if len(letter_patches) == 0:
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    letter_patch = letter_patches[0]
    common = []
    for obj in [""color"", ""shape"", ""size"", ""material"", ""texture"", ""pattern""]:
        if logo_patch.verify_property(""logo"", obj) and letter_patch.verify_property(""letter"", obj):
            common.append(obj)
    if len(common) == 0:
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    return "", "".join(common)"
18640925,What animal is in the water the man is walking through?," # contains a relation (in the water), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water the man is walking through?"")"
125488,What is the man wearing?," # returns the answer to ""What is the man wearing?""
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    return man_patches[0].simple_query(""What is the man wearing?"")"
5925435,What is the sidewalk made of?," # assumes one sidewalk patch
    image_patch = ImagePatch(image)
    sidewalk_patches = image_patch.find(""sidewalk"")
    if len(sidewalk_patches) == 0:
        # If no sidewalk is found, query the image directly
        return image_patch.simple_query(""What is the sidewalk made of?"")
    return sidewalk_patches[0].simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?," # returns the pattern of the coat
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].simple_query(""What is the pattern of the coat?"")"
4819547,What kind of furniture is white?," # returns the first white furniture found
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What kind of furniture is white?"")
    return ""no"""
14263174,What color do you think the chair that is to the right of the other chair is?," # assumes one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    for chair_patch in chair_patches:
        other_chair_patches = image_patch.find(""chair"")
        for other_chair_patch in other_chair_patches:
            if other_chair_patch.horizontal_center < chair_patch.horizontal_center:
                return chair_patch.simple_query(""What color is the chair?"")
    # If no chair is to the right of another chair, query the image directly
    return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?," # assumes one man and one train and one fence
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    man_patch = man_patches[0]
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        return ""no""
    train_patch = train_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        return ""no""
    fence_patch = fence_patches[0]
    if man_patch.horizontal_center < train_patch.horizontal_center and train_patch.horizontal_center < fence_patch.horizontal_center:
        return ""yes""
    return ""no"""
9239936,Do the cows near the trees have white color?," # assumes one cow and one tree
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    tree_patches = image_patch.find(""tree"")
    if len(cow_patches) == 0 or len(tree_patches) == 0:
        # If no cow or tree is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    cow_patch = cow_patches[0]
    tree_patch = tree_patches[0]
    if abs(cow_patch.horizontal_center - tree_patch.horizontal_center) < 100:
        return bool_to_yesno(cow_patch.verify_property(""cow"", ""white""))
    return ""no"""
1885178,"In which part of the image is the remote control, the bottom or the top?"," # assumes only one remote control
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    remote_control_patch = remote_control_patches[0]
    if remote_control_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12341631,Which color is the bag in the top part?," # assumes one bag patch
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    if bag_patch.vertical_center < image_patch.vertical_center:
        return bag_patch.simple_query(""Which color is the bag in the top part?"")
    else:
        return bag_patch.simple_query(""Which color is the bag in the bottom part?"")"
5532909,"What is the weather like, cloudless or maybe rainy?"," # cloudless or maybe rainy
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")"
2618222,What is connected to the open laptop?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is connected to the open laptop?"")"
3252220,Of which color is the shirt the man wears?," # returns the color of the shirt
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""Of which color is the shirt the man wears?"")"
8947801,What is in the vase?," # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the vase?"")"
10841562,Is the color of the pants the same as the shorts?," # returns yes or no
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    pants_color = pants_patches[0].simple_query(""What color are the pants?"")
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    shorts_color = shorts_patches[0].simple_query(""What color are the shorts?"")
    return bool_to_yesno(pants_color == shorts_color)"
15511838,What kind of furniture is to the left of the bucket?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")"
14495306,Is there any racket to the right of the person that the woman is to the left of?," # assumes one person and one woman
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one person and one woman patch
    if len(person_patches) == 0 or len(woman_patches) == 0:
        # If no person or woman is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    person_patch = person_patches[0]
    woman_patch = woman_patches[0]
    if person_patch.horizontal_center < woman_patch.horizontal_center:
        return ""no""
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > person_patch.horizontal_center:
            return ""yes""
    return ""no"""
14841932,Do the tiles have square shape and black color?," # returns a boolean
    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    # Question assumes only one tile patch
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Do the tiles have square shape and black color?""))
    tile_patch = tile_patches[0]
    return bool_to_yesno(tile_patch.verify_property(""tile"", ""square"") and tile_patch.verify_property(""tile"", ""black""))"
41029381,What is the vehicle that is the same color as the shirt called?," # assumes one shirt and one vehicle
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one shirt and one vehicle patch
    if len(shirt_patches) == 0 or len(vehicle_patches) == 0:
        # If no shirt or vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    shirt_color = shirt_patches[0].simple_query(""What color is the shirt?"")
    for vehicle_patch in vehicle_patches:
        vehicle_color = vehicle_patch.simple_query(""What color is the vehicle?"")
        if vehicle_color == shirt_color:
            return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    return ""no"""
161027428,Are there both windows and doors in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
16478246,Does the pillow to the right of the man have green color and large size?," # returns a boolean
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes one pillow patch
    if len(pillow_patches) == 0:
        return ""no""
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            if pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""):
                return ""yes""
    return ""no"""
9450308,Is the happy person wearing a hat?," # assumes one happy person
    image_patch = ImagePatch(image)
    happy_person_patches = image_patch.find(""happy person"")
    if len(happy_person_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    happy_person_patch = happy_person_patches[0]
    return bool_to_yesno(happy_person_patch.verify_property(""happy person"", ""wearing a hat""))"
11850389,What place is this?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
17250452,What kind of appliance is on the right of the drawer?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")"
14857961,Is the lady to the right of a woman?," # assumes one lady and one woman
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    woman_patches = image_patch.find(""woman"")
    if len(lady_patches) == 0 or len(woman_patches) == 0:
        # If no lady or woman is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    lady_patch = lady_patches[0]
    woman_patch = woman_patches[0]
    if lady_patch.horizontal_center > woman_patch.horizontal_center:
        return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?," # assumes one pan patch
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    pan_patch = pan_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    for cooking_utensil_patch in cooking_utensil_patches:
        if cooking_utensil_patch.horizontal_center < pan_patch.horizontal_center:
            return cooking_utensil_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return ""no"""
9745131,Which color is the truck that is to the left of the lamps?," # assumes one truck and one lamp
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    lamp_patches = image_patch.find(""lamp"")
    if len(truck_patches) == 0 or len(lamp_patches) == 0:
        # If no truck or lamp is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    truck_patch = truck_patches[0]
    lamp_patch = lamp_patches[0]
    if truck_patch.horizontal_center < lamp_patch.horizontal_center:
        return truck_patch.simple_query(""What color is the truck?"")
    else:
        return lamp_patch.simple_query(""What color is the lamp?"")"
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?," # assumes only one motorcycle and one bird
    image_patch = ImagePatch(image)
    motorcycle_patch = image_patch.find(""motorcycle"")[0]
    bird_patches = image_patch.find(""bird"")
    for bird_patch in bird_patches:
        if bird_patch.simple_query(""Is the bird the same color as the motorcycle?"") == ""yes"":
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle?"")
    return image_patch.simple_query(""What type of bird is the same color as the motorcycle?"")"
867818,Is the man on the skateboard?," # assumes one man and one skateboard
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    skateboard_patches = image_patch.find(""skateboard"")
    if len(man_patches) == 0 or len(skateboard_patches) == 0:
        # If no man or skateboard is found, query the image directly
        return image_patch.simple_query(""Is the man on the skateboard?"")
    man_patch = man_patches[0]
    skateboard_patch = skateboard_patches[0]
    return bool_to_yesno(man_patch.horizontal_center < skateboard_patch.horizontal_center)"
13896221,What is on the table?," # assumes one table
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
1964517,What is the food that is above the white paper?," # contains a relation (above), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the food that is above the white paper?"")"
15705231,Is the shelf to the left of a cabinet?," # assumes one shelf and one cabinet
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cabinet_patches = image_patch.find(""cabinet"")
    if len(shelf_patches) == 0 or len(cabinet_patches) == 0:
        # If no shelf or cabinet is found, query the image directly
        return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")
    shelf_patch = shelf_patches[0]
    cabinet_patch = cabinet_patches[0]
    return bool_to_yesno(shelf_patch.horizontal_center < cabinet_patch.horizontal_center)"
15693846,Is the motorcycle parked on the grass?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the motorcycle parked on the grass?"")"
13872995,Who is jumping?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is jumping?"")
    return person_patches[0].simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?," # returns a string
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one dog or cat patch
    if len(dog_patches) > 0:
        return ""dog""
    elif len(cat_patches) > 0:
        return ""cat""
    else:
        return image_patch.simple_query(""Is this a dog or a cat?"")"
12584623,What is the person with the bag wearing?," # assumes one person and one bag
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    bag_patches = image_patch.find(""bag"")
    if len(person_patches) == 0 or len(bag_patches) == 0:
        # If no person or bag is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    person_patch = person_patches[0]
    bag_patch = bag_patches[0]
    if person_patch.horizontal_center < bag_patch.horizontal_center:
        return person_patch.simple_query(""What is the person wearing?"")
    else:
        return person_patch.simple_query(""What is the person wearing?"")"
7202064,"What is this, a bus or a truck?"," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""bus"", ""truck""])"
16542208,Do you see either any beds or blankets there?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)"
11700224,Do you see both lettuce and salad?," # returns yes or no
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)"
1067136,Is the ball on the tree?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball on the tree?"")"
364079,What kind of furniture is to the right of the blanket?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")"
2533062,How large is the ground the zebra is standing on?," # returns the size of the ground in pixels
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    zebra_patch = zebra_patches[0]
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        return ""no""
    ground_patch = ground_patches[0]
    return str(ground_patch.width)"
19683710,The clock is inside what?," # contains a relation (inside), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The clock is inside what?"")"
15674863,Is the racket in the top part?," # assumes only one racket patch
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    racket_patch = racket_patches[0]
    if racket_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?," # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    shirt_patch = shirt_patches[0]
    skateboard_patches = image_patch.find(""skateboard"")
    # Question assumes only one skateboard patch
    if len(skateboard_patches) == 0:
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    for skateboard_patch in skateboard_patches:
        if skateboard_patch.horizontal_center > person_patch.horizontal_center and skateboard_patch.horizontal_center < shirt_patch.horizontal_center:
            return ""yes""
    return ""no"""
2292637,What is the color of the shirt that the passenger is wearing?," # assumes one passenger
    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    shirt_patches = passenger_patches[0].find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    return shirt_patches[0].simple_query(""What is the color of the shirt?"")"
9175259,What is the chair made of?," # returns the material of the chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?," # returns the size of the carrot
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    return carrot_patches[0].simple_query(""How big is the carrot?"")"
1638685,What is the name of the vegetable that is on the yellow food?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")"
5828256,Is the clock on a tower?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the clock on a tower?"")"
18937563,What kind of animal is orange?," # returns the answer to the question
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is orange?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""orange""):
            return animal_patch.simple_query(""What kind of animal is orange?"")
    return ""no animal is orange"""
14360113,What is the smiling woman holding?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    woman_patch = woman_patches[0]
    holding_patches = image_patch.find(""holding"")
    # Question assumes only one holding patch
    if len(holding_patches) == 0:
        return image_patch.simple_query(""What is the smiling woman holding?"")
    return holding_patches[0].simple_query(""What is the smiling woman holding?"")"
593188,Is the hair short?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    return bool_to_yesno(person_patches[0].verify_property(""hair"", ""short""))"
10824666,Are there ladies to the left of the man that is wearing shorts?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    is_wearing_shorts = man_patch.simple_query(""Is the man wearing shorts?"") == ""yes""
    if not is_wearing_shorts:
        return ""no""
    lady_patches = image_patch.find(""lady"")
    for lady_patch in lady_patches:
        if lady_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?," # assumes one gray car and one garbage bin
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    garbage_bin_patches = image_patch.find(""garbage bin"")
    if len(gray_car_patches) == 0 or len(garbage_bin_patches) == 0:
        # If no gray car or garbage bin is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    gray_car_patch = gray_car_patches[0]
    garbage_bin_patch = garbage_bin_patches[0]
    if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7574939,Is there any table or plate that is white?," # returns yes or no
    image_patch = ImagePatch(image)
    is_table = image_patch.exists(""table"")
    is_plate = image_patch.exists(""plate"")
    if is_table or is_plate:
        return ""yes""
    return ""no"""
12252101,Is it outdoors?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""outdoor"", ""outdoor""))"
6943442,What cooking utensil is on the oven?," # assumes one oven
    image_patch = ImagePatch(image)
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        # If no cooking utensil is found, query the image directly
        return image_patch.simple_query(""What cooking utensil is on the oven?"")
    cooking_utensil_patch = cooking_utensil_patches[0]
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        return image_patch.simple_query(""What cooking utensil is on the oven?"")
    oven_patch = oven_patches[0]
    if cooking_utensil_patch.horizontal_center > oven_patch.horizontal_center:
        return cooking_utensil_patch.simple_query(""What cooking utensil is on the oven?"")
    return cooking_utensil_patch.simple_query(""What cooking utensil is on the oven?"")"
2977077,The propeller that looks red is what pattern?," # assumes one propeller patch
    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    propeller_patch = propeller_patches[0]
    return propeller_patch.best_text_match([""stripes"", ""polka dots"", ""plaid""])"
11190306,Which kind of animal is to the left of the train?," # assumes one train patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the left of the train?"")
    for animal_patch in animal_patches:
        train_patches = image_patch.find(""train"")
        for train_patch in train_patches:
            if train_patch.horizontal_center > animal_patch.horizontal_center:
                return animal_patch.simple_query(""Which kind of animal is to the left of the train?"")
    return ""no"""
5107190,Do you see both an airplane and a truck?," # returns yes or no
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?," # returns the age of the child
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"")"
12536783,What kind of animal is in front of the pole?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?," # assumes one man and one pair of glasses
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    if len(glasses_patches) == 0:
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
18655269,Which room is it?," # returns the name of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?," # assumes one image patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""scene"", ""indoors""))"
1705569,Does the pot on top of the stove look black?," # contains a relation (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the pot on top of the stove look black?"")"
1028569,Are there both a cyclist and a helmet in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)"
13954115,Are there any men to the left of the person in the crowd?," # assumes one person in the crowd
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    person_patch = person_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return ""no""
    for man_patch in man_patches:
        if man_patch.horizontal_center < person_patch.horizontal_center:
            return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")"
1017626,Who is inside the train?," # contains a relation (inside), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is inside the train?"")"
7650014,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the left of the car doing?"")"
1310985,Is the yellow vehicle to the left of a lamp?," # assumes one yellow vehicle and one lamp
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    yellow_vehicle_patch = yellow_vehicle_patches[0]
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        return ""no""
    lamp_patch = lamp_patches[0]
    if yellow_vehicle_patch.horizontal_center < lamp_patch.horizontal_center:
        return ""yes""
    return ""no"""
646935,Which room is it?," # returns the name of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
9495263,Is the woman to the left or to the right of the man that wears a cap?," # assumes one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
946016,Do you think the animal that is sitting-down is small or large?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    animal_patch = animal_patches[0]
    return animal_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")"
9617920,Do the garbage can and the pan have the same color?," # returns yes or no
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    garbage_can_color = garbage_can_patches[0].simple_query(""What color is the garbage can?"")
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        return ""no""
    pan_color = pan_patches[0].simple_query(""What color is the pan?"")
    return bool_to_yesno(garbage_can_color == pan_color)"
3578781,Which kind of clothing is black?," # returns a list of clothing types
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return clothing_patches[0].best_text_match([""shirt"", ""pants"", ""dress"", ""jacket""])"
4695656,What is the lamp on?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lamp on?"")"
13696926,The homes that are to the left of the people have what color?," # returns the color of the houses
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    people_patch = people_patches[0]
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    house_patch = house_patches[0]
    if house_patch.horizontal_center < people_patch.horizontal_center:
        return house_patch.simple_query(""What color is the house?"")
    return image_patch.simple_query(""The homes that are to the right of the people have what color?"")"
16946079,What is on the wall?," # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?," # assumes one napkin patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    napkin_patch = napkin_patches[0]
    if napkin_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no"""
11513897,What appliance is the label on?," # assumes only one appliance and one label
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    label_patches = image_patch.find(""label"")
    if len(appliance_patches) == 0 or len(label_patches) == 0:
        # If no appliance or label is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    appliance_patch = appliance_patches[0]
    label_patch = label_patches[0]
    return appliance_patch.simple_query(""What appliance is the label on?"") # crop would include the label so keep it in the query"
8240644,What is the color of the bird's tail?," # assumes one bird patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What is the color of the bird's tail?"")"
5245080,Is he to the right or to the left of the camera?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    person_patch = person_patches[0]
    camera_patches = image_patch.find(""camera"")
    # Question assumes only one camera patch
    if len(camera_patches) == 0:
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    camera_patch = camera_patches[0]
    if person_patch.horizontal_center > camera_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17800894,Are there both a window and a door in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
191027873,Where is the snowboard?," # returns the location of the snowboard
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Where is the snowboard?"")
    return snowboard_patches[0].simple_query(""Where is the snowboard?"")"
1964079,Are the box and the paper the same color?," # returns yes or no
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    box_patch = box_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    return bool_to_yesno(box_patch.verify_property(""box"", ""same color as paper""))"
