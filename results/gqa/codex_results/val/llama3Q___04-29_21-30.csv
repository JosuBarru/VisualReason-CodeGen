sample_id,query,generated_code
13151559,Is the large hair both white and soft?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    for hair_patch in hair_patches:
        if hair_patch.simple_query(""Is the hair large?"") == ""yes"":
            is_white = hair_patch.simple_query(""Is the hair white?"") == ""yes""
            is_soft = hair_patch.simple_query(""Is the hair soft?"") == ""yes""
            return bool_to_yesno(is_white and is_soft)"
18370956,Who is eating the cupcake?,"    image_patch = ImagePatch(image)
    eating_patches = image_patch.find(""eating"")
    # Question assumes only one eating patch
    if len(eating_patches) == 0:
        # If no eating is found, query the image directly
        return image_patch.simple_query(""Who is eating the cupcake?"")
    for eating_patch in eating_patches:
        cupcake_patches = image_patch.find(""cupcake"")
        for cupcake_patch in cupcake_patches:
            if cupcake_patch.horizontal_center > eating_patch.horizontal_center:
                return eating_patch.simple_query(""Who is eating the cupcake?"")
    return eating_patches[0].simple_query(""Who is eating the cupcake?"")"
6436809,What is the guy wearing?,"    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    # Question assumes only one guy patch
    if len(guy_patches) == 0:
        # If no guy is found, query the image directly
        return image_patch.simple_query(""What is the guy wearing?"")
    for guy_patch in guy_patches:
        return guy_patch.simple_query(""What is the guy wearing?"")"
117037,Which kind of food is to the right of the cabbage?,"    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    # Question assumes only one cabbage patch
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    for cabbage_patch in cabbage_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center > cabbage_patch.horizontal_center:
                return food_patch.simple_query(""What kind of food is this?"")
    return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")"
758936,Who wears the cap?,"    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    for cap_patch in cap_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if cap_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who wears the cap?"")
    return ""no one"""
111046440,Who is pointing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is pointing?"")"
15804389,Is the woman's hair short or long?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    for hair_patch in hair_patches:
        if hair_patch.height < woman_patch.height:
            return ""short""
    return ""long"""
11445636,The women are watching who?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""The women are watching who?"")"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?,"    image_patch = ImagePatch(image)
    dishwasher_patches = image_patch.find(""dishwasher"")
    # Question assumes only one dishwasher patch
    if len(dishwasher_patches) == 0:
        # If no dishwasher is found, query the image directly
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    for dishwasher_patch in dishwasher_patches:
        if dishwasher_patch.horizontal_center < image_patch.horizontal_center: # left of the woman
            is_white = dishwasher_patch.verify_property(""dishwasher"", ""white"")
            return bool_to_yesno(is_white)
    # If no dishwasher is found to the left of the woman, query the image directly
    return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")"
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?,"    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len.bed_image(image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image_image"
758958,Is there either any red pillow or snowboard?,"    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)"
143816,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?,"    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    # Question assumes only one knife patch
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Which side is the knife on?"")
    knife_patch = knife_patches[0]
    if knife_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17829769,What is the computer mouse in front of?,"    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""computer mouse"")
    # Question assumes only one mouse patch
    if len(mouse_patches) == 0:
        # If no mouse is found, query the image directly
        return image_patch.simple_query(""What is the computer mouse in front of?"")
    for mouse_patch in mouse_patches:
        return mouse_patch.simple_query(""What is the computer mouse in front of?"") # crop would include what's in front of the mouse so keep it in the query"
17233738,What is the toddler holding?,"    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    # Question assumes only one toddler patch
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    for toddler_patch in toddler_patches:
        object_patches = image_patch.find(""object"")
        for object_patch in object_patches:
            if object_patch.horizontal_center == toddler_patch.horizontal_center:
                return object_patch.simple_query(""What is the toddler holding?"")
    return ""nothing"""
2951242,Is the gray shirt sleeveless or short sleeved?,"    image_patch = ImagePatch(image)
    gray_shirt_patches = image_patch.find(""gray shirt"")
    # Question assumes only one gray shirt patch
    if len(gray_shirt_patches) == 0:
        # If no gray shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    gray_shirt_patch = gray_shirt_patches[0]
    return gray_shirt_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")"
15241795,Is the tank top red?,"    image_patch = ImagePatch(image)
    tank_top_patches = image_patch.find(""tank top"")
    # Question assumes only one tank top patch
    if len(tank_top_patches) == 0:
        # If no tank top is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    tank_top_patch = tank_top_patches[0]
    return bool_to_yesno(tank_top_patch.verify_property(""tank top"", ""red""))"
13885234,Which kind of animal is in front of the rocks?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""grapes""))"
6455591,What type of furniture is white?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of furniture is white?"")"
1033761,What is the blue clothing item?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    for clothing_patch in clothing_patches:
        blue_patches = clothing_patch.find(""blue"")
        # Question assumes only one blue patch
        if len(blue_patches) > 0:
            return blue_patches[0].simple_query(""What is the blue clothing item?"")
    return ""not found"""
17726504,Who is wearing the glasses?,"    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for glasses_patch in glasses_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if glasses_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is wearing the glasses?"")
    return glasses_patches[0].simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query"
13112902,Is the woman wearing a bracelet?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    for woman_patch in woman_patches:
        is_wearing_bracelet = (woman_patch.simple_query(""Is the woman wearing a bracelet?"") == ""yes"")
        return bool_to_yesno(is_wearing_bracelet)"
698766,What is the food that is not white?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""white""):
            return food_patch.simple_query(""What is the food that is not white?"")
    return ""none"""
1332276,Are there both a cup and a bottle in the picture?,"    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?,"    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?,"    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for helmet_patch in helmet_patches:
        holding_patches = image_patch.find(""holding"")
        for holding_patch in holding_patches:
            if helmet_patch.horizontal_center == holding_patch.horizontal_center:
                return holding_patch.simple_query(""Who is holding the helmet?"")
    return ""no one"""
2143247,What is the name of the food to the left of the donut that looks little?,"    image_patch = ImagePatch(image)
    donut_patches = image_patch.find(""donut"")
    # Question assumes only one donut patch
    if len(donut_patches) == 0:
        # If no donut is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    for donut_patch in donut_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < donut_patch.horizontal_center:
                if food_patch.simple_query(""Is the food little?"") == ""yes"":
                    return food_patch.simple_query(""What is the name of the food?"")
    return ""not found"""
3767951,Is the clock to the right or to the left of the man on the left?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    for clock_patch in clock_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center < clock_patch.horizontal_center:
                return ""right""
    return ""left"""
17655180,What's the sticker on?,"    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What's the sticker on?"")
    return sticker_patches[0].simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""still car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    for car_patch in car_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center > car_patch.horizontal_center:
                return ""yes""
    return ""no"""
7188981,Does the giraffe look adult?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    for giraffe_patch in giraffe_patches:
        return bool_to_yesno(giraffe_patch.verify_property(""giraffe"", ""adult""))"
16852802,Of what color are the pants?,"    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""What color are the pants?"")"
9619158,What kind of watercraft is full of men?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of watercraft is full of men?"")"
3625225,On which side of the picture are the boats?,"    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    for boat_patch in boat_patches:
        if boat_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
    return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?,"    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only two elephant patches
    if len(elephant_patches) < 2:
        # If no two elephants are found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_elephant = None
    right_elephant = None
    for elephant_patch in elephant_patches:
        if elephant_patch.horizontal_center < image_patch.horizontal_center:
            left_elephant = elephant_patch
        else:
            right_elephant = elephant_patch
    if left_elephant is None or right_elephant is None:
        return ""no""
    return bool_to_yesno(left_elephant.verify_property(""elephant"", ""large""))"
19834124,What is the girl holding?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    for girl_patch in girl_patches:
        holding_patches = image_patch.find(""holding"")
        for holding_patch in holding_patches:
            return holding_patch.simple_query(""What is the girl holding?"") # crop would include the holding so keep it in the query"
4617704,Does the toilet seat that is not down appear to be white and open?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")
    for toilet_patch in toilet_patches:
        is_seat_up = toilet_patch.simple_query(""Is the toilet seat up?"") == ""yes""
        if is_seat_up:
            is_seat_white = toilet_patch.simple_query(""Is the toilet seat white?"") == ""yes""
            is_seat_open = toilet_patch.simple_query(""Is the toilet seat open?"") == ""yes""
            return bool_to_yesno(is_seat_white and is_seat_open)
    return ""no"""
5899539,Are there any bottles or mugs that are not purple?,"    image_patch = ImagePatch(image)
    bottles_or_mugs = image_patch.find(""bottle"") + image_patch.find(""mug"")
    for bottle_or_mug in bottles_or_mugs:
        if bottle_or_mug.simple_query(""What is the color of the bottle/mug?"") != ""purple"":
            return ""yes""
    return ""no"""
2631593,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person in the living room?"") == ""yes"":
            right_patches = image_patch.find(""man"")
            for right_patch in right_patches:
                if right_patch.horizontal_center > person_patch.horizontal_center:
                    return ""yes""
    return ""no"""
111054378,Is the small couch to the right or to the left of the bottle?,"    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""small couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    for couch_patch in couch_patches:
        bottle_patches = image_patch.find(""bottle"")
        for bottle_patch in bottle_patches:
            if bottle_patch.horizontal_center > couch_patch.horizontal_center:
                return ""left""
    return ""right"""
9392411,Is the bottle to the right or to the left of the appliance on the left?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance and one bottle patch
    if len(appliance_patches) == 0 or len(bottle_patches) == 0:
        # If no appliance or bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    appliance_patch = appliance_patches[0]
    bottle_patch = bottle_patches[0]
    if bottle_patch.horizontal_center > appliance_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16753829,What type of animal is sitting in the container in the bottom of the photo?,"    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    for container_patch in container_patches:
        if container_patch.vertical_center < image_patch.vertical_center:
            animal_patches = container_patch.find(""animal"")
            # Question assumes only one animal patch
            if len(animal_patches) == 0:
                return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
            return animal_patches[0].simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")"
1345482,What is that train in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?,"    image_patch = ImagePatch(image)
    palm_tree_patches = image_patch.find(""palm trees"")
    # Question assumes only one palm tree patch
    if len(palm_tree_patches) == 0:
        # If no palm tree is found, query the image directly
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    for palm_tree_patch in palm_tree_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if palm_tree_patch.horizontal_center > girl_patch.horizontal_center:
                car_patches = image_patch.find(""car"")
                for car_patch in car_patches:
                    if car_patch.horizontal_center > palm_tree_patch.horizontal_center:
                        return ""yes""
    return ""no"""
459445,In which part is the silver device?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""silver device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    device_patch = device_patches[0]
    if device_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11786203,What is the man on?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man on?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?,"    image_patch = ImagePatch(image)
    is_brown_door = image_patch.exists(""brown door"")
    is_brown_chair = image_patch.exists(""brown chair"")
    return bool_to_yesno(is_brown_door or is_brown_chair)"
131031372,What is the napkin in?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What is the napkin in?"")
    return napkin_patches[0].simple_query(""What is the napkin in?"")"
1241681,Are there any people behind the white dessert?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return bool_to_yesno(image_patch.exists(""person"") and not image_patch.exists(""person"") or image_patch.find(""person"")[0].horizontal_center < image_patch.find(""white dessert"")[0].horizontal_center)"
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")"
8553578,What is the Pikachu doing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the large mountains?"")"
5107295,What is in the sky?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?,"    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is the fruit on?"")
    for fruit_patch in fruit_patches:
        watercraft_patches = image_patch.find(""watercraft"")
        for watercraft_patch in watercraft_patches:
            return watercraft_patch.simple_query(""What kind of watercraft is the fruit on?"") # crop would include the watercraft so keep it in the query"
1827218,Is the bottle in the bottom of the image?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
10938155,What color is the sky?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?,"    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    sail_patch = sail_patches[0]
    if sail_patch.simple_query(""What is the color of the sail?"") == ""white"":
        return ""white""
    else:
        return ""red"""
3662784,Do you see either any traffic lights or cars?,"    image_patch = ImagePatch(image)
    is_traffic_light = image_patch.exists(""traffic light"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_traffic_light or is_car)"
15515711,Are there any girls to the right of the yellow helmet?,"    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""yellow helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    helmet_patch = helmet_patches[0]
    girl_patches = image_patch.find(""girl"")
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center > helmet_patch.horizontal_center:
            return ""yes""
    return ""no"""
6315316,Which kind of furniture is in front of the window?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?,"    image_patch = ImagePatch(image)
    faucet_patches = image_patch.find(""faucet"")
    # Question assumes only one faucet patch
    if len(faucet_patches) == 0:
        # If no faucet is found, query the image directly
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    for faucet_patch in faucet_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center < faucet_patch.horizontal_center:
                return appliance_patch.simple_query(""What appliance is to the left of the faucet?"")
    return ""none"""
41050828,What is the color of the jacket?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    jacket_patch = jacket_patches[0]
    return jacket_patch.simple_query(""What is the color of the jacket?"")"
610914,Is the green boat to the right or to the left of the wood house?,"    image_patch = ImagePatch(image)
    green_boat_patches = image_patch.find(""green boat"")
    # Question assumes only one green boat patch
    if len(green_boat_patches) == 0:
        # If no green boat is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    for green_boat_patch in green_boat_patches:
        wood_house_patches = image_patch.find(""wood house"")
        for wood_house_patch in wood_house_patches:
            if green_boat_patch.horizontal_center > wood_house_patch.horizontal_center:
                return ""right""
    return ""left"""
13158346,Is the woman in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
16318707,Are there either any colorful bikes or skateboards?,"    image_patch = ImagePatch(image)
    is_colorful_bike = image_patch.exists(""colorful bike"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_colorful_bike or is_skateboard)"
2805654,Is the bag to the right or to the left of the bench?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    for bag_patch in bag_patches:
        bench_patches = image_patch.find(""bench"")
        for bench_patch in bench_patches:
            if bag_patch.horizontal_center > bench_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
15315607,What do you think is in the sky?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What color is the truck near the gas station?"")
    for truck_patch in truck_patches:
        gas_station_patches = image_patch.find(""gas station"")
        for gas_station_patch in gas_station_patches:
            if truck_patch.horizontal_center > gas_station_patch.horizontal_center:
                return truck_patch.simple_query(""What color is the truck?"")
    return truck_patch.simple_query(""What color is the truck?"") # if no truck is near the gas station, query the truck directly"
12140940,"What are the headphones on, a sofa or a desk?","    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
    for headphones_patch in headphones_patches:
        return headphones_patch.simple_query(""What are the headphones on, a sofa or a desk?"") # crop would include the headphones so keep it in the query"
727533,Does the bun look brown and toasted?,"    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    bun_patch = bun_patches[0]
    return bool_to_yesno(bun_patch.verify_property(""bun"", ""brown"") and bun_patch.verify_property(""bun"", ""toasted""))"
61044602,What is in the brown basket?,"    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""brown basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""What is in the brown basket?"")
    basket_patch = basket_patches[0]
    return basket_patch.simple_query(""What is in the brown basket?"")"
16827204,Is the marker different in color than the paper?,"    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    for marker_patch in marker_patches:
        paper_patches = image_patch.find(""paper"")
        for paper_patch in paper_patches:
            if marker_patch.simple_query(""What is the color of the marker?"") != paper_patch.simple_query(""What is the color of the paper?""):
                return ""yes""
    return ""no"""
1284539,Is there a racket to the right of the man on the right side?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    man_patch = man_patches[0]
    right_man = max(man_patches, key=lambda x:x.horizontal_center)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > right_man.horizontal_center:
            return ""yes""
    return ""no"""
1257391,What place is this?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
16223517,What do you think is the color of the large device?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""large device"")
    # Question assumes only one large device patch
    if len(device_patches) == 0:
        # If no large device is found, query the image directly
        return image_patch.simple_query(""What do you think is the color of the large device?"")
    for device_patch in device_patches:
        return device_patch.simple_query(""What is the color of the large device?"")"
1024280,Does the shirt look long sleeved or sleeveless?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    for shirt_patch in shirt_patches:
        if shirt_patch.simple_query(""Does the shirt have sleeves?"") == ""yes"":
            return ""long sleeved""
    return ""sleeveless"""
2769463,Which kind of animal is lying in the chair?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""lying""):
            return animal_patch.simple_query(""What kind of animal is lying in the chair?"")
    return image_patch.simple_query(""Which kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    chair_patch = chair_patches[0]
    white_box_patches = image_patch.find(""white box"")
    # Question assumes only one white box patch
    if len(white_box_patches) == 0:
        return ""no""
    for white_box_patch in white_box_patches:
        if white_box_patch.horizontal_center > chair_patch.horizontal_center:
            return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?,"    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?,"    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    # Question assumes only one flower pot patch
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    for flower_pot_patch in flower_pot_patches:
        return flower_pot_patch.verify_property(""flower pot"", ""clay"")"
191006281,Does the sky look clear and gray?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the sky look clear and gray?"")"
681336,Do you see hats or gloves that are white?,"    image_patch = ImagePatch(image)
    hats_patches = image_patch.find(""hat"")
    gloves_patches = image_patch.find(""glove"")
    for hat_patch in hats_patches:
        if hat_patch.simple_query(""What color is the hat?"") == ""white"":
            return ""yes""
    for glove_patch in gloves_patches:
        if glove_patch.simple_query(""What color are the gloves?"") == ""white"":
            return ""yes""
    return ""no"""
1300368,What is on the cabinet that is to the right of the keyboard?,"    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    for cabinet_patch in cabinet_patches:
        keyboard_patches = image_patch.find(""keyboard"")
        for keyboard_patch in keyboard_patches:
            if keyboard_patch.horizontal_center < cabinet_patch.horizontal_center:
                return cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    return ""nothing"""
172394,What is the animal to the left of the tap called?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    for animal_patch in animal_patches:
        tap_patches = image_patch.find(""tap"")
        for tap_patch in tap_patches:
            if animal_patch.horizontal_center < tap_patch.horizontal_center:
                return animal_patch.simple_query(""What is the animal to the left of the tap called?"")
    return ""no animal found"""
738176,Is the chair on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
4194919,Is the child on the right of the picture?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    child_patch = child_patches[0]
    if child_patch.horizontal_center > image_patch.width / 2:
        return ""yes""
    else:
        return ""no"""
3585327,Who is on the surfboard?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard?"")"
1711172,What size are the packages the candle is on top of?,"    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    for candle_patch in candle_patches:
        package_patches = image_patch.find(""package"")
        for package_patch in package_patches:
            if package_patch.horizontal_center < candle_patch.horizontal_center:
                return package_patch.simple_query(""What size is the package?"")
    return image_patch.simple_query(""What size are the packages the candle is on top of?"")"
4353895,Who is on the snowboard on the right?,"    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    for snowboard_patch in snowboard_patches:
        if snowboard_patch.horizontal_center > image_patch.horizontal_center:
            return snowboard_patch.simple_query(""Who is on the snowboard?"")
    return ""no one"""
17929304,What is the vehicle that is on the road?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is on the road?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle on the road?"") == ""yes"":
            return vehicle_patch.simple_query(""What is the vehicle that is on the road?"")
    # If no vehicle is on the road, pick the first vehicle
    return vehicle_patches[0].simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the crust?"")"
5672474,Is the plate to the left or to the right of the beer on the left?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    beer_patches = image_patch.find(""beer"")
    # Question assumes only one beer patch
    if len(beer_patches) == 0:
        # If no beer is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    for beer_patch in beer_patches:
        for plate_patch in plate_patches:
            if plate_patch.horizontal_center < beer_patch.horizontal_center:
                return ""left""
    return ""right"""
11341284,What is the pattern of the mattress on the street?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    for boy_patch in boy_patches:
        if boy_patch.horizontal_center < image_patch.horizontal_center:  # left of the center
            return ""no""
        if boy_patch.horizontal_center > image_patch.horizontal_center:  # right of the center
            return ""yes""
    return ""no"""
19203395,Is the white toilet paper to the right or to the left of the toilet?,"    image_patch = ImagePatch(image)
    toilet_paper_patches = image_patch.find(""white toilet paper"")
    # Question assumes only one toilet paper patch
    if len(toilet_paper_patches) == 0:
        # If no toilet paper is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    for toilet_paper_patch in toilet_paper_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
1194938,Are there any airplanes in front of the building?,"    image_patch = ImagePatch(image)
    airplane_patches = image_patch.find(""airplane"")
    # Question assumes only one airplane patch
    if len(airplane_patches) == 0:
        # If no airplane is found, query the image directly
        return image_patch.simple_query(""Are there any airplanes in front of the building?"")
    for airplane_patch in airplane_patches:
        building_patches = image_patch.find(""building"")
        for building_patch in building_patches:
            if airplane_patch.horizontal_center < building_patch.horizontal_center:
                return ""yes""
    return ""no"""
5350205,How clean is the road that the car is on the side of?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    car_patch = car_patches[0]
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    for road_patch in road_patches:
        if road_patch.horizontal_center == car_patch.horizontal_center:
            return road_patch.simple_query(""How clean is the road that the car is on the side of?"")
    return ""unknown"" # if no road patch is found at the same horizontal center as the car"
4256016,"In which part of the picture is the black van, the bottom or the top?","    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""black van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    for person_patch in person_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if person_patch.horizontal_center > fence_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the fence doing?"")
    return ""no"" # if no person is found to the right of the fence"
16471124,Does the horse have a different color than the boot?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    horse_patch = horse_patches[0]
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        return ""no""
    boot_patch = boot_patches[0]
    return bool_to_yesno(horse_patch.simple_query(""What is the color of the horse?"") != boot_patch.simple_query(""What is the color of the boot?""))"
958247,Is the mouse to the right of a chair?,"    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    # Question assumes only one mouse patch
    if len(mouse_patches) == 0:
        # If no mouse is found, query the image directly
        return image_patch.simple_query(""Is the mouse to the right of a chair?"")
    for mouse_patch in mouse_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if chair_patch.horizontal_center > mouse_patch.horizontal_center:
                return ""yes""
    return ""no"""
11179512,The basket made of plastic is what color?,"    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    for basket_patch in basket_patches:
        if basket_patch.verify_property(""basket"", ""plastic""):
            return basket_patch.simple_query(""What color is the basket?"")
    return ""unknown"" # if no basket made of plastic is found"
8816272,Do you see any elephant to the left of the bird?,"    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
    for elephant_patch in elephant_patches:
        for bird_patch in bird_patches:
            if elephant_patch.horizontal_center < bird_patch.horizontal_center:
                return ""yes""
    return ""no"""
11168592,What is the animal in front of the lamp?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What is the animal in front of the lamp?"")"
3568717,Who is wearing the jacket?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Who is wearing the jacket?"")
    for jacket_patch in jacket_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if jacket_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is wearing the jacket?"")
    return jacket_patches[0].simple_query(""Who is wearing the jacket?"") # crop would include the jacket so keep it in the query"
7398502,What is the food to the left of the girl in the bottom of the photo?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")"
5145864,What is the device that the camera is in front of?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that the camera is in front of?"")"
788143,Is the man on the surfboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the surfboard?"")
    man_patch = man_patches[0]
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        return ""no""
    for surfboard_patch in surfboard_patches:
        if man_patch.horizontal_center > surfboard_patch.horizontal_center:
            return ""yes""
    return ""no"""
15854501,What device has the same color as the device in the box?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > 0:  # assuming the box is on the left
            return device_patch.simple_query(""What device has the same color as the device in the box?"")
    return device_patches[0].simple_query(""What device has the same color as the device in the box?"")"
3228067,What is the child wearing?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    for child_patch in child_patches:
        return child_patch.simple_query(""What is the child wearing?"")"
6817336,Is the blue sky behind a cathedral?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the blue sky behind a cathedral?"")"
6347271,"In which part of the image is the yellow pepper, the bottom or the top?","    image_patch = ImagePatch(image)
    pepper_patches = image_patch.find(""yellow pepper"")
    # Question assumes only one yellow pepper patch
    if len(pepper_patches) == 0:
        # If no yellow pepper is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    if pepper_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal is the woman feeding?"")
    for woman_patch in woman_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > woman_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is the woman feeding?"")
    return woman_patch.simple_query(""What animal is the woman feeding?"")"
3427727,On which side is the bucket?,"    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    bucket_patch = bucket_patches[0]
    if bucket_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
31050314,Is the small chimney in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    chimney_patches = image_patch.find(""chimney"")
    # Question assumes only one chimney patch
    if len(chimney_patches) == 0:
        # If no chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    chimney_patch = chimney_patches[0]
    if chimney_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3503396,Are the pants purple?,"    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    for pants_patch in pants_patches:
        return bool_to_yesno(pants_patch.verify_property(""pants"", ""purple""))"
11742862,Which kind of furniture is to the right of the paper towels?,"    image_patch = ImagePatch(image)
    paper_towels_patches = image_patch.find(""paper towels"")
    # Question assumes only one paper towels patch
    if len(paper_towels_patches) == 0:
        # If no paper towels are found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    for paper_towels_patch in paper_towels_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > paper_towels_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is this?"")
    return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")"
5891809,What kind of furniture is gray?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    for furniture_patch in furniture_patches:
        gray_patches = image_patch.find(""gray"")
        for gray_patch in gray_patches:
            return gray_patch.simple_query(""What kind of furniture is gray?"") # crop would include the gray so keep it in the query"
5370528,Is the hair white and long?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    for hair_patch in hair_patches:
        is_white = hair_patch.verify_property(""hair"", ""white"")
        is_long = hair_patch.verify_property(""hair"", ""long"")
        return bool_to_yesno(is_white and is_long)"
781153,Do you see trains near the lamp post that looks white?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")"
5543456,Is the container to the left of the person that wears bracelets?,"    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    person_patches = image_patch.find(""person that wears bracelets"")
    # Question assumes only one container and one person patch
    if len(container_patches) == 0 or len(person_patches) == 0:
        # If no container or person is found, query the image directly
        return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
    for container_patch in container_patches:
        for person_patch in person_patches:
            if container_patch.horizontal_center < person_patch.horizontal_center:
                return ""yes""
    return ""no"""
163134,What do you think is on the roof?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?,"    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    shoe_patch = shoe_patches[0]
    return shoe_patch.best_text_match([""white"", ""brown""])"
5511395,What is wrapped in paper?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wrapped in paper?"")"
5611256,Are there any couches in the picture?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch""))"
1162826,The man is in what?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is in what?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""The man is in what?"")"
81020685,Which color is the small house?,"    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    for house_patch in house_patches:
        if house_patch.width < image_patch.width / 2:  # assuming small house
            return house_patch.simple_query(""What color is the house?"")
    return ""unknown""  # if no small house is found"
19640724,Who is in the bathroom?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is in the bathroom?"")
    for person_patch in person_patches:
        if person_patch.exists(""bathroom""):
            return person_patch.simple_query(""Who is in the bathroom?"")
    return ""no one"""
289960,Do you see a racket to the right of the boy that is looking at the tie?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    for boy_patch in boy_patches:
        tie_patches = image_patch.find(""tie"")
        for tie_patch in tie_patches:
            if tie_patch.horizontal_center > boy_patch.horizontal_center:
                racket_patches = image_patch.find(""racket"")
                for racket_patch in racket_patches:
                    if racket_patch.horizontal_center > tie_patch.horizontal_center:
                        return ""yes""
    return ""no"""
9957748,Does the hair appear to be long and brown?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair appear to be long and brown?"")
    for hair_patch in hair_patches:
        is_long = hair_patch.simple_query(""Is the hair long?"")
        is_brown = hair_patch.simple_query(""What is the color of the hair?"")
        return bool_to_yesno(is_long and is_brown == ""brown"")"
21031610,What is the shoe that looks black and white resting on?,"    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    for shoe_patch in shoe_patches:
        if shoe_patch.simple_query(""Is the shoe black and white?"") == ""yes"":
            return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    # If no black and white shoe is found, query the image directly
    return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?,"    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    # Question assumes only one glass patch
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is the glass on?"")
    return glass_patches[0].simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""white pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    for pillow_patch in pillow_patches:
        animal_patches = image_patch.find(""black animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > pillow_patch.horizontal_center:
                return ""yes""
    return ""no"""
457770,What kind of clothing is striped?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    for clothing_patch in clothing_patches:
        is_striped = clothing_patch.verify_property(""clothing"", ""striped"")
        if is_striped:
            return clothing_patch.simple_query(""What kind of clothing is striped?"")
    return ""none"""
12603153,Are the child's eyes blue and open?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    for child_patch in child_patches:
        eye_patches = child_patch.find(""eyes"")
        # Question assumes only one eye patch
        if len(eye_patches) == 0:
            return ""no""
        for eye_patch in eye_patches:
            is_blue = eye_patch.verify_property(""eyes"", ""blue"")
            is_open = eye_patch.verify_property(""eyes"", ""open"")
            return bool_to_yesno(is_blue and is_open)"
9480973,What is located on top of the tub?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    for fork_patch in fork_patches:
        plate_patches = image_patch.find(""white plate"")
        for plate_patch in plate_patches:
            if fork_patch.horizontal_center > plate_patch.horizontal_center:
                return ""right""
            elif fork_patch.horizontal_center < plate_patch.horizontal_center:
                return ""left""
    return ""no"" # if no white plate is found"
13420253,On which side of the photo is the chair?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the label on?"")"
3322787,What bird is to the left of the person that is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"":
            bird_patches = image_patch.find(""bird"")
            for bird_patch in bird_patches:
                if bird_patch.horizontal_center < person_patch.horizontal_center:
                    return bird_patch.simple_query(""What kind of bird is it?"")
    return ""no bird found"""
6399594,On which side is the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
6930120,Is the glass bowl on the right or on the left?,"    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    # Question assumes only one glass bowl patch
    if len(glass_bowl_patches) == 0:
        # If no glass bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    glass_bowl_patch = glass_bowl_patches[0]
    if glass_bowl_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
12619961,What vehicles are to the left of the taxi?,"    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    for taxi_patch in taxi_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < taxi_patch.horizontal_center:
                return vehicle_patch.simple_query(""What type of vehicle is this?"")
    return ""none"""
13362315,Is the basket on the shelf black and empty?,"    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    for basket_patch in basket_patches:
        is_on_shelf = basket_patch.vertical_center > image_patch.lower and basket_patch.vertical_center < image_patch.upper
        is_black = basket_patch.simple_query(""What is the color of the basket?"") == ""black""
        is_empty = basket_patch.simple_query(""Is the basket empty?"") == ""yes""
        return bool_to_yesno(is_on_shelf and is_black and is_empty)"
3830854,What is the animal that is standing next to the donkey that is standing in the hay?,"    image_patch = ImagePatch(image)
    donkey_patches = image_patch.find(""donkey"")
    # Question assumes only one donkey patch
    if len(donkey_patches) == 0:
        # If no donkey is found, query the image directly
        return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    for donkey_patch in donkey_patches:
        # find the animal next to the donkey
        for object_patch in image_patch.find(""animal""):
            if object_patch.horizontal_center > donkey_patch.horizontal_center:
                return object_patch.simple_query(""What kind of animal is this?"")
    return ""not found"""
18382324,Is this a bed or a table?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a bed or a table?"")"
18104571,"Which animal is that, a bird or a cat?","    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal a bird?"") == ""yes"":
            return ""a bird""
        elif animal_patch.simple_query(""Is the animal a cat?"") == ""yes"":
            return ""a cat""
    return ""bird"" # default to bird if no cat is found"
2913379,Do you see any fence or pot?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)"
9294271,What is in front of the fence the zebra is kept in?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")"
10741434,What is the vegetable that is on top of the plate called?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")"
765962,Where is the car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Where is the car?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif car_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
12399262,Is there either a yellow truck or airplane?,"    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)"
13964213,Is the man on the left of the photo?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.width / 2:
        return ""yes""
    else:
        return ""no"""
16171369,What is covered in the snow?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""plastic bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    for bottle_patch in bottle_patches:
        if bottle_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
5858491,Do you see any ropes on the fence that is on the left of the picture?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center < image_patch.horizontal_center:
            rope_patches = image_patch.find(""rope"")
            for rope_patch in rope_patches:
                if rope_patch.horizontal_center < image_patch.horizontal_center:
                    return ""yes""
    return ""no"""
17834539,Are there any lamps in the scene?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp""))"
15658176,Who is wearing a helmet?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a helmet?"")"
14372400,Does that coat have red color?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    for coat_patch in coat_patches:
        return bool_to_yesno(coat_patch.verify_property(""coat"", ""red""))"
411886,Are there any curtains or blankets in this scene?,"    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    remote_patches = image_patch.find(""remote"")
    # Question assumes only one remote patch
    if len(remote_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    for remote_patch in remote_patches:
        if remote_patch.horizontal_center > man_patch.horizontal_center:
            return remote_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")"
51039491,Is the fence black or red?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    for fence_patch in fence_patches:
        return fence_patch.simple_query(""What color is the fence?"")"
7425912,What animal is standing in the field?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is standing in the field?"")"
13136338,What animal is in front of the dog which is to the right of the bird?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    for bird_patch in bird_patches:
        dog_patches = image_patch.find(""dog"")
        for dog_patch in dog_patches:
            if dog_patch.horizontal_center > bird_patch.horizontal_center:
                animal_patches = image_patch.find(""animal"")
                for animal_patch in animal_patches:
                    if animal_patch.horizontal_center < dog_patch.horizontal_center:
                        return animal_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")"
3775066,Which color are the cabinets in the bottom of the picture?,"    image_patch = ImagePatch(image)
    cabinets_patches = image_patch.find(""cabinets"")
    # Question assumes only one cabinets patch
    if len(cabinets_patches) == 0:
        # If no cabinets are found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    for cabinets_patch in cabinets_patches:
        if cabinets_patch.vertical_center < image_patch.vertical_center:
            return cabinets_patch.simple_query(""What color are the cabinets?"")
    return ""unknown"" # if no cabinets are found in the bottom of the picture"
17206239,Is the happy girl to the right of a player?,"    image_patch = ImagePatch(image)
    happy_girl_patches = image_patch.find(""happy girl"")
    # Question assumes only one happy girl patch
    if len(happy_girl_patches) == 0:
        # If no happy girl is found, query the image directly
        return image_patch.simple_query(""Is the happy girl to the right of a player?"")
    for happy_girl_patch in happy_girl_patches:
        player_patches = image_patch.find(""player"")
        for player_patch in player_patches:
            if player_patch.horizontal_center > happy_girl_patch.horizontal_center:
                return ""yes""
    return ""no"""
2992517,"What piece of furniture is not wooden, the table or the chair?","    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one table and one chair patch
    if len(table_patches) == 0 or len(chair_patches) == 0:
        # If no table or chair is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    for table_patch in table_patches:
        is_wooden = table_patch.verify_property(""table"", ""wooden"")
        for chair_patch in chair_patches:
            is_wooden_chair = chair_patch.verify_property(""chair"", ""wooden"")
            if not is_wooden:
                return ""table""
            elif not is_wooden_chair:
                return ""chair""
    return ""table"" # default to table if all are wooden"
1827558,Which side of the image is the kettle on?,"    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    for kettle_patch in kettle_patches:
        if kettle_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
2785208,Where is the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""Where is the man?"")"
6623967,Is the baby near the countertop chewing a computer mouses?,"    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouse?"")
    for baby_patch in baby_patches:
        is_near_countertop = baby_patch.horizontal_center > image_patch.left and baby_patch.horizontal_center < image_patch.right
        is_chewing_mouse = baby_patch.simple_query(""Is the baby chewing a computer mouse?"") == ""yes""
        return bool_to_yesno(is_near_countertop and is_chewing_mouse)"
12804807,Is the small bottle open or closed?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    for bottle_patch in bottle_patches:
        if bottle_patch.simple_query(""Is the bottle open?"") == ""yes"":
            return ""open""
    return ""closed"""
18437691,Is the clock small or large?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    clock_patch = clock_patches[0]
    if clock_patch.width < 100:  # arbitrary threshold
        return ""small""
    else:
        return ""large"""
9482318,Are there either any glasses or bottles in this photo?,"    image_patch = ImagePatch(image)
    is_glasses = image_patch.exists(""glasses"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glasses or is_bottle)"
12362819,Is the sky blue or dark?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue or dark?"")"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?,"    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    for cup_patch in cup_patches:
        shelf_patches = image_patch.find(""shelf"")
        for shelf_patch in shelf_patches:
            if cup_patch.horizontal_center > shelf_patch.horizontal_center:
                right_patches = image_patch.find(""right of the shelf the cup is on"")
                for right_patch in right_patches:
                    return right_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    return ""not found"""
1416636,Are there both bridges and chandeliers in this photograph?,"    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?,"    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""door""))"
13562221,What's the bear on?,"    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What's the bear on?"")
    return bear_patches[0].simple_query(""What's the bear on?"")"
9536851,Is the woman in front of the trees holding scissors?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")
    for woman_patch in woman_patches:
        tree_patches = image_patch.find(""trees"")
        for tree_patch in tree_patches:
            if woman_patch.horizontal_center < tree_patch.horizontal_center:
                scissor_patches = image_patch.find(""scissors"")
                for scissor_patch in scissor_patches:
                    if scissor_patch.horizontal_center == woman_patch.horizontal_center:
                        return ""yes""
    return ""no"""
9682405,What is on the machine?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the machine?"")"
8649435,What is on the white wall?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?,"    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""Does the logo look red?"")
    for logo_patch in logo_patches:
        return bool_to_yesno(logo_patch.verify_property(""logo"", ""red""))"
14301289,What type of vehicle is to the left of the white vehicle?,"    image_patch = ImagePatch(image)
    white_vehicle_patches = image_patch.find(""white vehicle"")
    # Question assumes only one white vehicle patch
    if len(white_vehicle_patches) == 0:
        # If no white vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    for white_vehicle_patch in white_vehicle_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < white_vehicle_patch.horizontal_center:
                return vehicle_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    return ""no vehicle"""
523976,Which kind of vehicle is large?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    for vehicle_patch in vehicle_patches:
        is_large = vehicle_patch.verify_property(""vehicle"", ""large"")
        if is_large:
            return vehicle_patch.simple_query(""Which kind of vehicle is large?"")
    # If no large vehicle is found, query the image directly
    return image_patch.simple_query(""Which kind of vehicle is large?"")"
3423213,Who is in front of the trees?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?,"    image_patch = ImagePatch(image)
    ottoman_patches = image_patch.find(""ottoman"")
    # Question assumes only one ottoman patch
    if len(ottoman_patches) == 0:
        # If no ottoman is found, query the image directly
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    for ottoman_patch in ottoman_patches:
        chair_patches = image_patch.find(""brown chair"")
        for chair_patch in chair_patches:
            if ottoman_patch.horizontal_center > chair_patch.horizontal_center:
                return ""right""
    return ""left"""
5716578,Is there a laptop on the bed near the magazines?,"    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")
    for laptop_patch in laptop_patches:
        magazine_patches = image_patch.find(""magazines"")
        for magazine_patch in magazine_patches:
            if abs(laptop_patch.horizontal_center - magazine_patch.horizontal_center) < 50: # 50 pixels
                return ""yes""
    return ""no"""
8215791,Is the porcelain toilet to the left or to the right of the small trash can?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""porcelain toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    for toilet_patch in toilet_patches:
        trash_can_patches = image_patch.find(""small trash can"")
        for trash_can_patch in trash_can_patches:
            if toilet_patch.horizontal_center < trash_can_patch.horizontal_center:
                return ""left""
    return ""right"""
17528455,What is in front of the wall?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?,"    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"")
    goggles_patch = goggles_patches[0]
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one gloves patch
    if len(gloves_patches) == 0:
        return ""no""
    gloves_patch = gloves_patches[0]
    return bool_to_yesno(goggles_patch.simple_query(""What is the color of the goggles?"") != gloves_patch.simple_query(""What is the color of the gloves?""))"
947724,Is there any purple pillow or kite in this photograph?,"    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""purple pillow"")
    is_kite = image_patch.exists(""kite"")
    return bool_to_yesno(is_pillow or is_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?","    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    right_patches = image_patch.find(""right"")
    for right_patch in right_patches:
        if right_patch.horizontal_center > man_patch.horizontal_center:
            return right_patch.simple_query(""standing or sitting?"")"
15492262,Which kind of furniture is white?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""Which kind of furniture is white?"")
    return image_patch.simple_query(""Which kind of furniture is white?"") # if no white furniture is found, query the image directly"
151032547,Is the bear on the right side?,"    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    for bear_patch in bear_patches:
        if bear_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
5698674,Are there either any planters or benches?,"    image_patch = ImagePatch(image)
    is_planter = image_patch.exists(""planter"")
    is_bench = image_patch.exists(""bench"")
    return bool_to_yesno(is_planter or is_bench)"
19397103,What is the person that is standing staring at?,"    image_patch = ImagePatch(image)
    # asks for the predicate of a relational verb (staring at), so ask directly
    return image_patch.simple_query(""What is the person that is standing staring at?"")"
11630681,What is the color of the necklace?,"    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    # Question assumes only one necklace patch
    if len(necklace_patches) == 0:
        # If no necklace is found, query the image directly
        return image_patch.simple_query(""What is the color of the necklace?"")
    return necklace_patches[0].simple_query(""What is the color of the necklace?"")"
248245,Is the table to the left or to the right of the fence?,"    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    for table_patch in table_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if table_patch.horizontal_center < fence_patch.horizontal_center:
                return ""left""
            else:
                return ""right"""
837033,Are there round windows or doors?,"    image_patch = ImagePatch(image)
    round_patches = image_patch.find(""round"")
    # Question assumes only one round patch
    if len(round_patches) == 0:
        # If no round is found, query the image directly
        return image_patch.simple_query(""Are there round windows or doors?"")
    for round_patch in round_patches:
        if round_patch.simple_query(""Is the round object a window?"") == ""yes"":
            return ""yes""
    return ""no"""
5249150,Are there any bears or napkins in the picture?,"    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    for person_patch in person_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < person_patch.horizontal_center:
                return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the person?"") # if no vehicle is found to the left of the person"
61006749,Who is dressed in pink?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is dressed in pink?"")"
6122955,Does the pillow have yellow color?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    pillow_patch = pillow_patches[0]
    return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""yellow""))"
6861738,Is the old woman to the right or to the left of the faucet?,"    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    # Question assumes only one old woman patch
    if len(old_woman_patches) == 0:
        # If no old woman is found, query the image directly
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    for old_woman_patch in old_woman_patches:
        faucet_patches = image_patch.find(""faucet"")
        for faucet_patch in faucet_patches:
            if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
15833048,Which kind of animal is on the road?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is on the road?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.width / 2:
            return animal_patch.simple_query(""Which kind of animal is on the road?"")
    return animal_patch.simple_query(""Which kind of animal is on the road?"")"
9524339,What animal is large?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""large""):
            return animal_patch.simple_query(""What animal is large?"")
    return image_patch.simple_query(""What animal is large?"") # if no large animal is found, query the image directly"
18255749,How clean are the sheets the pillow is to the right of?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheet_patches = image_patch.find(""sheets"")
    # Question assumes only one sheet patch
    if len(sheet_patches) == 0:
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    for sheet_patch in sheet_patches:
        if sheet_patch.horizontal_center > pillow_patch.horizontal_center:
            return sheet_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    return sheet_patches[0].simple_query(""How clean are the sheets the pillow is to the right of?"")"
19797097,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What's the man wearing?"")"
6899090,Is the man to the right or to the left of the appliance that looks white?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patches = image_patch.find(""appliance that looks white"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    appliance_patch = appliance_patches[0]
    if man_patch.horizontal_center > appliance_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
3357701,Does the dog to the right of the other dog have white color?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If less than two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    right_dog = None
    for dog_patch in dog_patches:
        if dog_patch.horizontal_center > image_patch.horizontal_center:
            right_dog = dog_patch
    if right_dog is None:
        return ""no""
    return bool_to_yesno(right_dog.verify_property(""dog"", ""white""))"
2829418,What's the girl holding?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What's the girl holding?"")
    for girl_patch in girl_patches:
        holding_patches = image_patch.find(""holding"")
        for holding_patch in holding_patches:
            return holding_patch.simple_query(""What's the girl holding?"") # crop would include the object being held so keep it in the query"
15930109,Which kind of vehicle is blue?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""blue""):
            return vehicle_patch.simple_query(""Which kind of vehicle is blue?"")
    return ""none"""
1525382,What type of vegetable is on the food with the cheese?,"    image_patch = ImagePatch(image)
    # contains a relation (on, with), so ask directly
    return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")"
8548980,Are there either players or hand soaps?,"    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?","    image_patch = ImagePatch(image)
    sandwich_patches = image_patch.find(""sandwich"")
    # Question assumes only one sandwich patch
    if len(sandwich_patches) == 0:
        # If no sandwich is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    croissant_patches = image_patch.find(""croissant"")
    # Question assumes only one croissant patch
    if len(croissant_patches) == 0:
        return ""sandwich""
    return ""croissant"""
6423906,Which kind of food is on the plate?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of food is on the plate?"")"
1993231,Are the animals in the image of different types?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    for animal_patch in animal_patches:
        animal_type = animal_patch.simple_query(""What type of animal is this?"")
        for other_animal_patch in animal_patches:
            if other_animal_patch != animal_patch:
                other_animal_type = other_animal_patch.simple_query(""What type of animal is this?"")
                if animal_type == other_animal_type:
                    return ""no""
    return ""yes"""
13949656,Are there any people to the left of the tray?,"    image_patch = ImagePatch(image)
    tray_patches = image_patch.find(""tray"")
    # Question assumes only one tray patch
    if len(tray_patches) == 0:
        # If no tray is found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for tray_patch in tray_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center < tray_patch.horizontal_center:
                return ""yes""
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?,"    image_patch = ImagePatch(image)
    pineapple_patches = image_patch.find(""fresh pineapple"")
    # Question assumes only one pineapple patch
    if len(pineapple_patches) == 0:
        # If no pineapple is found, query the image directly
        return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")
    for pineapple_patch in pineapple_patches:
        return pineapple_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")"
9392591,Are there chairs or smoothies?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?,"    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    for sheep_patch in sheep_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > sheep_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is this?"")
    return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")"
9896138,Are there any boxes to the left of the screen in the picture?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in box_patches:
        if box_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1400333,What do you think is the man on?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What do you think is the man on?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?,"    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    boot_patch = boot_patches[0]
    return boot_patch.best_text_match([""white"", ""orange""])"
3659880,Does the wood boat have silver color?,"    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""wood boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""Does the wood boat have silver color?"")
    for boat_patch in boat_patches:
        return bool_to_yesno(boat_patch.verify_property(""wood boat"", ""silver""))"
1827802,Is the red pot on the appliance to the right of the mixer?,"    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    for red_pot_patch in red_pot_patches:
        mixer_patches = image_patch.find(""mixer"")
        for mixer_patch in mixer_patches:
            appliance_patches = image_patch.find(""appliance"")
            for appliance_patch in appliance_patches:
                if appliance_patch.horizontal_center < mixer_patch.horizontal_center < red_pot_patch.horizontal_center:
                    return ""yes""
    return ""no"""
14809102,The phone that is in front of the camera is of what color?,"    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # Question assumes only one phone patch
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    for phone_patch in phone_patches:
        if phone_patch.horizontal_center < image_patch.horizontal_center:
            return phone_patch.simple_query(""What color is the phone?"") # crop would include the phone so keep it in the query
    return ""no phone found"""
61001545,What type of food is to the left of the silver spoon?,"    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""silver spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    for spoon_patch in spoon_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < spoon_patch.horizontal_center:
                return food_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"") # if no food is found to the left of the spoon, query the image directly"
799463,Are there both a window and a door in the picture?,"    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
11260725,Does the water have small size and white color?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Does the water have small size and white color?"")
    water_patch = water_patches[0]
    is_small = water_patch.simple_query(""Is the water small?"") == ""yes""
    is_white = water_patch.simple_query(""What is the color of the water?"") == ""white""
    return bool_to_yesno(is_small and is_white)"
2397653,Are there any fences that are white?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any fences that are white?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""yes""
    return ""no"""
1554603,Who is holding the animal?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    for animal_patch in animal_patches:
        holder_patches = image_patch.find(""holding"")
        for holder_patch in holder_patches:
            if holder_patch.horizontal_center > animal_patch.horizontal_center:
                return holder_patch.simple_query(""Who is holding the animal?"")
    return image_patch.simple_query(""Who is holding the animal?"") # if no holder is found, query the image directly"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patch = man_patches[0]
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    for stroller_patch in stroller_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center > stroller_patch.horizontal_center:
                if man_patch.horizontal_center > people_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right""
    return ""left"" # default to left if no man is found"
8988476,What kind of furniture is presented in this photo?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man with the backpack"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man with the backpack is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    holding_patches = image_patch.find(""holding"")
    for holding_patch in holding_patches:
        if holding_patch.horizontal_center > man_patch.horizontal_center:
            return holding_patch.simple_query(""What is the man with the backpack holding?"")
    return man_patch.simple_query(""What is the man with the backpack holding?"")"
91058050,Are there both mouse pads and computer mice in the photograph?,"    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_computer_mouse = image_patch.exists(""computer mouse"")
    return bool_to_yesno(is_mouse_pad and is_computer_mouse)"
1972064,Is the person in front of the tree wearing jeans?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")
    for person_patch in person_patches:
        tree_patches = image_patch.find(""tree"")
        for tree_patch in tree_patches:
            if person_patch.horizontal_center < tree_patch.horizontal_center:
                return person_patch.verify_property(""person"", ""jeans"")"
167162,Is there a bike to the right of the purse that is to the right of the woman?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    woman_patch = woman_patches[0]
    purse_patches = image_patch.find(""purse"")
    for purse_patch in purse_patches:
        if purse_patch.horizontal_center > woman_patch.horizontal_center:
            bike_patches = image_patch.find(""bike"")
            for bike_patch in bike_patches:
                if bike_patch.horizontal_center > purse_patch.horizontal_center:
                    return ""yes""
    return ""no"""
1695388,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"")
    # If no person is wearing a shirt, query the image directly
    return image_patch.simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    # Question assumes only one woman and one man patch
    if len(woman_patches) == 0 or len(man_patches) == 0:
        # If no woman or man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    woman_patch = woman_patches[0]
    man_patch = man_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16921984,What is the bent man to the right of the other men doing?,"    image_patch = ImagePatch(image)
    bent_man_patches = image_patch.find(""bent man"")
    # Question assumes only one bent man patch
    if len(bent_man_patches) == 0:
        # If no bent man is found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    for bent_man_patch in bent_man_patches:
        other_man_patches = image_patch.find(""man"")
        for other_man_patch in other_man_patches:
            if other_man_patch.horizontal_center < bent_man_patch.horizontal_center:
                return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return bent_man_patches[0].simple_query(""What is the bent man to the right of the other men doing?"")"
12175564,What animal are the men to the right of the girl leading?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    for girl_patch in girl_patches:
        men_patches = image_patch.find(""man"")
        for man_patch in men_patches:
            if man_patch.horizontal_center > girl_patch.horizontal_center:
                return man_patch.simple_query(""What animal is leading?"")
    return ""unknown"""
1219606,On which side of the image is the house?,"    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    house_patch = house_patches[0]
    if house_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
1770499,Is the black suitcase to the right or to the left of the person on the left?,"    image_patch = ImagePatch(image)
    black_suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one black suitcase patch
    if len(black_suitcase_patches) == 0:
        # If no black suitcase is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    for black_suitcase_patch in black_suitcase_patches:
        person_on_left_patches = image_patch.find(""person on the left"")
        # Question assumes only one person on the left patch
        if len(person_on_left_patches) == 0:
            # If no person on the left is found, query the image directly
            return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
        for person_on_left_patch in person_on_left_patches:
            if black_suitcase_patch.horizontal_center > person_on_left_patch.horizontal_center:
                return ""right""
    return ""left"""
5282406,Is the pot to the left of a chair?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    for pot_patch in pot_patches:
        chair_patches = image_patch.find(""chair"")
        for chair_patch in chair_patches:
            if chair_patch.horizontal_center < pot_patch.horizontal_center:
                return ""yes""
    return ""no"""
10914401,Where are the people?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    for people_patch in people_patches:
        return people_patch.simple_query(""Where are the people?"")"
1919722,What animal is eating the grass?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is eating the grass?"")
    for animal_patch in animal_patches:
        eating_patches = image_patch.find(""eating"")
        for eating_patch in eating_patches:
            if eating_patch.horizontal_center > animal_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is eating the grass?"")
    return animal_patches[0].simple_query(""What animal is eating the grass?"")"
9681008,Who is wearing a helmet?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing a helmet?"")"
16861675,Who is on the surfboard in the middle of the photo?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")"
10947426,What is the color of the lizard beside the banana?,"    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    # Question assumes only one lizard patch
    if len(lizard_patches) == 0:
        # If no lizard is found, query the image directly
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    for lizard_patch in lizard_patches:
        banana_patches = image_patch.find(""banana"")
        for banana_patch in banana_patches:
            if lizard_patch.horizontal_center > banana_patch.horizontal_center:
                return lizard_patch.simple_query(""What is the color of the lizard?"")
    return ""not found"" # if no lizard is found beside the banana"
18200684,Is the wine glass in the top or in the bottom part?,"    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    if wine_glass_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    for people_patch in people_patches:
        horizontal_center = people_patch.horizontal_center
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < horizontal_center:
                return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    return ""none"""
171012637,Is the teddy bear to the right of a suitcase?,"    image_patch = ImagePatch(image)
    teddy_bear_patches = image_patch.find(""teddy bear"")
    # Question assumes only one teddy bear patch
    if len(teddy_bear_patches) == 0:
        # If no teddy bear is found, query the image directly
        return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"")
    for teddy_bear_patch in teddy_bear_patches:
        suitcase_patches = image_patch.find(""suitcase"")
        for suitcase_patch in suitcase_patches:
            if suitcase_patch.horizontal_center > teddy_bear_patch.horizontal_center:
                return ""yes""
    return ""no"""
19861372,Is the woman's hair long or short?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    for hair_patch in hair_patches:
        if hair_patch.height > woman_patch.height / 2:
            return ""long""
    return ""short"""
623889,Are both the television and the armchair the same color?,"    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""television"")
    armchair_patches = image_patch.find(""armchair"")
    # Question assumes only one TV and armchair patch
    if len(tv_patches) == 0 or len(armchair_patches) == 0:
        # If no TV or armchair is found, query the image directly
        return image_patch.simple_query(""Are both the television and the armchair the same color?"")
    tv_color = tv_patches[0].simple_query(""What is the color of the television?"")
    armchair_color = armchair_patches[0].simple_query(""What is the color of the armchair?"")
    return bool_to_yesno(tv_color == armchair_color)"
4917605,Is the shoe white or brown?,"    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    shoe_patch = shoe_patches[0]
    return shoe_patch.best_text_match([""white"", ""brown""])"
91055143,What is on the table?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
5430643,What do you think sits on the plate to the left of the tomato?,"    image_patch = ImagePatch(image)
    tomato_patches = image_patch.find(""tomato"")
    # Question assumes only one tomato patch
    if len(tomato_patches) == 0:
        # If no tomato is found, query the image directly
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    for tomato_patch in tomato_patches:
        plate_patches = image_patch.find(""plate"")
        for plate_patch in plate_patches:
            if plate_patch.horizontal_center > tomato_patch.horizontal_center:
                return plate_patch.simple_query(""What sits on the plate to the left of the tomato?"") # crop would include the plate so keep it in the query
    # If no plate is found, query the image directly
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")"
523936,Is the woman in the top part of the picture?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center > image_patch.vertical_center / 2:
        return ""yes""
    else:
        return ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    for bottle_patch in bottle_patches:
        nightstand_patches = image_patch.find(""nightstand"")
        for nightstand_patch in nightstand_patches:
            if nightstand_patch.horizontal_center < bottle_patch.horizontal_center:
                bed_patches = image_patch.find(""bed"")
                for bed_patch in bed_patches:
                    if bed_patch.horizontal_center < nightstand_patch.horizontal_center:
                        return ""yes""
    return ""no"""
14292161,The pot is of which color?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].simple_query(""What is the color of the pot?"")"
17495150,"What device is black, the microphone or the laptop?","    image_patch = ImagePatch(image)
    microphone_patches = image_patch.find(""microphone"")
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one microphone and one laptop patch
    if len(microphone_patches) == 0 or len(laptop_patches) == 0:
        # If no microphone or laptop is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    for microphone_patch in microphone_patches:
        for laptop_patch in laptop_patches:
            if microphone_patch.cropped_image[0, 0, 0][0] < 128:  # black
                return ""the microphone""
            elif laptop_patch.cropped_image[0, 0, 0][0] < 128:  # black
                return ""the laptop""
    return ""the microphone""  # default to microphone if no black laptop found"
1521847,Is the cat on a desk?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Is the cat on a desk?"")
    for cat_patch in cat_patches:
        return cat_patch.simple_query(""Is the cat on a desk?"")"
16465081,The man is holding what?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    object_patches = image_patch.find(""object"")
    for object_patch in object_patches:
        if object_patch.horizontal_center > man_patch.horizontal_center:
            return object_patch.simple_query(""What is the man holding?"")
    return ""nothing"""
17387032,What is on the post?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?,"    image_patch = ImagePatch(image)
    kids_patches = image_patch.find(""kids"")
    # Question assumes only one kids patch
    if len(kids_patches) == 0:
        # If no kids are found, query the image directly
        return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")
    for kids_patch in kids_patches:
        cake_patches = image_patch.find(""cake"")
        for cake_patch in cake_patches:
            if cake_patch.horizontal_center > kids_patch.horizontal_center:
                return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"") # crop would include the cake so keep it in the query
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"") # if no cake is found, query the image directly"
18906705,How big is the crowd?,"    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""crowd"")
    # Question assumes only one crowd patch
    if len(crowd_patches) == 0:
        # If no crowd is found, query the image directly
        return image_patch.simple_query(""How big is the crowd?"")
    return crowd_patches[0].simple_query(""How big is the crowd?"")"
6157200,Does the sign on the pole have white color?,"    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign on the pole"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    for sign_patch in sign_patches:
        return bool_to_yesno(sign_patch.verify_property(""sign on the pole"", ""white""))"
16760226,What's the laptop in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?,"    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    bed_patch = bed_patches[0]
    return bed_patch.simple_query(""How large is the bed?"")"
14143886,Where is the person with the luggage standing on?,"    image_patch = ImagePatch(image)
    person_with_luggage_patches = image_patch.find(""person with luggage"")
    # Question assumes only one person with luggage patch
    if len(person_with_luggage_patches) == 0:
        # If no person with luggage is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    for person_with_luggage_patch in person_with_luggage_patches:
        return person_with_luggage_patch.simple_query(""What surface is the person with the luggage standing on?"")"
19872633,Are there either any fire extinguishers or pepper shakers?,"    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)"
12755010,Is the bottle to the right of a napkin?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    for bottle_patch in bottle_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if napkin_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""yes""
    return ""no"""
2747001,Are there any soaps or bombs?,"    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?,"    image_patch = ImagePatch(image)
    is_baby_giraffe = image_patch.exists(""baby giraffe"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_baby_giraffe or is_elephant)"
6898877,What is the sign on?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"")"
15862812,What is the sticker on?,"    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    return sticker_patches[0].simple_query(""What is the sticker on?"")"
141031470,On which side of the image is the white towel?,"    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""white towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    for towel_patch in towel_patches:
        if towel_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
41026846,Who rides a motorcycle?,"    image_patch = ImagePatch(image)
    rider_patches = image_patch.find(""rider"")
    # Question assumes only one rider patch
    if len(rider_patches) == 0:
        # If no rider is found, query the image directly
        return image_patch.simple_query(""Who rides a motorcycle?"")
    for rider_patch in rider_patches:
        motorcycle_patches = image_patch.find(""motorcycle"")
        for motorcycle_patch in motorcycle_patches:
            return rider_patch.simple_query(""Who rides a motorcycle?"") # crop would include the motorcycle so keep it in the query
    # If no motorcycle is found, query the image directly
    return image_patch.simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?,"    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""What is around the bathtub the towel is on?"")
    for towel_patch in towel_patches:
        return image_patch.simple_query(""What is around the bathtub the towel is on?"") # crop would include the bathtub so keep it in the query"
7469617,Is the man to the left or to the right of the person that is to the left of the people?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    for man_patch in man_patches:
        people_patches = image_patch.find(""people"")
        # Question assumes only one people patch
        if len(people_patches) == 0:
            return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
        for people_patch in people_patches:
            left_of_people_patches = image_patch.find(""left of the people"")
            # Question assumes only one left of people patch
            if len(left_of_people_patches) == 0:
                return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
            for left_of_people_patch in left_of_people_patches:
                if left_of_people_patch.horizontal_center < man_patch.horizontal_center:
                    return ""right""
    return ""left"""
64308,What's located on top of the soup?,"    image_patch = ImagePatch(image)
    soup_patches = image_patch.find(""soup"")
    # Question assumes only one soup patch
    if len(soup_patches) == 0:
        # If no soup is found, query the image directly
        return image_patch.simple_query(""What's located on top of the soup?"")
    for soup_patch in soup_patches:
        return soup_patch.simple_query(""What's located on top of the soup?"") # crop would include the top so keep it in the query"
16660910,Are both the fence and the bench made of the same material?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one fence and one bench patch
    if len(fence_patches) == 0 or len(bench_patches) == 0:
        # If no fence or bench is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    for fence_patch in fence_patches:
        for bench_patch in bench_patches:
            fence_material = fence_patch.simple_query(""What material is the fence made of?"")
            bench_material = bench_patch.simple_query(""What material is the bench made of?"")
            return bool_to_yesno(fence_material == bench_material)"
3196255,Are there helmets that are not white?,"    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.simple_query(""What is the color of the helmet?"") != ""white"":
            return ""yes""
    return ""no"""
2992630,Is the bowl to the right or to the left of the man that is drinking?,"    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    for bowl_patch in bowl_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center < bowl_patch.horizontal_center:
                return ""right""
    return ""left"""
513894,Is the person above the sand wearing glasses?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    for person_patch in person_patches:
        if person_patch.vertical_center > image_patch.vertical_center:  # above the sand
            return bool_to_yesno(person_patch.verify_property(""person"", ""wearing glasses""))"
14167599,Is the color of the life preserver the same as that of the house?,"    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    # Question assumes only one life preserver patch
    if len(life_preserver_patches) == 0:
        # If no life preserver is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    for life_preserver_patch in life_preserver_patches:
        house_patches = image_patch.find(""house"")
        for house_patch in house_patches:
            life_preserver_color = life_preserver_patch.simple_query(""What is the color of the life preserver?"")
            house_color = house_patch.simple_query(""What is the color of the house?"")
            if life_preserver_color != house_color:
                return ""no""
    return ""yes"""
18264755,How is the weather?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    for animal_patch in animal_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if not toilet_patch.verify_property(""toilet"", ""closed""):
                return animal_patch.simple_query(""What animal is looking into the toilet that is not closed?"") # crop would include the toilet so keep it in the query
    # If no toilet is not closed, query the image directly
    return image_patch.simple_query(""What animal is looking into the toilet that is not closed?"")"
8641613,Do you see any helmets in the picture that are not red?,"    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.simple_query(""What is the color of the helmet?"") != ""red"":
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?,"    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    for happy_patch in happy_patches:
        object_patches = image_patch.find(""object"")
        for object_patch in object_patches:
            if object_patch.horizontal_center > happy_patch.horizontal_center:
                return object_patch.simple_query(""What does the happy person hold?"")
    return ""nothing"""
8461507,Are there either tissue boxes or lamps in the picture?,"    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is it?"")"
19102906,What type of drink is to the left of the plate?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of drink is to the left of the plate?"")"
18315440,Is the sky cloudy and blue?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""cloudy"") and image_patch.verify_property(""sky"", ""blue""))"
453061,Is the fork on the right of the image?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork on the right of the image?"")
    for fork_patch in fork_patches:
        if fork_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
71002567,"What is the broccoli on, a table or a nightstand?","    image_patch = ImagePatch(image)
    broccoli_patches = image_patch.find(""broccoli"")
    # Question assumes only one broccoli patch
    if len(broccoli_patches) == 0:
        # If no broccoli is found, query the image directly
        return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    for broccoli_patch in broccoli_patches:
        table_patches = image_patch.find(""table"")
        nightstand_patches = image_patch.find(""nightstand"")
        if len(table_patches) > 0:
            for table_patch in table_patches:
                if broccoli_patch.horizontal_center > table_patch.horizontal_center:
                    return ""on""
        if len(nightstand_patches) > 0:
            for nightstand_patch in nightstand_patches:
                if broccoli_patch.horizontal_center > nightstand_patch.horizontal_center:
                    return ""on""
    return ""table"""
17465089,Is the field green and small?,"    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Is the field green and small?"")
    field_patch = field_patches[0]
    is_green = field_patch.verify_property(""field"", ""green"")
    is_small = field_patch.verify_property(""field"", ""small"")
    return bool_to_yesno(is_green and is_small)"
16150157,What is on the wall?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?,"    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    for van_patch in van_patches:
        suv_patches = image_patch.find(""SUV"")
        for suv_patch in suv_patches:
            if suv_patch.horizontal_center > van_patch.horizontal_center:
                return ""left""
    return ""right"""
15101358,Is the girl to the left of the boy?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one girl and one boy patch
    if len(girl_patches) == 0 or len(boy_patches) == 0:
        # If no girl or boy is found, query the image directly
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    for girl_patch in girl_patches:
        for boy_patch in boy_patches:
            if girl_patch.horizontal_center < boy_patch.horizontal_center:
                return ""yes""
    return ""no"""
12785181,What animals are in the grass?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in the grass?"")"
348093,Are there both an apple and a bag in the picture?,"    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)"
314181,Which sign is shown?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which sign is shown?"")"
16275314,"On which side is the woman, the right or the left?","    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
19535592,Who runs on the sand?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who runs on the sand?"")"
156886,Is there a giraffe near the bush?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    for giraffe_patch in giraffe_patches:
        bush_patches = image_patch.find(""bush"")
        for bush_patch in bush_patches:
            if giraffe_patch.horizontal_center > bush_patch.horizontal_center - 50 and giraffe_patch.horizontal_center < bush_patch.horizontal_center + 50:
                return ""yes""
    return ""no"""
1756642,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    for shirt_patch in shirt_patches:
        wearer_patches = image_patch.find(""person"")
        for wearer_patch in wearer_patches:
            if shirt_patch.horizontal_center > wearer_patch.horizontal_center:
                return wearer_patch.simple_query(""Who wears the shirt?"")
    return shirt_patches[0].simple_query(""Who wears the shirt?"") # crop would include the shirt so keep it in the query"
1972390,What type of animal is standing in the field?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal is standing in the field?"")"
14579439,Is the stuffed animal on the right?,"    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    for stuffed_animal_patch in stuffed_animal_patches:
        if stuffed_animal_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6645395,Is the gray building behind the passengers that are boarding the airplane?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")"
19610200,Is the fence metallic?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    for fence_patch in fence_patches:
        return bool_to_yesno(fence_patch.verify_property(""fence"", ""metallic""))"
5299471,What does the girl that to the left of the trashcan carry?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    for girl_patch in girl_patches:
        trashcan_patches = image_patch.find(""trashcan"")
        for trashcan_patch in trashcan_patches:
            if girl_patch.horizontal_center < trashcan_patch.horizontal_center:
                return girl_patch.simple_query(""What does the girl carry?"")
    return ""unknown"""
7548203,Which kind of vegetable is on the pizza?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")"
91027737,On which side is the pan?,"    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?,"    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    for black_car_patch in black_car_patches:
        if black_car_patch.vertical_center > image_patch.vertical_center / 2:
            return ""yes""
    return ""no"""
6144031,Who is in the living room?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?,"    image_patch = ImagePatch(image)
    sink_patches = image_patch.find(""sink"")
    # Question assumes only one sink patch
    if len(sink_patches) == 0:
        # If no sink is found, query the image directly
        return image_patch.simple_query(""What is the sink made of?"")
    return sink_patches[0].simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?,"    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?,"    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return bool_to_yesno(is_bicycle or is_biker)"
844747,Are there both a pillow and a kitten in the image?,"    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)"
1104500,What kind of food is in the box?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?,"    image_patch = ImagePatch(image)
    kid_patches = image_patch.find(""kid"")
    # Question assumes only one kid patch
    if len(kid_patches) == 0:
        # If no kid is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    for kid_patch in kid_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < kid_patch.horizontal_center:
                return food_patch.simple_query(""What is the food that is to the left of the kid called?"")
    return image_patch.simple_query(""What is the food that is to the left of the kid called?"") # if no food is found to the left of the kid, query the image directly"
11820726,"What device is the desk in front of, a television or a printer?","    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")"
18114588,Do you see a helmet there?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""helmet""))"
11950874,What animal is standing on the ground?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal standing on the ground?"") == ""yes"":
            return animal_patch.simple_query(""What animal is standing on the ground?"")
    # If no animal is standing on the ground, query the image directly
    return image_patch.simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?,"    image_patch = ImagePatch(image)
    small_car_patches = image_patch.find(""small car"")
    # Question assumes only one small car patch
    if len(small_car_patches) == 0:
        # If no small car is found, query the image directly
        return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")
    for small_car_patch in small_car_patches:
        fork_patches = image_patch.find(""fork"")
        for fork_patch in fork_patches:
            if fork_patch.horizontal_center > small_car_patch.horizontal_center:
                return ""no""
    return ""yes"""
16184942,Does that grass look brown and short?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does that grass look brown and short?"")"
6312238,Is the hydrant to the left of the car?,"    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    # Question assumes only one hydrant patch
    if len(hydrant_patches) == 0:
        # If no hydrant is found, query the image directly
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    for hydrant_patch in hydrant_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if car_patch.horizontal_center < hydrant_patch.horizontal_center:
                return ""yes""
    return ""no"""
16646227,On which side of the picture is the gray car?,"    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    gray_car_patch = gray_car_patches[0]
    if gray_car_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?,"    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    for ball_patch in ball_patches:
        sneakers_patches = image_patch.find(""sneakers"")
        for sneakers_patch in sneakers_patches:
            if ball_patch.horizontal_center > sneakers_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
3443704,What is the woman wearing?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    for woman_patch in woman_patches:
        return woman_patch.simple_query(""What is the woman wearing?"")"
19313572,What is the color of the tent to the left of the vehicles?,"    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    for tent_patch in tent_patches:
        vehicle_patches = image_patch.find(""vehicles"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < tent_patch.horizontal_center:
                return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    return ""no"" # if no vehicle is found, return ""no"""
10885675,What is the toilet seat made of?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the toilet seat made of?"")
    toilet_patch = toilet_patches[0]
    return toilet_patch.simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    for blanket_patch in blanket_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > blanket_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is resting on the blanket?"")
    return image_patch.simple_query(""What animal is resting on the blanket?"")"
14561612,What color do you think the bikini that the woman is wearing is?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    woman_patch = woman_patches[0]
    bikini_patches = image_patch.find(""bikini"")
    # Question assumes only one bikini patch
    if len(bikini_patches) == 0:
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    for bikini_patch in bikini_patches:
        return bikini_patch.best_text_match([""red"", ""orange"", ""yellow"", ""green"", ""blue"", ""purple"", ""pink"", ""white"", ""black""])"
6587755,Are both the room and the bowl the same color?,"    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one room and one bowl patch
    if len(room_patches) == 0 or len(bowl_patches) == 0:
        # If no room or bowl is found, query the image directly
        return image_patch.simple_query(""Are both the room and the bowl the same color?"")
    room_patch = room_patches[0]
    bowl_patch = bowl_patches[0]
    return bool_to_yesno(room_patch.verify_property(""room"", ""color"") == bowl_patch.verify_property(""bowl"", ""color""))"
4479543,Is the barn white or brown?,"    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    # Question assumes only one barn patch
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    barn_patch = barn_patches[0]
    return barn_patch.best_text_match([""white"", ""brown""])"
972522,Does the box look white or brown?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    box_patch = box_patches[0]
    return box_patch.simple_query(""What is the color of the box?"")"
3948528,What is the bowl made of?,"    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What is the bowl made of?"")
    return bowl_patches[0].simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?,"    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    for bench_patch in bench_patches:
        rock_patches = image_patch.find(""rock"")
        for rock_patch in rock_patches:
            if bench_patch.horizontal_center < rock_patch.horizontal_center:
                return bench_patch.simple_query(""What is the color of the bench?"")
    return bench_patch.simple_query(""What is the color of the bench?"") # crop would include the bench so keep it in the query"
866459,On which side is the couch?,"    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    for couch_patch in couch_patches:
        if couch_patch.horizontal_center < image_patch.width / 2:
            return ""left""
        else:
            return ""right"""
8614812,Is the person that is playing wearing shorts?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    for person_patch in person_patches:
        playing_patches = image_patch.find(""playing"")
        for playing_patch in playing_patches:
            if playing_patch.horizontal_center > person_patch.horizontal_center:
                return bool_to_yesno(person_patch.verify_property(""person"", ""wearing shorts""))"
167438,What is wearing the ground?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    for furniture_patch in furniture_patches:
        is_wooden = furniture_patch.verify_property(""furniture"", ""wooden"")
        if is_wooden:
            return furniture_patch.simple_query(""Which kind of furniture is wooden?"")
    return ""none"""
1042377,Who is standing beside the person that is wearing a dress?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a dress?"") == ""yes"":
            for other_person_patch in person_patches:
                if other_person_patch != person_patch:
                    if other_person_patch.horizontal_center > person_patch.horizontal_center:
                        return other_person_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    return ""no one"""
16889676,Is it an indoors or outdoors scene?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?,"    image_patch = ImagePatch(image)
    ski_patches = image_patch.find(""skis"")
    # Question assumes only one ski patch
    if len(ski_patches) == 0:
        # If no ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    for ski_patch in ski_patches:
        return ski_patch.simple_query(""How fat are the long skis?"") # crop would include the skis so keep it in the query"
2211743,Is the sky clear or overcast?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?,"    image_patch = ImagePatch(image)
    bottles_patches = image_patch.find(""bottles"")
    pencils_patches = image_patch.find(""pencils"")
    # Question assumes only one bottle and one pencil patch
    if len(bottles_patches) == 0 or len(pencils_patches) == 0:
        # If no bottle or pencil is found, query the image directly
        return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
    for bottle_patch in bottles_patches:
        for pencil_patch in pencils_patches:
            if bottle_patch.horizontal_center < pencil_patch.horizontal_center:
                return ""yes""
    return ""no"""
15478302,Is there any dark door or window in the image?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    window_patches = image_patch.find(""window"")
    for door_patch in door_patches:
        if door_patch.simple_query(""Is the door dark?"") == ""yes"":
            return ""yes""
    for window_patch in window_patches:
        if window_patch.simple_query(""Is the window dark?"") == ""yes"":
            return ""yes""
    return ""no"""
18414234,Do you see either a knife or a chair in the picture?,"    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)"
19779815,Is the book red or yellow?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    book_patch = book_patches[0]
    book_color = book_patch.simple_query(""What is the color of the book?"")
    if book_color == ""red"":
        return ""red""
    elif book_color == ""yellow"":
        return ""yellow""
    else:
        return book_color"
7257283,Are there men to the left of the picture?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there men to the left of the picture?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6621625,On which side of the picture is the bench?,"    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    for bench_patch in bench_patches:
        if bench_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
19311589,Are there both fences and horses in this picture?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    for person_patch in person_patches:
        container_patches = image_patch.find(""container"")
        for container_patch in container_patches:
            if container_patch.horizontal_center < person_patch.horizontal_center:
                device_patches = image_patch.find(""device"")
                for device_patch in device_patches:
                    if device_patch.horizontal_center > container_patch.horizontal_center:
                        return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    return ""no"""
171031333,Do you see blankets in the picture that are not black?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Do you see blankets in the picture that are not black?"")
    for blanket_patch in blanket_patches:
        if blanket_patch.simple_query(""What color is the blanket?"") != ""black"":
            return ""yes""
    return ""no"""
16695341,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?,"    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)"
5111363,Are there chairs or tables that are not blue?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    table_patches = image_patch.find(""table"")
    not_blue_chair = False
    not_blue_table = False
    for chair_patch in chair_patches:
        if not chair_patch.verify_property(""chair"", ""blue""):
            not_blue_chair = True
    for table_patch in table_patches:
        if not table_patch.verify_property(""table"", ""blue""):
            not_blue_table = True
    return bool_to_yesno(not_blue_chair or not_blue_table)"
9230971,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    for hair_patch in hair_patches:
        is_short = hair_patch.simple_query(""Is the hair short?"") == ""yes""
        is_white = hair_patch.simple_query(""What is the color of the hair?"") == ""white""
        return bool_to_yesno(is_short and is_white)"
4822200,Do you see any lettuce on the food with the meat?,"    image_patch = ImagePatch(image)
    food_with_meat_patches = image_patch.find(""food with the meat"")
    # Question assumes only one food with meat patch
    if len(food_with_meat_patches) == 0:
        # If no food with meat is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    for food_with_meat_patch in food_with_meat_patches:
        lettuce_patches = image_patch.find(""lettuce"")
        for lettuce_patch in lettuce_patches:
            if lettuce_patch.horizontal_center > food_with_meat_patch.horizontal_center:
                return ""yes""
    return ""no"""
3726666,What device is to the left of the curtain that is to the left of the glasses?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")"
9954849,What kind of furniture is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?,"    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_bus = image_patch.exists(""bus"")
    is_red_train = False
    is_red_bus = False
    if is_train:
        train_patches = image_patch.find(""train"")
        for train_patch in train_patches:
            if train_patch.verify_property(""train"", ""red""):
                is_red_train = True
    if is_bus:
        bus_patches = image_patch.find(""bus"")
        for bus_patch in bus_patches:
            if bus_patch.verify_property(""bus"", ""red""):
                is_red_bus = True
    return bool_to_yesno(is_red_train or is_red_bus)"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")"
623393,"What type of clothing is tan, the hat or the vest?","    image_patch = ImagePatch(image)
    hat_patches = image_patch.find(""hat"")
    vest_patches = image_patch.find(""vest"")
    # Question assumes only one hat and one vest patch
    if len(hat_patches) == 0 or len(vest_patches) == 0:
        # If no hat or vest is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    for hat_patch in hat_patches:
        if hat_patch.simple_query(""Is the hat tan?"") == ""yes"":
            return ""the hat""
    for vest_patch in vest_patches:
        if vest_patch.simple_query(""Is the vest tan?"") == ""yes"":
            return ""the vest"""
6436448,Is the color of the skirt the same as the scarf?,"    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    for skirt_patch in skirt_patches:
        scarf_patches = image_patch.find(""scarf"")
        # Question assumes only one scarf patch
        if len(scarf_patches) == 0:
            return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
        for scarf_patch in scarf_patches:
            if skirt_patch.simple_query(""What is the color of the skirt?"") == scarf_patch.simple_query(""What is the color of the scarf?""):
                return ""yes""
    return ""no"""
3303313,Is the blanket under a cat?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is the blanket under a cat?"")
    for blanket_patch in blanket_patches:
        cat_patches = image_patch.find(""cat"")
        for cat_patch in cat_patches:
            if cat_patch.horizontal_center > blanket_patch.horizontal_center:
                return ""yes""
    return ""no"""
443663,What color is the picture?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes one umbrella patch
    if len(umbrella_patches) == 0:
        return ""no""
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1885406,What is the toy on the bed?,"    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What is the toy on the bed?"")
    for toy_patch in toy_patches:
        if toy_patch.vertical_center < image_patch.vertical_center:  # assuming bed is horizontal
            return toy_patch.simple_query(""What is the toy on the bed?"")
    return toy_patches[0].simple_query(""What is the toy on the bed?"")"
5557965,On which side is the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    for banana_patch in banana_patches:
        if banana_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
3196355,What does the batter hold?,"    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    return batter_patches[0].simple_query(""What does the batter hold?"")"
14470748,Who wears a jacket?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for jacket_patch in jacket_patches:
        wearer_patches = image_patch.find(""wearer"")
        for wearer_patch in wearer_patches:
            return wearer_patch.simple_query(""What is the wearer wearing a jacket?"")"
16537736,Are there any houses behind the shrubs?,"    image_patch = ImagePatch(image)
    shrub_patches = image_patch.find(""shrub"")
    # Question assumes only one shrub patch
    if len(shrub_patches) == 0:
        # If no shrub is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    for shrub_patch in shrub_patches:
        house_patches = image_patch.find(""house"")
        for house_patch in house_patches:
            if house_patch.horizontal_center > shrub_patch.horizontal_center:
                return ""yes""
    return ""no"""
1129541,What piece of furniture is made of wood?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        material = furniture_patch.simple_query(""What material is the furniture made of?"")
        if material == ""wood"":
            return furniture_patch.simple_query(""What piece of furniture is made of wood?"")
    return image_patch.simple_query(""What piece of furniture is made of wood?"") # if no furniture is found, query the image directly"
15270011,Is the racket to the right or to the left of the man that is wearing a hat?,"    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    for racket_patch in racket_patches:
        man_patches = image_patch.find(""man wearing a hat"")
        # Question assumes only one man patch
        if len(man_patches) == 0:
            # If no man is found, query the image directly
            return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
        man_patch = man_patches[0]
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
12416703,Where is that cat?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Where is that cat?"")
    for cat_patch in cat_patches:
        if cat_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        elif cat_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
        else:
            return ""center""
    return ""not found"""
15603088,The animal to the right of the envelope is lying on what?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    for animal_patch in animal_patches:
        envelope_patches = image_patch.find(""envelope"")
        for envelope_patch in envelope_patches:
            if animal_patch.horizontal_center > envelope_patch.horizontal_center:
                return animal_patch.simple_query(""What is the animal lying on?"") # crop would include the object so keep it in the query
    # If no animal is found to the right of the envelope, query the image directly
    return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")"
5329077,Is the man on a bench?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on a bench?"")
    man_patch = man_patches[0]
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        return ""no""
    for bench_patch in bench_patches:
        if man_patch.horizontal_center > bench_patch.horizontal_center:
            return ""yes""
    return ""no"""
1945705,What kind of device is to the left of the device that looks silver and gray?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")"
17520003,What vehicle is to the right of the pine tree?,"    image_patch = ImagePatch(image)
    pine_tree_patches = image_patch.find(""pine tree"")
    # Question assumes only one pine tree patch
    if len(pine_tree_patches) == 0:
        # If no pine tree is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    for pine_tree_patch in pine_tree_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > pine_tree_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    return ""none"""
1259983,Who is wearing pants?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    for person_patch in person_patches:
        is_wearing_pants = (person_patch.simple_query(""Is the person wearing pants?"") == ""yes"")
        if is_wearing_pants:
            return person_patch.simple_query(""Who is wearing pants?"")
    # If no person is wearing pants, query the image directly
    return image_patch.simple_query(""Who is wearing pants?"")"
6413378,Is there a black keyboard or camera?,"    image_patch = ImagePatch(image)
    is_black_keyboard = image_patch.exists(""black keyboard"")
    is_black_camera = image_patch.exists(""black camera"")
    return bool_to_yesno(is_black_keyboard or is_black_camera)"
947305,Is the sunny water blue and high?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sunny water blue and high?"")"
4367817,What type of animal in this scene is brown?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""brown""):
            return animal_patch.simple_query(""What type of animal in this scene is brown?"")
    return ""none"""
15485572,What is the vegetable on the hot dog with the cheese?,"    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog with the cheese"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    for hot_dog_patch in hot_dog_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center > hot_dog_patch.horizontal_center:
                return vegetable_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    return ""no vegetable"""
12661142,What is the appliance in the kitchen called?,"    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    return appliance_patches[0].simple_query(""What is the appliance in the kitchen called?"")"
41012743,The arrow is on what?,"    image_patch = ImagePatch(image)
    arrow_patches = image_patch.find(""arrow"")
    # Question assumes only one arrow patch
    if len(arrow_patches) == 0:
        # If no arrow is found, query the image directly
        return image_patch.simple_query(""The arrow is on what?"")
    return arrow_patches[0].simple_query(""The arrow is on what?"")"
4777414,What color is the bicycle in the bottom of the photo?,"    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    # Question assumes only one bicycle patch
    if len(bicycle_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    for bicycle_patch in bicycle_patches:
        if bicycle_patch.vertical_center < image_patch.vertical_center:
            return bicycle_patch.simple_query(""What color is the bicycle?"")
    return ""not found"" # if no bicycle is found at the bottom of the photo"
1185988,What is the device on top of the table that is to the right of the trashcan?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")"
13582968,Was granite used to make that floor?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was granite used to make that floor?"")"
6235273,Are there women in the photo?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""woman""))"
5377974,What is the girl playing with?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    for girl_patch in girl_patches:
        return girl_patch.simple_query(""What is the girl playing with?"")"
51037065,On which side of the image is the fridge?,"    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    for fridge_patch in fridge_patches:
        if fridge_patch.horizontal_center < image_patch.width / 2:
            return ""left""
        else:
            return ""right"""
5299477,Which kind of bag does the girl carry?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    for girl_patch in girl_patches:
        bag_patches = image_patch.find(""bag"")
        for bag_patch in bag_patches:
            if bag_patch.horizontal_center > girl_patch.horizontal_center:
                return bag_patch.simple_query(""What kind of bag is this?"")
    return girl_patch.simple_query(""Which kind of bag does the girl carry?"")"
15135617,Is the white dog on a bench?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""white dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog on a bench?"")
    for dog_patch in dog_patches:
        is_on_bench = dog_patch.verify_property(""white dog"", ""on a bench"")
        return bool_to_yesno(is_on_bench)"
1111583,Is the male person to the right of a person?,"    image_patch = ImagePatch(image)
    male_patches = image_patch.find(""male person"")
    # Question assumes only one male person patch
    if len(male_patches) == 0:
        # If no male person is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_patch in male_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > male_patch.horizontal_center:
                return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?,"    image_patch = ImagePatch(image)
    has_window = image_patch.exists(""window"")
    has_door = image_patch.exists(""door"")
    return bool_to_yesno(has_window and has_door)"
15610844,What kind of place is shown?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")"
11869032,Is the banana below a bird?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Is the banana below a bird?"")
    for banana_patch in banana_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if bird_patch.vertical_center < banana_patch.vertical_center:
                return ""yes""
    return ""no"""
9878360,What color is the vehicle to the left of the fence?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    for vehicle_patch in vehicle_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What color is the vehicle?"")
    return ""no vehicle found"""
481765,Are there either any buses or trains in the image?,"    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    for man_patch in man_patches:
        traffic_cone_patches = image_patch.find(""traffic cone"")
        for traffic_cone_patch in traffic_cone_patches:
            if man_patch.horizontal_center < traffic_cone_patch.horizontal_center:
                return man_patch.verify_property(""man"", ""cap"")
    return ""no"""
11981238,What is common to the blazer and the suit?,"    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one blazer and one suit patch
    if len(blazer_patches) == 0 or len(suit_patches) == 0:
        # If no blazer or suit is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    blazer_patch = blazer_patches[0]
    suit_patch = suit_patches[0]
    common_properties = blazer_patch.verify_property(""blazer"", ""property"") & suit_patch.verify_property(""suit"", ""property"")
    return blazer_patch.simple_query(""What is common to the blazer and the suit?"") # crop would include the common property so keep it in the query"
16245,Is the shirt white or green?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    shirt_patch = shirt_patches[0]
    shirt_color = shirt_patch.simple_query(""What is the color of the shirt?"")
    return shirt_color"
2595103,"In which part of the image are the cars, the bottom or the top?","    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?","    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    for banana_patch in banana_patches:
        if banana_patch.horizontal_center < image_patch.width / 2:  # on the table
            right_of_banana_patches = image_patch.find(""fruit"")
            for fruit_patch in right_of_banana_patches:
                if fruit_patch.horizontal_center > banana_patch.horizontal_center:
                    return ""yes""
    return ""no"""
6376614,What color is the car in the middle?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    for car_patch in car_patches:
        if car_patch.horizontal_center == image_patch.horizontal_center:
            return car_patch.simple_query(""What color is the car?"")
    # If no car is in the middle, query the image directly
    return image_patch.simple_query(""What color is the car in the middle?"")"
712063,What's the lamp made of?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What's the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    for pillow_patch in pillow_patches:
        right_patches = image_patch.find(""furniture"")
        for right_patch in right_patches:
            if right_patch.horizontal_center > pillow_patch.horizontal_center:
                return right_patch.simple_query(""What kind of furniture is to the right of the pillow?"")
    return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")"
9647343,What type of material is the patio made of?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the clouds in the sky?"")"
9843309,Do the flowers look orange?,"    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flowers"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    for flower_patch in flower_patches:
        return bool_to_yesno(flower_patch.verify_property(""flowers"", ""orange""))"
618996,Is there a chair or a bed in this image?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    for truck_patch in truck_patches:
        umbrella_patches = image_patch.find(""umbrella"")
        for umbrella_patch in umbrella_patches:
            if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
                return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    for pants_patch in pants_patches:
        if pants_patch.horizontal_center > man_patch.horizontal_center:
            return pants_patch.simple_query(""What color are the pants the man is wearing?"")
    return pants_patches[0].simple_query(""What color are the pants the man is wearing?"")"
551601,Are there any pillows or chairs in the image?,"    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    for bag_patch in bag_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if bag_patch.horizontal_center == person_patch.horizontal_center:
                woman_patches = image_patch.find(""woman"")
                for woman_patch in woman_patches:
                    if woman_patch.horizontal_center < person_patch.horizontal_center:
                        return ""yes""
    return ""no"""
5925408,What is the bike in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?,"    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)"
13778498,What type of vehicle is behind the green tree?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"")"
41019603,What is the child standing on?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child standing on?"")
    for child_patch in child_patches:
        return child_patch.simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one man and one woman patch
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for shirt_patch in shirt_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if shirt_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is wearing the shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?,"    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    for kite_patch in kite_patches:
        if kite_patch.simple_query(""Is the kite triangular?"") == ""yes"":
            return kite_patch.simple_query(""What color is the kite that looks triangular?"")
    # If no kite is triangular, query the image directly
    return image_patch.simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?,"    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    for building_patch in building_patches:
        if building_patch.horizontal_center < image_patch.horizontal_center:
            return building_patch.simple_query(""What is the color of the building?"")
    return ""no"" # building is not behind the tree"
5749240,Are the glove and the undershirt both black?,"    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    for glove_patch in glove_patches:
        undershirt_patches = image_patch.find(""undershirt"")
        # Question assumes only one undershirt patch
        if len(undershirt_patches) == 0:
            return image_patch.simple_query(""Are the glove and the undershirt both black?"")
        for undershirt_patch in undershirt_patches:
            glove_color = glove_patch.simple_query(""What is the color of the glove?"")
            undershirt_color = undershirt_patch.simple_query(""What is the color of the undershirt?"")
            return bool_to_yesno(glove_color == ""black"" and undershirt_color == ""black"")"
18573157,Is the juice in a cup?,"    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    # Question assumes only one juice patch
    if len(juice_patches) == 0:
        # If no juice is found, query the image directly
        return image_patch.simple_query(""Is the juice in a cup?"")
    for juice_patch in juice_patches:
        container_patches = image_patch.find(""cup"")
        for container_patch in container_patches:
            if container_patch.horizontal_center > juice_patch.horizontal_center:
                return ""yes""
    return ""no"""
3445929,Is the brown horse on the right side of the photo?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""brown horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    for horse_patch in horse_patches:
        if horse_patch.horizontal_center > image_patch.width / 2:
            return ""yes""
    return ""no"""
16541709,Where is the grass?,"    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    for grass_patch in grass_patches:
        if grass_patch.vertical_center < image_patch.vertical_center:
            return ""bottom""
        else:
            return ""side"""
15764335,Are there any dogs on the tan sand?,"    image_patch = ImagePatch(image)
    is_dog = image_patch.exists(""dog"")
    return bool_to_yesno(is_dog)"
1478089,Are the door and the garage door made of the same material?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    garage_door_patches = image_patch.find(""garage door"")
    # Question assumes only one door and one garage door patch
    if len(door_patches) == 0 or len(garage_door_patches) == 0:
        # If no door or garage door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_patch = door_patches[0]
    garage_door_patch = garage_door_patches[0]
    return bool_to_yesno(door_patch.verify_property(""door"", ""material"") == garage_door_patch.verify_property(""garage door"", ""material""))"
1250685,Was this picture taken in a bathroom or at a dining room?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"")"
10436844,Is the zebra's nose soft and brown?,"    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    zebra_patch = zebra_patches[0]
    nose_patches = zebra_patch.find(""nose"")
    # Question assumes only one nose patch
    if len(nose_patches) == 0:
        return ""no""
    for nose_patch in nose_patches:
        is_soft = nose_patch.verify_property(""nose"", ""soft"")
        is_brown = nose_patch.verify_property(""nose"", ""brown"")
        return bool_to_yesno(is_soft and is_brown)"
10683765,Does the shirt have blue color?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    shirt_patch = shirt_patches[0]
    return bool_to_yesno(shirt_patch.verify_property(""shirt"", ""blue""))"
1593352,Do the draperies look white and striped?,"    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""drapery"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return image_patch.simple_query(""Do the drapery look white and striped?"")
    for drapery_patch in drapery_patches:
        is_white = drapery_patch.simple_query(""What is the color of the drapery?"")
        is_striped = drapery_patch.simple_query(""Is the drapery striped?"")
        return bool_to_yesno(is_white == ""white"" and is_striped == ""yes"")"
16553304,Are the trunks both long and wide?,"    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    for trunk_patch in trunk_patches:
        is_long = trunk_patch.verify_property(""trunk"", ""long"")
        is_wide = trunk_patch.verify_property(""trunk"", ""wide"")
        return bool_to_yesno(is_long and is_wide)"
7165102,Is the car on the left of the photo?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the car on the left of the photo?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.width / 2:
        return ""yes""
    else:
        return ""no"""
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?,"    image_patch = ImagePatch(image)
    yellow_green_banana_patches = image_patch.find(""banana that looks yellow and green"")
    # Question assumes only one banana patch
    if len(yellow_green_banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for yellow_green_banana_patch in yellow_green_banana_patches:
        is_short = yellow_green_banana_patch.simple_query(""Is the banana short?"")
        return bool_to_yesno(is_short)"
19279872,What is the man to the right of the helmet wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one man and one helmet patch
    if len(man_patches) == 0 or len(helmet_patches) == 0:
        # If no man or helmet is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    for man_patch in man_patches:
        for helmet_patch in helmet_patches:
            if man_patch.horizontal_center > helmet_patch.horizontal_center:
                return man_patch.simple_query(""What is the man wearing?"")
    return ""unknown"""
4285513,What is the color of the floor?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor?"")"
3974266,Do the trousers look tan?,"    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return trousers_patches[0].simple_query(""Do the trousers look tan?"")"
11595009,What are the devices to the right of the device that is to the right of the remote control?,"    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    remote_control_patch = remote_control_patches[0]
    right_of_remote_control_patches = image_patch.find(""device"")
    for device_patch in right_of_remote_control_patches:
        if device_patch.horizontal_center > remote_control_patch.horizontal_center:
            right_of_device_patches = image_patch.find(""device"")
            for device_patch2 in right_of_device_patches:
                if device_patch2.horizontal_center > device_patch.horizontal_center:
                    return device_patch2.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    return ""no"""
6183000,Are there nightstands or beds?,"    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_nightstand or is_bed)"
14143982,Is it an outdoors scene?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""scene"", ""outdoors""))"
6123160,Are the speakers to the left of a Wii controller?,"    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    # Question assumes only one speaker patch
    if len(speaker_patches) == 0:
        # If no speaker is found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    for speaker_patch in speaker_patches:
        wii_controller_patches = image_patch.find(""Wii controller"")
        for wii_controller_patch in wii_controller_patches:
            if wii_controller_patch.horizontal_center < speaker_patch.horizontal_center:
                return ""yes""
    return ""no"""
3681634,Is the plastic fork in the top or in the bottom part of the photo?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""plastic fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    if fork_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
13629530,What is the vehicle on the street?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle on the street?"")
    return vehicle_patches[0].simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?,"    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return image_patch.simple_query(""What color is the hat the man is in?"")
    for hat_patch in hat_patches:
        return hat_patch.simple_query(""What color is the hat the man is in?"")"
1849976,What vegetables are to the left of the spoon?,"    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    for spoon_patch in spoon_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < spoon_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetables are to the left of the spoon?"")
    return ""none"""
14827816,Is the statue made of bronze or stone?,"    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    for statue_patch in statue_patches:
        material = statue_patch.simple_query(""What is the statue made of?"")
        if material == ""bronze"":
            return ""bronze""
        elif material == ""stone"":
            return ""stone""
    return ""unknown"""
857204,What's the woman wearing?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""What's the woman wearing?"")"
2201105,Is the ball pink?,"    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    for ball_patch in ball_patches:
        return ball_patch.simple_query(""Is the ball pink?"")"
14616023,What piece of furniture are the cords in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?,"    image_patch = ImagePatch(image)
    has_doors = image_patch.exists(""doors"")
    has_windows = image_patch.exists(""windows"")
    return bool_to_yesno(has_doors and has_windows)"
8249677,On which side of the image is the black car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""black car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.width / 2:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the striped animal called?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""striped""):
            return animal_patch.simple_query(""What is the striped animal called?"")
    return image_patch.simple_query(""What is the striped animal called?"") # if no striped animal is found, query the image directly"
1479068,Is it outdoors?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))"
16155046,Is the dry grass below a zebra?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the dry grass below a zebra?"")"
16515071,What is the person in the water wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person in the water?"") == ""yes"":
            return person_patch.simple_query(""What is the person in the water wearing?"")
    # If no person is in the water, query the image directly
    return image_patch.simple_query(""What is the person in the water wearing?"")"
161015042,Who is wearing the goggles?,"    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Who is wearing the goggles?"")
    for goggles_patch in goggles_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if goggles_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is wearing the goggles?"")
    return ""no one"""
19149868,What is pulled by the lady?,"    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""What is pulled by the lady?"")
    for lady_patch in lady_patches:
        pulled_patches = image_patch.find(""pulled"")
        for pulled_patch in pulled_patches:
            return pulled_patch.simple_query(""What is pulled by the lady?"") # crop would include the pulling so keep it in the query"
5199994,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What's the man wearing?"")"
19184475,Are the man glasses on the left side of the image?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
7149602,Is the shirt orange or blue?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    shirt_patch = shirt_patches[0]
    shirt_color = shirt_patch.simple_query(""What is the color of the shirt?"")
    if shirt_color == ""orange"":
        return ""orange""
    elif shirt_color == ""blue"":
        return ""blue""
    else:
        return shirt_color"
19479555,What is the person to the right of the benches holding?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    for person_patch in person_patches:
        benches_patches = image_patch.find(""benches"")
        for benches_patch in benches_patches:
            if benches_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the benches holding?"")
    return ""nothing"""
19273393,Are there both a door and a window in this photo?,"    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
6481656,What is the man doing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"")"
13127703,What kind of drink is to the left of the bottle the woman is pouring?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    for bottle_patch in bottle_patches:
        if bottle_patch.horizontal_center < image_patch.horizontal_center:
            return bottle_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    return ""none"""
2378018,What is the toilet in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the toilet in front of?"")"
8430841,Is the frisbee to the left of the guy?,"    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    for frisbee_patch in frisbee_patches:
        guy_patches = image_patch.find(""guy"")
        for guy_patch in guy_patches:
            if frisbee_patch.horizontal_center < guy_patch.horizontal_center:
                return ""yes""
    return ""no"""
18616818,The man is watching who?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is watching who?"")
    man_patch = man_patches[0]
    watching_patches = image_patch.find(""watching"")
    # Question assumes only one watching patch
    if len(watching_patches) == 0:
        return image_patch.simple_query(""The man is watching who?"")
    for watching_patch in watching_patches:
        if watching_patch.horizontal_center > man_patch.horizontal_center:
            return watching_patch.simple_query(""The man is watching who?"")
    return ""unknown"""
179526,Is the white dog behind a girl?,"    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog behind a girl?"")
    for white_dog_patch in white_dog_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if white_dog_patch.horizontal_center < girl_patch.horizontal_center:
                return ""yes""
    return ""no"""
21018827,Is the river murky and calm?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the river murky and calm?"")"
3697449,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"")
    # If no person is wearing a shirt, query the image directly
    return image_patch.simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?,"    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one car and one sign patch
    if len(car_patches) == 0 or len(sign_patches) == 0:
        # If no car or sign is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patch = sign_patches[0]
    common_property = car_patch.simple_query(""What do you have in common with the sign?"")
    return common_property"
11764476,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    for plate_patch in plate_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if plate_patch.horizontal_center > furniture_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is the plate on?"")
    return plate_patches[0].simple_query(""On what kind of furniture is the plate?"")"
61022361,What is the painting that is to the left of the clock hanging on?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    for clock_patch in clock_patches:
        painting_patches = image_patch.find(""painting"")
        for painting_patch in painting_patches:
            if painting_patch.horizontal_center < clock_patch.horizontal_center:
                return painting_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    return ""no"""
1527392,"What color is the fence, tan or black?","    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    for fence_patch in fence_patches:
        color = fence_patch.simple_query(""What color is the fence?"")
        if color == ""tan"":
            return ""tan""
        elif color == ""black"":
            return ""black""
    return ""tan"" # default to tan if no black is found"
19229351,Do you see both bowls and carrots?,"    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)"
1297082,On which side is the silver fork?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    for fork_patch in fork_patches:
        if fork_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
16757832,Are there any blue helmets or napkins?,"    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.exists(""blue helmet"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_blue_helmet or is_napkin)"
839816,"In which part of the photo is the racket, the top or the bottom?","    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12385226,Is there a mirror in the bathroom?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""mirror""))"
18720852,Are there either blankets or tents in this picture?,"    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    woman_patch = woman_patches[0]
    cardboard_patches = image_patch.find(""cardboard box"")
    # Question assumes only one cardboard box patch
    if len(cardboard_patches) == 0:
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    for cardboard_patch in cardboard_patches:
        if cardboard_patch.horizontal_center > woman_patch.horizontal_center:
            return ""right""
    return ""left"""
19453453,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"")
    # If no person is wearing a shirt, query the image directly
    return image_patch.simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?,"    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    if house_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?,"    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flowers"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""What is in front of the flowers that look red?"")
    for flower_patch in flower_patches:
        if flower_patch.simple_query(""What is the color of the flowers?"") == ""red"":
            return flower_patch.simple_query(""What is in front of the flowers that look red?"")
    return image_patch.simple_query(""What is in front of the flowers that look red?"") # if no red flowers are found, query the image directly"
15710688,Is the shirt short sleeved or sleeveless?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    for shirt_patch in shirt_patches:
        if shirt_patch.simple_query(""Is the shirt short sleeved or sleeveless?"") == ""sleeveless"":
            return ""sleeveless""
        else:
            return ""shortsleeved"""
5533952,What are the white wires connected to?,"    image_patch = ImagePatch(image)
    white_wire_patches = image_patch.find(""white wire"")
    # Question assumes only one white wire patch
    if len(white_wire_patches) == 0:
        # If no white wire is found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    for white_wire_patch in white_wire_patches:
        connected_patches = image_patch.find(""connected"")
        for connected_patch in connected_patches:
            return connected_patch.simple_query(""What are the white wires connected to?"") # crop would include the connection so keep it in the query
    # If no connection is found, query the image directly
    return image_patch.simple_query(""What are the white wires connected to?"")"
11313555,"What type of furniture is that, a table or a nightstand?","    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture a table?"") == ""yes"":
            return ""table""
        elif furniture_patch.simple_query(""Is the furniture a nightstand?"") == ""yes"":
            return ""nightstand""
    return ""table"" # default to table if no nightstand is found"
10508893,What animals are in front of the trees?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What animals are in front of the trees?"")"
14501997,What is the gate made of?,"    image_patch = ImagePatch(image)
    gate_patches = image_patch.find(""gate"")
    # Question assumes only one gate patch
    if len(gate_patches) == 0:
        # If no gate is found, query the image directly
        return image_patch.simple_query(""What is the gate made of?"")
    gate_patch = gate_patches[0]
    return gate_patch.simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    for device_patch in device_patches:
        if device_patch.vertical_center > image_patch.vertical_center:
            return device_patch.simple_query(""What color is the device on top of the table?"")
    return ""not found"""
181032044,Are these closed drawers?,"    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    for drawer_patch in drawer_patches:
        return bool_to_yesno(drawer_patch.verify_property(""drawer"", ""closed""))"
383,What kind of furniture is made of wood?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        is_wood = furniture_patch.verify_property(""furniture"", ""wood"")
        if is_wood:
            return furniture_patch.simple_query(""What kind of furniture is made of wood?"")
    return ""none"""
101054962,What is the person by the bananas wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    for person_patch in person_patches:
        clothes_patches = image_patch.find(""clothes"")
        for clothes_patch in clothes_patches:
            if clothes_patch.horizontal_center > person_patch.horizontal_center:
                return clothes_patch.simple_query(""What is the person by the bananas wearing?"")
    return person_patches[0].simple_query(""What is the person by the bananas wearing?"")"
759165,What is the color of the tower in the middle of the picture?,"    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    # Question assumes only one tower patch
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    for tower_patch in tower_patches:
        horizontal_center = tower_patch.horizontal_center
        if horizontal_center < image_patch.horizontal_center:
            horizontal_center = image_patch.horizontal_center
        if horizontal_center > image_patch.horizontal_center:
            horizontal_center = image_patch.horizontal_center
        if tower_patch.horizontal_center == horizontal_center:
            return tower_patch.simple_query(""What is the color of the tower?"")
    return ""unknown"""
10775539,Is this giraffe tall and white?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is this giraffe tall and white?"")
    giraffe_patch = giraffe_patches[0]
    is_tall = giraffe_patch.verify_property(""giraffe"", ""tall"")
    is_white = giraffe_patch.verify_property(""giraffe"", ""white"")
    return bool_to_yesno(is_tall and is_white)"
19981804,On which side of the photo is the colorful screen?,"    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""colorful screen"")
    # Question assumes only one screen patch
    if len(screen_patches) == 0:
        # If no screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    for screen_patch in screen_patches:
        if screen_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
7903654,Is the tap on the left side or on the right?,"    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    tap_patch = tap_patches[0]
    if tap_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6206183,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    coat_patch = coat_patches[0]
    return coat_patch.simple_query(""Is the coat black or beige?"")"
13123207,Does the kite near the field look high and red?,"    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    for kite_patch in kite_patches:
        if kite_patch.horizontal_center > image_patch.left and kite_patch.horizontal_center < image_patch.right:
            if kite_patch.simple_query(""Is the kite high?"") == ""yes"" and kite_patch.simple_query(""Is the kite red?"") == ""yes"":
                return ""yes""
    return ""no"""
7740092,Are there any utensils in this picture?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""utensil""))"
8774975,What is around the guy?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?,"    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?,"    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    # Question assumes only one staircase patch
    if len(staircase_patches) == 0:
        # If no staircase is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    for staircase_patch in staircase_patches:
        sky_patches = image_patch.find(""sky"")
        for sky_patch in sky_patches:
            if staircase_patch.simple_query(""What is the color of the staircase?"") != sky_patch.simple_query(""What is the color of the sky?""):
                return ""yes""
    return ""no"""
1605874,What color are the containers that are on the right?,"    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center > image_patch.horizontal_center:
            return container_patch.simple_query(""What color is the container?"")
    return ""unknown"" # if no container is found on the right"
12495781,Are the people to the right or to the left of the cone that is orange?,"    image_patch = ImagePatch(image)
    cone_patches = image_patch.find(""cone"")
    # Question assumes only one cone patch
    if len(cone_patches) == 0:
        # If no cone is found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    for cone_patch in cone_patches:
        if cone_patch.simple_query(""Is the cone orange?"") == ""yes"":
            people_patches = image_patch.find(""people"")
            for people_patch in people_patches:
                if people_patch.horizontal_center > cone_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left"""
14165681,"What type of clothing is light, the sweater or the cap?","    image_patch = ImagePatch(image)
    sweater_patches = image_patch.find(""sweater"")
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one sweater and one cap patch
    if len(sweater_patches) == 0 or len(cap_patches) == 0:
        # If no sweater or cap is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    for sweater_patch in sweater_patches:
        for cap_patch in cap_patches:
            if sweater_patch.simple_query(""Is the sweater light?"") == ""yes"":
                return ""the sweater""
            elif cap_patch.simple_query(""Is the cap light?"") == ""yes"":
                return ""the cap""
    return ""the sweater"" # default to sweater if no cap is light"
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    for chair_patch in chair_patches:
        jeans_patches = image_patch.find(""jeans"")
        for jeans_patch in jeans_patches:
            if jeans_patch.horizontal_center > chair_patch.horizontal_center:
                return ""left""
    return ""right"""
5617223,"What color is the container to the left of the horse, green or silver?","    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one container and one horse patch
    if len(container_patches) == 0 or len(horse_patches) == 0:
        # If no container or horse is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    for container_patch in container_patches:
        for horse_patch in horse_patches:
            if container_patch.horizontal_center < horse_patch.horizontal_center:
                return container_patch.best_text_match([""green"", ""silver""])"
2428964,Is the water gray or teal?,"    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    water_patch = water_patches[0]
    return water_patch.best_text_match([""gray"", ""teal""])"
19620769,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    for lamp_patch in lamp_patches:
        if lamp_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
1325617,Does the brown animal look tiny?,"    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    # Question assumes only one brown animal patch
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    for brown_animal_patch in brown_animal_patches:
        return bool_to_yesno(brown_animal_patch.verify_property(""brown animal"", ""tiny""))"
5672532,Does that shirt look long sleeved?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    for shirt_patch in shirt_patches:
        return shirt_patch.simple_query(""Does that shirt look long sleeved?"")"
6146439,Does the box look green?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look green?"")
    box_patch = box_patches[0]
    return bool_to_yesno(box_patch.verify_property(""box"", ""green""))"
1910285,Is the white container on the left of the image?,"    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""white container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center < image_patch.width / 2:
            return ""yes""
    return ""no"""
13362134,Is that shower curtain to the left of a toilet?,"    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center < shower_curtain_patch.horizontal_center:
                return ""yes""
    return ""no"""
161060488,Is there any cabinet to the right of the stove?,"    image_patch = ImagePatch(image)
    stove_patches = image_patch.find(""stove"")
    # Question assumes only one stove patch
    if len(stove_patches) == 0:
        # If no stove is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for stove_patch in stove_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > stove_patch.horizontal_center:
                return ""yes""
    return ""no"""
111055042,Is the chair on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
151068,Which kind of clothing is white?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    for clothing_patch in clothing_patches:
        is_white = clothing_patch.verify_property(""clothing"", ""white"")
        if is_white:
            return clothing_patch.simple_query(""Which kind of clothing is white?"")
    return ""none"""
19387951,Is this place the forest or the garden?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"")"
1781695,What's on the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What's on the blanket?"")
    for blanket_patch in blanket_patches:
        return blanket_patch.simple_query(""What's on the blanket?"")"
17699779,Is she on a bed?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bed""))"
464441,"What piece of furniture is the blanket on, a bed or a sofa?","    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    for blanket_patch in blanket_patches:
        bed_patches = image_patch.find(""bed"")
        sofa_patches = image_patch.find(""sofa"")
        if len(bed_patches) > 0:
            return ""bed""
        elif len(sofa_patches) > 0:
            return ""sofa""
    return ""bed"" # default to bed if no sofa is found"
9505496,Are the wires above a man?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    man_patch = man_patches[0]
    wire_patches = image_patch.find(""wires"")
    # Question assumes only one wire patch
    if len(wire_patches) == 0:
        return ""no""
    for wire_patch in wire_patches:
        if wire_patch.vertical_center > man_patch.vertical_center:
            return ""yes""
    return ""no"""
4625512,What is the woman doing?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman doing?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""What is the woman doing?"")"
9441941,Is the woman's hair red or black?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    for woman_patch in woman_patches:
        hair_color = woman_patch.simple_query(""What is the woman's hair color?"")
        return hair_color"
2387432,What's on the table?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's on the table?"")"
10534717,What is the pillow on?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""What is the pillow on?"")
    return pillow_patches[0].simple_query(""What is the pillow on?"")"
19335685,"What fruits is the container behind of, apples or bananas?","    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")"
3127817,The goat is standing in what?,"    image_patch = ImagePatch(image)
    goat_patches = image_patch.find(""goat"")
    # Question assumes only one goat patch
    if len(goat_patches) == 0:
        # If no goat is found, query the image directly
        return image_patch.simple_query(""The goat is standing in what?"")
    goat_patch = goat_patches[0]
    return goat_patch.simple_query(""What is the goat standing in?"")"
1588567,Where does the man that to the right of the mirror sit?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    for man_patch in man_patches:
        mirror_patches = image_patch.find(""mirror"")
        for mirror_patch in mirror_patches:
            if mirror_patch.horizontal_center < man_patch.horizontal_center:
                return man_patch.simple_query(""Where does the man sit?"")
    return ""no"" # if no man is found to the right of the mirror"
7399543,What is the floor made of?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is the house behind of?"")"
1174904,Is the cobblestone sidewalk both large and gray?,"    image_patch = ImagePatch(image)
    cobblestone_patches = image_patch.find(""cobblestone"")
    # Question assumes only one cobblestone patch
    if len(cobblestone_patches) == 0:
        # If no cobblestone is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    for cobblestone_patch in cobblestone_patches:
        is_large = cobblestone_patch.simple_query(""Is the cobblestone large?"") == ""yes""
        is_gray = cobblestone_patch.simple_query(""Is the cobblestone gray?"") == ""yes""
        return bool_to_yesno(is_large and is_gray)"
13375231,What is the lettuce on?,"    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What is the lettuce on?"")
    for lettuce_patch in lettuce_patches:
        return lettuce_patch.simple_query(""What is the lettuce on?"") # crop would include the lettuce so keep it in the query"
1194027,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        black_patches = clothing_patch.find(""black"")
        # Question assumes only one black patch
        if len(black_patches) == 0:
            return image_patch.simple_query(""Which kind of clothing is black?"")
        for black_patch in black_patches:
            return black_patch.simple_query(""What kind of clothing is black?"") # crop would include the black so keep it in the query"
9963477,Is the statue wearing a dress?,"    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    for statue_patch in statue_patches:
        return statue_patch.simple_query(""Is the statue wearing a dress?"")"
1151995,Which side of the photo is the yellow vase on?,"    image_patch = ImagePatch(image)
    vase_patches = image_patch.find(""yellow vase"")
    # Question assumes only one vase patch
    if len(vase_patches) == 0:
        # If no vase is found, query the image directly
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    for vase_patch in vase_patches:
        if vase_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
712821,What is common to the bear and the belt?,"    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    belt_patches = image_patch.find(""belt"")
    # Question assumes only one bear and one belt patch
    if len(bear_patches) == 0 or len(belt_patches) == 0:
        # If no bear or belt is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    bear_patch = bear_patches[0]
    belt_patch = belt_patches[0]
    common_property = bear_patch.simple_query(""What is common to the bear and the belt?"")
    return common_property"
1757418,What is the vehicle to the right of the car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    for car_patch in car_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > car_patch.horizontal_center:
                return vehicle_patch.simple_query(""What type of vehicle is this?"")
    return ""nothing"""
7624100,Are the trunks that are gray wet and large?,"    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunk_patches:
        if trunk_patch.simple_query(""Is the trunk gray?"") == ""yes"":
            if trunk_patch.simple_query(""Is the trunk wet?"") == ""yes"":
                if trunk_patch.simple_query(""Is the trunk large?"") == ""yes"":
                    return ""yes""
    return ""no"""
1125474,"On which side of the photo is the iron fence, the right or the left?","    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""iron fence"")
    # Question assumes only one iron fence patch
    if len(fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
    return ""left"""
1300375,What is the name of the item of furniture that the printer is on?,"    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    # Question assumes only one printer patch
    if len(printer_patches) == 0:
        # If no printer is found, query the image directly
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    for printer_patch in printer_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > printer_patch.horizontal_center:
                return furniture_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    return printer_patches[0].simple_query(""What is the name of the item of furniture that the printer is on?"")"
5925196,What's the building covered by?,"    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""What's the building covered by?"")
    for building_patch in building_patches:
        return building_patch.simple_query(""What's the building covered by?"") # crop would include the covering so keep it in the query"
1948055,What watercraft is the white rope tying?,"    image_patch = ImagePatch(image)
    white_rope_patches = image_patch.find(""white rope"")
    # Question assumes only one white rope patch
    if len(white_rope_patches) == 0:
        # If no white rope is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    for white_rope_patch in white_rope_patches:
        watercraft_patches = image_patch.find(""watercraft"")
        for watercraft_patch in watercraft_patches:
            if watercraft_patch.horizontal_center > white_rope_patch.horizontal_center:
                return watercraft_patch.simple_query(""What watercraft is the white rope tying?"")
    return white_rope_patches[0].simple_query(""What watercraft is the white rope tying?"")"
8540582,What kind of animal is in front of the leafy trees?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""walking woman by the bus"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    for woman_patch in woman_patches:
        return woman_patch.simple_query(""What does the walking woman by the bus wear?"") # crop would include the clothing so keep it in the query"
1129508,Is the controller to the left of a pillow?,"    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center < controller_patch.horizontal_center:
                return ""yes""
    return ""no"""
18664084,Is there any sheep by the fence?,"    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is there any sheep by the fence?"")
    for sheep_patch in sheep_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if sheep_patch.horizontal_center > fence_patch.horizontal_center:
                return ""yes""
    return ""no"""
6912079,What animal is this?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is this?"")"
3412029,Where is the person?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif person_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center"""
14161122,What animal is in the water?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?,"    image_patch = ImagePatch(image)
    parent_patches = image_patch.find(""parent"")
    # Question assumes only one parent patch
    if len(parent_patches) == 0:
        # If no parent is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    parent_patch = parent_patches[0]
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    for baby_patch in baby_patches:
        if baby_patch.horizontal_center > parent_patch.horizontal_center:
            return baby_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    return ""no"""
15699496,What is the cup that looks clean made of?,"    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one clean cup patch
    if len(cup_patches) == 0:
        # If no clean cup is found, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    for cup_patch in cup_patches:
        if cup_patch.verify_property(""cup"", ""clean""):
            return cup_patch.simple_query(""What is the cup that looks clean made of?"")
    # If no clean cup is found, query the image directly
    return image_patch.simple_query(""What is the cup that looks clean made of?"")"
12765451,What animals are to the right of the ladder?,"    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for ladder_patch in ladder_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > ladder_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is this?"")
    return ""none"""
191044307,What animal is black?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What animal is black?"")
    return image_patch.simple_query(""What animal is black?"") # if no black animal is found, query the image directly"
12639181,Who is wearing shorts?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"")
    # If no person is wearing shorts, query the image directly
    return image_patch.simple_query(""Who is wearing shorts?"")"
10630949,Is the person that is not male wearing an elbow pad?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only two person patches (male and female)
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for person_patch in person_patches:
        if not person_patch.verify_property(""person"", ""male""):
            return bool_to_yesno(person_patch.verify_property(""person"", ""wearing elbow pad""))"
14544602,What is the boy holding?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    holding_patches = image_patch.find(""holding"")
    for holding_patch in holding_patches:
        if holding_patch.horizontal_center > boy_patch.horizontal_center:
            return holding_patch.simple_query(""What is the boy holding?"")
    return boy_patch.simple_query(""What is the boy holding?"")"
2986699,Of what material the dish?,"    image_patch = ImagePatch(image)
    dish_patches = image_patch.find(""dish"")
    # Question assumes only one dish patch
    if len(dish_patches) == 0:
        # If no dish is found, query the image directly
        return image_patch.simple_query(""Of what material is the dish?"")
    return dish_patches[0].simple_query(""Of what material is the dish?"")"
161013513,What kind of animal is on the street?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    return animal_patches[0].simple_query(""What kind of animal is this?"")"
15143936,What animal is before the roof?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is before the roof?"")"
1955043,Who is playing with the ball?,"    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Who is playing with the ball?"")
    for ball_patch in ball_patches:
        player_patches = image_patch.find(""player"")
        for player_patch in player_patches:
            if ball_patch.horizontal_center > player_patch.horizontal_center:
                return player_patch.simple_query(""Who is playing with the ball?"")
    return ball_patches[0].simple_query(""Who is playing with the ball?"")"
91044150,What is the name of the animals in front of the trees beside the river?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?,"    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)"
10457241,What is the color of the trousers?,"    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"")"
2913850,Is the placemat in the bottom or in the top part?,"    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What is covered with blanket?"")
    for blanket_patch in blanket_patches:
        object_patches = image_patch.find(""What is covered with blanket?"")
        for object_patch in object_patches:
            return object_patch.simple_query(""What is covered with blanket?"") # crop would include the blanket so keep it in the query"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    man_patch = man_patches[0]
    sweater_patches = image_patch.find(""sweater"")
    # Question assumes only one sweater patch
    if len(sweater_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    for sweater_patch in sweater_patches:
        if sweater_patch.horizontal_center > man_patch.horizontal_center:
            right_patches = image_patch.find(""chair"")  # assuming chair is the item of furniture
            for right_patch in right_patches:
                if right_patch.horizontal_center > sweater_patch.horizontal_center:
                    return right_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")"
18673671,"In which part of the picture is the desk drawer, the bottom or the top?","    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""desk drawer"")
    # Question assumes only one desk drawer patch
    if len(drawer_patches) == 0:
        # If no desk drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    if drawer_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?,"    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)"
19737232,Is the book on the right of the picture?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book on the right of the picture?"")
    for book_patch in book_patches:
        if book_patch.horizontal_center > image_patch.width / 2:
            return ""yes""
    return ""no"""
475064,Who is wearing the glasses?,"    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for glasses_patch in glasses_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if glasses_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is wearing the glasses?"")
    return glasses_patches[0].simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query"
8594579,Is there a woman to the right of the orange object that is to the right of the person?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")"
14602992,Which side of the image is the couch on?,"    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    for couch_patch in couch_patches:
        if couch_patch.horizontal_center < image_patch.width / 2:
            return ""left""
        else:
            return ""right"""
9944587,How tall is the man that is wearing a shirt?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    man_patch = man_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    for shirt_patch in shirt_patches:
        if shirt_patch.exists(""man""):
            return shirt_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    return man_patch.simple_query(""How tall is the man that is wearing a shirt?"")"
13736712,Are there any giraffes?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe""))"
6996118,The young girl is wearing what?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""young girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The young girl is wearing what?"")
    for girl_patch in girl_patches:
        return girl_patch.simple_query(""What is the young girl wearing?"")"
19992576,Is the basket on the floor small and brown?,"    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    for basket_patch in basket_patches:
        if basket_patch.vertical_center < image_patch.vertical_center:  # on the floor
            return bool_to_yesno(basket_patch.simple_query(""Is the basket small?"") == ""yes"" and basket_patch.simple_query(""Is the basket brown?"") == ""yes"")
    return ""no"""
17332401,What is the boy in front of?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy in front of?"")
    for boy_patch in boy_patches:
        return boy_patch.simple_query(""What is the boy in front of?"") # crop would include what the boy is in front of so keep it in the query"
15586294,Which side is the leather armchair on?,"    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""leather armchair"")
    # Question assumes only one armchair patch
    if len(armchair_patches) == 0:
        # If no armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    for armchair_patch in armchair_patches:
        if armchair_patch.horizontal_center < image_patch.width / 2:
            return ""left""
        else:
            return ""right"""
15658324,What is the horse in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    for controller_patch in controller_patches:
        if controller_patch.horizontal_center > man_patch.horizontal_center:
            return controller_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")"
2531874,Who is playing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
3112009,Is the plate on the left side?,"    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    for plate_patch in plate_patches:
        if plate_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1527613,On which side of the picture is the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?,"    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    roof_patches = image_patch.find(""roof"")
    # Question assumes only one road and one roof patch
    if len(road_patches) == 0 or len(roof_patches) == 0:
        # If no road or roof is found, query the image directly
        return image_patch.simple_query(""Are both the road and the roof the same color?"")
    road_color = road_patches[0].simple_query(""What is the color of the road?"")
    roof_color = roof_patches[0].simple_query(""What is the color of the roof?"")
    return bool_to_yesno(road_color == roof_color)"
161027384,What is the green rug hanging on?,"    image_patch = ImagePatch(image)
    green_rug_patches = image_patch.find(""green rug"")
    # Question assumes only one green rug patch
    if len(green_rug_patches) == 0:
        # If no green rug is found, query the image directly
        return image_patch.simple_query(""What is the green rug hanging on?"")
    for green_rug_patch in green_rug_patches:
        return green_rug_patch.simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?,"    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Who is using the laptop?"")
    for laptop_patch in laptop_patches:
        user_patches = image_patch.find(""person"")
        for user_patch in user_patches:
            if user_patch.horizontal_center > laptop_patch.horizontal_center:
                return user_patch.simple_query(""Who is using the laptop?"")
    return ""unknown"""
1969500,Who in the photo is standing?,"    image_patch = ImagePatch(image)
    standing_patches = image_patch.find(""person standing"")
    # Question assumes only one standing person patch
    if len(standing_patches) == 0:
        # If no standing person is found, query the image directly
        return image_patch.simple_query(""Who in the photo is standing?"")
    return standing_patches[0].simple_query(""Who is standing?"")"
693318,Do you see any plates in the photo?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate""))"
19613394,The person on the skateboard is wearing what?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person on a skateboard?"") == ""yes"":
            return person_patch.simple_query(""What is the person on the skateboard wearing?"")
    return ""unknown"""
19927237,Is the blue car in front of the white van?,"    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car in front of the white van?"")
    for blue_car_patch in blue_car_patches:
        white_van_patches = image_patch.find(""white van"")
        for white_van_patch in white_van_patches:
            if blue_car_patch.horizontal_center < white_van_patch.horizontal_center:
                return ""yes""
    return ""no"""
31054022,What is the box sitting on?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What is the box sitting on?"")
    for box_patch in box_patches:
        return box_patch.simple_query(""What is the box sitting on?"") # crop would include the object it's sitting on so keep it in the query"
17634413,Does the ground look snowy and brown?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Does the ground look snowy and brown?""))"
15185768,Does the sky look blue and clear?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Does the sky look blue and clear?"") == ""yes"")"
1589160,Does the person that is sitting lean against a fire hydrant?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    for person_patch in person_patches:
        firehydrant_patches = image_patch.find(""fire hydrant"")
        for firehydrant_patch in firehydrant_patches:
            if firehydrant_patch.horizontal_center < person_patch.horizontal_center:
                return ""yes""
    return ""no"""
2142522,Are there any shopping carts or mannequins in this photo?,"    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)"
17362234,Are there cages or scrub brushes in this picture?,"    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)"
4955854,Is the lamp below the chain?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    for lamp_patch in lamp_patches:
        chain_patches = image_patch.find(""chain"")
        for chain_patch in chain_patches:
            if chain_patch.horizontal_center > lamp_patch.horizontal_center:
                return ""yes""
    return ""no"""
10463545,Is the computer to the right of the other computer silver or black?,"    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    # Question assumes only two computer patches
    if len(computer_patches) < 2:
        # If less than two computers are found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    for i in range(len(computer_patches) - 1):
        if computer_patches[i].horizontal_center < computer_patches[i+1].horizontal_center:
            right_computer = computer_patches[i+1]
            for computer_patch in computer_patches:
                if computer_patch.horizontal_center < right_computer.horizontal_center:
                    return computer_patch.best_text_match([""silver"", ""black""])
    return ""silver"" # default to silver if no computer is found to the right"
2265037,What is the girl wearing?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    for girl_patch in girl_patches:
        return girl_patch.simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""blue numbers"") or image_patch.exists(""blue letters""))"
3483992,Is the long bus to the left or to the right of the person with the backpack?,"    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""long bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    for bus_patch in bus_patches:
        backpack_patches = image_patch.find(""backpack"")
        # Question assumes only one backpack patch
        if len(backpack_patches) == 0:
            return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
        for backpack_patch in backpack_patches:
            if bus_patch.horizontal_center < backpack_patch.horizontal_center:
                return ""left""
    return ""right"""
13598461,What is the device that is not on called?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    for device_patch in device_patches:
        is_on = device_patch.simple_query(""Is the device on?"") == ""yes""
        if not is_on:
            return device_patch.simple_query(""What is the device that is not on called?"")
    # If all devices are on, query the image directly
    return image_patch.simple_query(""What is the device that is not on called?"")"
13885436,The sky has what color?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"")"
7432467,Is the black container to the left of the man that is on the motorcycle?,"    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        # If no black container is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    for black_container_patch in black_container_patches:
        man_patches = image_patch.find(""man on motorcycle"")
        # Question assumes only one man on motorcycle patch
        if len(man_patches) == 0:
            # If no man on motorcycle is found, query the image directly
            return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
        for man_patch in man_patches:
            if black_container_patch.horizontal_center < man_patch.horizontal_center:
                return ""yes""
    return ""no"""
19540096,Is the fire in an oven?,"    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    # Question assumes only one fire patch
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    for fire_patch in fire_patches:
        return fire_patch.simple_query(""Is the fire in an oven?"")"
18291107,The horse is where?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""The horse is where?"")
    return image_patch.simple_query(""The horse is where?"") # crop would include the horse so keep it in the query"
5435474,Is the man that is to the left of the motorbike wearing a hat?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    for man_patch in man_patches:
        motorbike_patches = image_patch.find(""motorbike"")
        for motorbike_patch in motorbike_patches:
            if motorbike_patch.horizontal_center > man_patch.horizontal_center:
                return man_patch.verify_property(""man"", ""wearing a hat"")
    return ""no"""
226307,Are there any tables in the photo?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))"
1944826,Who is reflected in the mirror?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is reflected in the mirror?"")"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    woman_patch = woman_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    for cooking_utensil_patch in cooking_utensil_patches:
        if cooking_utensil_patch.horizontal_center > woman_patch.horizontal_center:
            return cooking_utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    return cooking_utensil_patches[0].simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")"
18435846,What is the color of the balloon that is to the right of the backpack?,"    image_patch = ImagePatch(image)
    balloon_patches = image_patch.find(""balloon"")
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one balloon and one backpack patch
    if len(balloon_patches) == 0 or len(backpack_patches) == 0:
        # If no balloon or backpack is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    for balloon_patch in balloon_patches:
        for backpack_patch in backpack_patches:
            if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
                return balloon_patch.simple_query(""What is the color of the balloon?"")
    return ""not found"" # balloon not found to the right of backpack"
8390894,Is the woman to the right of the man sitting on a sofa?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    # Question assumes only one woman and one man patch
    if len(woman_patches) == 0 or len(man_patches) == 0:
        # If no woman or man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    woman_patch = woman_patches[0]
    man_patch = man_patches[0]
    sofa_patches = image_patch.find(""sofa"")
    # Question assumes only one sofa patch
    if len(sofa_patches) == 0:
        return ""no""
    sofa_patch = sofa_patches[0]
    if woman_patch.horizontal_center > man_patch.horizontal_center and woman_patch.horizontal_center > sofa_patch.horizontal_center:
        return ""yes""
    return ""no"""
18896007,Which side of the image is the pot on?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19323898,Is that pillow on a couch?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is that pillow on a couch?"")
    for pillow_patch in pillow_patches:
        return pillow_patch.simple_query(""Is that pillow on a couch?"")"
1281034,Where are the trees?,"    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Where are the trees?"")
    for tree_patch in tree_patches:
        if tree_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        elif tree_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
        else:
            return ""center"""
13515147,What is on the cow?,"    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""What is on the cow?"")
    for cow_patch in cow_patches:
        return cow_patch.simple_query(""What is on the cow?"")"
91036716,What is the skater doing?,"    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    # Question assumes only one skater patch
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?,"    image_patch = ImagePatch(image)
    boy_carrying_patches = image_patch.find(""boy carrying"")
    # Question assumes only one boy carrying patch
    if len(boy_carrying_patches) == 0:
        # If no boy carrying is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    boy_carrying_patch = boy_carrying_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < boy_carrying_patch.horizontal_center:
            return person_patch.simple_query(""What is the person to the left of the boy carrying?"")
    return ""no person found"""
13152020,Is the ground wet or dry?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ground wet or dry?"")"
19312096,"On which side is the purse, the left or the right?","    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    purse_patch = purse_patches[0]
    if purse_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bread""))"
9113663,Do you see either any snow or sand that are white?,"    image_patch = ImagePatch(image)
    is_snow = image_patch.exists(""snow"")
    is_sand = image_patch.exists(""sand"")
    return bool_to_yesno(is_snow or is_sand)"
10243612,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What vegetable is to the left of the napkin?"")
    for napkin_patch in napkin_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < napkin_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetable is to the left of the napkin?"")
    return ""no"""
15599523,Is the dog on the right side?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    dog_patch = dog_patches[0]
    if dog_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
101019673,What is the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"")"
333047,Do you see any men to the right of the orange tent?,"    image_patch = ImagePatch(image)
    orange_tent_patches = image_patch.find(""orange tent"")
    # Question assumes only one orange tent patch
    if len(orange_tent_patches) == 0:
        # If no orange tent is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for orange_tent_patch in orange_tent_patches:
        men_patches = image_patch.find(""man"")
        for man_patch in men_patches:
            if man_patch.horizontal_center > orange_tent_patch.horizontal_center:
                return ""yes""
    return ""no"""
13907796,Is the shirt striped and green?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    shirt_patch = shirt_patches[0]
    is_striped = shirt_patch.simple_query(""Is the shirt striped?"") == ""yes""
    is_green = shirt_patch.simple_query(""What is the color of the shirt?"") == ""green""
    return bool_to_yesno(is_striped and is_green)"
17207604,Are there either bottles or shelves?,"    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?,"    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    for train_patch in train_patches:
        if train_patch.horizontal_center < image_patch.width / 2:  # left of the photo
            vehicle_patches = image_patch.find(""vehicle"")
            for vehicle_patch in vehicle_patches:
                if vehicle_patch.horizontal_center > train_patch.horizontal_center:  # right of the train
                    return vehicle_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    return ""none"""
7165131,Is that train engine small or large?,"    image_patch = ImagePatch(image)
    train_engine_patches = image_patch.find(""train engine"")
    # Question assumes only one train engine patch
    if len(train_engine_patches) == 0:
        # If no train engine is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    for train_engine_patch in train_engine_patches:
        if train_engine_patch.simple_query(""Is the train engine small or large?"") == ""small"":
            return ""small""
        else:
            return ""large"""
21049362,Where are the railroad tracks?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal looking at?"")
    for animal_patch in animal_patches:
        return animal_patch.simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?,"    image_patch = ImagePatch(image)
    children_patches = image_patch.find(""children"")
    # Question assumes only one children patch
    if len(children_patches) == 0:
        # If no children are found, query the image directly
        return image_patch.simple_query(""What are the children playing?"")
    for child_patch in children_patches:
        return child_patch.simple_query(""What are the children playing?"") # crop would include the children so keep it in the query"
598297,Are there combs or figurines in the picture?,"    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)"
16409127,What is the wire on?,"    image_patch = ImagePatch(image)
    wire_patches = image_patch.find(""wire"")
    # Question assumes only one wire patch
    if len(wire_patches) == 0:
        # If no wire is found, query the image directly
        return image_patch.simple_query(""What is the wire on?"")
    return wire_patches[0].simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?,"    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    # Question assumes only one tunnel patch
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    return tunnel_patches[0].simple_query(""Is the tunnel small or large?"")"
17560468,Do you see trains or windows?,"    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return image_patch.simple_query(""What is the person near the man wearing?"")
    for person_patch in person_patches:
        if abs(person_patch.horizontal_center - man_patch.horizontal_center) < (man_patch.width / 2):
            return person_patch.simple_query(""What is the person near the man wearing?"")
    return ""nothing"""
12352375,Is the vehicle that is sitting down black or blue?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""sitting down""):
            return vehicle_patch.best_text_match([""black"", ""blue""])"
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?,"    image_patch = ImagePatch(image)
    metal_trash_can_patches = image_patch.find(""metal trash can"")
    # Question assumes only one metal trash can patch
    if len(metal_trash_can_patches) == 0:
        # If no metal trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    for metal_trash_can_patch in metal_trash_can_patches:
        white_patches = image_patch.find(""white"")
        for white_patch in white_patches:
            if white_patch.horizontal_center > metal_trash_can_patch.horizontal_center:
                return ""left""
        return ""right"""
5800248,Is it outdoors?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))"
4604785,Does the pizza slice to the left of the pizza have large size?,"    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    for pizza_patch in pizza_patches:
        left_patches = image_patch.find(""pizza slice"")
        for left_patch in left_patches:
            if left_patch.horizontal_center < pizza_patch.horizontal_center:
                return left_patch.verify_property(""pizza slice"", ""large"")"
15185845,What's the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What's the man wearing?"")"
2282232,Where is the snow?,"    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    # Question assumes only one snow patch
    if len(snow_patches) == 0:
        # If no snow is found, query the image directly
        return image_patch.simple_query(""Where is the snow?"")
    for snow_patch in snow_patches:
        if snow_patch.vertical_center < image_patch.vertical_center:
            return ""ground""
        else:
            return ""top"""
7889197,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"")
    # If no person is wearing a shirt, query the image directly
    return image_patch.simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?,"    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)"
154682,Where does the bird stand on?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Where does the bird stand on?"")
    for bird_patch in bird_patches:
        return bird_patch.simple_query(""Where does the bird stand on?"")"
10435315,Is the man holding a racket?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if man_patch.horizontal_center < racket_patch.horizontal_center:
            return ""yes""
    return ""no"""
121035887,Do the man shorts have white color?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    for shorts_patch in shorts_patches:
        if shorts_patch.verify_property(""shorts"", ""white""):
            return ""yes""
    return ""no"""
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < man_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")"
19659501,What is the color of the umbrella the bird is on?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    bird_patch = bird_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        return ""no""
    for umbrella_patch in umbrella_patches:
        if bird_patch.horizontal_center > umbrella_patch.horizontal_center:
            return umbrella_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    return ""no"""
10595217,Where is the grass?,"    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"")"
14803743,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        black_patches = clothing_patch.find(""black"")
        # Question assumes only one black patch
        if len(black_patches) == 0:
            return image_patch.simple_query(""Which kind of clothing is black?"")
        for black_patch in black_patches:
            return black_patch.simple_query(""What kind of clothing is black?"") # crop would include the black so keep it in the query"
19743238,Is the man on the right side?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
3965204,Are the mountains covered with snow?,"    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    for mountain_patch in mountain_patches:
        return bool_to_yesno(mountain_patch.verify_property(""mountain"", ""snowy""))"
141024710,Are there both windows and cars in the picture?,"    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""What color do you think the shirt is?"")"
3623367,What's he doing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's he doing?"")"
15634950,Where is the giraffe in front of the hay eating from?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    for giraffe_patch in giraffe_patches:
        hay_patches = image_patch.find(""hay"")
        for hay_patch in hay_patches:
            if giraffe_patch.horizontal_center > hay_patch.horizontal_center:
                return giraffe_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    return giraffe_patches[0].simple_query(""Where is the giraffe in front of the hay eating from?"")"
16644500,What animal is the log pulled by?,"    image_patch = ImagePatch(image)
    log_patches = image_patch.find(""log"")
    # Question assumes only one log patch
    if len(log_patches) == 0:
        # If no log is found, query the image directly
        return image_patch.simple_query(""What animal is the log pulled by?"")
    for log_patch in log_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > log_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is the log pulled by?"")
    return image_patch.simple_query(""What animal is the log pulled by?"") # if no animal is found, query the image directly"
3202108,Which side is the car on?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
10137201,Are the papers in the bottom part of the picture?,"    image_patch = ImagePatch(image)
    papers_patches = image_patch.find(""papers"")
    # Question assumes only one papers patch
    if len(papers_patches) == 0:
        # If no papers are found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    if papers_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    for boy_patch in boy_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center < boy_patch.horizontal_center:
                return ""right""
    return ""left"""
8438091,The picture is what color?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the picture's color?"")"
4325939,On which side of the photo is the banana?,"    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    for banana_patch in banana_patches:
        if banana_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
1425189,What is the name of the brown piece of furniture?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""brown piece of furniture"")
    # Question assumes only one brown piece of furniture patch
    if len(furniture_patches) == 0:
        # If no brown piece of furniture is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return furniture_patches[0].simple_query(""What is the name of the brown piece of furniture?"")"
5119962,Is the man to the right of glasses?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one man and one glasses patch
    if len(man_patches) == 0 or len(glasses_patches) == 0:
        # If no man or glasses is found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    for man_patch in man_patches:
        for glasses_patch in glasses_patches:
            if glasses_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?,"    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    for toilet_patch in toilet_patches:
        lid_patches = image_patch.find(""toilet lid"")
        for lid_patch in lid_patches:
            if lid_patch.vertical_center < toilet_patch.vertical_center:
                return ""down""
            else:
                return ""up"""
6522554,Which kind of device does the man hold?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > man_patch.horizontal_center:
            return device_patch.simple_query(""What kind of device is this?"")
    return man_patch.simple_query(""Which kind of device does the man hold?"")"
870619,What is the device to the left of the person that is to the left of the television?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")"
12713794,Does the woman to the left of the man wear a necklace?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    # Question assumes only one woman and one man patch
    if len(woman_patches) == 0 or len(man_patches) == 0:
        # If no woman or man is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    for woman_patch in woman_patches:
        for man_patch in man_patches:
            if woman_patch.horizontal_center < man_patch.horizontal_center:
                return woman_patch.verify_property(""woman"", ""necklace"")
    return ""no"""
824070,What is the man doing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"")"
11593733,Which kind of furniture is right to the pillow?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    for pillow_patch in pillow_patches:
        right_patches = image_patch.find(""furniture"")
        for right_patch in right_patches:
            if right_patch.horizontal_center > pillow_patch.horizontal_center:
                return right_patch.simple_query(""What kind of furniture is right to the pillow?"")
    return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")"
3357821,Does the dog to the left of the other dog look small or large?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only two dog patches
    if len(dog_patches) < 2:
        # If less than two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog = dog_patches[0]
    right_dog = dog_patches[1]
    if left_dog.horizontal_center < right_dog.horizontal_center:
        return left_dog.simple_query(""Is the dog small or large?"")
    else:
        return right_dog.simple_query(""Is the dog small or large?"")"
338026,Are the white candles short or tall?,"    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only white candles
    for candle_patch in candle_patches:
        if candle_patch.simple_query(""Is the candle white?"") == ""yes"":
            height = candle_patch.simple_query(""What is the height of the candle?"")
            if float(height) < 20:  # assuming 20 is the threshold for short
                return ""short""
    return ""tall"""
15346232,What kind of fruit is the girl holding?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    for girl_patch in girl_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if fruit_patch.horizontal_center > girl_patch.horizontal_center:
                return fruit_patch.simple_query(""What kind of fruit is the girl holding?"")
    return girl_patch.simple_query(""What kind of fruit is the girl holding?"")"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?","    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
81030271,Is the gray car to the right or to the left of the cart?,"    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    for gray_car_patch in gray_car_patches:
        cart_patches = image_patch.find(""cart"")
        for cart_patch in cart_patches:
            if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?,"    image_patch = ImagePatch(image)
    canister_patches = image_patch.find(""canister made of chrome"")
    # Question assumes only one canister patch
    if len(canister_patches) == 0:
        # If no canister is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    canister_patch = canister_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    for cooking_utensil_patch in cooking_utensil_patches:
        if cooking_utensil_patch.horizontal_center > canister_patch.horizontal_center:
            return cooking_utensil_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    return cooking_utensil_patches[0].simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")"
8240699,What animal is in front of the bird?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What animal is in front of the bird?"")"
10105081,Is the fence white or green?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    for fence_patch in fence_patches:
        return fence_patch.best_text_match([""white"", ""green""])"
13613689,Is there a train or a fence in the picture?,"    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)"
10662521,What is the bottle made of?,"    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of fruit is on the plate?"")"
16701575,What device is to the right of the cake?,"    image_patch = ImagePatch(image)
    cake_patches = image_patch.find(""cake"")
    # Question assumes only one cake patch
    if len(cake_patches) == 0:
        # If no cake is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    for cake_patch in cake_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center > cake_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the right of the cake?"")
    return ""none"""
6572516,What material is the ceiling?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?,"    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?,"    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    for egg_patch in egg_patches:
        horizontal_center = egg_patch.horizontal_center
        if horizontal_center == image_patch.horizontal_center:
            return egg_patch.simple_query(""What is the color of the egg?"")
    # If no egg is in the middle, query the image directly
    return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")"
14371534,Are the gold pans on the right part or on the left?,"    image_patch = ImagePatch(image)
    gold_pans_patches = image_patch.find(""gold pans"")
    # Question assumes only one gold pans patch
    if len(gold_pans_patches) == 0:
        # If no gold pans are found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    gold_pans_patch = gold_pans_patches[0]
    if gold_pans_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16538076,What does the man that is not tall wear?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        is_tall = man_patch.verify_property(""man"", ""tall"")
        if not is_tall:
            return man_patch.simple_query(""What does the man wear?"")
    return ""nothing"" # if no man is not tall, query the image directly"
5483644,"On which side is the woman, the left or the right?","    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in this photograph?"")"
1290926,Are there either any life vests or flags?,"    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)"
18273738,Do you see a cup?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cup""))"
4211922,Who is sitting on the table?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is sitting on the table?"")"
6587526,What is the color of the girl to the left of the other girl?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only two girl patches
    if len(girl_patches) < 2:
        # If less than two girls are found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    left_girl = girl_patches[0]
    right_girl = girl_patches[1]
    if right_girl.horizontal_center < left_girl.horizontal_center:
        left_girl, right_girl = right_girl, left_girl
    return right_girl.simple_query(""What is the color of the girl?"")"
6599090,What is the person to the right of the car holding?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    for car_patch in car_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > car_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the right of the car holding?"")
    return ""nothing"""
1174895,What is the vehicle in the parking lot?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    return vehicle_patches[0].simple_query(""What is the vehicle in the parking lot?"")"
14755158,Who is the woman in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""Who is the woman in front of?"")"
18349161,Where does the cow that is standing stand?,"    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    cow_patch = cow_patches[0]
    return cow_patch.simple_query(""Where does the cow that is standing stand?"")"
7472884,On which side is the tap?,"    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    tap_patch = tap_patches[0]
    if tap_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
111051831,On which side of the image is the cabinet?,"    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
3590007,On which side of the image is the fork?,"    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    for fork_patch in fork_patches:
        if fork_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    for person_patch in person_patches:
        bag_patches = image_patch.find(""bag"")
        for bag_patch in bag_patches:
            if bag_patch.horizontal_center < person_patch.horizontal_center:
                right_patches = image_patch.find(""man"")
                for right_patch in right_patches:
                    if right_patch.horizontal_center > bag_patch.horizontal_center:
                        return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?,"    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    artwork_patch = artwork_patches[0]
    computer_desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one computer desk patch
    if len(computer_desk_patches) == 0:
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    for computer_desk_patch in computer_desk_patches:
        material_artwork = artwork_patch.simple_query(""What material is the artwork made of?"")
        material_desk = computer_desk_patch.simple_query(""What material is the computer desk made of?"")
        return bool_to_yesno(material_artwork == material_desk)"
14298125,Who is playing Wii?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")"
9382689,What's the floor made of?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the dress?"")"
15127108,Does the tea pot above the receipt look short and white?,"    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    # Question assumes only one tea pot patch
    if len(tea_pot_patches) == 0:
        # If no tea pot is found, query the image directly
        return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")
    for tea_pot_patch in tea_pot_patches:
        if tea_pot_patch.vertical_center < image_patch.vertical_center: # above the receipt
            return bool_to_yesno(tea_pot_patch.verify_property(""tea pot"", ""short"") and tea_pot_patch.verify_property(""tea pot"", ""white""))
    return ""no"""
15632653,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        black_patches = clothing_patch.find(""black"")
        # Question assumes only one black patch
        if len(black_patches) == 0:
            return image_patch.simple_query(""Which kind of clothing is black?"")
        for black_patch in black_patches:
            return black_patch.simple_query(""What kind of clothing is black?"") # crop would include the black so keep it in the query"
490992,Is the fence on the left side or on the right of the picture?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
    return ""right"""
17133284,Do the mountains look rocky?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""mountains"", ""rocky""))"
17573742,Is the woman to the right of the camera wearing a coat?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center > image_patch.horizontal_center:
            return woman_patch.simple_query(""Is the woman wearing a coat?"")
    return ""no"""
3395780,Is the vehicle to the left of the parking meter covered in rain?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    for vehicle_patch in vehicle_patches:
        parking_meter_patches = image_patch.find(""parking meter"")
        for parking_meter_patch in parking_meter_patches:
            if vehicle_patch.horizontal_center < parking_meter_patch.horizontal_center:
                return vehicle_patch.simple_query(""Is the vehicle covered in rain?"")
    return ""no"""
1542668,Is there a black laptop or desk?,"    image_patch = ImagePatch(image)
    is_black_laptop = image_patch.exists(""black laptop"")
    is_black_desk = image_patch.exists(""black desk"")
    return bool_to_yesno(is_black_laptop or is_black_desk)"
1655442,What type of food is to the right of the waffles that are to the right of the person?,"    image_patch = ImagePatch(image)
    waffles_patches = image_patch.find(""waffles"")
    # Question assumes only one waffles patch
    if len(waffles_patches) == 0:
        # If no waffles are found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for waffles_patch in waffles_patches:
        if waffles_patch.horizontal_center < image_patch.width / 2:  # left of center
            continue
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center > waffles_patch.horizontal_center:
                return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")"
395290,How large is the bag?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    bag_patch = bag_patches[0]
    return bag_patch.simple_query(""How large is the bag?"")"
16138893,Are there both motorcycles and cars in this scene?,"    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle or is_car)"
1462176,Who is wearing shorts?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
        if is_wearing_shorts:
            return person_patch.simple_query(""Who is wearing shorts?"")
    # If no person is wearing shorts, query the image directly
    return image_patch.simple_query(""Who is wearing shorts?"")"
171032184,What hangs from the windows?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?,"    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?,"    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    for giraffe_patch in giraffe_patches:
        tree_patches = image_patch.find(""tree"")
        for tree_patch in tree_patches:
            if tree_patch.horizontal_center > giraffe_patch.horizontal_center:
                return tree_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")"
8197176,What color is the jacket that the man wears?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    jacket_patch = jacket_patches[0]
    return jacket_patch.simple_query(""What color is the jacket that the man wears?"")"
3440931,What are that pieces of furniture called?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are those pieces of furniture called?"")"
337924,What is the fruit that is to the left of the chair?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?,"    image_patch = ImagePatch(image)
    bowls_patches = image_patch.find(""bowls"")
    # Question assumes only one bowl patch
    if len(bowls_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    return bowls_patches[0].simple_query(""What do you think are the bowls on?"")"
18330260,Is the sky above the trees open and clear?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky above the trees open and clear?"")"
14119691,Does the squirrel to the right of the stuffed dog look white?,"    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    # Question assumes only one squirrel patch
    if len(squirrel_patches) == 0:
        # If no squirrel is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for squirrel_patch in squirrel_patches:
        dog_patches = image_patch.find(""stuffed dog"")
        for dog_patch in dog_patches:
            if squirrel_patch.horizontal_center > dog_patch.horizontal_center:
                return bool_to_yesno(squirrel_patch.verify_property(""squirrel"", ""white""))
    return ""no"""
18437694,Does the clock to the right of the statue have gold color and tiny size?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Does the clock to the right of the statue have gold color and tiny size?"")
    for clock_patch in clock_patches:
        if clock_patch.horizontal_center > image_patch.find(""statue"")[0].horizontal_center:
            if clock_patch.verify_property(""clock"", ""gold"") and clock_patch.verify_property(""clock"", ""tiny""):
                return ""yes""
    return ""no"""
1252960,Where was the photo taken?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?,"    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is there a frisbee on the grass?"")
    for frisbee_patch in frisbee_patches:
        if frisbee_patch.simple_query(""Is the frisbee on the grass?"") == ""yes"":
            return ""yes""
    return ""no"""
13180513,Are there either cakes or containers in the photo?,"    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?,"    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_black_motorcycle = image_patch.exists(""black motorcycle"")
    return bool_to_yesno(is_black_car or is_black_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?,"    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    for blue_car_patch in blue_car_patches:
        police_officer_patches = image_patch.find(""police officer"")
        for police_officer_patch in police_officer_patches:
            vehicle_patches = image_patch.find(""vehicle"")
            for vehicle_patch in vehicle_patches:
                if vehicle_patch.horizontal_center < police_officer_patch.horizontal_center:
                    if blue_car_patch.horizontal_center < vehicle_patch.horizontal_center:
                        return ""behind""
                    else:
                        return ""in front of""
    return ""unknown"" # if no vehicle to the left of the police officer is found"
5785831,What is in the glass?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the glass?"")"
19246241,Are there any brown benches or buckets?,"    image_patch = ImagePatch(image)
    is_bench = image_patch.exists(""brown bench"")
    is_bucket = image_patch.exists(""brown bucket"")
    return bool_to_yesno(is_bench or is_bucket)"
3243803,"Where in the picture is the spoon, on the right or on the left?","    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
6952486,Does the shirt look white?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    shirt_patch = shirt_patches[0]
    return bool_to_yesno(shirt_patch.verify_property(""shirt"", ""white""))"
17401425,Is there a bag that is not brown?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if not bag_patch.verify_property(""bag"", ""brown""):
            return ""yes""
    return ""no"""
481240,"Which kind of furniture is large, the shelf or the cupboard?","    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    # Question assumes only one shelf and one cupboard patch
    if len(shelf_patches) == 0 or len(cupboard_patches) == 0:
        # If no shelf or cupboard is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    for shelf_patch in shelf_patches:
        for cupboard_patch in cupboard_patches:
            if shelf_patch.width < cupboard_patch.width:
                return ""cupboard""
    return ""shelf"""
8531943,Are there any screens or bags?,"    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)"
1969545,What is she wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(person_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    for person_patch in person_patches:
        return person_patch.simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?","    image_patch = ImagePatch(image)
    freezer_patches = image_patch.find(""freezer"")
    ice_maker_patches = image_patch.find(""ice maker"")
    # Question assumes only one freezer and one ice maker patch
    if len(freezer_patches) == 0 or len(ice_maker_patches) == 0:
        # If no freezer or ice maker is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    for freezer_patch in freezer_patches:
        if freezer_patch.simple_query(""What is the color of the freezer?"") != ""white"":
            return ""the freezer""
    for ice_maker_patch in ice_maker_patches:
        if ice_maker_patch.simple_query(""What is the color of the ice maker?"") != ""white"":
            return ""the ice maker""
    return ""both"""
1051870,Are there chairs or tables that are not green?,"    image_patch = ImagePatch(image)
    chairs_patches = image_patch.find(""chair"")
    tables_patches = image_patch.find(""table"")
    # Question assumes only one chair or table patch
    is_chair_green = True
    is_table_green = True
    for chair_patch in chairs_patches:
        if chair_patch.simple_query(""What is the color of the chair?"") != ""green"":
            is_chair_green = False
    for table_patch in tables_patches:
        if table_patch.simple_query(""What is the color of the table?"") != ""green"":
            is_table_green = False
    return bool_to_yesno(is_chair_green and is_table_green)"
1366363,Does the taxi have a different color than the truck?,"    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one taxi and one truck patch
    if len(taxi_patches) == 0 or len(truck_patches) == 0:
        # If no taxi or truck is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    for taxi_patch in taxi_patches:
        for truck_patch in truck_patches:
            if taxi_patch.cropped_image[0, 0, 0] != truck_patch.cropped_image[0, 0, 0]:
                return ""yes""
    return ""no"""
5460839,In which part of the image is the dog?,"    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    dog_patch = dog_patches[0]
    if dog_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    elif dog_patch.vertical_center > image_patch.vertical_center:
        return ""top""
    else:
        return ""center"""
18899476,What type of vegetable is to the right of the rice that is on the plate?,"    image_patch = ImagePatch(image)
    rice_patches = image_patch.find(""rice"")
    # Question assumes only one rice patch
    if len(rice_patches) == 0:
        # If no rice is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    for rice_patch in rice_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center > rice_patch.horizontal_center:
                return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")"
8606903,What food item is not wide?,"    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        is_wide = food_patch.simple_query(""Is the food wide?"") == ""yes""
        if not is_wide:
            return food_patch.simple_query(""What food item is not wide?"")
    # If no food is not wide, query the image directly
    return image_patch.simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?,"    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?,"    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Is there an elephant near the pond?"")
    for elephant_patch in elephant_patches:
        if elephant_patch.horizontal_center > image_patch.left and elephant_patch.horizontal_center < image_patch.right:
            return ""yes""
    return ""no"""
1575941,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?,"    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    for desk_patch in desk_patches:
        floor_patches = image_patch.find(""floor"")
        for floor_patch in floor_patches:
            if floor_patch.horizontal_center < desk_patch.horizontal_center:
                return floor_patch.simple_query(""What is the color of the floor?"")
    return ""unknown"" # if no floor is found under the desk"
16654241,Is the TV on the left or on the right?,"    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    # Question assumes only one TV patch
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    tv_patch = tv_patches[0]
    if tv_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
18685233,Which kind of vehicle is to the left of the flags?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    for vehicle_patch in vehicle_patches:
        flags_patches = image_patch.find(""flags"")
        for flags_patch in flags_patches:
            if vehicle_patch.horizontal_center < flags_patch.horizontal_center:
                return vehicle_patch.simple_query(""What kind of vehicle is to the left of the flags?"")
    return ""no"""
9796068,Are there both a fence and a sheep in the picture?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?,"    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue blanket"")  # or blue towel
    return bool_to_yesno(len(blue_patches) > 0)"
1110330,Is the pillow to the left of the frog cream colored or green?,"    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    for pillow_patch in pillow_patches:
        frog_patches = image_patch.find(""frog"")
        for frog_patch in frog_patches:
            if frog_patch.horizontal_center > pillow_patch.horizontal_center:
                return pillow_patch.simple_query(""What is the color of the pillow?"") # crop would include the pillow so keep it in the query
    return ""cream"" # default to cream if no frog is found"
511507,Is the antenna on the aircraft?,"    image_patch = ImagePatch(image)
    antenna_patches = image_patch.find(""antenna"")
    # Question assumes only one antenna patch
    if len(antenna_patches) == 0:
        # If no antenna is found, query the image directly
        return image_patch.simple_query(""Is the antenna on the aircraft?"")
    aircraft_patches = image_patch.find(""aircraft"")
    # Question assumes only one aircraft patch
    if len(aircraft_patches) == 0:
        return ""no""
    for antenna_patch in antenna_patches:
        for aircraft_patch in aircraft_patches:
            if antenna_patch.horizontal_center > aircraft_patch.horizontal_center:
                return ""yes""
    return ""no"""
10464417,"In which part is the tent, the top or the bottom?","    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
10816730,Is the tree in front of the building?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the tree in front of the building?"")"
18766115,Who is walking?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is walking?"")"
10625851,Are there either any fruits or plates in the image?,"    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    for person_patch in person_patches:
        return bool_to_yesno(person_patch.verify_property(""person"", ""wearing a coat""))"
4194722,Is the man wearing a helmet?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""wearing helmet""))"
414248,"What animal are the women near the ocean riding, a pig or a horse?","    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")"
683094,Who is wearing the shirt?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for shirt_patch in shirt_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if shirt_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""Who is wearing the shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"") # crop would include the shirt so keep it in the query"
12140603,What device is to the left of the headphones?,"    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What device is to the left of the headphones?"")
    for headphones_patch in headphones_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < headphones_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the headphones?"")
    return ""none"""
5575209,The flowers are where?,"    image_patch = ImagePatch(image)
    flowers_patches = image_patch.find(""flowers"")
    # Question assumes only one flowers patch
    if len(flowers_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    return flowers_patches[0].simple_query(""The flowers are where?"")"
8773829,Which kind of furniture is made of wood?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        is_wood = furniture_patch.verify_property(""furniture"", ""wood"")
        if is_wood:
            return furniture_patch.simple_query(""Which kind of furniture is made of wood?"")
    return ""none"""
12636428,Which kind of animal is black?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What kind of animal is black?"")
    # If no black animal is found, query the image directly
    return image_patch.simple_query(""Which kind of animal is black?"")"
1020584,What animals is the car behind of?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What animals is the car behind of?"")
    for car_patch in car_patches:
        animal_patches = car_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return image_patch.simple_query(""What animals is the car behind of?"")
        return animal_patches[0].simple_query(""What kind of animal is this?"")"
11879418,The man is standing on what?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is standing on what?"")
    man_patch = man_patches[0]
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        return image_patch.simple_query(""The man is standing on what?"")
    for ground_patch in ground_patches:
        if ground_patch.vertical_center < man_patch.vertical_center:
            return ground_patch.simple_query(""What is the man standing on?"")
    return ground_patch.simple_query(""What is the man standing on?"")"
12334288,What device is to the left of the cabinet?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the left of the cabinet?"")"
691610,Is the monitor to the left of a book?,"    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Is the monitor to the left of a book?"")
    for monitor_patch in monitor_patches:
        book_patches = image_patch.find(""book"")
        for book_patch in book_patches:
            if book_patch.horizontal_center < monitor_patch.horizontal_center:
                return ""yes""
    return ""no"""
7552714,Is the color of the jacket black?,"    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    jacket_patch = jacket_patches[0]
    return bool_to_yesno(jacket_patch.verify_property(""jacket"", ""black""))"
8492422,Is the man to the left of a boy?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one man and one boy patch
    if len(man_patches) == 0 or len(boy_patches) == 0:
        # If no man or boy is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    for man_patch in man_patches:
        for boy_patch in boy_patches:
            if boy_patch.horizontal_center > man_patch.horizontal_center:
                return ""yes""
    return ""no"""
13248061,What type of device is to the left of the keyboard in the bottom of the image?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")"
18252454,What is common to the roof and the sky?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is common to the roof and the sky?"")"
14443687,What do the cat and the book have in common?,"    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    # Question assumes only one cat and one book patch
    if len(cat_patches) == 0 or len(book_patches) == 0:
        # If no cat or book is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    for cat_patch in cat_patches:
        for book_patch in book_patches:
            # Check if the cat and book are in the same image region
            if cat_patch.horizontal_center > book_patch.horizontal_center:
                return image_patch.simple_query(""What do the cat and the book have in common?"")
    return image_patch.simple_query(""What do the cat and the book have in common?"") # if no common region found, query the image directly"
14571335,Who is wearing trousers?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing trousers?"")
    for person_patch in person_patches:
        is_wearing_trousers = (person_patch.simple_query(""Is the person wearing trousers?"") == ""yes"")
        if is_wearing_trousers:
            return person_patch.simple_query(""Who is wearing trousers?"")
    # If no person is wearing trousers, query the image directly
    return image_patch.simple_query(""Who is wearing trousers?"")"
474885,Who wears a cap?,"    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    for cap_patch in cap_patches:
        return cap_patch.simple_query(""Who wears a cap?"") # crop would include the cap so keep it in the query"
141013015,"What color is the toilet, brown or white?","    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    toilet_patch = toilet_patches[0]
    return toilet_patch.best_text_match([""brown"", ""white""])"
5515816,On which side of the image is the fence?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
16774696,What is the surfer wearing?,"    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    # Question assumes only one surfer patch
    if len(surfer_patches) == 0:
        # If no surfer is found, query the image directly
        return image_patch.simple_query(""What is the surfer wearing?"")
    return surfer_patches[0].simple_query(""What is the surfer wearing?"")"
13701956,Is there any grass or sand that is not dry?,"    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    sand_patches = image_patch.find(""sand"")
    for grass_patch in grass_patches:
        if grass_patch.simple_query(""Is the grass dry?"") == ""no"":
            return ""yes""
    for sand_patch in sand_patches:
        if sand_patch.simple_query(""Is the sand dry?"") == ""no"":
            return ""yes""
    return ""no"""
11606870,Is there a cow or a zebra in the picture?,"    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?,"    image_patch = ImagePatch(image)
    fire_hydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(fire_hydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    fire_hydrant_patch = fire_hydrant_patches[0]
    return fire_hydrant_patch.simple_query(""Is the fire hydrant modern?"")"
942308,Is the cup empty or full?,"    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    for cup_patch in cup_patches:
        return cup_patch.simple_query(""Is the cup empty or full?"")"
15815976,Is the woman wearing a scarf?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    for woman_patch in woman_patches:
        is_wearing_scarf = (woman_patch.simple_query(""Is the woman wearing a scarf?"") == ""yes"")
        return bool_to_yesno(is_wearing_scarf)"
3193231,Do you see either parking meters or brooms in the picture?,"    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)"
314218,Is the sign in front of the bridge small and white?,"    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    for sign_patch in sign_patches:
        if sign_patch.horizontal_center < image_patch.horizontal_center: # in front of the bridge
            return bool_to_yesno(sign_patch.verify_property(""sign"", ""small"") and sign_patch.verify_property(""sign"", ""white""))
    return ""no"""
18130465,Does the umbrella that is not dry look orange and open?,"    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    for umbrella_patch in umbrella_patches:
        if not umbrella_patch.verify_property(""umbrella"", ""dry""):
            return bool_to_yesno(umbrella_patch.verify_property(""umbrella"", ""orange"") and umbrella_patch.verify_property(""umbrella"", ""open""))"
7920817,What's in the paper?,"    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""What's in the paper?"")
    return paper_patches[0].simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?,"    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    for bun_patch in bun_patches:
        if bun_patch.vertical_center == image_patch.upper:
            return bun_patch.simple_query(""What is on the bun in the top?"")
    return ""nothing"""
16929928,What is the fence made of?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the fence made of?"")
    return fence_patches[0].simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    for woman_patch in woman_patches:
        lady_patches = image_patch.find(""lady"")
        for lady_patch in lady_patches:
            if woman_patch.horizontal_center < lady_patch.horizontal_center:
                return ""left""
        return ""right"""
17993299,Is the horse to the left of a car?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the horse to the left of a car?"")
    for horse_patch in horse_patches:
        car_patches = image_patch.find(""car"")
        for car_patch in car_patches:
            if car_patch.horizontal_center < horse_patch.horizontal_center:
                return ""yes""
    return ""no"""
8717022,Is the small animal to the left of the vehicle that looks silver?,"    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        # If no small animal is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    for small_animal_patch in small_animal_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.simple_query(""What color is the vehicle?"") == ""silver"":
                if vehicle_patch.horizontal_center > small_animal_patch.horizontal_center:
                    return ""no""
    return ""yes"""
2998707,Which color is the chair that is on the right?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            return chair_patch.simple_query(""What color is the chair?"")
    return ""no"" # if no chair is found on the right"
171017786,Do you see any cups to the left of the monitor?,"    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    for cup_patch in cup_patches:
        monitor_patches = image_patch.find(""monitor"")
        for monitor_patch in monitor_patches:
            if monitor_patch.horizontal_center < cup_patch.horizontal_center:
                return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    glasses_patch = glasses_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center > glasses_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
1941568,What animal is in the water?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")"
17577787,Does the man's hair look short and white?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        return ""no""
    for hair_patch in hair_patches:
        if hair_patch.horizontal_center == man_patch.horizontal_center:
            return bool_to_yesno(hair_patch.simple_query(""Is the hair short and white?""))"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    bottle_patches = image_patch.find(""bottle"")
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one chair, bottle, and toilet patch
    if len(chair_patches) == 0 or len(bottle_patches) == 0 or len(toilet_patches) == 0:
        # If no chair, bottle, or toilet is found, query the image directly
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    for chair_patch in chair_patches:
        for bottle_patch in bottle_patches:
            for toilet_patch in toilet_patches:
                if chair_patch.horizontal_center < bottle_patch.horizontal_center < toilet_patch.horizontal_center:
                    return ""yes""
    return ""no"""
9825336,Which kind of furniture is the mat lying on?,"    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    return mat_patches[0].simple_query(""Which kind of furniture is the mat lying on?"")"
11222427,Do you see fences or elephants?,"    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?","    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    entertainment_center_patches = image_patch.find(""entertainment center"")
    # Question assumes only one bed and one entertainment center patch
    if len(bed_patches) == 0 or len(entertainment_center_patches) == 0:
        # If no bed or entertainment center is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    for bed_patch in bed_patches:
        if not bed_patch.verify_property(""bed"", ""white""):
            return ""bed""
    for entertainment_center_patch in entertainment_center_patches:
        if not entertainment_center_patch.verify_property(""entertainment center"", ""white""):
            return ""entertainment_center""
    return ""entertainment_center"" # default to entertainment center if no non-white bed found"
1152020,Do you see either any plate or tomato that are red?,"    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""plate"") and image_patch.find(""plate"")[0].verify_property(""plate"", ""red"")
    is_red_tomato = image_patch.exists(""tomato"") and image_patch.find(""tomato"")[0].verify_property(""tomato"", ""red"")
    return bool_to_yesno(is_red_plate or is_red_tomato)"
8961520,Who is surfing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"")"
18106780,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
1892692,What color do you think the bowl that is to the right of the person is?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    person_patch = person_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > person_patch.horizontal_center:
            return bowl_patch.simple_query(""What color is the bowl?"")
    return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")"
6952082,What color is the hair?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"")"
3768067,What color is the pot the statue is to the right of?,"    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    for statue_patch in statue_patches:
        pot_patches = image_patch.find(""pot"")
        for pot_patch in pot_patches:
            if pot_patch.horizontal_center > statue_patch.horizontal_center:
                return pot_patch.simple_query(""What color is the pot the statue is to the right of?"")
    return ""no"" # if no pot is found to the right of the statue"
17866761,Is the clear glass on the shelf of the table?,"    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    for clear_glass_patch in clear_glass_patches:
        shelf_patches = image_patch.find(""shelf"")
        for shelf_patch in shelf_patches:
            if shelf_patch.horizontal_center > clear_glass_patch.horizontal_center:
                return ""yes""
    return ""no"""
798020,Does the skirt look black or yellow?,"    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].best_text_match([""black"", ""yellow""])"
828981,How old is he?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""How old is he?"")
    for person_patch in person_patches:
        return person_patch.simple_query(""How old is he?"")"
7236463,Of what color is the book?,"    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""What color is the book?"")"
6376684,What color is the car to the left of the train car?,"    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    train_car_patches = image_patch.find(""train car"")
    # Question assumes only one car and one train car patch
    if len(car_patches) == 0 or len(train_car_patches) == 0:
        # If no car or train car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    for car_patch in car_patches:
        for train_car_patch in train_car_patches:
            if car_patch.horizontal_center < train_car_patch.horizontal_center:
                return car_patch.simple_query(""What color is the car to the left of the train car?"")
    return ""no car found"""
786798,Is this a photo of a beach?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""beach""))"
19836753,What vehicles are to the left of the fence?,"    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    for fence_patch in fence_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What type of vehicle is this?"")
    return ""none"""
15284615,Who is playing?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        return ""no""
    for remote_control_patch in remote_control_patches:
        if remote_control_patch.horizontal_center > man_patch.horizontal_center:
            return ""no""
    return man_patch.simple_query(""Is the man holding a remote control?"")"
17746396,What's the boy wearing?,"    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    boy_patch = boy_patches[0]
    return boy_patch.simple_query(""What's the boy wearing?"")"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?,"    image_patch = ImagePatch(image)
    mug_patches = image_patch.find(""mug"")
    bottle_patches = image_patch.find(""bottle"")
    tap_patches = image_patch.find(""tap"")
    
    # Check if bottle is to the right of the tap
    for bottle_patch in bottle_patches:
        for tap_patch in tap_patches:
            if bottle_patch.horizontal_center > tap_patch.horizontal_center:
                break
        else:
            continue
        break
    else:
        return ""no""  # No bottle found to the right of the tap
    
    # Check if mug is to the right of the bottle
    for mug_patch in mug_patches:
        for bottle_patch in bottle_patches:
            if mug_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""yes""
    return ""no"""
13826837,What color is the door?,"    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    return door_patches[0].simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse""))"
2964690,What is in front of the mountains?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for truck_patch in truck_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
                return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?,"    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    for scarf_patch in scarf_patches:
        if scarf_patch.simple_query(""Is the scarf made of wool?"") == ""yes"":
            if scarf_patch.simple_query(""Is the scarf long?"") == ""yes"":
                if scarf_patch.simple_query(""Is the scarf blue?"") == ""yes"":
                    return ""yes""
    return ""no"""
1189986,Is the man behind the elephant holding a surfboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    man_patch = man_patches[0]
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        return ""no""
    for elephant_patch in elephant_patches:
        if elephant_patch.horizontal_center > man_patch.horizontal_center:
            surfboard_patches = image_patch.find(""surfboard"")
            # Question assumes only one surfboard patch
            if len(surfboard_patches) == 0:
                return ""no""
            for surfboard_patch in surfboard_patches:
                if surfboard_patch.horizontal_center > man_patch.horizontal_center:
                    return ""yes""
    return ""no"""
8792466,Which color is the closed window?,"    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    for window_patch in window_patches:
        if not window_patch.verify_property(""window"", ""open""):
            return window_patch.simple_query(""What color is the window?"")
    return ""unknown"" # if no closed window is found"
10188423,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"")
    # If no person is wearing a shirt, query the image directly
    return image_patch.simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    for girl_patch in girl_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center > girl_patch.horizontal_center:
                return vegetable_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"") # if no vegetable is found to the right of the girl, query the image directly"
4929965,Is there a black racket or clock in the picture?,"    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_black_clock = image_patch.exists(""black clock"")
    return bool_to_yesno(is_black_racket or is_black_clock)"
4782038,What kind of animal is white?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What kind of animal is white?"")
    return image_patch.simple_query(""What kind of animal is white?"") # if no white animal is found, query the image directly"
14658201,Is the sheep that looks white and brown made of plastic?,"    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    for sheep_patch in sheep_patches:
        if sheep_patch.simple_query(""Is the sheep white and brown?"") == ""yes"":
            return sheep_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    return ""no"""
1441865,Do you see any boxes on the table under the grill?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    for box_patch in box_patches:
        if box_patch.vertical_center < image_patch.vertical_center and box_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1424926,What is the tag on?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person working on a laptop?"") == ""yes"":
            laptop_patches = image_patch.find(""laptop"")
            for laptop_patch in laptop_patches:
                right_patches = image_patch.find(""right"")
                for right_patch in right_patches:
                    if right_patch.horizontal_center > laptop_patch.horizontal_center:
                        furniture_patches = image_patch.find(""furniture"")
                        for furniture_patch in furniture_patches:
                            if furniture_patch.horizontal_center > right_patch.horizontal_center:
                                return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")"
3635257,Is there any freezer in this photo?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer""))"
8821026,Are there either any bags or chairs?,"    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?,"    image_patch = ImagePatch(image)
    bus_driver_patches = image_patch.find(""bus driver"")
    # Question assumes only one bus driver patch
    if len(bus_driver_patches) == 0:
        # If no bus driver is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    for bus_driver_patch in bus_driver_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if bus_driver_patch.horizontal_center > vehicle_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicle is the bus driver in?"")
    return bus_driver_patches[0].simple_query(""In what vehicle is the bus driver?"")"
17204662,What is that man in front of?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is that man in front of?"")
    man_patch = man_patches[0]
    object_patches = image_patch.find(""object"")
    for object_patch in object_patches:
        if object_patch.horizontal_center > man_patch.horizontal_center:
            return object_patch.simple_query(""What is that man in front of?"")
    return image_patch.simple_query(""What is that man in front of?"") # if no object is found, query the image directly"
380866,Are there any girls or radios?,"    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?,"    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The girl is sitting on what?"")
    for girl_patch in girl_patches:
        return girl_patch.simple_query(""What is the girl sitting on?"")"
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""white lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for lamp_patch in lamp_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center == image_patch.horizontal_center:  # assume center of the image
                if lamp_patch.horizontal_center < pillow_patch.horizontal_center:
                    return ""left""
                else:
                    return ""right""
    return ""left""  # default to left if no pillow is found"
16545552,What color do you think is the vehicle the girl is washing?,"    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    vehicle_patch = vehicle_patches[0]
    return vehicle_patch.simple_query(""What color is the vehicle?"")"
16719872,Are there motorcycles to the left of the man who is wearing a hat?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""no""
    hat_patch = hat_patches[0]
    motorcycles_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycles_patches) == 0:
        return ""no""
    for motorcycle_patch in motorcycles_patches:
        if motorcycle_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?,"    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    for garbage_can_patch in garbage_can_patches:
        person_patches = image_patch.find(""person pushing the stroller"")
        for person_patch in person_patches:
            if garbage_can_patch.horizontal_center > person_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
13711589,What do the truck and the street sign have in common?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    for truck_patch in truck_patches:
        street_sign_patches = image_patch.find(""street sign"")
        # Question assumes only one street sign patch
        if len(street_sign_patches) == 0:
            return image_patch.simple_query(""What do the truck and the street sign have in common?"")
        for street_sign_patch in street_sign_patches:
            common_property = truck_patch.verify_property(""truck"", ""has"") or street_sign_patch.verify_property(""street sign"", ""has"")
            if common_property:
                return ""They both have a specific property""
            else:
                return ""They do not have a specific property"""
10227573,Who is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return person_patch.simple_query(""Who is wearing a shirt?"")
    # If no person is wearing a shirt, query the image directly
    return image_patch.simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is the man leading?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is the man leading?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the man leading?"")
    return image_patch.simple_query(""What animal is the man leading?"")"
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?,"    image_patch = ImagePatch(image)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
    for curtain_patch in curtain_patches:
        dresser_patches = image_patch.find(""dresser"")
        for dresser_patch in dresser_patches:
            if dresser_patch.horizontal_center > curtain_patch.horizontal_center:
                right_patches = image_patch.find(""dresser"")
                for right_patch in right_patches:
                    if right_patch.horizontal_center > dresser_patch.horizontal_center:
                        return right_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
    return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")"
7190226,Does the puddle look large?,"    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    puddle_patch = puddle_patches[0]
    return bool_to_yesno(puddle_patch.verify_property(""puddle"", ""large""))"
11675152,Who throws the frisbee?,"    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Who throws the frisbee?"")
    for frisbee_patch in frisbee_patches:
        human_patches = image_patch.find(""human"")
        for human_patch in human_patches:
            if frisbee_patch.horizontal_center > human_patch.horizontal_center:
                return human_patch.simple_query(""Who throws the frisbee?"")
    return ""unknown"""
8723676,Which kind of animal is the water on?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is the water on?"")"
61046657,Do you think that traffic light is tall?,"    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    # Question assumes only one traffic light patch
    if len(traffic_light_patches) == 0:
        # If no traffic light is found, query the image directly
        return image_patch.simple_query(""Do you think that traffic light is tall?"")
    traffic_light_patch = traffic_light_patches[0]
    return bool_to_yesno(traffic_light_patch.verify_property(""traffic light"", ""tall""))"
9581034,On which side is the wine glass?,"    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    for wine_glass_patch in wine_glass_patches:
        if wine_glass_patch.horizontal_center < image_patch.horizontal_center:
            return ""left""
    return ""right"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        pizza_patches = image_patch.find(""pizza"")
        for pizza_patch in pizza_patches:
            if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
                return ""right""
            else:
                return ""left"""
18535266,Is the face mask made of the same material as the mask?,"    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    # Question assumes only one face mask patch
    if len(face_mask_patches) == 0:
        # If no face mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    for face_mask_patch in face_mask_patches:
        mask_patches = image_patch.find(""mask"")
        for mask_patch in mask_patches:
            if face_mask_patch.simple_query(""What material is the face mask made of?"") != mask_patch.simple_query(""What material is the mask made of?""):
                return ""no""
    return ""yes"""
11254215,What is the tan item of furniture?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tan item of furniture?"")"
1852010,How is the device to the right of the device on the desk called?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only two device patches
    if len(device_patches) < 2:
        # If less than two devices are found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    for i in range(len(device_patches) - 1):
        if device_patches[i].horizontal_center < device_patches[i+1].horizontal_center:
            return device_patches[i+1].simple_query(""What is your name?"")
    return ""no"" # no device to the right of the device on the desk"
1587534,Is the device on the floor black and large?,"    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < image_patch.horizontal_center:  # on the floor
            if device_patch.simple_query(""Is the device black?"") == ""yes"":
                if device_patch.simple_query(""Is the device large?"") == ""yes"":
                    return ""yes""
    return ""no"""
8470757,Are there any surfboards?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))"
11273949,Is the shirt white?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    shirt_patch = shirt_patches[0]
    return bool_to_yesno(shirt_patch.verify_property(""shirt"", ""white""))"
7475238,What's the airplane in front of?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What's the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?,"    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    for horse_patch in horse_patches:
        hose_patches = image_patch.find(""hose"")
        for hose_patch in hose_patches:
            if horse_patch.horizontal_center > hose_patch.horizontal_center:
                return horse_patch.simple_query(""Where does the horse run?"")
    return horse_patch.simple_query(""Where does the horse run?"")"
3932624,Are there either any gray chairs or laptops?,"    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the water brown or blue?"")"
9256263,Which kind of furniture is brown?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""brown""):
            return furniture_patch.simple_query(""Which kind of furniture is brown?"")
    return ""none"""
18719769,Is the man wearing glasses?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
18342439,What animal is white?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What animal is white?"")
    return ""none"""
8665725,Who is wearing a coat?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a coat?"")
    for person_patch in person_patches:
        is_wearing_coat = (person_patch.simple_query(""Is the person wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return person_patch.simple_query(""Who is wearing a coat?"")
    # If no person is wearing a coat, query the image directly
    return image_patch.simple_query(""Who is wearing a coat?"")"
5440407,What vehicle isn't black?,"    image_patch = ImagePatch(image)
    vehicles_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicles_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicles_patches:
        if vehicle_patch.simple_query(""What is the color of the vehicle?"") != ""black"":
            return vehicle_patch.simple_query(""What vehicle isn't black?"")
    return ""none"""
4104707,On which side of the picture is the oven?,"    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    for oven_patch in oven_patches:
        if oven_patch.horizontal_center < image_patch.width / 2:
            return ""left""
        else:
            return ""right"""
3126763,What is common to the logo and the letter?,"    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    letter_patches = image_patch.find(""letter"")
    # Question assumes only one logo and one letter patch
    if len(logo_patches) == 0 or len(letter_patches) == 0:
        # If no logo or letter is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    for logo_patch in logo_patches:
        for letter_patch in letter_patches:
            common_features = logo_patch.simple_query(""What is common to the logo and the letter?"")
            return common_features"
18640925,What animal is in the water the man is walking through?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in the water the man is walking through?"")
    return image_patch.simple_query(""What animal is in the water the man is walking through?"")"
125488,What is the man wearing?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"")"
5925435,What is the sidewalk made of?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?,"    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    coat_patch = coat_patches[0]
    return coat_patch.simple_query(""What is the pattern of the coat?"")"
4819547,What kind of furniture is white?,"    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What kind of furniture is white?"")
    return ""none"""
14263174,What color do you think the chair that is to the right of the other chair is?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only two chair patches
    if len(chair_patches) < 2:
        # If less than two chairs are found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    right_chair_patch = chair_patches[0]
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > right_chair_patch.horizontal_center:
            right_chair_patch = chair_patch
    return right_chair_patch.simple_query(""What color is the chair?"")"
7515210,Is the man that is to the left of the person riding the green train in front of the fence?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    for man_patch in man_patches:
        train_patches = image_patch.find(""green train"")
        for train_patch in train_patches:
            if train_patch.horizontal_center > man_patch.horizontal_center:
                return man_patch.simple_query(""Is the man in front of the fence?"")
    return ""no"""
9239936,Do the cows near the trees have white color?,"    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    for cow_patch in cow_patches:
        if cow_patch.verify_property(""cow"", ""near trees""):
            return bool_to_yesno(cow_patch.verify_property(""cow"", ""white""))"
1885178,"In which part of the image is the remote control, the bottom or the top?","    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    remote_control_patch = remote_control_patches[0]
    if remote_control_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12341631,Which color is the bag in the top part?,"    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    if bag_patch.vertical_center > image_patch.vertical_center:
        return bag_patch.simple_query(""What is the color of the bag?"")
    return image_patch.simple_query(""Which color is the bag in the top part?"")"
5532909,"What is the weather like, cloudless or maybe rainy?","    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")"
2618222,What is connected to the open laptop?,"    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""What is connected to the open laptop?"")
    for laptop_patch in laptop_patches:
        if laptop_patch.simple_query(""Is the laptop open?"") == ""yes"":
            connected_patches = image_patch.find(""cable"")
            for connected_patch in connected_patches:
                if connected_patch.horizontal_center > laptop_patch.horizontal_center:
                    return connected_patch.simple_query(""What is connected to the open laptop?"")
    return image_patch.simple_query(""What is connected to the open laptop?"") # if no cable is found, query the image directly"
3252220,Of which color is the shirt the man wears?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = man_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""What is the color of the shirt?"")"
8947801,What is in the vase?,"    image_patch = ImagePatch(image)
    vase_patches = image_patch.find(""vase"")
    # Question assumes only one vase patch
    if len(vase_patches) == 0:
        # If no vase is found, query the image directly
        return image_patch.simple_query(""What is in the vase?"")
    for vase_patch in vase_patches:
        return vase_patch.simple_query(""What is in the vase?"")"
10841562,Is the color of the pants the same as the shorts?,"    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one pants and one shorts patch
    if len(pants_patches) == 0 or len(shorts_patches) == 0:
        # If no pants or shorts are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    for pants_patch in pants_patches:
        for shorts_patch in shorts_patches:
            if pants_patch.horizontal_center > shorts_patch.horizontal_center:
                return ""no""
            if pants_patch.cropped_image[0, 0, 0] != shorts_patch.cropped_image[0, 0, 0]:
                return ""no""
    return ""yes"""
15511838,What kind of furniture is to the left of the bucket?,"    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    for bucket_patch in bucket_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"") # if no furniture is found, query the image directly"
14495306,Is there any racket to the right of the person that the woman is to the left of?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    woman_patch = woman_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return ""no""
    person_patch = person_patches[0]
    if woman_patch.horizontal_center < person_patch.horizontal_center:
        racket_patches = image_patch.find(""racket"")
        # Question assumes only one racket patch
        if len(racket_patches) == 0:
            return ""no""
        for racket_patch in racket_patches:
            if racket_patch.horizontal_center > woman_patch.horizontal_center:
                return ""yes""
    return ""no"""
14841932,Do the tiles have square shape and black color?,"    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tiles"")
    # Question assumes only one tile patch
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    for tile_patch in tile_patches:
        is_square = tile_patch.simple_query(""Is the tile shape square?"")
        is_black = tile_patch.simple_query(""Is the tile color black?"")
        return bool_to_yesno(is_square and is_black)"
41029381,What is the vehicle that is the same color as the shirt called?,"    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    shirt_patch = shirt_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""What is the color of the vehicle?"") == shirt_patch.simple_query(""What is the color of the shirt?""):
            return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    # If no vehicle is found, query the image directly
    return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")"
161027428,Are there both windows and doors in the image?,"    image_patch = ImagePatch(image)
    has_window = image_patch.exists(""window"")
    has_door = image_patch.exists(""door"")
    return bool_to_yesno(has_window and has_door)"
16478246,Does the pillow to the right of the man have green color and large size?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            is_green = pillow_patch.verify_property(""pillow"", ""green"")
            is_large = pillow_patch.verify_property(""pillow"", ""large"")
            return bool_to_yesno(is_green and is_large)"
9450308,Is the happy person wearing a hat?,"    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    for happy_patch in happy_patches:
        hat_patches = image_patch.find(""hat"")
        for hat_patch in hat_patches:
            if hat_patch.horizontal_center > happy_patch.horizontal_center:
                return ""yes""
    return ""no"""
11850389,What place is this?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
17250452,What kind of appliance is on the right of the drawer?,"    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    for drawer_patch in drawer_patches:
        appliance_patches = image_patch.find(""appliance"")
        for appliance_patch in appliance_patches:
            if appliance_patch.horizontal_center > drawer_patch.horizontal_center:
                return appliance_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    return ""none"""
14857961,Is the lady to the right of a woman?,"    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    for lady_patch in lady_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center > lady_patch.horizontal_center:
                return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?,"    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    for pan_patch in pan_patches:
        if pan_patch.horizontal_center > image_patch.width / 2:
            return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return ""none"""
9745131,Which color is the truck that is to the left of the lamps?,"    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    for truck_patch in truck_patches:
        lamp_patches = image_patch.find(""lamps"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center < truck_patch.horizontal_center:
                return truck_patch.simple_query(""What color is the truck?"")
    return truck_patches[0].simple_query(""What color is the truck?"") # crop would include the truck so keep it in the query"
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?,"    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    motorcycle_patch = motorcycle_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    for bird_patch in bird_patches:
        if bird_patch.horizontal_center < image_patch.horizontal_center:
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    return bird_patches[0].simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")"
867818,Is the man on the skateboard?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the skateboard?"")
    man_patch = man_patches[0]
    skateboard_patches = image_patch.find(""skateboard"")
    # Question assumes only one skateboard patch
    if len(skateboard_patches) == 0:
        return ""no""
    for skateboard_patch in skateboard_patches:
        if man_patch.horizontal_center > skateboard_patch.horizontal_center:
            return ""no""
        if man_patch.horizontal_center < skateboard_patch.horizontal_center:
            return ""no""
    return ""yes"""
13896221,What is on the table?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")"
1964517,What is the food that is above the white paper?,"    image_patch = ImagePatch(image)
    # contains a relation (above), so ask directly
    return image_patch.simple_query(""What is the food that is above the white paper?"")"
15705231,Is the shelf to the left of a cabinet?,"    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center < shelf_patch.horizontal_center:
                return ""yes""
    return ""no"""
15693846,Is the motorcycle parked on the grass?,"    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Is the motorcycle parked on the grass?"")
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.simple_query(""Is the motorcycle parked on the grass?"") == ""yes"":
            return ""yes""
    return ""no"""
13872995,Who is jumping?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Is this a dog or a cat?"")
    animal_patch = animal_patches[0]
    return animal_patch.simple_query(""Is this a dog or a cat?"")"
12584623,What is the person with the bag wearing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    for person_patch in person_patches:
        bag_patches = image_patch.find(""bag"")
        for bag_patch in bag_patches:
            if bag_patch.horizontal_center > person_patch.horizontal_center:
                return person_patch.simple_query(""What is the person with the bag wearing?"")
    return ""nothing"" # if no bag is found, return nothing"
7202064,"What is this, a bus or a truck?","    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this, a bus or a truck?"")"
16542208,Do you see either any beds or blankets there?,"    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)"
11700224,Do you see both lettuce and salad?,"    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)"
1067136,Is the ball on the tree?,"    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball on the tree?"")
    for ball_patch in ball_patches:
        tree_patches = image_patch.find(""tree"")
        for tree_patch in tree_patches:
            if ball_patch.vertical_center < tree_patch.vertical_center:
                return ""yes""
    return ""no"""
364079,What kind of furniture is to the right of the blanket?,"    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for blanket_patch in blanket_patches:
        right_patches = image_patch.find(""right of the blanket"")
        for right_patch in right_patches:
            return right_patch.simple_query(""What kind of furniture is to the right of the blanket?"") # crop would include the blanket so keep it in the query"
2533062,How large is the ground the zebra is standing on?,"    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    zebra_patch = zebra_patches[0]
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    ground_patch = ground_patches[0]
    return ground_patch.simple_query(""How large is the ground the zebra is standing on?"")"
19683710,The clock is inside what?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""The clock is inside what?"")
    for clock_patch in clock_patches:
        return clock_patch.simple_query(""The clock is inside what?"") # crop would include the object so keep it in the query"
15674863,Is the racket in the top part?,"    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    if racket_patches[0].vertical_center > image_patch.vertical_center / 2:
        return ""yes""
    else:
        return ""no"""
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"":
            shirt_patches = image_patch.find(""person wearing a shirt"")
            # Question assumes only one shirt patch
            if len(shirt_patches) == 0:
                return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
            shirt_patch = shirt_patches[0]
            right_of_person = shirt_patch.horizontal_center
            skateboard_patches = image_patch.find(""skateboard"")
            for skateboard_patch in skateboard_patches:
                if skateboard_patch.horizontal_center > right_of_person:
                    return ""yes""
    return ""no"""
2292637,What is the color of the shirt that the passenger is wearing?,"    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    for passenger_patch in passenger_patches:
        shirt_patches = passenger_patch.find(""shirt"")
        # Question assumes only one shirt patch
        if len(shirt_patches) == 0:
            return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
        shirt_patch = shirt_patches[0]
        return shirt_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")"
9175259,What is the chair made of?,"    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?,"    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    carrot_patch = carrot_patches[0]
    if carrot_patch.vertical_center > image_patch.vertical_center:
        return carrot_patch.simple_query(""What is the size of the carrot?"")
    else:
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")"
1638685,What is the name of the vegetable that is on the yellow food?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")"
5828256,Is the clock on a tower?,"    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock on a tower?"")
    for clock_patch in clock_patches:
        return clock_patch.simple_query(""Is the clock on a tower?"")"
18937563,What kind of animal is orange?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is orange?"")"
14360113,What is the smiling woman holding?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""smiling woman"")
    # Question assumes only one smiling woman patch
    if len(woman_patches) == 0:
        # If no smiling woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    for woman_patch in woman_patches:
        holding_patches = image_patch.find(""holding"")
        for holding_patch in holding_patches:
            if holding_patch.horizontal_center > woman_patch.horizontal_center:
                return holding_patch.simple_query(""What is the smiling woman holding?"")
    return ""nothing"""
593188,Is the hair short?,"    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    for hair_patch in hair_patches:
        return hair_patch.simple_query(""Is the hair short?"")"
10824666,Are there ladies to the left of the man that is wearing shorts?,"    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man wearing shorts"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        return ""no""
    for lady_patch in lady_patches:
        if lady_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?,"    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    for gray_car_patch in gray_car_patches:
        garbage_bin_patches = image_patch.find(""garbage bin"")
        for garbage_bin_patch in garbage_bin_patches:
            if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
                return ""left""
    return ""right"""
7574939,Is there any table or plate that is white?,"    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    plate_patches = image_patch.find(""plate"")
    for table_patch in table_patches:
        if table_patch.simple_query(""Is the table white?"") == ""yes"":
            return ""yes""
    for plate_patch in plate_patches:
        if plate_patch.simple_query(""Is the plate white?"") == ""yes"":
            return ""yes""
    return ""no"""
12252101,Is it outdoors?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))"
6943442,What cooking utensil is on the oven?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What cooking utensil is on the oven?"")"
2977077,The propeller that looks red is what pattern?,"    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    for propeller_patch in propeller_patches:
        if propeller_patch.simple_query(""Is the propeller red?"") == ""yes"":
            return propeller_patch.simple_query(""What pattern is the propeller?"")
    return ""unknown"" # if no red propeller is found"
11190306,Which kind of animal is to the left of the train?,"    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the left of the train?"")
    for animal_patch in animal_patches:
        train_patches = image_patch.find(""train"")
        for train_patch in train_patches:
            if animal_patch.horizontal_center < train_patch.horizontal_center:
                return animal_patch.simple_query(""What kind of animal is to the left of the train?"")
    return animal_patches[0].simple_query(""What kind of animal is to the left of the train?"")"
5107190,Do you see both an airplane and a truck?,"    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?,"    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    child_patch = child_patches[0]
    return child_patch.simple_query(""How old is the child?"")"
12536783,What kind of animal is in front of the pole?,"    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?,"    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        # If no glasses are found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patch = man_patches[0]
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
    return ""left"""
18655269,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?,"    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""indoors""))"
1705569,Does the pot on top of the stove look black?,"    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    for pot_patch in pot_patches:
        if pot_patch.verify_property(""pot"", ""on_top_of_stove""):
            return bool_to_yesno(pot_patch.verify_property(""pot"", ""black""))"
1028569,Are there both a cyclist and a helmet in the photo?,"    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)"
13954115,Are there any men to the left of the person in the crowd?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    for person_patch in person_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center < person_patch.horizontal_center:
                return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?,"    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    for keyboard_patch in keyboard_patches:
        device_patches = image_patch.find(""device"")
        for device_patch in device_patches:
            if device_patch.horizontal_center < keyboard_patch.horizontal_center:
                return device_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"") # if no device is found, query the image directly"
1017626,Who is inside the train?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is inside the train?"")"
7650014,Which place is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    car_patches = image_patch.find(""car"")
    # Question assumes only one person and one car patch
    if len(person_patches) == 0 or len(car_patches) == 0:
        # If no person or car is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the car doing?"")
    for person_patch in person_patches:
        for car_patch in car_patches:
            if person_patch.horizontal_center < car_patch.horizontal_center:
                return person_patch.simple_query(""What is the person to the left of the car doing?"")
    return ""no person found"""
1310985,Is the yellow vehicle to the left of a lamp?,"    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        lamp_patches = image_patch.find(""lamp"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center < yellow_vehicle_patch.horizontal_center:
                return ""yes""
    return ""no"""
646935,Which room is it?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
9495263,Is the woman to the left or to the right of the man that wears a cap?,"    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    for woman_patch in woman_patches:
        cap_patches = image_patch.find(""cap"")
        # Question assumes only one cap patch
        if len(cap_patches) == 0:
            return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
        for cap_patch in cap_patches:
            if woman_patch.horizontal_center < cap_patch.horizontal_center:
                return ""left""
        return ""right"""
946016,Do you think the animal that is sitting-down is small or large?,"    image_patch = ImagePatch(image)
    sitting_patches = image_patch.find(""sitting"")
    # Question assumes only one sitting patch
    if len(sitting_patches) == 0:
        # If no sitting is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    for sitting_patch in sitting_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > sitting_patch.horizontal_center:
                return ""large""
    return ""small"""
9617920,Do the garbage can and the pan have the same color?,"    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one garbage can and one pan patch
    if len(garbage_can_patches) == 0 or len(pan_patches) == 0:
        # If no garbage can or pan is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    garbage_can_patch = garbage_can_patches[0]
    pan_patch = pan_patches[0]
    return bool_to_yesno(garbage_can_patch.verify_property(""garbage can"", ""color"") and pan_patch.verify_property(""pan"", ""color""))"
3578781,Which kind of clothing is black?,"    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        black_patches = clothing_patch.find(""black"")
        # Question assumes only one black patch
        if len(black_patches) == 0:
            return image_patch.simple_query(""Which kind of clothing is black?"")
        for black_patch in black_patches:
            return black_patch.simple_query(""What kind of clothing is black?"") # crop would include the black so keep it in the query"
4695656,What is the lamp on?,"    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What is the lamp on?"")
    for lamp_patch in lamp_patches:
        return lamp_patch.simple_query(""What is the lamp on?"") # crop would include the lamp so keep it in the query"
13696926,The homes that are to the left of the people have what color?,"    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    people_patch = people_patches[0]
    homes_patches = image_patch.find(""homes"")
    # Question assumes only one homes patch
    if len(homes_patches) == 0:
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    for home_patch in homes_patches:
        if home_patch.horizontal_center < people_patch.horizontal_center:
            return home_patch.simple_query(""What color is the home?"")
    return image_patch.simple_query(""The homes that are to the left of the people have what color?"")"
16946079,What is on the wall?,"    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?,"    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    for napkin_patch in napkin_patches:
        if napkin_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no"""
11513897,What appliance is the label on?,"    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    for appliance_patch in appliance_patches:
        label_patches = image_patch.find(""label"")
        for label_patch in label_patches:
            return label_patch.simple_query(""What appliance is the label on?"") # crop would include the label so keep it in the query"
8240644,What is the color of the bird's tail?,"    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What is the color of the bird's tail?"")"
5245080,Is he to the right or to the left of the camera?,"    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > image_patch.horizontal_center:
            return ""right""
    return ""left"""
17800894,Are there both a window and a door in the picture?,"    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
191027873,Where is the snowboard?,"    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Where is the snowboard?"")
    return snowboard_patches[0].simple_query(""Where is the snowboard?"")"
1964079,Are the box and the paper the same color?,"    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one box and one paper patch
    if len(box_patches) == 0 or len(paper_patches) == 0:
        # If no box or paper is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    for box_patch in box_patches:
        for paper_patch in paper_patches:
            if box_patch.simple_query(""What is the color of the box?"") != paper_patch.simple_query(""What is the color of the paper?""):
                return ""no""
    return ""yes"""
