sample_id,query,generated_code
13151559,Is the large hair both white and soft?," # assumes only one large hair patch
    image_patch = ImagePatch(image)
    large_hair_patches = image_patch.find(""large hair"")
    if len(large_hair_patches) == 0:
        # If no large hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    large_hair_patch = large_hair_patches[0]
    is_white = large_hair_patch.verify_property(""large hair"", ""white"")
    is_soft = large_hair_patch.verify_property(""large hair"", ""soft"")
    return bool_to_yesno(is_white and is_soft)"
18370956,Who is eating the cupcake?," # assumes one cupcake patch
    image_patch = ImagePatch(image)
    cupcake_patches = image_patch.find(""cupcake"")
    # Question assumes only one cupcake patch
    if len(cupcake_patches) == 0:
        # If no cupcake is found, query the image directly
        return image_patch.simple_query(""Who is eating the cupcake?"")
    return cupcake_patches[0].simple_query(""Who is eating the cupcake?"")"
6436809,What is the guy wearing?," # assumes one guy patch
    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    if len(guy_patches) == 0:
        # If no guy is found, query the image directly
        return image_patch.simple_query(""What is the guy wearing?"")
    return guy_patches[0].simple_query(""What is the guy wearing?"")"
117037,Which kind of food is to the right of the cabbage?," # assumes only one cabbage patch
    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    cabbage_patch = cabbage_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center > cabbage_patch.horizontal_center:
            return food_patch.simple_query(""Which kind of food is to the right of the cabbage?"") # crop would include the food so keep it in the query
    # If no food is to the right of the cabbage, pick the first food
    return food_patches[0].simple_query(""Which kind of food is to the right of the cabbage?"")"
758936,Who wears the cap?," # returns the name of the person wearing the cap
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    return cap_patches[0].simple_query(""Who wears the cap?"")"
111046440,Who is pointing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is pointing?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Who is pointing?"")"
15804389,Is the woman's hair short or long?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""Is the woman's hair short or long?"")"
11445636,The women are watching who?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The women are watching who?"")"
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?," # assumes only one woman and one kitchen
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    woman_patch = woman_patches[0]
    dishwasher_patches = image_patch.find(""dishwasher"")
    # Question assumes only one dishwasher patch
    if len(dishwasher_patches) == 0:
        return ""no""
    dishwasher_patch = dishwasher_patches[0]
    if dishwasher_patch.horizontal_center < woman_patch.horizontal_center:
        return ""no""
    gas_stove_patches = image_patch.find(""gas stove"")
    # Question assumes only one gas stove patch
    if len(gas_stove_patches) == 0:
        return ""no""
    gas_stove_patch = gas_stove_patches[0]
    if gas_stove_patch.simple_query(""Is the gas stove inside the kitchen?"") == ""yes"":
        return ""no""
    return ""yes"""
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?," # assumes only one bed sheet and one baby
    image_patch = ImagePatch(image)
    bed_sheet_patches = image_patch.find(""bed sheet"")
    # Question assumes only one bed sheet patch
    if len(bed_sheet_patches) == 0:
        # If no bed sheet is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_sheet_patch = bed_sheet_patches[0]
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    baby_patch = baby_patches[0]
    if baby_patch.horizontal_center > bed_sheet_patch.horizontal_center:
        return bed_sheet_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")"
758958,Is there either any red pillow or snowboard?," # returns yes or no
    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)"
143816,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
13741513,Which side is the knife on?," # assumes only one knife patch
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Which side is the knife on?"")
    knife_patch = knife_patches[0]
    if knife_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17829769,What is the computer mouse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"")"
17233738,What is the toddler holding?," # assumes only one toddler patch
    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    toddler_patch = toddler_patches[0]
    return toddler_patch.simple_query(""What is the toddler holding?"")"
2951242,Is the gray shirt sleeveless or short sleeved?," # assumes only one shirt patch
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")"
15241795,Is the tank top red?," # assumes only one tank top patch
    image_patch = ImagePatch(image)
    tank_top_patches = image_patch.find(""tank top"")
    if len(tank_top_patches) == 0:
        # If no tank top is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    return bool_to_yesno(tank_top_patches[0].verify_property(""tank top"", ""red""))"
13885234,Which kind of animal is in front of the rocks?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")"
19335715,Do you see any grapes?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""grapes""))"
6455591,What type of furniture is white?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture white?"") == ""yes"":
            return furniture_patch.simple_query(""What type of furniture is white?"") # crop would include the furniture so keep it in the query
    # If no furniture is white, pick the first furniture
    return furniture_patches[0].simple_query(""What type of furniture is white?"")"
1033761,What is the blue clothing item?," # assumes only one blue clothing item
    image_patch = ImagePatch(image)
    blue_clothing_patches = image_patch.find(""blue clothing"")
    # Question assumes only one blue clothing patch
    if len(blue_clothing_patches) == 0:
        # If no blue clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    return blue_clothing_patches[0].simple_query(""What is the blue clothing item?"")"
17726504,Who is wearing the glasses?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing glasses?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no person is wearing glasses, pick the first person
    return person_patches[0].simple_query(""Who is wearing the glasses?"")"
13112902,Is the woman wearing a bracelet?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    woman_patch = woman_patches[0]
    return bool_to_yesno(woman_patch.verify_property(""woman"", ""bracelet""))"
698766,What is the food that is not white?," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        if food_patch.simple_query(""Is the food white?"") == ""no"":
            return food_patch.simple_query(""What is the food that is not white?"") # crop would include the food so keep it in the query
    # If no food is not white, pick the first food
    return food_patches[0].simple_query(""What is the food that is not white?"")"
1332276,Are there both a cup and a bottle in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)"
12633088,What color is that glove?," # assumes only one glove patch
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")"
18103787,Who is holding the helmet?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    person_patch = person_patches[0]
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        return ""no""
    for helmet_patch in helmet_patches:
        if helmet_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.simple_query(""Who is holding the helmet?"")
    return ""no"""
2143247,What is the name of the food to the left of the donut that looks little?," # assumes only one donut patch
    image_patch = ImagePatch(image)
    donut_patches = image_patch.find(""donut"")
    if len(donut_patches) == 0:
        # If no donut is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    donut_patch = donut_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < donut_patch.horizontal_center:
            return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"") # crop would include the food so keep it in the query
    return ""no"""
3767951,Is the clock to the right or to the left of the man on the left?," # assumes only one man on the left
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        return ""no""
    for clock_patch in clock_patches:
        if clock_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
17655180,What's the sticker on?," # assumes only one sticker patch
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What's the sticker on?"")
    return sticker_patches[0].simple_query(""What's the sticker on?"")"
3468831,In front of what is this table?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In front of what is this table?"")"
5888523,Do you see people to the right of the still car?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    car_patch = car_patches[0]
    people_patches = image_patch.find(""people"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > car_patch.horizontal_center:
            return ""yes""
    return ""no"""
7188981,Does the giraffe look adult?," # returns yes or no
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""adult""))"
16852802,Of what color are the pants?," # assumes only one pair of pants
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"")"
9619158,What kind of watercraft is full of men?," # assumes only one watercraft patch
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    watercraft_patch = watercraft_patches[0]
    is_full_of_men = watercraft_patch.verify_property(""watercraft"", ""full of men"")
    if is_full_of_men:
        return watercraft_patch.simple_query(""What kind of watercraft is full of men?"")
    return ""no"""
3625225,On which side of the picture are the boats?," # returns ""left"" or ""right""
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    if boat_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7126345,Does the elephant to the left of the other elephant have large size?," # assumes only one elephant patch
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    elephant_patch = elephant_patches[0]
    if elephant_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
19834124,What is the girl holding?," # assumes one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What is the girl holding?"")"
4617704,Does the toilet seat that is not down appear to be white and open?," # assumes only one toilet seat patch
    image_patch = ImagePatch(image)
    toilet_seat_patches = image_patch.find(""toilet seat"")
    if len(toilet_seat_patches) == 0:
        # If no toilet seat is found, query the image directly
        return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")
    toilet_seat_patch = toilet_seat_patches[0]
    is_white = toilet_seat_patch.verify_property(""toilet seat"", ""white"")
    is_open = toilet_seat_patch.verify_property(""toilet seat"", ""open"")
    return bool_to_yesno(is_white and is_open)"
5899539,Are there any bottles or mugs that are not purple?," # image is the image to be queried
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_mug = image_patch.exists(""mug"")
    is_purple = image_patch.exists(""purple"")
    return bool_to_yesno(is_bottle or is_mug) and not is_purple"
2631593,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
12228864,Do you see any men to the right of the person that is in the living room?," # assumes only one person in the living room
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    person_patch = person_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return ""no""
    for man_patch in man_patches:
        if man_patch.horizontal_center > person_patch.horizontal_center:
            return ""yes""
    return ""no"""
111054378,Is the small couch to the right or to the left of the bottle?," # assumes only one bottle and one couch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    bottle_patch = bottle_patches[0]
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        return ""no""
    couch_patch = couch_patches[0]
    if couch_patch.horizontal_center > bottle_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
9392411,Is the bottle to the right or to the left of the appliance on the left?," # assumes only one bottle and one appliance on the left
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    bottle_patch = bottle_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""no""
    appliance_patch = appliance_patches[0]
    if bottle_patch.horizontal_center > appliance_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
16753829,What type of animal is sitting in the container in the bottom of the photo?," # assumes only one container patch
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    container_patch = container_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    animal_patch = animal_patches[0]
    if animal_patch.vertical_center < container_patch.vertical_center:
        return animal_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")"
1345482,What is that train in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"")"
1527449,Are there cars to the right of the palm trees which are to the right of the girl?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    girl_patch = girl_patches[0]
    palm_tree_patches = image_patch.find(""palm tree"")
    for palm_tree_patch in palm_tree_patches:
        if palm_tree_patch.horizontal_center > girl_patch.horizontal_center:
            car_patches = image_patch.find(""car"")
            for car_patch in car_patches:
                if car_patch.horizontal_center > palm_tree_patch.horizontal_center:
                    return ""yes""
    return ""no"""
459445,In which part is the silver device?," # assumes only one silver device
    image_patch = ImagePatch(image)
    silver_device_patches = image_patch.find(""silver device"")
    # Question assumes only one silver device patch
    if len(silver_device_patches) == 0:
        # If no silver device is found, query the image directly
        return image_patch.simple_query(""In which part is the silver device?"")
    if silver_device_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11786203,What is the man on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"")"
5200013,Is there a brown door or chair?," # brown door or chair
    image_patch = ImagePatch(image)
    is_brown_door = image_patch.exists(""brown door"")
    is_brown_chair = image_patch.exists(""brown chair"")
    return bool_to_yesno(is_brown_door or is_brown_chair)"
131031372,What is the napkin in?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What is the napkin in?"")
    for napkin_patch in napkin_patches:
        is_in = (napkin_patch.simple_query(""Is the napkin in something?"") == ""yes"")
        if is_in:
            return napkin_patch.simple_query(""What is the napkin in?"") # crop would include the napkin so keep it in the query
    # If no napkin is in something, pick the first napkin
    return napkin_patches[0].simple_query(""What is the napkin in?"")"
1241681,Are there any people behind the white dessert?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    dessert_patches = image_patch.find(""dessert"")
    # Question assumes only one dessert patch
    if len(dessert_patches) == 0:
        # If no dessert is found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    for dessert_patch in dessert_patches:
        if dessert_patch.simple_query(""Is the dessert white?"") == ""yes"":
            people_patches = image_patch.find(""people"")
            for people_patch in people_patches:
                if people_patch.horizontal_center > dessert_patch.horizontal_center:
                    return ""yes""
    return ""no"""
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?," # assumes only one curtain and radiator
    image_patch = ImagePatch(image)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")
    curtain_patch = curtain_patches[0]
    radiator_patches = image_patch.find(""radiator"")
    # Question assumes only one radiator patch
    if len(radiator_patches) == 0:
        return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")
    radiator_patch = radiator_patches[0]
    if radiator_patch.horizontal_center > curtain_patch.horizontal_center:
        return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")"
8553578,What is the Pikachu doing?," # Pikachu is a character in the Pokémon franchise
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the Pikachu doing?"")"
16711804,"On which side is the car, the left or the right?"," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5546271,What is on the large mountains?," # assumes only one large mountain
    image_patch = ImagePatch(image)
    large_mountain_patches = image_patch.find(""large mountain"")
    # Question assumes only one large mountain patch
    if len(large_mountain_patches) == 0:
        # If no large mountain is found, query the image directly
        return image_patch.simple_query(""What is on the large mountains?"")
    return large_mountain_patches[0].simple_query(""What is on the large mountains?"")"
5107295,What is in the sky?," # returns the answer to ""What is in the sky?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")"
123768,What kind of watercraft is the fruit on?," # assumes only one fruit patch
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is the fruit on?"")
    fruit_patch = fruit_patches[0]
    watercraft_patches = image_patch.find(""watercraft"")
    if len(watercraft_patches) == 0:
        return ""no""
    for watercraft_patch in watercraft_patches:
        if watercraft_patch.horizontal_center > fruit_patch.horizontal_center:
            return watercraft_patch.simple_query(""What kind of watercraft is the fruit on?"")
    return ""no"""
1827218,Is the bottle in the bottom of the image?," # image is a numpy array
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    if bottle_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
10938155,What color is the sky?," # returns the color of the sky
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")"
4893512,Does the sail look white or red?," # returns a string
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    return sail_patches[0].best_text_match([""white"", ""red""])"
3662784,Do you see either any traffic lights or cars?," # returns yes or no
    image_patch = ImagePatch(image)
    is_traffic_light = image_patch.exists(""traffic light"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_traffic_light or is_car)"
15515711,Are there any girls to the right of the yellow helmet?," # assumes only one yellow helmet
    image_patch = ImagePatch(image)
    yellow_helmet_patches = image_patch.find(""yellow helmet"")
    # Question assumes only one yellow helmet patch
    if len(yellow_helmet_patches) == 0:
        # If no yellow helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    for yellow_helmet_patch in yellow_helmet_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if girl_patch.horizontal_center > yellow_helmet_patch.horizontal_center:
                return ""yes""
    return ""no"""
6315316,Which kind of furniture is in front of the window?," # assumes only one window patch
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is in front of the window?"")
    window_patch = window_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > window_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is in front of the window?"") # crop would include the window so keep it in the query
    # If no furniture is in front of the window, pick the first furniture
    return furniture_patches[0].simple_query(""Which kind of furniture is in front of the window?"")"
17736488,What appliance is to the left of the faucet?," # assumes only one appliance and one faucet
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    for appliance_patch in appliance_patches:
        faucet_patches = image_patch.find(""faucet"")
        for faucet_patch in faucet_patches:
            if faucet_patch.horizontal_center > appliance_patch.horizontal_center:
                return appliance_patch.simple_query(""What appliance is to the left of the faucet?"") # crop would include the faucet so keep it in the query
    # If no appliance is to the left of the faucet, pick the first appliance
    return appliance_patches[0].simple_query(""What appliance is to the left of the faucet?"")"
41050828,What is the color of the jacket?," # assumes only one jacket patch
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"")"
610914,Is the green boat to the right or to the left of the wood house?," # assumes only one boat and one house
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""green boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    boat_patch = boat_patches[0]
    house_patches = image_patch.find(""wood house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        return ""no""
    house_patch = house_patches[0]
    if boat_patch.horizontal_center > house_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13158346,Is the woman in the bottom part of the picture?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
16318707,Are there either any colorful bikes or skateboards?," # returns yes or no
    image_patch = ImagePatch(image)
    is_colorful_bike = image_patch.exists(""colorful bike"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_colorful_bike or is_skateboard)"
2805654,Is the bag to the right or to the left of the bench?," # assumes only one bag and one bench
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    bench_patches = image_patch.find(""bench"")
    if len(bag_patches) == 0 or len(bench_patches) == 0:
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    bag_patch = bag_patches[0]
    bench_patch = bench_patches[0]
    if bag_patch.horizontal_center > bench_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15315607,What do you think is in the sky?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"")"
2995829,What color is the truck near the gas station?," # assumes one truck and one gas station
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What color is the truck near the gas station?"")
    truck_patch = truck_patches[0]
    gas_station_patches = image_patch.find(""gas station"")
    # Question assumes only one gas station patch
    if len(gas_station_patches) == 0:
        return truck_patch.simple_query(""What color is the truck near the gas station?"")
    gas_station_patch = gas_station_patches[0]
    return truck_patch.simple_query(""What color is the truck near the gas station?"")"
12140940,"What are the headphones on, a sofa or a desk?"," # assumes only one headphone patch
    image_patch = ImagePatch(image)
    headphone_patches = image_patch.find(""headphones"")
    # Question assumes only one headphone patch
    if len(headphone_patches) == 0:
        # If no headphone is found, query the image directly
        return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
    headphone_patch = headphone_patches[0]
    sofa_patches = image_patch.find(""sofa"")
    # Question assumes only one sofa patch
    if len(sofa_patches) == 0:
        return ""desk""
    for sofa_patch in sofa_patches:
        if sofa_patch.horizontal_center > headphone_patch.horizontal_center:
            return ""sofa""
    return ""desk"""
727533,Does the bun look brown and toasted?," # assumes only one bun patch
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    return bool_to_yesno(bun_patches[0].verify_property(""bun"", ""brown and toasted""))"
61044602,What is in the brown basket?," # brown basket
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the brown basket?"")"
16827204,Is the marker different in color than the paper?," # assumes only one marker and one paper patch
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    paper_patches = image_patch.find(""paper"")
    if len(marker_patches) == 0 or len(paper_patches) == 0:
        # If no marker or paper is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    marker_patch = marker_patches[0]
    paper_patch = paper_patches[0]
    return bool_to_yesno(marker_patch.simple_query(""Is the marker different in color than the paper?"") == ""yes"")"
1284539,Is there a racket to the right of the man on the right side?," # assumes only one man on the right side
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1257391,What place is this?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
16223517,What do you think is the color of the large device?," # assumes only one large device
    image_patch = ImagePatch(image)
    large_device_patches = image_patch.find(""large device"")
    # Question assumes only one large device patch
    if len(large_device_patches) == 0:
        # If no large device is found, query the image directly
        return image_patch.simple_query(""What do you think is the color of the large device?"")
    return large_device_patches[0].simple_query(""What do you think is the color of the large device?"")"
1024280,Does the shirt look long sleeved or sleeveless?," # image is the image to be queried
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    return shirt_patches[0].simple_query(""Does the shirt look long sleeved or sleeveless?"")"
2769463,Which kind of animal is lying in the chair?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    chair_patch = chair_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > chair_patch.horizontal_center:
            return animal_patch.simple_query(""Which kind of animal is lying in the chair?"") # crop would include the chair so keep it in the query
    # If no animal is lying in the chair, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is lying in the chair?"")"
18503776,Is the white box to the right of the crate the chair is to the right of?," # assumes only one white box and one crate
    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    # Question assumes only one white box patch
    if len(white_box_patches) == 0:
        # If no white box is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    white_box_patch = white_box_patches[0]
    crate_patches = image_patch.find(""crate"")
    # Question assumes only one crate patch
    if len(crate_patches) == 0:
        return ""no""
    crate_patch = crate_patches[0]
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        return ""no""
    chair_patch = chair_patches[0]
    if white_box_patch.horizontal_center > crate_patch.horizontal_center and crate_patch.horizontal_center > chair_patch.horizontal_center:
        return ""yes""
    return ""no"""
3434581,Are there both a coffee table and a lamp?," # returns yes or no
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)"
19201196,Is that flower pot made of clay?," # assumes only one flower pot
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return flower_pot_patches[0].verify_property(""flower pot"", ""clay"")"
191006281,Does the sky look clear and gray?," # returns yes or no
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the sky look clear and gray?"")"
681336,Do you see hats or gloves that are white?," # returns yes or no
    image_patch = ImagePatch(image)
    is_hat = image_patch.exists(""hat"")
    is_glove = image_patch.exists(""glove"")
    is_white = image_patch.simple_query(""Is the hat or glove white?"")
    return bool_to_yesno(is_hat and is_white or is_glove and is_white)"
1300368,What is on the cabinet that is to the right of the keyboard?," # assumes only one keyboard and one cabinet
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one keyboard patch
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    keyboard_patch = keyboard_patches[0]
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.horizontal_center > keyboard_patch.horizontal_center:
            return cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")"
172394,What is the animal to the left of the tap called?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    animal_patch = animal_patches[0]
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        return animal_patch.simple_query(""What is the animal to the left of the tap called?"")
    for tap_patch in tap_patches:
        if tap_patch.horizontal_center < animal_patch.horizontal_center:
            return animal_patch.simple_query(""What is the animal to the left of the tap called?"")
    return animal_patch.simple_query(""What is the animal to the left of the tap called?"")"
738176,Is the chair on the right?," # assumes one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    chair_patch = chair_patches[0]
    return bool_to_yesno(chair_patch.horizontal_center > image_patch.horizontal_center)"
4194919,Is the child on the right of the picture?," # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    child_patch = child_patches[0]
    if child_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
3585327,Who is on the surfboard?," # assumes only one surfboard
    image_patch = ImagePatch(image)
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        # If no surfboard is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard?"")
    return surfboard_patches[0].simple_query(""Who is on the surfboard?"")"
1711172,What size are the packages the candle is on top of?," # assumes only one candle patch
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    candle_patch = candle_patches[0]
    package_patches = image_patch.find(""package"")
    # Question assumes only one package patch
    if len(package_patches) == 0:
        return ""no""
    package_patch = package_patches[0]
    return package_patch.simple_query(""What size are the packages the candle is on top of?"")"
4353895,Who is on the snowboard on the right?," # assumes only one snowboard patch
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    snowboard_patch = snowboard_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > snowboard_patch.horizontal_center:
            return person_patch.simple_query(""Who is on the snowboard on the right?"") # crop would include the snowboard so keep it in the query
    # If no person is on the snowboard, pick the first person
    return person_patches[0].simple_query(""Who is on the snowboard on the right?"")"
17929304,What is the vehicle that is on the road?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is on the road?"")
    return vehicle_patches[0].simple_query(""What is the vehicle that is on the road?"")"
1363574,What color is the crust?," # crust is a property of the bread
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return bread_patches[0].simple_query(""What color is the crust?"")"
5672474,Is the plate to the left or to the right of the beer on the left?," # assumes only one beer patch
    image_patch = ImagePatch(image)
    beer_patches = image_patch.find(""beer"")
    if len(beer_patches) == 0:
        # If no beer is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    beer_patch = beer_patches[0]
    plate_patches = image_patch.find(""plate"")
    for plate_patch in plate_patches:
        if plate_patch.horizontal_center < beer_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
11341284,What is the pattern of the mattress on the street?," # assumes only one mattress patch
    image_patch = ImagePatch(image)
    mattress_patches = image_patch.find(""mattress"")
    if len(mattress_patches) == 0:
        # If no mattress is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the mattress on the street?"")
    return mattress_patches[0].simple_query(""What is the pattern of the mattress on the street?"")"
14192693,Are there any boys behind the fence?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any boys behind the fence?"")
    for fence_patch in fence_patches:
        boy_patches = image_patch.find(""boy"")
        for boy_patch in boy_patches:
            if boy_patch.horizontal_center > fence_patch.horizontal_center:
                return ""yes""
    return ""no"""
19203395,Is the white toilet paper to the right or to the left of the toilet?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    toilet_patch = toilet_patches[0]
    white_toilet_paper_patches = image_patch.find(""white toilet paper"")
    if len(white_toilet_paper_patches) == 0:
        return ""no""
    for white_toilet_paper_patch in white_toilet_paper_patches:
        if white_toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
1194938,Are there any airplanes in front of the building?," # assumes only one building patch
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Are there any airplanes in front of the building?"")
    building_patch = building_patches[0]
    airplane_patches = image_patch.find(""airplane"")
    for airplane_patch in airplane_patches:
        if airplane_patch.horizontal_center < building_patch.horizontal_center:
            return ""yes""
    return ""no"""
5350205,How clean is the road that the car is on the side of?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    car_patch = car_patches[0]
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        return ""no""
    road_patch = road_patches[0]
    if car_patch.horizontal_center > road_patch.horizontal_center:
        return ""clean""
    else:
        return ""dirty"""
4256016,"In which part of the picture is the black van, the bottom or the top?"," # van is a type of vehicle
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
9179602,What is the person to the right of the fence doing?," # assumes only one person and one fence
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    person_patch = person_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        return ""no""
    fence_patch = fence_patches[0]
    if person_patch.horizontal_center > fence_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the right of the fence doing?"")
    return ""no"""
16471124,Does the horse have a different color than the boot?," # assumes only one horse and one boot
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    horse_patch = horse_patches[0]
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        return ""no""
    boot_patch = boot_patches[0]
    return bool_to_yesno(horse_patch.verify_property(""horse"", ""color"") != boot_patch.verify_property(""boot"", ""color""))"
958247,Is the mouse to the right of a chair?," # assumes only one mouse and one chair
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    chair_patches = image_patch.find(""chair"")
    if len(mouse_patches) == 0 or len(chair_patches) == 0:
        return image_patch.simple_query(""Is the mouse to the right of a chair?"")
    mouse_patch = mouse_patches[0]
    chair_patch = chair_patches[0]
    if mouse_patch.horizontal_center > chair_patch.horizontal_center:
        return ""yes""
    return ""no"""
11179512,The basket made of plastic is what color?," # assumes only one basket patch
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    return basket_patches[0].simple_query(""The basket made of plastic is what color?"")"
8816272,Do you see any elephant to the left of the bird?," # image is the input image
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
    for bird_patch in bird_patches:
        elephant_patches = image_patch.find(""elephant"")
        for elephant_patch in elephant_patches:
            if elephant_patch.horizontal_center < bird_patch.horizontal_center:
                return ""yes""
    return ""no"""
11168592,What is the animal in front of the lamp?," # assumes only one lamp patch
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What is the animal in front of the lamp?"")
    lamp_patch = lamp_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > lamp_patch.horizontal_center:
            return animal_patch.simple_query(""What is the animal in front of the lamp?"")
    return ""no"""
3568717,Who is wearing the jacket?," # assumes only one jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Who is wearing the jacket?"")
    return jacket_patches[0].simple_query(""Who is wearing the jacket?"")"
7398502,What is the food to the left of the girl in the bottom of the photo?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    girl_patch = girl_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < girl_patch.horizontal_center and food_patch.vertical_center < girl_patch.vertical_center:
            return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    return ""no"""
5145864,What is the device that the camera is in front of?," # assumes only one camera patch
    image_patch = ImagePatch(image)
    camera_patches = image_patch.find(""camera"")
    if len(camera_patches) == 0:
        # If no camera is found, query the image directly
        return image_patch.simple_query(""What is the device that the camera is in front of?"")
    camera_patch = camera_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > camera_patch.horizontal_center:
            return device_patch.simple_query(""What is the device that the camera is in front of?"")
    return ""no"""
788143,Is the man on the surfboard?," # assumes only one man and one surfboard
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one man and one surfboard
    if len(man_patches) == 0 or len(surfboard_patches) == 0:
        # If no man or surfboard is found, query the image directly
        return image_patch.simple_query(""Is the man on the surfboard?"")
    man_patch = man_patches[0]
    surfboard_patch = surfboard_patches[0]
    return bool_to_yesno(man_patch.horizontal_center == surfboard_patch.horizontal_center)"
15854501,What device has the same color as the device in the box?," # assumes only one box
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    box_patch = box_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    for device_patch in device_patches:
        if device_patch.verify_property(""device"", ""color"") == box_patch.verify_property(""box"", ""color""):
            return device_patch.simple_query(""What device has the same color as the device in the box?"")
    return image_patch.simple_query(""What device has the same color as the device in the box?"")"
3228067,What is the child wearing?," # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    return child_patches[0].simple_query(""What is the child wearing?"")"
6817336,Is the blue sky behind a cathedral?," # assumes only one cathedral patch
    image_patch = ImagePatch(image)
    cathedral_patches = image_patch.find(""cathedral"")
    if len(cathedral_patches) == 0:
        # If no cathedral is found, query the image directly
        return image_patch.simple_query(""Is the blue sky behind a cathedral?"")
    cathedral_patch = cathedral_patches[0]
    sky_patches = image_patch.find(""sky"")
    for sky_patch in sky_patches:
        if sky_patch.horizontal_center > cathedral_patch.horizontal_center:
            return ""yes""
    return ""no"""
6347271,"In which part of the image is the yellow pepper, the bottom or the top?"," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    yellow_pepper_patches = image_patch.find(""yellow pepper"")
    # Question assumes only one yellow pepper patch
    if len(yellow_pepper_patches) == 0:
        # If no yellow pepper is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    if yellow_pepper_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
296230,What animal is the woman feeding?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal is the woman feeding?"")
    woman_patch = woman_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > woman_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the woman feeding?"")
    return ""no"""
3427727,On which side is the bucket?," # assumes only one bucket patch
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    bucket_patch = bucket_patches[0]
    if bucket_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
31050314,Is the small chimney in the bottom part of the picture?," # assumes only one chimney
    image_patch = ImagePatch(image)
    chimney_patches = image_patch.find(""chimney"")
    # Question assumes only one chimney patch
    if len(chimney_patches) == 0:
        # If no chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    chimney_patch = chimney_patches[0]
    if chimney_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3503396,Are the pants purple?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    return bool_to_yesno(pants_patches[0].verify_property(""pants"", ""purple""))"
11742862,Which kind of furniture is to the right of the paper towels?," # assumes only one paper towel patch
    image_patch = ImagePatch(image)
    paper_towel_patches = image_patch.find(""paper towel"")
    if len(paper_towel_patches) == 0:
        # If no paper towel is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    paper_towel_patch = paper_towel_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > paper_towel_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"") # crop would include the paper towel so keep it in the query
    return ""no"""
5891809,What kind of furniture is gray?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""What kind of furniture is gray?"")"
5370528,Is the hair white and long?," # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    hair_patch = hair_patches[0]
    return bool_to_yesno(hair_patch.verify_property(""hair"", ""white"") and hair_patch.verify_property(""hair"", ""long""))"
781153,Do you see trains near the lamp post that looks white?," # assumes only one lamp post
    image_patch = ImagePatch(image)
    lamp_post_patches = image_patch.find(""lamp post"")
    # Question assumes only one lamp post patch
    if len(lamp_post_patches) == 0:
        # If no lamp post is found, query the image directly
        return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")
    for lamp_post_patch in lamp_post_patches:
        if lamp_post_patch.simple_query(""Is the lamp post white?"") == ""yes"":
            train_patches = image_patch.find(""train"")
            for train_patch in train_patches:
                if train_patch.horizontal_center > lamp_post_patch.horizontal_center:
                    return ""yes""
    return ""no"""
5543456,Is the container to the left of the person that wears bracelets?," # assumes only one person and one container
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
    person_patch = person_patches[0]
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        return ""no""
    container_patch = container_patches[0]
    if container_patch.horizontal_center < person_patch.horizontal_center:
        return ""yes""
    return ""no"""
163134,What do you think is on the roof?," # image is the image to be queried
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"")"
5603075,Is the shoe white or brown?," # assumes only one shoe patch
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
5511395,What is wrapped in paper?," # returns the name of the object wrapped in paper
    image_patch = ImagePatch(image)
    wrapped_patches = image_patch.find(""wrapped"")
    # Question assumes only one wrapped patch
    if len(wrapped_patches) == 0:
        # If no wrapped is found, query the image directly
        return image_patch.simple_query(""What is wrapped in paper?"")
    return wrapped_patches[0].simple_query(""What is wrapped in paper?"")"
5611256,Are there any couches in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch""))"
1162826,The man is in what?," # returns the name of the object the man is in
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is in what?"")
    man_patch = man_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return ""no""
    for object_patch in object_patches:
        if object_patch.horizontal_center > man_patch.horizontal_center:
            return object_patch.simple_query(""The man is in what?"") # crop would include the object so keep it in the query
    return ""no"""
81020685,Which color is the small house?," # assumes only one small house
    image_patch = ImagePatch(image)
    small_house_patches = image_patch.find(""small house"")
    if len(small_house_patches) == 0:
        # If no small house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    return small_house_patches[0].simple_query(""Which color is the small house?"")"
19640724,Who is in the bathroom?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is in the bathroom?"")
    return person_patches[0].simple_query(""Who is in the bathroom?"")"
289960,Do you see a racket to the right of the boy that is looking at the tie?," # assumes only one boy and one tie
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    boy_patch = boy_patches[0]
    tie_patches = image_patch.find(""tie"")
    # Question assumes only one tie patch
    if len(tie_patches) == 0:
        return ""no""
    tie_patch = tie_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > boy_patch.horizontal_center and racket_patch.horizontal_center > tie_patch.horizontal_center:
            return ""yes""
    return ""no"""
9957748,Does the hair appear to be long and brown?," # returns yes or no
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair appear to be long and brown?"")
    return bool_to_yesno(hair_patches[0].verify_property(""hair"", ""long"") and hair_patches[0].verify_property(""hair"", ""brown""))"
21031610,What is the shoe that looks black and white resting on?," # assumes only one shoe patch
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    shoe_patch = shoe_patches[0]
    resting_on_patches = image_patch.find(""resting on"")
    for resting_on_patch in resting_on_patches:
        if shoe_patch.simple_query(""Is the shoe that looks black and white resting on this?"") == ""yes"":
            return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"") # crop would include the resting on so keep it in the query
    # If no shoe is resting on anything, pick the first shoe
    return shoe_patches[0].simple_query(""What is the shoe that looks black and white resting on?"")"
12801921,What is the glass on?," # assumes only one glass patch
    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is the glass on?"")
    glass_patch = glass_patches[0]
    return glass_patch.simple_query(""What is the glass on?"")"
16243948,Is the white pillow under the black animal?," # assumes only one pillow and one animal
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    pillow_patch = pillow_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""no""
    animal_patch = animal_patches[0]
    if pillow_patch.vertical_center < animal_patch.vertical_center:
        return ""yes""
    return ""no"""
457770,What kind of clothing is striped?," # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    return clothing_patches[0].simple_query(""What kind of clothing is striped?"")"
12603153,Are the child's eyes blue and open?," # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    child_patch = child_patches[0]
    is_blue = child_patch.verify_property(""child"", ""blue"")
    is_open = child_patch.verify_property(""child"", ""open"")
    return bool_to_yesno(is_blue and is_open)"
9480973,What is located on top of the tub?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is located on top of the tub?"")"
8399764,Is the fork to the right or to the left of the white plate?," # assumes only one fork and one white plate
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    fork_patch = fork_patches[0]
    white_plate_patches = image_patch.find(""white plate"")
    # Question assumes only one white plate patch
    if len(white_plate_patches) == 0:
        return ""no""
    white_plate_patch = white_plate_patches[0]
    if fork_patch.horizontal_center > white_plate_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13420253,On which side of the photo is the chair?," # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4747006,What is the label on?," # assumes only one label
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    # Question assumes only one label patch
    if len(label_patches) == 0:
        # If no label is found, query the image directly
        return image_patch.simple_query(""What is the label on?"")
    return label_patches[0].simple_query(""What is the label on?"")"
3322787,What bird is to the left of the person that is wearing a shirt?," # assumes only one person and one bird
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return ""no""
    for bird_patch in bird_patches:
        if bird_patch.horizontal_center < person_patch.horizontal_center:
            return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"") # crop would include the person so keep it in the query
    return ""no"""
6399594,On which side is the man?," # returns left or right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    if man_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6930120,Is the glass bowl on the right or on the left?," # assumes only one glass bowl
    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    if len(glass_bowl_patches) == 0:
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    glass_bowl_patch = glass_bowl_patches[0]
    if glass_bowl_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
12619961,What vehicles are to the left of the taxi?," # assumes only one taxi patch
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    taxi_patch = taxi_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < taxi_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicles are to the left of the taxi?"") # crop would include the taxi so keep it in the query
    return ""no"""
13362315,Is the basket on the shelf black and empty?," # assumes only one basket and one shelf
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    basket_patch = basket_patches[0]
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        return ""no""
    shelf_patch = shelf_patches[0]
    is_black = (basket_patch.simple_query(""Is the basket black?"") == ""yes"")
    is_empty = (basket_patch.simple_query(""Is the basket empty?"") == ""yes"")
    return bool_to_yesno(is_black and is_empty)"
3830854,What is the animal that is standing next to the donkey that is standing in the hay?," # assumes only one donkey patch
    image_patch = ImagePatch(image)
    donkey_patches = image_patch.find(""donkey"")
    if len(donkey_patches) == 0:
        # If no donkey is found, query the image directly
        return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    donkey_patch = donkey_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > donkey_patch.horizontal_center:
            return animal_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")
    return ""no"""
18382324,Is this a bed or a table?," # assumes only one bed or table
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    table_patches = image_patch.find(""table"")
    if len(bed_patches) > 0:
        return bed_patches[0].simple_query(""Is this a bed or a table?"")
    elif len(table_patches) > 0:
        return table_patches[0].simple_query(""Is this a bed or a table?"")
    else:
        return image_patch.simple_query(""Is this a bed or a table?"")"
18104571,"Which animal is that, a bird or a cat?"," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    animal_patch = animal_patches[0]
    is_bird = animal_patch.verify_property(""animal"", ""bird"")
    is_cat = animal_patch.verify_property(""animal"", ""cat"")
    if is_bird:
        return ""bird""
    elif is_cat:
        return ""cat""
    else:
        return ""unknown"""
2913379,Do you see any fence or pot?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)"
9294271,What is in front of the fence the zebra is kept in?," # assumes only one zebra patch
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")
    zebra_patch = zebra_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        return ""no""
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center > zebra_patch.horizontal_center:
            return fence_patch.simple_query(""What is in front of the fence the zebra is kept in?"")
    return ""no"""
10741434,What is the vegetable that is on top of the plate called?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    plate_patch = plate_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.vertical_center > plate_patch.vertical_center:
            return vegetable_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    return ""no"""
765962,Where is the car?," # returns the answer to ""Where is the car?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the car?"")"
12399262,Is there either a yellow truck or airplane?," # returns yes or no
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)"
13964213,Is the man on the left of the photo?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
16171369,What is covered in the snow?," # assumes only one snow patch
    image_patch = ImagePatch(image)
    snow_patches = image_patch.find(""snow"")
    if len(snow_patches) == 0:
        # If no snow is found, query the image directly
        return image_patch.simple_query(""What is covered in the snow?"")
    return snow_patches[0].simple_query(""What is covered in the snow?"")"
181055844,On which side is the plastic bottle?," # assumes only one plastic bottle
    image_patch = ImagePatch(image)
    plastic_bottle_patches = image_patch.find(""plastic bottle"")
    # Question assumes only one plastic bottle patch
    if len(plastic_bottle_patches) == 0:
        # If no plastic bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    plastic_bottle_patch = plastic_bottle_patches[0]
    if plastic_bottle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5858491,Do you see any ropes on the fence that is on the left of the picture?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    for fence_patch in fence_patches:
        if fence_patch.left < image_patch.left:
            rope_patches = image_patch.find(""rope"")
            for rope_patch in rope_patches:
                if rope_patch.horizontal_center < fence_patch.horizontal_center:
                    return ""yes""
    return ""no"""
17834539,Are there any lamps in the scene?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp""))"
15658176,Who is wearing a helmet?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""wearing helmet""):
            return person_patch.simple_query(""Who is wearing a helmet?"")
    return ""no one"""
14372400,Does that coat have red color?," # coat is a property
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red""))"
411886,Are there any curtains or blankets in this scene?," # returns yes or no
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)"
16921850,What is the item of furniture to the left of the remote that the man is holding called?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    remote_patches = image_patch.find(""remote"")
    if len(remote_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    for remote_patch in remote_patches:
        if remote_patch.horizontal_center < man_patch.horizontal_center:
            return remote_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")"
51039491,Is the fence black or red?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    return fence_patches[0].best_text_match([""black"", ""red""])"
7425912,What animal is standing in the field?," # assumes one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing in the field?"")
    return animal_patches[0].simple_query(""What animal is standing in the field?"")"
13136338,What animal is in front of the dog which is to the right of the bird?," # assumes only one dog and one bird
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    dog_patch = dog_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    bird_patch = bird_patches[0]
    if bird_patch.horizontal_center > dog_patch.horizontal_center:
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")"
3775066,Which color are the cabinets in the bottom of the picture?," # assumes only one cabinet
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    return cabinet_patches[0].simple_query(""Which color are the cabinets in the bottom of the picture?"")"
17206239,Is the happy girl to the right of a player?," # assumes only one happy girl and one player
    image_patch = ImagePatch(image)
    happy_girl_patches = image_patch.find(""happy girl"")
    if len(happy_girl_patches) == 0:
        return image_patch.simple_query(""Is the happy girl to the right of a player?"")
    happy_girl_patch = happy_girl_patches[0]
    player_patches = image_patch.find(""player"")
    if len(player_patches) == 0:
        return image_patch.simple_query(""Is the happy girl to the right of a player?"")
    player_patch = player_patches[0]
    if happy_girl_patch.horizontal_center > player_patch.horizontal_center:
        return ""yes""
    return ""no"""
2992517,"What piece of furniture is not wooden, the table or the chair?"," # assumes only one table and one chair
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    table_patch = table_patches[0]
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        return ""table""
    chair_patch = chair_patches[0]
    if table_patch.verify_property(""table"", ""wooden"") and chair_patch.verify_property(""chair"", ""wooden""):
        return ""table""
    return ""chair"""
1827558,Which side of the image is the kettle on?," # returns ""left"" or ""right""
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    if kettle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2785208,Where is the man?," # returns the man's position
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    man_patch = man_patches[0]
    return f""The man is at position ({man_patch.horizontal_center}, {man_patch.vertical_center})"""
6623967,Is the baby near the countertop chewing a computer mouses?," # assumes only one baby patch
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouses?"")
    baby_patch = baby_patches[0]
    countertop_patches = image_patch.find(""countertop"")
    if len(countertop_patches) == 0:
        return ""no""
    for countertop_patch in countertop_patches:
        if baby_patch.horizontal_center < countertop_patch.horizontal_center:
            return ""yes""
    return ""no"""
12804807,Is the small bottle open or closed?," # assumes only one bottle
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    return bottle_patches[0].simple_query(""Is the small bottle open or closed?"")"
18437691,Is the clock small or large?," # clock is a noun
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    return clock_patches[0].simple_query(""Is the clock small or large?"")"
9482318,Are there either any glasses or bottles in this photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_glasses = image_patch.exists(""glasses"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glasses or is_bottle)"
12362819,Is the sky blue or dark?," # assumes only one sky patch
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky blue or dark?"")
    return sky_patches[0].best_text_match([""blue"", ""dark""])"
171054254,What is the piece of furniture to the right of the shelf the cup is on called?," # assumes only one shelf and one cup
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    shelf_patch = shelf_patches[0]
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    cup_patch = cup_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    furniture_patch = furniture_patches[0]
    if furniture_patch.horizontal_center > cup_patch.horizontal_center:
        return furniture_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")"
1416636,Are there both bridges and chandeliers in this photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)"
1997041,"Which side is the car on, the left or the right?"," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6110985,Is there any plate or orange in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)"
612894,Do you see any doors?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""door""))"
13562221,What's the bear on?," # assumes only one bear patch
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What's the bear on?"")
    return bear_patches[0].simple_query(""What's the bear on?"")"
9536851,Is the woman in front of the trees holding scissors?," # assumes only one woman and one tree
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")
    woman_patch = woman_patches[0]
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        return ""no""
    tree_patch = tree_patches[0]
    if woman_patch.horizontal_center < tree_patch.horizontal_center:
        return ""yes""
    return ""no"""
9682405,What is on the machine?," # assumes only one machine patch
    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    if len(machine_patches) == 0:
        # If no machine is found, query the image directly
        return image_patch.simple_query(""What is on the machine?"")
    return machine_patches[0].simple_query(""What is on the machine?"")"
8649435,What is on the white wall?," # assumes only one white wall
    image_patch = ImagePatch(image)
    white_wall_patches = image_patch.find(""white wall"")
    # Question assumes only one white wall patch
    if len(white_wall_patches) == 0:
        # If no white wall is found, query the image directly
        return image_patch.simple_query(""What is on the white wall?"")
    return white_wall_patches[0].simple_query(""What is on the white wall?"")"
12487033,Does the logo look red?," # logo is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the logo look red?"")"
14301289,What type of vehicle is to the left of the white vehicle?," # assumes only one white vehicle
    image_patch = ImagePatch(image)
    white_vehicle_patches = image_patch.find(""white vehicle"")
    # Question assumes only one white vehicle patch
    if len(white_vehicle_patches) == 0:
        # If no white vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    white_vehicle_patch = white_vehicle_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < white_vehicle_patch.horizontal_center:
            return vehicle_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"") # crop would include the vehicle so keep it in the query
    return ""no"""
523976,Which kind of vehicle is large?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    return vehicle_patches[0].simple_query(""Which kind of vehicle is large?"")"
3423213,Who is in front of the trees?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"")"
18107197,Is the ottoman to the right or to the left of the brown chair?," # assumes one chair and one ottoman
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    chair_patch = chair_patches[0]
    ottoman_patches = image_patch.find(""ottoman"")
    # Question assumes only one ottoman patch
    if len(ottoman_patches) == 0:
        return ""no""
    ottoman_patch = ottoman_patches[0]
    if ottoman_patch.horizontal_center > chair_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
5716578,Is there a laptop on the bed near the magazines?," # assumes only one laptop and one bed
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one laptop and one bed patch
    if len(laptop_patches) == 0 or len(bed_patches) == 0:
        # If no laptop or bed is found, query the image directly
        return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")
    laptop_patch = laptop_patches[0]
    bed_patch = bed_patches[0]
    if laptop_patch.horizontal_center > bed_patch.horizontal_center and laptop_patch.vertical_center > bed_patch.vertical_center:
        return ""yes""
    return ""no"""
8215791,Is the porcelain toilet to the left or to the right of the small trash can?," # assumes only one toilet and one trash can
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""porcelain toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    toilet_patch = toilet_patches[0]
    trash_can_patches = image_patch.find(""small trash can"")
    # Question assumes only one trash can patch
    if len(trash_can_patches) == 0:
        return ""no""
    trash_can_patch = trash_can_patches[0]
    if toilet_patch.horizontal_center < trash_can_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17528455,What is in front of the wall?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"")"
4896890,Do the goggles and the gloves have a different colors?," # assumes only one pair of goggles and gloves
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one pair of goggles
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"")
    goggles_patch = goggles_patches[0]
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one pair of gloves
    if len(gloves_patches) == 0:
        return ""no""
    gloves_patch = gloves_patches[0]
    return bool_to_yesno(goggles_patch.verify_property(""goggles"", ""color"") != gloves_patch.verify_property(""gloves"", ""color""))"
947724,Is there any purple pillow or kite in this photograph?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_purple_pillow = image_patch.exists(""purple pillow"")
    is_kite = image_patch.exists(""kite"")
    return bool_to_yesno(is_purple_pillow or is_kite)"
5679522,"What are the people to the right of the man doing, standing or sitting?"," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > man_patch.horizontal_center:
            return people_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    return ""no"""
15492262,Which kind of furniture is white?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""Which kind of furniture is white?"")
    return ""no"""
151032547,Is the bear on the right side?," # assumes only one bear patch
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    return bool_to_yesno(bear_patches[0].horizontal_center > image_patch.horizontal_center)"
5698674,Are there either any planters or benches?," # returns yes or no
    image_patch = ImagePatch(image)
    is_planter = image_patch.exists(""planter"")
    is_bench = image_patch.exists(""bench"")
    return bool_to_yesno(is_planter or is_bench)"
19397103,What is the person that is standing staring at?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person that is standing staring at?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""What is the person that is standing staring at?"")"
11630681,What is the color of the necklace?," # assumes only one necklace patch
    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    if len(necklace_patches) == 0:
        # If no necklace is found, query the image directly
        return image_patch.simple_query(""What is the color of the necklace?"")
    return necklace_patches[0].simple_query(""What is the color of the necklace?"")"
248245,Is the table to the left or to the right of the fence?," # assumes only one table and one fence
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    table_patch = table_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        return ""no""
    fence_patch = fence_patches[0]
    if table_patch.horizontal_center < fence_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
837033,Are there round windows or doors?," # returns yes or no
    image_patch = ImagePatch(image)
    is_round_window = image_patch.exists(""round window"")
    is_round_door = image_patch.exists(""round door"")
    return bool_to_yesno(is_round_window or is_round_door)"
5249150,Are there any bears or napkins in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)"
13908598,What kind of vehicle is to the left of the person?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    person_patch = person_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < person_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    return ""no"""
61006749,Who is dressed in pink?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is dressed in pink?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person dressed in pink?"") == ""yes"":
            return person_patch.simple_query(""Who is dressed in pink?"") # crop would include the pink so keep it in the query
    # If no person is dressed in pink, pick the first person
    return person_patches[0].simple_query(""Who is dressed in pink?"")"
6122955,Does the pillow have yellow color?," # returns yes or no
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return bool_to_yesno(pillow_patches[0].verify_property(""pillow"", ""yellow""))"
6861738,Is the old woman to the right or to the left of the faucet?," # assumes only one old woman and one faucet
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    if len(old_woman_patches) == 0:
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    old_woman_patch = old_woman_patches[0]
    faucet_patches = image_patch.find(""faucet"")
    if len(faucet_patches) == 0:
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    faucet_patch = faucet_patches[0]
    if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
15833048,Which kind of animal is on the road?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is on the road?"")
    return animal_patches[0].simple_query(""Which kind of animal is on the road?"")"
9524339,What animal is large?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""large""):
            return animal_patch.simple_query(""What animal is large?"")
    return ""no"""
18255749,How clean are the sheets the pillow is to the right of?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheet_patches = image_patch.find(""sheet"")
    for sheet_patch in sheet_patches:
        if sheet_patch.horizontal_center > pillow_patch.horizontal_center:
            return sheet_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    return ""no"""
19797097,What's the man wearing?," # returns the man's clothing
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
6899090,Is the man to the right or to the left of the appliance that looks white?," # assumes one man and one appliance
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one man and one appliance patch
    if len(man_patches) == 0 or len(appliance_patches) == 0:
        # If no man or appliance is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patch = appliance_patches[0]
    if man_patch.horizontal_center > appliance_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
3357701,Does the dog to the right of the other dog have white color?," # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    for dog_patch in dog_patches:
        if dog_patch.horizontal_center > dog_patches[0].horizontal_center:
            return dog_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    return ""no"""
2829418,What's the girl holding?," # assumes one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What's the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What's the girl holding?"")"
15930109,Which kind of vehicle is blue?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""blue""):
            return vehicle_patch.simple_query(""Which kind of vehicle is blue?"")
    return ""no"""
1525382,What type of vegetable is on the food with the cheese?," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    food_patch = food_patches[0]
    cheese_patches = image_patch.find(""cheese"")
    # Question assumes only one cheese patch
    if len(cheese_patches) == 0:
        return ""no""
    for cheese_patch in cheese_patches:
        if cheese_patch.horizontal_center > food_patch.horizontal_center:
            return food_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    return ""no"""
8548980,Are there either players or hand soaps?," # returns yes or no
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)"
4438348,"Which kind of food is not made, the sandwich or the croissant?"," # assumes only one sandwich and one croissant
    image_patch = ImagePatch(image)
    sandwich_patches = image_patch.find(""sandwich"")
    # Question assumes only one sandwich patch
    if len(sandwich_patches) == 0:
        # If no sandwich is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    croissant_patches = image_patch.find(""croissant"")
    # Question assumes only one croissant patch
    if len(croissant_patches) == 0:
        return ""sandwich""
    return croissant_patches[0].simple_query(""Which kind of food is not made, the sandwich or the croissant?"") # crop would include the croissant so keep it in the query"
6423906,Which kind of food is on the plate?," # crop would include the plate so keep it in the query
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    return food_patches[0].simple_query(""Which kind of food is on the plate?"")"
1993231,Are the animals in the image of different types?," # returns yes or no
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    animal_types = set()
    for animal_patch in animal_patches:
        animal_types.add(animal_patch.simple_query(""What type of animal is this?""))
    return bool_to_yesno(len(animal_types) > 1)"
13949656,Are there any people to the left of the tray?," # assumes only one tray patch
    image_patch = ImagePatch(image)
    tray_patches = image_patch.find(""tray"")
    if len(tray_patches) == 0:
        # If no tray is found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for tray_patch in tray_patches:
        people_patches = image_patch.find(""people"")
        for people_patch in people_patches:
            if people_patch.horizontal_center < tray_patch.horizontal_center:
                return ""yes""
    return ""no"""
184032,Does the fresh pineapple appear to be ripe?," # image is a numpy array
    image_patch = ImagePatch(image)
    pineapple_patches = image_patch.find(""pineapple"")
    # Question assumes only one pineapple patch
    if len(pineapple_patches) == 0:
        # If no pineapple is found, query the image directly
        return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")
    return bool_to_yesno(pineapple_patches[0].verify_property(""pineapple"", ""ripe""))"
9392591,Are there chairs or smoothies?," # assumes only one chair or smoothie
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)"
4285170,Which kind of animal is to the right of the sheep?," # assumes only one sheep patch
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    sheep_patch = sheep_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > sheep_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is to the right of the sheep?"") # crop would include the sheep so keep it in the query
    # If no animal is to the right of the sheep, query the image directly
    return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")"
9896138,Are there any boxes to the left of the screen in the picture?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in box_patches:
        if box_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
1400333,What do you think is the man on?," # returns the man's name
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What do you think is the man on?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What do you think is the man on?"")"
13105327,Is the boot white or orange?," # assumes only one boot patch
    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    return boot_patches[0].best_text_match([""white"", ""orange""])"
3659880,Does the wood boat have silver color?," # returns yes or no
    image_patch = ImagePatch(image)
    wood_boats_patches = image_patch.find(""wood boat"")
    # Question assumes only one wood boat patch
    if len(wood_boats_patches) == 0:
        # If no wood boat is found, query the image directly
        return image_patch.simple_query(""Does the wood boat have silver color?"")
    return bool_to_yesno(wood_boats_patches[0].verify_property(""wood boat"", ""silver""))"
1827802,Is the red pot on the appliance to the right of the mixer?," # assumes one mixer patch
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    for red_pot_patch in red_pot_patches:
        mixer_patches = image_patch.find(""mixer"")
        for mixer_patch in mixer_patches:
            if mixer_patch.horizontal_center < red_pot_patch.horizontal_center:
                return ""yes""
    return ""no"""
14809102,The phone that is in front of the camera is of what color?," # assumes only one phone patch
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    return phone_patches[0].simple_query(""The phone that is in front of the camera is of what color?"")"
61001545,What type of food is to the left of the silver spoon?," # assumes only one silver spoon patch
    image_patch = ImagePatch(image)
    silver_spoon_patches = image_patch.find(""silver spoon"")
    if len(silver_spoon_patches) == 0:
        # If no silver spoon is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    silver_spoon_patch = silver_spoon_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < silver_spoon_patch.horizontal_center:
            return food_patch.simple_query(""What type of food is to the left of the silver spoon?"") # crop would include the food so keep it in the query
    # If no food is to the left of the silver spoon, pick the first food
    return food_patches[0].simple_query(""What type of food is to the left of the silver spoon?"")"
799463,Are there both a window and a door in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
11260725,Does the water have small size and white color?," # water is a property
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Does the water have small size and white color?"")
    return bool_to_yesno(water_patches[0].verify_property(""water"", ""small"") and water_patches[0].verify_property(""water"", ""white""))"
2397653,Are there any fences that are white?," # returns yes or no
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any fences that are white?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""yes""
    return ""no"""
1554603,Who is holding the animal?," # assumes one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    animal_patch = animal_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center < animal_patch.horizontal_center:
            return person_patch.simple_query(""Who is holding the animal?"") # crop would include the animal so keep it in the query
    # If no person is holding the animal, pick the first person
    return person_patches[0].simple_query(""Who is holding the animal?"")"
11606818,Is the man to the right or to the left of the people the stroller is to the right of?," # assumes only one stroller patch
    image_patch = ImagePatch(image)
    stroller_patches = image_patch.find(""stroller"")
    # Question assumes only one stroller patch
    if len(stroller_patches) == 0:
        # If no stroller is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    stroller_patch = stroller_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    people_patch = people_patches[0]
    if stroller_patch.horizontal_center > people_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
8988476,What kind of furniture is presented in this photo?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is presented in this photo?"")
    return furniture_patches[0].simple_query(""What kind of furniture is presented in this photo?"")"
10695214,What is the man with the backpack holding?," # assumes one man and one backpack
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        return ""no""
    backpack_patch = backpack_patches[0]
    return backpack_patch.simple_query(""What is the man with the backpack holding?"")"
91058050,Are there both mouse pads and computer mice in the photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_mouse = image_patch.exists(""mouse"")
    return bool_to_yesno(is_mouse_pad and is_mouse)"
1972064,Is the person in front of the tree wearing jeans?," # assumes only one person and one tree
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")
    person_patch = person_patches[0]
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        return ""no""
    tree_patch = tree_patches[0]
    if person_patch.horizontal_center < tree_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
167162,Is there a bike to the right of the purse that is to the right of the woman?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    woman_patch = woman_patches[0]
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) == 0:
        return ""no""
    for purse_patch in purse_patches:
        if purse_patch.horizontal_center > woman_patch.horizontal_center:
            bike_patches = image_patch.find(""bike"")
            if len(bike_patches) == 0:
                return ""no""
            for bike_patch in bike_patches:
                if bike_patch.horizontal_center > purse_patch.horizontal_center:
                    return ""yes""
    return ""no"""
1695388,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
10960149,Is the woman to the left or to the right of the man in the bottom?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one man and one woman patch
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16921984,What is the bent man to the right of the other men doing?," # assumes only one bent man patch
    image_patch = ImagePatch(image)
    bent_man_patches = image_patch.find(""bent man"")
    if len(bent_man_patches) == 0:
        # If no bent man is found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    bent_man_patch = bent_man_patches[0]
    other_man_patches = image_patch.find(""man"")
    # Question assumes only one other man patch
    if len(other_man_patches) == 0:
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    other_man_patch = other_man_patches[0]
    if other_man_patch.horizontal_center > bent_man_patch.horizontal_center:
        return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")"
12175564,What animal are the men to the right of the girl leading?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    girl_patch = girl_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    animal_patch = animal_patches[0]
    if man_patch.horizontal_center > girl_patch.horizontal_center and man_patch.horizontal_center < animal_patch.horizontal_center:
        return animal_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")"
1219606,On which side of the image is the house?," # returns ""left"" or ""right""
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1770499,Is the black suitcase to the right or to the left of the person on the left?," # assumes only one person on the left
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    person_patch = person_patches[0]
    suitcase_patches = image_patch.find(""suitcase"")
    # Question assumes only one suitcase patch
    if len(suitcase_patches) == 0:
        return ""no""
    for suitcase_patch in suitcase_patches:
        if suitcase_patch.horizontal_center > person_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
5282406,Is the pot to the left of a chair?," # assumes only one pot and one chair
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    pot_patch = pot_patches[0]
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        return ""no""
    chair_patch = chair_patches[0]
    if pot_patch.horizontal_center < chair_patch.horizontal_center:
        return ""yes""
    return ""no"""
10914401,Where are the people?," # returns a list of people
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    return people_patches[0].simple_query(""Where are the people?"")"
1919722,What animal is eating the grass?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is eating the grass?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""eating""):
            return animal_patch.simple_query(""What animal is eating the grass?"")
    return ""no"""
9681008,Who is wearing a helmet?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""wearing helmet""):
            return person_patch.simple_query(""Who is wearing a helmet?"")
    return ""no one"""
16861675,Who is on the surfboard in the middle of the photo?," # assumes only one surfboard
    image_patch = ImagePatch(image)
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        # If no surfboard is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    surfboard_patch = surfboard_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return ""no""
    person_patch = person_patches[0]
    if person_patch.horizontal_center == surfboard_patch.horizontal_center:
        return person_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    return ""no"""
10947426,What is the color of the lizard beside the banana?," # assumes only one lizard and one banana
    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    # Question assumes only one lizard patch
    if len(lizard_patches) == 0:
        # If no lizard is found, query the image directly
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    lizard_patch = lizard_patches[0]
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        return ""no""
    banana_patch = banana_patches[0]
    if lizard_patch.horizontal_center > banana_patch.horizontal_center:
        return lizard_patch.simple_query(""What is the color of the lizard beside the banana?"")
    else:
        return ""no"""
18200684,Is the wine glass in the top or in the bottom part?," # assumes only one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    people_patch = people_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < people_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    return ""no"""
171012637,Is the teddy bear to the right of a suitcase?," # assumes only one teddy bear and one suitcase
    image_patch = ImagePatch(image)
    teddy_bear_patches = image_patch.find(""teddy bear"")
    # Question assumes only one teddy bear patch
    if len(teddy_bear_patches) == 0:
        # If no teddy bear is found, query the image directly
        return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"")
    for teddy_bear_patch in teddy_bear_patches:
        suitcase_patches = image_patch.find(""suitcase"")
        for suitcase_patch in suitcase_patches:
            if suitcase_patch.horizontal_center > teddy_bear_patch.horizontal_center:
                return ""yes""
    return ""no"""
19861372,Is the woman's hair long or short?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""Is the woman's hair long or short?"")"
623889,Are both the television and the armchair the same color?," # assumes only one television and one armchair
    image_patch = ImagePatch(image)
    television_patches = image_patch.find(""television"")
    armchair_patches = image_patch.find(""armchair"")
    # Question assumes only one television and one armchair patch
    if len(television_patches) == 0 or len(armchair_patches) == 0:
        # If no television or armchair is found, query the image directly
        return image_patch.simple_query(""Are both the television and the armchair the same color?"")
    television_patch = television_patches[0]
    armchair_patch = armchair_patches[0]
    return bool_to_yesno(television_patch.verify_property(""television"", ""color"") == armchair_patch.verify_property(""armchair"", ""color""))"
4917605,Is the shoe white or brown?," # assumes only one shoe patch
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])"
91055143,What is on the table?," # assumes only one table
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    return table_patches[0].simple_query(""What is on the table?"")"
5430643,What do you think sits on the plate to the left of the tomato?," # assumes only one tomato patch
    image_patch = ImagePatch(image)
    tomato_patches = image_patch.find(""tomato"")
    if len(tomato_patches) == 0:
        # If no tomato is found, query the image directly
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    tomato_patch = tomato_patches[0]
    plate_patches = image_patch.find(""plate"")
    for plate_patch in plate_patches:
        if plate_patch.horizontal_center < tomato_patch.horizontal_center:
            return plate_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"") # crop would include the plate so keep it in the query
    # If no plate is found, query the image directly
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")"
523936,Is the woman in the top part of the picture?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
3189548,Is there a bottle on the nightstand that is on the bed?," # assumes one bottle and one nightstand
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    bottle_patch = bottle_patches[0]
    nightstand_patches = image_patch.find(""nightstand"")
    # Question assumes only one nightstand patch
    if len(nightstand_patches) == 0:
        return ""no""
    nightstand_patch = nightstand_patches[0]
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        return ""no""
    bed_patch = bed_patches[0]
    if bottle_patch.horizontal_center > nightstand_patch.horizontal_center and bottle_patch.horizontal_center < bed_patch.horizontal_center:
        return ""yes""
    return ""no"""
14292161,The pot is of which color?," # assumes only one pot
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].simple_query(""The pot is of which color?"")"
17495150,"What device is black, the microphone or the laptop?"," # assumes only one microphone and one laptop
    image_patch = ImagePatch(image)
    microphone_patches = image_patch.find(""microphone"")
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one microphone and one laptop
    if len(microphone_patches) == 0 or len(laptop_patches) == 0:
        # If no microphone or laptop is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    microphone_patch = microphone_patches[0]
    laptop_patch = laptop_patches[0]
    if microphone_patch.verify_property(""microphone"", ""black"") and not laptop_patch.verify_property(""laptop"", ""black""):
        return ""microphone""
    elif not microphone_patch.verify_property(""microphone"", ""black"") and laptop_patch.verify_property(""laptop"", ""black""):
        return ""laptop""
    else:
        return ""no"""
1521847,Is the cat on a desk?," # assumes one cat patch
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Is the cat on a desk?"")
    cat_patch = cat_patches[0]
    desk_patches = image_patch.find(""desk"")
    if len(desk_patches) == 0:
        return ""no""
    for desk_patch in desk_patches:
        if cat_patch.horizontal_center > desk_patch.horizontal_center:
            return ""yes""
    return ""no"""
16465081,The man is holding what?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return image_patch.simple_query(""The man is holding what?"")
    object_patch = object_patches[0]
    return object_patch.simple_query(""What is the man holding?"")"
17387032,What is on the post?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"")"
1892436,What is in front of the kids that are looking at the cake?," # assumes only one cake patch
    image_patch = ImagePatch(image)
    cake_patches = image_patch.find(""cake"")
    # Question assumes only one cake patch
    if len(cake_patches) == 0:
        # If no cake is found, query the image directly
        return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")
    cake_patch = cake_patches[0]
    kids_patches = image_patch.find(""kids"")
    # Question assumes only one kids patch
    if len(kids_patches) == 0:
        return ""no""
    for kids_patch in kids_patches:
        if kids_patch.horizontal_center > cake_patch.horizontal_center:
            return kids_patch.simple_query(""What is in front of the kids that are looking at the cake?"")
    return ""no"""
18906705,How big is the crowd?," # returns a number
    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""crowd"")
    # Question assumes only one crowd patch
    if len(crowd_patches) == 0:
        # If no crowd is found, query the image directly
        return image_patch.simple_query(""How big is the crowd?"")
    return crowd_patches[0].simple_query(""How big is the crowd?"")"
6157200,Does the sign on the pole have white color?," # assumes only one sign on the pole
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    return bool_to_yesno(sign_patches[0].verify_property(""sign"", ""white""))"
16760226,What's the laptop in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"")"
111054070,How large is the bed?," # returns the size of the bed
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    return bed_patches[0].simple_query(""How large is the bed?"")"
14143886,Where is the person with the luggage standing on?," # assumes only one person with luggage
    image_patch = ImagePatch(image)
    person_with_luggage_patches = image_patch.find(""person with luggage"")
    # Question assumes only one person with luggage patch
    if len(person_with_luggage_patches) == 0:
        # If no person with luggage is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    person_with_luggage_patch = person_with_luggage_patches[0]
    return person_with_luggage_patch.simple_query(""Where is the person with the luggage standing on?"")"
19872633,Are there either any fire extinguishers or pepper shakers?," # assumes only one fire extinguisher or pepper shaker
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)"
12755010,Is the bottle to the right of a napkin?," # assumes only one bottle and one napkin
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    for bottle_patch in bottle_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if napkin_patch.horizontal_center > bottle_patch.horizontal_center:
                return ""yes""
    return ""no"""
2747001,Are there any soaps or bombs?," # returns yes or no
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)"
1553845,Do you see baby giraffes or elephants?," # returns yes or no
    image_patch = ImagePatch(image)
    is_baby_giraffe = image_patch.exists(""baby giraffe"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_baby_giraffe or is_elephant)"
6898877,What is the sign on?," # sign on what?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"")"
15862812,What is the sticker on?," # assumes only one sticker patch
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    return sticker_patches[0].simple_query(""What is the sticker on?"")"
141031470,On which side of the image is the white towel?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    if towel_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
41026846,Who rides a motorcycle?," # assumes one motorcycle patch
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Who rides a motorcycle?"")
    return motorcycle_patches[0].simple_query(""Who rides a motorcycle?"")"
16540391,What is around the bathtub the towel is on?," # assumes only one towel patch
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""What is around the bathtub the towel is on?"")
    for towel_patch in towel_patches:
        around_patches = image_patch.find(""around"")
        for around_patch in around_patches:
            if around_patch.horizontal_center > towel_patch.horizontal_center:
                return around_patch.simple_query(""What is around the bathtub the towel is on?"")
    return ""no"""
7469617,Is the man to the left or to the right of the person that is to the left of the people?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    person_patch = person_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    people_patch = people_patches[0]
    if person_patch.horizontal_center < people_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
64308,What's located on top of the soup?," # assumes only one soup patch
    image_patch = ImagePatch(image)
    soup_patches = image_patch.find(""soup"")
    if len(soup_patches) == 0:
        # If no soup is found, query the image directly
        return image_patch.simple_query(""What's located on top of the soup?"")
    soup_patch = soup_patches[0]
    return soup_patch.simple_query(""What's located on top of the soup?"")"
16660910,Are both the fence and the bench made of the same material?," # returns yes or no
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    for fence_patch in fence_patches:
        bench_patches = image_patch.find(""bench"")
        for bench_patch in bench_patches:
            if fence_patch.verify_property(""fence"", ""material"") == bench_patch.verify_property(""bench"", ""material""):
                return ""yes""
    return ""no"""
3196255,Are there helmets that are not white?," # assumes only one helmet patch
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmet_patches:
        if not helmet_patch.verify_property(""helmet"", ""white""):
            return ""yes""
    return ""no"""
2992630,Is the bowl to the right or to the left of the man that is drinking?," # assumes one man and one bowl
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return ""no""
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
513894,Is the person above the sand wearing glasses?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    person_patch = person_patches[0]
    sand_patches = image_patch.find(""sand"")
    if len(sand_patches) == 0:
        return ""no""
    for sand_patch in sand_patches:
        if person_patch.vertical_center > sand_patch.vertical_center:
            return ""yes""
    return ""no"""
14167599,Is the color of the life preserver the same as that of the house?," # assumes only one life preserver and one house
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    house_patches = image_patch.find(""house"")
    # Question assumes only one life preserver and one house
    if len(life_preserver_patches) == 0 or len(house_patches) == 0:
        # If no life preserver or house is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    life_preserver_patch = life_preserver_patches[0]
    house_patch = house_patches[0]
    return bool_to_yesno(life_preserver_patch.simple_query(""What is the color of the life preserver?"") == house_patch.simple_query(""What is the color of the house?""))"
18264755,How is the weather?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")"
6711450,What is the animal that is looking into the toilet that is not closed?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    toilet_patch = toilet_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    animal_patch = animal_patches[0]
    if animal_patch.horizontal_center > toilet_patch.horizontal_center:
        return animal_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")"
8641613,Do you see any helmets in the picture that are not red?," # returns yes or no
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        if not helmet_patch.verify_property(""helmet"", ""red""):
            return ""yes""
    return ""no"""
2409779,What does the happy person hold?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""What does the happy person hold?"")"
8461507,Are there either tissue boxes or lamps in the picture?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)"
10770916,Which kind of animal is it?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is it?"")
    return animal_patches[0].simple_query(""Which kind of animal is it?"")"
19102906,What type of drink is to the left of the plate?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""What type of drink is to the left of the plate?"")
    plate_patch = plate_patches[0]
    drink_patches = image_patch.find(""drink"")
    # Question assumes only one drink patch
    if len(drink_patches) == 0:
        return ""no""
    for drink_patch in drink_patches:
        if drink_patch.horizontal_center < plate_patch.horizontal_center:
            return drink_patch.simple_query(""What type of drink is to the left of the plate?"") # crop would include the drink so keep it in the query
    return ""no"""
18315440,Is the sky cloudy and blue?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cloudy = image_patch.verify_property(""sky"", ""cloudy"")
    is_blue = image_patch.verify_property(""sky"", ""blue"")
    return bool_to_yesno(is_cloudy and is_blue)"
453061,Is the fork on the right of the image?," # image is a numpy array
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork on the right of the image?"")
    fork_patch = fork_patches[0]
    if fork_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
71002567,"What is the broccoli on, a table or a nightstand?"," # assumes only one broccoli patch
    image_patch = ImagePatch(image)
    broccoli_patches = image_patch.find(""broccoli"")
    if len(broccoli_patches) == 0:
        # If no broccoli is found, query the image directly
        return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    broccoli_patch = broccoli_patches[0]
    table_patches = image_patch.find(""table"")
    nightstand_patches = image_patch.find(""nightstand"")
    for table_patch in table_patches:
        if table_patch.horizontal_center > broccoli_patch.horizontal_center:
            return ""table""
    for nightstand_patch in nightstand_patches:
        if nightstand_patch.horizontal_center > broccoli_patch.horizontal_center:
            return ""nightstand""
    return ""table"""
17465089,Is the field green and small?," # assumes only one field patch
    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Is the field green and small?"")
    field_patch = field_patches[0]
    is_green = field_patch.verify_property(""field"", ""green"")
    is_small = field_patch.verify_property(""field"", ""small"")
    return bool_to_yesno(is_green and is_small)"
16150157,What is on the wall?," # assumes only one wall patch
    image_patch = ImagePatch(image)
    wall_patches = image_patch.find(""wall"")
    if len(wall_patches) == 0:
        # If no wall is found, query the image directly
        return image_patch.simple_query(""What is on the wall?"")
    return wall_patches[0].simple_query(""What is on the wall?"")"
17882658,Is the van to the left or to the right of the SUV on the right side?," # assumes only one SUV and one van
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    van_patch = van_patches[0]
    suv_patches = image_patch.find(""SUV"")
    # Question assumes only one SUV patch
    if len(suv_patches) == 0:
        return ""no""
    suv_patch = suv_patches[0]
    if van_patch.horizontal_center < suv_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15101358,Is the girl to the left of the boy?," # assumes only one girl and one boy
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    boy_patches = image_patch.find(""boy"")
    if len(girl_patches) == 0 or len(boy_patches) == 0:
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    girl_patch = girl_patches[0]
    boy_patch = boy_patches[0]
    if girl_patch.horizontal_center < boy_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
12785181,What animals are in the grass?," # returns a list of animals
    image_patch = ImagePatch(image)
    animals_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animals_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animals are in the grass?"")
    return animals_patches[0].simple_query(""What animals are in the grass?"")"
348093,Are there both an apple and a bag in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)"
314181,Which sign is shown?," # returns the sign
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Which sign is shown?"")
    return sign_patches[0].simple_query(""Which sign is shown?"")"
16275314,"On which side is the woman, the right or the left?"," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19535592,Who runs on the sand?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who runs on the sand?"")
    return person_patches[0].simple_query(""Who runs on the sand?"")"
156886,Is there a giraffe near the bush?," # assumes only one giraffe and one bush
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    giraffe_patch = giraffe_patches[0]
    bush_patches = image_patch.find(""bush"")
    # Question assumes only one bush patch
    if len(bush_patches) == 0:
        return ""no""
    bush_patch = bush_patches[0]
    if giraffe_patch.horizontal_center - bush_patch.horizontal_center < 100:
        return ""yes""
    return ""no"""
1756642,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
11177243,Who wears the shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    return person_patches[0].simple_query(""Who wears the shirt?"")"
1972390,What type of animal is standing in the field?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal is standing in the field?"")
    return animal_patches[0].simple_query(""What type of animal is standing in the field?"")"
14579439,Is the stuffed animal on the right?," # assumes only one stuffed animal
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    if stuffed_animal_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
6645395,Is the gray building behind the passengers that are boarding the airplane?," # assumes only one gray building and one airplane
    image_patch = ImagePatch(image)
    gray_building_patches = image_patch.find(""gray building"")
    # Question assumes only one gray building patch
    if len(gray_building_patches) == 0:
        # If no gray building is found, query the image directly
        return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")
    gray_building_patch = gray_building_patches[0]
    passengers_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passengers_patches) == 0:
        return ""no""
    passengers_patch = passengers_patches[0]
    airplane_patches = image_patch.find(""airplane"")
    # Question assumes only one airplane patch
    if len(airplane_patches) == 0:
        return ""no""
    airplane_patch = airplane_patches[0]
    if passengers_patch.horizontal_center > gray_building_patch.horizontal_center and passengers_patch.horizontal_center < airplane_patch.horizontal_center:
        return ""yes""
    return ""no"""
19610200,Is the fence metallic?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return bool_to_yesno(fence_patches[0].verify_property(""fence"", ""metallic""))"
5299471,What does the girl that to the left of the trashcan carry?," # assumes only one girl and one trashcan
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    girl_patch = girl_patches[0]
    trashcan_patches = image_patch.find(""trashcan"")
    # Question assumes only one trashcan patch
    if len(trashcan_patches) == 0:
        return ""no""
    trashcan_patch = trashcan_patches[0]
    if trashcan_patch.horizontal_center > girl_patch.horizontal_center:
        return girl_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    return ""no"""
7548203,Which kind of vegetable is on the pizza?," # assumes only one pizza patch
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    pizza_patch = pizza_patches[0]
    vegetable_patches = pizza_patch.find(""vegetable"")
    if len(vegetable_patches) == 0:
        return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    return vegetable_patches[0].simple_query(""Which kind of vegetable is on the pizza?"")"
91027737,On which side is the pan?," # assumes only one pan
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    if pan_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19133443,Are the black cars in the top part of the photo?," # assumes only one black car
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    black_car_patch = black_car_patches[0]
    if black_car_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
6144031,Who is in the living room?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is in the living room?"")
    return person_patches[0].simple_query(""Who is in the living room?"")"
14300987,What is the sink made of?," # sink is a noun
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"")"
16464341,Is there a black cat or bird?," # assumes only one black cat or bird
    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)"
1241741,Do you see a bicycle or a biker in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return bool_to_yesno(is_bicycle or is_biker)"
844747,Are there both a pillow and a kitten in the image?," # image is the image to be queried
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)"
1104500,What kind of food is in the box?," # box is not a food
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of food is in the box?"")"
4204973,What is the food that is to the left of the kid called?," # assumes only one kid patch
    image_patch = ImagePatch(image)
    kid_patches = image_patch.find(""kid"")
    if len(kid_patches) == 0:
        # If no kid is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    kid_patch = kid_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < kid_patch.horizontal_center:
            return food_patch.simple_query(""What is the food that is to the left of the kid called?"") # crop would include the food so keep it in the query
    # If no food is to the left of the kid, pick the first food
    return food_patches[0].simple_query(""What is the food that is to the left of the kid called?"")"
11820726,"What device is the desk in front of, a television or a printer?"," # assumes only one desk patch
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    desk_patch = desk_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > desk_patch.horizontal_center:
            return device_patch.simple_query(""What device is the desk in front of, a television or a printer?"") # crop would include the device so keep it in the query
    # If no device is in front of the desk, pick the first device
    return device_patches[0].simple_query(""What device is the desk in front of, a television or a printer?"")"
18114588,Do you see a helmet there?," # image is the image to be queried
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""helmet""))"
11950874,What animal is standing on the ground?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    return animal_patches[0].simple_query(""What animal is standing on the ground?"")"
10216953,Is the small car to the left of the fork on the right?," # assumes only one fork and one small car
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")
    fork_patch = fork_patches[0]
    small_car_patches = image_patch.find(""small car"")
    # Question assumes only one small car patch
    if len(small_car_patches) == 0:
        return ""no""
    small_car_patch = small_car_patches[0]
    if small_car_patch.horizontal_center < fork_patch.horizontal_center:
        return ""yes""
    return ""no"""
16184942,Does that grass look brown and short?," # assumes only one grass patch
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Does that grass look brown and short?"")
    return bool_to_yesno(grass_patches[0].verify_property(""grass"", ""brown"") and grass_patches[0].verify_property(""grass"", ""short""))"
6312238,Is the hydrant to the left of the car?," # assumes only one hydrant and one car
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    car_patches = image_patch.find(""car"")
    if len(hydrant_patches) == 0 or len(car_patches) == 0:
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    hydrant_patch = hydrant_patches[0]
    car_patch = car_patches[0]
    if hydrant_patch.horizontal_center < car_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
16646227,On which side of the picture is the gray car?," # assumes only one gray car
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    gray_car_patch = gray_car_patches[0]
    if gray_car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?," # assumes only one person and one ball
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    person_patch = person_patches[0]
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        return ""no""
    ball_patch = ball_patches[0]
    if ball_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
3443704,What is the woman wearing?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is the woman wearing?"")"
19313572,What is the color of the tent to the left of the vehicles?," # assumes only one tent and one vehicle
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    for tent_patch in tent_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > tent_patch.horizontal_center:
                return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"") # crop would include the vehicle so keep it in the query
    # If no tent is to the left of a vehicle, pick the first tent
    return tent_patches[0].simple_query(""What is the color of the tent to the left of the vehicles?"")"
10885675,What is the toilet seat made of?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the toilet seat made of?"")
    return toilet_patches[0].simple_query(""What is the toilet seat made of?"")"
6926432,What animal is resting on the blanket?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    animal_patch = animal_patches[0]
    return animal_patch.simple_query(""What animal is resting on the blanket?"")"
14561612,What color do you think the bikini that the woman is wearing is?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")"
6587755,Are both the room and the bowl the same color?," # assumes only one room and one bowl
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    # Question assumes only one room patch
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return image_patch.simple_query(""Are both the room and the bowl the same color?"")
    room_patch = room_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return ""no""
    bowl_patch = bowl_patches[0]
    return bool_to_yesno(room_patch.verify_property(""room"", ""color"") == bowl_patch.verify_property(""bowl"", ""color""))"
4479543,Is the barn white or brown?," # assumes only one barn patch
    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    return barn_patches[0].best_text_match([""white"", ""brown""])"
972522,Does the box look white or brown?," # returns a string
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].best_text_match([""white"", ""brown""])"
3948528,What is the bowl made of?," # bowl is a container
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What is the bowl made of?"")
    return bowl_patches[0].simple_query(""What is the bowl made of?"")"
15724828,Is the bench in front of the rock gray or red?," # assumes only one bench and one rock
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    rock_patches = image_patch.find(""rock"")
    # Question assumes only one bench and one rock patch
    if len(bench_patches) == 0 or len(rock_patches) == 0:
        # If no bench or rock is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    bench_patch = bench_patches[0]
    rock_patch = rock_patches[0]
    if bench_patch.horizontal_center < rock_patch.horizontal_center:
        return ""gray""
    else:
        return ""red"""
866459,On which side is the couch?," # assumes only one couch patch
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    couch_patch = couch_patches[0]
    if couch_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
8614812,Is the person that is playing wearing shorts?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    person_patch = person_patches[0]
    is_wearing_shorts = (person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"")
    return bool_to_yesno(is_wearing_shorts)"
167438,What is wearing the ground?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"")"
9418088,Which kind of furniture is wooden?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""Which kind of furniture is wooden?"")"
1042377,Who is standing beside the person that is wearing a dress?," # assumes only one person wearing a dress
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a dress?"") == ""yes"":
            return person_patch.simple_query(""Who is standing beside the person that is wearing a dress?"") # crop would include the dress so keep it in the query
    # If no person is wearing a dress, pick the first person
    return person_patches[0].simple_query(""Who is standing beside the person that is wearing a dress?"")"
16889676,Is it an indoors or outdoors scene?," # assumes only one scene
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")"
10324400,How fat are the long skis?," # returns a number
    image_patch = ImagePatch(image)
    long_ski_patches = image_patch.find(""long ski"")
    # Question assumes only one long ski patch
    if len(long_ski_patches) == 0:
        # If no long ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    return long_ski_patches[0].simple_query(""How fat are the long skis?"")"
2211743,Is the sky clear or overcast?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")"
4224772,Are there bottles to the left of the pencils in the bottom part of the image?," # image is a numpy array
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")"
15478302,Is there any dark door or window in the image?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_dark_door = image_patch.exists(""dark door"")
    is_dark_window = image_patch.exists(""dark window"")
    return bool_to_yesno(is_dark_door or is_dark_window)"
18414234,Do you see either a knife or a chair in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)"
19779815,Is the book red or yellow?," # book is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the book red or yellow?"")"
7257283,Are there men to the left of the picture?," # image is the original image
    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(men_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there men to the left of the picture?"")
    for man_patch in men_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no"""
6621625,On which side of the picture is the bench?," # assumes only one bench
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    if bench_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19311589,Are there both fences and horses in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)"
171018070,What device is to the right of the container that the person is to the left of?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    person_patch = person_patches[0]
    container_patches = image_patch.find(""container"")
    if len(container_patches) == 0:
        return ""no""
    for container_patch in container_patches:
        if container_patch.horizontal_center > person_patch.horizontal_center:
            device_patches = image_patch.find(""device"")
            if len(device_patches) == 0:
                return ""no""
            for device_patch in device_patches:
                if device_patch.horizontal_center > container_patch.horizontal_center:
                    return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    return ""no"""
171031333,Do you see blankets in the picture that are not black?," # returns yes or no
    image_patch = ImagePatch(image)
    is_black = image_patch.exists(""black"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_blanket and not is_black)"
16695341,What is the fence made of?," # fence is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
8314287,Do you see any bottle or child there?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)"
5111363,Are there chairs or tables that are not blue?," # assumes only one chair or table
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    if is_chair or is_table:
        return bool_to_yesno(not image_patch.verify_property(""chair"", ""blue"") or not image_patch.verify_property(""table"", ""blue""))
    return ""no"""
9230971,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
132422,Does the hair have short length and white color?," # returns yes or no
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    return bool_to_yesno(hair_patches[0].verify_property(""hair"", ""short"") and hair_patches[0].verify_property(""hair"", ""white""))"
4822200,Do you see any lettuce on the food with the meat?," # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    for food_patch in food_patches:
        meat_patches = image_patch.find(""meat"")
        for meat_patch in meat_patches:
            if meat_patch.horizontal_center > food_patch.horizontal_center:
                return ""yes""
    return ""no"""
3726666,What device is to the left of the curtain that is to the left of the glasses?," # assumes only one curtain and one pair of glasses
    image_patch = ImagePatch(image)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    for curtain_patch in curtain_patches:
        glasses_patches = image_patch.find(""glasses"")
        for glasses_patch in glasses_patches:
            if glasses_patch.horizontal_center > curtain_patch.horizontal_center:
                device_patches = image_patch.find(""device"")
                for device_patch in device_patches:
                    if device_patch.horizontal_center < curtain_patch.horizontal_center:
                        return device_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    return ""no"""
9954849,What kind of furniture is it?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is it?"")
    return furniture_patches[0].simple_query(""What kind of furniture is it?"")"
19409495,Are there any red trains or buses?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_red_train = image_patch.exists(""red train"")
    is_red_bus = image_patch.exists(""red bus"")
    return bool_to_yesno(is_red_train or is_red_bus)"
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?," # assumes only one crate and one lettuce
    image_patch = ImagePatch(image)
    crate_patches = image_patch.find(""crate"")
    # Question assumes only one crate patch
    if len(crate_patches) == 0:
        # If no crate is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    crate_patch = crate_patches[0]
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    lettuce_patch = lettuce_patches[0]
    if crate_patch.horizontal_center > lettuce_patch.horizontal_center:
        return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")
    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")"
623393,"What type of clothing is tan, the hat or the vest?"," # assumes only one hat and one vest
    image_patch = ImagePatch(image)
    hat_patches = image_patch.find(""hat"")
    vest_patches = image_patch.find(""vest"")
    # Question assumes only one hat and one vest patch
    if len(hat_patches) == 0 or len(vest_patches) == 0:
        # If no hat or vest is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    hat_patch = hat_patches[0]
    vest_patch = vest_patches[0]
    if hat_patch.simple_query(""Is the hat tan?"") == ""yes"":
        return ""hat""
    elif vest_patch.simple_query(""Is the vest tan?"") == ""yes"":
        return ""vest""
    else:
        return ""no"""
6436448,Is the color of the skirt the same as the scarf?," # assumes only one patch
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    for skirt_patch in skirt_patches:
        scarf_patches = image_patch.find(""scarf"")
        for scarf_patch in scarf_patches:
            if skirt_patch.simple_query(""Is the color of the skirt the same as the scarf?"") == ""yes"":
                return ""yes""
    return ""no"""
3303313,Is the blanket under a cat?," # assumes only one blanket and one cat
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is the blanket under a cat?"")
    blanket_patch = blanket_patches[0]
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        return ""no""
    cat_patch = cat_patches[0]
    if blanket_patch.vertical_center < cat_patch.vertical_center:
        return ""yes""
    return ""no"""
443663,What color is the picture?," # returns the color of the picture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")"
17267472,Is there any umbrella to the right of the man?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    umbrella_patches = image_patch.find(""umbrella"")
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1885406,What is the toy on the bed?," # assumes only one toy on the bed
    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What is the toy on the bed?"")
    return toy_patches[0].simple_query(""What is the toy on the bed?"")"
5557965,On which side is the bag?," # returns the side of the bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
4325825,On which side is the banana?," # banana is a fruit
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3196355,What does the batter hold?," # assumes one batter patch
    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    return batter_patches[0].simple_query(""What does the batter hold?"")"
14470748,Who wears a jacket?," # returns the name of the person wearing a jacket
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""wearing a jacket""):
            return person_patch.simple_query(""Who wears a jacket?"")
    return ""no one"""
16537736,Are there any houses behind the shrubs?," # assumes only one shrub patch
    image_patch = ImagePatch(image)
    shrub_patches = image_patch.find(""shrub"")
    # Question assumes only one shrub patch
    if len(shrub_patches) == 0:
        # If no shrub is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    for shrub_patch in shrub_patches:
        house_patches = image_patch.find(""house"")
        for house_patch in house_patches:
            if house_patch.horizontal_center > shrub_patch.horizontal_center:
                return ""yes""
    return ""no"""
1129541,What piece of furniture is made of wood?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wood""):
            return furniture_patch.simple_query(""What piece of furniture is made of wood?"")
    return ""no"""
15270011,Is the racket to the right or to the left of the man that is wearing a hat?," # assumes only one man and one racket
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
12416703,Where is that cat?," # returns the answer to ""Where is that cat?""
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Where is that cat?"")
    return cat_patches[0].simple_query(""Where is that cat?"")"
15603088,The animal to the right of the envelope is lying on what?," # assumes only one envelope patch
    image_patch = ImagePatch(image)
    envelope_patches = image_patch.find(""envelope"")
    if len(envelope_patches) == 0:
        # If no envelope is found, query the image directly
        return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")
    envelope_patch = envelope_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > envelope_patch.horizontal_center:
            return animal_patch.simple_query(""The animal to the right of the envelope is lying on what?"") # crop would include the envelope so keep it in the query
    return ""no"""
5329077,Is the man on a bench?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on a bench?"")
    man_patch = man_patches[0]
    bench_patches = image_patch.find(""bench"")
    if len(bench_patches) == 0:
        return ""no""
    for bench_patch in bench_patches:
        if man_patch.horizontal_center > bench_patch.horizontal_center:
            return ""yes""
    return ""no"""
1945705,What kind of device is to the left of the device that looks silver and gray?," # assumes only one device that looks silver and gray
    image_patch = ImagePatch(image)
    silver_gray_device_patches = image_patch.find(""device that looks silver and gray"")
    # Question assumes only one silver gray device patch
    if len(silver_gray_device_patches) == 0:
        # If no silver gray device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    silver_gray_device_patch = silver_gray_device_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    for device_patch in device_patches:
        if device_patch.horizontal_center < silver_gray_device_patch.horizontal_center:
            return device_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"") # crop would include the device so keep it in the query
    return ""no"""
17520003,What vehicle is to the right of the pine tree?," # assumes only one vehicle and one pine tree
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    vehicle_patch = vehicle_patches[0]
    pine_tree_patches = image_patch.find(""pine tree"")
    # Question assumes only one pine tree patch
    if len(pine_tree_patches) == 0:
        return ""no""
    pine_tree_patch = pine_tree_patches[0]
    if vehicle_patch.horizontal_center > pine_tree_patch.horizontal_center:
        return vehicle_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    return ""no"""
1259983,Who is wearing pants?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Who is wearing pants?"")"
6413378,Is there a black keyboard or camera?," # assumes only one keyboard or camera
    image_patch = ImagePatch(image)
    is_black_keyboard = image_patch.exists(""black keyboard"")
    is_black_camera = image_patch.exists(""black camera"")
    return bool_to_yesno(is_black_keyboard or is_black_camera)"
947305,Is the sunny water blue and high?," # assumes only one sunny water patch
    image_patch = ImagePatch(image)
    sunny_water_patches = image_patch.find(""sunny water"")
    if len(sunny_water_patches) == 0:
        # If no sunny water is found, query the image directly
        return image_patch.simple_query(""Is the sunny water blue and high?"")
    sunny_water_patch = sunny_water_patches[0]
    is_blue = sunny_water_patch.verify_property(""sunny water"", ""blue"")
    is_high = sunny_water_patch.verify_property(""sunny water"", ""high"")
    return bool_to_yesno(is_blue and is_high)"
4367817,What type of animal in this scene is brown?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal in this scene is brown?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal brown?"") == ""yes"":
            return animal_patch.simple_query(""What type of animal in this scene is brown?"") # crop would include the animal so keep it in the query
    # If no animal is brown, pick the first animal
    return animal_patches[0].simple_query(""What type of animal in this scene is brown?"")"
15485572,What is the vegetable on the hot dog with the cheese?," # assumes only one hot dog and one vegetable
    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    hot_dog_patch = hot_dog_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    vegetable_patch = vegetable_patches[0]
    if vegetable_patch.horizontal_center > hot_dog_patch.horizontal_center:
        return vegetable_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    return ""no"""
12661142,What is the appliance in the kitchen called?," # assumes only one appliance
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    return appliance_patches[0].simple_query(""What is the appliance in the kitchen called?"")"
41012743,The arrow is on what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The arrow is on what?"")"
4777414,What color is the bicycle in the bottom of the photo?," # assumes only one bicycle patch
    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    if len(bicycle_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    return bicycle_patches[0].simple_query(""What color is the bicycle in the bottom of the photo?"")"
1185988,What is the device on top of the table that is to the right of the trashcan?," # assumes only one table, one trashcan, and one device
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    table_patch = table_patches[0]
    trashcan_patches = image_patch.find(""trashcan"")
    # Question assumes only one trashcan patch
    if len(trashcan_patches) == 0:
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    trashcan_patch = trashcan_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    device_patch = device_patches[0]
    if device_patch.horizontal_center > trashcan_patch.horizontal_center and device_patch.vertical_center < table_patch.vertical_center:
        return device_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")"
13582968,Was granite used to make that floor?," # assumes only one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""Was granite used to make that floor?"")
    return bool_to_yesno(floor_patches[0].verify_property(""floor"", ""granite""))"
6235273,Are there women in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""woman""))"
5377974,What is the girl playing with?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    girl_patch = girl_patches[0]
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        return ""no""
    toy_patch = toy_patches[0]
    if toy_patch.horizontal_center > girl_patch.horizontal_center:
        return toy_patch.simple_query(""What is the girl playing with?"")
    return ""no"""
51037065,On which side of the image is the fridge?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    fridge_patch = fridge_patches[0]
    if fridge_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5299477,Which kind of bag does the girl carry?," # crop would include the bag so keep it in the query
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    girl_patch = girl_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""no""
    return bag_patches[0].simple_query(""Which kind of bag does the girl carry?"") # crop would include the bag so keep it in the query"
15135617,Is the white dog on a bench?," # assumes only one white dog patch
    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog on a bench?"")
    white_dog_patch = white_dog_patches[0]
    bench_patches = image_patch.find(""bench"")
    for bench_patch in bench_patches:
        if bench_patch.horizontal_center > white_dog_patch.horizontal_center:
            return ""yes""
    return ""no"""
1111583,Is the male person to the right of a person?," # assumes only one person patch
    image_patch = ImagePatch(image)
    male_person_patches = image_patch.find(""male person"")
    if len(male_person_patches) == 0:
        # If no male person is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_person_patch in male_person_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > male_person_patch.horizontal_center:
                return ""yes""
    return ""no"""
12352269,Are there both windows and doors in this photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
15610844,What kind of place is shown?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")"
11869032,Is the banana below a bird?," # assumes only one banana and one bird
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Is the banana below a bird?"")
    for banana_patch in banana_patches:
        bird_patches = image_patch.find(""bird"")
        for bird_patch in bird_patches:
            if bird_patch.vertical_center > banana_patch.vertical_center:
                return ""yes""
    return ""no"""
9878360,What color is the vehicle to the left of the fence?," # assumes only one vehicle and one fence
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    vehicle_patch = vehicle_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    fence_patch = fence_patches[0]
    if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
        return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    return vehicle_patch.simple_query(""What color is the vehicle to the right of the fence?"")"
481765,Are there either any buses or trains in the image?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)"
6665919,What is the fence made of?," # fence is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
9218340,Does the man to the left of the traffic cone wear a cap?," # assumes only one man and one traffic cone
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes only one man and one traffic cone
    if len(man_patches) == 0 or len(traffic_cone_patches) == 0:
        # If no man or traffic cone is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    traffic_cone_patch = traffic_cone_patches[0]
    if man_patch.horizontal_center < traffic_cone_patch.horizontal_center:
        return bool_to_yesno(man_patch.verify_property(""man"", ""cap""))
    return ""no"""
11981238,What is common to the blazer and the suit?," # blazer and suit are the same
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    # Question assumes only one blazer patch
    if len(blazer_patches) == 0:
        # If no blazer is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    return blazer_patches[0].simple_query(""What is common to the blazer and the suit?"")"
16245,Is the shirt white or green?," # crop would include the shirt so keep it in the query
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    return shirt_patches[0].simple_query(""Is the shirt white or green?"")"
2595103,"In which part of the image are the cars, the bottom or the top?"," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    if car_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
2429130,"How does the sand look, dry or wet?"," # dry or wet
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How does the sand look, dry or wet?"")"
4325920,Are there fruits to the right of the banana which is on the table?," # banana is on the table
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    for banana_patch in banana_patches:
        fruit_patches = image_patch.find(""fruit"")
        for fruit_patch in fruit_patches:
            if fruit_patch.horizontal_center > banana_patch.horizontal_center:
                return ""yes""
    return ""no"""
6376614,What color is the car in the middle?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    return car_patches[0].simple_query(""What color is the car in the middle?"")"
712063,What's the lamp made of?," # assumes only one lamp patch
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What's the lamp made of?"")"
19358285,Which kind of furniture is to the right of the pillow?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    return ""no"""
9647343,What type of material is the patio made of?," # assumes only one patio patch
    image_patch = ImagePatch(image)
    patio_patches = image_patch.find(""patio"")
    if len(patio_patches) == 0:
        # If no patio is found, query the image directly
        return image_patch.simple_query(""What type of material is the patio made of?"")
    return patio_patches[0].simple_query(""What type of material is the patio made of?"")"
12545434,Who is wearing the suit?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the suit?"")
    return person_patches[0].simple_query(""Who is wearing the suit?"")"
12894285,What is the color of the clouds in the sky?," # assumes only one cloud patch
    image_patch = ImagePatch(image)
    cloud_patches = image_patch.find(""cloud"")
    if len(cloud_patches) == 0:
        # If no cloud is found, query the image directly
        return image_patch.simple_query(""What is the color of the clouds in the sky?"")
    return cloud_patches[0].simple_query(""What is the color of the clouds in the sky?"")"
9843309,Do the flowers look orange?," # image is a PIL.Image.Image
    image_patch = ImagePatch(image)
    flowers_patches = image_patch.find(""flowers"")
    # Question assumes only one flowers patch
    if len(flowers_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flowers_patches[0].verify_property(""flowers"", ""orange""))"
618996,Is there a chair or a bed in this image?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)"
18959736,Are there trucks to the left of the umbrella?," # assumes only one umbrella patch
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    umbrella_patch = umbrella_patches[0]
    truck_patches = image_patch.find(""truck"")
    for truck_patch in truck_patches:
        if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
            return ""yes""
    return ""no"""
867869,What color are the pants the man is wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What color are the pants the man is wearing?"")"
551601,Are there any pillows or chairs in the image?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)"
10775785,Are there women to the left of the person with the bag?," # assumes only one person with a bag
    image_patch = ImagePatch(image)
    person_with_bag_patches = image_patch.find(""person with a bag"")
    # Question assumes only one person with a bag patch
    if len(person_with_bag_patches) == 0:
        # If no person with a bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    person_with_bag_patch = person_with_bag_patches[0]
    women_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(women_patches) == 0:
        return ""no""
    for woman_patch in women_patches:
        if woman_patch.horizontal_center < person_with_bag_patch.horizontal_center:
            return ""yes""
    return ""no"""
5925408,What is the bike in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"")"
11328059,What type of fast food is shown in this photo?," # assumes only one fast food patch
    image_patch = ImagePatch(image)
    fast_food_patches = image_patch.find(""fast food"")
    if len(fast_food_patches) == 0:
        return image_patch.simple_query(""What type of fast food is shown in this photo?"")
    return fast_food_patches[0].simple_query(""What type of fast food is shown in this photo?"")"
15427544,Are there either beds or desks in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)"
13778498,What type of vehicle is behind the green tree?," # assumes only one green tree
    image_patch = ImagePatch(image)
    green_tree_patches = image_patch.find(""green tree"")
    # Question assumes only one green tree patch
    if len(green_tree_patches) == 0:
        # If no green tree is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is behind the green tree?"")
    green_tree_patch = green_tree_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > green_tree_patch.horizontal_center:
            return vehicle_patch.simple_query(""What type of vehicle is behind the green tree?"") # crop would include the vehicle so keep it in the query
    return ""no"""
41019603,What is the child standing on?," # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child standing on?"")
    child_patch = child_patches[0]
    return child_patch.simple_query(""What is the child standing on?"")"
11705574,What is the wooden item of furniture called?," # assumes only one wooden item of furniture
    image_patch = ImagePatch(image)
    wooden_item_patches = image_patch.find(""wooden item of furniture"")
    # Question assumes only one wooden item of furniture patch
    if len(wooden_item_patches) == 0:
        # If no wooden item of furniture is found, query the image directly
        return image_patch.simple_query(""What is the wooden item of furniture called?"")
    return wooden_item_patches[0].simple_query(""What is the wooden item of furniture called?"")"
16817277,Is the man to the left or to the right of the woman?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1316363,Who is wearing the shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    return person_patches[0].simple_query(""Who is wearing the shirt?"")"
18546659,What is the fence made of?," # fence is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
10519192,What color is the kite that looks triangular?," # assumes only one kite patch
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    kite_patch = kite_patches[0]
    return kite_patch.simple_query(""What color is the kite that looks triangular?"")"
1672200,Who is drinking?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is drinking?"")
    return person_patches[0].simple_query(""Who is drinking?"")"
5703748,Is the building behind the tree white or brown?," # assumes only one building and one tree
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one building and one tree patch
    if len(building_patches) == 0 or len(tree_patches) == 0:
        # If no building or tree is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    building_patch = building_patches[0]
    tree_patch = tree_patches[0]
    if building_patch.horizontal_center > tree_patch.horizontal_center:
        return building_patch.simple_query(""Is the building behind the tree white or brown?"")
    else:
        return tree_patch.simple_query(""Is the building behind the tree white or brown?"")"
5749240,Are the glove and the undershirt both black?," # assumes only one glove and one undershirt
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    undershirt_patches = image_patch.find(""undershirt"")
    # Question assumes only one undershirt patch
    if len(undershirt_patches) == 0:
        return ""no""
    return bool_to_yesno(glove_patches[0].verify_property(""glove"", ""black"") and undershirt_patches[0].verify_property(""undershirt"", ""black""))"
18573157,Is the juice in a cup?," # assumes only one cup and one juice
    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    # Question assumes only one juice patch
    if len(juice_patches) == 0:
        # If no juice is found, query the image directly
        return image_patch.simple_query(""Is the juice in a cup?"")
    juice_patch = juice_patches[0]
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        return ""no""
    cup_patch = cup_patches[0]
    return bool_to_yesno(juice_patch.simple_query(""Is the juice in a cup?""))"
3445929,Is the brown horse on the right side of the photo?," # assumes only one horse patch
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    horse_patch = horse_patches[0]
    if horse_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
16541709,Where is the grass?," # returns the answer to ""Where is the grass?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")"
15764335,Are there any dogs on the tan sand?," # tan sand is a property
    image_patch = ImagePatch(image)
    is_dog = image_patch.exists(""dog"")
    is_tan_sand = image_patch.verify_property(""sand"", ""tan"")
    return bool_to_yesno(is_dog and is_tan_sand)"
1478089,Are the door and the garage door made of the same material?," # assumes only one door and one garage door
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    garage_door_patches = image_patch.find(""garage door"")
    # Question assumes only one door and one garage door
    if len(door_patches) == 0 or len(garage_door_patches) == 0:
        # If no door or garage door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_patch = door_patches[0]
    garage_door_patch = garage_door_patches[0]
    return bool_to_yesno(door_patch.verify_property(""door"", ""material"") == garage_door_patch.verify_property(""garage door"", ""material""))"
1250685,Was this picture taken in a bathroom or at a dining room?," # assumes only one image patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"")"
10436844,Is the zebra's nose soft and brown?," # assumes only one zebra patch
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    zebra_patch = zebra_patches[0]
    return bool_to_yesno(zebra_patch.verify_property(""zebra"", ""soft"") and zebra_patch.verify_property(""zebra"", ""brown""))"
10683765,Does the shirt have blue color?," # image is the image to be queried
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""blue""))"
1593352,Do the draperies look white and striped?," # returns a boolean
    image_patch = ImagePatch(image)
    draperies_patches = image_patch.find(""draperies"")
    # Question assumes only one draperies patch
    if len(draperies_patches) == 0:
        # If no draperies are found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    return bool_to_yesno(draperies_patches[0].verify_property(""draperies"", ""white and striped""))"
16553304,Are the trunks both long and wide?," # trunks are not a good example
    image_patch = ImagePatch(image)
    trunks_patches = image_patch.find(""trunks"")
    # Question assumes only one trunks patch
    if len(trunks_patches) == 0:
        # If no trunks are found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    trunks_patch = trunks_patches[0]
    is_long = trunks_patch.verify_property(""trunks"", ""long"")
    is_wide = trunks_patch.verify_property(""trunks"", ""wide"")
    return bool_to_yesno(is_long and is_wide)"
7165102,Is the car on the left of the photo?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the car on the left of the photo?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?," # assumes only one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for banana_patch in banana_patches:
        if banana_patch.simple_query(""Is the banana short?"") == ""yes"":
            return ""yes""
    return ""no"""
19279872,What is the man to the right of the helmet wearing?," # assumes only one man and one helmet
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    helmet_patches = image_patch.find(""helmet"")
    if len(helmet_patches) == 0:
        return ""no""
    for helmet_patch in helmet_patches:
        if helmet_patch.horizontal_center > man_patch.horizontal_center:
            return man_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    return ""no"""
4285513,What is the color of the floor?," # assumes only one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor?"")
    return floor_patches[0].simple_query(""What is the color of the floor?"")"
3974266,Do the trousers look tan?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan""))"
11595009,What are the devices to the right of the device that is to the right of the remote control?," # assumes only one remote control patch
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    remote_control_patch = remote_control_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    for device_patch in device_patches:
        if device_patch.horizontal_center > remote_control_patch.horizontal_center:
            return device_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    return ""no"""
6183000,Are there nightstands or beds?," # assumes only one nightstand or bed
    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_nightstand or is_bed)"
14143982,Is it an outdoors scene?," # returns yes or no
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an outdoors scene?"")"
6123160,Are the speakers to the left of a Wii controller?," # assumes only one speaker and one Wii controller
    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    # Question assumes only one speaker patch
    if len(speaker_patches) == 0:
        # If no speaker is found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    speaker_patch = speaker_patches[0]
    wii_controller_patches = image_patch.find(""Wii controller"")
    # Question assumes only one Wii controller patch
    if len(wii_controller_patches) == 0:
        return ""no""
    wii_controller_patch = wii_controller_patches[0]
    if speaker_patch.horizontal_center < wii_controller_patch.horizontal_center:
        return ""yes""
    return ""no"""
3681634,Is the plastic fork in the top or in the bottom part of the photo?," # assumes only one plastic fork patch
    image_patch = ImagePatch(image)
    plastic_fork_patches = image_patch.find(""plastic fork"")
    if len(plastic_fork_patches) == 0:
        # If no plastic fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    plastic_fork_patch = plastic_fork_patches[0]
    if plastic_fork_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
13629530,What is the vehicle on the street?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle on the street?"")
    return vehicle_patches[0].simple_query(""What is the vehicle on the street?"")"
1718325,Are there chairs or windows in the scene?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)"
10607062,What color is the hat the man is in?," # hat is in the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""no""
    hat_patch = hat_patches[0]
    return hat_patch.simple_query(""What color is the hat the man is in?"")"
1849976,What vegetables are to the left of the spoon?," # assumes only one spoon patch
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    spoon_patch = spoon_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center < spoon_patch.horizontal_center:
            return vegetable_patch.simple_query(""What vegetables are to the left of the spoon?"") # crop would include the spoon so keep it in the query
    return ""no"""
14827816,Is the statue made of bronze or stone?," # assumes only one statue patch
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    statue_patch = statue_patches[0]
    return statue_patch.simple_query(""Is the statue made of bronze or stone?"")"
857204,What's the woman wearing?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What's the woman wearing?"")"
2201105,Is the ball pink?," # assumes only one ball patch
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return bool_to_yesno(ball_patches[0].verify_property(""ball"", ""pink""))"
14616023,What piece of furniture are the cords in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")"
161027411,Are there both doors and windows in this photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
8249677,On which side of the image is the black car?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16184856,What is the striped animal called?," # assumes only one striped animal
    image_patch = ImagePatch(image)
    striped_animal_patches = image_patch.find(""striped animal"")
    if len(striped_animal_patches) == 0:
        # If no striped animal is found, query the image directly
        return image_patch.simple_query(""What is the striped animal called?"")
    return striped_animal_patches[0].simple_query(""What is the striped animal called?"")"
1479068,Is it outdoors?," # image is the image to be queried
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
16155046,Is the dry grass below a zebra?," # dry grass is a property of the zebra
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the dry grass below a zebra?"")
    for zebra_patch in zebra_patches:
        dry_grass_patches = image_patch.find(""dry grass"")
        for dry_grass_patch in dry_grass_patches:
            if dry_grass_patch.vertical_center < zebra_patch.vertical_center:
                return ""yes""
    return ""no"""
16515071,What is the person in the water wearing?," # assumes only one person in the water
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    return person_patches[0].simple_query(""What is the person in the water wearing?"")"
161015042,Who is wearing the goggles?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the goggles?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing goggles?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing the goggles?"")
    return ""no one"""
19149868,What is pulled by the lady?," # assumes only one lady patch
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""What is pulled by the lady?"")
    lady_patch = lady_patches[0]
    pulled_patches = image_patch.find(""pulled"")
    # Question assumes only one pulled patch
    if len(pulled_patches) == 0:
        return ""no""
    for pulled_patch in pulled_patches:
        if pulled_patch.horizontal_center > lady_patch.horizontal_center:
            return pulled_patch.simple_query(""What is pulled by the lady?"")
    return ""no"""
5199994,What's the man wearing?," # returns the man's clothing
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
19184475,Are the man glasses on the left side of the image?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center < man_patch.horizontal_center:
        return ""yes""
    return ""no"""
7149602,Is the shirt orange or blue?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    return shirt_patches[0].best_text_match([""orange"", ""blue""])"
19479555,What is the person to the right of the benches holding?," # assumes only one person and one bench
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    person_patch = person_patches[0]
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    bench_patch = bench_patches[0]
    if person_patch.horizontal_center > bench_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the right of the benches holding?"")
    else:
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")"
19273393,Are there both a door and a window in this photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)"
6481656,What is the man doing?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    return man_patches[0].simple_query(""What is the man doing?"")"
13127703,What kind of drink is to the left of the bottle the woman is pouring?," # assumes only one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    bottle_patch = bottle_patches[0]
    drink_patches = image_patch.find(""drink"")
    for drink_patch in drink_patches:
        if drink_patch.horizontal_center < bottle_patch.horizontal_center:
            return drink_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"") # crop would include the drink so keep it in the query
    return ""no"""
2378018,What is the toilet in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"")"
8430841,Is the frisbee to the left of the guy?," # assumes only one guy and one frisbee
    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    if len(guy_patches) == 0:
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    guy_patch = guy_patches[0]
    frisbee_patches = image_patch.find(""frisbee"")
    if len(frisbee_patches) == 0:
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    frisbee_patch = frisbee_patches[0]
    if frisbee_patch.horizontal_center < guy_patch.horizontal_center:
        return ""yes""
    return ""no"""
18616818,The man is watching who?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is watching who?"")"
179526,Is the white dog behind a girl?," # assumes only one girl and one white dog
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the white dog behind a girl?"")
    girl_patch = girl_patches[0]
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        return ""no""
    white_dog_patch = white_dog_patches[0]
    if white_dog_patch.horizontal_center < girl_patch.horizontal_center:
        return ""yes""
    return ""no"""
21018827,Is the river murky and calm?," # assumes only one river patch
    image_patch = ImagePatch(image)
    river_patches = image_patch.find(""river"")
    if len(river_patches) == 0:
        # If no river is found, query the image directly
        return image_patch.simple_query(""Is the river murky and calm?"")
    return bool_to_yesno(river_patches[0].verify_property(""river"", ""murky"") and river_patches[0].verify_property(""river"", ""calm""))"
3697449,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
3697807,Are there both a racket and a toothbrush in the image?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)"
1904643,What do both the car and the sign have in common?," # assumes only one car and one sign
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one car and one sign patch
    if len(car_patches) == 0 or len(sign_patches) == 0:
        # If no car or sign is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patch = sign_patches[0]
    return car_patch.simple_query(""What do both the car and the sign have in common?"") # crop would include the sign so keep it in the query"
11764476,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
4903948,On what kind of furniture is the plate?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    return plate_patches[0].simple_query(""On what kind of furniture is the plate?"")"
61022361,What is the painting that is to the left of the clock hanging on?," # assumes only one clock patch
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    clock_patch = clock_patches[0]
    painting_patches = image_patch.find(""painting"")
    for painting_patch in painting_patches:
        if painting_patch.horizontal_center < clock_patch.horizontal_center:
            return painting_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")
    return ""no"""
1527392,"What color is the fence, tan or black?"," # tan or black
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    return fence_patches[0].best_text_match([""tan"", ""black""])"
19229351,Do you see both bowls and carrots?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)"
1297082,On which side is the silver fork?," # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    fork_patch = fork_patches[0]
    if fork_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16757832,Are there any blue helmets or napkins?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.exists(""blue helmet"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_blue_helmet or is_napkin)"
839816,"In which part of the photo is the racket, the top or the bottom?"," # assumes only one racket patch
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12385226,Is there a mirror in the bathroom?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""mirror""))"
18720852,Are there either blankets or tents in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)"
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    woman_patch = woman_patches[0]
    cardboard_box_patches = image_patch.find(""cardboard box"")
    if len(cardboard_box_patches) == 0:
        return ""no""
    for cardboard_box_patch in cardboard_box_patches:
        if cardboard_box_patch.horizontal_center > woman_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
19453453,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
19562503,Is the house in the bottom part or in the top of the photo?," # assumes only one house patch
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    house_patch = house_patches[0]
    if house_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
11737187,What is in front of the flowers that look red?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the flowers that look red?"")"
15710688,Is the shirt short sleeved or sleeveless?," # assumes only one shirt patch
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")"
5533952,What are the white wires connected to?," # assumes only one white wire
    image_patch = ImagePatch(image)
    white_wires_patches = image_patch.find(""white wire"")
    # Question assumes only one white wire patch
    if len(white_wires_patches) == 0:
        # If no white wire is found, query the image directly
        return image_patch.simple_query(""What are the white wires connected to?"")
    return white_wires_patches[0].simple_query(""What are the white wires connected to?"")"
11313555,"What type of furniture is that, a table or a nightstand?"," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    furniture_patch = furniture_patches[0]
    is_table = furniture_patch.verify_property(""furniture"", ""table"")
    is_nightstand = furniture_patch.verify_property(""furniture"", ""nightstand"")
    if is_table:
        return ""table""
    elif is_nightstand:
        return ""nightstand""
    else:
        return ""unknown"""
10508893,What animals are in front of the trees?," # assumes only one tree patch
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""What animals are in front of the trees?"")
    tree_patch = tree_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""no""
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < tree_patch.horizontal_center:
            return animal_patch.simple_query(""What animals are in front of the trees?"") # crop would include the tree so keep it in the query
    return ""no"""
14501997,What is the gate made of?," # assumes only one gate patch
    image_patch = ImagePatch(image)
    gate_patches = image_patch.find(""gate"")
    if len(gate_patches) == 0:
        # If no gate is found, query the image directly
        return image_patch.simple_query(""What is the gate made of?"")
    return gate_patches[0].simple_query(""What is the gate made of?"")"
45624,What color is the device on top of the table?," # assumes only one device and one table
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    device_patch = device_patches[0]
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        return ""no""
    table_patch = table_patches[0]
    if device_patch.vertical_center > table_patch.vertical_center:
        return device_patch.simple_query(""What color is the device on top of the table?"")
    return ""no"""
181032044,Are these closed drawers?," # assumes only one drawer
    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    return bool_to_yesno(drawer_patches[0].verify_property(""drawer"", ""closed""))"
383,What kind of furniture is made of wood?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    furniture_patch = furniture_patches[0]
    is_made_of_wood = furniture_patch.verify_property(""furniture"", ""made of wood"")
    if is_made_of_wood:
        return furniture_patch.simple_query(""What kind of furniture is made of wood?"")
    return ""no"""
101054962,What is the person by the bananas wearing?," # assumes only one person and one banana patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    person_patch = person_patches[0]
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        return ""no""
    for banana_patch in banana_patches:
        if banana_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.simple_query(""What is the person by the bananas wearing?"")
    return ""no"""
759165,What is the color of the tower in the middle of the picture?," # assumes only one tower
    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    return tower_patches[0].simple_query(""What is the color of the tower in the middle of the picture?"")"
10775539,Is this giraffe tall and white?," # returns yes or no
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is this giraffe tall and white?"")
    giraffe_patch = giraffe_patches[0]
    is_tall = giraffe_patch.verify_property(""giraffe"", ""tall"")
    is_white = giraffe_patch.verify_property(""giraffe"", ""white"")
    return bool_to_yesno(is_tall and is_white)"
19981804,On which side of the photo is the colorful screen?," # assumes only one colorful screen
    image_patch = ImagePatch(image)
    colorful_screen_patches = image_patch.find(""colorful screen"")
    # Question assumes only one colorful screen patch
    if len(colorful_screen_patches) == 0:
        # If no colorful screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    if colorful_screen_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7903654,Is the tap on the left side or on the right?," # assumes only one tap
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    tap_patch = tap_patches[0]
    if tap_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6206183,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15212437,Is the coat black or beige?," # coat is a property of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Is the coat black or beige?"")"
13123207,Does the kite near the field look high and red?," # assumes only one kite patch
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    kite_patch = kite_patches[0]
    is_high = kite_patch.verify_property(""kite"", ""high"")
    is_red = kite_patch.verify_property(""kite"", ""red"")
    return bool_to_yesno(is_high and is_red)"
7740092,Are there any utensils in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    utensils_patches = image_patch.find(""utensil"")
    # Question assumes only one utensil patch
    if len(utensils_patches) == 0:
        # If no utensil is found, query the image directly
        return image_patch.simple_query(""Are there any utensils in this picture?"")
    return ""yes"""
8774975,What is around the guy?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")"
17728574,Do you see bananas or cookies?," # returns yes or no
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)"
14274506,Is the staircase different in color than the sky?," # assumes only one staircase and one sky
    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    # Question assumes only one staircase patch
    if len(staircase_patches) == 0:
        # If no staircase is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    staircase_patch = staircase_patches[0]
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        return ""no""
    sky_patch = sky_patches[0]
    return bool_to_yesno(staircase_patch.verify_property(""staircase"", ""color"") != sky_patch.verify_property(""sky"", ""color""))"
1605874,What color are the containers that are on the right?," # assumes only one container
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    container_patch = container_patches[0]
    return container_patch.simple_query(""What color are the containers that are on the right?"")"
12495781,Are the people to the right or to the left of the cone that is orange?," # assumes only one cone patch
    image_patch = ImagePatch(image)
    cone_patches = image_patch.find(""cone"")
    if len(cone_patches) == 0:
        # If no cone is found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    cone_patch = cone_patches[0]
    people_patches = image_patch.find(""people"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > cone_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
14165681,"What type of clothing is light, the sweater or the cap?"," # assumes only one cap and one sweater
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    sweater_patches = image_patch.find(""sweater"")
    # Question assumes only one cap and one sweater patch
    if len(cap_patches) == 0 or len(sweater_patches) == 0:
        # If no cap or sweater is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    cap_patch = cap_patches[0]
    sweater_patch = sweater_patches[0]
    if cap_patch.simple_query(""Is the cap light?"") == ""yes"":
        return ""cap""
    else:
        return ""sweater"""
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?," # assumes only one girl and one chair
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    girl_patch = girl_patches[0]
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        return ""no""
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > girl_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
5617223,"What color is the container to the left of the horse, green or silver?"," # assumes only one container and one horse
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    for container_patch in container_patches:
        if container_patch.horizontal_center < image_patch.horizontal_center:
            return container_patch.best_text_match([""green"", ""silver""])
    return ""no"""
2428964,Is the water gray or teal?," # assumes only one water patch
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].best_text_match([""gray"", ""teal""])"
19620769,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
14785459,On which side of the picture is the lamp?," # assumes only one lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    if lamp_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1325617,Does the brown animal look tiny?," # assumes only one brown animal patch
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    return bool_to_yesno(brown_animal_patches[0].verify_property(""brown animal"", ""tiny""))"
5672532,Does that shirt look long sleeved?," # image is the image to be queried
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""long sleeved""))"
6146439,Does the box look green?," # returns yes or no
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look green?"")
    return bool_to_yesno(box_patches[0].verify_property(""box"", ""green""))"
1910285,Is the white container on the left of the image?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    # Question assumes only one white container patch
    if len(white_container_patches) == 0:
        # If no white container is found, query the image directly
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    if white_container_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
13362134,Is that shower curtain to the left of a toilet?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center < shower_curtain_patch.horizontal_center:
                return ""yes""
    return ""no"""
161060488,Is there any cabinet to the right of the stove?," # assumes only one stove patch
    image_patch = ImagePatch(image)
    stove_patches = image_patch.find(""stove"")
    if len(stove_patches) == 0:
        # If no stove is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    stove_patch = stove_patches[0]
    cabinet_patches = image_patch.find(""cabinet"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.horizontal_center > stove_patch.horizontal_center:
            return ""yes""
    return ""no"""
111055042,Is the chair on the right?," # assumes one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    chair_patch = chair_patches[0]
    return bool_to_yesno(chair_patch.horizontal_center > image_patch.horizontal_center)"
151068,Which kind of clothing is white?," # crop would include the clothing so keep it in the query
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    return clothing_patches[0].simple_query(""Which kind of clothing is white?"")"
19387951,Is this place the forest or the garden?," # returns a string
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this place the forest or the garden?"")"
1781695,What's on the blanket?," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What's on the blanket?"")
    return blanket_patches[0].simple_query(""What's on the blanket?"")"
17699779,Is she on a bed?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is she on a bed?"")
    person_patch = person_patches[0]
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        return ""no""
    bed_patch = bed_patches[0]
    return bool_to_yesno(person_patch.simple_query(""Is she on a bed?""))"
464441,"What piece of furniture is the blanket on, a bed or a sofa?"," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    blanket_patch = blanket_patches[0]
    bed_patches = image_patch.find(""bed"")
    sofa_patches = image_patch.find(""sofa"")
    if len(bed_patches) == 0 and len(sofa_patches) == 0:
        return ""no""
    if len(bed_patches) == 0:
        return sofa_patches[0].simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    if len(sofa_patches) == 0:
        return bed_patches[0].simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    if blanket_patch.horizontal_center < bed_patches[0].horizontal_center:
        return bed_patches[0].simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    else:
        return sofa_patches[0].simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")"
9505496,Are the wires above a man?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    man_patch = man_patches[0]
    wires_patches = image_patch.find(""wires"")
    if len(wires_patches) == 0:
        return ""no""
    for wires_patch in wires_patches:
        if wires_patch.vertical_center > man_patch.vertical_center:
            return ""yes""
    return ""no"""
4625512,What is the woman doing?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman doing?"")
    return woman_patches[0].simple_query(""What is the woman doing?"")"
9441941,Is the woman's hair red or black?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""Is the woman's hair red or black?"")"
2387432,What's on the table?," # assumes only one table
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What's on the table?"")
    return table_patches[0].simple_query(""What's on the table?"")"
10534717,What is the pillow on?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""What is the pillow on?"")
    pillow_patch = pillow_patches[0]
    return pillow_patch.simple_query(""What is the pillow on?"")"
19335685,"What fruits is the container behind of, apples or bananas?"," # assumes only one container patch
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")
    container_patch = container_patches[0]
    fruit_patches = image_patch.find(""fruit"")
    for fruit_patch in fruit_patches:
        if fruit_patch.horizontal_center > container_patch.horizontal_center:
            return fruit_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")
    return ""no"""
3127817,The goat is standing in what?," # returns the answer to the question
    image_patch = ImagePatch(image)
    goat_patches = image_patch.find(""goat"")
    # Question assumes only one goat patch
    if len(goat_patches) == 0:
        # If no goat is found, query the image directly
        return image_patch.simple_query(""The goat is standing in what?"")
    return goat_patches[0].simple_query(""The goat is standing in what?"")"
1588567,Where does the man that to the right of the mirror sit?," # assumes only one mirror patch
    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    if len(mirror_patches) == 0:
        # If no mirror is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    mirror_patch = mirror_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    if man_patch.horizontal_center > mirror_patch.horizontal_center:
        return man_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    return ""no"""
7399543,What is the floor made of?," # assumes only one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What is the floor made of?"")
    return floor_patches[0].simple_query(""What is the floor made of?"")"
13741124,What kind of animal is the house behind of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is the house behind of?"")"
1174904,Is the cobblestone sidewalk both large and gray?," # assumes only one cobblestone sidewalk
    image_patch = ImagePatch(image)
    cobblestone_patches = image_patch.find(""cobblestone sidewalk"")
    # Question assumes only one cobblestone sidewalk patch
    if len(cobblestone_patches) == 0:
        # If no cobblestone sidewalk is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    cobblestone_patch = cobblestone_patches[0]
    is_large = cobblestone_patch.verify_property(""cobblestone sidewalk"", ""large"")
    is_gray = cobblestone_patch.verify_property(""cobblestone sidewalk"", ""gray"")
    return bool_to_yesno(is_large and is_gray)"
13375231,What is the lettuce on?," # assumes only one lettuce patch
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What is the lettuce on?"")
    return lettuce_patches[0].simple_query(""What is the lettuce on?"")"
1194027,Which kind of clothing is black?," # crop would include the clothing so keep it in the query
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
9963477,Is the statue wearing a dress?," # assumes only one statue patch
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    statue_patch = statue_patches[0]
    return bool_to_yesno(statue_patch.verify_property(""statue"", ""dress""))"
1151995,Which side of the photo is the yellow vase on?," # returns ""left"" or ""right""
    image_patch = ImagePatch(image)
    yellow_vase_patches = image_patch.find(""yellow vase"")
    # Question assumes only one yellow vase patch
    if len(yellow_vase_patches) == 0:
        # If no yellow vase is found, query the image directly
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    if yellow_vase_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
712821,What is common to the bear and the belt?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    for bear_patch in bear_patches:
        belt_patches = image_patch.find(""belt"")
        for belt_patch in belt_patches:
            if belt_patch.simple_query(""Is the belt on the bear?"") == ""yes"":
                return belt_patch.simple_query(""What is common to the bear and the belt?"") # crop would include the belt so keep it in the query
    # If no belt is on the bear, pick the first bear
    return bear_patches[0].simple_query(""What is common to the bear and the belt?"")"
1757418,What is the vehicle to the right of the car?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    car_patch = car_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > car_patch.horizontal_center:
            return vehicle_patch.simple_query(""What is the vehicle to the right of the car?"")
    return ""no"""
7624100,Are the trunks that are gray wet and large?," # trunks are gray, wet, and large
    image_patch = ImagePatch(image)
    trunks_patches = image_patch.find(""trunks"")
    # Question assumes only one trunks patch
    if len(trunks_patches) == 0:
        # If no trunks are found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunks_patch in trunks_patches:
        is_gray = trunks_patch.verify_property(""trunks"", ""gray"")
        is_wet = trunks_patch.verify_property(""trunks"", ""wet"")
        is_large = trunks_patch.verify_property(""trunks"", ""large"")
        if is_gray and is_wet and is_large:
            return ""yes""
    return ""no"""
1125474,"On which side of the photo is the iron fence, the right or the left?"," # assumes only one iron fence
    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    # Question assumes only one iron fence patch
    if len(iron_fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    iron_fence_patch = iron_fence_patches[0]
    if iron_fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1300375,What is the name of the item of furniture that the printer is on?," # assumes only one printer patch
    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    if len(printer_patches) == 0:
        # If no printer is found, query the image directly
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    printer_patch = printer_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if printer_patch.horizontal_center > furniture_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    return ""no"""
5925196,What's the building covered by?," # assumes only one building patch
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    if len(building_patches) == 0:
        return image_patch.simple_query(""What's the building covered by?"")
    building_patch = building_patches[0]
    return building_patch.simple_query(""What's the building covered by?"")"
1948055,What watercraft is the white rope tying?," # assumes only one watercraft and one white rope
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    watercraft_patch = watercraft_patches[0]
    white_rope_patches = image_patch.find(""white rope"")
    # Question assumes only one white rope patch
    if len(white_rope_patches) == 0:
        return ""no""
    white_rope_patch = white_rope_patches[0]
    return watercraft_patch.simple_query(""What watercraft is the white rope tying?"")"
8540582,What kind of animal is in front of the leafy trees?," # assumes only one leafy tree patch
    image_patch = ImagePatch(image)
    leafy_tree_patches = image_patch.find(""leafy tree"")
    if len(leafy_tree_patches) == 0:
        # If no leafy tree is found, query the image directly
        return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")
    leafy_tree_patch = leafy_tree_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")
    animal_patch = animal_patches[0]
    if animal_patch.horizontal_center < leafy_tree_patch.horizontal_center:
        return animal_patch.simple_query(""What kind of animal is in front of the leafy trees?"")
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")"
3719411,What does the walking woman by the bus wear?," # assumes only one walking woman and one bus
    image_patch = ImagePatch(image)
    walking_woman_patches = image_patch.find(""walking woman"")
    # Question assumes only one walking woman patch
    if len(walking_woman_patches) == 0:
        # If no walking woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    walking_woman_patch = walking_woman_patches[0]
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        return walking_woman_patch.simple_query(""What does the walking woman by the bus wear?"")
    bus_patch = bus_patches[0]
    return walking_woman_patch.simple_query(""What does the walking woman by the bus wear?"") # crop would include the bus so keep it in the query"
1129508,Is the controller to the left of a pillow?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center < controller_patch.horizontal_center:
                return ""yes""
    return ""no"""
18664084,Is there any sheep by the fence?," # assumes one sheep and one fence
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is there any sheep by the fence?"")
    for sheep_patch in sheep_patches:
        fence_patches = image_patch.find(""fence"")
        for fence_patch in fence_patches:
            if sheep_patch.horizontal_center > fence_patch.horizontal_center:
                return ""yes""
    return ""no"""
6912079,What animal is this?," # returns the name of the animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is this?"")
    return animal_patches[0].simple_query(""What animal is this?"")"
3412029,Where is the person?," # returns the person's name
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person?"")
    return person_patches[0].simple_query(""Where is the person?"")"
14161122,What animal is in the water?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"")"
1781542,What is the item of furniture to the right of the baby the parent is to the left of?," # assumes only one baby and one parent
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    baby_patch = baby_patches[0]
    parent_patches = image_patch.find(""parent"")
    # Question assumes only one parent patch
    if len(parent_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    parent_patch = parent_patches[0]
    if parent_patch.horizontal_center < baby_patch.horizontal_center:
        furniture_patches = image_patch.find(""furniture"")
        # Question assumes only one furniture patch
        if len(furniture_patches) == 0:
            return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
        furniture_patch = furniture_patches[0]
        if furniture_patch.horizontal_center > baby_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    return ""no"""
15699496,What is the cup that looks clean made of?," # assumes only one cup patch
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    cup_patch = cup_patches[0]
    return cup_patch.simple_query(""What is the cup that looks clean made of?"")"
12765451,What animals are to the right of the ladder?," # assumes only one ladder patch
    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    ladder_patch = ladder_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > ladder_patch.horizontal_center:
            return animal_patch.simple_query(""What animals are to the right of the ladder?"") # crop would include the ladder so keep it in the query
    return ""no"""
191044307,What animal is black?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What animal is black?"")
    return ""no"""
12639181,Who is wearing shorts?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, pick the first person
    return person_patches[0].simple_query(""Who is wearing shorts?"")"
10630949,Is the person that is not male wearing an elbow pad?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    person_patch = person_patches[0]
    is_male = person_patch.verify_property(""person"", ""male"")
    if not is_male:
        return person_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    return ""no"""
14544602,What is the boy holding?," # assumes only one boy patch
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    return boy_patches[0].simple_query(""What is the boy holding?"")"
2986699,Of what material the dish?," # returns the material of the dish
    image_patch = ImagePatch(image)
    dish_patches = image_patch.find(""dish"")
    # Question assumes only one dish patch
    if len(dish_patches) == 0:
        # If no dish is found, query the image directly
        return image_patch.simple_query(""Of what material is the dish?"")
    return dish_patches[0].simple_query(""Of what material is the dish?"")"
161013513,What kind of animal is on the street?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    return animal_patches[0].simple_query(""What kind of animal is on the street?"")"
15143936,What animal is before the roof?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is before the roof?"")"
1955043,Who is playing with the ball?," # assumes one ball patch
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Who is playing with the ball?"")
    return ball_patches[0].simple_query(""Who is playing with the ball?"")"
91044150,What is the name of the animals in front of the trees beside the river?," # assumes only one tree and one river
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")
    tree_patch = tree_patches[0]
    river_patches = image_patch.find(""river"")
    # Question assumes only one river patch
    if len(river_patches) == 0:
        return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")
    river_patch = river_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")
    animal_patch = animal_patches[0]
    if animal_patch.horizontal_center > tree_patch.horizontal_center and animal_patch.horizontal_center < river_patch.horizontal_center:
        return animal_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")"
13483129,What kind of fruit is hanging?," # assumes only one fruit patch
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is hanging?"")
    return fruit_patches[0].simple_query(""What kind of fruit is hanging?"")"
7317299,What is under the bush?," # assumes only one bush patch
    image_patch = ImagePatch(image)
    bush_patches = image_patch.find(""bush"")
    if len(bush_patches) == 0:
        # If no bush is found, query the image directly
        return image_patch.simple_query(""What is under the bush?"")
    bush_patch = bush_patches[0]
    return bush_patch.simple_query(""What is under the bush?"")"
17432396,Are there kangaroos or birds in this photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)"
10457241,What is the color of the trousers?," # assumes only one patch
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"")"
2913850,Is the placemat in the bottom or in the top part?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or in the top part?"")
    if placemat_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12788747,What is covered with blanket?," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What is covered with blanket?"")
    return blanket_patches[0].simple_query(""What is covered with blanket?"")"
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?," # assumes only one man and one furniture
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    man_patch = man_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return ""no""
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > man_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    return ""no"""
18673671,"In which part of the picture is the desk drawer, the bottom or the top?"," # desk drawer
    image_patch = ImagePatch(image)
    desk_drawer_patches = image_patch.find(""desk drawer"")
    # Question assumes only one desk drawer patch
    if len(desk_drawer_patches) == 0:
        # If no desk drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    if desk_drawer_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
19900141,Are there napkins or tablecloths?," # returns yes or no
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)"
19737232,Is the book on the right of the picture?," # assumes only one book patch
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book on the right of the picture?"")
    book_patch = book_patches[0]
    if book_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
475064,Who is wearing the glasses?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing glasses?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing the glasses?"") # crop would include the glasses so keep it in the query
    # If no person is wearing glasses, pick the first person
    return person_patches[0].simple_query(""Who is wearing the glasses?"")"
8594579,Is there a woman to the right of the orange object that is to the right of the person?," # assumes only one person, orange object, and woman
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    person_patch = person_patches[0]
    orange_object_patches = image_patch.find(""orange object"")
    # Question assumes only one orange object patch
    if len(orange_object_patches) == 0:
        return ""no""
    orange_object_patch = orange_object_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center > orange_object_patch.horizontal_center and orange_object_patch.horizontal_center > person_patch.horizontal_center:
        return ""yes""
    return ""no"""
14602992,Which side of the image is the couch on?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
9944587,How tall is the man that is wearing a shirt?," # returns the height of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    man_patch = man_patches[0]
    if man_patch.verify_property(""man"", ""wearing a shirt""):
        return str(man_patch.height)
    return ""no"""
13736712,Are there any giraffes?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe""))"
6996118,The young girl is wearing what?," # assumes only one young girl patch
    image_patch = ImagePatch(image)
    young_girl_patches = image_patch.find(""young girl"")
    if len(young_girl_patches) == 0:
        # If no young girl is found, query the image directly
        return image_patch.simple_query(""The young girl is wearing what?"")
    return young_girl_patches[0].simple_query(""The young girl is wearing what?"")"
19992576,Is the basket on the floor small and brown?," # assumes only one basket patch
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    basket_patch = basket_patches[0]
    is_on_floor = (basket_patch.simple_query(""Is the basket on the floor?"") == ""yes"")
    is_small = (basket_patch.simple_query(""Is the basket small?"") == ""yes"")
    is_brown = (basket_patch.simple_query(""Is the basket brown?"") == ""yes"")
    return bool_to_yesno(is_on_floor and is_small and is_brown)"
17332401,What is the boy in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"")"
15586294,Which side is the leather armchair on?," # assumes only one armchair
    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""armchair"")
    if len(armchair_patches) == 0:
        # If no armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    armchair_patch = armchair_patches[0]
    if armchair_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
15658324,What is the horse in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"")"
18453709,What is the item of furniture that has the same color as the controller the man is holding called?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    if len(controller_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    for controller_patch in controller_patches:
        if controller_patch.verify_property(""controller"", ""color"") == man_patch.verify_property(""man"", ""color""):
            return controller_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")"
2531874,Who is playing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is playing?"")
    return person_patches[0].simple_query(""Who is playing?"")"
3112009,Is the plate on the left side?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    plate_patch = plate_patches[0]
    return bool_to_yesno(plate_patch.horizontal_center < image_patch.horizontal_center)"
1527613,On which side of the picture is the bag?," # returns ""left"" or ""right""
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    if bag_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
11781054,Are both the road and the roof the same color?," # assumes only one road and one roof
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    roof_patches = image_patch.find(""roof"")
    if len(road_patches) == 0 or len(roof_patches) == 0:
        # If no road or roof is found, query the image directly
        return image_patch.simple_query(""Are both the road and the roof the same color?"")
    road_color = road_patches[0].simple_query(""What color is the road?"")
    roof_color = roof_patches[0].simple_query(""What color is the roof?"")
    return bool_to_yesno(road_color == roof_color)"
161027384,What is the green rug hanging on?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    rug_patches = image_patch.find(""rug"")
    # Question assumes only one rug patch
    if len(rug_patches) == 0:
        # If no rug is found, query the image directly
        return image_patch.simple_query(""What is the green rug hanging on?"")
    for rug_patch in rug_patches:
        if rug_patch.simple_query(""Is the rug green?"") == ""yes"":
            return rug_patch.simple_query(""What is the green rug hanging on?"") # crop would include the rug so keep it in the query
    # If no green rug is found, pick the first rug
    return rug_patches[0].simple_query(""What is the green rug hanging on?"")"
14153714,Who is using the laptop?," # assumes one laptop patch
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Who is using the laptop?"")
    return laptop_patches[0].simple_query(""Who is using the laptop?"")"
1969500,Who in the photo is standing?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who in the photo is standing?"")
    return person_patches[0].simple_query(""Who in the photo is standing?"")"
693318,Do you see any plates in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate""))"
19613394,The person on the skateboard is wearing what?," # assumes only one person on the skateboard
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""The person on the skateboard is wearing what?"")"
19927237,Is the blue car in front of the white van?," # assumes only one blue car and one white van
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    white_van_patches = image_patch.find(""white van"")
    # Question assumes only one blue car and one white van
    if len(blue_car_patches) == 0 or len(white_van_patches) == 0:
        # If no blue car or white van is found, query the image directly
        return image_patch.simple_query(""Is the blue car in front of the white van?"")
    blue_car_patch = blue_car_patches[0]
    white_van_patch = white_van_patches[0]
    if blue_car_patch.horizontal_center < white_van_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
31054022,What is the box sitting on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the box sitting on?"")"
17634413,Does the ground look snowy and brown?," # assumes only one ground patch
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Does the ground look snowy and brown?"")
    ground_patch = ground_patches[0]
    is_snowy = ground_patch.verify_property(""ground"", ""snowy"")
    is_brown = ground_patch.verify_property(""ground"", ""brown"")
    return bool_to_yesno(is_snowy and is_brown)"
15185768,Does the sky look blue and clear?," # image is a PIL.Image.Image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""blue"") and image_patch.verify_property(""sky"", ""clear""))"
1589160,Does the person that is sitting lean against a fire hydrant?," # assumes only one person and one fire hydrant
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    person_patch = person_patches[0]
    fire_hydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(fire_hydrant_patches) == 0:
        return ""no""
    fire_hydrant_patch = fire_hydrant_patches[0]
    if person_patch.horizontal_center > fire_hydrant_patch.horizontal_center:
        return ""yes""
    return ""no"""
2142522,Are there any shopping carts or mannequins in this photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)"
17362234,Are there cages or scrub brushes in this picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)"
4955854,Is the lamp below the chain?," # assumes only one lamp and one chain
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    for lamp_patch in lamp_patches:
        chain_patches = image_patch.find(""chain"")
        for chain_patch in chain_patches:
            if lamp_patch.vertical_center < chain_patch.vertical_center:
                return ""yes""
    return ""no"""
10463545,Is the computer to the right of the other computer silver or black?," # assumes only one computer patch
    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    if len(computer_patches) == 0:
        # If no computer is found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    computer_patch = computer_patches[0]
    other_computer_patches = image_patch.find(""computer"")
    if len(other_computer_patches) == 0:
        return ""no""
    other_computer_patch = other_computer_patches[0]
    if computer_patch.horizontal_center > other_computer_patch.horizontal_center:
        return computer_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    else:
        return other_computer_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")"
2265037,What is the girl wearing?," # returns the name of the girl's clothing
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"")"
15485146,Are there any blue numbers or letters?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_number = image_patch.exists(""blue number"")
    is_blue_letter = image_patch.exists(""blue letter"")
    return bool_to_yesno(is_blue_number or is_blue_letter)"
3483992,Is the long bus to the left or to the right of the person with the backpack?," # assumes only one person with a backpack
    image_patch = ImagePatch(image)
    person_with_backpack_patches = image_patch.find(""person with backpack"")
    # Question assumes only one person with a backpack patch
    if len(person_with_backpack_patches) == 0:
        # If no person with a backpack is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    person_with_backpack_patch = person_with_backpack_patches[0]
    long_bus_patches = image_patch.find(""long bus"")
    # Question assumes only one long bus patch
    if len(long_bus_patches) == 0:
        return ""no""
    for long_bus_patch in long_bus_patches:
        if long_bus_patch.horizontal_center < person_with_backpack_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
13598461,What is the device that is not on called?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    for device_patch in device_patches:
        is_on = (device_patch.simple_query(""Is the device on?"") == ""yes"")
        if not is_on:
            return device_patch.simple_query(""What is the device that is not on called?"") # crop would include the device so keep it in the query
    # If no device is not on, pick the first device
    return device_patches[0].simple_query(""What is the device that is not on called?"")"
13885436,The sky has what color?," # returns the color of the sky
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"")"
7432467,Is the black container to the left of the man that is on the motorcycle?," # assumes only one man and one motorcycle
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    man_patch = man_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        return ""no""
    motorcycle_patch = motorcycle_patches[0]
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        return ""no""
    black_container_patch = black_container_patches[0]
    if black_container_patch.horizontal_center < man_patch.horizontal_center and man_patch.horizontal_center < motorcycle_patch.horizontal_center:
        return ""yes""
    return ""no"""
19540096,Is the fire in an oven?," # assumes only one fire patch
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    return bool_to_yesno(fire_patches[0].verify_property(""fire"", ""in oven""))"
18291107,The horse is where?," # returns the location of the horse
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""The horse is where?"")
    return horse_patches[0].simple_query(""The horse is where?"")"
5435474,Is the man that is to the left of the motorbike wearing a hat?," # assumes only one man and one motorbike
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    man_patch = man_patches[0]
    motorbike_patches = image_patch.find(""motorbike"")
    # Question assumes only one motorbike patch
    if len(motorbike_patches) == 0:
        return ""no""
    motorbike_patch = motorbike_patches[0]
    if man_patch.horizontal_center < motorbike_patch.horizontal_center:
        return man_patch.simple_query(""Is the man wearing a hat?"")
    return ""no"""
226307,Are there any tables in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))"
1944826,Who is reflected in the mirror?," # assumes one mirror patch
    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        # If no mirror is found, query the image directly
        return image_patch.simple_query(""Who is reflected in the mirror?"")
    mirror_patch = mirror_patches[0]
    return mirror_patch.simple_query(""Who is reflected in the mirror?"")"
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    woman_patch = woman_patches[0]
    stove_patches = image_patch.find(""stove"")
    if len(stove_patches) == 0:
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    for stove_patch in stove_patches:
        if stove_patch.horizontal_center > woman_patch.horizontal_center:
            utensil_patches = image_patch.find(""utensil"")
            if len(utensil_patches) == 0:
                return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
            for utensil_patch in utensil_patches:
                if utensil_patch.vertical_center > stove_patch.vertical_center:
                    return utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")"
18435846,What is the color of the balloon that is to the right of the backpack?," # assumes only one backpack and one balloon
    image_patch = ImagePatch(image)
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes only one backpack patch
    if len(backpack_patches) == 0:
        # If no backpack is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    backpack_patch = backpack_patches[0]
    balloon_patches = image_patch.find(""balloon"")
    # Question assumes only one balloon patch
    if len(balloon_patches) == 0:
        return ""no""
    for balloon_patch in balloon_patches:
        if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
            return balloon_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    return ""no"""
8390894,Is the woman to the right of the man sitting on a sofa?," # assumes one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one man and one woman patch
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center > man_patch.horizontal_center:
        return ""yes""
    return ""no"""
18896007,Which side of the image is the pot on?," # assumes only one pot
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
19323898,Is that pillow on a couch?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is that pillow on a couch?"")
    pillow_patch = pillow_patches[0]
    couch_patches = image_patch.find(""couch"")
    for couch_patch in couch_patches:
        if pillow_patch.horizontal_center > couch_patch.horizontal_center:
            return ""yes""
    return ""no"""
1281034,Where are the trees?," # returns the answer to ""Where are the trees?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the trees?"")"
13515147,What is on the cow?," # assumes one cow patch
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""What is on the cow?"")
    cow_patch = cow_patches[0]
    return cow_patch.simple_query(""What is on the cow?"")"
91036716,What is the skater doing?," # assumes only one skater
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    return skater_patches[0].simple_query(""What is the skater doing?"")"
17791510,What is the person to the left of the boy carrying?," # assumes only one person and one boy
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    person_patch = person_patches[0]
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    boy_patch = boy_patches[0]
    if person_patch.horizontal_center < boy_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the left of the boy carrying?"")
    return image_patch.simple_query(""What is the person to the left of the boy carrying?"")"
13152020,Is the ground wet or dry?," # assumes only one ground patch
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Is the ground wet or dry?"")
    return ground_patches[0].simple_query(""Is the ground wet or dry?"")"
19312096,"On which side is the purse, the left or the right?"," # assumes only one purse patch
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    purse_patch = purse_patches[0]
    if purse_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
71002343,Are there breads in this photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bread""))"
9113663,Do you see either any snow or sand that are white?," # returns yes or no
    image_patch = ImagePatch(image)
    is_snow = image_patch.exists(""snow"")
    is_sand = image_patch.exists(""sand"")
    return bool_to_yesno(is_snow or is_sand)"
10243612,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
555062,What vegetable is to the left of the napkin?," # assumes only one napkin patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""What vegetable is to the left of the napkin?"")
    napkin_patch = napkin_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center < napkin_patch.horizontal_center:
            return vegetable_patch.simple_query(""What vegetable is to the left of the napkin?"")
    return ""no"""
15599523,Is the dog on the right side?," # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    dog_patch = dog_patches[0]
    return bool_to_yesno(dog_patch.horizontal_center > image_patch.horizontal_center)"
101019673,What is the man wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"")"
333047,Do you see any men to the right of the orange tent?," # image is the input image
    image_patch = ImagePatch(image)
    orange_tent_patches = image_patch.find(""orange tent"")
    # Question assumes only one orange tent patch
    if len(orange_tent_patches) == 0:
        # If no orange tent is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for orange_tent_patch in orange_tent_patches:
        man_patches = image_patch.find(""man"")
        for man_patch in man_patches:
            if man_patch.horizontal_center > orange_tent_patch.horizontal_center:
                return ""yes""
    return ""no"""
13907796,Is the shirt striped and green?," # image is the image to be queried
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""striped"") and shirt_patches[0].verify_property(""shirt"", ""green""))"
17207604,Are there either bottles or shelves?," # returns a boolean
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)"
1890653,What vehicle is to the right of the train on the left of the photo?," # assumes only one train patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    train_patch = train_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > train_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    return ""no"""
7165131,Is that train engine small or large?," # assumes only one train engine
    image_patch = ImagePatch(image)
    train_engine_patches = image_patch.find(""train engine"")
    if len(train_engine_patches) == 0:
        # If no train engine is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    return train_engine_patches[0].simple_query(""Is that train engine small or large?"")"
21049362,Where are the railroad tracks?," # returns the answer to ""Where are the railroad tracks?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"")"
6224352,What is the animal looking at?," # assumes one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal looking at?"")
    animal_patch = animal_patches[0]
    return animal_patch.simple_query(""What is the animal looking at?"")"
14367593,What are the children playing?," # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What are the children playing?"")
    return child_patches[0].simple_query(""What are the children playing?"")"
598297,Are there combs or figurines in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)"
16409127,What is the wire on?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"")"
5841062,Is the tunnel small or large?," # assumes only one tunnel patch
    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    return tunnel_patches[0].simple_query(""Is the tunnel small or large?"")"
17560468,Do you see trains or windows?," # returns yes or no
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)"
9321809,What is the person near the man wearing?," # assumes only one person and one man
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    man_patches = image_patch.find(""man"")
    # Question assumes only one person and one man patch
    if len(person_patches) == 0 or len(man_patches) == 0:
        # If no person or man is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    person_patch = person_patches[0]
    man_patch = man_patches[0]
    if person_patch.horizontal_center > man_patch.horizontal_center:
        return person_patch.simple_query(""What is the person near the man wearing?"")
    else:
        return man_patch.simple_query(""What is the person near the man wearing?"")"
12352375,Is the vehicle that is sitting down black or blue?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    vehicle_patch = vehicle_patches[0]
    is_sitting_down = vehicle_patch.verify_property(""vehicle"", ""sitting down"")
    if is_sitting_down:
        return vehicle_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    return ""no"""
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?," # assumes only one white thing and one metal trash can
    image_patch = ImagePatch(image)
    white_thing_patches = image_patch.find(""white thing"")
    metal_trash_can_patches = image_patch.find(""metal trash can"")
    # Question assumes only one white thing and one metal trash can
    if len(white_thing_patches) == 0 or len(metal_trash_can_patches) == 0:
        # If no white thing or metal trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    white_thing_patch = white_thing_patches[0]
    metal_trash_can_patch = metal_trash_can_patches[0]
    if metal_trash_can_patch.horizontal_center < white_thing_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
5800248,Is it outdoors?," # image is the image to be queried
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
4604785,Does the pizza slice to the left of the pizza have large size?," # assumes only one pizza slice
    image_patch = ImagePatch(image)
    pizza_slice_patches = image_patch.find(""pizza slice"")
    # Question assumes only one pizza slice patch
    if len(pizza_slice_patches) == 0:
        # If no pizza slice is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    pizza_slice_patch = pizza_slice_patches[0]
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        return ""no""
    pizza_patch = pizza_patches[0]
    if pizza_slice_patch.horizontal_center < pizza_patch.horizontal_center:
        return ""yes""
    return ""no"""
15185845,What's the man wearing?," # returns the man's clothing
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")"
2282232,Where is the snow?," # returns the answer to ""Where is the snow?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"")"
7889197,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
11292587,Are there either any blankets or pictures in the photograph?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)"
154682,Where does the bird stand on?," # returns the name of the object
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Where does the bird stand on?"")
    return bird_patches[0].simple_query(""Where does the bird stand on?"")"
10435315,Is the man holding a racket?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
121035887,Do the man shorts have white color?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""shorts"", ""white""))"
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?," # assumes only one man and one cow
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    cow_patch = cow_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.horizontal_center < man_patch.horizontal_center and man_patch.horizontal_center < cow_patch.horizontal_center:
        return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")"
19659501,What is the color of the umbrella the bird is on?," # assumes only one umbrella and one bird
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes only one umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    umbrella_patch = umbrella_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return umbrella_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    bird_patch = bird_patches[0]
    return umbrella_patch.simple_query(""What is the color of the umbrella the bird is on?"")"
10595217,Where is the grass?," # returns the answer to ""Where is the grass?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")"
14803743,Which kind of clothing is black?," # crop would include the clothing so keep it in the query
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
19743238,Is the man on the right side?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
3965204,Are the mountains covered with snow?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    mountains_patches = image_patch.find(""mountain"")
    # Question assumes only one mountain patch
    if len(mountains_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    for mountain_patch in mountains_patches:
        is_covered_with_snow = mountain_patch.verify_property(""mountain"", ""covered with snow"")
        if is_covered_with_snow:
            return ""yes""
    return ""no"""
141024710,Are there both windows and cars in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)"
6481635,What color do you think the shirt is?," # crop would include the shirt so keep it in the query
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color do you think the shirt is?"")"
3623367,What's he doing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What's he doing?"")
    return person_patches[0].simple_query(""What's he doing?"")"
15634950,Where is the giraffe in front of the hay eating from?," # assumes only one giraffe and one hay patch
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    giraffe_patch = giraffe_patches[0]
    hay_patches = image_patch.find(""hay"")
    # Question assumes only one hay patch
    if len(hay_patches) == 0:
        return ""no""
    hay_patch = hay_patches[0]
    if giraffe_patch.horizontal_center < hay_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16644500,What animal is the log pulled by?," # assumes one log patch
    image_patch = ImagePatch(image)
    log_patches = image_patch.find(""log"")
    # Question assumes only one log patch
    if len(log_patches) == 0:
        # If no log is found, query the image directly
        return image_patch.simple_query(""What animal is the log pulled by?"")
    log_patch = log_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""no""
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > log_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the log pulled by?"")
    return ""no"""
3202108,Which side is the car on?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
10137201,Are the papers in the bottom part of the picture?," # assumes only one paper patch
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    paper_patch = paper_patches[0]
    if paper_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
5325670,Is the boy to the left or to the right of the person that is on the left?," # assumes only one person on the left
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    person_patch = person_patches[0]
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        return ""no""
    for boy_patch in boy_patches:
        if boy_patch.horizontal_center < person_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
8438091,The picture is what color?," # returns the color of the picture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The picture is what color?"")"
4325939,On which side of the photo is the banana?," # banana is a fruit
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    if banana_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
1425189,What is the name of the brown piece of furniture?," # brown piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""brown piece of furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return furniture_patches[0].simple_query(""What is the name of the brown piece of furniture?"")"
5119962,Is the man to the right of glasses?," # assumes only one man and one pair of glasses
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    if len(glasses_patches) == 0:
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center > man_patch.horizontal_center:
        return ""yes""
    return ""no"""
16523418,Is the toilet lid down or up?," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    toilet_patch = toilet_patches[0]
    return toilet_patch.simple_query(""Is the toilet lid down or up?"")"
6522554,Which kind of device does the man hold?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    for device_patch in device_patches:
        if device_patch.horizontal_center > man_patch.horizontal_center:
            return device_patch.simple_query(""Which kind of device does the man hold?"") # crop would include the device so keep it in the query
    return ""no"""
870619,What is the device to the left of the person that is to the left of the television?," # assumes only one person and one television
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    person_patch = person_patches[0]
    television_patches = image_patch.find(""television"")
    # Question assumes only one television patch
    if len(television_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    television_patch = television_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < person_patch.horizontal_center and person_patch.horizontal_center < television_patch.horizontal_center:
            return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")"
12713794,Does the woman to the left of the man wear a necklace?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one man and one woman patch
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return woman_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    else:
        return ""no"""
824070,What is the man doing?," # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    return man_patches[0].simple_query(""What is the man doing?"")"
11593733,Which kind of furniture is right to the pillow?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    return ""no"""
3357821,Does the dog to the left of the other dog look small or large?," # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    dog_patch = dog_patches[0]
    other_dog_patches = image_patch.find(""dog"")
    if len(other_dog_patches) == 0:
        return ""no""
    other_dog_patch = other_dog_patches[0]
    if dog_patch.horizontal_center < other_dog_patch.horizontal_center:
        return dog_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    else:
        return other_dog_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")"
338026,Are the white candles short or tall?," # assumes only one candle
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    candle_patch = candle_patches[0]
    return candle_patch.simple_query(""Are the white candles short or tall?"")"
15346232,What kind of fruit is the girl holding?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    girl_patch = girl_patches[0]
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        return ""no""
    return fruit_patches[0].simple_query(""What kind of fruit is the girl holding?"") # crop would include the fruit so keep it in the query"
13553098,"On which side of the photo is the yellow vehicle, the right or the left?"," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
81030271,Is the gray car to the right or to the left of the cart?," # assumes only one gray car and one cart
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    gray_car_patch = gray_car_patches[0]
    cart_patches = image_patch.find(""cart"")
    # Question assumes only one cart patch
    if len(cart_patches) == 0:
        return ""no""
    cart_patch = cart_patches[0]
    if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?," # assumes only one canister made of chrome
    image_patch = ImagePatch(image)
    canister_patches = image_patch.find(""canister made of chrome"")
    # Question assumes only one canister patch
    if len(canister_patches) == 0:
        # If no canister is found, query the image directly
        return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    canister_patch = canister_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        return ""no""
    for cooking_utensil_patch in cooking_utensil_patches:
        if cooking_utensil_patch.horizontal_center > canister_patch.horizontal_center:
            return cooking_utensil_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")
    return ""no"""
8240699,What animal is in front of the bird?," # assumes only one bird patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the bird?"")
    bird_patch = bird_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > bird_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in front of the bird?"")
    return ""no"""
10105081,Is the fence white or green?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].best_text_match([""white"", ""green""])"
13613689,Is there a train or a fence in the picture?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)"
10662521,What is the bottle made of?," # bottle is a container
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"")"
1152309,Which kind of fruit is on the plate?," # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    fruit_patches = plate_patches[0].find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    return fruit_patches[0].simple_query(""Which kind of fruit is on the plate?"")"
16701575,What device is to the right of the cake?," # assumes only one cake patch
    image_patch = ImagePatch(image)
    cake_patches = image_patch.find(""cake"")
    if len(cake_patches) == 0:
        # If no cake is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    cake_patch = cake_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > cake_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the right of the cake?"")
    return ""no"""
6572516,What material is the ceiling?," # ceiling is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")"
11213633,Are there both magazines and umbrellas?," # returns a boolean
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)"
8606777,What is the color of the egg in the middle of the picture?," # assumes only one egg patch
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    return egg_patches[0].simple_query(""What is the color of the egg in the middle of the picture?"")"
14371534,Are the gold pans on the right part or on the left?," # assumes only one gold pan
    image_patch = ImagePatch(image)
    gold_pan_patches = image_patch.find(""gold pan"")
    # Question assumes only one gold pan patch
    if len(gold_pan_patches) == 0:
        # If no gold pan is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    gold_pan_patch = gold_pan_patches[0]
    if gold_pan_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16538076,What does the man that is not tall wear?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    man_patch = man_patches[0]
    if man_patch.verify_property(""man"", ""tall""):
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    return man_patch.simple_query(""What does the man that is not tall wear?"")"
5483644,"On which side is the woman, the left or the right?"," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181041779,What is the animal in this photograph?," # returns the name of the animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal in this photograph?"")
    return animal_patches[0].simple_query(""What is the animal in this photograph?"")"
1290926,Are there either any life vests or flags?," # returns yes or no
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)"
18273738,Do you see a cup?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cup""))"
4211922,Who is sitting on the table?," # assumes one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Who is sitting on the table?"")
    table_patch = table_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return ""no""
    person_patch = person_patches[0]
    if person_patch.horizontal_center > table_patch.horizontal_center:
        return person_patch.simple_query(""Who is sitting on the table?"")
    return ""no"""
6587526,What is the color of the girl to the left of the other girl?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    girl_patch = girl_patches[0]
    other_girl_patches = image_patch.find(""girl"")
    if len(other_girl_patches) == 0:
        return ""no""
    other_girl_patch = other_girl_patches[0]
    if girl_patch.horizontal_center < other_girl_patch.horizontal_center:
        return girl_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    return ""no"""
6599090,What is the person to the right of the car holding?," # assumes only one person and one car
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    person_patch = person_patches[0]
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        return ""no""
    car_patch = car_patches[0]
    if person_patch.horizontal_center > car_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the right of the car holding?"")
    return ""no"""
1174895,What is the vehicle in the parking lot?," # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    return vehicle_patches[0].simple_query(""What is the vehicle in the parking lot?"")"
14755158,Who is the woman in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the woman in front of?"")"
18349161,Where does the cow that is standing stand?," # assumes only one cow patch
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    cow_patch = cow_patches[0]
    return cow_patch.simple_query(""Where does the cow that is standing stand?"")"
7472884,On which side is the tap?," # assumes only one tap
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""On which side is the tap?"")
    if tap_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
111051831,On which side of the image is the cabinet?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    if cabinet_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3590007,On which side of the image is the fork?," # image is a numpy array
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
2409726,Do you see men to the right of the bag the person is carrying?," # assumes only one person carrying a bag
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    person_patch = person_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""no""
    for bag_patch in bag_patches:
        if bag_patch.horizontal_center > person_patch.horizontal_center:
            return ""yes""
    return ""no"""
577862,Are the artwork and the computer desk made of the same material?," # assumes only one artwork and one computer desk
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    computer_desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one artwork and one computer desk
    if len(artwork_patches) == 0 or len(computer_desk_patches) == 0:
        # If no artwork or computer desk is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    artwork_patch = artwork_patches[0]
    computer_desk_patch = computer_desk_patches[0]
    return bool_to_yesno(artwork_patch.verify_property(""artwork"", ""material"") == computer_desk_patch.verify_property(""computer desk"", ""material""))"
14298125,Who is playing Wii?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is playing Wii?"")
    return person_patches[0].simple_query(""Who is playing Wii?"")"
9382689,What's the floor made of?," # assumes only one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""What's the floor made of?"")
    return floor_patches[0].simple_query(""What's the floor made of?"")"
12889614,Who is wearing the dress?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the dress?"")
    return person_patches[0].simple_query(""Who is wearing the dress?"")"
15127108,Does the tea pot above the receipt look short and white?," # assumes only one tea pot and one receipt
    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    # Question assumes only one tea pot patch
    if len(tea_pot_patches) == 0:
        # If no tea pot is found, query the image directly
        return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")
    tea_pot_patch = tea_pot_patches[0]
    receipt_patches = image_patch.find(""receipt"")
    # Question assumes only one receipt patch
    if len(receipt_patches) == 0:
        return ""no""
    receipt_patch = receipt_patches[0]
    if tea_pot_patch.vertical_center > receipt_patch.vertical_center:
        return bool_to_yesno(tea_pot_patch.verify_property(""tea pot"", ""short"") and tea_pot_patch.verify_property(""tea pot"", ""white""))
    return ""no"""
15632653,Which room is it?," # image is the image of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
485962,Which kind of clothing is black?," # crop would include the clothing so keep it in the query
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
490992,Is the fence on the left side or on the right of the picture?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17133284,Do the mountains look rocky?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do the mountains look rocky?"")"
17573742,Is the woman to the right of the camera wearing a coat?," # assumes only one woman and one camera
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    woman_patch = woman_patches[0]
    camera_patches = image_patch.find(""camera"")
    # Question assumes only one camera patch
    if len(camera_patches) == 0:
        return ""no""
    camera_patch = camera_patches[0]
    if woman_patch.horizontal_center > camera_patch.horizontal_center:
        return ""yes""
    return ""no"""
3395780,Is the vehicle to the left of the parking meter covered in rain?," # assumes only one vehicle and one parking meter
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    vehicle_patch = vehicle_patches[0]
    parking_meter_patches = image_patch.find(""parking meter"")
    # Question assumes only one parking meter patch
    if len(parking_meter_patches) == 0:
        return ""no""
    parking_meter_patch = parking_meter_patches[0]
    if vehicle_patch.horizontal_center < parking_meter_patch.horizontal_center:
        return ""yes""
    return ""no"""
1542668,Is there a black laptop or desk?," # assumes only one laptop or desk
    image_patch = ImagePatch(image)
    is_black_laptop = image_patch.exists(""black laptop"")
    is_black_desk = image_patch.exists(""black desk"")
    return bool_to_yesno(is_black_laptop or is_black_desk)"
1655442,What type of food is to the right of the waffles that are to the right of the person?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    person_patch = person_patches[0]
    waffles_patches = image_patch.find(""waffles"")
    if len(waffles_patches) == 0:
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for waffles_patch in waffles_patches:
        if waffles_patch.horizontal_center > person_patch.horizontal_center:
            food_patches = image_patch.find(""food"")
            if len(food_patches) == 0:
                return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
            for food_patch in food_patches:
                if food_patch.horizontal_center > waffles_patch.horizontal_center:
                    return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")"
395290,How large is the bag?," # returns a string
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"")"
16138893,Are there both motorcycles and cars in this scene?," # image is the input image
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)"
1462176,Who is wearing shorts?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing shorts?"") # crop would include the shorts so keep it in the query
    # If no person is wearing shorts, pick the first person
    return person_patches[0].simple_query(""Who is wearing shorts?"")"
171032184,What hangs from the windows?," # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""What hangs from the windows?"")
    for window_patch in window_patches:
        hanging_objects = window_patch.find(""hanging object"")
        # Question assumes only one hanging object patch
        if len(hanging_objects) == 0:
            return ""no""
        return hanging_objects[0].simple_query(""What hangs from the windows?"")"
15962394,Are there both spoons and plates in the image?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)"
16184773,What is in front of the giraffe that the tree is behind of?," # assumes one giraffe and one tree
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    giraffe_patch = giraffe_patches[0]
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        return ""no""
    tree_patch = tree_patches[0]
    if tree_patch.horizontal_center > giraffe_patch.horizontal_center:
        return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    return ""no"""
8197176,What color is the jacket that the man wears?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = image_patch.find(""jacket"")
    if len(jacket_patches) == 0:
        return ""no""
    for jacket_patch in jacket_patches:
        if jacket_patch.horizontal_center > man_patch.horizontal_center:
            return jacket_patch.simple_query(""What color is the jacket that the man wears?"")
    return ""no"""
3440931,What are that pieces of furniture called?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What are that pieces of furniture called?"")
    return furniture_patches[0].simple_query(""What are that pieces of furniture called?"")"
337924,What is the fruit that is to the left of the chair?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")
    chair_patch = chair_patches[0]
    fruit_patches = image_patch.find(""fruit"")
    for fruit_patch in fruit_patches:
        if fruit_patch.horizontal_center < chair_patch.horizontal_center:
            return fruit_patch.simple_query(""What is the fruit that is to the left of the chair?"") # crop would include the fruit so keep it in the query
    # If no fruit is to the left of the chair, pick the first fruit
    return fruit_patches[0].simple_query(""What is the fruit that is to the left of the chair?"")"
16208211,What do you think are the bowls on?," # bowls on what?
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think are the bowls on?"")"
18330260,Is the sky above the trees open and clear?," # returns yes or no
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        # If no sky is found, query the image directly
        return image_patch.simple_query(""Is the sky above the trees open and clear?"")
    for sky_patch in sky_patches:
        if sky_patch.verify_property(""sky"", ""open and clear""):
            return ""yes""
    return ""no"""
14119691,Does the squirrel to the right of the stuffed dog look white?," # assumes only one squirrel and one stuffed dog
    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    # Question assumes only one squirrel patch
    if len(squirrel_patches) == 0:
        # If no squirrel is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for squirrel_patch in squirrel_patches:
        if squirrel_patch.horizontal_center > image_patch.find(""stuffed dog"")[0].horizontal_center:
            return bool_to_yesno(squirrel_patch.verify_property(""squirrel"", ""white""))
    return ""no"""
18437694,Does the clock to the right of the statue have gold color and tiny size?," # assumes only one clock and one statue
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Does the clock to the right of the statue have gold color and tiny size?"")
    clock_patch = clock_patches[0]
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        return ""no""
    statue_patch = statue_patches[0]
    if clock_patch.horizontal_center > statue_patch.horizontal_center:
        return bool_to_yesno(clock_patch.verify_property(""clock"", ""gold"") and clock_patch.verify_property(""clock"", ""tiny""))
    return ""no"""
1252960,Where was the photo taken?," # returns the answer to the question ""Where was the photo taken?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")"
17454895,Is there a frisbee on the grass?," # assumes only one frisbee patch
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is there a frisbee on the grass?"")
    frisbee_patch = frisbee_patches[0]
    grass_patches = image_patch.find(""grass"")
    for grass_patch in grass_patches:
        if grass_patch.horizontal_center > frisbee_patch.horizontal_center:
            return ""yes""
    return ""no"""
13180513,Are there either cakes or containers in the photo?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)"
479962,Are there black cars or motorcycles?," # assumes only one car or motorcycle
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_black_motorcycle = image_patch.exists(""black motorcycle"")
    return bool_to_yesno(is_black_car or is_black_motorcycle)"
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?," # assumes only one police officer
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    blue_car_patch = blue_car_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.horizontal_center < blue_car_patch.horizontal_center:
        return ""behind""
    else:
        return ""in front of"""
5785831,What is in the glass?," # assumes only one glass patch
    image_patch = ImagePatch(image)
    glass_patches = image_patch.find(""glass"")
    if len(glass_patches) == 0:
        # If no glass is found, query the image directly
        return image_patch.simple_query(""What is in the glass?"")
    return glass_patches[0].simple_query(""What is in the glass?"")"
19246241,Are there any brown benches or buckets?," # returns yes or no
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_bucket = image_patch.exists(""bucket"")
    return bool_to_yesno(is_brown_bench or is_bucket)"
3243803,"Where in the picture is the spoon, on the right or on the left?"," # assumes only one spoon patch
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
6952486,Does the shirt look white?," # image is the image to be queried
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))"
17401425,Is there a bag that is not brown?," # returns yes or no
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if not bag_patch.verify_property(""bag"", ""brown""):
            return ""yes""
    return ""no"""
481240,"Which kind of furniture is large, the shelf or the cupboard?"," # assumes only one shelf and one cupboard
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    cupboard_patches = image_patch.find(""cupboard"")
    # Question assumes only one cupboard patch
    if len(cupboard_patches) == 0:
        return ""shelf""
    for shelf_patch in shelf_patches:
        for cupboard_patch in cupboard_patches:
            if shelf_patch.width > cupboard_patch.width:
                return ""shelf""
    return ""cupboard"""
8531943,Are there any screens or bags?," # returns yes or no
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)"
1969545,What is she wearing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    return person_patches[0].simple_query(""What is she wearing?"")"
91045271,"Which appliance is not white, the freezer or the ice maker?"," # assumes only one freezer and one ice maker
    image_patch = ImagePatch(image)
    freezer_patches = image_patch.find(""freezer"")
    ice_maker_patches = image_patch.find(""ice maker"")
    # Question assumes only one freezer and one ice maker
    if len(freezer_patches) == 0 or len(ice_maker_patches) == 0:
        # If no freezer or ice maker is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    freezer_patch = freezer_patches[0]
    ice_maker_patch = ice_maker_patches[0]
    if not freezer_patch.verify_property(""freezer"", ""white""):
        return ""freezer""
    if not ice_maker_patch.verify_property(""ice maker"", ""white""):
        return ""ice maker""
    return ""no"""
1051870,Are there chairs or tables that are not green?," # returns yes or no
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    is_green = image_patch.exists(""green"")
    return bool_to_yesno(is_chair or is_table) and not is_green"
1366363,Does the taxi have a different color than the truck?," # assumes only one taxi and one truck
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    truck_patches = image_patch.find(""truck"")
    if len(taxi_patches) == 0 or len(truck_patches) == 0:
        # If no taxi or truck is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    taxi_color = taxi_patches[0].simple_query(""What color is the taxi?"")
    truck_color = truck_patches[0].simple_query(""What color is the truck?"")
    return bool_to_yesno(taxi_color != truck_color)"
5460839,In which part of the image is the dog?," # returns the part of the image where the dog is
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    if dog_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
18899476,What type of vegetable is to the right of the rice that is on the plate?," # assumes only one rice patch
    image_patch = ImagePatch(image)
    rice_patches = image_patch.find(""rice"")
    if len(rice_patches) == 0:
        # If no rice is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    rice_patch = rice_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > rice_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    return ""no"""
8606903,What food item is not wide?," # returns the name of the food item
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""wide""):
            return food_patch.simple_query(""What food item is not wide?"") # crop would include the food so keep it in the query
    # If no food is not wide, pick the first food
    return food_patches[0].simple_query(""What food item is not wide?"")"
18394861,Are there any folding chairs or skateboards?," # assumes only one chair or skateboard
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)"
2327600,Is there an elephant near the pond?," # assumes only one pond patch
    image_patch = ImagePatch(image)
    pond_patches = image_patch.find(""pond"")
    # Question assumes only one pond patch
    if len(pond_patches) == 0:
        # If no pond is found, query the image directly
        return image_patch.simple_query(""Is there an elephant near the pond?"")
    for pond_patch in pond_patches:
        elephant_patches = image_patch.find(""elephant"")
        for elephant_patch in elephant_patches:
            if elephant_patch.horizontal_center < pond_patch.horizontal_center:
                return ""yes""
    return ""no"""
1575941,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
9725865,What is the color of the floor that the desk is on top of?," # assumes only one desk patch
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    desk_patch = desk_patches[0]
    floor_patches = image_patch.find(""floor"")
    for floor_patch in floor_patches:
        if floor_patch.horizontal_center > desk_patch.horizontal_center:
            return floor_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    return ""no"""
16654241,Is the TV on the left or on the right?," # assumes only one TV patch
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    tv_patch = tv_patches[0]
    if tv_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
18685233,Which kind of vehicle is to the left of the flags?," # assumes only one flag patch
    image_patch = ImagePatch(image)
    flag_patches = image_patch.find(""flag"")
    if len(flag_patches) == 0:
        # If no flag is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    flag_patch = flag_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < flag_patch.horizontal_center:
            return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"") # crop would include the vehicle so keep it in the query
    return ""no"""
9796068,Are there both a fence and a sheep in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)"
181002473,Do you see any blue blanket or towel?," # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_blanket = image_patch.exists(""blue blanket"")
    is_blue_towel = image_patch.exists(""blue towel"")
    return bool_to_yesno(is_blue_blanket or is_blue_towel)"
1110330,Is the pillow to the left of the frog cream colored or green?," # assumes one pillow and one frog
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    pillow_patch = pillow_patches[0]
    frog_patches = image_patch.find(""frog"")
    # Question assumes only one frog patch
    if len(frog_patches) == 0:
        return ""no""
    frog_patch = frog_patches[0]
    if pillow_patch.horizontal_center < frog_patch.horizontal_center:
        return pillow_patch.best_text_match([""cream colored"", ""green""])
    return ""no"""
511507,Is the antenna on the aircraft?," # assumes one aircraft patch
    image_patch = ImagePatch(image)
    aircraft_patches = image_patch.find(""aircraft"")
    if len(aircraft_patches) == 0:
        # If no aircraft is found, query the image directly
        return image_patch.simple_query(""Is the antenna on the aircraft?"")
    aircraft_patch = aircraft_patches[0]
    antenna_patches = image_patch.find(""antenna"")
    if len(antenna_patches) == 0:
        return ""no""
    for antenna_patch in antenna_patches:
        if antenna_patch.horizontal_center > aircraft_patch.horizontal_center:
            return ""yes""
    return ""no"""
10464417,"In which part is the tent, the top or the bottom?"," # assumes only one tent patch
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
10816730,Is the tree in front of the building?," # assumes only one tree and one building
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    building_patches = image_patch.find(""building"")
    # Question assumes only one tree and one building patch
    if len(tree_patches) == 0 or len(building_patches) == 0:
        # If no tree or building is found, query the image directly
        return image_patch.simple_query(""Is the tree in front of the building?"")
    tree_patch = tree_patches[0]
    building_patch = building_patches[0]
    if tree_patch.horizontal_center < building_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
18766115,Who is walking?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is walking?"")
    return person_patches[0].simple_query(""Who is walking?"")"
10625851,Are there either any fruits or plates in the image?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)"
71018537,Is the person wearing a coat?," # coat is a property
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    return bool_to_yesno(person_patches[0].verify_property(""person"", ""coat""))"
4194722,Is the man wearing a helmet?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""helmet""))"
414248,"What animal are the women near the ocean riding, a pig or a horse?"," # assumes only one woman and one animal
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")
    woman_patch = woman_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""no""
    animal_patch = animal_patches[0]
    if animal_patch.horizontal_center > woman_patch.horizontal_center:
        return ""pig""
    else:
        return ""horse"""
683094,Who is wearing the shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    return person_patches[0].simple_query(""Who is wearing the shirt?"")"
12140603,What device is to the left of the headphones?," # assumes only one device and one headphone
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    headphone_patches = image_patch.find(""headphones"")
    for device_patch in device_patches:
        for headphone_patch in headphone_patches:
            if device_patch.horizontal_center < headphone_patch.horizontal_center:
                return device_patch.simple_query(""What device is to the left of the headphones?"")
    return ""no"""
5575209,The flowers are where?," # returns the location of the flowers
    image_patch = ImagePatch(image)
    flowers_patches = image_patch.find(""flowers"")
    # Question assumes only one flowers patch
    if len(flowers_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    return flowers_patches[0].simple_query(""The flowers are where?"")"
8773829,Which kind of furniture is made of wood?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wood""):
            return furniture_patch.simple_query(""Which kind of furniture is made of wood?"")
    return ""no"""
12636428,Which kind of animal is black?," # returns the name of the animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""Which kind of animal is black?"") # crop would include the animal so keep it in the query
    # If no animal is black, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is black?"")"
1020584,What animals is the car behind of?," # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What animals is the car behind of?"")
    car_patch = car_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""no""
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > car_patch.horizontal_center:
            return animal_patch.simple_query(""What animals is the car behind of?"")
    return ""no"""
11879418,The man is standing on what?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is standing on what?"")"
12334288,What device is to the left of the cabinet?," # assumes only one cabinet patch
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the cabinet?"")
    cabinet_patch = cabinet_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < cabinet_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the left of the cabinet?"")
    return ""no"""
691610,Is the monitor to the left of a book?," # assumes only one monitor and one book
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Is the monitor to the left of a book?"")
    monitor_patch = monitor_patches[0]
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        return ""no""
    book_patch = book_patches[0]
    if monitor_patch.horizontal_center < book_patch.horizontal_center:
        return ""yes""
    return ""no"""
7552714,Is the color of the jacket black?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return bool_to_yesno(jacket_patches[0].verify_property(""jacket"", ""black""))"
8492422,Is the man to the left of a boy?," # assumes only one man and one boy
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    boy_patches = image_patch.find(""boy"")
    if len(man_patches) == 0 or len(boy_patches) == 0:
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    man_patch = man_patches[0]
    boy_patch = boy_patches[0]
    if man_patch.horizontal_center < boy_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
13248061,What type of device is to the left of the keyboard in the bottom of the image?," # assumes only one keyboard patch
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    keyboard_patch = keyboard_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < keyboard_patch.horizontal_center and device_patch.vertical_center < keyboard_patch.vertical_center:
            return device_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    return ""no"""
18252454,What is common to the roof and the sky?," # returns the color
    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    # Question assumes only one roof patch
    if len(roof_patches) == 0:
        # If no roof is found, query the image directly
        return image_patch.simple_query(""What is common to the roof and the sky?"")
    for roof_patch in roof_patches:
        sky_patches = image_patch.find(""sky"")
        for sky_patch in sky_patches:
            if roof_patch.simple_query(""What is the color of the roof?"") == sky_patch.simple_query(""What is the color of the sky?""):
                return roof_patch.simple_query(""What is common to the roof and the sky?"")
    return ""no"""
14443687,What do the cat and the book have in common?," # assumes only one cat and one book
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    # Question assumes only one cat and one book patch
    if len(cat_patches) == 0 or len(book_patches) == 0:
        # If no cat or book is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    cat_patch = cat_patches[0]
    book_patch = book_patches[0]
    return cat_patch.simple_query(""What do the cat and the book have in common?"") # crop would include the book so keep it in the query"
14571335,Who is wearing trousers?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing trousers?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""wearing trousers""):
            return person_patch.simple_query(""Who is wearing trousers?"")
    return ""no one"""
474885,Who wears a cap?," # returns the name of the person wearing the cap
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    return cap_patches[0].simple_query(""Who wears a cap?"")"
141013015,"What color is the toilet, brown or white?"," # assumes only one toilet patch
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].best_text_match([""brown"", ""white""])"
5515816,On which side of the image is the fence?," # image is a PIL Image object
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
16774696,What is the surfer wearing?," # assumes only one surfer
    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    if len(surfer_patches) == 0:
        # If no surfer is found, query the image directly
        return image_patch.simple_query(""What is the surfer wearing?"")
    return surfer_patches[0].simple_query(""What is the surfer wearing?"")"
13701956,Is there any grass or sand that is not dry?," # dry
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Is there any grass or sand that is not dry?"")
    for grass_patch in grass_patches:
        if not grass_patch.verify_property(""grass"", ""dry""):
            return ""yes""
    sand_patches = image_patch.find(""sand"")
    # Question assumes only one sand patch
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""Is there any grass or sand that is not dry?"")
    for sand_patch in sand_patches:
        if not sand_patch.verify_property(""sand"", ""dry""):
            return ""yes""
    return ""no"""
11606870,Is there a cow or a zebra in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)"
1589297,Does the fire hydrant look modern?," # returns yes or no
    image_patch = ImagePatch(image)
    fire_hydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(fire_hydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    return bool_to_yesno(fire_hydrant_patches[0].verify_property(""fire hydrant"", ""modern""))"
942308,Is the cup empty or full?," # assumes only one cup patch
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    cup_patch = cup_patches[0]
    return cup_patch.simple_query(""Is the cup empty or full?"")"
15815976,Is the woman wearing a scarf?," # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    return bool_to_yesno(woman_patches[0].verify_property(""woman"", ""scarf""))"
3193231,Do you see either parking meters or brooms in the picture?," # assumes only one parking meter or broom
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)"
314218,Is the sign in front of the bridge small and white?," # assumes only one sign and one bridge
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    sign_patch = sign_patches[0]
    bridge_patches = image_patch.find(""bridge"")
    # Question assumes only one bridge patch
    if len(bridge_patches) == 0:
        return ""no""
    bridge_patch = bridge_patches[0]
    if sign_patch.horizontal_center < bridge_patch.horizontal_center:
        return ""yes""
    return ""no"""
18130465,Does the umbrella that is not dry look orange and open?," # assumes only one umbrella patch
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    umbrella_patch = umbrella_patches[0]
    is_not_dry = umbrella_patch.verify_property(""umbrella"", ""not dry"")
    is_open = umbrella_patch.verify_property(""umbrella"", ""open"")
    is_orange = umbrella_patch.verify_property(""umbrella"", ""orange"")
    return bool_to_yesno(is_not_dry and is_open and is_orange)"
7920817,What's in the paper?," # paper is a relation
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's in the paper?"")"
18167292,What is on the bun in the top?," # assumes only one bun patch
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    return bun_patches[0].simple_query(""What is on the bun in the top?"")"
16929928,What is the fence made of?," # fence is a property
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")"
14113312,Is the woman to the left or to the right of the lady?," # assumes only one woman and one lady
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one woman and one lady patch
    if len(woman_patches) == 0 or len(lady_patches) == 0:
        # If no woman or lady is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    woman_patch = woman_patches[0]
    lady_patch = lady_patches[0]
    if woman_patch.horizontal_center < lady_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
17993299,Is the horse to the left of a car?," # assumes one horse and one car
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    car_patches = image_patch.find(""car"")
    # Question assumes only one horse and one car patch
    if len(horse_patches) == 0 or len(car_patches) == 0:
        # If no horse or car is found, query the image directly
        return image_patch.simple_query(""Is the horse to the left of a car?"")
    horse_patch = horse_patches[0]
    car_patch = car_patches[0]
    if horse_patch.horizontal_center < car_patch.horizontal_center:
        return ""yes""
    else:
        return ""no"""
8717022,Is the small animal to the left of the vehicle that looks silver?," # assumes only one vehicle and one small animal
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    vehicle_patch = vehicle_patches[0]
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        return ""no""
    small_animal_patch = small_animal_patches[0]
    if small_animal_patch.horizontal_center < vehicle_patch.horizontal_center:
        return ""yes""
    return ""no"""
2998707,Which color is the chair that is on the right?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    chair_patch = chair_patches[0]
    return chair_patch.simple_query(""Which color is the chair that is on the right?"")"
171017786,Do you see any cups to the left of the monitor?," # assumes only one monitor patch
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    monitor_patch = monitor_patches[0]
    cup_patches = image_patch.find(""cup"")
    for cup_patch in cup_patches:
        if cup_patch.horizontal_center < monitor_patch.horizontal_center:
            return ""yes""
    return ""no"""
2220068,Is the girl to the right or to the left of the glasses the man is wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        return ""no""
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
1941568,What animal is in the water?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"")"
17577787,Does the man's hair look short and white?," # returns yes or no
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""short and white""))"
6711650,Are there chairs to the left of the bottle the toilet is to the right of?," # assumes only one bottle patch
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    for bottle_patch in bottle_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center > bottle_patch.horizontal_center:
                chair_patches = image_patch.find(""chair"")
                for chair_patch in chair_patches:
                    if chair_patch.horizontal_center < bottle_patch.horizontal_center:
                        return ""yes""
    return ""no"""
9825336,Which kind of furniture is the mat lying on?," # assumes only one mat patch
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    mat_patch = mat_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > mat_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is the mat lying on?"") # crop would include the furniture so keep it in the query
    # If no furniture is found, query the image directly
    return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")"
11222427,Do you see fences or elephants?," # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)"
1233009,"What kind of furniture is not white, the entertainment center or the bed?"," # assumes only one entertainment center and one bed
    image_patch = ImagePatch(image)
    entertainment_center_patches = image_patch.find(""entertainment center"")
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one entertainment center and one bed
    if len(entertainment_center_patches) == 0 or len(bed_patches) == 0:
        # If no entertainment center or bed is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    entertainment_center_patch = entertainment_center_patches[0]
    bed_patch = bed_patches[0]
    if entertainment_center_patch.verify_property(""entertainment center"", ""white"") and not bed_patch.verify_property(""bed"", ""white""):
        return ""bed""
    elif not entertainment_center_patch.verify_property(""entertainment center"", ""white"") and bed_patch.verify_property(""bed"", ""white""):
        return ""entertainment center""
    else:
        return ""no"""
1152020,Do you see either any plate or tomato that are red?," # returns yes or no
    image_patch = ImagePatch(image)
    is_plate_red = image_patch.exists(""plate"") and image_patch.verify_property(""plate"", ""red"")
    is_tomato_red = image_patch.exists(""tomato"") and image_patch.verify_property(""tomato"", ""red"")
    return bool_to_yesno(is_plate_red or is_tomato_red)"
8961520,Who is surfing?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is surfing?"")
    return person_patches[0].simple_query(""Who is surfing?"")"
18106780,Which room is it?," # image is the image of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
1892692,What color do you think the bowl that is to the right of the person is?," # assumes only one person and one bowl
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    person_patch = person_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > person_patch.horizontal_center:
            return bowl_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"") # crop would include the bowl so keep it in the query
    # If no bowl is to the right of the person, pick the first bowl
    return bowl_patches[0].simple_query(""What color do you think the bowl that is to the right of the person is?"")"
6952082,What color is the hair?," # returns the color of the hair
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"")"
3768067,What color is the pot the statue is to the right of?," # assumes only one statue patch
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    statue_patch = statue_patches[0]
    pot_patches = image_patch.find(""pot"")
    for pot_patch in pot_patches:
        if pot_patch.horizontal_center > statue_patch.horizontal_center:
            return pot_patch.simple_query(""What color is the pot the statue is to the right of?"")
    return ""no"""
17866761,Is the clear glass on the shelf of the table?," # assumes only one clear glass patch
    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    clear_glass_patch = clear_glass_patches[0]
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        return ""no""
    table_patch = table_patches[0]
    shelf_patches = table_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        return ""no""
    shelf_patch = shelf_patches[0]
    return bool_to_yesno(clear_glass_patch.horizontal_center > shelf_patch.horizontal_center)"
798020,Does the skirt look black or yellow?," # assumes only one skirt patch
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].best_text_match([""black"", ""yellow""])"
828981,How old is he?," # returns a number
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How old is he?"")
    return man_patches[0].simple_query(""How old is he?"")"
7236463,Of what color is the book?," # book is a noun
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""Of what color is the book?"")"
6376684,What color is the car to the left of the train car?," # assumes only one train car
    image_patch = ImagePatch(image)
    train_car_patches = image_patch.find(""train car"")
    # Question assumes only one train car patch
    if len(train_car_patches) == 0:
        # If no train car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    train_car_patch = train_car_patches[0]
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        return ""no""
    for car_patch in car_patches:
        if car_patch.horizontal_center < train_car_patch.horizontal_center:
            return car_patch.simple_query(""What color is the car to the left of the train car?"") # crop would include the train car so keep it in the query
    return ""no"""
786798,Is this a photo of a beach?," # returns yes or no
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this a photo of a beach?"")"
19836753,What vehicles are to the left of the fence?," # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    fence_patch = fence_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicles are to the left of the fence?"")
    return ""no"""
15284615,Who is playing?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is playing?"")
    return person_patches[0].simple_query(""Who is playing?"")"
16785170,Is the man that is walking holding a remote control?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    remote_control_patches = image_patch.find(""remote control"")
    if len(remote_control_patches) == 0:
        return ""no""
    for remote_control_patch in remote_control_patches:
        if remote_control_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no"""
17746396,What's the boy wearing?," # assumes only one boy
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    return boy_patches[0].simple_query(""What's the boy wearing?"")"
3625764,Is there a mug to the right of the bottle which is to the right of the tap?," # assumes only one bottle and one tap
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    bottle_patch = bottle_patches[0]
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        return ""no""
    tap_patch = tap_patches[0]
    mug_patches = image_patch.find(""mug"")
    # Question assumes only one mug patch
    if len(mug_patches) == 0:
        return ""no""
    mug_patch = mug_patches[0]
    if mug_patch.horizontal_center > bottle_patch.horizontal_center and bottle_patch.horizontal_center > tap_patch.horizontal_center:
        return ""yes""
    return ""no"""
13826837,What color is the door?," # assumes only one door patch
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    return door_patches[0].simple_query(""What color is the door?"")"
19249907,Are there any horses in the field?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse""))"
2964690,What is in front of the mountains?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")"
13396373,Are there vehicles to the right of the truck?," # assumes only one truck patch
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    for truck_patch in truck_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
                return ""yes""
    return ""no"""
493755,Does the scarf made of wool seem to be long and blue?," # returns yes or no
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    for scarf_patch in scarf_patches:
        is_long = scarf_patch.verify_property(""scarf"", ""long"")
        is_blue = scarf_patch.verify_property(""scarf"", ""blue"")
        if is_long and is_blue:
            return ""yes""
    return ""no"""
1189986,Is the man behind the elephant holding a surfboard?," # assumes only one man and one elephant
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    man_patch = man_patches[0]
    elephant_patches = image_patch.find(""elephant"")
    if len(elephant_patches) == 0:
        return ""no""
    elephant_patch = elephant_patches[0]
    if man_patch.horizontal_center < elephant_patch.horizontal_center:
        return ""yes""
    return ""no"""
8792466,Which color is the closed window?," # assumes only one window
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    return window_patches[0].simple_query(""Which color is the closed window?"")"
10188423,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
8965417,What kind of vegetable is to the right of the girl?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    girl_patch = girl_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > girl_patch.horizontal_center:
            return vegetable_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    return ""no"""
4929965,Is there a black racket or clock in the picture?," # assumes only one racket or clock
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_black_clock = image_patch.exists(""black clock"")
    return bool_to_yesno(is_black_racket or is_black_clock)"
4782038,What kind of animal is white?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal white?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is white?"") # crop would include the animal so keep it in the query
    # If no animal is white, pick the first animal
    return animal_patches[0].simple_query(""What kind of animal is white?"")"
14658201,Is the sheep that looks white and brown made of plastic?," # assumes only one sheep patch
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    sheep_patch = sheep_patches[0]
    is_white = sheep_patch.simple_query(""Is the sheep white?"") == ""yes""
    is_brown = sheep_patch.simple_query(""Is the sheep brown?"") == ""yes""
    is_plastic = sheep_patch.simple_query(""Is the sheep made of plastic?"") == ""yes""
    return bool_to_yesno(is_white and is_brown and is_plastic)"
1441865,Do you see any boxes on the table under the grill?," # image is the original image
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    for box_patch in box_patches:
        table_patches = image_patch.find(""table"")
        for table_patch in table_patches:
            if table_patch.upper < box_patch.upper and table_patch.lower > box_patch.lower and table_patch.left < box_patch.left and table_patch.right > box_patch.right:
                return ""yes""
    return ""no"""
1424926,What is the tag on?," # tag is a property of the object
    image_patch = ImagePatch(image)
    tag_patches = image_patch.find(""tag"")
    # Question assumes only one tag patch
    if len(tag_patches) == 0:
        # If no tag is found, query the image directly
        return image_patch.simple_query(""What is the tag on?"")
    return tag_patches[0].simple_query(""What is the tag on?"")"
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?," # assumes only one person and one laptop
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    person_patch = person_patches[0]
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        return ""no""
    for laptop_patch in laptop_patches:
        if laptop_patch.horizontal_center > person_patch.horizontal_center:
            return laptop_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    return ""no"""
3635257,Is there any freezer in this photo?," # assumes only one freezer
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer""))"
8821026,Are there either any bags or chairs?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)"
13669952,In what vehicle is the bus driver?," # assumes only one bus driver
    image_patch = ImagePatch(image)
    bus_driver_patches = image_patch.find(""bus driver"")
    # Question assumes only one bus driver patch
    if len(bus_driver_patches) == 0:
        # If no bus driver is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    bus_driver_patch = bus_driver_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > bus_driver_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is the bus driver in?"")
    return ""no"""
17204662,What is that man in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that man in front of?"")"
380866,Are there any girls or radios?," # returns yes or no
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)"
13775896,The girl is sitting on what?," # returns the name of the object
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The girl is sitting on what?"")
    girl_patch = girl_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return ""no""
    for object_patch in object_patches:
        if object_patch.horizontal_center > girl_patch.horizontal_center:
            return object_patch.simple_query(""What is the girl sitting on?"") # crop would include the object so keep it in the query
    return ""no"""
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    pillow_patch = pillow_patches[0]
    lamp_patches = image_patch.find(""white lamp"")
    if len(lamp_patches) == 0:
        return ""no""
    for lamp_patch in lamp_patches:
        if lamp_patch.horizontal_center < pillow_patch.horizontal_center:
            return ""left""
        else:
            return ""right"""
16545552,What color do you think is the vehicle the girl is washing?," # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    girl_patch = girl_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    vehicle_patch = vehicle_patches[0]
    return vehicle_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")"
16719872,Are there motorcycles to the left of the man who is wearing a hat?," # assumes only one man and one motorcycle
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        return ""no""
    for motorcycle_patch in motorcycle_patches:
        if motorcycle_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?," # assumes only one person and one garbage can
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    person_patch = person_patches[0]
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        return ""no""
    garbage_can_patch = garbage_can_patches[0]
    if garbage_can_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
13711589,What do the truck and the street sign have in common?," # assumes only one truck and one street sign
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    street_sign_patches = image_patch.find(""street sign"")
    # Question assumes only one truck and one street sign
    if len(truck_patches) == 0 or len(street_sign_patches) == 0:
        # If no truck or street sign is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    truck_patch = truck_patches[0]
    street_sign_patch = street_sign_patches[0]
    return truck_patch.simple_query(""What do the truck and the street sign have in common?"") # crop would include the street sign so keep it in the query"
10227573,Who is wearing a shirt?," # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a shirt?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no person is wearing a shirt, pick the first person
    return person_patches[0].simple_query(""Who is wearing a shirt?"")"
161071156,What animal is the man leading?," # assumes one man and one animal
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is the man leading?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""no""
    animal_patch = animal_patches[0]
    if animal_patch.horizontal_center > man_patch.horizontal_center:
        return animal_patch.simple_query(""What animal is the man leading?"")
    return ""no"""
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?," # assumes one curtain and one dresser
    image_patch = ImagePatch(image)
    curtain_patches = image_patch.find(""curtain"")
    # Question assumes only one curtain patch
    if len(curtain_patches) == 0:
        # If no curtain is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
    for curtain_patch in curtain_patches:
        dresser_patches = image_patch.find(""dresser"")
        for dresser_patch in dresser_patches:
            if dresser_patch.horizontal_center > curtain_patch.horizontal_center:
                return dresser_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")
    return ""no"""
7190226,Does the puddle look large?," # returns yes or no
    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    return bool_to_yesno(puddle_patches[0].verify_property(""puddle"", ""large""))"
11675152,Who throws the frisbee?," # assumes one frisbee patch
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    if len(frisbee_patches) == 0:
        return image_patch.simple_query(""Who throws the frisbee?"")
    frisbee_patch = frisbee_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > frisbee_patch.horizontal_center:
            return person_patch.simple_query(""Who throws the frisbee?"")
    return image_patch.simple_query(""Who throws the frisbee?"")"
8723676,Which kind of animal is the water on?," # water is a property of the animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is the water on?"")
    return animal_patches[0].simple_query(""Which kind of animal is the water on?"")"
61046657,Do you think that traffic light is tall?," # returns yes or no
    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    # Question assumes only one traffic light patch
    if len(traffic_light_patches) == 0:
        # If no traffic light is found, query the image directly
        return image_patch.simple_query(""Do you think that traffic light is tall?"")
    return bool_to_yesno(traffic_light_patches[0].verify_property(""traffic light"", ""tall""))"
9581034,On which side is the wine glass?," # assumes only one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?," # assumes only one pizza patch
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    pizza_patch = pizza_patches[0]
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        return ""no""
    for napkin_patch in napkin_patches:
        if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
            return ""right""
        else:
            return ""left"""
18535266,Is the face mask made of the same material as the mask?," # assumes only one mask patch
    image_patch = ImagePatch(image)
    mask_patches = image_patch.find(""mask"")
    if len(mask_patches) == 0:
        # If no mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    mask_patch = mask_patches[0]
    return mask_patch.simple_query(""Is the face mask made of the same material as the mask?"")"
11254215,What is the tan item of furniture?," # tan item of furniture
    image_patch = ImagePatch(image)
    tan_furniture_patches = image_patch.find(""tan furniture"")
    # Question assumes only one tan furniture patch
    if len(tan_furniture_patches) == 0:
        # If no tan furniture is found, query the image directly
        return image_patch.simple_query(""What is the tan item of furniture?"")
    return tan_furniture_patches[0].simple_query(""What is the tan item of furniture?"")"
1852010,How is the device to the right of the device on the desk called?," # assumes only one device on the desk
    image_patch = ImagePatch(image)
    device_on_desk_patches = image_patch.find(""device on the desk"")
    # Question assumes only one device on the desk patch
    if len(device_on_desk_patches) == 0:
        # If no device on the desk is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    device_on_desk_patch = device_on_desk_patches[0]
    device_to_right_patches = image_patch.find(""device to the right of the device on the desk"")
    # Question assumes only one device to the right of the device on the desk patch
    if len(device_to_right_patches) == 0:
        return ""no""
    device_to_right_patch = device_to_right_patches[0]
    return device_to_right_patch.simple_query(""How is the device to the right of the device on the desk called?"")"
1587534,Is the device on the floor black and large?," # assumes only one device patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    device_patch = device_patches[0]
    is_black = device_patch.verify_property(""device"", ""black"")
    is_large = device_patch.verify_property(""device"", ""large"")
    return bool_to_yesno(is_black and is_large)"
8470757,Are there any surfboards?," # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))"
11273949,Is the shirt white?," # image is the image to be queried
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))"
7475238,What's the airplane in front of?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"")"
16685900,Where does the horse to the right of the hose run?," # assumes only one horse and one hose
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    horse_patch = horse_patches[0]
    hose_patches = image_patch.find(""hose"")
    # Question assumes only one hose patch
    if len(hose_patches) == 0:
        return ""no""
    hose_patch = hose_patches[0]
    if horse_patch.horizontal_center > hose_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
3932624,Are there either any gray chairs or laptops?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)"
10584099,Is the water brown or blue?," # assumes only one water patch
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water brown or blue?"")
    return water_patches[0].best_text_match([""brown"", ""blue""])"
9256263,Which kind of furniture is brown?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    return furniture_patches[0].simple_query(""Which kind of furniture is brown?"")"
18719769,Is the man wearing glasses?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    return man_patches[0].verify_property(""man"", ""glasses"")"
18342439,What animal is white?," # returns the name of the animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""white""):
            return animal_patch.simple_query(""What animal is white?"") # crop would include the animal so keep it in the query
    # If no animal is white, pick the first animal
    return animal_patches[0].simple_query(""What animal is white?"")"
8665725,Who is wearing a coat?," # coat is a property
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a coat?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""coat""):
            return person_patch.simple_query(""Who is wearing a coat?"")
    return ""no one"""
5440407,What vehicle isn't black?," # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    for vehicle_patch in vehicle_patches:
        if not vehicle_patch.verify_property(""vehicle"", ""black""):
            return vehicle_patch.simple_query(""What vehicle isn't black?"")
    return ""no"""
4104707,On which side of the picture is the oven?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    if oven_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
3126763,What is common to the logo and the letter?," # logo and letter are not related
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    letter_patches = image_patch.find(""letter"")
    # Question assumes only one letter patch
    if len(letter_patches) == 0:
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    logo_patch = logo_patches[0]
    letter_patch = letter_patches[0]
    return logo_patch.simple_query(""What is common to the logo and the letter?"")"
18640925,What animal is in the water the man is walking through?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    water_patches = image_patch.find(""water"")
    for water_patch in water_patches:
        if water_patch.horizontal_center > man_patch.horizontal_center:
            animal_patches = image_patch.find(""animal"")
            for animal_patch in animal_patches:
                if animal_patch.horizontal_center > man_patch.horizontal_center:
                    return animal_patch.simple_query(""What animal is in the water the man is walking through?"")
    return ""no"""
125488,What is the man wearing?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"")"
5925435,What is the sidewalk made of?," # sidewalk is a surface
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")"
17563472,What is the pattern of the coat?," # coat is a pattern
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the coat?"")"
4819547,What kind of furniture is white?," # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""white""):
            return furniture_patch.simple_query(""What kind of furniture is white?"")
    return ""no"""
14263174,What color do you think the chair that is to the right of the other chair is?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            return chair_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    return ""no"""
7515210,Is the man that is to the left of the person riding the green train in front of the fence?," # assumes only one person riding the green train
    image_patch = ImagePatch(image)
    person_riding_green_train_patches = image_patch.find(""person riding the green train"")
    # Question assumes only one person riding the green train patch
    if len(person_riding_green_train_patches) == 0:
        # If no person riding the green train is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")
    person_riding_green_train_patch = person_riding_green_train_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    if man_patch.horizontal_center < person_riding_green_train_patch.horizontal_center:
        return ""yes""
    return ""no"""
9239936,Do the cows near the trees have white color?," # assumes only one cow patch
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    for cow_patch in cow_patches:
        if cow_patch.verify_property(""cow"", ""near trees"") and cow_patch.verify_property(""cow"", ""white""):
            return ""yes""
    return ""no"""
1885178,"In which part of the image is the remote control, the bottom or the top?"," # assumes only one remote control patch
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    remote_control_patch = remote_control_patches[0]
    if remote_control_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top"""
12341631,Which color is the bag in the top part?," # assumes only one bag patch
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    if bag_patch.vertical_center < image_patch.vertical_center:
        return bag_patch.simple_query(""Which color is the bag in the top part?"")
    else:
        return bag_patch.simple_query(""Which color is the bag in the bottom part?"")"
5532909,"What is the weather like, cloudless or maybe rainy?"," # cloudless or maybe rainy
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the weather like, cloudless or maybe rainy?"")"
2618222,What is connected to the open laptop?," # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is connected to the open laptop?"")"
3252220,Of which color is the shirt the man wears?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = man_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    return shirt_patches[0].simple_query(""Of which color is the shirt the man wears?"")"
8947801,What is in the vase?," # assumes only one vase
    image_patch = ImagePatch(image)
    vase_patches = image_patch.find(""vase"")
    # Question assumes only one vase patch
    if len(vase_patches) == 0:
        # If no vase is found, query the image directly
        return image_patch.simple_query(""What is in the vase?"")
    return vase_patches[0].simple_query(""What is in the vase?"")"
10841562,Is the color of the pants the same as the shorts?," # assumes only one pair of pants and one pair of shorts
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pair of pants
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    pants_patch = pants_patches[0]
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one pair of shorts
    if len(shorts_patches) == 0:
        return ""no""
    shorts_patch = shorts_patches[0]
    return bool_to_yesno(pants_patch.simple_query(""What is the color of the pants?"") == shorts_patch.simple_query(""What is the color of the shorts?""))"
15511838,What kind of furniture is to the left of the bucket?," # assumes only one bucket patch
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    bucket_patch = bucket_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"") # crop would include the furniture so keep it in the query
    return ""no"""
14495306,Is there any racket to the right of the person that the woman is to the left of?," # assumes only one person and one woman
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    person_patch = person_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > person_patch.horizontal_center and racket_patch.horizontal_center > woman_patch.horizontal_center:
            return ""yes""
    return ""no"""
14841932,Do the tiles have square shape and black color?," # assumes only one tile patch
    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tile"")
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    return bool_to_yesno(tile_patches[0].verify_property(""tile"", ""square"") and tile_patches[0].verify_property(""tile"", ""black""))"
41029381,What is the vehicle that is the same color as the shirt called?," # assumes only one vehicle and one shirt
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    vehicle_patch = vehicle_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no""
    shirt_patch = shirt_patches[0]
    if vehicle_patch.verify_property(""vehicle"", ""same color as shirt""):
        return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    return ""no"""
161027428,Are there both windows and doors in the image?," # image is a PIL.Image.Image object
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
16478246,Does the pillow to the right of the man have green color and large size?," # assumes only one pillow patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""))
    return ""no"""
9450308,Is the happy person wearing a hat?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    person_patch = person_patches[0]
    is_happy = (person_patch.simple_query(""Is the person happy?"") == ""yes"")
    is_wearing_hat = (person_patch.simple_query(""Is the person wearing a hat?"") == ""yes"")
    return bool_to_yesno(is_happy and is_wearing_hat)"
11850389,What place is this?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")"
17250452,What kind of appliance is on the right of the drawer?," # assumes only one drawer
    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    drawer_patch = drawer_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""no""
    for appliance_patch in appliance_patches:
        if appliance_patch.horizontal_center > drawer_patch.horizontal_center:
            return appliance_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    return ""no"""
14857961,Is the lady to the right of a woman?," # assumes only one lady and one woman
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    lady_patch = lady_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    if lady_patch.horizontal_center > woman_patch.horizontal_center:
        return ""yes""
    return ""no"""
132385,What cooking utensils are to the left of the pan on the right side?," # assumes only one pan patch
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    pan_patch = pan_patches[0]
    utensil_patches = image_patch.find(""utensil"")
    for utensil_patch in utensil_patches:
        if utensil_patch.horizontal_center < pan_patch.horizontal_center:
            return utensil_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"") # crop would include the utensil so keep it in the query
    return ""no"""
9745131,Which color is the truck that is to the left of the lamps?," # assumes only one truck and one lamp
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    truck_patch = truck_patches[0]
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        return truck_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    lamp_patch = lamp_patches[0]
    if lamp_patch.horizontal_center > truck_patch.horizontal_center:
        return truck_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    return ""no"""
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?," # assumes only one motorcycle patch
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    motorcycle_patch = motorcycle_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    for bird_patch in bird_patches:
        if bird_patch.simple_query(""Is the bird the same color as the motorcycle?"") == ""yes"":
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")"
867818,Is the man on the skateboard?," # assumes one man and one skateboard
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the skateboard?"")
    man_patch = man_patches[0]
    skateboard_patches = image_patch.find(""skateboard"")
    if len(skateboard_patches) == 0:
        return ""no""
    for skateboard_patch in skateboard_patches:
        if man_patch.horizontal_center > skateboard_patch.horizontal_center:
            return ""yes""
    return ""no"""
13896221,What is on the table?," # assumes only one table
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    return table_patches[0].simple_query(""What is on the table?"")"
1964517,What is the food that is above the white paper?," # assumes only one white paper patch
    image_patch = ImagePatch(image)
    white_paper_patches = image_patch.find(""white paper"")
    if len(white_paper_patches) == 0:
        # If no white paper is found, query the image directly
        return image_patch.simple_query(""What is the food that is above the white paper?"")
    white_paper_patch = white_paper_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.vertical_center > white_paper_patch.vertical_center:
            return food_patch.simple_query(""What is the food that is above the white paper?"") # crop would include the food so keep it in the query
    # If no food is above the white paper, pick the first food
    return food_patches[0].simple_query(""What is the food that is above the white paper?"")"
15705231,Is the shelf to the left of a cabinet?," # assumes only one shelf and one cabinet
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if shelf_patch.horizontal_center < cabinet_patch.horizontal_center:
                return ""yes""
    return ""no"""
15693846,Is the motorcycle parked on the grass?," # assumes only one motorcycle patch
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Is the motorcycle parked on the grass?"")
    motorcycle_patch = motorcycle_patches[0]
    grass_patches = image_patch.find(""grass"")
    for grass_patch in grass_patches:
        if grass_patch.horizontal_center > motorcycle_patch.horizontal_center:
            return ""yes""
    return ""no"""
13872995,Who is jumping?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is jumping?"")
    return person_patches[0].simple_query(""Who is jumping?"")"
4502830,Is this a dog or a cat?," # returns the name of the animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Is this a dog or a cat?"")
    return animal_patches[0].simple_query(""Is this a dog or a cat?"")"
12584623,What is the person with the bag wearing?," # assumes only one person with a bag
    image_patch = ImagePatch(image)
    person_with_bag_patches = image_patch.find(""person with a bag"")
    # Question assumes only one person with a bag patch
    if len(person_with_bag_patches) == 0:
        # If no person with a bag is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    return person_with_bag_patches[0].simple_query(""What is the person with the bag wearing?"")"
7202064,"What is this, a bus or a truck?"," # assumes only one bus or truck
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    truck_patches = image_patch.find(""truck"")
    if len(bus_patches) > 0:
        return bus_patches[0].simple_query(""What is this, a bus or a truck?"")
    elif len(truck_patches) > 0:
        return truck_patches[0].simple_query(""What is this, a bus or a truck?"")
    else:
        return image_patch.simple_query(""What is this, a bus or a truck?"")"
16542208,Do you see either any beds or blankets there?," # returns yes or no
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)"
11700224,Do you see both lettuce and salad?," # lettuce is a type of salad
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)"
1067136,Is the ball on the tree?," # assumes only one ball and one tree
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one ball and one tree patch
    if len(ball_patches) == 0 or len(tree_patches) == 0:
        # If no ball or tree is found, query the image directly
        return image_patch.simple_query(""Is the ball on the tree?"")
    ball_patch = ball_patches[0]
    tree_patch = tree_patches[0]
    if ball_patch.vertical_center < tree_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
364079,What kind of furniture is to the right of the blanket?," # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    blanket_patch = blanket_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    return ""no"""
2533062,How large is the ground the zebra is standing on?," # returns the size of the ground the zebra is standing on
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    zebra_patch = zebra_patches[0]
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        return ""unknown""
    ground_patch = ground_patches[0]
    return ground_patch.simple_query(""How large is the ground the zebra is standing on?"")"
19683710,The clock is inside what?," # clock is inside what?
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""The clock is inside what?"")
    for clock_patch in clock_patches:
        is_inside = clock_patch.simple_query(""Is the clock inside something?"")
        if is_inside == ""yes"":
            return clock_patch.simple_query(""What is the clock inside?"")
    return ""no"""
15674863,Is the racket in the top part?," # assumes only one racket patch
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    racket_patch = racket_patches[0]
    if racket_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no"""
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?," # assumes only one person wearing a shirt
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person wearing a shirt"")
    # Question assumes only one person wearing a shirt
    if len(person_patches) == 0:
        # If no person wearing a shirt is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    skateboard_patches = image_patch.find(""skateboard"")
    # Question assumes only one skateboard patch
    if len(skateboard_patches) == 0:
        return ""no""
    for skateboard_patch in skateboard_patches:
        if skateboard_patch.horizontal_center > person_patch.horizontal_center:
            return ""yes""
    return ""no"""
2292637,What is the color of the shirt that the passenger is wearing?," # assumes only one passenger
    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    passenger_patch = passenger_patches[0]
    shirt_patches = passenger_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no""
    return shirt_patches[0].simple_query(""What is the color of the shirt that the passenger is wearing?"")"
9175259,What is the chair made of?," # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"")"
8714882,How big is the carrot in the top of the picture?," # returns the size of the carrot in the top of the picture
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    carrot_patch = carrot_patches[0]
    return carrot_patch.simple_query(""How big is the carrot in the top of the picture?"")"
1638685,What is the name of the vegetable that is on the yellow food?," # assumes only one yellow food patch
    image_patch = ImagePatch(image)
    yellow_food_patches = image_patch.find(""yellow food"")
    if len(yellow_food_patches) == 0:
        # If no yellow food is found, query the image directly
        return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")
    yellow_food_patch = yellow_food_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > yellow_food_patch.horizontal_center:
            return vegetable_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"") # crop would include the yellow food so keep it in the query
    # If no vegetable is on the yellow food, pick the first vegetable
    return vegetable_patches[0].simple_query(""What is the name of the vegetable that is on the yellow food?"")"
5828256,Is the clock on a tower?," # clock is a tower
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock on a tower?"")
    return clock_patches[0].simple_query(""Is the clock on a tower?"")"
18937563,What kind of animal is orange?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is orange?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal orange?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is orange?"")
    return ""no"""
14360113,What is the smiling woman holding?," # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    woman_patch = woman_patches[0]
    if woman_patch.verify_property(""woman"", ""smiling""):
        return woman_patch.simple_query(""What is the smiling woman holding?"")
    return image_patch.simple_query(""What is the smiling woman holding?"")"
593188,Is the hair short?," # returns yes or no
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    return bool_to_yesno(hair_patches[0].verify_property(""hair"", ""short""))"
10824666,Are there ladies to the left of the man that is wearing shorts?," # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    lady_patches = image_patch.find(""lady"")
    for lady_patch in lady_patches:
        if lady_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no"""
1890604,Is the gray car to the left or to the right of the garbage bin?," # assumes only one gray car and one garbage bin
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    gray_car_patch = gray_car_patches[0]
    garbage_bin_patches = image_patch.find(""garbage bin"")
    # Question assumes only one garbage bin patch
    if len(garbage_bin_patches) == 0:
        return ""no""
    garbage_bin_patch = garbage_bin_patches[0]
    if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
7574939,Is there any table or plate that is white?," # returns yes or no
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Is there any table or plate that is white?"")
    for table_patch in table_patches:
        if table_patch.verify_property(""table"", ""white""):
            return ""yes""
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is there any table or plate that is white?"")
    for plate_patch in plate_patches:
        if plate_patch.verify_property(""plate"", ""white""):
            return ""yes""
    return ""no"""
12252101,Is it outdoors?," # image is the image to be queried
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it outdoors?"")"
6943442,What cooking utensil is on the oven?," # assumes only one oven patch
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""What cooking utensil is on the oven?"")
    oven_patch = oven_patches[0]
    utensil_patches = image_patch.find(""utensil"")
    for utensil_patch in utensil_patches:
        if utensil_patch.horizontal_center > oven_patch.horizontal_center:
            return utensil_patch.simple_query(""What cooking utensil is on the oven?"") # crop would include the utensil so keep it in the query
    return utensil_patches[0].simple_query(""What cooking utensil is on the oven?"")"
2977077,The propeller that looks red is what pattern?," # propeller is a pattern
    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    return propeller_patches[0].simple_query(""The propeller that looks red is what pattern?"")"
11190306,Which kind of animal is to the left of the train?," # assumes only one train patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the left of the train?"")
    train_patch = train_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < train_patch.horizontal_center:
            return animal_patch.simple_query(""Which kind of animal is to the left of the train?"") # crop would include the train so keep it in the query
    # If no animal is to the left of the train, pick the first animal
    return animal_patches[0].simple_query(""Which kind of animal is to the left of the train?"")"
5107190,Do you see both an airplane and a truck?," # returns yes or no
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)"
4360982,How old is the child?," # returns a number
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"")"
12536783,What kind of animal is in front of the pole?," # assumes only one pole patch
    image_patch = ImagePatch(image)
    pole_patches = image_patch.find(""pole"")
    if len(pole_patches) == 0:
        # If no pole is found, query the image directly
        return image_patch.simple_query(""What kind of animal is in front of the pole?"")
    pole_patch = pole_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > pole_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is in front of the pole?"")
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")"
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?," # assumes only one man and one pair of glasses
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
18655269,Which room is it?," # image is the image of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
7405860,Is it indoors?," # image is the image to be queried
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it indoors?"")"
1705569,Does the pot on top of the stove look black?," # assumes only one pot and one stove
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    pot_patch = pot_patches[0]
    stove_patches = image_patch.find(""stove"")
    # Question assumes only one stove patch
    if len(stove_patches) == 0:
        return ""no""
    stove_patch = stove_patches[0]
    if pot_patch.vertical_center > stove_patch.vertical_center:
        return ""yes""
    return ""no"""
1028569,Are there both a cyclist and a helmet in the photo?," # assumes only one cyclist and one helmet
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)"
13954115,Are there any men to the left of the person in the crowd?," # assumes only one person in the crowd
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    person_patch = person_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return ""no""
    for man_patch in man_patches:
        if man_patch.horizontal_center < person_patch.horizontal_center:
            return ""yes""
    return ""no"""
12436797,What kind of device is to the left of the keyboard?," # assumes only one keyboard patch
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    if len(keyboard_patches) == 0:
        # If no keyboard is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    keyboard_patch = keyboard_patches[0]
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < keyboard_patch.horizontal_center:
            return device_patch.simple_query(""What kind of device is to the left of the keyboard?"") # crop would include the device so keep it in the query
    return ""no"""
1017626,Who is inside the train?," # assumes one train patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Who is inside the train?"")
    return train_patches[0].simple_query(""Who is inside the train?"")"
7650014,Which place is it?," # returns the name of the place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")"
15889871,What is the person to the left of the car doing?," # assumes only one person and one car
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    car_patches = image_patch.find(""car"")
    # Question assumes only one person and one car patch
    if len(person_patches) == 0 or len(car_patches) == 0:
        # If no person or car is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the car doing?"")
    person_patch = person_patches[0]
    car_patch = car_patches[0]
    if person_patch.horizontal_center < car_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the left of the car doing?"")
    else:
        return car_patch.simple_query(""What is the person to the left of the car doing?"")"
1310985,Is the yellow vehicle to the left of a lamp?," # assumes only one yellow vehicle and one lamp
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    yellow_vehicle_patch = yellow_vehicle_patches[0]
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        return ""no""
    lamp_patch = lamp_patches[0]
    if lamp_patch.horizontal_center > yellow_vehicle_patch.horizontal_center:
        return ""yes""
    return ""no"""
646935,Which room is it?," # image is the image of the room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")"
9495263,Is the woman to the left or to the right of the man that wears a cap?," # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one man and one woman patch
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right"""
946016,Do you think the animal that is sitting-down is small or large?," # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    animal_patch = animal_patches[0]
    if animal_patch.verify_property(""animal"", ""sitting-down""):
        return animal_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    return ""no"""
9617920,Do the garbage can and the pan have the same color?," # assumes only one garbage can and one pan
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    garbage_can_patch = garbage_can_patches[0]
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        return ""no""
    pan_patch = pan_patches[0]
    return bool_to_yesno(garbage_can_patch.verify_property(""garbage can"", ""color"") == pan_patch.verify_property(""pan"", ""color""))"
3578781,Which kind of clothing is black?," # crop would include the clothing so keep it in the query
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")"
4695656,What is the lamp on?," # assumes only one lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What is the lamp on?"")
    return lamp_patches[0].simple_query(""What is the lamp on?"")"
13696926,The homes that are to the left of the people have what color?," # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    person_patch = person_patches[0]
    home_patches = image_patch.find(""home"")
    for home_patch in home_patches:
        if home_patch.horizontal_center < person_patch.horizontal_center:
            return home_patch.simple_query(""What color is the home?"")
    return ""no"""
16946079,What is on the wall?," # assumes only one wall patch
    image_patch = ImagePatch(image)
    wall_patches = image_patch.find(""wall"")
    if len(wall_patches) == 0:
        # If no wall is found, query the image directly
        return image_patch.simple_query(""What is on the wall?"")
    return wall_patches[0].simple_query(""What is on the wall?"")"
18986542,Is the napkin on the right side?," # assumes only one napkin patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    napkin_patch = napkin_patches[0]
    return bool_to_yesno(napkin_patch.horizontal_center > image_patch.horizontal_center)"
11513897,What appliance is the label on?," # assumes only one appliance
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    return appliance_patches[0].simple_query(""What appliance is the label on?"")"
8240644,What is the color of the bird's tail?," # assumes only one bird patch
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    return bird_patches[0].simple_query(""What is the color of the bird's tail?"")"
5245080,Is he to the right or to the left of the camera?," # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    person_patch = person_patches[0]
    camera_patches = image_patch.find(""camera"")
    # Question assumes only one camera patch
    if len(camera_patches) == 0:
        return ""no""
    camera_patch = camera_patches[0]
    if person_patch.horizontal_center > camera_patch.horizontal_center:
        return ""right""
    else:
        return ""left"""
17800894,Are there both a window and a door in the picture?," # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)"
191027873,Where is the snowboard?," # returns the location of the snowboard
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Where is the snowboard?"")
    return snowboard_patches[0].simple_query(""Where is the snowboard?"")"
1964079,Are the box and the paper the same color?," # assumes only one box and one paper
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one box and one paper patch
    if len(box_patches) == 0 or len(paper_patches) == 0:
        # If no box or paper is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    box_patch = box_patches[0]
    paper_patch = paper_patches[0]
    return bool_to_yesno(box_patch.verify_property(""box"", ""color"") == paper_patch.verify_property(""paper"", ""color""))"
