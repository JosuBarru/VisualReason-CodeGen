sample_id,query,generated_code
201307251,Is it overcast?,"from PIL import Image
from vision_functions import find_in_image, simple_qa, verify_property, best_text_match

def bool_to_yesno(bool_answer: bool)->str:
    return ""yes"" if bool_answer else ""no""

class ImagePatch:
    """"""A Python class containing a crop of an image centered around a particular object, as well as relevant information.
    Attributes
    ----------
    cropped_image : array_like
        An array-like of the cropped image taken from the original image.
    left : int
        An int describing the position of the left border of the crop's bounding box in the original image.
    lower : int
        An int describing the position of the bottom border of the crop's bounding box in the original image.
    right : int
        An int describing the position of the right border of the crop's bounding box in the original image.
    upper : int
        An int describing the position of the top border of the crop's bounding box in the original image.

    Methods
    -------
    find(object_name: str)->List[ImagePatch]
        Returns a list of new ImagePatch objects containing crops of the image centered around any objects found in the image matching the object_name.
    simple_query(question: str=None)->str
        Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
    exists(object_name: str)->bool
        Returns True if the object specified by object_name is found in the image, and False otherwise.
    verify_property(property: str)->bool
        Returns True if the property is met, and False otherwise.
    best_text_match(string1: str, string2: str)->str
        Returns the string that best matches the image.
    crop(left: int, lower: int, right: int, upper: int)->ImagePatch
        Returns a new ImagePatch object containing a crop of the image at the given coordinates.
        """"""

    def __init__(self, image, left: int=None, lower: int=None, right: int=None, upper: int=None):
        """"""Initializes an ImagePatch object by cropping the image at the given coordinates and stores the coordinates as attributes.
        If no coordinates are provided, the image is left unmodified, and the coordinates are set to the dimensions of the image.
        Parameters
        -------
        image : array_like
            An array-like of the original image.
        left : int
            An int describing the position of the left border of the crop's bounding box in the original image.
        lower : int
            An int describing the position of the bottom border of the crop's bounding box in the original image.
        right : int
            An int describing the position of the right border of the crop's bounding box in the original image.
        upper : int
            An int describing the position of the top border of the crop's bounding box in the original image.

        """"""
        if left is None and right is None and upper is None and lower is None:
            self.cropped_image = image
            self.left = 0
            self.lower = 0
            self.right = image.shape[2]  # width
            self.upper = image.shape[1]  # height
        else:
            self.cropped_image = image[:, lower:upper, left:right]
            self.left = left
            self.upper = upper
            self.right = right
            self.lower = lower

        self.width = self.cropped_image.shape[2]
        self.height = self.cropped_image.shape[1]

        self.horizontal_center = (self.left + self.right) / 2
        self.vertical_center = (self.lower + self.upper) / 2

    def find(self, object_name: str)->List[""ImagePatch""]:
        """"""Returns a new ImagePatch object containing the crop of the image centered around the object specified by object_name.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        """"""
        return find_in_image(self.cropped_image, object_name)

    def simple_query(self, question: str=None)->str:
        """"""Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
        Parameters
        -------
        question : str
            A string describing the question to be asked.

        Examples
        -------

        >>> # Which kind of animal is not eating?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     animal_patches = image_patch.find(""animal"")
        >>>     for animal_patch in animal_patches:
        >>>         if not animal_patch.verify_property(""animal"", ""eating""):
        >>>             return animal_patch.simple_query(""What kind of animal is eating?"") # crop would include eating so keep it in the query
        >>>     # If no animal is not eating, query the image directly
        >>>     return image_patch.simple_query(""Which kind of animal is not eating?"")

        >>> # What is in front of the horse?
        >>> # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
        >>> return image_patch.simple_query(""What is in front of the horse?"")
        >>>
        """"""
        return simple_qa(self.cropped_image, question)

    def exists(self, object_name: str)->bool:
        """"""Returns True if the object specified by object_name is found in the image, and False otherwise.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.

        Examples
        -------
        >>> # Are there both cakes and gummy bears in the photo?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     is_cake = image_patch.exists(""cake"")
        >>>     is_gummy_bear = image_patch.exists(""gummy bear"")
        >>>     return bool_to_yesno(is_cake and is_gummy_bear)
        """"""
        return len(self.find(object_name)) > 0

    def verify_property(self, object_name: str, property: str)->bool:
        """"""Returns True if the object possesses the property, and False otherwise.
        Differs from 'exists' in that it presupposes the existence of the object specified by object_name, instead checking whether the object possesses the property.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        property : str
            A string describing the property to be checked.

        Examples
        -------
        >>> # Do the letters have blue color?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     letters_patches = image_patch.find(""letters"")
        >>>     # Question assumes only one letter patch
        >>>     if len(letters_patches) == 0:
        >>>         # If no letters are found, query the image directly
        >>>         return image_patch.simple_query(""Do the letters have blue color?"")
        >>>     return bool_to_yesno(letters_patches[0].verify_property(""letters"", ""blue""))
        """"""
        return verify_property(self.cropped_image, object_name, property)

    def best_text_match(self, option_list: List[str]) -> str:
        """"""Returns the string that best matches the image.
        Parameters
        -------
        option_list : str
            A list with the names of the different options
        prefix : str
            A string with the prefixes to append to the options

        Examples
        -------
        >>> # Is the cap gold or white?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     cap_patches = image_patch.find(""cap"")
        >>>     # Question assumes one cap patch
        >>>     if len(cap_patches) == 0:
        >>>         # If no cap is found, query the image directly
        >>>         return image_patch.simple_query(""Is the cap gold or white?"")
        >>>     return cap_patches[0].best_text_match([""gold"", ""white""])
        """"""
        return best_text_match(self.cropped_image, option_list)

    def crop(self, left: int, lower: int, right: int, upper: int)->""ImagePatch"":
        """"""Returns a new ImagePatch cropped from the current ImagePatch.
        Parameters
        -------
        left : int
            The leftmost pixel of the cropped image.
        lower : int
            The lowest pixel of the cropped image.
        right : int
            The rightmost pixel of the cropped image.
        upper : int
            The uppermost pixel of the cropped image.
        -------
        """"""
        return ImagePatch(self.cropped_image, left, lower, right, upper)

# Examples of using ImagePatch
# Is there a backpack to the right of the man?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a backpack to the right of the man?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes one backpack patch
    if len(backpack_patches) == 0:
        return ""no""
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no""

# In which part is the bread, the bottom or the top?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""In which part is the bread, the bottom or the top?"")
    if bread_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""

# What type of weather do you see in the photograph?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of weather do you see in the photograph?"")

# Who is the man staring at?
def execute_command(image)->str:
    # asks for the predicate of a relational verb (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the man staring at?"")

# What toy is wearing a shirt?
def execute_command(image)->str:
    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What toy is wearing a shirt?"")
    for toy_patch in toy_patches:
        is_wearing_shirt = (toy_patch.simple_query(""Is the toy wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return toy_patch.simple_query(""What toy is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no toy is wearing a shirt, pick the first toy
    return toy_patches[0].simple_query(""What toy is wearing a shirt?"")

# What is behind the pole?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is behind the pole?"")

# Are there bagels or lemons?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    is_bagel = image_patch.exists(""bagel"")
    is_lemon = image_patch.exists(""lemon"")
    return bool_to_yesno(is_bagel or is_lemon)

# Is that blanket to the right of a pillow?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is that blanket to the right of a pillow?"")
    for blanket_patch in blanket_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > blanket_patch.horizontal_center:
                return ""yes""
    return ""no""

# Is it overcast?
def execute_command(image)->str: # assumes only one image patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it overcast?"")) # assumes one image patch

# Is the chair near a table?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair near a table?"")
    chair_patch = chair_patches[0]
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        return ""no""
    table_patch = table_patches[0]
    if abs(chair_patch.horizontal_center - table_patch.horizontal_center) < 50:
        return ""yes""
    return ""no"" # if more than 50 pixels away, assume not near

# Is the cat on a table?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len"
201640614,Who is wearing the dress?,"from PIL import Image
from vision_functions import find_in_image, simple_qa, verify_property, best_text_match

def bool_to_yesno(bool_answer: bool)->str:
    return ""yes"" if bool_answer else ""no""

class ImagePatch:
    """"""A Python class containing a crop of an image centered around a particular object, as well as relevant information.
    Attributes
    ----------
    cropped_image : array_like
        An array-like of the cropped image taken from the original image.
    left : int
        An int describing the position of the left border of the crop's bounding box in the original image.
    lower : int
        An int describing the position of the bottom border of the crop's bounding box in the original image.
    right : int
        An int describing the position of the right border of the crop's bounding box in the original image.
    upper : int
        An int describing the position of the top border of the crop's bounding box in the original image.

    Methods
    -------
    find(object_name: str)->List[ImagePatch]
        Returns a list of new ImagePatch objects containing crops of the image centered around any objects found in the image matching the object_name.
    simple_query(question: str=None)->str
        Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
    exists(object_name: str)->bool
        Returns True if the object specified by object_name is found in the image, and False otherwise.
    verify_property(property: str)->bool
        Returns True if the property is met, and False otherwise.
    best_text_match(string1: str, string2: str)->str
        Returns the string that best matches the image.
    crop(left: int, lower: int, right: int, upper: int)->ImagePatch
        Returns a new ImagePatch object containing a crop of the image at the given coordinates.
        """"""

    def __init__(self, image, left: int=None, lower: int=None, right: int=None, upper: int=None):
        """"""Initializes an ImagePatch object by cropping the image at the given coordinates and stores the coordinates as attributes.
        If no coordinates are provided, the image is left unmodified, and the coordinates are set to the dimensions of the image.
        Parameters
        -------
        image : array_like
            An array-like of the original image.
        left : int
            An int describing the position of the left border of the crop's bounding box in the original image.
        lower : int
            An int describing the position of the bottom border of the crop's bounding box in the original image.
        right : int
            An int describing the position of the right border of the crop's bounding box in the original image.
        upper : int
            An int describing the position of the top border of the crop's bounding box in the original image.

        """"""
        if left is None and right is None and upper is None and lower is None:
            self.cropped_image = image
            self.left = 0
            self.lower = 0
            self.right = image.shape[2]  # width
            self.upper = image.shape[1]  # height
        else:
            self.cropped_image = image[:, lower:upper, left:right]
            self.left = left
            self.upper = upper
            self.right = right
            self.lower = lower

        self.width = self.cropped_image.shape[2]
        self.height = self.cropped_image.shape[1]

        self.horizontal_center = (self.left + self.right) / 2
        self.vertical_center = (self.lower + self.upper) / 2

    def find(self, object_name: str)->List[""ImagePatch""]:
        """"""Returns a new ImagePatch object containing the crop of the image centered around the object specified by object_name.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        """"""
        return find_in_image(self.cropped_image, object_name)

    def simple_query(self, question: str=None)->str:
        """"""Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
        Parameters
        -------
        question : str
            A string describing the question to be asked.

        Examples
        -------

        >>> # Which kind of animal is not eating?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     animal_patches = image_patch.find(""animal"")
        >>>     for animal_patch in animal_patches:
        >>>         if not animal_patch.verify_property(""animal"", ""eating""):
        >>>             return animal_patch.simple_query(""What kind of animal is eating?"") # crop would include eating so keep it in the query
        >>>     # If no animal is not eating, query the image directly
        >>>     return image_patch.simple_query(""Which kind of animal is not eating?"")

        >>> # What is in front of the horse?
        >>> # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
        >>> return image_patch.simple_query(""What is in front of the horse?"")
        >>>
        """"""
        return simple_qa(self.cropped_image, question)

    def exists(self, object_name: str)->bool:
        """"""Returns True if the object specified by object_name is found in the image, and False otherwise.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.

        Examples
        -------
        >>> # Are there both cakes and gummy bears in the photo?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     is_cake = image_patch.exists(""cake"")
        >>>     is_gummy_bear = image_patch.exists(""gummy bear"")
        >>>     return bool_to_yesno(is_cake and is_gummy_bear)
        """"""
        return len(self.find(object_name)) > 0

    def verify_property(self, object_name: str, property: str)->bool:
        """"""Returns True if the object possesses the property, and False otherwise.
        Differs from 'exists' in that it presupposes the existence of the object specified by object_name, instead checking whether the object possesses the property.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        property : str
            A string describing the property to be checked.

        Examples
        -------
        >>> # Do the letters have blue color?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     letters_patches = image_patch.find(""letters"")
        >>>     # Question assumes only one letter patch
        >>>     if len(letters_patches) == 0:
        >>>         # If no letters are found, query the image directly
        >>>         return image_patch.simple_query(""Do the letters have blue color?"")
        >>>     return bool_to_yesno(letters_patches[0].verify_property(""letters"", ""blue""))
        """"""
        return verify_property(self.cropped_image, object_name, property)

    def best_text_match(self, option_list: List[str]) -> str:
        """"""Returns the string that best matches the image.
        Parameters
        -------
        option_list : str
            A list with the names of the different options
        prefix : str
            A string with the prefixes to append to the options

        Examples
        -------
        >>> # Is the cap gold or white?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     cap_patches = image_patch.find(""cap"")
        >>>     # Question assumes one cap patch
        >>>     if len(cap_patches) == 0:
        >>>         # If no cap is found, query the image directly
        >>>         return image_patch.simple_query(""Is the cap gold or white?"")
        >>>     return cap_patches[0].best_text_match([""gold"", ""white""])
        """"""
        return best_text_match(self.cropped_image, option_list)

    def crop(self, left: int, lower: int, right: int, upper: int)->""ImagePatch"":
        """"""Returns a new ImagePatch cropped from the current ImagePatch.
        Parameters
        -------
        left : int
            The leftmost pixel of the cropped image.
        lower : int
            The lowest pixel of the cropped image.
        right : int
            The rightmost pixel of the cropped image.
        upper : int
            The uppermost pixel of the cropped image.
        -------
        """"""
        return ImagePatch(self.cropped_image, left, lower, right, upper)

# Examples of using ImagePatch
# Is there a backpack to the right of the man?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a backpack to the right of the man?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes one backpack patch
    if len(backpack_patches) == 0:
        return ""no""
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no""

# In which part is the bread, the bottom or the top?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""In which part is the bread, the bottom or the top?"")
    if bread_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""

# What type of weather do you see in the photograph?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of weather do you see in the photograph?"")

# Who is the man staring at?
def execute_command(image)->str:
    # asks for the predicate of a relational verb (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the man staring at?"")

# What toy is wearing a shirt?
def execute_command(image)->str:
    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What toy is wearing a shirt?"")
    for toy_patch in toy_patches:
        is_wearing_shirt = (toy_patch.simple_query(""Is the toy wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return toy_patch.simple_query(""What toy is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no toy is wearing a shirt, pick the first toy
    return toy_patches[0].simple_query(""What toy is wearing a shirt?"")

# What is behind the pole?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is behind the pole?"")

# Are there bagels or lemons?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    is_bagel = image_patch.exists(""bagel"")
    is_lemon = image_patch.exists(""lemon"")
    return bool_to_yesno(is_bagel or is_lemon)

# Is that blanket to the right of a pillow?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is that blanket to the right of a pillow?"")
    for blanket_patch in blanket_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > blanket_patch.horizontal_center:
                return ""yes""
    return ""no""

# Who is wearing the dress?
def execute_command(image)->str: # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing the dress?"")
    person_patch = person_patches[0]
    dress_patches = person_patch.find(""dress"")
    if len(dress_patches) == 0:
        return image_patch.simple_query(""Who is wearing the dress?"")
    return dress_patches[0].simple_query(""Who is wearing the dress?"")

# Is there a cat on top of the dog?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Is there a cat on top of the dog?"")
    cat_patch = cat_patches[0]
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        return ""no""
    dog_patch = dog_patches[0]
    if cat_patch.horizontal_center > dog_patch.horizontal_center"
202225914,Does the utensil on top of the table look clean and black?,"from PIL import Image
from vision_functions import find_in_image, simple_qa, verify_property, best_text_match

def bool_to_yesno(bool_answer: bool)->str:
    return ""yes"" if bool_answer else ""no""

class ImagePatch:
    """"""A Python class containing a crop of an image centered around a particular object, as well as relevant information.
    Attributes
    ----------
    cropped_image : array_like
        An array-like of the cropped image taken from the original image.
    left : int
        An int describing the position of the left border of the crop's bounding box in the original image.
    lower : int
        An int describing the position of the bottom border of the crop's bounding box in the original image.
    right : int
        An int describing the position of the right border of the crop's bounding box in the original image.
    upper : int
        An int describing the position of the top border of the crop's bounding box in the original image.

    Methods
    -------
    find(object_name: str)->List[ImagePatch]
        Returns a list of new ImagePatch objects containing crops of the image centered around any objects found in the image matching the object_name.
    simple_query(question: str=None)->str
        Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
    exists(object_name: str)->bool
        Returns True if the object specified by object_name is found in the image, and False otherwise.
    verify_property(property: str)->bool
        Returns True if the property is met, and False otherwise.
    best_text_match(string1: str, string2: str)->str
        Returns the string that best matches the image.
    crop(left: int, lower: int, right: int, upper: int)->ImagePatch
        Returns a new ImagePatch object containing a crop of the image at the given coordinates.
        """"""

    def __init__(self, image, left: int=None, lower: int=None, right: int=None, upper: int=None):
        """"""Initializes an ImagePatch object by cropping the image at the given coordinates and stores the coordinates as attributes.
        If no coordinates are provided, the image is left unmodified, and the coordinates are set to the dimensions of the image.
        Parameters
        -------
        image : array_like
            An array-like of the original image.
        left : int
            An int describing the position of the left border of the crop's bounding box in the original image.
        lower : int
            An int describing the position of the bottom border of the crop's bounding box in the original image.
        right : int
            An int describing the position of the right border of the crop's bounding box in the original image.
        upper : int
            An int describing the position of the top border of the crop's bounding box in the original image.

        """"""
        if left is None and right is None and upper is None and lower is None:
            self.cropped_image = image
            self.left = 0
            self.lower = 0
            self.right = image.shape[2]  # width
            self.upper = image.shape[1]  # height
        else:
            self.cropped_image = image[:, lower:upper, left:right]
            self.left = left
            self.upper = upper
            self.right = right
            self.lower = lower

        self.width = self.cropped_image.shape[2]
        self.height = self.cropped_image.shape[1]

        self.horizontal_center = (self.left + self.right) / 2
        self.vertical_center = (self.lower + self.upper) / 2

    def find(self, object_name: str)->List[""ImagePatch""]:
        """"""Returns a new ImagePatch object containing the crop of the image centered around the object specified by object_name.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        """"""
        return find_in_image(self.cropped_image, object_name)

    def simple_query(self, question: str=None)->str:
        """"""Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
        Parameters
        -------
        question : str
            A string describing the question to be asked.

        Examples
        -------

        >>> # Which kind of animal is not eating?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     animal_patches = image_patch.find(""animal"")
        >>>     for animal_patch in animal_patches:
        >>>         if not animal_patch.verify_property(""animal"", ""eating""):
        >>>             return animal_patch.simple_query(""What kind of animal is eating?"") # crop would include eating so keep it in the query
        >>>     # If no animal is not eating, query the image directly
        >>>     return image_patch.simple_query(""Which kind of animal is not eating?"")

        >>> # What is in front of the horse?
        >>> # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
        >>> return image_patch.simple_query(""What is in front of the horse?"")
        >>>
        """"""
        return simple_qa(self.cropped_image, question)

    def exists(self, object_name: str)->bool:
        """"""Returns True if the object specified by object_name is found in the image, and False otherwise.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.

        Examples
        -------
        >>> # Are there both cakes and gummy bears in the photo?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     is_cake = image_patch.exists(""cake"")
        >>>     is_gummy_bear = image_patch.exists(""gummy bear"")
        >>>     return bool_to_yesno(is_cake and is_gummy_bear)
        """"""
        return len(self.find(object_name)) > 0

    def verify_property(self, object_name: str, property: str)->bool:
        """"""Returns True if the object possesses the property, and False otherwise.
        Differs from 'exists' in that it presupposes the existence of the object specified by object_name, instead checking whether the object possesses the property.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        property : str
            A string describing the property to be checked.

        Examples
        -------
        >>> # Do the letters have blue color?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     letters_patches = image_patch.find(""letters"")
        >>>     # Question assumes only one letter patch
        >>>     if len(letters_patches) == 0:
        >>>         # If no letters are found, query the image directly
        >>>         return image_patch.simple_query(""Do the letters have blue color?"")
        >>>     return bool_to_yesno(letters_patches[0].verify_property(""letters"", ""blue""))
        """"""
        return verify_property(self.cropped_image, object_name, property)

    def best_text_match(self, option_list: List[str]) -> str:
        """"""Returns the string that best matches the image.
        Parameters
        -------
        option_list : str
            A list with the names of the different options
        prefix : str
            A string with the prefixes to append to the options

        Examples
        -------
        >>> # Is the cap gold or white?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     cap_patches = image_patch.find(""cap"")
        >>>     # Question assumes one cap patch
        >>>     if len(cap_patches) == 0:
        >>>         # If no cap is found, query the image directly
        >>>         return image_patch.simple_query(""Is the cap gold or white?"")
        >>>     return cap_patches[0].best_text_match([""gold"", ""white""])
        """"""
        return best_text_match(self.cropped_image, option_list)

    def crop(self, left: int, lower: int, right: int, upper: int)->""ImagePatch"":
        """"""Returns a new ImagePatch cropped from the current ImagePatch.
        Parameters
        -------
        left : int
            The leftmost pixel of the cropped image.
        lower : int
            The lowest pixel of the cropped image.
        right : int
            The rightmost pixel of the cropped image.
        upper : int
            The uppermost pixel of the cropped image.
        -------
        """"""
        return ImagePatch(self.cropped_image, left, lower, right, upper)

# Examples of using ImagePatch
# Is there a backpack to the right of the man?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a backpack to the right of the man?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes one backpack patch
    if len(backpack_patches) == 0:
        return ""no""
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no""

# In which part is the bread, the bottom or the top?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""In which part is the bread, the bottom or the top?"")
    if bread_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""

# What type of weather do you see in the photograph?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of weather do you see in the photograph?"")

# Who is the man staring at?
def execute_command(image)->str:
    # asks for the predicate of a relational verb (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the man staring at?"")

# What toy is wearing a shirt?
def execute_command(image)->str:
    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What toy is wearing a shirt?"")
    for toy_patch in toy_patches:
        is_wearing_shirt = (toy_patch.simple_query(""Is the toy wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return toy_patch.simple_query(""What toy is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no toy is wearing a shirt, pick the first toy
    return toy_patches[0].simple_query(""What toy is wearing a shirt?"")

# What is behind the pole?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is behind the pole?"")

# Are there bagels or lemons?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    is_bagel = image_patch.exists(""bagel"")
    is_lemon = image_patch.exists(""lemon"")
    return bool_to_yesno(is_bagel or is_lemon)

# Is that blanket to the right of a pillow?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is that blanket to the right of a pillow?"")
    for blanket_patch in blanket_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > blanket_patch.horizontal_center:
                return ""yes""
    return ""no""

# Does the utensil on top of the table look clean and black?
def execute_command(image)->str: # clean and black
    image_patch = ImagePatch(image)
    utensil_patches = image_patch.find(""utensil"")
    # Question assumes only one utensil patch
    if len(utensil_patches) == 0:
        # If no utensil is found, query the image directly
        return image_patch.simple_query(""Does the utensil on top of the table look clean and black?"")
    utensil_patch = utensil_patches[0]
    if utensil_patch.simple_query(""Is the utensil on top of the table?"") == ""yes"":
        return ""yes""
    return ""no""

# Is the book on the table?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book on the table?"")
    book_patch = book_patches[0]
    return book_patch.verify_property(""book"", ""on the table"")

# Is the car red?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    car_patches = image"
2062325,Is the surfer that looks wet wearing a wetsuit?,"from PIL import Image
from vision_functions import find_in_image, simple_qa, verify_property, best_text_match

def bool_to_yesno(bool_answer: bool)->str:
    return ""yes"" if bool_answer else ""no""

class ImagePatch:
    """"""A Python class containing a crop of an image centered around a particular object, as well as relevant information.
    Attributes
    ----------
    cropped_image : array_like
        An array-like of the cropped image taken from the original image.
    left : int
        An int describing the position of the left border of the crop's bounding box in the original image.
    lower : int
        An int describing the position of the bottom border of the crop's bounding box in the original image.
    right : int
        An int describing the position of the right border of the crop's bounding box in the original image.
    upper : int
        An int describing the position of the top border of the crop's bounding box in the original image.

    Methods
    -------
    find(object_name: str)->List[ImagePatch]
        Returns a list of new ImagePatch objects containing crops of the image centered around any objects found in the image matching the object_name.
    simple_query(question: str=None)->str
        Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
    exists(object_name: str)->bool
        Returns True if the object specified by object_name is found in the image, and False otherwise.
    verify_property(property: str)->bool
        Returns True if the property is met, and False otherwise.
    best_text_match(string1: str, string2: str)->str
        Returns the string that best matches the image.
    crop(left: int, lower: int, right: int, upper: int)->ImagePatch
        Returns a new ImagePatch object containing a crop of the image at the given coordinates.
        """"""

    def __init__(self, image, left: int=None, lower: int=None, right: int=None, upper: int=None):
        """"""Initializes an ImagePatch object by cropping the image at the given coordinates and stores the coordinates as attributes.
        If no coordinates are provided, the image is left unmodified, and the coordinates are set to the dimensions of the image.
        Parameters
        -------
        image : array_like
            An array-like of the original image.
        left : int
            An int describing the position of the left border of the crop's bounding box in the original image.
        lower : int
            An int describing the position of the bottom border of the crop's bounding box in the original image.
        right : int
            An int describing the position of the right border of the crop's bounding box in the original image.
        upper : int
            An int describing the position of the top border of the crop's bounding box in the original image.

        """"""
        if left is None and right is None and upper is None and lower is None:
            self.cropped_image = image
            self.left = 0
            self.lower = 0
            self.right = image.shape[2]  # width
            self.upper = image.shape[1]  # height
        else:
            self.cropped_image = image[:, lower:upper, left:right]
            self.left = left
            self.upper = upper
            self.right = right
            self.lower = lower

        self.width = self.cropped_image.shape[2]
        self.height = self.cropped_image.shape[1]

        self.horizontal_center = (self.left + self.right) / 2
        self.vertical_center = (self.lower + self.upper) / 2

    def find(self, object_name: str)->List[""ImagePatch""]:
        """"""Returns a new ImagePatch object containing the crop of the image centered around the object specified by object_name.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        """"""
        return find_in_image(self.cropped_image, object_name)

    def simple_query(self, question: str=None)->str:
        """"""Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
        Parameters
        -------
        question : str
            A string describing the question to be asked.

        Examples
        -------

        >>> # Which kind of animal is not eating?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     animal_patches = image_patch.find(""animal"")
        >>>     for animal_patch in animal_patches:
        >>>         if not animal_patch.verify_property(""animal"", ""eating""):
        >>>             return animal_patch.simple_query(""What kind of animal is eating?"") # crop would include eating so keep it in the query
        >>>     # If no animal is not eating, query the image directly
        >>>     return image_patch.simple_query(""Which kind of animal is not eating?"")

        >>> # What is in front of the horse?
        >>> # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
        >>> return image_patch.simple_query(""What is in front of the horse?"")
        >>>
        """"""
        return simple_qa(self.cropped_image, question)

    def exists(self, object_name: str)->bool:
        """"""Returns True if the object specified by object_name is found in the image, and False otherwise.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.

        Examples
        -------
        >>> # Are there both cakes and gummy bears in the photo?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     is_cake = image_patch.exists(""cake"")
        >>>     is_gummy_bear = image_patch.exists(""gummy bear"")
        >>>     return bool_to_yesno(is_cake and is_gummy_bear)
        """"""
        return len(self.find(object_name)) > 0

    def verify_property(self, object_name: str, property: str)->bool:
        """"""Returns True if the object possesses the property, and False otherwise.
        Differs from 'exists' in that it presupposes the existence of the object specified by object_name, instead checking whether the object possesses the property.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        property : str
            A string describing the property to be checked.

        Examples
        -------
        >>> # Do the letters have blue color?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     letters_patches = image_patch.find(""letters"")
        >>>     # Question assumes only one letter patch
        >>>     if len(letters_patches) == 0:
        >>>         # If no letters are found, query the image directly
        >>>         return image_patch.simple_query(""Do the letters have blue color?"")
        >>>     return bool_to_yesno(letters_patches[0].verify_property(""letters"", ""blue""))
        """"""
        return verify_property(self.cropped_image, object_name, property)

    def best_text_match(self, option_list: List[str]) -> str:
        """"""Returns the string that best matches the image.
        Parameters
        -------
        option_list : str
            A list with the names of the different options
        prefix : str
            A string with the prefixes to append to the options

        Examples
        -------
        >>> # Is the cap gold or white?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     cap_patches = image_patch.find(""cap"")
        >>>     # Question assumes one cap patch
        >>>     if len(cap_patches) == 0:
        >>>         # If no cap is found, query the image directly
        >>>         return image_patch.simple_query(""Is the cap gold or white?"")
        >>>     return cap_patches[0].best_text_match([""gold"", ""white""])
        """"""
        return best_text_match(self.cropped_image, option_list)

    def crop(self, left: int, lower: int, right: int, upper: int)->""ImagePatch"":
        """"""Returns a new ImagePatch cropped from the current ImagePatch.
        Parameters
        -------
        left : int
            The leftmost pixel of the cropped image.
        lower : int
            The lowest pixel of the cropped image.
        right : int
            The rightmost pixel of the cropped image.
        upper : int
            The uppermost pixel of the cropped image.
        -------
        """"""
        return ImagePatch(self.cropped_image, left, lower, right, upper)

# Examples of using ImagePatch
# Is there a backpack to the right of the man?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a backpack to the right of the man?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes one backpack patch
    if len(backpack_patches) == 0:
        return ""no""
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no""

# In which part is the bread, the bottom or the top?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""In which part is the bread, the bottom or the top?"")
    if bread_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""

# What type of weather do you see in the photograph?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of weather do you see in the photograph?"")

# Who is the man staring at?
def execute_command(image)->str:
    # asks for the predicate of a relational verb (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the man staring at?"")

# What toy is wearing a shirt?
def execute_command(image)->str:
    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What toy is wearing a shirt?"")
    for toy_patch in toy_patches:
        is_wearing_shirt = (toy_patch.simple_query(""Is the toy wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return toy_patch.simple_query(""What toy is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no toy is wearing a shirt, pick the first toy
    return toy_patches[0].simple_query(""What toy is wearing a shirt?"")

# What is behind the pole?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is behind the pole?"")

# Are there bagels or lemons?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    is_bagel = image_patch.exists(""bagel"")
    is_lemon = image_patch.exists(""lemon"")
    return bool_to_yesno(is_bagel or is_lemon)

# Is that blanket to the right of a pillow?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is that blanket to the right of a pillow?"")
    for blanket_patch in blanket_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > blanket_patch.horizontal_center:
                return ""yes""
    return ""no""

# Is the surfer that looks wet wearing a wetsuit?
def execute_command(image)->str: # assumes one surfer patch and one wetsuit patch
    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    wetsuit_patches = image_patch.find(""wetsuit"")
    if len(surfer_patches) == 0 or len(wetsuit_patches) == 0:
        # If no surfer or wetsuit is found, query the image directly
        return image_patch.simple_query(""Is the surfer that looks wet wearing a wetsuit?"")
    is_wet = surfer_patches[0].simple_query(""Is the surfer that looks wet?"")
    is_wearing_wetsuit = wetsuit_patches[0].simple_query(""Is the surfer wearing a wetsuit?"")
    return bool_to_yesno(is_wet and is_wearing_wetsuit) # crop would include the wetsuit so keep it in the query

# What is the color of the apple?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    apple_patches = image_patch.find(""apple"")
    # Question assumes only one apple patch
    if len(apple_patches) == 0:
        # If no apple is found, query the image directly
"
201303229,How tall is the chair in the bottom of the photo?,"from PIL import Image
from vision_functions import find_in_image, simple_qa, verify_property, best_text_match

def bool_to_yesno(bool_answer: bool)->str:
    return ""yes"" if bool_answer else ""no""

class ImagePatch:
    """"""A Python class containing a crop of an image centered around a particular object, as well as relevant information.
    Attributes
    ----------
    cropped_image : array_like
        An array-like of the cropped image taken from the original image.
    left : int
        An int describing the position of the left border of the crop's bounding box in the original image.
    lower : int
        An int describing the position of the bottom border of the crop's bounding box in the original image.
    right : int
        An int describing the position of the right border of the crop's bounding box in the original image.
    upper : int
        An int describing the position of the top border of the crop's bounding box in the original image.

    Methods
    -------
    find(object_name: str)->List[ImagePatch]
        Returns a list of new ImagePatch objects containing crops of the image centered around any objects found in the image matching the object_name.
    simple_query(question: str=None)->str
        Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
    exists(object_name: str)->bool
        Returns True if the object specified by object_name is found in the image, and False otherwise.
    verify_property(property: str)->bool
        Returns True if the property is met, and False otherwise.
    best_text_match(string1: str, string2: str)->str
        Returns the string that best matches the image.
    crop(left: int, lower: int, right: int, upper: int)->ImagePatch
        Returns a new ImagePatch object containing a crop of the image at the given coordinates.
        """"""

    def __init__(self, image, left: int=None, lower: int=None, right: int=None, upper: int=None):
        """"""Initializes an ImagePatch object by cropping the image at the given coordinates and stores the coordinates as attributes.
        If no coordinates are provided, the image is left unmodified, and the coordinates are set to the dimensions of the image.
        Parameters
        -------
        image : array_like
            An array-like of the original image.
        left : int
            An int describing the position of the left border of the crop's bounding box in the original image.
        lower : int
            An int describing the position of the bottom border of the crop's bounding box in the original image.
        right : int
            An int describing the position of the right border of the crop's bounding box in the original image.
        upper : int
            An int describing the position of the top border of the crop's bounding box in the original image.

        """"""
        if left is None and right is None and upper is None and lower is None:
            self.cropped_image = image
            self.left = 0
            self.lower = 0
            self.right = image.shape[2]  # width
            self.upper = image.shape[1]  # height
        else:
            self.cropped_image = image[:, lower:upper, left:right]
            self.left = left
            self.upper = upper
            self.right = right
            self.lower = lower

        self.width = self.cropped_image.shape[2]
        self.height = self.cropped_image.shape[1]

        self.horizontal_center = (self.left + self.right) / 2
        self.vertical_center = (self.lower + self.upper) / 2

    def find(self, object_name: str)->List[""ImagePatch""]:
        """"""Returns a new ImagePatch object containing the crop of the image centered around the object specified by object_name.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        """"""
        return find_in_image(self.cropped_image, object_name)

    def simple_query(self, question: str=None)->str:
        """"""Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
        Parameters
        -------
        question : str
            A string describing the question to be asked.

        Examples
        -------

        >>> # Which kind of animal is not eating?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     animal_patches = image_patch.find(""animal"")
        >>>     for animal_patch in animal_patches:
        >>>         if not animal_patch.verify_property(""animal"", ""eating""):
        >>>             return animal_patch.simple_query(""What kind of animal is eating?"") # crop would include eating so keep it in the query
        >>>     # If no animal is not eating, query the image directly
        >>>     return image_patch.simple_query(""Which kind of animal is not eating?"")

        >>> # What is in front of the horse?
        >>> # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
        >>> return image_patch.simple_query(""What is in front of the horse?"")
        >>>
        """"""
        return simple_qa(self.cropped_image, question)

    def exists(self, object_name: str)->bool:
        """"""Returns True if the object specified by object_name is found in the image, and False otherwise.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.

        Examples
        -------
        >>> # Are there both cakes and gummy bears in the photo?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     is_cake = image_patch.exists(""cake"")
        >>>     is_gummy_bear = image_patch.exists(""gummy bear"")
        >>>     return bool_to_yesno(is_cake and is_gummy_bear)
        """"""
        return len(self.find(object_name)) > 0

    def verify_property(self, object_name: str, property: str)->bool:
        """"""Returns True if the object possesses the property, and False otherwise.
        Differs from 'exists' in that it presupposes the existence of the object specified by object_name, instead checking whether the object possesses the property.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        property : str
            A string describing the property to be checked.

        Examples
        -------
        >>> # Do the letters have blue color?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     letters_patches = image_patch.find(""letters"")
        >>>     # Question assumes only one letter patch
        >>>     if len(letters_patches) == 0:
        >>>         # If no letters are found, query the image directly
        >>>         return image_patch.simple_query(""Do the letters have blue color?"")
        >>>     return bool_to_yesno(letters_patches[0].verify_property(""letters"", ""blue""))
        """"""
        return verify_property(self.cropped_image, object_name, property)

    def best_text_match(self, option_list: List[str]) -> str:
        """"""Returns the string that best matches the image.
        Parameters
        -------
        option_list : str
            A list with the names of the different options
        prefix : str
            A string with the prefixes to append to the options

        Examples
        -------
        >>> # Is the cap gold or white?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     cap_patches = image_patch.find(""cap"")
        >>>     # Question assumes one cap patch
        >>>     if len(cap_patches) == 0:
        >>>         # If no cap is found, query the image directly
        >>>         return image_patch.simple_query(""Is the cap gold or white?"")
        >>>     return cap_patches[0].best_text_match([""gold"", ""white""])
        """"""
        return best_text_match(self.cropped_image, option_list)

    def crop(self, left: int, lower: int, right: int, upper: int)->""ImagePatch"":
        """"""Returns a new ImagePatch cropped from the current ImagePatch.
        Parameters
        -------
        left : int
            The leftmost pixel of the cropped image.
        lower : int
            The lowest pixel of the cropped image.
        right : int
            The rightmost pixel of the cropped image.
        upper : int
            The uppermost pixel of the cropped image.
        -------
        """"""
        return ImagePatch(self.cropped_image, left, lower, right, upper)

# Examples of using ImagePatch
# Is there a backpack to the right of the man?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a backpack to the right of the man?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes one backpack patch
    if len(backpack_patches) == 0:
        return ""no""
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no""

# In which part is the bread, the bottom or the top?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""In which part is the bread, the bottom or the top?"")
    if bread_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""

# What type of weather do you see in the photograph?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of weather do you see in the photograph?"")

# Who is the man staring at?
def execute_command(image)->str:
    # asks for the predicate of a relational verb (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the man staring at?"")

# What toy is wearing a shirt?
def execute_command(image)->str:
    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What toy is wearing a shirt?"")
    for toy_patch in toy_patches:
        is_wearing_shirt = (toy_patch.simple_query(""Is the toy wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return toy_patch.simple_query(""What toy is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no toy is wearing a shirt, pick the first toy
    return toy_patches[0].simple_query(""What toy is wearing a shirt?"")

# What is behind the pole?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is behind the pole?"")

# Are there bagels or lemons?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    is_bagel = image_patch.exists(""bagel"")
    is_lemon = image_patch.exists(""lemon"")
    return bool_to_yesno(is_bagel or is_lemon)

# Is that blanket to the right of a pillow?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is that blanket to the right of a pillow?"")
    for blanket_patch in blanket_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > blanket_patch.horizontal_center:
                return ""yes""
    return ""no""

# How tall is the chair in the bottom of the photo?
def execute_command(image)->str: # returns a string
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""How tall is the chair in the bottom of the photo?"")
    return str(chair_patches[0].height) # returns a string

# Is the book on the table?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book on the table?"")
    for book_patch in book_patches:
        table_patches = image_patch.find(""table"")
        for table_patch in table_patches:
            if book_patch.vertical_center == table_patch.vertical_center:
                return ""yes""
    return ""no""

# What color is the apple?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    apple_patches = image_patch.find(""apple"")
    # Question assumes only one"
201902997,What kind of device is on top of the desk?,"from PIL import Image
from vision_functions import find_in_image, simple_qa, verify_property, best_text_match

def bool_to_yesno(bool_answer: bool)->str:
    return ""yes"" if bool_answer else ""no""

class ImagePatch:
    """"""A Python class containing a crop of an image centered around a particular object, as well as relevant information.
    Attributes
    ----------
    cropped_image : array_like
        An array-like of the cropped image taken from the original image.
    left : int
        An int describing the position of the left border of the crop's bounding box in the original image.
    lower : int
        An int describing the position of the bottom border of the crop's bounding box in the original image.
    right : int
        An int describing the position of the right border of the crop's bounding box in the original image.
    upper : int
        An int describing the position of the top border of the crop's bounding box in the original image.

    Methods
    -------
    find(object_name: str)->List[ImagePatch]
        Returns a list of new ImagePatch objects containing crops of the image centered around any objects found in the image matching the object_name.
    simple_query(question: str=None)->str
        Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
    exists(object_name: str)->bool
        Returns True if the object specified by object_name is found in the image, and False otherwise.
    verify_property(property: str)->bool
        Returns True if the property is met, and False otherwise.
    best_text_match(string1: str, string2: str)->str
        Returns the string that best matches the image.
    crop(left: int, lower: int, right: int, upper: int)->ImagePatch
        Returns a new ImagePatch object containing a crop of the image at the given coordinates.
        """"""

    def __init__(self, image, left: int=None, lower: int=None, right: int=None, upper: int=None):
        """"""Initializes an ImagePatch object by cropping the image at the given coordinates and stores the coordinates as attributes.
        If no coordinates are provided, the image is left unmodified, and the coordinates are set to the dimensions of the image.
        Parameters
        -------
        image : array_like
            An array-like of the original image.
        left : int
            An int describing the position of the left border of the crop's bounding box in the original image.
        lower : int
            An int describing the position of the bottom border of the crop's bounding box in the original image.
        right : int
            An int describing the position of the right border of the crop's bounding box in the original image.
        upper : int
            An int describing the position of the top border of the crop's bounding box in the original image.

        """"""
        if left is None and right is None and upper is None and lower is None:
            self.cropped_image = image
            self.left = 0
            self.lower = 0
            self.right = image.shape[2]  # width
            self.upper = image.shape[1]  # height
        else:
            self.cropped_image = image[:, lower:upper, left:right]
            self.left = left
            self.upper = upper
            self.right = right
            self.lower = lower

        self.width = self.cropped_image.shape[2]
        self.height = self.cropped_image.shape[1]

        self.horizontal_center = (self.left + self.right) / 2
        self.vertical_center = (self.lower + self.upper) / 2

    def find(self, object_name: str)->List[""ImagePatch""]:
        """"""Returns a new ImagePatch object containing the crop of the image centered around the object specified by object_name.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        """"""
        return find_in_image(self.cropped_image, object_name)

    def simple_query(self, question: str=None)->str:
        """"""Returns the answer to a basic question asked about the image. If no question is provided, returns the answer to ""What is this?"".
        Parameters
        -------
        question : str
            A string describing the question to be asked.

        Examples
        -------

        >>> # Which kind of animal is not eating?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     animal_patches = image_patch.find(""animal"")
        >>>     for animal_patch in animal_patches:
        >>>         if not animal_patch.verify_property(""animal"", ""eating""):
        >>>             return animal_patch.simple_query(""What kind of animal is eating?"") # crop would include eating so keep it in the query
        >>>     # If no animal is not eating, query the image directly
        >>>     return image_patch.simple_query(""Which kind of animal is not eating?"")

        >>> # What is in front of the horse?
        >>> # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
        >>> return image_patch.simple_query(""What is in front of the horse?"")
        >>>
        """"""
        return simple_qa(self.cropped_image, question)

    def exists(self, object_name: str)->bool:
        """"""Returns True if the object specified by object_name is found in the image, and False otherwise.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.

        Examples
        -------
        >>> # Are there both cakes and gummy bears in the photo?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     is_cake = image_patch.exists(""cake"")
        >>>     is_gummy_bear = image_patch.exists(""gummy bear"")
        >>>     return bool_to_yesno(is_cake and is_gummy_bear)
        """"""
        return len(self.find(object_name)) > 0

    def verify_property(self, object_name: str, property: str)->bool:
        """"""Returns True if the object possesses the property, and False otherwise.
        Differs from 'exists' in that it presupposes the existence of the object specified by object_name, instead checking whether the object possesses the property.
        Parameters
        -------
        object_name : str
            A string describing the name of the object to be found in the image.
        property : str
            A string describing the property to be checked.

        Examples
        -------
        >>> # Do the letters have blue color?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     letters_patches = image_patch.find(""letters"")
        >>>     # Question assumes only one letter patch
        >>>     if len(letters_patches) == 0:
        >>>         # If no letters are found, query the image directly
        >>>         return image_patch.simple_query(""Do the letters have blue color?"")
        >>>     return bool_to_yesno(letters_patches[0].verify_property(""letters"", ""blue""))
        """"""
        return verify_property(self.cropped_image, object_name, property)

    def best_text_match(self, option_list: List[str]) -> str:
        """"""Returns the string that best matches the image.
        Parameters
        -------
        option_list : str
            A list with the names of the different options
        prefix : str
            A string with the prefixes to append to the options

        Examples
        -------
        >>> # Is the cap gold or white?
        >>> def execute_command(image)->str:
        >>>     image_patch = ImagePatch(image)
        >>>     cap_patches = image_patch.find(""cap"")
        >>>     # Question assumes one cap patch
        >>>     if len(cap_patches) == 0:
        >>>         # If no cap is found, query the image directly
        >>>         return image_patch.simple_query(""Is the cap gold or white?"")
        >>>     return cap_patches[0].best_text_match([""gold"", ""white""])
        """"""
        return best_text_match(self.cropped_image, option_list)

    def crop(self, left: int, lower: int, right: int, upper: int)->""ImagePatch"":
        """"""Returns a new ImagePatch cropped from the current ImagePatch.
        Parameters
        -------
        left : int
            The leftmost pixel of the cropped image.
        lower : int
            The lowest pixel of the cropped image.
        right : int
            The rightmost pixel of the cropped image.
        upper : int
            The uppermost pixel of the cropped image.
        -------
        """"""
        return ImagePatch(self.cropped_image, left, lower, right, upper)

# Examples of using ImagePatch
# Is there a backpack to the right of the man?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a backpack to the right of the man?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes one backpack patch
    if len(backpack_patches) == 0:
        return ""no""
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no""

# In which part is the bread, the bottom or the top?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""In which part is the bread, the bottom or the top?"")
    if bread_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""

# What type of weather do you see in the photograph?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of weather do you see in the photograph?"")

# Who is the man staring at?
def execute_command(image)->str:
    # asks for the predicate of a relational verb (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the man staring at?"")

# What toy is wearing a shirt?
def execute_command(image)->str:
    # not a relational verb so go step by step
    image_patch = ImagePatch(image)
    toy_patches = image_patch.find(""toy"")
    # Question assumes only one toy patch
    if len(toy_patches) == 0:
        # If no toy is found, query the image directly
        return image_patch.simple_query(""What toy is wearing a shirt?"")
    for toy_patch in toy_patches:
        is_wearing_shirt = (toy_patch.simple_query(""Is the toy wearing a shirt?"") == ""yes"")
        if is_wearing_shirt:
            return toy_patch.simple_query(""What toy is wearing a shirt?"") # crop would include the shirt so keep it in the query
    # If no toy is wearing a shirt, pick the first toy
    return toy_patches[0].simple_query(""What toy is wearing a shirt?"")

# What is behind the pole?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is behind the pole?"")

# Are there bagels or lemons?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    is_bagel = image_patch.exists(""bagel"")
    is_lemon = image_patch.exists(""lemon"")
    return bool_to_yesno(is_bagel or is_lemon)

# Is that blanket to the right of a pillow?
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is that blanket to the right of a pillow?"")
    for blanket_patch in blanket_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > blanket_patch.horizontal_center:
                return ""yes""
    return ""no""

# What kind of device is on top of the desk?
def execute_command(image)->str: # assumes only one device and one desk
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        desk_patches = image_patch.find(""desk"")
        for desk_patch in desk_patches:
            if desk_patch.vertical_center < device_patch.vertical_center:
                return device_patch.simple_query(""What kind of device is on top of the desk?"")
    # If no device is on top of a desk, query the image directly
    return image_patch.simple_query(""What kind of device is on top of the desk?"") # crop would include the desk so keep it in the query

# Is the book on top of the table?
def execute_command(image)->str: # assumes only one book and one table
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    for book_patch in book_patches:
        table_patches = image_patch.find(""table"")
        for table_patch in table_patches:
            if table_patch.vertical_center < book_patch.vertical_center:
                return ""yes""
    return ""no""

# Is the cat sleeping?
def execute_command(image)->str: # assumes only one cat
    image_patch = ImagePatch(image)
    cat_patches = image"
