sample_id,query,Answer,image_path,truth_answers,code,accuracy
13151559,Is the large hair both white and soft?,yes,./data/gqa/../images/2410936.jpg,yes,"def execute_command_13151559(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    hair_patch = hair_patches[0]
    is_white = hair_patch.verify_property(""hair"", ""white"")
    is_soft = hair_patch.verify_property(""hair"", ""soft"")
    return bool_to_yesno(is_white and is_soft)",1
18370956,Who is eating the cupcake?,woman,./data/gqa/../images/2317542.jpg,woman,"def execute_command_18370956(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cupcake
    image_patch = ImagePatch(image)
    cupcake_patches = image_patch.find(""cupcake"")
    # Question assumes only one cupcake patch
    if len(cupcake_patches) == 0:
        # If no cupcake is found, query the image directly
        return image_patch.simple_query(""Who is eating the cupcake?"")
    for cupcake_patch in cupcake_patches:
        eating_patches = image_patch.find(""eating"")
        for eating_patch in eating_patches:
            if eating_patch.horizontal_center > cupcake_patch.horizontal_center:
                return eating_patch.simple_query(""Who is eating the cupcake?"") # crop would include eating so keep it in the query
    # If no one is eating the cupcake, query the image directly
    return image_patch.simple_query(""Who is eating the cupcake?"")",1
6436809,What is the guy wearing?,jeans,./data/gqa/../images/2373592.jpg,sweatshirt,"def execute_command_6436809(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one guy
    image_patch = ImagePatch(image)
    guy_patches = image_patch.find(""guy"")
    if len(guy_patches) == 0:
        return image_patch.simple_query(""What is the guy wearing?"")
    guy_patch = guy_patches[0]
    return guy_patch.simple_query(""What is the guy wearing?"")",0
117037,Which kind of food is to the right of the cabbage?,sandwich,./data/gqa/../images/2365608.jpg,sandwich,"def execute_command_117037(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cabbage patch
    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    cabbage_patch = cabbage_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center > cabbage_patch.horizontal_center:
            return food_patch.simple_query(""Which kind of food is to the right of the cabbage?"") # crop would include the food so keep it in the query
    return ""no food to the right of the cabbage""",1
758936,Who wears the cap?,man,./data/gqa/../images/2400175.jpg,skier,"def execute_command_758936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # cap is a noun
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    return cap_patches[0].simple_query(""Who wears the cap?"")",0
111046440,Who is pointing?,the catcher,./data/gqa/../images/2351822.jpg,player,"def execute_command_111046440(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is pointing?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Who is pointing?"")",0
15804389,Is the woman's hair short or long?,long,./data/gqa/../images/2325937.jpg,long,"def execute_command_15804389(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    hair_length = woman_patch.simple_query(""Is the woman's hair short or long?"")
    return hair_length",1
11445636,The women are watching who?,the train,./data/gqa/../images/2391915.jpg,man,"def execute_command_11445636(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The women are watching who?"")",0
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?,yes,./data/gqa/../images/2343545.jpg,yes,"def execute_command_17736165(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one woman and one kitchen
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?"")
    woman_patch = woman_patches[0]
    dishwasher_patches = image_patch.find(""dishwasher"")
    # Question assumes only one dishwasher patch
    if len(dishwasher_patches) == 0:
        return ""no""
    for dishwasher_patch in dishwasher_patches:
        if dishwasher_patch.horizontal_center < woman_patch.horizontal_center:
            kitchen_patches = image_patch.find(""kitchen"")
            # Question assumes only one kitchen patch
            if len(kitchen_patches) == 0:
                return ""no""
            for kitchen_patch in kitchen_patches:
                if kitchen_patch.simple_query(""Is the gas stove inside the kitchen?"") == ""yes"":
                    return bool_to_yesno(dishwasher_patch.verify_property(""dishwasher"", ""white"") and kitchen_patch.verify_property(""kitchen"", ""white""))
    return ""no""",1
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?,crib,./data/gqa/../images/2389006.jpg,bed,"def execute_command_1594898(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one bed and one baby
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one bed and one baby patch
    if len(bed_patches) == 0 or len(baby_patches) == 0:
        # If no bed or baby is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_patch = bed_patches[0]
    baby_patch = baby_patches[0]
    if baby_patch.horizontal_center > bed_patch.horizontal_center:
        return bed_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    return bed_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the left of?"")",0
758958,Is there either any red pillow or snowboard?,yes,./data/gqa/../images/2400175.jpg,yes,"def execute_command_758958(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)",1
143816,Which place is it?,a farm,./data/gqa/../images/2382258.jpg,field,"def execute_command_143816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
13741513,Which side is the knife on?,left,./data/gqa/../images/2325019.jpg,left,"def execute_command_13741513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one knife
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    if len(knife_patches) == 0:
        return image_patch.simple_query(""Which side is the knife on?"")
    knife_patch = knife_patches[0]
    if knife_patch.left < image_patch.width / 2:
        return ""left""
    else:
        return ""right""",1
17829769,What is the computer mouse in front of?,computer,./data/gqa/../images/2400080.jpg,computer,"def execute_command_17829769(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the computer mouse in front of?"")",1
17233738,What is the toddler holding?,no,./data/gqa/../images/2394369.jpg,skis,"def execute_command_17233738(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one toddler patch
    image_patch = ImagePatch(image)
    toddler_patches = image_patch.find(""toddler"")
    if len(toddler_patches) == 0:
        # If no toddler is found, query the image directly
        return image_patch.simple_query(""What is the toddler holding?"")
    toddler_patch = toddler_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return ""no""
    object_patch = object_patches[0]
    if object_patch.horizontal_center > toddler_patch.horizontal_center:
        return object_patch.simple_query(""What is the toddler holding?"")
    return ""no""",0
2951242,Is the gray shirt sleeveless or short sleeved?,yes,./data/gqa/../images/2386013.jpg,short sleeved,"def execute_command_2951242(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # sleeveless or short sleeved
    image_patch = ImagePatch(image)
    gray_shirt_patches = image_patch.find(""gray shirt"")
    # Question assumes only one gray shirt patch
    if len(gray_shirt_patches) == 0:
        # If no gray shirt is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    gray_shirt_patch = gray_shirt_patches[0]
    is_sleeveless = gray_shirt_patch.simple_query(""Is the gray shirt sleeveless?"") == ""yes""
    is_short_sleeved = gray_shirt_patch.simple_query(""Is the gray shirt short sleeved?"") == ""yes""
    return bool_to_yesno(is_sleeveless or is_short_sleeved)",0
15241795,Is the tank top red?,no,./data/gqa/../images/2358063.jpg,no,"def execute_command_15241795(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one tank top
    image_patch = ImagePatch(image)
    tank_top_patches = image_patch.find(""tank top"")
    if len(tank_top_patches) == 0:
        # If no tank top is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    return bool_to_yesno(tank_top_patches[0].verify_property(""tank top"", ""red""))",1
13885234,Which kind of animal is in front of the rocks?,elephant,./data/gqa/../images/2386629.jpg,elephant,"def execute_command_13885234(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one rock patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal in front of the rocks?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is in front of the rocks?"") # crop would include the rocks so keep it in the query
    # If no animal is in front of the rocks, query the image directly
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")",1
19335715,Do you see any grapes?,no,./data/gqa/../images/2404433.jpg,no,"def execute_command_19335715(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""grapes""))",1
6455591,What type of furniture is white?,"Error Codigo: unterminated string literal (detected at line 8) (Codex, line 8)",./data/gqa/../images/2349792.jpg,cabinets,"def execute_command_6455591(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What type of furniture is white?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.best_text_match([""chair"", ""table"", ""sofa"", ""bookshelf"", ""bed"", ""desk"", ""dresser"", ""wardrobe"", ""couch"", ""shelf"", ""stool"", ""bench"", ""table"", ""bookcase"", ""nightstand"", ""coffee table"", ""end table"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet"", ""tv stand"", ""tv cabinet",0
1033761,What is the blue clothing item?,baseball cap,./data/gqa/../images/2405536.jpg,uniform,"def execute_command_1033761(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the clothing item
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.verify_property(""clothing"", ""blue""):
            return clothing_patch.simple_query(""What is the blue clothing item?"") # crop would include the color so keep it in the query
    return ""no""",0
17726504,Who is wearing the glasses?,the man,./data/gqa/../images/2349045.jpg,people,"def execute_command_17726504(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    person_patch = person_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if person_patch.horizontal_center > glasses_patch.horizontal_center:
        return person_patch.simple_query(""Who is wearing the glasses?"")
    return glasses_patch.simple_query(""Who is wearing the glasses?"")",0
13112902,Is the woman wearing a bracelet?,yes,./data/gqa/../images/2356577.jpg,yes,"def execute_command_13112902(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    woman_patch = woman_patches[0]
    return bool_to_yesno(woman_patch.verify_property(""woman"", ""bracelet""))",1
698766,What is the food that is not white?,no food is not white,./data/gqa/../images/2323182.jpg,lettuce,"def execute_command_698766(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What is the food that is not white?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""white""):
            return food_patch.simple_query(""What is the food that is not white?"")
    return ""no food is not white""",0
1332276,Are there both a cup and a bottle in the picture?,yes,./data/gqa/../images/2385859.jpg,yes,"def execute_command_1332276(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cup and one bottle
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)",1
12633088,What color is that glove?,blue,./data/gqa/../images/713282.jpg,gray,"def execute_command_12633088(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # glove is a color
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return glove_patches[0].simple_query(""What color is that glove?"")",0
18103787,Who is holding the helmet?,the boy,./data/gqa/../images/2378758.jpg,boy,"def execute_command_18103787(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one helmet patch
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for helmet_patch in helmet_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > helmet_patch.horizontal_center:
                return person_patch.simple_query(""Who is holding the helmet?"")
    return ""no one""",1
2143247,What is the name of the food to the left of the donut that looks little?,no,./data/gqa/../images/2317344.jpg,pastry,"def execute_command_2143247(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one donut patch
    image_patch = ImagePatch(image)
    donut_patches = image_patch.find(""donut"")
    if len(donut_patches) == 0:
        # If no donut is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    donut_patch = donut_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < donut_patch.horizontal_center and food_patch.simple_query(""Is the food little?"") == ""yes"":
            return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"") # crop would include the donut so keep it in the query
    return ""no""",0
3767951,Is the clock to the right or to the left of the man on the left?,right,./data/gqa/../images/285673.jpg,right,"def execute_command_3767951(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    if len(clock_patches) == 0:
        return ""no""
    for clock_patch in clock_patches:
        if clock_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        else:
            return ""left""",1
17655180,What's the sticker on?,wall,./data/gqa/../images/2409933.jpg,sign,"def execute_command_17655180(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one sticker
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    if len(sticker_patches) == 0:
        return image_patch.simple_query(""What's the sticker on?"")
    sticker_patch = sticker_patches[0]
    return sticker_patch.simple_query(""What's the sticker on?"") # crop would include the sticker so keep it in the query",0
3468831,In front of what is this table?,bottle,./data/gqa/../images/2355360.jpg,tree,"def execute_command_3468831(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In front of what is this table?"")",0
5888523,Do you see people to the right of the still car?,yes,./data/gqa/../images/2352943.jpg,no,"def execute_command_5888523(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one car patch
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    for people_patch in people_patches:
        for car_patch in car_patches:
            if car_patch.horizontal_center < people_patch.horizontal_center:
                return ""yes""
    return ""no""",0
7188981,Does the giraffe look adult?,no,./data/gqa/../images/2404963.jpg,no,"def execute_command_7188981(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # giraffe is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the giraffe look adult?"")",1
16852802,Of what color are the pants?,black,./data/gqa/../images/2359824.jpg,gray,"def execute_command_16852802(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the pants
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].simple_query(""Of what color are the pants?"")",0
9619158,What kind of watercraft is full of men?,"Error Codigo: unterminated string literal (detected at line 14) (Codex, line 14)",./data/gqa/../images/2406392.jpg,boat,"def execute_command_9619158(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one watercraft patch
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    watercraft_patch = watercraft_patches[0]
    men_patches = image_patch.find(""men"")
    if len(men_patches) == 0:
        # If no men are found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    men_patch = men_patches[0]
    return watercraft_patch.best_text_match([""boat"", ""ship"", ""yacht"", ""submarine"", ""ferry"", ""canoe"", ""kayak"", ""raft"", ""dinghy"", ""jet ski"", ""speedboat"", ""sailboat"", ""catamaran"", ""dinghy"", ""fishing boat"", ""lifeboat"", ""paddleboard"", ""personal watercraft"", ""powerboat"", ""rowboat"", ""skiff"", ""speedboat"", ""surfboard"", ""tugboat"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl"", ""yawl",0
3625225,On which side of the picture are the boats?,left,./data/gqa/../images/1054.jpg,left,"def execute_command_3625225(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one boat patch
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes only one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    boat_patch = boat_patches[0]
    if boat_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
7126345,Does the elephant to the left of the other elephant have large size?,yes,./data/gqa/../images/2416088.jpg,yes,"def execute_command_7126345(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one elephant patch
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    leftmost_elephant = elephant_patches[0]
    for elephant_patch in elephant_patches:
        if elephant_patch.horizontal_center < leftmost_elephant.horizontal_center:
            leftmost_elephant = elephant_patch
    return bool_to_yesno(leftmost_elephant.verify_property(""elephant"", ""large""))",1
19834124,What is the girl holding?,paper bag,./data/gqa/../images/2384946.jpg,phone,"def execute_command_19834124(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What is the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What is the girl holding?"")",0
4617704,Does the toilet seat that is not down appear to be white and open?,yes,./data/gqa/../images/2397470.jpg,yes,"def execute_command_4617704(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # toilet seat is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")",1
5899539,Are there any bottles or mugs that are not purple?,yes,./data/gqa/../images/2386338.jpg,no,"def execute_command_5899539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle and mug are not in the list of objects
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    mug_patches = image_patch.find(""mug"")
    # Question assumes only one bottle or mug patch
    if len(bottle_patches) == 0 and len(mug_patches) == 0:
        # If no bottle or mug is found, query the image directly
        return image_patch.simple_query(""Are there any bottles or mugs that are not purple?"")
    for patch in bottle_patches + mug_patches:
        if not patch.verify_property(""bottle"", ""purple"") and not patch.verify_property(""mug"", ""purple""):
            return ""yes""
    return ""no""",0
2631593,Which place is it?,city,./data/gqa/../images/2412366.jpg,sidewalk,"def execute_command_2631593(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
12228864,Do you see any men to the right of the person that is in the living room?,no,./data/gqa/../images/2324040.jpg,yes,"def execute_command_12228864(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one living room patch
    image_patch = ImagePatch(image)
    living_room_patches = image_patch.find(""living room"")
    # Question assumes only one living room patch
    if len(living_room_patches) == 0:
        # If no living room is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    living_room_patch = living_room_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return ""no""
    man_patch = man_patches[0]
    if man_patch.horizontal_center > living_room_patch.horizontal_center:
        return ""yes""
    return ""no""",0
111054378,Is the small couch to the right or to the left of the bottle?,right,./data/gqa/../images/2386495.jpg,right,"def execute_command_111054378(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle is a bottle of wine
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    for couch_patch in couch_patches:
        bottle_patches = image_patch.find(""bottle"")
        for bottle_patch in bottle_patches:
            if bottle_patch.horizontal_center > couch_patch.horizontal_center:
                return ""left""
            else:
                return ""right""",1
9392411,Is the bottle to the right or to the left of the appliance on the left?,right,./data/gqa/../images/2323628.jpg,right,"def execute_command_9392411(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle is to the right of the appliance
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    for bottle_patch in bottle_patches:
        appliance_patches = image_patch.find(""appliance"")
        # Question assumes only one appliance patch
        if len(appliance_patches) == 0:
            # If no appliance is found, query the image directly
            return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
        appliance_patch = appliance_patches[0]
        if appliance_patch.horizontal_center < image_patch.horizontal_center:
            return ""right""
    return ""left""",1
16753829,What type of animal is sitting in the container in the bottom of the photo?,cat,./data/gqa/../images/2414356.jpg,cats,"def execute_command_16753829(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one container patch
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    container_patch = container_patches[0]
    animal_patches = container_patch.find(""animal"")
    if len(animal_patches) == 0:
        return ""no animal""
    return animal_patches[0].simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")",0
1345482,What is that train in front of?,wall,./data/gqa/../images/2404342.jpg,windows,"def execute_command_1345482(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"")",0
1527449,Are there cars to the right of the palm trees which are to the right of the girl?,yes,./data/gqa/../images/2363853.jpg,yes,"def execute_command_1527449(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    girl_patch = girl_patches[0]
    palm_tree_patches = image_patch.find(""palm tree"")
    if len(palm_tree_patches) == 0:
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    palm_tree_patch = palm_tree_patches[0]
    if palm_tree_patch.horizontal_center < girl_patch.horizontal_center:
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    for car_patch in car_patches:
        if car_patch.horizontal_center > palm_tree_patch.horizontal_center:
            return ""yes""
    return ""no""",1
459445,In which part is the silver device?,the top,./data/gqa/../images/2371279.jpg,left,"def execute_command_459445(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # silver device is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part is the silver device?"")",0
11786203,What is the man on?,skateboard,./data/gqa/../images/2333294.jpg,skateboard,"def execute_command_11786203(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man on?"")",1
5200013,Is there a brown door or chair?,no,./data/gqa/../images/2413903.jpg,yes,"def execute_command_5200013(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_brown_door = image_patch.exists(""brown door"")
    is_brown_chair = image_patch.exists(""brown chair"")
    return bool_to_yesno(is_brown_door or is_brown_chair)",0
131031372,What is the napkin in?,box,./data/gqa/../images/2363711.jpg,napkin dispenser,"def execute_command_131031372(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one napkin
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        return image_patch.simple_query(""What is the napkin in?"")
    return napkin_patches[0].simple_query(""What is the napkin in?"")",0
1241681,Are there any people behind the white dessert?,yes,./data/gqa/../images/2362038.jpg,yes,"def execute_command_1241681(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # dessert is a general term
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    people_patch = people_patches[0]
    dessert_patches = image_patch.find(""dessert"")
    # Question assumes only one dessert patch
    if len(dessert_patches) == 0:
        return ""no""
    for dessert_patch in dessert_patches:
        if people_patch.horizontal_center < dessert_patch.horizontal_center:
            return ""yes""
    return ""no""",1
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?,dog,./data/gqa/../images/2412382.jpg,dog,"def execute_command_8730954(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")",1
8553578,What is the Pikachu doing?,sitting,./data/gqa/../images/2376660.jpg,lying,"def execute_command_8553578(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one Pikachu
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the Pikachu doing?"")",0
16711804,"On which side is the car, the left or the right?",right,./data/gqa/../images/2398104.jpg,right,"def execute_command_16711804(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
5546271,What is on the large mountains?,monument,./data/gqa/../images/2387752.jpg,snow,"def execute_command_5546271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # mountain is a noun
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is on the large mountains?"")",0
5107295,What is in the sky?,kites,./data/gqa/../images/2329046.jpg,kite,"def execute_command_5107295(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (in, on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")",0
123768,What kind of watercraft is the fruit on?,boat,./data/gqa/../images/2410041.jpg,boat,"def execute_command_123768(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # fruit is on the watercraft
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of watercraft is the fruit on?"")",1
1827218,Is the bottle in the bottom of the image?,yes,./data/gqa/../images/2326413.jpg,no,"def execute_command_1827218(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle is a common object
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    if bottle_patches[0].vertical_center > image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",0
10938155,What color is the sky?,white,./data/gqa/../images/2392194.jpg,white,"def execute_command_10938155(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # sky is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")",1
4893512,Does the sail look white or red?,white,./data/gqa/../images/2321817.jpg,white,"def execute_command_4893512(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one sail patch
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    sail_patch = sail_patches[0]
    return sail_patch.best_text_match([""white"", ""red""])",1
3662784,Do you see either any traffic lights or cars?,yes,./data/gqa/../images/2384789.jpg,yes,"def execute_command_3662784(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # traffic light is a subset of car
    image_patch = ImagePatch(image)
    is_traffic_light = image_patch.exists(""traffic light"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_traffic_light or is_car)",1
15515711,Are there any girls to the right of the yellow helmet?,no,./data/gqa/../images/2402975.jpg,no,"def execute_command_15515711(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one yellow helmet
    image_patch = ImagePatch(image)
    yellow_helmet_patches = image_patch.find(""yellow helmet"")
    # Question assumes only one yellow helmet patch
    if len(yellow_helmet_patches) == 0:
        # If no yellow helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    yellow_helmet_patch = yellow_helmet_patches[0]
    girl_patches = image_patch.find(""girl"")
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center > yellow_helmet_patch.horizontal_center:
            return ""yes""
    return ""no""",1
6315316,Which kind of furniture is in front of the window?,chair,./data/gqa/../images/2401271.jpg,chair,"def execute_command_6315316(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one window
    image_patch = ImagePatch(image)
    window_patch = image_patch.find(""window"")[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > window_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is in front of the window?"")
    return image_patch.simple_query(""Which kind of furniture is in front of the window?"")",1
17736488,What appliance is to the left of the faucet?,oven,./data/gqa/../images/2343545.jpg,oven,"def execute_command_17736488(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one appliance and one faucet
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    faucet_patches = image_patch.find(""faucet"")
    if len(appliance_patches) == 0 or len(faucet_patches) == 0:
        return image_patch.simple_query(""What appliance is to the left of the faucet?"")
    appliance_patch = appliance_patches[0]
    faucet_patch = faucet_patches[0]
    if appliance_patch.horizontal_center < faucet_patch.horizontal_center:
        return appliance_patch.simple_query(""What appliance is to the left of the faucet?"")
    return faucet_patch.simple_query(""What appliance is to the left of the faucet?"")",1
41050828,What is the color of the jacket?,white,./data/gqa/../images/2386051.jpg,pink,"def execute_command_41050828(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the jacket
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].simple_query(""What is the color of the jacket?"")",0
610914,Is the green boat to the right or to the left of the wood house?,left,./data/gqa/../images/2404484.jpg,left,"def execute_command_610914(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one boat and one house
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    house_patches = image_patch.find(""house"")
    boat_patch = boat_patches[0]
    house_patch = house_patches[0]
    if boat_patch.horizontal_center > house_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
13158346,Is the woman in the bottom part of the picture?,yes,./data/gqa/../images/2368542.jpg,yes,"def execute_command_13158346(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",1
16318707,Are there either any colorful bikes or skateboards?,no,./data/gqa/../images/1593020.jpg,no,"def execute_command_16318707(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_colorful_bike = image_patch.exists(""colorful bike"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_colorful_bike or is_skateboard)",1
2805654,Is the bag to the right or to the left of the bench?,right,./data/gqa/../images/2367000.jpg,right,"def execute_command_2805654(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bag and one bench
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    bench_patches = image_patch.find(""bench"")
    if len(bag_patches) == 0 or len(bench_patches) == 0:
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    bag_patch = bag_patches[0]
    bench_patch = bench_patches[0]
    if bag_patch.horizontal_center > bench_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
15315607,What do you think is in the sky?,kite,./data/gqa/../images/2399821.jpg,kite,"def execute_command_15315607(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a PIL Image object
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"")",1
2995829,What color is the truck near the gas station?,white,./data/gqa/../images/2318396.jpg,yellow,"def execute_command_2995829(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the truck near the gas station?"")",0
12140940,"What are the headphones on, a sofa or a desk?",sofa,./data/gqa/../images/2359333.jpg,sofa,"def execute_command_12140940(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")",1
727533,Does the bun look brown and toasted?,no,./data/gqa/../images/2380474.jpg,yes,"def execute_command_727533(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one bun patch
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    bun_patch = bun_patches[0]
    return bool_to_yesno(bun_patch.verify_property(""bun"", ""brown"") and bun_patch.verify_property(""bun"", ""toasted""))",0
61044602,What is in the brown basket?,mangoes,./data/gqa/../images/2381908.jpg,mango,"def execute_command_61044602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the brown basket?"")",0
16827204,Is the marker different in color than the paper?,yes,./data/gqa/../images/713822.jpg,yes,"def execute_command_16827204(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    marker_patch = marker_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    return bool_to_yesno(marker_patch.verify_property(""marker"", ""different color than"") == paper_patch.verify_property(""paper"", ""color""))",1
1284539,Is there a racket to the right of the man on the right side?,no,./data/gqa/../images/2362041.jpg,no,"def execute_command_1284539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return ""no""
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no""",1
1257391,What place is this?,Error Ejecucion: ImagePatch.simple_query() missing 1 required positional argument: 'question',./data/gqa/../images/2391338.jpg,street,"def execute_command_1257391(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer to ""What is this?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query() # returns the answer to ""What is this?"" by default",0
16223517,What do you think is the color of the large device?,black,./data/gqa/../images/713330.jpg,black,"def execute_command_16223517(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What do you think is the color of the large device?"")
    return device_patches[0].simple_query(""What do you think is the color of the large device?"")",1
1024280,Does the shirt look long sleeved or sleeveless?,no,./data/gqa/../images/2332543.jpg,sleeveless,"def execute_command_1024280(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    return bool_to_yesno(shirt_patch.verify_property(""shirt"", ""long sleeved""))",0
2769463,Which kind of animal is lying in the chair?,dog,./data/gqa/../images/2320543.jpg,dog,"def execute_command_2769463(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    chair_patch = chair_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal lying in the chair?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is lying in the chair?"")
    return ""no animal is lying in the chair""",1
18503776,Is the white box to the right of the crate the chair is to the right of?,no,./data/gqa/../images/498069.jpg,no,"def execute_command_18503776(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one crate and one chair
    image_patch = ImagePatch(image)
    white_box_patches = image_patch.find(""white box"")
    crate_patches = image_patch.find(""crate"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one white box, crate, and chair patch
    if len(white_box_patches) == 0 or len(crate_patches) == 0 or len(chair_patches) == 0:
        # If no white box, crate, or chair is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    white_box_patch = white_box_patches[0]
    crate_patch = crate_patches[0]
    chair_patch = chair_patches[0]
    if white_box_patch.horizontal_center > crate_patch.horizontal_center and white_box_patch.horizontal_center > chair_patch.horizontal_center:
        return ""yes""
    return ""no""",1
3434581,Are there both a coffee table and a lamp?,no,./data/gqa/../images/2394519.jpg,yes,"def execute_command_3434581(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)",0
19201196,Is that flower pot made of clay?,no,./data/gqa/../images/2378173.jpg,yes,"def execute_command_19201196(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # clay is a material
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    # Question assumes only one flower pot patch
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return bool_to_yesno(flower_pot_patches[0].verify_property(""flower pot"", ""clay""))",0
191006281,Does the sky look clear and gray?,yes,./data/gqa/../images/2389688.jpg,yes,"def execute_command_191006281(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # clear and gray are properties
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""clear"") and image_patch.verify_property(""sky"", ""gray""))",1
681336,Do you see hats or gloves that are white?,no,./data/gqa/../images/2319126.jpg,yes,"def execute_command_681336(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_hat = image_patch.exists(""hat"")
    is_glove = image_patch.exists(""glove"")
    if is_hat or is_glove:
        return bool_to_yesno(image_patch.best_text_match([""white"", ""black""]))
    return ""no""",0
1300368,What is on the cabinet that is to the right of the keyboard?,printer,./data/gqa/../images/4900.jpg,printer,"def execute_command_1300368(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cabinet and one keyboard
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    keyboard_patches = image_patch.find(""keyboard"")
    # Question assumes only one cabinet and one keyboard patch
    if len(cabinet_patches) == 0 or len(keyboard_patches) == 0:
        # If no cabinet or keyboard is found, query the image directly
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    cabinet_patch = cabinet_patches[0]
    keyboard_patch = keyboard_patches[0]
    if cabinet_patch.horizontal_center > keyboard_patch.horizontal_center:
        return cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")",1
172394,What is the animal to the left of the tap called?,cat,./data/gqa/../images/2411058.jpg,cat,"def execute_command_172394(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # tap is a verb, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal to the left of the tap called?"")",1
738176,Is the chair on the right?,yes,./data/gqa/../images/2377028.jpg,yes,"def execute_command_738176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return image_patch.simple_query(""Is the chair on the right?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
4194919,Is the child on the right of the picture?,yes,./data/gqa/../images/2346160.jpg,no,"def execute_command_4194919(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    child_patch = child_patches[0]
    if child_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",0
3585327,Who is on the surfboard?,the boy,./data/gqa/../images/2342125.jpg,girl,"def execute_command_3585327(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard?"")",0
1711172,What size are the packages the candle is on top of?,small,./data/gqa/../images/2344916.jpg,small,"def execute_command_1711172(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a list of strings
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    for candle_patch in candle_patches:
        package_patches = image_patch.find(""package"")
        # Question assumes only one package patch
        if len(package_patches) == 0:
            return image_patch.simple_query(""What size are the packages the candle is on top of?"")
        package_patch = package_patches[0]
        return package_patch.best_text_match([""small"", ""medium"", ""large""])",1
4353895,Who is on the snowboard on the right?,the boy,./data/gqa/../images/2343238.jpg,people,"def execute_command_4353895(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one snowboard
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    for snowboard_patch in snowboard_patches:
        if snowboard_patch.horizontal_center > image_patch.horizontal_center:
            person_patches = image_patch.find(""person"")
            # Question assumes only one person patch
            if len(person_patches) == 0:
                return ""no""
            return person_patches[0].simple_query(""Who is on the snowboard on the right?"") # crop would include the person so keep it in the query
    return ""no""",0
17929304,What is the vehicle that is on the road?,truck,./data/gqa/../images/2322483.jpg,truck,"def execute_command_17929304(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle that is on the road?"")
    vehicle_patch = vehicle_patches[0]
    road_patches = image_patch.find(""road"")
    if len(road_patches) == 0:
        return image_patch.simple_query(""What is the vehicle that is on the road?"")
    for road_patch in road_patches:
        if road_patch.horizontal_center > vehicle_patch.horizontal_center:
            return vehicle_patch.simple_query(""What is the vehicle that is on the road?"") # crop would include the road so keep it in the query
    return vehicle_patch.simple_query(""What is the vehicle that is on the road?"")",1
1363574,What color is the crust?,brown,./data/gqa/../images/2379627.jpg,gold,"def execute_command_1363574(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bread patch
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return bread_patches[0].simple_query(""What color is the crust?"")",0
5672474,Is the plate to the left or to the right of the beer on the left?,right,./data/gqa/../images/2373095.jpg,right,"def execute_command_5672474(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one beer patch
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    for plate_patch in plate_patches:
        beer_patches = image_patch.find(""beer"")
        for beer_patch in beer_patches:
            if beer_patch.horizontal_center < plate_patch.horizontal_center:
                return ""left""
            else:
                return ""right""",1
11341284,What is the pattern of the mattress on the street?,plaid,./data/gqa/../images/2397107.jpg,checkered,"def execute_command_11341284(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one mattress
    image_patch = ImagePatch(image)
    mattress_patches = image_patch.find(""mattress"")
    if len(mattress_patches) == 0:
        return image_patch.simple_query(""What is the pattern of the mattress on the street?"")
    return mattress_patches[0].best_text_match([""stripes"", ""dots"", ""polka dots"", ""plaid"", ""chevrons"", ""herringbone"", ""floral"", ""geometric"", ""zig-zag"", ""other""]) # crop would include the pattern so keep it in the query",0
14192693,Are there any boys behind the fence?,yes,./data/gqa/../images/2355736.jpg,no,"def execute_command_14192693(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any boys behind the fence?"")
    for fence_patch in fence_patches:
        boy_patches = image_patch.find(""boy"")
        for boy_patch in boy_patches:
            if boy_patch.horizontal_center > fence_patch.horizontal_center:
                return ""yes""
    return ""no""",0
19203395,Is the white toilet paper to the right or to the left of the toilet?,left,./data/gqa/../images/2347431.jpg,left,"def execute_command_19203395(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one toilet and one toilet paper
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    toilet_patch = toilet_patches[0]
    toilet_paper_patches = image_patch.find(""toilet paper"")
    # Question assumes only one toilet paper patch
    if len(toilet_paper_patches) == 0:
        return ""no""
    toilet_paper_patch = toilet_paper_patches[0]
    if toilet_paper_patch.horizontal_center > toilet_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
1194938,Are there any airplanes in front of the building?,no,./data/gqa/../images/2377599.jpg,yes,"def execute_command_1194938(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # airplane is a noun, so go step by step
    image_patch = ImagePatch(image)
    airplane_patches = image_patch.find(""airplane"")
    # Question assumes only one airplane patch
    if len(airplane_patches) == 0:
        # If no airplane is found, query the image directly
        return image_patch.simple_query(""Are there any airplanes in front of the building?"")
    airplane_patch = airplane_patches[0]
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        return ""no""
    building_patch = building_patches[0]
    if airplane_patch.horizontal_center > building_patch.horizontal_center:
        return ""yes""
    return ""no""",0
5350205,How clean is the road that the car is on the side of?,no,./data/gqa/../images/2317789.jpg,clean,"def execute_command_5350205(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    car_patch = car_patches[0]
    road_patches = image_patch.find(""road"")
    if len(road_patches) == 0:
        return ""unknown""
    road_patch = road_patches[0]
    return road_patch.simple_query(""How clean is the road that the car is on the side of?"")",0
4256016,"In which part of the picture is the black van, the bottom or the top?",bottom,./data/gqa/../images/2382873.jpg,bottom,"def execute_command_4256016(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one van patch
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    van_patch = van_patches[0]
    if van_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
9179602,What is the person to the right of the fence doing?,skateboarding,./data/gqa/../images/2381259.jpg,skateboarding,"def execute_command_9179602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person and one fence
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    fence_patches = image_patch.find(""fence"")
    if len(person_patches) == 0 or len(fence_patches) == 0:
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    person_patch = person_patches[0]
    fence_patch = fence_patches[0]
    if person_patch.horizontal_center > fence_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the right of the fence doing?"")
    return image_patch.simple_query(""What is the person to the left of the fence doing?"")",1
16471124,Does the horse have a different color than the boot?,no,./data/gqa/../images/2353868.jpg,no,"def execute_command_16471124(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one horse and one boot
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    horse_patch = horse_patches[0]
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        return ""no""
    boot_patch = boot_patches[0]
    return bool_to_yesno(horse_patch.best_text_match([""red"", ""blue""]) != boot_patch.best_text_match([""red"", ""blue""]))",1
958247,Is the mouse to the right of a chair?,yes,./data/gqa/../images/2343793.jpg,yes,"def execute_command_958247(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the mouse to the right of a chair?"")",1
11179512,The basket made of plastic is what color?,blue,./data/gqa/../images/2399681.jpg,blue,"def execute_command_11179512(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one basket patch
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    return basket_patches[0].simple_query(""The basket made of plastic is what color?"")",1
8816272,Do you see any elephant to the left of the bird?,no,./data/gqa/../images/2375806.jpg,no,"def execute_command_8816272(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one elephant and one bird
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    bird_patches = image_patch.find(""bird"")
    if len(elephant_patches) == 0 or len(bird_patches) == 0:
        return ""no""
    for elephant_patch in elephant_patches:
        for bird_patch in bird_patches:
            if elephant_patch.horizontal_center < bird_patch.horizontal_center:
                return ""yes""
    return ""no""",1
11168592,What is the animal in front of the lamp?,horse,./data/gqa/../images/2318496.jpg,horse,"def execute_command_11168592(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in front of the lamp?"")",1
3568717,Who is wearing the jacket?,man,./data/gqa/../images/2405929.jpg,man,"def execute_command_3568717(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing the jacket?"")
    person_patch = person_patches[0]
    jacket_patches = image_patch.find(""jacket"")
    if len(jacket_patches) == 0:
        return image_patch.simple_query(""Who is wearing the jacket?"")
    jacket_patch = jacket_patches[0]
    if person_patch.horizontal_center > jacket_patch.horizontal_center:
        return image_patch.simple_query(""Who is wearing the jacket?"")
    return image_patch.simple_query(""Who is wearing the jacket?"")",1
7398502,What is the food to the left of the girl in the bottom of the photo?,sandwich,./data/gqa/../images/2333310.jpg,sandwich,"def execute_command_7398502(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    girl_patch = girl_patches[0]
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    food_patch = food_patches[0]
    if food_patch.horizontal_center < girl_patch.horizontal_center and food_patch.vertical_center > image_patch.vertical_center:
        return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    return image_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")",1
5145864,What is the device that the camera is in front of?,cell phone,./data/gqa/../images/2327025.jpg,phone,"def execute_command_5145864(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that the camera is in front of?"")",0
788143,Is the man on the surfboard?,yes,./data/gqa/../images/2410668.jpg,yes,"def execute_command_788143(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the surfboard?"")",1
15854501,What device has the same color as the device in the box?,iphone,./data/gqa/../images/2413508.jpg,screen,"def execute_command_15854501(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one device in the box
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    device_patch = device_patches[0]
    device_color = device_patch.simple_query(""What color is the device?"")
    device_patches = image_patch.find(""device"")
    for device_patch in device_patches:
        if device_patch.simple_query(""What color is the device?"") == device_color:
            return device_patch.simple_query(""What device has the same color as the device in the box?"")
    return ""no device found""",0
3228067,What is the child wearing?,blue jacket,./data/gqa/../images/2324724.jpg,skis,"def execute_command_3228067(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one child
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        return image_patch.simple_query(""What is the child wearing?"")
    return child_patches[0].simple_query(""What is the child wearing?"")",0
6817336,Is the blue sky behind a cathedral?,yes,./data/gqa/../images/2358376.jpg,yes,"def execute_command_6817336(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue sky behind a cathedral?"")",1
6347271,"In which part of the image is the yellow pepper, the bottom or the top?",bottom,./data/gqa/../images/2395361.jpg,bottom,"def execute_command_6347271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one yellow pepper
    image_patch = ImagePatch(image)
    yellow_pepper_patch = image_patch.find(""yellow pepper"")[0]
    if yellow_pepper_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
296230,What animal is the woman feeding?,elephant,./data/gqa/../images/2414858.jpg,elephant,"def execute_command_296230(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman and one animal
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    animal_patches = image_patch.find(""animal"")
    if len(woman_patches) == 0 or len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is the woman feeding?"")
    woman_patch = woman_patches[0]
    animal_patch = animal_patches[0]
    return animal_patch.simple_query(""What animal is the woman feeding?"") # crop would include the woman so keep it in the query",1
3427727,On which side is the bucket?,right,./data/gqa/../images/2361130.jpg,right,"def execute_command_3427727(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bucket
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    bucket_patch = bucket_patches[0]
    if bucket_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
31050314,Is the small chimney in the bottom part of the picture?,yes,./data/gqa/../images/2377037.jpg,yes,"def execute_command_31050314(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one chimney patch
    image_patch = ImagePatch(image)
    chimney_patches = image_patch.find(""chimney"")
    if len(chimney_patches) == 0:
        return ""no""
    chimney_patch = chimney_patches[0]
    if chimney_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    return ""no""",1
3503396,Are the pants purple?,yes,./data/gqa/../images/2340511.jpg,yes,"def execute_command_3503396(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    return bool_to_yesno(pants_patches[0].verify_property(""pants"", ""purple""))",1
11742862,Which kind of furniture is to the right of the paper towels?,cabinet,./data/gqa/../images/2344431.jpg,shelves,"def execute_command_11742862(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one paper towel patch
    image_patch = ImagePatch(image)
    paper_towel_patches = image_patch.find(""paper towel"")
    if len(paper_towel_patches) == 0:
        # If no paper towel is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    paper_towel_patch = paper_towel_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > paper_towel_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is to the right of the paper towels?"") # crop would include the paper towel so keep it in the query
    return ""no""",0
5891809,What kind of furniture is gray?,"Error Codigo: unterminated string literal (detected at line 9) (Codex, line 9)",./data/gqa/../images/2384647.jpg,table,"def execute_command_5891809(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.best_text_match([""chair"", ""table"", ""sofa"", ""bookshelf"", ""bed"", ""desk"", ""couch"", ""dresser"", ""wardrobe"", ""bookcase"", ""shelf"", ""stool"", ""bench"", ""table"", ""armchair"", ""coffee table"", ""end table"", ""nightstand"", ""dresser"", ""bookshelf"", ""bookcase"", ""shelf"", ""stool"", ""bench"", ""table"", ""armchair"", ""coffee table"", ""end table"", ""nightstand"", ""dresser"", ""bookshelf"", ""bookcase"", ""shelf"", ""stool"", ""bench"", ""table"", ""armchair"", ""coffee table"", ""end table"", ""nightstand"", ""dresser"", ""bookshelf"", ""bookcase"", ""shelf"", ""stool"", ""bench"", ""table"", ""armchair"", ""coffee table"", ""end table"", ""nightstand"", ""dresser"", ""bookshelf"", ""bookcase"", ""shelf"", ""stool"", ""bench"", ""table"", ""armchair"", ""coffee table"", ""end table"", ""nightstand"", ""dresser"", ""bookshelf"", ""bookcase",0
5370528,Is the hair white and long?,no,./data/gqa/../images/2389614.jpg,yes,"def execute_command_5370528(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    hair_patch = hair_patches[0]
    is_white = hair_patch.verify_property(""hair"", ""white"")
    is_long = hair_patch.verify_property(""hair"", ""long"")
    return bool_to_yesno(is_white and is_long)",0
781153,Do you see trains near the lamp post that looks white?,no,./data/gqa/../images/61557.jpg,no,"def execute_command_781153(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (near), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Do you see trains near the lamp post that looks white?"")",1
5543456,Is the container to the left of the person that wears bracelets?,no,./data/gqa/../images/2380680.jpg,yes,"def execute_command_5543456(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")",0
163134,What do you think is on the roof?,snow,./data/gqa/../images/2383884.jpg,snow,"def execute_command_163134(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one roof patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"")",1
5603075,Is the shoe white or brown?,brown,./data/gqa/../images/2328644.jpg,brown,"def execute_command_5603075(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shoe is a noun, so go step by step
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])",1
5511395,What is wrapped in paper?,hot dog,./data/gqa/../images/2373700.jpg,bagel,"def execute_command_5511395(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one object wrapped in paper
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wrapped in paper?"")",0
5611256,Are there any couches in the picture?,no,./data/gqa/../images/2352773.jpg,no,"def execute_command_5611256(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch""))",1
1162826,The man is in what?,an orange shirt,./data/gqa/../images/2334672.jpg,air,"def execute_command_1162826(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patch = image_patch.find(""man"")[0]
    return man_patch.simple_query(""The man is in what?"")",0
81020685,Which color is the small house?,white,./data/gqa/../images/2408787.jpg,white,"def execute_command_81020685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # color is a property
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    if house_patches[0].verify_property(""house"", ""small"") and house_patches[0].verify_property(""house"", ""color""):
        return house_patches[0].best_text_match([""red"", ""blue"", ""green""])
    return ""no""",1
19640724,Who is in the bathroom?,a man,./data/gqa/../images/2414682.jpg,man,"def execute_command_19640724(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"")",1
289960,Do you see a racket to the right of the boy that is looking at the tie?,no,./data/gqa/../images/2395760.jpg,no,"def execute_command_289960(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one boy and one tie
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    boy_patch = boy_patches[0]
    tie_patches = image_patch.find(""tie"")
    if len(tie_patches) == 0:
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    tie_patch = tie_patches[0]
    racket_patches = image_patch.find(""racket"")
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > boy_patch.horizontal_center and racket_patch.horizontal_center < tie_patch.horizontal_center:
            return ""yes""
    return ""no""",1
9957748,Does the hair appear to be long and brown?,yes,./data/gqa/../images/2374505.jpg,yes,"def execute_command_9957748(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # hair is a property of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the hair appear to be long and brown?"")
    return bool_to_yesno(person_patches[0].verify_property(""hair"", ""long and brown""))",1
21031610,What is the shoe that looks black and white resting on?,foot,./data/gqa/../images/2399342.jpg,skateboard,"def execute_command_21031610(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one shoe patch
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    if len(shoe_patches) == 0:
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    shoe_patch = shoe_patches[0]
    if shoe_patch.best_text_match([""black"", ""white""]) == ""black and white"":
        return shoe_patch.simple_query(""What is the shoe that looks black and white resting on?"") # crop would include the color so keep it in the query
    return shoe_patch.simple_query(""What is the shoe resting on?"")",0
12801921,What is the glass on?,table,./data/gqa/../images/2322304.jpg,coffee table,"def execute_command_12801921(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the glass on?"")",0
16243948,Is the white pillow under the black animal?,no,./data/gqa/../images/2386158.jpg,yes,"def execute_command_16243948(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one black animal and one white pillow
    image_patch = ImagePatch(image)
    black_animal_patches = image_patch.find(""black animal"")
    white_pillow_patches = image_patch.find(""white pillow"")
    if len(black_animal_patches) == 0 or len(white_pillow_patches) == 0:
        return ""no""
    black_animal_patch = black_animal_patches[0]
    white_pillow_patch = white_pillow_patches[0]
    if black_animal_patch.vertical_center > white_pillow_patch.vertical_center:
        return ""yes""
    return ""no""",0
457770,What kind of clothing is striped?,shirt,./data/gqa/../images/2402763.jpg,dress shirt,"def execute_command_457770(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one clothing patch
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing striped?"") == ""yes"":
            return clothing_patch.simple_query(""What kind of clothing is striped?"") # crop would include the stripes so keep it in the query
    return ""no clothing is striped""",0
12603153,Are the child's eyes blue and open?,yes,./data/gqa/../images/2410549.jpg,yes,"def execute_command_12603153(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one child patch
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Are the child's eyes blue and open?"")
    child_patch = child_patches[0]
    is_blue = child_patch.verify_property(""eyes"", ""blue"")
    is_open = child_patch.verify_property(""eyes"", ""open"")
    return bool_to_yesno(is_blue and is_open)",1
9480973,What is located on top of the tub?,shower,./data/gqa/../images/2382058.jpg,towel,"def execute_command_9480973(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is located on top of the tub?"")",0
8399764,Is the fork to the right or to the left of the white plate?,right,./data/gqa/../images/2359716.jpg,right,"def execute_command_8399764(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # fork and white plate are assumed to be the only objects of their type
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    fork_patch = fork_patches[0]
    white_plate_patches = image_patch.find(""white plate"")
    # Question assumes only one white plate patch
    if len(white_plate_patches) == 0:
        return ""no""
    white_plate_patch = white_plate_patches[0]
    if fork_patch.horizontal_center > white_plate_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
13420253,On which side of the photo is the chair?,left,./data/gqa/../images/2335072.jpg,left,"def execute_command_13420253(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
4747006,What is the label on?,milk,./data/gqa/../images/2362436.jpg,glass,"def execute_command_4747006(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one label
    image_patch = ImagePatch(image)
    label_patches = image_patch.find(""label"")
    if len(label_patches) == 0:
        return image_patch.simple_query(""What is the label on?"")
    label_patch = label_patches[0]
    return label_patch.simple_query(""What is the label on?"") # crop would include the label so keep it in the query",0
3322787,What bird is to the left of the person that is wearing a shirt?,sparrow,./data/gqa/../images/2358081.jpg,owl,"def execute_command_3322787(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")",0
6399594,On which side is the man?,left,./data/gqa/../images/2325614.jpg,right,"def execute_command_6399594(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
6930120,Is the glass bowl on the right or on the left?,left,./data/gqa/../images/2389120.jpg,left,"def execute_command_6930120(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one glass bowl
    image_patch = ImagePatch(image)
    glass_bowl_patches = image_patch.find(""glass bowl"")
    if len(glass_bowl_patches) == 0:
        # If no glass bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    glass_bowl_patch = glass_bowl_patches[0]
    if glass_bowl_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
12619961,What vehicles are to the left of the taxi?,buses,./data/gqa/../images/2383807.jpg,cars,"def execute_command_12619961(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one taxi
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    taxi_patch = taxi_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < taxi_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicles are to the left of the taxi?"")
    return ""no""",0
13362315,Is the basket on the shelf black and empty?,yes,./data/gqa/../images/2387101.jpg,yes,"def execute_command_13362315(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the shelf black and empty?"")
    basket_patch = basket_patches[0]
    is_on_shelf = basket_patch.simple_query(""Is the basket on the shelf?"")
    is_black = basket_patch.simple_query(""Is the basket black?"")
    is_empty = basket_patch.simple_query(""Is the basket empty?"")
    return bool_to_yesno(is_on_shelf and is_black and is_empty)",1
3830854,What is the animal that is standing next to the donkey that is standing in the hay?,sheep,./data/gqa/../images/2399312.jpg,sheep,"def execute_command_3830854(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal that is standing next to the donkey that is standing in the hay?"")",1
18382324,Is this a bed or a table?,yes,./data/gqa/../images/2377976.jpg,table,"def execute_command_18382324(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one patch
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_table = image_patch.exists(""table"")
    return bool_to_yesno(is_bed or is_table)",0
18104571,"Which animal is that, a bird or a cat?",cat,./data/gqa/../images/2369293.jpg,cat,"def execute_command_18104571(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    animal_patch = animal_patches[0]
    return animal_patch.best_text_match([""bird"", ""cat""])",1
2913379,Do you see any fence or pot?,no,./data/gqa/../images/2357474.jpg,yes,"def execute_command_2913379(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)",0
9294271,What is in front of the fence the zebra is kept in?,trees,./data/gqa/../images/2357869.jpg,tree,"def execute_command_9294271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")",0
10741434,What is the vegetable that is on top of the plate called?,no,./data/gqa/../images/2333173.jpg,broccoli,"def execute_command_10741434(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    plate_patch = plate_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > plate_patch.horizontal_center:
            return vegetable_patch.simple_query(""What is the vegetable that is on top of the plate called?"")
    return ""no""",0
765962,Where is the car?,on the street,./data/gqa/../images/2342119.jpg,street,"def execute_command_765962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the location of the car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Where is the car?"")
    return car_patches[0].simple_query(""Where is the car?"")",0
12399262,Is there either a yellow truck or airplane?,yes,./data/gqa/../images/2350062.jpg,yes,"def execute_command_12399262(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)",1
13964213,Is the man on the left of the photo?,no,./data/gqa/../images/2402240.jpg,no,"def execute_command_13964213(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the left of the photo?"")
    man_patch = man_patches[0]
    if man_patch.left < image_patch.left:
        return ""yes""
    return ""no""",1
16171369,What is covered in the snow?,skis,./data/gqa/../images/2346375.jpg,ground,"def execute_command_16171369(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"")",0
181055844,On which side is the plastic bottle?,left,./data/gqa/../images/2367436.jpg,left,"def execute_command_181055844(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bottle
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.left < image_patch.left + (image_patch.right - image_patch.left) / 2:
        return ""left""
    else:
        return ""right""",1
5858491,Do you see any ropes on the fence that is on the left of the picture?,no,./data/gqa/../images/1409.jpg,no,"def execute_command_5858491(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    fence_patch = fence_patches[0]
    rope_patches = image_patch.find(""rope"")
    # Question assumes only one rope patch
    if len(rope_patches) == 0:
        return ""no""
    for rope_patch in rope_patches:
        if rope_patch.horizontal_center < fence_patch.horizontal_center:
            return ""yes""
    return ""no""",1
17834539,Are there any lamps in the scene?,no,./data/gqa/../images/2399386.jpg,no,"def execute_command_17834539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp""))",1
15658176,Who is wearing a helmet?,the man,./data/gqa/../images/2404190.jpg,woman,"def execute_command_15658176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing a helmet?"")
    person_patch = person_patches[0]
    helmet_patches = image_patch.find(""helmet"")
    if len(helmet_patches) == 0:
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.simple_query(""Who is wearing a helmet?"")
    return person_patch.simple_query(""Who is wearing a helmet?"")",0
14372400,Does that coat have red color?,no,./data/gqa/../images/2344615.jpg,no,"def execute_command_14372400(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one coat patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red""))",1
411886,Are there any curtains or blankets in this scene?,no,./data/gqa/../images/2372006.jpg,yes,"def execute_command_411886(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)",0
16921850,What is the item of furniture to the left of the remote that the man is holding called?,entertainment center,./data/gqa/../images/2378471.jpg,bookcase,"def execute_command_16921850(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    remote_patches = image_patch.find(""remote"")
    # Question assumes only one remote patch
    if len(remote_patches) == 0:
        return ""no""
    remote_patch = remote_patches[0]
    if remote_patch.horizontal_center < man_patch.horizontal_center:
        return ""no""
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return ""no""
    furniture_patch = furniture_patches[0]
    if furniture_patch.horizontal_center < remote_patch.horizontal_center:
        return furniture_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    return ""no""",0
51039491,Is the fence black or red?,black,./data/gqa/../images/2416432.jpg,black,"def execute_command_51039491(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    fence_patch = fence_patches[0]
    return fence_patch.best_text_match([""black"", ""red""])",1
7425912,What animal is standing in the field?,elephant,./data/gqa/../images/2388942.jpg,elephant,"def execute_command_7425912(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one field
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is standing in the field?"")",1
13136338,What animal is in front of the dog which is to the right of the bird?,horse,./data/gqa/../images/2405555.jpg,horse,"def execute_command_13136338(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bird, dog, and animal
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    bird_patch = bird_patches[0]
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        return ""no""
    dog_patch = dog_patches[0]
    if dog_patch.horizontal_center > bird_patch.horizontal_center:
        animal_patches = image_patch.find(""animal"")
        # Question assumes only one animal patch
        if len(animal_patches) == 0:
            return ""no""
        return animal_patches[0].simple_query(""What animal is in front of the dog which is to the right of the bird?"")
    return ""no""",1
3775066,Which color are the cabinets in the bottom of the picture?,blue,./data/gqa/../images/2379723.jpg,blue,"def execute_command_3775066(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # color is a property
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.vertical_center > image_patch.vertical_center:
        return cabinet_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    else:
        return cabinet_patch.simple_query(""Which color are the cabinets in the top of the picture?"")",1
17206239,Is the happy girl to the right of a player?,yes,./data/gqa/../images/2413307.jpg,no,"def execute_command_17206239(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # player is a general term, so ask directly
    image_patch = ImagePatch(image)
    happy_girl_patches = image_patch.find(""happy girl"")
    # Question assumes only one happy girl patch
    if len(happy_girl_patches) == 0:
        # If no happy girl is found, query the image directly
        return image_patch.simple_query(""Is the happy girl to the right of a player?"")
    for happy_girl_patch in happy_girl_patches:
        player_patches = image_patch.find(""player"")
        for player_patch in player_patches:
            if player_patch.horizontal_center > happy_girl_patch.horizontal_center:
                return ""yes""
    return ""no""",0
2992517,"What piece of furniture is not wooden, the table or the chair?",neither,./data/gqa/../images/2400911.jpg,chair,"def execute_command_2992517(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one table and one chair
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one table and one chair patch
    if len(table_patches) == 0 or len(chair_patches) == 0:
        # If no table or chair is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    table_patch = table_patches[0]
    chair_patch = chair_patches[0]
    is_table_wooden = table_patch.verify_property(""table"", ""wooden"")
    is_chair_wooden = chair_patch.verify_property(""chair"", ""wooden"")
    if not is_table_wooden:
        return ""table""
    elif not is_chair_wooden:
        return ""chair""
    else:
        return ""neither""",0
1827558,Which side of the image is the kettle on?,right,./data/gqa/../images/2321180.jpg,right,"def execute_command_1827558(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    if kettle_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
2785208,Where is the man?,in the ocean,./data/gqa/../images/2398401.jpg,beach,"def execute_command_2785208(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the location of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    return man_patches[0].simple_query(""Where is the man?"")",0
6623967,Is the baby near the countertop chewing a computer mouses?,no,./data/gqa/../images/2319542.jpg,no,"def execute_command_6623967(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # TODO: this is a very specific query
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouses?"")
    baby_patch = baby_patches[0]
    is_near_countertop = baby_patch.simple_query(""Is the baby near the countertop?"") == ""yes""
    is_chewing_mouse = baby_patch.simple_query(""Is the baby chewing a computer mouse?"") == ""yes""
    return bool_to_yesno(is_near_countertop and is_chewing_mouse)",1
12804807,Is the small bottle open or closed?,open,./data/gqa/../images/2402996.jpg,open,"def execute_command_12804807(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle is a container
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    bottle_patch = bottle_patches[0]
    return bottle_patch.simple_query(""Is the bottle open or closed?"") # crop would include the bottle so keep it in the query",1
18437691,Is the clock small or large?,large,./data/gqa/../images/2380137.jpg,large,"def execute_command_18437691(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one clock patch
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    clock_patch = clock_patches[0]
    return clock_patch.best_text_match([""small"", ""large""])",1
9482318,Are there either any glasses or bottles in this photo?,yes,./data/gqa/../images/2383551.jpg,no,"def execute_command_9482318(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_glasses = image_patch.exists(""glasses"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glasses or is_bottle)",0
12362819,Is the sky blue or dark?,dark,./data/gqa/../images/2335554.jpg,dark,"def execute_command_12362819(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # sky is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky blue or dark?"")",1
171054254,What is the piece of furniture to the right of the shelf the cup is on called?,I don't know,./data/gqa/../images/713692.jpg,bookshelf,"def execute_command_171054254(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one shelf and one cup
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one shelf and one cup patch
    if len(shelf_patches) == 0 or len(cup_patches) == 0:
        # If no shelf or cup is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    shelf_patch = shelf_patches[0]
    cup_patch = cup_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > shelf_patch.horizontal_center and furniture_patch.horizontal_center < cup_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")
    return ""I don't know""",0
1416636,Are there both bridges and chandeliers in this photograph?,no,./data/gqa/../images/2377557.jpg,no,"def execute_command_1416636(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)",1
1997041,"Which side is the car on, the left or the right?",right,./data/gqa/../images/2355723.jpg,right,"def execute_command_1997041(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
6110985,Is there any plate or orange in the photo?,yes,./data/gqa/../images/2361774.jpg,yes,"def execute_command_6110985(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)",1
612894,Do you see any doors?,no,./data/gqa/../images/2358938.jpg,yes,"def execute_command_612894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""door""))",0
13562221,What's the bear on?,rocks,./data/gqa/../images/2360312.jpg,rock,"def execute_command_13562221(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the bear on?"")",0
9536851,Is the woman in front of the trees holding scissors?,no,./data/gqa/../images/2357907.jpg,no,"def execute_command_9536851(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (in front of, holding, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")",1
9682405,What is on the machine?,label,./data/gqa/../images/2353763.jpg,control panel,"def execute_command_9682405(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one machine
    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    if len(machine_patches) == 0:
        return image_patch.simple_query(""What is on the machine?"")
    return machine_patches[0].simple_query(""What is on the machine?"")",0
8649435,What is on the white wall?,newspaper,./data/gqa/../images/2340495.jpg,picture,"def execute_command_8649435(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"")",0
12487033,Does the logo look red?,no,./data/gqa/../images/2315954.jpg,no,"def execute_command_12487033(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""logo"", ""red""))",1
14301289,What type of vehicle is to the left of the white vehicle?,bus,./data/gqa/../images/2362109.jpg,bus,"def execute_command_14301289(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one white vehicle
    image_patch = ImagePatch(image)
    white_vehicle_patches = image_patch.find(""white vehicle"")
    # Question assumes only one white vehicle patch
    if len(white_vehicle_patches) == 0:
        # If no white vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    for white_vehicle_patch in white_vehicle_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < white_vehicle_patch.horizontal_center:
                return vehicle_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"") # crop would include the vehicle so keep it in the query
    # If no vehicle is to the left of the white vehicle, query the image directly
    return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")",1
523976,Which kind of vehicle is large?,train,./data/gqa/../images/2318853.jpg,train,"def execute_command_523976(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is large?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.simple_query(""Is the vehicle large?"") == ""yes"":
            return vehicle_patch.simple_query(""Which kind of vehicle is large?"") # crop would include the size so keep it in the query
    return ""no vehicle is large""",1
3423213,Who is in front of the trees?,the man,./data/gqa/../images/2361006.jpg,family,"def execute_command_3423213(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"")",0
18107197,Is the ottoman to the right or to the left of the brown chair?,left,./data/gqa/../images/2411038.jpg,right,"def execute_command_18107197(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one brown chair
    image_patch = ImagePatch(image)
    ottoman_patches = image_patch.find(""ottoman"")
    brown_chair_patches = image_patch.find(""brown chair"")
    if len(ottoman_patches) == 0 or len(brown_chair_patches) == 0:
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    ottoman_patch = ottoman_patches[0]
    brown_chair_patch = brown_chair_patches[0]
    if ottoman_patch.horizontal_center > brown_chair_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",0
5716578,Is there a laptop on the bed near the magazines?,no,./data/gqa/../images/2386029.jpg,no,"def execute_command_5716578(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")",1
8215791,Is the porcelain toilet to the left or to the right of the small trash can?,right,./data/gqa/../images/2367752.jpg,right,"def execute_command_8215791(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one porcelain toilet and one small trash can
    image_patch = ImagePatch(image)
    porcelain_toilet_patches = image_patch.find(""porcelain toilet"")
    small_trash_can_patches = image_patch.find(""small trash can"")
    if len(porcelain_toilet_patches) == 0 or len(small_trash_can_patches) == 0:
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    porcelain_toilet_patch = porcelain_toilet_patches[0]
    small_trash_can_patch = small_trash_can_patches[0]
    if porcelain_toilet_patch.horizontal_center < small_trash_can_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
17528455,What is in front of the wall?,chair,./data/gqa/../images/2410790.jpg,chair,"def execute_command_17528455(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the wall?"")",1
4896890,Do the goggles and the gloves have a different colors?,no,./data/gqa/../images/2323940.jpg,yes,"def execute_command_4896890(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # goggles and gloves are assumed to be found
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one goggles and one gloves patch
    if len(goggles_patches) == 0 or len(gloves_patches) == 0:
        # If no goggles or gloves are found, query the image directly
        return image_patch.simple_query(""Do the goggles and the gloves have a different colors?"")
    goggles_patch = goggles_patches[0]
    gloves_patch = gloves_patches[0]
    return bool_to_yesno(goggles_patch.verify_property(""goggles"", ""color"") != gloves_patch.verify_property(""gloves"", ""color""))",0
947724,Is there any purple pillow or kite in this photograph?,yes,./data/gqa/../images/2363706.jpg,yes,"def execute_command_947724(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_purple_pillow = image_patch.exists(""purple pillow"")
    is_purple_kite = image_patch.exists(""purple kite"")
    return bool_to_yesno(is_purple_pillow or is_purple_kite)",1
5679522,"What are the people to the right of the man doing, standing or sitting?",standing,./data/gqa/../images/2344481.jpg,sitting,"def execute_command_5679522(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return ""no""
    people_patch = people_patches[0]
    if people_patch.horizontal_center > man_patch.horizontal_center:
        return people_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    return ""no""",0
15492262,Which kind of furniture is white?,"Error Codigo: unterminated string literal (detected at line 9) (Codex, line 9)",./data/gqa/../images/2404401.jpg,bed,"def execute_command_15492262(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.best_text_match([""white"", ""black"", ""brown"", ""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""gray"", ""orange"", ""pink"", ""turquoise"", ""silver"", ""gold"", ""beige"", ""tan"", ""ivory"", ""maroon"", ""navy"", ""olive"", ""lavender"", ""teal"", ""coral"", ""salmon"", ""chocolate"", ""plum"", ""fuchsia"", ""magenta"", ""crimson"", ""scarlet"", ""burgundy"", ""charcoal"", ""grayish"", ""brownish"", ""whitish"", ""blackish"", ""bluish"", ""greenish"", ""yellowish"", ""reddish"", ""purplish"", ""grayish"", ""brownish"", ""whitish"", ""blackish"", ""bluish"", ""greenish"", ""yellowish"", ""reddish"", ""purplish"", ""grayish"", ""brownish"", ""whitish"", ""blackish"", ""bluish"", ""greenish"", ""yellowish"", ""reddish"", ""purplish"", ""grayish"", ""brownish"", ""whit",0
151032547,Is the bear on the right side?,yes,./data/gqa/../images/2362719.jpg,yes,"def execute_command_151032547(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bear patch
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    bear_patch = bear_patches[0]
    if bear_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
5698674,Are there either any planters or benches?,no,./data/gqa/../images/2345759.jpg,no,"def execute_command_5698674(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_planters = image_patch.exists(""planter"")
    is_benches = image_patch.exists(""bench"")
    return bool_to_yesno(is_planters or is_benches)",1
19397103,What is the person that is standing staring at?,laptop,./data/gqa/../images/2362477.jpg,display,"def execute_command_19397103(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (staring at), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person that is standing staring at?"")",0
11630681,What is the color of the necklace?,blue,./data/gqa/../images/2368188.jpg,blue,"def execute_command_11630681(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the necklace
    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    # Question assumes only one necklace patch
    if len(necklace_patches) == 0:
        # If no necklace is found, query the image directly
        return image_patch.simple_query(""What is the color of the necklace?"")
    return necklace_patches[0].simple_query(""What is the color of the necklace?"")",1
248245,Is the table to the left or to the right of the fence?,left,./data/gqa/../images/2399658.jpg,left,"def execute_command_248245(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one table and one fence
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    fence_patches = image_patch.find(""fence"")
    if len(table_patches) == 0 or len(fence_patches) == 0:
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    table_patch = table_patches[0]
    fence_patch = fence_patches[0]
    if table_patch.horizontal_center < fence_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
837033,Are there round windows or doors?,no,./data/gqa/../images/2365264.jpg,no,"def execute_command_837033(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # round windows or doors
    image_patch = ImagePatch(image)
    is_round_window = image_patch.exists(""round window"")
    is_round_door = image_patch.exists(""round door"")
    return bool_to_yesno(is_round_window or is_round_door)",1
5249150,Are there any bears or napkins in the picture?,no,./data/gqa/../images/2384131.jpg,no,"def execute_command_5249150(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)",1
13908598,What kind of vehicle is to the left of the person?,van,./data/gqa/../images/2368544.jpg,cars,"def execute_command_13908598(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    person_patch = person_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < person_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"") # crop would include the vehicle so keep it in the query
    return ""no vehicle to the left of the person""",0
61006749,Who is dressed in pink?,the girl,./data/gqa/../images/2343256.jpg,girls,"def execute_command_61006749(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is dressed in pink?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Who is dressed in pink?"")",0
6122955,Does the pillow have yellow color?,no,./data/gqa/../images/2395059.jpg,no,"def execute_command_6122955(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return bool_to_yesno(pillow_patches[0].verify_property(""pillow"", ""yellow""))",1
6861738,Is the old woman to the right or to the left of the faucet?,right,./data/gqa/../images/2386261.jpg,right,"def execute_command_6861738(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one old woman and one faucet
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    faucet_patches = image_patch.find(""faucet"")
    if len(old_woman_patches) == 0 or len(faucet_patches) == 0:
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    old_woman_patch = old_woman_patches[0]
    faucet_patch = faucet_patches[0]
    if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
15833048,Which kind of animal is on the road?,cow,./data/gqa/../images/2352085.jpg,cow,"def execute_command_15833048(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is on the road?"")
    return animal_patches[0].simple_query(""Which kind of animal is on the road?"")",1
9524339,What animal is large?,dog,./data/gqa/../images/2373158.jpg,dog,"def execute_command_9524339(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    animal_patch = animal_patches[0]
    return animal_patch.simple_query(""What animal is large?"")",1
18255749,How clean are the sheets the pillow is to the right of?,clean,./data/gqa/../images/2378355.jpg,clean,"def execute_command_18255749(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    sheets_patches = image_patch.find(""sheets"")
    # Question assumes only one sheets patch
    if len(sheets_patches) == 0:
        return ""unknown""
    sheets_patch = sheets_patches[0]
    if pillow_patch.horizontal_center > sheets_patch.horizontal_center:
        return sheets_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    return sheets_patch.simple_query(""How clean are the sheets the pillow is to the left of?"")",1
19797097,What's the man wearing?,orange shirt,./data/gqa/../images/1498.jpg,coat,"def execute_command_19797097(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")",0
6899090,Is the man to the right or to the left of the appliance that looks white?,left,./data/gqa/../images/2396386.jpg,right,"def execute_command_6899090(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one appliance patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    appliance_patch = appliance_patches[0]
    if appliance_patch.simple_query(""Is the appliance white?"") == ""yes"":
        if man_patch.horizontal_center > appliance_patch.horizontal_center:
            return ""right""
        else:
            return ""left""
    return ""left""",0
3357701,Does the dog to the right of the other dog have white color?,no,./data/gqa/../images/2380239.jpg,yes,"def execute_command_3357701(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    for i, dog_patch in enumerate(dog_patches):
        if i == 0:
            continue
        if dog_patch.horizontal_center > dog_patches[i-1].horizontal_center:
            return bool_to_yesno(dog_patch.verify_property(""dog"", ""white""))
    return ""no""",0
2829418,What's the girl holding?,a kite,./data/gqa/../images/2381595.jpg,kite,"def execute_command_2829418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return image_patch.simple_query(""What's the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What's the girl holding?"")",1
15930109,Which kind of vehicle is blue?,car,./data/gqa/../images/2382038.jpg,car,"def execute_command_15930109(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    return vehicle_patches[0].simple_query(""Which kind of vehicle is blue?"")",1
1525382,What type of vegetable is on the food with the cheese?,peppers,./data/gqa/../images/2363859.jpg,pepper,"def execute_command_1525382(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    food_patch = food_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > food_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is on the food with the cheese?"")
    return ""no""",0
8548980,Are there either players or hand soaps?,yes,./data/gqa/../images/2348943.jpg,no,"def execute_command_8548980(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)",0
4438348,"Which kind of food is not made, the sandwich or the croissant?",yes,./data/gqa/../images/2405611.jpg,croissant,"def execute_command_4438348(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one sandwich and one croissant
    image_patch = ImagePatch(image)
    sandwich_patch = image_patch.find(""sandwich"")
    croissant_patch = image_patch.find(""croissant"")
    if len(sandwich_patch) == 0 or len(croissant_patch) == 0:
        # If no sandwich or croissant is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    return bool_to_yesno(sandwich_patch[0].verify_property(""sandwich"", ""made"") and croissant_patch[0].verify_property(""croissant"", ""made""))",0
6423906,Which kind of food is on the plate?,cake,./data/gqa/../images/2414271.jpg,sausage,"def execute_command_6423906(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    plate_patch = plate_patches[0]
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        return image_patch.simple_query(""Which kind of food is on the plate?"")
    food_patch = food_patches[0]
    return food_patch.best_text_match([""pizza"", ""cake"", ""ice cream""]) # crop would include the food so keep it in the query",0
1993231,Are the animals in the image of different types?,yes,./data/gqa/../images/2385977.jpg,yes,"def execute_command_1993231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Are the animals in the image of different types?"")
    for i in range(len(animal_patches)):
        for j in range(i+1, len(animal_patches)):
            if animal_patches[i].simple_query(""What type of animal is this?"") != animal_patches[j].simple_query(""What type of animal is this?""):
                return ""yes""
    return ""no""",1
13949656,Are there any people to the left of the tray?,yes,./data/gqa/../images/1592103.jpg,no,"def execute_command_13949656(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one tray
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no""",0
184032,Does the fresh pineapple appear to be ripe?,yes,./data/gqa/../images/2328765.jpg,yes,"def execute_command_184032(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pineapple patch
    image_patch = ImagePatch(image)
    pineapple_patch = image_patch.find(""fresh pineapple"")
    if len(pineapple_patch) == 0:
        return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")
    return bool_to_yesno(pineapple_patch[0].verify_property(""fresh pineapple"", ""ripe""))",1
9392591,Are there chairs or smoothies?,no,./data/gqa/../images/2323628.jpg,no,"def execute_command_9392591(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one chair or smoothie
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)",1
4285170,Which kind of animal is to the right of the sheep?,cow,./data/gqa/../images/2374871.jpg,cow,"def execute_command_4285170(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one sheep patch
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    sheep_patch = sheep_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > sheep_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is to the right of the sheep?"") # crop would include the sheep so keep it in the query
    return ""no animal to the right of the sheep""",1
9896138,Are there any boxes to the left of the screen in the picture?,no,./data/gqa/../images/2379471.jpg,no,"def execute_command_9896138(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a PIL Image object
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are there any boxes to the left of the screen in the picture?"")
    for box_patch in box_patches:
        if box_patch.left < image_patch.left:
            return ""yes""
    return ""no""",1
1400333,What do you think is the man on?,skateboard,./data/gqa/../images/2345833.jpg,skateboard,"def execute_command_1400333(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the man on?"")",1
13105327,Is the boot white or orange?,orange,./data/gqa/../images/2380045.jpg,orange,"def execute_command_13105327(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one boot patch
    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    return boot_patches[0].best_text_match([""white"", ""orange""])",1
3659880,Does the wood boat have silver color?,no,./data/gqa/../images/2411226.jpg,no,"def execute_command_3659880(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one boat patch
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""Does the wood boat have silver color?"")
    return bool_to_yesno(boat_patches[0].verify_property(""wood boat"", ""silver""))",1
1827802,Is the red pot on the appliance to the right of the mixer?,no,./data/gqa/../images/2321180.jpg,yes,"def execute_command_1827802(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one appliance patch
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    red_pot_patch = red_pot_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        return ""no""
    appliance_patch = appliance_patches[0]
    mixer_patches = image_patch.find(""mixer"")
    # Question assumes only one mixer patch
    if len(mixer_patches) == 0:
        return ""no""
    mixer_patch = mixer_patches[0]
    if appliance_patch.horizontal_center > mixer_patch.horizontal_center and red_pot_patch.verify_property(""red pot"", ""on"") and red_pot_patch.verify_property(""red pot"", ""appliance""):
        return ""yes""
    return ""no""",0
14809102,The phone that is in front of the camera is of what color?,white,./data/gqa/../images/2390981.jpg,white,"def execute_command_14809102(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one camera patch
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # Question assumes only one phone patch
    if len(phone_patches) == 0:
        # If no phone is found, query the image directly
        return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")
    for phone_patch in phone_patches:
        if phone_patch.simple_query(""Is the phone in front of the camera?"") == ""yes"":
            return phone_patch.simple_query(""What color is the phone?"")
    # If no phone is in front of the camera, query the image directly
    return image_patch.simple_query(""The phone that is in front of the camera is of what color?"")",1
61001545,What type of food is to the left of the silver spoon?,broccoli,./data/gqa/../images/2374409.jpg,cheese,"def execute_command_61001545(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one silver spoon
    image_patch = ImagePatch(image)
    silver_spoon_patches = image_patch.find(""silver spoon"")
    # Question assumes only one silver spoon patch
    if len(silver_spoon_patches) == 0:
        # If no silver spoon is found, query the image directly
        return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")
    for silver_spoon_patch in silver_spoon_patches:
        food_patches = image_patch.find(""food"")
        for food_patch in food_patches:
            if food_patch.horizontal_center < silver_spoon_patch.horizontal_center:
                return food_patch.simple_query(""What type of food is to the left of the silver spoon?"") # crop would include the food so keep it in the query
    # If no food is to the left of the silver spoon, query the image directly
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")",0
799463,Are there both a window and a door in the picture?,no,./data/gqa/../images/2361911.jpg,no,"def execute_command_799463(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",1
11260725,Does the water have small size and white color?,no,./data/gqa/../images/2378779.jpg,no,"def execute_command_11260725(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # water is a noun, so go step by step
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Does the water have small size and white color?"")
    water_patch = water_patches[0]
    is_small = water_patch.verify_property(""water"", ""small"")
    is_white = water_patch.verify_property(""water"", ""white"")
    return bool_to_yesno(is_small and is_white)",1
2397653,Are there any fences that are white?,yes,./data/gqa/../images/2358708.jpg,yes,"def execute_command_2397653(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are there any fences that are white?"")
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""yes""
    return ""no""",1
1554603,Who is holding the animal?,the boy,./data/gqa/../images/2349439.jpg,boy,"def execute_command_1554603(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    animal_patch = animal_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > animal_patch.horizontal_center:
            return person_patch.simple_query(""Who is holding the animal?"")
    return ""no one""",1
11606818,Is the man to the right or to the left of the people the stroller is to the right of?,left,./data/gqa/../images/2367450.jpg,left,"def execute_command_11606818(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")",1
8988476,What kind of furniture is presented in this photo?,chair,./data/gqa/../images/2386661.jpg,chair,"def execute_command_8988476(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What kind of furniture is presented in this photo?"")
    return furniture_patches[0].simple_query(""What kind of furniture is presented in this photo?"")",1
10695214,What is the man with the backpack holding?,suitcase,./data/gqa/../images/2371579.jpg,cell phone,"def execute_command_10695214(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    backpack_patches = image_patch.find(""backpack"")
    if len(backpack_patches) == 0:
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    for backpack_patch in backpack_patches:
        if backpack_patch.horizontal_center > man_patch.horizontal_center:
            return man_patch.simple_query(""What is the man with the backpack holding?"") # crop would include the backpack so keep it in the query
    return image_patch.simple_query(""What is the man with the backpack holding?"")",0
91058050,Are there both mouse pads and computer mice in the photograph?,yes,./data/gqa/../images/2371684.jpg,yes,"def execute_command_91058050(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_computer_mouse = image_patch.exists(""computer mouse"")
    return bool_to_yesno(is_mouse_pad and is_computer_mouse)",1
1972064,Is the person in front of the tree wearing jeans?,no,./data/gqa/../images/286080.jpg,yes,"def execute_command_1972064(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (in front of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the person in front of the tree wearing jeans?"")",0
167162,Is there a bike to the right of the purse that is to the right of the woman?,no,./data/gqa/../images/2351365.jpg,yes,"def execute_command_167162(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman, purse, and bike
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    woman_patch = woman_patches[0]
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        return ""no""
    purse_patch = purse_patches[0]
    bike_patches = image_patch.find(""bike"")
    # Question assumes only one bike patch
    if len(bike_patches) == 0:
        return ""no""
    bike_patch = bike_patches[0]
    if bike_patch.horizontal_center > purse_patch.horizontal_center and purse_patch.horizontal_center > woman_patch.horizontal_center:
        return ""yes""
    return ""no""",0
1695388,Who is wearing a shirt?,the man,./data/gqa/../images/2386308.jpg,guy,"def execute_command_1695388(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing a shirt?"")
    person_patch = person_patches[0]
    is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
    if is_wearing_shirt:
        return person_patch.simple_query(""Who is wearing a shirt?"")
    return ""no one""",0
10960149,Is the woman to the left or to the right of the man in the bottom?,right,./data/gqa/../images/2347450.jpg,right,"def execute_command_10960149(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man and one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    if len(woman_patches) == 0 or len(man_patches) == 0:
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    woman_patch = woman_patches[0]
    man_patch = man_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
16921984,What is the bent man to the right of the other men doing?,no,./data/gqa/../images/2378471.jpg,posing,"def execute_command_16921984(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bent man
    image_patch = ImagePatch(image)
    bent_man_patches = image_patch.find(""bent man"")
    # Question assumes only one bent man patch
    if len(bent_man_patches) == 0:
        # If no bent man is found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    bent_man_patch = bent_man_patches[0]
    other_man_patches = image_patch.find(""man"")
    # Question assumes only one other man patch
    if len(other_man_patches) == 0:
        return ""no""
    other_man_patch = other_man_patches[0]
    if bent_man_patch.horizontal_center > other_man_patch.horizontal_center:
        return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return ""no""",0
12175564,What animal are the men to the right of the girl leading?,horse,./data/gqa/../images/2326674.jpg,cows,"def execute_command_12175564(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    girl_patch = girl_patches[0]
    men_patches = image_patch.find(""men"")
    # Question assumes only one men patch
    if len(men_patches) == 0:
        return ""no""
    men_patch = men_patches[0]
    if men_patch.horizontal_center > girl_patch.horizontal_center:
        return men_patch.best_text_match([""dog"", ""cat"", ""horse""])
    return ""no""",0
1219606,On which side of the image is the house?,left,./data/gqa/../images/2366688.jpg,left,"def execute_command_1219606(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    if house_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
1770499,Is the black suitcase to the right or to the left of the person on the left?,right,./data/gqa/../images/1159718.jpg,right,"def execute_command_1770499(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person on the left
    image_patch = ImagePatch(image)
    black_suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one black_suitcase patch
    if len(black_suitcase_patches) == 0:
        # If no black_suitcase is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    for black_suitcase_patch in black_suitcase_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
        person_patch = person_patches[0]
        if black_suitcase_patch.horizontal_center > person_patch.horizontal_center:
            return ""right""
        else:
            return ""left""",1
5282406,Is the pot to the left of a chair?,yes,./data/gqa/../images/2401498.jpg,no,"def execute_command_5282406(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pot and one chair
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    chair_patches = image_patch.find(""chair"")
    if len(pot_patches) == 0 or len(chair_patches) == 0:
        return ""no""
    pot_patch = pot_patches[0]
    chair_patch = chair_patches[0]
    return bool_to_yesno(pot_patch.horizontal_center < chair_patch.horizontal_center)",0
10914401,Where are the people?,the park,./data/gqa/../images/1437.jpg,park,"def execute_command_10914401(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the location of the people
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    return people_patches[0].simple_query(""Where are the people?"")",1
1919722,What animal is eating the grass?,sheep,./data/gqa/../images/2402094.jpg,sheep,"def execute_command_1919722(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal and one grass
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one animal and one grass patch
    if len(animal_patches) == 0 or len(grass_patches) == 0:
        # If no animal or grass is found, query the image directly
        return image_patch.simple_query(""What animal is eating the grass?"")
    animal_patch = animal_patches[0]
    grass_patch = grass_patches[0]
    if animal_patch.simple_query(""Is the animal eating the grass?"") == ""yes"":
        return animal_patch.simple_query(""What animal is eating the grass?"")
    else:
        return grass_patch.simple_query(""What animal is eating the grass?"")",1
9681008,Who is wearing a helmet?,the man,./data/gqa/../images/2353765.jpg,man,"def execute_command_9681008(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing a helmet?"")
    person_patch = person_patches[0]
    helmet_patches = image_patch.find(""helmet"")
    if len(helmet_patches) == 0:
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.simple_query(""Who is wearing a helmet?"")
    return person_patch.simple_query(""Who is wearing a helmet?"")",1
16861675,Who is on the surfboard in the middle of the photo?,no one,./data/gqa/../images/2384357.jpg,man,"def execute_command_16861675(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one surfboard
    image_patch = ImagePatch(image)
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        # If no surfboard is found, query the image directly
        return image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    for surfboard_patch in surfboard_patches:
        if surfboard_patch.horizontal_center == image_patch.horizontal_center:
            return surfboard_patch.simple_query(""Who is on the surfboard in the middle of the photo?"") # crop would include the surfboard so keep it in the query
    return ""no one""",0
10947426,What is the color of the lizard beside the banana?,brown,./data/gqa/../images/2410441.jpg,gray,"def execute_command_10947426(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one lizard and one banana
    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    banana_patches = image_patch.find(""banana"")
    if len(lizard_patches) == 0 or len(banana_patches) == 0:
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    lizard_patch = lizard_patches[0]
    banana_patch = banana_patches[0]
    if lizard_patch.horizontal_center > banana_patch.horizontal_center:
        return lizard_patch.simple_query(""What is the color of the lizard beside the banana?"")
    return banana_patch.simple_query(""What is the color of the lizard beside the banana?"")",0
18200684,Is the wine glass in the top or in the bottom part?,top,./data/gqa/../images/2345208.jpg,top,"def execute_command_18200684(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # wine glass is a bottle
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    if wine_glass_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?,no,./data/gqa/../images/2316620.jpg,car,"def execute_command_3882988(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle and one group of people
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    people_patches = image_patch.find(""people"")
    if len(vehicle_patches) == 0 or len(people_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    vehicle_patch = vehicle_patches[0]
    people_patch = people_patches[0]
    if vehicle_patch.horizontal_center < people_patch.horizontal_center:
        return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    return ""no""",0
171012637,Is the teddy bear to the right of a suitcase?,yes,./data/gqa/../images/2363844.jpg,yes,"def execute_command_171012637(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one teddy bear and one suitcase
    image_patch = ImagePatch(image)
    teddy_bear_patches = image_patch.find(""teddy bear"")
    suitcase_patches = image_patch.find(""suitcase"")
    if len(teddy_bear_patches) == 0 or len(suitcase_patches) == 0:
        return ""no""
    teddy_bear_patch = teddy_bear_patches[0]
    suitcase_patch = suitcase_patches[0]
    if teddy_bear_patch.horizontal_center > suitcase_patch.horizontal_center:
        return ""yes""
    return ""no""",1
19861372,Is the woman's hair long or short?,long,./data/gqa/../images/2350003.jpg,long,"def execute_command_19861372(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    hair_length_patches = image_patch.find(""hair length"")
    if len(hair_length_patches) == 0:
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    for hair_length_patch in hair_length_patches:
        if hair_length_patch.horizontal_center > woman_patch.horizontal_center:
            return hair_length_patch.best_text_match([""long"", ""short""])
    return hair_length_patches[0].best_text_match([""long"", ""short""])",1
623889,Are both the television and the armchair the same color?,no,./data/gqa/../images/2319836.jpg,yes,"def execute_command_623889(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_tv = image_patch.exists(""television"")
    is_armchair = image_patch.exists(""armchair"")
    if is_tv and is_armchair:
        tv_patch = image_patch.find(""television"")[0]
        armchair_patch = image_patch.find(""armchair"")[0]
        return bool_to_yesno(tv_patch.verify_property(""television"", ""color"") == armchair_patch.verify_property(""armchair"", ""color""))
    return ""no""",0
4917605,Is the shoe white or brown?,brown,./data/gqa/../images/2380186.jpg,brown,"def execute_command_4917605(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shoe is a noun, so go step by step
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""white"", ""brown""])",1
91055143,What is on the table?,wine,./data/gqa/../images/2375931.jpg,glass,"def execute_command_91055143(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    table_patch = table_patches[0]
    return table_patch.simple_query(""What is on the table?"")",0
5430643,What do you think sits on the plate to the left of the tomato?,pizza,./data/gqa/../images/2338569.jpg,lemon,"def execute_command_5430643(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one plate and one tomato
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    plate_patch = plate_patches[0]
    tomato_patches = image_patch.find(""tomato"")
    if len(tomato_patches) == 0:
        return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    tomato_patch = tomato_patches[0]
    if plate_patch.horizontal_center < tomato_patch.horizontal_center:
        return plate_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")",0
523936,Is the woman in the top part of the picture?,yes,./data/gqa/../images/2318853.jpg,no,"def execute_command_523936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",0
3189548,Is there a bottle on the nightstand that is on the bed?,no,./data/gqa/../images/2396367.jpg,yes,"def execute_command_3189548(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle is on the nightstand, nightstand is on the bed
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    bottle_patch = bottle_patches[0]
    nightstand_patches = image_patch.find(""nightstand"")
    # Question assumes only one nightstand patch
    if len(nightstand_patches) == 0:
        return ""no""
    nightstand_patch = nightstand_patches[0]
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        return ""no""
    bed_patch = bed_patches[0]
    if nightstand_patch.horizontal_center > bed_patch.horizontal_center:
        return ""yes""
    return ""no""",0
14292161,The pot is of which color?,white,./data/gqa/../images/2330795.jpg,white,"def execute_command_14292161(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pot
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    if len(pot_patches) == 0:
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].simple_query(""The pot is of which color?"")",1
17495150,"What device is black, the microphone or the laptop?",laptop,./data/gqa/../images/2409112.jpg,laptop,"def execute_command_17495150(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    device_patch = device_patches[0]
    is_black = device_patch.simple_query(""Is the device black?"")
    if is_black:
        return device_patch.simple_query(""What device is black, the microphone or the laptop?"")
    return ""microphone""",1
1521847,Is the cat on a desk?,yes,./data/gqa/../images/2340804.jpg,yes,"def execute_command_1521847(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the cat on a desk?"")",1
16465081,The man is holding what?,bat,./data/gqa/../images/2380050.jpg,bat,"def execute_command_16465081(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patch = image_patch.find(""man"")[0]
    return man_patch.simple_query(""The man is holding what?"")",1
17387032,What is on the post?,train,./data/gqa/../images/2357841.jpg,street sign,"def execute_command_17387032(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"")",0
1892436,What is in front of the kids that are looking at the cake?,table,./data/gqa/../images/2409346.jpg,table,"def execute_command_1892436(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")",1
18906705,How big is the crowd?,no,./data/gqa/../images/2364283.jpg,small,"def execute_command_18906705(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a string
    image_patch = ImagePatch(image)
    crowd_patches = image_patch.find(""crowd"")
    # Question assumes only one crowd patch
    if len(crowd_patches) == 0:
        # If no crowd is found, query the image directly
        return image_patch.simple_query(""How big is the crowd?"")
    return crowd_patches[0].simple_query(""How big is the crowd?"")",0
6157200,Does the sign on the pole have white color?,no,./data/gqa/../images/2393048.jpg,no,"def execute_command_6157200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one sign on the pole
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign on the pole"")
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    return bool_to_yesno(sign_patches[0].verify_property(""sign on the pole"", ""white""))",1
16760226,What's the laptop in front of?,television,./data/gqa/../images/2338131.jpg,screen,"def execute_command_16760226(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the laptop in front of?"")",0
111054070,How large is the bed?,large,./data/gqa/../images/2386495.jpg,large,"def execute_command_111054070(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the size of the bed
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    return bed_patches[0].simple_query(""How large is the bed?"")",1
14143886,Where is the person with the luggage standing on?,left,./data/gqa/../images/2324284.jpg,ground,"def execute_command_14143886(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person and one luggage
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    luggage_patches = image_patch.find(""luggage"")
    if len(person_patches) == 0 or len(luggage_patches) == 0:
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    person_patch = person_patches[0]
    luggage_patch = luggage_patches[0]
    if person_patch.horizontal_center > luggage_patch.horizontal_center:
        return ""right""
    elif person_patch.horizontal_center < luggage_patch.horizontal_center:
        return ""left""
    else:
        return ""center""",0
19872633,Are there either any fire extinguishers or pepper shakers?,no,./data/gqa/../images/2372702.jpg,no,"def execute_command_19872633(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)",1
12755010,Is the bottle to the right of a napkin?,yes,./data/gqa/../images/2416649.jpg,no,"def execute_command_12755010(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle and napkin are not in the image
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    for bottle_patch in bottle_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if bottle_patch.horizontal_center > napkin_patch.horizontal_center:
                return ""yes""
    return ""no""",0
2747001,Are there any soaps or bombs?,no,./data/gqa/../images/2378524.jpg,no,"def execute_command_2747001(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bomb is a soap
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)",1
1553845,Do you see baby giraffes or elephants?,yes,./data/gqa/../images/2326292.jpg,yes,"def execute_command_1553845(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one giraffe or elephant
    image_patch = ImagePatch(image)
    is_giraffe = image_patch.exists(""giraffe"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_giraffe or is_elephant)",1
6898877,What is the sign on?,the motorcycle,./data/gqa/../images/2396386.jpg,post,"def execute_command_6898877(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"")",0
15862812,What is the sticker on?,a briefcase,./data/gqa/../images/2331576.jpg,briefcase,"def execute_command_15862812(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sticker on?"")",1
141031470,On which side of the image is the white towel?,left,./data/gqa/../images/2395695.jpg,right,"def execute_command_141031470(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""towel"")
    # Question assumes only one towel patch
    if len(towel_patches) == 0:
        # If no towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    if towel_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
41026846,Who rides a motorcycle?,no one,./data/gqa/../images/2342324.jpg,man,"def execute_command_41026846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one motorcycle
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    if len(motorcycle_patches) == 0:
        return image_patch.simple_query(""Who rides a motorcycle?"")
    for motorcycle_patch in motorcycle_patches:
        rider_patches = image_patch.find(""rider"")
        for rider_patch in rider_patches:
            if rider_patch.simple_query(""Is the rider on a motorcycle?"") == ""yes"":
                return rider_patch.simple_query(""Who rides a motorcycle?"")
    return image_patch.simple_query(""Who rides a motorcycle?"")",0
16540391,What is around the bathtub the towel is on?,tile,./data/gqa/../images/2411094.jpg,wall,"def execute_command_16540391(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the bathtub the towel is on?"")",0
7469617,Is the man to the left or to the right of the person that is to the left of the people?,right,./data/gqa/../images/2407446.jpg,left,"def execute_command_7469617(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    person_patch = person_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    people_patch = people_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < person_patch.horizontal_center and person_patch.horizontal_center < people_patch.horizontal_center:
        return ""left""
    elif man_patch.horizontal_center > person_patch.horizontal_center and person_patch.horizontal_center > people_patch.horizontal_center:
        return ""right""
    else:
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")",0
64308,What's located on top of the soup?,sandwich,./data/gqa/../images/2339845.jpg,spice,"def execute_command_64308(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's located on top of the soup?"")",0
16660910,Are both the fence and the bench made of the same material?,yes,./data/gqa/../images/2336505.jpg,yes,"def execute_command_16660910(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # material is a property
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    fence_patch = fence_patches[0]
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        return ""no""
    bench_patch = bench_patches[0]
    return bool_to_yesno(fence_patch.verify_property(""fence"", ""material"") == bench_patch.verify_property(""bench"", ""material""))",1
3196255,Are there helmets that are not white?,yes,./data/gqa/../images/2409979.jpg,yes,"def execute_command_3196255(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # helmet is a noun, so go step by step
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Are there helmets that are not white?"")
    for helmet_patch in helmet_patches:
        is_not_white = (helmet_patch.simple_query(""Is the helmet not white?"") == ""yes"")
        if is_not_white:
            return ""yes""
    return ""no""",1
2992630,Is the bowl to the right or to the left of the man that is drinking?,right,./data/gqa/../images/2400911.jpg,right,"def execute_command_2992630(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    if len(bowl_patches) == 0:
        return ""no""
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > man_patch.horizontal_center:
            return ""right""
        else:
            return ""left""",1
513894,Is the person above the sand wearing glasses?,no,./data/gqa/../images/2391205.jpg,yes,"def execute_command_513894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    person_patch = person_patches[0]
    sand_patches = image_patch.find(""sand"")
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    sand_patch = sand_patches[0]
    if person_patch.vertical_center < sand_patch.vertical_center:
        return bool_to_yesno(person_patch.simple_query(""Is the person wearing glasses?"") == ""yes"")
    else:
        return ""no""",0
14167599,Is the color of the life preserver the same as that of the house?,yes,./data/gqa/../images/2353515.jpg,yes,"def execute_command_14167599(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # life preserver is a type of object
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    # Question assumes only one life preserver patch
    if len(life_preserver_patches) == 0:
        # If no life preserver is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    life_preserver_color = life_preserver_patches[0].simple_query(""What color is the life preserver?"")
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        return ""no""
    house_color = house_patches[0].simple_query(""What color is the house?"")
    return bool_to_yesno(life_preserver_color == house_color)",1
18264755,How is the weather?,sunny,./data/gqa/../images/2368037.jpg,overcast,"def execute_command_18264755(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")",0
6711450,What is the animal that is looking into the toilet that is not closed?,cat,./data/gqa/../images/2413428.jpg,cat,"def execute_command_6711450(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # toilet is not closed
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal looking into the toilet that is not closed?"") == ""yes"":
            return animal_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    # If no animal is looking into the toilet that is not closed, query the image directly
    return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")",1
8641613,Do you see any helmets in the picture that are not red?,no,./data/gqa/../images/2354584.jpg,no,"def execute_command_8641613(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # helmet is a noun, so go step by step
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        if not helmet_patch.verify_property(""helmet"", ""red""):
            return ""yes""
    return ""no""",1
2409779,What does the happy person hold?,umbrella,./data/gqa/../images/2409472.jpg,umbrella,"def execute_command_2409779(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # holds is a relational verb
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What does the happy person hold?"")",1
8461507,Are there either tissue boxes or lamps in the picture?,yes,./data/gqa/../images/2364508.jpg,no,"def execute_command_8461507(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)",0
10770916,Which kind of animal is it?,zebra,./data/gqa/../images/2349513.jpg,zebra,"def execute_command_10770916(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is it?"")
    return animal_patches[0].simple_query(""Which kind of animal is it?"")",1
19102906,What type of drink is to the left of the plate?,juice,./data/gqa/../images/2396664.jpg,juice,"def execute_command_19102906(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one drink and one plate
    image_patch = ImagePatch(image)
    drink_patches = image_patch.find(""drink"")
    plate_patches = image_patch.find(""plate"")
    if len(drink_patches) == 0 or len(plate_patches) == 0:
        return image_patch.simple_query(""What type of drink is to the left of the plate?"")
    drink_patch = drink_patches[0]
    plate_patch = plate_patches[0]
    if drink_patch.horizontal_center < plate_patch.horizontal_center:
        return drink_patch.best_text_match([""water"", ""juice"", ""soda""])
    else:
        return plate_patch.best_text_match([""water"", ""juice"", ""soda""])",1
18315440,Is the sky cloudy and blue?,yes,./data/gqa/../images/1016.jpg,yes,"def execute_command_18315440(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_cloudy = image_patch.verify_property(""sky"", ""cloudy"")
    is_blue = image_patch.verify_property(""sky"", ""blue"")
    return bool_to_yesno(is_cloudy and is_blue)",1
453061,Is the fork on the right of the image?,yes,./data/gqa/../images/2407184.jpg,yes,"def execute_command_453061(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        return ""no""
    fork_patch = fork_patches[0]
    if fork_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
71002567,"What is the broccoli on, a table or a nightstand?",table,./data/gqa/../images/2386067.jpg,table,"def execute_command_71002567(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")",1
17465089,Is the field green and small?,yes,./data/gqa/../images/2320864.jpg,no,"def execute_command_17465089(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # field is a noun, so go step by step
    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""Is the field green and small?"")
    field_patch = field_patches[0]
    is_green = field_patch.verify_property(""field"", ""green"")
    is_small = field_patch.verify_property(""field"", ""small"")
    return bool_to_yesno(is_green and is_small)",0
16150157,What is on the wall?,flowers,./data/gqa/../images/2416156.jpg,flowers,"def execute_command_16150157(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")",1
17882658,Is the van to the left or to the right of the SUV on the right side?,right,./data/gqa/../images/2364043.jpg,left,"def execute_command_17882658(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one van and one SUV
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    van_patch = van_patches[0]
    suv_patches = image_patch.find(""SUV"")
    # Question assumes only one SUV patch
    if len(suv_patches) == 0:
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    suv_patch = suv_patches[0]
    if van_patch.horizontal_center < suv_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
15101358,Is the girl to the left of the boy?,no,./data/gqa/../images/2316757.jpg,no,"def execute_command_15101358(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl and one boy
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    boy_patches = image_patch.find(""boy"")
    if len(girl_patches) == 0 or len(boy_patches) == 0:
        return ""no""
    girl_patch = girl_patches[0]
    boy_patch = boy_patches[0]
    return bool_to_yesno(girl_patch.horizontal_center < boy_patch.horizontal_center)",1
12785181,What animals are in the grass?,cows,./data/gqa/../images/2363105.jpg,cows,"def execute_command_12785181(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a list of animals
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in the grass?"")",1
348093,Are there both an apple and a bag in the picture?,no,./data/gqa/../images/2376548.jpg,no,"def execute_command_348093(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)",1
314181,Which sign is shown?,stop sign,./data/gqa/../images/2357167.jpg,stop sign,"def execute_command_314181(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one sign
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    if len(sign_patches) == 0:
        return image_patch.simple_query(""Which sign is shown?"")
    return sign_patches[0].simple_query(""Which sign is shown?"")",1
16275314,"On which side is the woman, the right or the left?",right,./data/gqa/../images/2380483.jpg,right,"def execute_command_16275314(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
19535592,Who runs on the sand?,horse,./data/gqa/../images/2336202.jpg,boy,"def execute_command_19535592(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who runs on the sand?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Who runs on the sand?"")",0
156886,Is there a giraffe near the bush?,no,./data/gqa/../images/2318497.jpg,yes,"def execute_command_156886(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # giraffe is not in the image
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    for giraffe_patch in giraffe_patches:
        bush_patches = image_patch.find(""bush"")
        for bush_patch in bush_patches:
            if abs(giraffe_patch.horizontal_center - bush_patch.horizontal_center) < 100:
                return ""yes""
    return ""no""",0
1756642,Which place is it?,beach,./data/gqa/../images/2366730.jpg,ocean,"def execute_command_1756642(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
11177243,Who wears the shirt?,the boy,./data/gqa/../images/2329182.jpg,boy,"def execute_command_11177243(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who wears the shirt?"")",1
1972390,What type of animal is standing in the field?,sheep,./data/gqa/../images/2387777.jpg,lamb,"def execute_command_1972390(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one field patch
    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return image_patch.simple_query(""What type of animal is standing in the field?"")
    field_patch = field_patches[0]
    animal_patches = field_patch.find(""animal"")
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What type of animal is standing in the field?"")
    return animal_patches[0].simple_query(""What type of animal is standing in the field?"")",0
14579439,Is the stuffed animal on the right?,no,./data/gqa/../images/2333167.jpg,no,"def execute_command_14579439(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one stuffed animal
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    stuffed_animal_patch = stuffed_animal_patches[0]
    if stuffed_animal_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
6645395,Is the gray building behind the passengers that are boarding the airplane?,yes,./data/gqa/../images/2372224.jpg,yes,"def execute_command_6645395(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # airplane is a vehicle, so it is a relational verb
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")",1
19610200,Is the fence metallic?,yes,./data/gqa/../images/2346093.jpg,yes,"def execute_command_19610200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence metallic?"")
    return bool_to_yesno(fence_patches[0].verify_property(""fence"", ""metallic""))",1
5299471,What does the girl that to the left of the trashcan carry?,purse,./data/gqa/../images/2412670.jpg,shopping bag,"def execute_command_5299471(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl and one trashcan
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    trashcan_patches = image_patch.find(""trashcan"")
    if len(girl_patches) == 0 or len(trashcan_patches) == 0:
        return image_patch.simple_query(""What does the girl that to the left of the trashcan carry?"")
    girl_patch = girl_patches[0]
    trashcan_patch = trashcan_patches[0]
    if girl_patch.horizontal_center < trashcan_patch.horizontal_center:
        return girl_patch.simple_query(""What does the girl carry?"")
    return ""no""",0
7548203,Which kind of vegetable is on the pizza?,no vegetable,./data/gqa/../images/2389312.jpg,olive,"def execute_command_7548203(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pizza patch
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")
    for pizza_patch in pizza_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center > pizza_patch.horizontal_center:
                return vegetable_patch.best_text_match([""onion"", ""mushroom"", ""tomato""])
    return ""no vegetable""",0
91027737,On which side is the pan?,right,./data/gqa/../images/2384376.jpg,right,"def execute_command_91027737(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pan
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) == 0:
        return image_patch.simple_query(""On which side is the pan?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
19133443,Are the black cars in the top part of the photo?,yes,./data/gqa/../images/2374328.jpg,no,"def execute_command_19133443(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one black car
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    black_car_patch = black_car_patches[0]
    if black_car_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",0
6144031,Who is in the living room?,three girls,./data/gqa/../images/2390488.jpg,girl,"def execute_command_6144031(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one living room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"")",0
14300987,What is the sink made of?,stainless steel,./data/gqa/../images/2417910.jpg,porcelain,"def execute_command_14300987(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one sink
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"")",0
16464341,Is there a black cat or bird?,no,./data/gqa/../images/2386341.jpg,no,"def execute_command_16464341(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)",1
1241741,Do you see a bicycle or a biker in this picture?,yes,./data/gqa/../images/2322635.jpg,yes,"def execute_command_1241741(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    return bool_to_yesno(is_bicycle or is_biker)",1
844747,Are there both a pillow and a kitten in the image?,no,./data/gqa/../images/2407209.jpg,no,"def execute_command_844747(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)",1
1104500,What kind of food is in the box?,fish,./data/gqa/../images/2413283.jpg,onion ring,"def execute_command_1104500(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one box
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What kind of food is in the box?"")
    box_patch = box_patches[0]
    food_patches = box_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        return ""no food""
    return food_patches[0].simple_query(""What kind of food is in the box?"")",0
4204973,What is the food that is to the left of the kid called?,donuts,./data/gqa/../images/2327387.jpg,donuts,"def execute_command_4204973(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one kid patch
    image_patch = ImagePatch(image)
    kid_patches = image_patch.find(""kid"")
    if len(kid_patches) == 0:
        # If no kid is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    kid_patch = kid_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < kid_patch.horizontal_center:
            return food_patch.simple_query(""What is the food that is to the left of the kid called?"") # crop would include the food so keep it in the query
    # If no food is to the left of the kid, query the image directly
    return image_patch.simple_query(""What is the food that is to the left of the kid called?"")",1
11820726,"What device is the desk in front of, a television or a printer?",television,./data/gqa/../images/2401576.jpg,printer,"def execute_command_11820726(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one desk patch
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    for desk_patch in desk_patches:
        tv_patches = image_patch.find(""television"")
        printer_patches = image_patch.find(""printer"")
        if len(tv_patches) > 0 and len(printer_patches) > 0:
            return ""television""
        elif len(tv_patches) > 0:
            return ""television""
        elif len(printer_patches) > 0:
            return ""printer""
        else:
            return ""unknown""",0
18114588,Do you see a helmet there?,yes,./data/gqa/../images/2355905.jpg,yes,"def execute_command_18114588(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""helmet""))",1
11950874,What animal is standing on the ground?,polar bear,./data/gqa/../images/2348673.jpg,bear,"def execute_command_11950874(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    animal_patch = animal_patches[0]
    if animal_patch.simple_query(""Is the animal standing on the ground?"") == ""yes"":
        return animal_patch.simple_query(""What animal is standing on the ground?"")
    return ""no""",0
10216953,Is the small car to the left of the fork on the right?,no,./data/gqa/../images/2412469.jpg,yes,"def execute_command_10216953(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car and one fork
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    fork_patches = image_patch.find(""fork"")
    if len(car_patches) == 0 or len(fork_patches) == 0:
        return ""no""
    car_patch = car_patches[0]
    fork_patch = fork_patches[0]
    if car_patch.horizontal_center < fork_patch.horizontal_center:
        return ""yes""
    return ""no""",0
16184942,Does that grass look brown and short?,yes,./data/gqa/../images/2356100.jpg,no,"def execute_command_16184942(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # grass is a property of the image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""grass"", ""brown"") and image_patch.verify_property(""grass"", ""short""))",0
6312238,Is the hydrant to the left of the car?,no,./data/gqa/../images/2324132.jpg,no,"def execute_command_6312238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the hydrant to the left of the car?"")",1
16646227,On which side of the picture is the gray car?,right,./data/gqa/../images/2361354.jpg,left,"def execute_command_16646227(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one gray car
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    if len(gray_car_patches) == 0:
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    gray_car_patch = gray_car_patches[0]
    if gray_car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?,left,./data/gqa/../images/2417660.jpg,left,"def execute_command_10484636(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person and one ball
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    ball_patches = image_patch.find(""ball"")
    if len(person_patches) == 0 or len(ball_patches) == 0:
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    person_patch = person_patches[0]
    ball_patch = ball_patches[0]
    if ball_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
3443704,What is the woman wearing?,jeans,./data/gqa/../images/2416524.jpg,jacket,"def execute_command_3443704(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What is the woman wearing?"")",0
19313572,What is the color of the tent to the left of the vehicles?,white,./data/gqa/../images/2381995.jpg,white,"def execute_command_19313572(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    vehicle_patch = vehicle_patches[0]
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        return ""no""
    tent_patch = tent_patches[0]
    if tent_patch.horizontal_center < vehicle_patch.horizontal_center:
        return tent_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    return ""no""",1
10885675,What is the toilet seat made of?,plastic,./data/gqa/../images/2321578.jpg,plastic,"def execute_command_10885675(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # toilet seat is a property of toilet
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What is the toilet seat made of?"")
    return toilet_patches[0].simple_query(""What is the toilet seat made of?"")",1
6926432,What animal is resting on the blanket?,dog,./data/gqa/../images/2341891.jpg,dog,"def execute_command_6926432(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    for blanket_patch in blanket_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.simple_query(""Is the animal resting on the blanket?"") == ""yes"":
                return animal_patch.simple_query(""What animal is resting on the blanket?"")
    return ""no animal is resting on the blanket""",1
14561612,What color do you think the bikini that the woman is wearing is?,purple,./data/gqa/../images/2358167.jpg,green,"def execute_command_14561612(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the bikini
    image_patch = ImagePatch(image)
    bikini_patches = image_patch.find(""bikini"")
    # Question assumes only one bikini patch
    if len(bikini_patches) == 0:
        # If no bikini is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    return bikini_patches[0].simple_query(""What color do you think the bikini that the woman is wearing is?"")",0
6587755,Are both the room and the bowl the same color?,yes,./data/gqa/../images/28.jpg,yes,"def execute_command_6587755(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_room_same_color = image_patch.verify_property(""room"", ""same color"")
    is_bowl_same_color = image_patch.verify_property(""bowl"", ""same color"")
    return bool_to_yesno(is_room_same_color and is_bowl_same_color)",1
4479543,Is the barn white or brown?,brown,./data/gqa/../images/2399909.jpg,brown,"def execute_command_4479543(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the barn white or brown?"")",1
972522,Does the box look white or brown?,white,./data/gqa/../images/2412806.jpg,white,"def execute_command_972522(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a string
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].best_text_match([""white"", ""brown""])",1
3948528,What is the bowl made of?,plastic,./data/gqa/../images/2358903.jpg,plastic,"def execute_command_3948528(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bowl is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bowl made of?"")",1
15724828,Is the bench in front of the rock gray or red?,gray,./data/gqa/../images/2390800.jpg,gray,"def execute_command_15724828(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bench and one rock
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    rock_patches = image_patch.find(""rock"")
    if len(bench_patches) == 0 or len(rock_patches) == 0:
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    bench_patch = bench_patches[0]
    rock_patch = rock_patches[0]
    if bench_patch.horizontal_center > rock_patch.horizontal_center:
        return bench_patch.best_text_match([""gray"", ""red""])
    else:
        return rock_patch.best_text_match([""gray"", ""red""])",1
866459,On which side is the couch?,left,./data/gqa/../images/2360132.jpg,left,"def execute_command_866459(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one couch patch
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    couch_patch = couch_patches[0]
    if couch_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
8614812,Is the person that is playing wearing shorts?,yes,./data/gqa/../images/2411380.jpg,yes,"def execute_command_8614812(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    person_patch = person_patches[0]
    return bool_to_yesno(person_patch.simple_query(""Is the person wearing shorts?""))",1
167438,What is wearing the ground?,motorcycles,./data/gqa/../images/2351365.jpg,helmet,"def execute_command_167438(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ground is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"")",0
9418088,Which kind of furniture is wooden?,table,./data/gqa/../images/2417483.jpg,cabinets,"def execute_command_9418088(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""Which kind of furniture is wooden?"")",0
1042377,Who is standing beside the person that is wearing a dress?,the man,./data/gqa/../images/2861.jpg,man,"def execute_command_1042377(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")",1
16889676,Is it an indoors or outdoors scene?,indoors,./data/gqa/../images/1159654.jpg,indoors,"def execute_command_16889676(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")",1
10324400,How fat are the long skis?,no,./data/gqa/../images/2408676.jpg,skinny,"def execute_command_10324400(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a string
    image_patch = ImagePatch(image)
    long_ski_patches = image_patch.find(""long ski"")
    # Question assumes only one long ski patch
    if len(long_ski_patches) == 0:
        # If no long ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    return long_ski_patches[0].simple_query(""How fat are the long skis?"") # crop would include the skis so keep it in the query",0
2211743,Is the sky clear or overcast?,clear,./data/gqa/../images/2391023.jpg,overcast,"def execute_command_2211743(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one sky patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")",0
4224772,Are there bottles to the left of the pencils in the bottom part of the image?,yes,./data/gqa/../images/2403935.jpg,yes,"def execute_command_4224772(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pencil patch
    image_patch = ImagePatch(image)
    pencil_patch = image_patch.find(""pencil"")[0]
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there bottles to the left of the pencils in the bottom part of the image?"")
    for bottle_patch in bottle_patches:
        if bottle_patch.horizontal_center < pencil_patch.horizontal_center and bottle_patch.vertical_center < image_patch.vertical_center:
            return ""yes""
    return ""no""",1
15478302,Is there any dark door or window in the image?,yes,./data/gqa/../images/2390633.jpg,no,"def execute_command_15478302(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    dark_door_patches = image_patch.find(""dark door"")
    dark_window_patches = image_patch.find(""dark window"")
    return bool_to_yesno(len(dark_door_patches) > 0 or len(dark_window_patches) > 0)",0
18414234,Do you see either a knife or a chair in the picture?,yes,./data/gqa/../images/2354394.jpg,yes,"def execute_command_18414234(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)",1
19779815,Is the book red or yellow?,yellow,./data/gqa/../images/2406639.jpg,yellow,"def execute_command_19779815(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one book patch
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    book_patch = book_patches[0]
    return book_patch.best_text_match([""red"", ""yellow""])",1
7257283,Are there men to the left of the picture?,yes,./data/gqa/../images/2372539.jpg,no,"def execute_command_7257283(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # picture is the frame
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there men to the left of the picture?"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no""",0
6621625,On which side of the picture is the bench?,right,./data/gqa/../images/2352581.jpg,right,"def execute_command_6621625(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    if bench_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
19311589,Are there both fences and horses in this picture?,yes,./data/gqa/../images/2336493.jpg,yes,"def execute_command_19311589(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)",1
171018070,What device is to the right of the container that the person is to the left of?,computer,./data/gqa/../images/2344162.jpg,screen,"def execute_command_171018070(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    person_patch = person_patches[0]
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    container_patch = container_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center > container_patch.horizontal_center and container_patch.horizontal_center > person_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")
    return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")",0
171031333,Do you see blankets in the picture that are not black?,yes,./data/gqa/../images/2390560.jpg,no,"def execute_command_171031333(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return bool_to_yesno(image_patch.simple_query(""Do you see blankets in the picture that are not black?"") == ""yes"")",0
16695341,What is the fence made of?,wood,./data/gqa/../images/2394728.jpg,wood,"def execute_command_16695341(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # fence is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")",1
8314287,Do you see any bottle or child there?,no,./data/gqa/../images/2326150.jpg,no,"def execute_command_8314287(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle or child
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)",1
5111363,Are there chairs or tables that are not blue?,no,./data/gqa/../images/2363283.jpg,no,"def execute_command_5111363(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_table = image_patch.exists(""table"")
    is_blue_chair = image_patch.exists(""chair"") and image_patch.verify_property(""chair"", ""blue"")
    is_blue_table = image_patch.exists(""table"") and image_patch.verify_property(""table"", ""blue"")
    return bool_to_yesno((is_chair or is_table) and not (is_blue_chair or is_blue_table))",1
9230971,Which place is it?,a city,./data/gqa/../images/2367570.jpg,harbor,"def execute_command_9230971(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
132422,Does the hair have short length and white color?,yes,./data/gqa/../images/2324466.jpg,yes,"def execute_command_132422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # hair is a noun, so go step by step
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Does the hair have short length and white color?"")
    hair_patch = hair_patches[0]
    is_short = hair_patch.verify_property(""hair"", ""short"")
    is_white = hair_patch.verify_property(""hair"", ""white"")
    return bool_to_yesno(is_short and is_white)",1
4822200,Do you see any lettuce on the food with the meat?,no,./data/gqa/../images/2344108.jpg,no,"def execute_command_4822200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one food patch
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    food_patch = food_patches[0]
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        return ""no""
    for lettuce_patch in lettuce_patches:
        if food_patch.horizontal_center > lettuce_patch.horizontal_center:
            return ""yes""
    return ""no""",1
3726666,What device is to the left of the curtain that is to the left of the glasses?,no,./data/gqa/../images/2348427.jpg,remote control,"def execute_command_3726666(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one device, curtain, and glasses
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    curtain_patches = image_patch.find(""curtain"")
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one device, curtain, and glasses patch
    if len(device_patches) == 0 or len(curtain_patches) == 0 or len(glasses_patches) == 0:
        # If no device, curtain, or glasses is found, query the image directly
        return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    device_patch = device_patches[0]
    curtain_patch = curtain_patches[0]
    glasses_patch = glasses_patches[0]
    if curtain_patch.horizontal_center > device_patch.horizontal_center and glasses_patch.horizontal_center > curtain_patch.horizontal_center:
        return device_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")
    return ""no""",0
9954849,What kind of furniture is it?,desk,./data/gqa/../images/2375014.jpg,desk,"def execute_command_9954849(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is it?"")
    return furniture_patches[0].simple_query(""What kind of furniture is it?"")",1
19409495,Are there any red trains or buses?,no,./data/gqa/../images/2361783.jpg,yes,"def execute_command_19409495(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_bus = image_patch.exists(""bus"")
    is_red_train = image_patch.exists(""red"") and is_train
    is_red_bus = image_patch.exists(""red"") and is_bus
    return bool_to_yesno(is_red_train or is_red_bus)",0
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?,orange,./data/gqa/../images/2416035.jpg,lemons,"def execute_command_8965422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")",0
623393,"What type of clothing is tan, the hat or the vest?",hat,./data/gqa/../images/713860.jpg,vest,"def execute_command_623393(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one tan clothing patch
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan clothing"")
    # Question assumes only one tan clothing patch
    if len(tan_patches) == 0:
        # If no tan clothing is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    tan_patch = tan_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""vest""
    hat_patch = hat_patches[0]
    if hat_patch.simple_query(""Is the hat tan?"") == ""yes"":
        return ""hat""
    return ""vest""",0
6436448,Is the color of the skirt the same as the scarf?,no,./data/gqa/../images/2373592.jpg,no,"def execute_command_6436448(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    for skirt_patch in skirt_patches:
        scarf_patches = image_patch.find(""scarf"")
        # Question assumes only one scarf patch
        if len(scarf_patches) == 0:
            return ""no""
        for scarf_patch in scarf_patches:
            if skirt_patch.simple_query(""What color is the skirt?"") == scarf_patch.simple_query(""What color is the scarf?""):
                return ""yes""
    return ""no""",1
3303313,Is the blanket under a cat?,no,./data/gqa/../images/2344857.jpg,no,"def execute_command_3303313(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (under, on top of, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blanket under a cat?"")",1
443663,What color is the picture?,black,./data/gqa/../images/2343442.jpg,blue,"def execute_command_443663(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is not used
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")",0
17267472,Is there any umbrella to the right of the man?,no,./data/gqa/../images/930.jpg,no,"def execute_command_17267472(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    for umbrella_patch in umbrella_patches:
        if umbrella_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no""",1
1885406,What is the toy on the bed?,bear,./data/gqa/../images/2374740.jpg,stuffed bear,"def execute_command_1885406(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toy on the bed?"")",0
5557965,On which side is the bag?,left,./data/gqa/../images/2347380.jpg,right,"def execute_command_5557965(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.left < image_patch.left + (image_patch.right - image_patch.left) / 2:
        return ""left""
    else:
        return ""right""",0
4325825,On which side is the banana?,left,./data/gqa/../images/2326465.jpg,left,"def execute_command_4325825(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    banana_patch = banana_patches[0]
    if banana_patch.left < image_patch.left + (image_patch.right - image_patch.left) / 2:
        return ""left""
    else:
        return ""right""",1
3196355,What does the batter hold?,bat,./data/gqa/../images/2409979.jpg,bat,"def execute_command_3196355(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # batter is a noun
    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    return batter_patches[0].simple_query(""What does the batter hold?"") # crop would include the object held so keep it in the query",1
14470748,Who wears a jacket?,no,./data/gqa/../images/713118.jpg,guy,"def execute_command_14470748(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    person_patch = person_patches[0]
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        return ""no""
    jacket_patch = jacket_patches[0]
    if person_patch.horizontal_center > jacket_patch.horizontal_center:
        return ""no""
    return person_patch.simple_query(""Who wears a jacket?"") # crop would include the jacket so keep it in the query",0
16537736,Are there any houses behind the shrubs?,yes,./data/gqa/../images/2412552.jpg,yes,"def execute_command_16537736(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one shrub patch
    image_patch = ImagePatch(image)
    shrub_patches = image_patch.find(""shrub"")
    if len(shrub_patches) == 0:
        # If no shrub is found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    shrub_patch = shrub_patches[0]
    house_patches = image_patch.find(""house"")
    for house_patch in house_patches:
        if house_patch.horizontal_center > shrub_patch.horizontal_center:
            return ""yes""
    return ""no""",1
1129541,What piece of furniture is made of wood?,chair,./data/gqa/../images/2361386.jpg,bookcase,"def execute_command_1129541(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the name of the piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""What piece of furniture is made of wood?"") # crop would include the wood so keep it in the query",0
15270011,Is the racket to the right or to the left of the man that is wearing a hat?,left,./data/gqa/../images/2404683.jpg,right,"def execute_command_15270011(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    if len(hat_patches) == 0:
        # If no hat is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    hat_patch = hat_patches[0]
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            if racket_patch.horizontal_center > hat_patch.horizontal_center:
                return ""right""
            else:
                return ""left""
    return ""left""",0
12416703,Where is that cat?,in the middle,./data/gqa/../images/2409055.jpg,car,"def execute_command_12416703(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the location of the cat
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Where is that cat?"")
    return cat_patches[0].simple_query(""Where is that cat?"")",0
15603088,The animal to the right of the envelope is lying on what?,couch,./data/gqa/../images/2365166.jpg,chair,"def execute_command_15603088(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # envelope is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")",0
5329077,Is the man on a bench?,no,./data/gqa/../images/2321094.jpg,yes,"def execute_command_5329077(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on a bench?"")",0
1945705,What kind of device is to the left of the device that looks silver and gray?,wii remote,./data/gqa/../images/2375580.jpg,monitor,"def execute_command_1945705(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one device patch
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    device_patch = device_patches[0]
    left_device_patches = image_patch.find(""device"")
    for left_device_patch in left_device_patches:
        if left_device_patch.horizontal_center < device_patch.horizontal_center:
            return left_device_patch.best_text_match([""silver"", ""gray""])
    return ""no device found""",0
17520003,What vehicle is to the right of the pine tree?,motorcycle,./data/gqa/../images/2391939.jpg,train,"def execute_command_17520003(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle and one pine tree
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    vehicle_patch = vehicle_patches[0]
    pine_tree_patches = image_patch.find(""pine tree"")
    if len(pine_tree_patches) == 0:
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    pine_tree_patch = pine_tree_patches[0]
    if vehicle_patch.horizontal_center > pine_tree_patch.horizontal_center:
        return vehicle_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    return pine_tree_patch.simple_query(""What vehicle is to the right of the pine tree?"")",0
1259983,Who is wearing pants?,no,./data/gqa/../images/2354042.jpg,guy,"def execute_command_1259983(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    person_patch = person_patches[0]
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return ""no""
    for pants_patch in pants_patches:
        if pants_patch.horizontal_center > person_patch.horizontal_center:
            return ""no""
    return ""yes""",0
6413378,Is there a black keyboard or camera?,no,./data/gqa/../images/2339847.jpg,yes,"def execute_command_6413378(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_black_keyboard = image_patch.exists(""black keyboard"")
    is_black_camera = image_patch.exists(""black camera"")
    return bool_to_yesno(is_black_keyboard or is_black_camera)",0
947305,Is the sunny water blue and high?,yes,./data/gqa/../images/2363705.jpg,yes,"def execute_command_947305(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # water is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sunny water blue and high?"")",1
4367817,What type of animal in this scene is brown?,dog,./data/gqa/../images/2391559.jpg,dog,"def execute_command_4367817(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # animal is a relation so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal in this scene is brown?"")",1
15485572,What is the vegetable on the hot dog with the cheese?,no,./data/gqa/../images/2404539.jpg,onion,"def execute_command_15485572(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one hot dog with cheese
    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog with cheese"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog is found, query the image directly
        return image_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    hot_dog_patch = hot_dog_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > hot_dog_patch.horizontal_center:
            return vegetable_patch.simple_query(""What is the vegetable on the hot dog with the cheese?"")
    return ""no""",0
12661142,What is the appliance in the kitchen called?,oven,./data/gqa/../images/2340480.jpg,oven,"def execute_command_12661142(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # kitchen is not a property of the appliance, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the appliance in the kitchen called?"")",1
41012743,The arrow is on what?,pole,./data/gqa/../images/2345563.jpg,pole,"def execute_command_41012743(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The arrow is on what?"")",1
4777414,What color is the bicycle in the bottom of the photo?,white,./data/gqa/../images/2323146.jpg,white,"def execute_command_4777414(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bicycle patch
    image_patch = ImagePatch(image)
    bicycle_patches = image_patch.find(""bicycle"")
    if len(bicycle_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    bicycle_patch = bicycle_patches[0]
    if bicycle_patch.vertical_center > image_patch.vertical_center:
        return bicycle_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    return bicycle_patch.simple_query(""What color is the bicycle in the top of the photo?"")",1
1185988,What is the device on top of the table that is to the right of the trashcan?,no,./data/gqa/../images/2391692.jpg,monitor,"def execute_command_1185988(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one device and one trashcan
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    device_patch = device_patches[0]
    trashcan_patches = image_patch.find(""trashcan"")
    # Question assumes only one trashcan patch
    if len(trashcan_patches) == 0:
        return ""no""
    trashcan_patch = trashcan_patches[0]
    if device_patch.horizontal_center > trashcan_patch.horizontal_center and device_patch.vertical_center < image_patch.vertical_center:
        return device_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")
    return ""no""",0
13582968,Was granite used to make that floor?,True,./data/gqa/../images/2355417.jpg,yes,"def execute_command_13582968(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        # If no floor is found, query the image directly
        return image_patch.simple_query(""Was granite used to make that floor?"")
    return floor_patches[0].verify_property(""floor"", ""granite"")",1
6235273,Are there women in the photo?,yes,./data/gqa/../images/2376201.jpg,yes,"def execute_command_6235273(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""woman""))",1
5377974,What is the girl playing with?,frisbee,./data/gqa/../images/2394351.jpg,frisbee,"def execute_command_5377974(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patch = image_patch.find(""girl"")
    if len(girl_patch) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    return girl_patch[0].simple_query(""What is the girl playing with?"")",1
51037065,On which side of the image is the fridge?,left,./data/gqa/../images/2391630.jpg,left,"def execute_command_51037065(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    if fridge_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
5299477,Which kind of bag does the girl carry?,backpack,./data/gqa/../images/2412670.jpg,shopping bag,"def execute_command_5299477(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    girl_patch = girl_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""no""
    bag_patch = bag_patches[0]
    return bag_patch.best_text_match([""backpack"", ""handbag"", ""suitcase""]) # crop would include the bag so keep it in the query",0
15135617,Is the white dog on a bench?,no,./data/gqa/../images/2410392.jpg,yes,"def execute_command_15135617(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one white dog and one bench
    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    bench_patches = image_patch.find(""bench"")
    if len(white_dog_patches) == 0 or len(bench_patches) == 0:
        return ""no""
    white_dog_patch = white_dog_patches[0]
    bench_patch = bench_patches[0]
    if white_dog_patch.horizontal_center > bench_patch.horizontal_center:
        return ""yes""
    return ""no""",0
1111583,Is the male person to the right of a person?,yes,./data/gqa/../images/2381241.jpg,no,"def execute_command_1111583(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one male person
    image_patch = ImagePatch(image)
    male_patches = image_patch.find(""male"")
    if len(male_patches) == 0:
        return ""no""
    for male_patch in male_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.horizontal_center > male_patch.horizontal_center:
                return ""yes""
    return ""no""",0
12352269,Are there both windows and doors in this photograph?,no,./data/gqa/../images/2361646.jpg,yes,"def execute_command_12352269(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",0
15610844,What kind of place is shown?,residential,./data/gqa/../images/2942.jpg,sidewalk,"def execute_command_15610844(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one patch
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")",0
11869032,Is the banana below a bird?,no,./data/gqa/../images/2368611.jpg,no,"def execute_command_11869032(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the banana below a bird?"")",1
9878360,What color is the vehicle to the left of the fence?,orange,./data/gqa/../images/2322955.jpg,orange,"def execute_command_9878360(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle and one fence
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    fence_patches = image_patch.find(""fence"")
    if len(vehicle_patches) == 0 or len(fence_patches) == 0:
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    vehicle_patch = vehicle_patches[0]
    fence_patch = fence_patches[0]
    if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
        return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    return fence_patch.simple_query(""What color is the vehicle to the left of the fence?"")",1
481765,Are there either any buses or trains in the image?,yes,./data/gqa/../images/2406968.jpg,yes,"def execute_command_481765(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bus and train are not in the same image
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)",1
6665919,What is the fence made of?,wood,./data/gqa/../images/2336198.jpg,wood,"def execute_command_6665919(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # fence is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")",1
9218340,Does the man to the left of the traffic cone wear a cap?,yes,./data/gqa/../images/2412648.jpg,no,"def execute_command_9218340(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one traffic cone
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    man_patch = man_patches[0]
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes only one traffic cone patch
    if len(traffic_cone_patches) == 0:
        return ""no""
    traffic_cone_patch = traffic_cone_patches[0]
    if man_patch.horizontal_center < traffic_cone_patch.horizontal_center:
        return bool_to_yesno(man_patch.simple_query(""Does the man wear a cap?""))
    return ""no""",0
11981238,What is common to the blazer and the suit?,they are both made of cloth,./data/gqa/../images/3180.jpg,color,"def execute_command_11981238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # common to
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    # Question assumes only one blazer patch
    if len(blazer_patches) == 0:
        # If no blazer is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    blazer_patch = blazer_patches[0]
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one suit patch
    if len(suit_patches) == 0:
        return ""no""
    suit_patch = suit_patches[0]
    common = blazer_patch.simple_query(""What is common to the blazer and the suit?"")
    return common",0
16245,Is the shirt white or green?,white,./data/gqa/../images/2399408.jpg,white,"def execute_command_16245(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one shirt patch
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""white"", ""green""])",1
2595103,"In which part of the image are the cars, the bottom or the top?",top,./data/gqa/../images/2364312.jpg,top,"def execute_command_2595103(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    car_patch = car_patches[0]
    if car_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
2429130,"How does the sand look, dry or wet?",wet,./data/gqa/../images/2383620.jpg,wet,"def execute_command_2429130(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one sand patch
    image_patch = ImagePatch(image)
    sand_patches = image_patch.find(""sand"")
    if len(sand_patches) == 0:
        # If no sand is found, query the image directly
        return image_patch.simple_query(""How does the sand look, dry or wet?"")
    sand_patch = sand_patches[0]
    return sand_patch.best_text_match([""dry"", ""wet""])",1
4325920,Are there fruits to the right of the banana which is on the table?,no,./data/gqa/../images/2326465.jpg,yes,"def execute_command_4325920(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one table patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    for banana_patch in banana_patches:
        table_patches = image_patch.find(""table"")
        # Question assumes only one table patch
        if len(table_patches) == 0:
            # If no table is found, query the image directly
            return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
        for table_patch in table_patches:
            if banana_patch.horizontal_center > table_patch.horizontal_center:
                fruit_patches = image_patch.find(""fruit"")
                # Question assumes only one fruit patch
                if len(fruit_patches) == 0:
                    return ""no""
                for fruit_patch in fruit_patches:
                    if fruit_patch.horizontal_center > banana_patch.horizontal_center:
                        return ""yes""
    return ""no""",0
6376614,What color is the car in the middle?,yellow,./data/gqa/../images/2352530.jpg,yellow,"def execute_command_6376614(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""What color is the car in the middle?"")
    car_patch = car_patches[0]
    return car_patch.simple_query(""What color is the car in the middle?"")",1
712063,What's the lamp made of?,wood,./data/gqa/../images/2374892.jpg,metal,"def execute_command_712063(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one lamp
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        return image_patch.simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What's the lamp made of?"")",0
19358285,Which kind of furniture is to the right of the pillow?,bed,./data/gqa/../images/1159380.jpg,bed,"def execute_command_19358285(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"") # crop would include the furniture so keep it in the query
    # If no furniture is to the right of the pillow, query the image directly
    return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")",1
9647343,What type of material is the patio made of?,concrete,./data/gqa/../images/2383402.jpg,wood,"def execute_command_9647343(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # patio is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")",0
12545434,Who is wearing the suit?,a girl,./data/gqa/../images/2402811.jpg,child,"def execute_command_12545434(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the suit?"")
    person_patch = person_patches[0]
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one suit patch
    if len(suit_patches) == 0:
        return ""no""
    suit_patch = suit_patches[0]
    if suit_patch.horizontal_center > person_patch.horizontal_center:
        return person_patch.simple_query(""Who is wearing the suit?"")
    return suit_patch.simple_query(""Who is wearing the suit?"")",0
12894285,What is the color of the clouds in the sky?,blue,./data/gqa/../images/2368430.jpg,white,"def execute_command_12894285(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one sky patch
    image_patch = ImagePatch(image)
    sky_patches = image_patch.find(""sky"")
    if len(sky_patches) == 0:
        return image_patch.simple_query(""What is the color of the clouds in the sky?"")
    return sky_patches[0].simple_query(""What is the color of the clouds in the sky?"")",0
9843309,Do the flowers look orange?,no,./data/gqa/../images/2396539.jpg,no,"def execute_command_9843309(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flowers"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flowers"", ""orange""))",1
618996,Is there a chair or a bed in this image?,no,./data/gqa/../images/4652.jpg,yes,"def execute_command_618996(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)",0
18959736,Are there trucks to the left of the umbrella?,no,./data/gqa/../images/2359792.jpg,no,"def execute_command_18959736(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one umbrella patch
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Are there trucks to the left of the umbrella?"")
    umbrella_patch = umbrella_patches[0]
    truck_patches = image_patch.find(""truck"")
    for truck_patch in truck_patches:
        if truck_patch.horizontal_center < umbrella_patch.horizontal_center:
            return ""yes""
    return ""no""",1
867869,What color are the pants the man is wearing?,black,./data/gqa/../images/2413471.jpg,black,"def execute_command_867869(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the pants
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        return ""no""
    pants_patch = pants_patches[0]
    return pants_patch.simple_query(""What color are the pants the man is wearing?"") # crop would include the pants so keep it in the query",1
551601,Are there any pillows or chairs in the image?,yes,./data/gqa/../images/2409911.jpg,yes,"def execute_command_551601(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_pillow or is_chair)",1
10775785,Are there women to the left of the person with the bag?,yes,./data/gqa/../images/2390608.jpg,yes,"def execute_command_10775785(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person with a bag
    image_patch = ImagePatch(image)
    person_with_bag_patches = image_patch.find(""person with bag"")
    # Question assumes only one person with a bag patch
    if len(person_with_bag_patches) == 0:
        # If no person with a bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    person_with_bag_patch = person_with_bag_patches[0]
    woman_patches = image_patch.find(""woman"")
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < person_with_bag_patch.horizontal_center:
            return ""yes""
    return ""no""",1
5925408,What is the bike in front of?,a fire hydrant,./data/gqa/../images/2352009.jpg,tree,"def execute_command_5925408(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the bike in front of?"")",0
11328059,What type of fast food is shown in this photo?,hamburger,./data/gqa/../images/2350669.jpg,fries,"def execute_command_11328059(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one fast food patch
    image_patch = ImagePatch(image)
    fast_food_patches = image_patch.find(""fast food"")
    if len(fast_food_patches) == 0:
        return image_patch.simple_query(""What type of fast food is shown in this photo?"")
    return fast_food_patches[0].simple_query(""What type of fast food is shown in this photo?"")",0
15427544,Are there either beds or desks in the picture?,no,./data/gqa/../images/2363939.jpg,no,"def execute_command_15427544(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)",1
13778498,What type of vehicle is behind the green tree?,train,./data/gqa/../images/2400942.jpg,train,"def execute_command_13778498(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"")",1
41019603,What is the child standing on?,skis,./data/gqa/../images/2417896.jpg,skis,"def execute_command_41019603(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the child standing on?"")",1
11705574,What is the wooden item of furniture called?,cabinet,./data/gqa/../images/2344018.jpg,table,"def execute_command_11705574(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one wooden item of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wooden item of furniture called?"")",0
16817277,Is the man to the left or to the right of the woman?,left,./data/gqa/../images/3898.jpg,right,"def execute_command_16817277(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    if len(man_patches) == 0 or len(woman_patches) == 0:
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
1316363,Who is wearing the shirt?,the player,./data/gqa/../images/2396614.jpg,umpire,"def execute_command_1316363(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Who is wearing the shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")",0
18546659,What is the fence made of?,wood,./data/gqa/../images/2322017.jpg,wood,"def execute_command_18546659(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # fence is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")",1
10519192,What color is the kite that looks triangular?,black,./data/gqa/../images/2389362.jpg,black,"def execute_command_10519192(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the kite
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    for kite_patch in kite_patches:
        if kite_patch.simple_query(""Does the kite look triangular?"") == ""yes"":
            return kite_patch.simple_query(""What color is the kite that looks triangular?"") # crop would include the kite so keep it in the query
    # If no kite looks triangular, pick the first kite
    return kite_patches[0].simple_query(""What color is the kite that looks triangular?"")",1
1672200,Who is drinking?,man,./data/gqa/../images/2357852.jpg,child,"def execute_command_1672200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is drinking?"")
    person_patch = person_patches[0]
    is_drinking = (person_patch.simple_query(""Is the person drinking?"") == ""yes"")
    if is_drinking:
        return person_patch.simple_query(""Who is drinking?"")
    return ""no one""",0
5703748,Is the building behind the tree white or brown?,brown,./data/gqa/../images/2390146.jpg,brown,"def execute_command_5703748(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one building and one tree
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    tree_patches = image_patch.find(""tree"")
    if len(building_patches) == 0 or len(tree_patches) == 0:
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    building_patch = building_patches[0]
    tree_patch = tree_patches[0]
    if building_patch.horizontal_center < tree_patch.horizontal_center:
        return building_patch.best_text_match([""white"", ""brown""])
    else:
        return tree_patch.best_text_match([""white"", ""brown""])",1
5749240,Are the glove and the undershirt both black?,no,./data/gqa/../images/2371802.jpg,yes,"def execute_command_5749240(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""Are the glove and the undershirt both black?"")
    glove_patch = glove_patches[0]
    undershirt_patches = image_patch.find(""undershirt"")
    # Question assumes only one undershirt patch
    if len(undershirt_patches) == 0:
        return ""no""
    undershirt_patch = undershirt_patches[0]
    glove_color = glove_patch.simple_query(""What color is the glove?"")
    undershirt_color = undershirt_patch.simple_query(""What color is the undershirt?"")
    return bool_to_yesno(glove_color == undershirt_color)",0
18573157,Is the juice in a cup?,Error Ejecucion: The size of tensor a (67) must match the size of tensor b (57) at non-singleton dimension 2,./data/gqa/../images/2395994.jpg,no,"def execute_command_18573157(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cup
    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    if len(juice_patches) == 0:
        return ""no""
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        return ""no""
    for juice_patch in juice_patches:
        for cup_patch in cup_patches:
            if juice_patch.cropped_image == cup_patch.cropped_image:
                return ""yes""
    return ""no""",0
3445929,Is the brown horse on the right side of the photo?,yes,./data/gqa/../images/2394426.jpg,yes,"def execute_command_3445929(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one horse patch
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    horse_patch = horse_patches[0]
    if horse_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
16541709,Where is the grass?,on the ground,./data/gqa/../images/2411098.jpg,ground,"def execute_command_16541709(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the location of the grass
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"")",0
15764335,Are there any dogs on the tan sand?,no,./data/gqa/../images/2338855.jpg,no,"def execute_command_15764335(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # tan sand
    image_patch = ImagePatch(image)
    is_dog = image_patch.exists(""dog"")
    is_tan_sand = image_patch.verify_property(""sand"", ""tan"")
    return bool_to_yesno(is_dog and is_tan_sand)",1
1478089,Are the door and the garage door made of the same material?,yes,./data/gqa/../images/2391928.jpg,no,"def execute_command_1478089(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # material is a property
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_patch = door_patches[0]
    garage_door_patches = image_patch.find(""garage door"")
    # Question assumes only one garage door patch
    if len(garage_door_patches) == 0:
        return ""no""
    garage_door_patch = garage_door_patches[0]
    return bool_to_yesno(door_patch.verify_property(""door"", ""material"") == garage_door_patch.verify_property(""garage door"", ""material""))",0
1250685,Was this picture taken in a bathroom or at a dining room?,yes,./data/gqa/../images/2342742.jpg,bathroom,"def execute_command_1250685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bathroom or dining room
    image_patch = ImagePatch(image)
    is_bathroom = image_patch.exists(""bathroom"")
    is_dining_room = image_patch.exists(""dining room"")
    return bool_to_yesno(is_bathroom or is_dining_room)",0
10436844,Is the zebra's nose soft and brown?,yes,./data/gqa/../images/2407455.jpg,yes,"def execute_command_10436844(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one zebra patch
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    zebra_patch = zebra_patches[0]
    is_nose_soft = zebra_patch.simple_query(""Is the zebra's nose soft?"")
    is_nose_brown = zebra_patch.simple_query(""Is the zebra's nose brown?"")
    return bool_to_yesno(is_nose_soft and is_nose_brown)",1
10683765,Does the shirt have blue color?,no,./data/gqa/../images/2393610.jpg,yes,"def execute_command_10683765(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""blue""))",0
1593352,Do the draperies look white and striped?,yes,./data/gqa/../images/2317027.jpg,no,"def execute_command_1593352(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a boolean
    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""drapery"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Do the draperies look white and striped?""))
    drapery_patch = drapery_patches[0]
    return bool_to_yesno(drapery_patch.simple_query(""Do the draperies look white and striped?""))",0
16553304,Are the trunks both long and wide?,yes,./data/gqa/../images/2413209.jpg,no,"def execute_command_16553304(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one trunk patch
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks both long and wide?"")
    trunk_patch = trunk_patches[0]
    is_long = trunk_patch.verify_property(""trunk"", ""long"")
    is_wide = trunk_patch.verify_property(""trunk"", ""wide"")
    return bool_to_yesno(is_long and is_wide)",0
7165102,Is the car on the left of the photo?,no,./data/gqa/../images/2369857.jpg,no,"def execute_command_7165102(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the car on the left of the photo?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?,yes,./data/gqa/../images/2406169.jpg,yes,"def execute_command_11848830(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for banana_patch in banana_patches:
        is_yellow = banana_patch.simple_query(""Is the banana yellow?"")
        is_green = banana_patch.simple_query(""Is the banana green?"")
        is_short = banana_patch.simple_query(""Is the banana short?"")
        if is_yellow and is_green and is_short:
            return ""yes""
    return ""no""",1
19279872,What is the man to the right of the helmet wearing?,vest,./data/gqa/../images/712975.jpg,hat,"def execute_command_19279872(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # helmet is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")",0
4285513,What is the color of the floor?,brown,./data/gqa/../images/2387727.jpg,light brown,"def execute_command_4285513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the floor
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor?"")",0
3974266,Do the trousers look tan?,no,./data/gqa/../images/2371457.jpg,yes,"def execute_command_3974266(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan""))",0
11595009,What are the devices to the right of the device that is to the right of the remote control?,laptop,./data/gqa/../images/2407602.jpg,earphones,"def execute_command_11595009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one remote control patch
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    remote_control_patch = remote_control_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    device_patch = device_patches[0]
    if device_patch.horizontal_center > remote_control_patch.horizontal_center:
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    right_device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(right_device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    right_device_patch = right_device_patches[0]
    if right_device_patch.horizontal_center > device_patch.horizontal_center:
        return right_device_patch.simple",0
6183000,Are there nightstands or beds?,no,./data/gqa/../images/2395834.jpg,yes,"def execute_command_6183000(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_nightstand or is_bed)",0
14143982,Is it an outdoors scene?,yes,./data/gqa/../images/2324286.jpg,yes,"def execute_command_14143982(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a PIL Image object
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is it an outdoors scene?""))",1
6123160,Are the speakers to the left of a Wii controller?,yes,./data/gqa/../images/2395059.jpg,no,"def execute_command_6123160(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one speaker and one Wii controller
    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    if len(speaker_patches) == 0:
        return ""no""
    speaker_patch = speaker_patches[0]
    wii_controller_patches = image_patch.find(""Wii controller"")
    if len(wii_controller_patches) == 0:
        return ""no""
    wii_controller_patch = wii_controller_patches[0]
    return bool_to_yesno(speaker_patch.horizontal_center < wii_controller_patch.horizontal_center)",0
3681634,Is the plastic fork in the top or in the bottom part of the photo?,top,./data/gqa/../images/2345076.jpg,top,"def execute_command_3681634(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one plastic fork
    image_patch = ImagePatch(image)
    plastic_fork_patch = image_patch.find(""plastic fork"")[0]
    if plastic_fork_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
13629530,What is the vehicle on the street?,bus,./data/gqa/../images/2324176.jpg,bus,"def execute_command_13629530(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle on the street?"")
    return vehicle_patches[0].simple_query(""What is the vehicle on the street?"")",1
1718325,Are there chairs or windows in the scene?,yes,./data/gqa/../images/2364800.jpg,yes,"def execute_command_1718325(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)",1
10607062,What color is the hat the man is in?,black,./data/gqa/../images/2404261.jpg,black,"def execute_command_10607062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # man is in the hat
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""no""
    hat_patch = hat_patches[0]
    return hat_patch.simple_query(""What color is the hat the man is in?"") # crop would include the man so keep it in the query",1
1849976,What vegetables are to the left of the spoon?,onions,./data/gqa/../images/2342679.jpg,tomatoes,"def execute_command_1849976(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one spoon
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    for spoon_patch in spoon_patches:
        vegetable_patches = image_patch.find(""vegetable"")
        for vegetable_patch in vegetable_patches:
            if vegetable_patch.horizontal_center < spoon_patch.horizontal_center:
                return vegetable_patch.simple_query(""What vegetables are to the left of the spoon?"") # crop would include the vegetable so keep it in the query
    # If no vegetable is to the left of the spoon, query the image directly
    return image_patch.simple_query(""What vegetables are to the left of the spoon?"")",0
14827816,Is the statue made of bronze or stone?,stone,./data/gqa/../images/2334605.jpg,stone,"def execute_command_14827816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one statue
    image_patch = ImagePatch(image)
    statue_patch = image_patch.find(""statue"")[0]
    return statue_patch.best_text_match([""bronze"", ""stone""])",1
857204,What's the woman wearing?,no shirt,./data/gqa/../images/2407372.jpg,dress,"def execute_command_857204(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer to ""What is the woman wearing?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the woman wearing?"")",0
2201105,Is the ball pink?,yes,./data/gqa/../images/2373240.jpg,yes,"def execute_command_2201105(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return bool_to_yesno(ball_patches[0].verify_property(""ball"", ""pink""))",1
14616023,What piece of furniture are the cords in front of?,laptop,./data/gqa/../images/713353.jpg,table,"def execute_command_14616023(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What piece of furniture are the cords in front of?"")",0
161027411,Are there both doors and windows in this photo?,no,./data/gqa/../images/2368893.jpg,yes,"def execute_command_161027411(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)",0
8249677,On which side of the image is the black car?,left,./data/gqa/../images/2386080.jpg,left,"def execute_command_8249677(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    black_car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(black_car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    if black_car_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
16184856,What is the striped animal called?,zebra,./data/gqa/../images/2356100.jpg,zebra,"def execute_command_16184856(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one striped animal
    image_patch = ImagePatch(image)
    striped_animal_patches = image_patch.find(""striped animal"")
    if len(striped_animal_patches) == 0:
        return image_patch.simple_query(""What is the striped animal called?"")
    return striped_animal_patches[0].simple_query(""What is the striped animal called?"")",1
1479068,Is it outdoors?,yes,./data/gqa/../images/2349540.jpg,yes,"def execute_command_1479068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))",1
16155046,Is the dry grass below a zebra?,yes,./data/gqa/../images/2394019.jpg,yes,"def execute_command_16155046(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one zebra patch
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the dry grass below a zebra?"")
    zebra_patch = zebra_patches[0]
    dry_grass_patches = image_patch.find(""dry grass"")
    for dry_grass_patch in dry_grass_patches:
        if dry_grass_patch.vertical_center > zebra_patch.vertical_center:
            return ""yes""
    return ""no""",1
16515071,What is the person in the water wearing?,blue,./data/gqa/../images/2402712.jpg,swimsuit,"def execute_command_16515071(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""What is the person in the water wearing?"")",0
161015042,Who is wearing the goggles?,the child,./data/gqa/../images/2414543.jpg,boy,"def execute_command_161015042(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # goggles is a noun
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the goggles?"")",0
19149868,What is pulled by the lady?,bananas,./data/gqa/../images/2361612.jpg,banana,"def execute_command_19149868(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (pulled by), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is pulled by the lady?"")",0
5199994,What's the man wearing?,black shirt,./data/gqa/../images/2413903.jpg,t-shirt,"def execute_command_5199994(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")",0
19184475,Are the man glasses on the left side of the image?,yes,./data/gqa/../images/2347169.jpg,yes,"def execute_command_19184475(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the man glasses on the left side of the image?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center < man_patch.horizontal_center:
        return ""yes""
    return ""no""",1
7149602,Is the shirt orange or blue?,blue,./data/gqa/../images/2353209.jpg,blue,"def execute_command_7149602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""orange"", ""blue""])",1
19479555,What is the person to the right of the benches holding?,bat,./data/gqa/../images/2396663.jpg,baseball bat,"def execute_command_19479555(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person and one bench
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    bench_patches = image_patch.find(""bench"")
    if len(person_patches) == 0 or len(bench_patches) == 0:
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    person_patch = person_patches[0]
    bench_patch = bench_patches[0]
    if person_patch.horizontal_center > bench_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the right of the benches holding?"")
    return ""no""",0
19273393,Are there both a door and a window in this photo?,no,./data/gqa/../images/2410350.jpg,no,"def execute_command_19273393(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # door and window are not mutually exclusive
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)",1
6481656,What is the man doing?,jumping,./data/gqa/../images/2406865.jpg,jumping,"def execute_command_6481656(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"")",1
13127703,What kind of drink is to the left of the bottle the woman is pouring?,no,./data/gqa/../images/2403783.jpg,wine,"def execute_command_13127703(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle the woman is pouring
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")
    bottle_patch = bottle_patches[0]
    drink_patches = image_patch.find(""drink"")
    # Question assumes only one drink patch
    if len(drink_patches) == 0:
        return ""no""
    drink_patch = drink_patches[0]
    if drink_patch.horizontal_center < bottle_patch.horizontal_center:
        return drink_patch.best_text_match([""water"", ""juice"", ""soda""])
    return ""no""",0
2378018,What is the toilet in front of?,bathtub,./data/gqa/../images/2390202.jpg,toilet paper,"def execute_command_2378018(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet in front of?"")",0
8430841,Is the frisbee to the left of the guy?,no,./data/gqa/../images/2371994.jpg,yes,"def execute_command_8430841(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one frisbee and one guy
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    guy_patches = image_patch.find(""guy"")
    if len(frisbee_patches) == 0 or len(guy_patches) == 0:
        return ""no""
    frisbee_patch = frisbee_patches[0]
    guy_patch = guy_patches[0]
    if frisbee_patch.horizontal_center < guy_patch.horizontal_center:
        return ""yes""
    return ""no""",0
18616818,The man is watching who?,the woman,./data/gqa/../images/2402361.jpg,woman,"def execute_command_18616818(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (watching), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is watching who?"")",1
179526,Is the white dog behind a girl?,yes,./data/gqa/../images/286099.jpg,yes,"def execute_command_179526(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the white dog behind a girl?"")",1
21018827,Is the river murky and calm?,no,./data/gqa/../images/2399964.jpg,no,"def execute_command_21018827(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # river is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the river murky and calm?"")",1
3697449,Who is wearing a shirt?,no one,./data/gqa/../images/2380464.jpg,man,"def execute_command_3697449(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing a shirt?"")
    person_patch = person_patches[0]
    is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
    if is_wearing_shirt:
        return person_patch.simple_query(""Who is wearing a shirt?"")
    return ""no one""",0
3697807,Are there both a racket and a toothbrush in the image?,no,./data/gqa/../images/2343973.jpg,no,"def execute_command_3697807(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)",1
1904643,What do both the car and the sign have in common?,nothing,./data/gqa/../images/3402.jpg,color,"def execute_command_1904643(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car and one sign
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one car and one sign patch
    if len(car_patches) == 0 or len(sign_patches) == 0:
        # If no car or sign is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patch = sign_patches[0]
    common_properties = set(car_patch.simple_query(""What properties does the car have?"").split("", "")) & set(sign_patch.simple_query(""What properties does the sign have?"").split("", ""))
    if len(common_properties) == 0:
        return ""nothing""
    return "", "".join(common_properties)",0
11764476,Which place is it?,beach,./data/gqa/../images/2334489.jpg,beach,"def execute_command_11764476(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",1
4903948,On what kind of furniture is the plate?,"Error Codigo: unterminated string literal (detected at line 14) (Codex, line 14)",./data/gqa/../images/2386929.jpg,shelf,"def execute_command_4903948(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    plate_patch = plate_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return ""no""
    furniture_patch = furniture_patches[0]
    return furniture_patch.best_text_match([""table"", ""chair"", ""sofa"", ""bed"", ""desk"", ""bookshelf"", ""dresser"", ""nightstand"", ""coffee table"", ""end table"", ""ottoman"", ""stool"", ""bench"", ""couch"", ""armchair"", ""recliner"", ""bar stool"", ""bar"", ""counter"", ""counter stool"", ""high chair"", ""playpen"", ""crib"", ""changing table"", ""dresser"", ""wardrobe"", ""closet"", ""bookcase"", ""shelf"", ""rack"", ""stand"", ""table"", ""shelf"", ""rack"", ""stand"", ""counter"", ""bar"", ""bar stool"", ""counter stool"", ""high chair"", ""playpen"", ""crib"", ""changing table"", ""dresser"", ""wardrobe"", ""closet"", ""bookcase"", ""shelf"", ""rack"", ""stand"", ""table"", ""shelf"", ""rack"", ""stand"", """,0
61022361,What is the painting that is to the left of the clock hanging on?,portrait,./data/gqa/../images/2348442.jpg,wall,"def execute_command_61022361(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")",0
1527392,"What color is the fence, tan or black?",tan,./data/gqa/../images/2317403.jpg,tan,"def execute_command_1527392(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    return fence_patches[0].best_text_match([""tan"", ""black""])",1
19229351,Do you see both bowls and carrots?,yes,./data/gqa/../images/2332488.jpg,yes,"def execute_command_19229351(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bowl and carrot are not related
    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)",1
1297082,On which side is the silver fork?,left,./data/gqa/../images/2363316.jpg,left,"def execute_command_1297082(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one fork
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    if len(fork_patches) == 0:
        return image_patch.simple_query(""On which side is the silver fork?"")
    fork_patch = fork_patches[0]
    if fork_patch.simple_query(""Is the fork on the left?"") == ""yes"":
        return ""left""
    else:
        return ""right""",1
16757832,Are there any blue helmets or napkins?,no,./data/gqa/../images/2395254.jpg,yes,"def execute_command_16757832(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.exists(""blue helmet"")
    is_blue_napkin = image_patch.exists(""blue napkin"")
    return bool_to_yesno(is_blue_helmet or is_blue_napkin)",0
839816,"In which part of the photo is the racket, the top or the bottom?",top,./data/gqa/../images/2407655.jpg,top,"def execute_command_839816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one racket patch
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
12385226,Is there a mirror in the bathroom?,no,./data/gqa/../images/2394690.jpg,no,"def execute_command_12385226(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bathroom is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a mirror in the bathroom?"")",1
18720852,Are there either blankets or tents in this picture?,no,./data/gqa/../images/2359384.jpg,no,"def execute_command_18720852(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)",1
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?,right,./data/gqa/../images/2402947.jpg,right,"def execute_command_4675139(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    woman_patch = woman_patches[0]
    cardboard_patches = image_patch.find(""cardboard box"")
    if len(cardboard_patches) == 0:
        return ""no""
    cardboard_patch = cardboard_patches[0]
    if cardboard_patch.horizontal_center > woman_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
19453453,Who is wearing a shirt?,no one,./data/gqa/../images/2394240.jpg,man,"def execute_command_19453453(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing a shirt?"")
    person_patch = person_patches[0]
    is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
    if is_wearing_shirt:
        return person_patch.simple_query(""Who is wearing a shirt?"")
    return ""no one""",0
19562503,Is the house in the bottom part or in the top of the photo?,bottom,./data/gqa/../images/2386817.jpg,bottom,"def execute_command_19562503(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one house patch
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    house_patch = house_patches[0]
    if house_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
11737187,What is in front of the flowers that look red?,table,./data/gqa/../images/2367641.jpg,couch,"def execute_command_11737187(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the flowers that look red?"")",0
15710688,Is the shirt short sleeved or sleeveless?,short sleeved,./data/gqa/../images/2402286.jpg,short sleeved,"def execute_command_15710688(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shirt is a predicate of a relational verb (wearing), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")",1
5533952,What are the white wires connected to?,kite,./data/gqa/../images/2412046.jpg,kite,"def execute_command_5533952(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one white wire
    image_patch = ImagePatch(image)
    white_wire_patches = image_patch.find(""white wire"")
    if len(white_wire_patches) == 0:
        return image_patch.simple_query(""What are the white wires connected to?"")
    white_wire_patch = white_wire_patches[0]
    return white_wire_patch.simple_query(""What are the white wires connected to?"") # crop would include the wires so keep it in the query",1
11313555,"What type of furniture is that, a table or a nightstand?",table,./data/gqa/../images/713781.jpg,table,"def execute_command_11313555(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    furniture_patch = furniture_patches[0]
    is_table = furniture_patch.simple_query(""Is the furniture a table?"")
    is_nightstand = furniture_patch.simple_query(""Is the furniture a nightstand?"")
    if is_table:
        return ""table""
    elif is_nightstand:
        return ""nightstand""
    else:
        return ""unknown""",1
10508893,What animals are in front of the trees?,giraffes,./data/gqa/../images/2398196.jpg,giraffes,"def execute_command_10508893(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one tree patch
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""What animals are in front of the trees?"")
    tree_patch = tree_patches[0]
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return ""no""
    animal_patch = animal_patches[0]
    if animal_patch.horizontal_center < tree_patch.horizontal_center:
        return animal_patch.simple_query(""What animals are in front of the trees?"")
    return ""no""",1
14501997,What is the gate made of?,wood,./data/gqa/../images/2365781.jpg,metal,"def execute_command_14501997(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # gate is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the gate made of?"")",0
45624,What color is the device on top of the table?,white,./data/gqa/../images/2365281.jpg,gray,"def execute_command_45624(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # device is a general term, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the device on top of the table?"")",0
181032044,Are these closed drawers?,yes,./data/gqa/../images/2323054.jpg,yes,"def execute_command_181032044(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one drawer patch
    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    return bool_to_yesno(drawer_patches[0].verify_property(""drawer"", ""closed""))",1
383,What kind of furniture is made of wood?,bed,./data/gqa/../images/2390913.jpg,bed,"def execute_command_383(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""What kind of furniture is made of wood?"")",1
101054962,What is the person by the bananas wearing?,an apron,./data/gqa/../images/2342539.jpg,apron,"def execute_command_101054962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    person_patch = person_patches[0]
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    for banana_patch in banana_patches:
        if banana_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.simple_query(""What is the person by the bananas wearing?"") # crop would include the bananas so keep it in the query
    return person_patch.simple_query(""What is the person by the bananas wearing?"")",1
759165,What is the color of the tower in the middle of the picture?,Error Ejecucion: 'Tensor' object has no attribute 'convert',./data/gqa/../images/882.jpg,gray,"def execute_command_759165(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a PIL Image object
    image = image.convert('RGB')
    image_array = np.array(image)
    image_patch = ImagePatch(image_array)
    tower_patches = image_patch.find(""tower"")
    # Question assumes only one tower patch
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    tower_patch = tower_patches[0]
    return tower_patch.simple_query(""What is the color of the tower in the middle of the picture?"")",0
10775539,Is this giraffe tall and white?,no,./data/gqa/../images/2390608.jpg,no,"def execute_command_10775539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # giraffe is a specific object, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is this giraffe tall and white?"")",1
19981804,On which side of the photo is the colorful screen?,left,./data/gqa/../images/2400343.jpg,left,"def execute_command_19981804(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    colorful_screen_patches = image_patch.find(""colorful screen"")
    # Question assumes only one colorful screen patch
    if len(colorful_screen_patches) == 0:
        # If no colorful screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    colorful_screen_patch = colorful_screen_patches[0]
    if colorful_screen_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
7903654,Is the tap on the left side or on the right?,left,./data/gqa/../images/2368848.jpg,left,"def execute_command_7903654(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one tap
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    tap_patch = tap_patches[0]
    if tap_patch.left < image_patch.width / 2:
        return ""left""
    else:
        return ""right""",1
6206183,Which place is it?,a store,./data/gqa/../images/2334194.jpg,store,"def execute_command_6206183(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",1
15212437,Is the coat black or beige?,black,./data/gqa/../images/1160140.jpg,black,"def execute_command_15212437(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one coat patch
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    coat_patch = coat_patches[0]
    return coat_patch.best_text_match([""black"", ""beige""])",1
13123207,Does the kite near the field look high and red?,yes,./data/gqa/../images/2400255.jpg,yes,"def execute_command_13123207(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one kite patch
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite"")
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    kite_patch = kite_patches[0]
    is_near_field = kite_patch.simple_query(""Is the kite near the field?"")
    is_high = kite_patch.simple_query(""Is the kite high?"")
    is_red = kite_patch.simple_query(""Is the kite red?"")
    return bool_to_yesno(is_near_field and is_high and is_red)",1
7740092,Are there any utensils in this picture?,yes,./data/gqa/../images/2318172.jpg,no,"def execute_command_7740092(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""utensil""))",0
8774975,What is around the guy?,white wall,./data/gqa/../images/2358921.jpg,collar,"def execute_command_8774975(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is around the guy?"")",0
17728574,Do you see bananas or cookies?,no,./data/gqa/../images/2391600.jpg,no,"def execute_command_17728574(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)",1
14274506,Is the staircase different in color than the sky?,Error Ejecucion: name 'simple_qa' is not defined,./data/gqa/../images/2401595.jpg,yes,"def execute_command_14274506(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    # Question assumes only one staircase patch
    if len(staircase_patches) == 0:
        # If no staircase is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    staircase_patch = staircase_patches[0]
    sky_patches = image_patch.find(""sky"")
    # Question assumes only one sky patch
    if len(sky_patches) == 0:
        return ""no""
    sky_patch = sky_patches[0]
    return bool_to_yesno(simple_qa(staircase_patch.cropped_image, ""Is the staircase different in color than the sky?"") != simple_qa(sky_patch.cropped_image, ""Is the staircase different in color than the sky?""))",0
1605874,What color are the containers that are on the right?,yellow,./data/gqa/../images/2395605.jpg,black,"def execute_command_1605874(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one container patch
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    container_patch = container_patches[0]
    if container_patch.horizontal_center > image_patch.horizontal_center:
        return container_patch.simple_query(""What color are the containers that are on the right?"")
    return ""no""",0
12495781,Are the people to the right or to the left of the cone that is orange?,right,./data/gqa/../images/2375066.jpg,right,"def execute_command_12495781(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one cone patch
    image_patch = ImagePatch(image)
    cone_patches = image_patch.find(""cone"")
    # Question assumes only one cone patch
    if len(cone_patches) == 0:
        # If no cone is found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    cone_patch = cone_patches[0]
    if cone_patch.simple_query(""Is the cone orange?"") == ""yes"":
        people_patches = image_patch.find(""people"")
        # Question assumes only one people patch
        if len(people_patches) == 0:
            # If no people are found, query the image directly
            return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
        people_patch = people_patches[0]
        if people_patch.horizontal_center > cone_patch.horizontal_center:
            return ""right""
        else:
            return ""left""
    return ""no""",1
14165681,"What type of clothing is light, the sweater or the cap?",sweater,./data/gqa/../images/2341698.jpg,sweater,"def execute_command_14165681(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one light clothing patch
    image_patch = ImagePatch(image)
    light_clothing_patches = image_patch.find(""light clothing"")
    if len(light_clothing_patches) == 0:
        # If no light clothing is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    light_clothing_patch = light_clothing_patches[0]
    sweater_patches = image_patch.find(""sweater"")
    cap_patches = image_patch.find(""cap"")
    if len(sweater_patches) == 0:
        return light_clothing_patch.best_text_match([""cap""])
    if len(cap_patches) == 0:
        return light_clothing_patch.best_text_match([""sweater""])
    sweater_patch = sweater_patches[0]
    cap_patch = cap_patches[0]
    if light_clothing_patch.horizontal_center > sweater_patch.horizontal_center and light_clothing_patch.horizontal_center > cap_patch.horizontal_center:
        return light_clothing_patch.best_text_match([""sweater"", ""cap""])
    elif light_clothing_patch.horizontal_center < sweater_patch.horizontal_center and light_clothing_patch.horizontal_center < cap_patch.horizontal_center:
        return light_clothing_patch.best_text_match([""cap"", ""sweater""])
    elif light_clothing_patch.horizontal_center > sweater_patch.horizontal_center:
        return light_clothing_patch.best_text_match([""sweater""])
    else:
        return light_clothing_patch.best_text_match([""cap""])",1
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?,right,./data/gqa/../images/2400343.jpg,right,"def execute_command_19982010(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl wearing jeans
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    for chair_patch in chair_patches:
        girl_patches = image_patch.find(""girl"")
        for girl_patch in girl_patches:
            if girl_patch.simple_query(""Is the girl wearing jeans?"") == ""yes"":
                if chair_patch.horizontal_center > girl_patch.horizontal_center:
                    return ""right""
                else:
                    return ""left""
    return ""no""",1
5617223,"What color is the container to the left of the horse, green or silver?",green,./data/gqa/../images/2414890.jpg,green,"def execute_command_5617223(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # container is a relation, so ask directly
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")",1
2428964,Is the water gray or teal?,teal,./data/gqa/../images/2383620.jpg,gray,"def execute_command_2428964(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one water patch
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water gray or teal?"")
    return water_patches[0].best_text_match([""gray"", ""teal""])",0
19620769,Which place is it?,titans stadium,./data/gqa/../images/2334770.jpg,stadium,"def execute_command_19620769(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
14785459,On which side of the picture is the lamp?,left,./data/gqa/../images/2370590.jpg,left,"def execute_command_14785459(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one lamp patch
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    lamp_patch = lamp_patches[0]
    if lamp_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
1325617,Does the brown animal look tiny?,yes,./data/gqa/../images/2383086.jpg,no,"def execute_command_1325617(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    animal_patch = animal_patches[0]
    if animal_patch.simple_query(""Is the animal brown?"") == ""yes"":
        return bool_to_yesno(animal_patch.simple_query(""Does the animal look tiny?""))
    return ""no""",0
5672532,Does that shirt look long sleeved?,yes,./data/gqa/../images/2373095.jpg,yes,"def execute_command_5672532(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shirt is a predicate of a property (long sleeved)
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""long sleeved""))",1
6146439,Does the box look green?,no,./data/gqa/../images/2390480.jpg,yes,"def execute_command_6146439(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""box"", ""green""))",0
1910285,Is the white container on the left of the image?,no,./data/gqa/../images/2064.jpg,yes,"def execute_command_1910285(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one white container
    image_patch = ImagePatch(image)
    white_container_patches = image_patch.find(""white container"")
    if len(white_container_patches) == 0:
        return ""no""
    white_container_patch = white_container_patches[0]
    if white_container_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no""",0
13362134,Is that shower curtain to the left of a toilet?,no,./data/gqa/../images/2387101.jpg,no,"def execute_command_13362134(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one toilet and one shower curtain
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    if len(shower_curtain_patches) == 0:
        return ""no""
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center > shower_curtain_patch.horizontal_center:
                return ""no""
    return ""yes""",1
161060488,Is there any cabinet to the right of the stove?,yes,./data/gqa/../images/2358516.jpg,yes,"def execute_command_161060488(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes stove is found
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    return ""no""",1
111055042,Is the chair on the right?,yes,./data/gqa/../images/2386495.jpg,yes,"def execute_command_111055042(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return image_patch.simple_query(""Is the chair on the right?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
151068,Which kind of clothing is white?,shirt,./data/gqa/../images/2320533.jpg,polo shirt,"def execute_command_151068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # clothing is a broad category
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    return clothing_patches[0].best_text_match([""shirt"", ""pants"", ""dress"", ""skirt"", ""socks"", ""shoes"", ""hat"", ""gloves"", ""scarf"", ""jacket"", ""coat"", ""jumpsuit"", ""swimwear"", ""underwear"", ""sleepwear"", ""accessory""]) # crop would include the clothing so keep it in the query",0
19387951,Is this place the forest or the garden?,no,./data/gqa/../images/2331403.jpg,forest,"def execute_command_19387951(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # forest and garden are not objects, but places
    image_patch = ImagePatch(image)
    is_forest = image_patch.exists(""forest"")
    is_garden = image_patch.exists(""garden"")
    return bool_to_yesno(is_forest or is_garden)",0
1781695,What's on the blanket?,dog,./data/gqa/../images/2378299.jpg,ball,"def execute_command_1781695(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What's on the blanket?"")
    return blanket_patches[0].best_text_match([""dog"", ""cat"", ""book""]) # crop would include the object on the blanket so keep it in the query",0
17699779,Is she on a bed?,no,./data/gqa/../images/2389153.jpg,no,"def execute_command_17699779(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is she on a bed?"")",1
464441,"What piece of furniture is the blanket on, a bed or a sofa?",sofa,./data/gqa/../images/2383984.jpg,sofa,"def execute_command_464441(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patch = image_patch.find(""blanket"")[0]
    bed_patches = image_patch.find(""bed"")
    sofa_patches = image_patch.find(""sofa"")
    if len(bed_patches) == 0 and len(sofa_patches) == 0:
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    if len(bed_patches) > 0 and len(sofa_patches) > 0:
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    if len(bed_patches) > 0:
        return ""bed""
    return ""sofa""",1
9505496,Are the wires above a man?,no,./data/gqa/../images/2353108.jpg,yes,"def execute_command_9505496(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patch = image_patch.find(""man"")[0]
    wires_patches = image_patch.find(""wires"")
    for wires_patch in wires_patches:
        if wires_patch.vertical_center < man_patch.vertical_center:
            return ""yes""
    return ""no""",0
4625512,What is the woman doing?,sitting,./data/gqa/../images/3947.jpg,sitting,"def execute_command_4625512(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""What is the woman doing?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""What is the woman doing?"")",1
9441941,Is the woman's hair red or black?,red,./data/gqa/../images/2315810.jpg,black,"def execute_command_9441941(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    woman_patch = woman_patches[0]
    return woman_patch.best_text_match([""red"", ""black""])",0
2387432,What's on the table?,food,./data/gqa/../images/2316448.jpg,soda can,"def execute_command_2387432(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        return image_patch.simple_query(""What's on the table?"")
    table_patch = table_patches[0]
    return table_patch.simple_query(""What's on the table?"")",0
10534717,What is the pillow on?,couch,./data/gqa/../images/2351255.jpg,sofa,"def execute_command_10534717(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pillow on?"")",0
19335685,"What fruits is the container behind of, apples or bananas?",bananas,./data/gqa/../images/2404433.jpg,bananas,"def execute_command_19335685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What fruits is the container behind of, apples or bananas?"")",1
3127817,The goat is standing in what?,grass,./data/gqa/../images/2400780.jpg,grass,"def execute_command_3127817(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one goat patch
    image_patch = ImagePatch(image)
    goat_patch = image_patch.find(""goat"")[0]
    return goat_patch.simple_query(""The goat is standing in what?"")",1
1588567,Where does the man that to the right of the mirror sit?,to the left,./data/gqa/../images/2387080.jpg,desk,"def execute_command_1588567(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one mirror patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")
    man_patch = man_patches[0]
    mirror_patches = image_patch.find(""mirror"")
    # Question assumes only one mirror patch
    if len(mirror_patches) == 0:
        return ""no""
    mirror_patch = mirror_patches[0]
    if mirror_patch.horizontal_center > man_patch.horizontal_center:
        return ""to the right""
    else:
        return ""to the left""",0
7399543,What is the floor made of?,wood,./data/gqa/../images/2385083.jpg,wood,"def execute_command_7399543(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        return image_patch.simple_query(""What is the floor made of?"")
    return floor_patches[0].simple_query(""What is the floor made of?"")",1
13741124,What kind of animal is the house behind of?,no animal,./data/gqa/../images/2382560.jpg,cat,"def execute_command_13741124(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one house patch
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""What kind of animal is the house behind of?"")
    house_patch = house_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > house_patch.horizontal_center:
            return animal_patch.simple_query(""What kind of animal is the house behind of?"")
    return ""no animal""",0
1174904,Is the cobblestone sidewalk both large and gray?,no,./data/gqa/../images/2414806.jpg,yes,"def execute_command_1174904(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # sidewalk is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")",0
13375231,What is the lettuce on?,plate,./data/gqa/../images/2319499.jpg,burger,"def execute_command_13375231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lettuce on?"")",0
1194027,Which kind of clothing is black?,suit,./data/gqa/../images/2343077.jpg,coat,"def execute_command_1194027(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # clothing is a broad category
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the color so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")",0
9963477,Is the statue wearing a dress?,no,./data/gqa/../images/2351308.jpg,yes,"def execute_command_9963477(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one statue patch
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    statue_patch = statue_patches[0]
    return bool_to_yesno(statue_patch.verify_property(""statue"", ""dress""))",0
1151995,Which side of the photo is the yellow vase on?,left,./data/gqa/../images/2376541.jpg,left,"def execute_command_1151995(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one yellow vase
    image_patch = ImagePatch(image)
    yellow_vase_patches = image_patch.find(""yellow vase"")
    if len(yellow_vase_patches) == 0:
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    yellow_vase_patch = yellow_vase_patches[0]
    if yellow_vase_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
712821,What is common to the bear and the belt?,"color, size, material, shape, texture, pattern",./data/gqa/../images/2331787.jpg,color,"def execute_command_712821(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # common to two objects
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    bear_patch = bear_patches[0]
    belt_patches = image_patch.find(""belt"")
    # Question assumes only one belt patch
    if len(belt_patches) == 0:
        return ""no""
    belt_patch = belt_patches[0]
    common_properties = []
    for property in [""color"", ""size"", ""material"", ""shape"", ""texture"", ""pattern"", ""orientation""]:
        if bear_patch.verify_property(""bear"", property) and belt_patch.verify_property(""belt"", property):
            common_properties.append(property)
    if len(common_properties) == 0:
        return ""no""
    return "", "".join(common_properties)",0
1757418,What is the vehicle to the right of the car?,motorcycle,./data/gqa/../images/2402847.jpg,suv,"def execute_command_1757418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    car_patch = car_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > car_patch.horizontal_center:
            return vehicle_patch.simple_query(""What is the vehicle to the right of the car?"")
    return image_patch.simple_query(""What is the vehicle to the right of the car?"")",0
7624100,Are the trunks that are gray wet and large?,yes,./data/gqa/../images/2338200.jpg,yes,"def execute_command_7624100(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one trunk patch
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return image_patch.simple_query(""Are the trunks that are gray wet and large?"")
    for trunk_patch in trunk_patches:
        if trunk_patch.simple_query(""Is the trunk gray?"") == ""yes"":
            if trunk_patch.simple_query(""Is the trunk wet?"") == ""yes"":
                if trunk_patch.simple_query(""Is the trunk large?"") == ""yes"":
                    return ""yes""
    return ""no""",1
1125474,"On which side of the photo is the iron fence, the right or the left?",left,./data/gqa/../images/2369578.jpg,left,"def execute_command_1125474(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one iron fence patch
    image_patch = ImagePatch(image)
    iron_fence_patches = image_patch.find(""iron fence"")
    if len(iron_fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    iron_fence_patch = iron_fence_patches[0]
    if iron_fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
1300375,What is the name of the item of furniture that the printer is on?,desk,./data/gqa/../images/4900.jpg,cabinet,"def execute_command_1300375(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one printer patch
    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    if len(printer_patches) == 0:
        # If no printer is found, query the image directly
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    printer_patch = printer_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > printer_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    return ""no""",0
5925196,What's the building covered by?,"Error Codigo: unterminated string literal (detected at line 8) (Codex, line 8)",./data/gqa/../images/2352009.jpg,window,"def execute_command_5925196(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one building
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    if len(building_patches) == 0:
        return image_patch.simple_query(""What's the building covered by?"")
    building_patch = building_patches[0]
    return building_patch.best_text_match([""tree"", ""cloud"", ""fence"", ""house"", ""car"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree"", ""tree",0
1948055,What watercraft is the white rope tying?,no,./data/gqa/../images/2340314.jpg,boat,"def execute_command_1948055(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one white rope
    image_patch = ImagePatch(image)
    white_rope_patches = image_patch.find(""white rope"")
    # Question assumes only one white rope patch
    if len(white_rope_patches) == 0:
        # If no white rope is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    white_rope_patch = white_rope_patches[0]
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        return ""no""
    watercraft_patch = watercraft_patches[0]
    if watercraft_patch.simple_query(""Is the watercraft tied by the white rope?"") == ""yes"":
        return watercraft_patch.simple_query(""What watercraft is the white rope tying?"")
    return ""no""",0
8540582,What kind of animal is in front of the leafy trees?,giraffe,./data/gqa/../images/2349160.jpg,rhino,"def execute_command_8540582(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one leafy tree patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal in front of the leafy trees?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is in front of the leafy trees?"") # crop would include the leafy trees so keep it in the query
    # If no animal is in front of the leafy trees, query the image directly
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")",0
3719411,What does the walking woman by the bus wear?,a jacket,./data/gqa/../images/2343728.jpg,coat,"def execute_command_3719411(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What does the walking woman by the bus wear?"")",0
1129508,Is the controller to the left of a pillow?,no,./data/gqa/../images/2361386.jpg,no,"def execute_command_1129508(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one controller and one pillow
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    pillow_patches = image_patch.find(""pillow"")
    if len(controller_patches) == 0 or len(pillow_patches) == 0:
        return ""no""
    controller_patch = controller_patches[0]
    pillow_patch = pillow_patches[0]
    return bool_to_yesno(controller_patch.horizontal_center < pillow_patch.horizontal_center)",1
18664084,Is there any sheep by the fence?,yes,./data/gqa/../images/2400393.jpg,yes,"def execute_command_18664084(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one fence patch
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is there any sheep by the fence?"")
    for sheep_patch in sheep_patches:
        for fence_patch in fence_patches:
            if fence_patch.horizontal_center > sheep_patch.horizontal_center:
                return ""yes""
    return ""no""",1
6912079,What animal is this?,painting,./data/gqa/../images/2321569.jpg,bull,"def execute_command_6912079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer to ""What is this?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this?"")",0
3412029,Where is the person?,outside,./data/gqa/../images/2328273.jpg,sidewalk,"def execute_command_3412029(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the location of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Where is the person?"")
    return person_patches[0].simple_query(""Where is the person?"")",0
14161122,What animal is in the water?,bull,./data/gqa/../images/2395232.jpg,cow,"def execute_command_14161122(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"")",0
1781542,What is the item of furniture to the right of the baby the parent is to the left of?,bed,./data/gqa/../images/2378299.jpg,chair,"def execute_command_1781542(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one baby and one parent
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    parent_patches = image_patch.find(""parent"")
    # Question assumes only one baby and one parent patch
    if len(baby_patches) == 0 or len(parent_patches) == 0:
        # If no baby or parent is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    baby_patch = baby_patches[0]
    parent_patch = parent_patches[0]
    if parent_patch.horizontal_center < baby_patch.horizontal_center:
        return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")
    else:
        return image_patch.simple_query(""What is the item of furniture to the left of the baby the parent is to the right of?"")",0
15699496,What is the cup that looks clean made of?,glass,./data/gqa/../images/2359214.jpg,glass,"def execute_command_15699496(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cup
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    cup_patch = cup_patches[0]
    if cup_patch.simple_query(""Is the cup clean?"") == ""yes"":
        return cup_patch.simple_query(""What is the cup made of?"")
    return ""no cup is clean""",1
12765451,What animals are to the right of the ladder?,bear,./data/gqa/../images/2325328.jpg,bears,"def execute_command_12765451(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one ladder patch
    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for ladder_patch in ladder_patches:
        animal_patches = image_patch.find(""animal"")
        for animal_patch in animal_patches:
            if animal_patch.horizontal_center > ladder_patch.horizontal_center:
                return animal_patch.simple_query(""What animals are to the right of the ladder?"") # crop would include the ladder so keep it in the query
    return ""no animals""",0
191044307,What animal is black?,cat,./data/gqa/../images/2379672.jpg,cat,"def execute_command_191044307(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal black?"") == ""yes"":
            return animal_patch.simple_query(""What animal is black?"") # crop would include the color so keep it in the query
    return ""no animal is black""",1
12639181,Who is wearing shorts?,the man,./data/gqa/../images/2323166.jpg,guy,"def execute_command_12639181(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing shorts?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Who is wearing shorts?"")",0
10630949,Is the person that is not male wearing an elbow pad?,no,./data/gqa/../images/2406643.jpg,yes,"def execute_command_10630949(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    person_patch = person_patches[0]
    is_male = person_patch.simple_query(""Is the person male?"")
    if not is_male:
        return person_patch.simple_query(""Is the person wearing an elbow pad?"")
    return ""no""",0
14544602,What is the boy holding?,bat,./data/gqa/../images/2340945.jpg,bat,"def execute_command_14544602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one boy
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    if len(boy_patches) == 0:
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    return boy_patch.simple_query(""What is the boy holding?"")",1
2986699,Of what material the dish?,plastic,./data/gqa/../images/2376081.jpg,plastic,"def execute_command_2986699(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # material of the dish
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Of what material the dish?"")",1
161013513,What kind of animal is on the street?,horse,./data/gqa/../images/2366564.jpg,horse,"def execute_command_161013513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    return animal_patches[0].simple_query(""What kind of animal is on the street?"")",1
15143936,What animal is before the roof?,horse,./data/gqa/../images/2315503.jpg,horse,"def execute_command_15143936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is before the roof?"")",1
1955043,Who is playing with the ball?,man,./data/gqa/../images/2321751.jpg,man,"def execute_command_1955043(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one ball patch
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Who is playing with the ball?"")
    ball_patch = ball_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > ball_patch.horizontal_center:
            return person_patch.simple_query(""Who is playing with the ball?"")
    return ""no one""",1
91044150,What is the name of the animals in front of the trees beside the river?,no,./data/gqa/../images/2376493.jpg,bears,"def execute_command_91044150(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one river patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")
    animal_patch = animal_patches[0]
    river_patches = image_patch.find(""river"")
    # Question assumes only one river patch
    if len(river_patches) == 0:
        return ""no""
    river_patch = river_patches[0]
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        return ""no""
    tree_patch = tree_patches[0]
    if (animal_patch.horizontal_center > river_patch.horizontal_center and
        animal_patch.horizontal_center < tree_patch.horizontal_center):
        return animal_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")
    return ""no""",0
13483129,What kind of fruit is hanging?,apple,./data/gqa/../images/2403364.jpg,apple,"def execute_command_13483129(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one fruit patch
    image_patch = ImagePatch(image)
    fruit_patches = image_patch.find(""fruit"")
    if len(fruit_patches) == 0:
        # If no fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is hanging?"")
    return fruit_patches[0].best_text_match([""apple"", ""banana"", ""orange""]) # crop would include the fruit so keep it in the query",1
7317299,What is under the bush?,chairs,./data/gqa/../images/2410083.jpg,chairs,"def execute_command_7317299(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is under the bush?"")",1
17432396,Are there kangaroos or birds in this photograph?,yes,./data/gqa/../images/2400086.jpg,yes,"def execute_command_17432396(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)",1
10457241,What is the color of the trousers?,white,./data/gqa/../images/2327197.jpg,white,"def execute_command_10457241(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the trousers
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].simple_query(""What is the color of the trousers?"")",1
2913850,Is the placemat in the bottom or in the top part?,bottom,./data/gqa/../images/2404849.jpg,bottom,"def execute_command_2913850(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one placemat
    image_patch = ImagePatch(image)
    placemat_patch = image_patch.find(""placemat"")[0]
    if placemat_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
12788747,What is covered with blanket?,bed,./data/gqa/../images/2106.jpg,bed,"def execute_command_12788747(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What is covered with blanket?"")
    return blanket_patches[0].simple_query(""What is covered with blanket?"")",1
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?,table,./data/gqa/../images/2387359.jpg,couch,"def execute_command_7343271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")",0
18673671,"In which part of the picture is the desk drawer, the bottom or the top?",bottom,./data/gqa/../images/2406438.jpg,bottom,"def execute_command_18673671(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one desk drawer
    image_patch = ImagePatch(image)
    desk_drawer_patches = image_patch.find(""desk drawer"")
    if len(desk_drawer_patches) == 0:
        # If no desk drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    desk_drawer_patch = desk_drawer_patches[0]
    if desk_drawer_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
19900141,Are there napkins or tablecloths?,no,./data/gqa/../images/2316836.jpg,no,"def execute_command_19900141(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one tablecloth
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)",1
19737232,Is the book on the right of the picture?,no,./data/gqa/../images/2386651.jpg,no,"def execute_command_19737232(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one book patch
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    if len(book_patches) == 0:
        return ""no""
    book_patch = book_patches[0]
    if book_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
475064,Who is wearing the glasses?,man,./data/gqa/../images/2356800.jpg,boy,"def execute_command_475064(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    person_patch = person_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    if person_patch.horizontal_center > glasses_patch.horizontal_center:
        return person_patch.simple_query(""Who is wearing the glasses?"")
    return glasses_patch.simple_query(""Who is wearing the glasses?"")",0
8594579,Is there a woman to the right of the orange object that is to the right of the person?,yes,./data/gqa/../images/2317886.jpg,yes,"def execute_command_8594579(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")",1
14602992,Which side of the image is the couch on?,left,./data/gqa/../images/2332695.jpg,left,"def execute_command_14602992(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    if couch_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
9944587,How tall is the man that is wearing a shirt?,tall,./data/gqa/../images/1159400.jpg,tall,"def execute_command_9944587(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # height is not a property of a man, so this is not a good example
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    man_patch = man_patches[0]
    is_wearing_shirt = (man_patch.simple_query(""Is the man wearing a shirt?"") == ""yes"")
    if is_wearing_shirt:
        return man_patch.simple_query(""How tall is the man that is wearing a shirt?"") # crop would include the shirt so keep it in the query
    return ""no""",1
13736712,Are there any giraffes?,yes,./data/gqa/../images/2337078.jpg,yes,"def execute_command_13736712(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe""))",1
6996118,The young girl is wearing what?,jeans,./data/gqa/../images/2355935.jpg,shirt,"def execute_command_6996118(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one young girl
    image_patch = ImagePatch(image)
    young_girl_patches = image_patch.find(""young girl"")
    if len(young_girl_patches) == 0:
        return image_patch.simple_query(""The young girl is wearing what?"")
    young_girl_patch = young_girl_patches[0]
    return young_girl_patch.simple_query(""The young girl is wearing what?"")",0
19992576,Is the basket on the floor small and brown?,yes,./data/gqa/../images/2376382.jpg,no,"def execute_command_19992576(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""Is the basket on the floor small and brown?"")
    basket_patch = basket_patches[0]
    is_on_floor = basket_patch.simple_query(""Is the basket on the floor?"")
    is_small = basket_patch.simple_query(""Is the basket small?"")
    is_brown = basket_patch.simple_query(""Is the basket brown?"")
    return bool_to_yesno(is_on_floor and is_small and is_brown)",0
17332401,What is the boy in front of?,a hot dog,./data/gqa/../images/2338368.jpg,deck,"def execute_command_17332401(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the boy in front of?"")",0
15586294,Which side is the leather armchair on?,right,./data/gqa/../images/2352617.jpg,right,"def execute_command_15586294(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one armchair
    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""armchair"")
    if len(armchair_patches) == 0:
        # If no armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    armchair_patch = armchair_patches[0]
    if armchair_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
15658324,What is the horse in front of?,fence,./data/gqa/../images/2404190.jpg,house,"def execute_command_15658324(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the horse in front of?"")",0
18453709,What is the item of furniture that has the same color as the controller the man is holding called?,I don't know,./data/gqa/../images/2408048.jpg,sofa,"def execute_command_18453709(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = image_patch.find(""controller"")
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    controller_patch = controller_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the item of furniture the same color as the controller the man is holding?"") == ""yes"":
            return furniture_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"") # crop would include the controller so keep it in the query
    return ""I don't know""",0
2531874,Who is playing?,man,./data/gqa/../images/2407294.jpg,man,"def execute_command_2531874(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person playing
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is playing?"")
    return person_patches[0].simple_query(""Who is playing?"")",1
3112009,Is the plate on the left side?,yes,./data/gqa/../images/2407160.jpg,yes,"def execute_command_3112009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    if len(plate_patches) == 0:
        return image_patch.simple_query(""Is the plate on the left side?"")
    plate_patch = plate_patches[0]
    if plate_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
1527613,On which side of the picture is the bag?,left,./data/gqa/../images/2363853.jpg,left,"def execute_command_1527613(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
11781054,Are both the road and the roof the same color?,yes,./data/gqa/../images/2325896.jpg,no,"def execute_command_11781054(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # road and roof are assumed to be the same color
    image_patch = ImagePatch(image)
    is_road = image_patch.exists(""road"")
    is_roof = image_patch.exists(""roof"")
    return bool_to_yesno(is_road and is_roof)",0
161027384,What is the green rug hanging on?,wall,./data/gqa/../images/2368893.jpg,wall,"def execute_command_161027384(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (hanging on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the green rug hanging on?"")",1
14153714,Who is using the laptop?,the woman,./data/gqa/../images/2347683.jpg,girl,"def execute_command_14153714(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one laptop patch
    image_patch = ImagePatch(image)
    laptop_patches = image_patch.find(""laptop"")
    if len(laptop_patches) == 0:
        # If no laptop is found, query the image directly
        return image_patch.simple_query(""Who is using the laptop?"")
    return laptop_patches[0].simple_query(""Who is using the laptop?"")",0
1969500,Who in the photo is standing?,woman,./data/gqa/../images/2408009.jpg,woman,"def execute_command_1969500(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who in the photo is standing?"")
    return person_patches[0].simple_query(""Who in the photo is standing?"")",1
693318,Do you see any plates in the photo?,no,./data/gqa/../images/2370435.jpg,no,"def execute_command_693318(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate""))",1
19613394,The person on the skateboard is wearing what?,red shirt,./data/gqa/../images/2370550.jpg,helmet,"def execute_command_19613394(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person on the skateboard
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person on a skateboard?"") == ""yes"":
            return person_patch.simple_query(""The person on the skateboard is wearing what?"") # crop would include the skateboard so keep it in the query
    return image_patch.simple_query(""The person on the skateboard is wearing what?"")",0
19927237,Is the blue car in front of the white van?,no,./data/gqa/../images/2382358.jpg,no,"def execute_command_19927237(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the blue car in front of the white van?"")",1
31054022,What is the box sitting on?,table,./data/gqa/../images/2329177.jpg,table,"def execute_command_31054022(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the box sitting on?"")",1
17634413,Does the ground look snowy and brown?,yes,./data/gqa/../images/2332188.jpg,yes,"def execute_command_17634413(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ground is a common object
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Does the ground look snowy and brown?"")
    return bool_to_yesno(ground_patches[0].verify_property(""ground"", ""snowy"") and ground_patches[0].verify_property(""ground"", ""brown""))",1
15185768,Does the sky look blue and clear?,yes,./data/gqa/../images/2348528.jpg,yes,"def execute_command_15185768(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""blue"") and image_patch.verify_property(""sky"", ""clear""))",1
1589160,Does the person that is sitting lean against a fire hydrant?,yes,./data/gqa/../images/2378861.jpg,yes,"def execute_command_1589160(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person and one fire hydrant
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    firehydrant_patches = image_patch.find(""fire hydrant"")
    if len(person_patches) == 0 or len(firehydrant_patches) == 0:
        return ""no""
    person_patch = person_patches[0]
    firehydrant_patch = firehydrant_patches[0]
    return bool_to_yesno(person_patch.simple_query(""Is the person leaning against a fire hydrant?"") == ""yes"")",1
2142522,Are there any shopping carts or mannequins in this photo?,no,./data/gqa/../images/2361766.jpg,no,"def execute_command_2142522(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shopping cart and mannequin are both objects
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)",1
17362234,Are there cages or scrub brushes in this picture?,no,./data/gqa/../images/2322487.jpg,no,"def execute_command_17362234(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)",1
4955854,Is the lamp below the chain?,no,./data/gqa/../images/2391763.jpg,yes,"def execute_command_4955854(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one lamp and one chain
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    chain_patches = image_patch.find(""chain"")
    if len(lamp_patches) == 0 or len(chain_patches) == 0:
        return image_patch.simple_query(""Is the lamp below the chain?"")
    lamp_patch = lamp_patches[0]
    chain_patch = chain_patches[0]
    return bool_to_yesno(lamp_patch.vertical_center > chain_patch.vertical_center)",0
10463545,Is the computer to the right of the other computer silver or black?,silver,./data/gqa/../images/2360654.jpg,silver,"def execute_command_10463545(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one computer patch
    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    if len(computer_patches) == 0:
        # If no computer is found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    computer_patch = computer_patches[0]
    other_computer_patches = image_patch.find(""computer"")
    if len(other_computer_patches) == 0:
        return ""no""
    other_computer_patch = other_computer_patches[0]
    if other_computer_patch.horizontal_center > computer_patch.horizontal_center:
        return computer_patch.best_text_match([""silver"", ""black""])
    return other_computer_patch.best_text_match([""silver"", ""black""])",1
2265037,What is the girl wearing?,jacket,./data/gqa/../images/2339113.jpg,boot,"def execute_command_2265037(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the first item found
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What is the girl wearing?"")",0
15485146,Are there any blue numbers or letters?,no,./data/gqa/../images/4515.jpg,no,"def execute_command_15485146(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_number = image_patch.exists(""blue number"")
    is_blue_letter = image_patch.exists(""blue letter"")
    return bool_to_yesno(is_blue_number or is_blue_letter)",1
3483992,Is the long bus to the left or to the right of the person with the backpack?,left,./data/gqa/../images/2409909.jpg,left,"def execute_command_3483992(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bus is long, person is not
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    for bus_patch in bus_patches:
        person_patches = image_patch.find(""person"")
        # Question assumes only one person patch
        if len(person_patches) == 0:
            # If no person is found, query the image directly
            return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
        person_patch = person_patches[0]
        if bus_patch.horizontal_center < person_patch.horizontal_center:
            return ""left""
        else:
            return ""right""",1
13598461,What is the device that is not on called?,television,./data/gqa/../images/2399127.jpg,remote control,"def execute_command_13598461(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    device_patch = device_patches[0]
    is_on = device_patch.simple_query(""Is the device on?"")
    if is_on:
        return device_patch.simple_query(""What is the device that is not on called?"")
    else:
        return device_patch.simple_query(""What is the device that is on called?"")",0
13885436,The sky has what color?,blue,./data/gqa/../images/2366746.jpg,blue,"def execute_command_13885436(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # sky is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The sky has what color?"")",1
7432467,Is the black container to the left of the man that is on the motorcycle?,no,./data/gqa/../images/2328240.jpg,no,"def execute_command_7432467(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")",1
19540096,Is the fire in an oven?,yes,./data/gqa/../images/2375878.jpg,yes,"def execute_command_19540096(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the fire in an oven?"")",1
18291107,The horse is where?,on the beach,./data/gqa/../images/2395783.jpg,ocean,"def execute_command_18291107(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one horse patch
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""The horse is where?"")
    horse_patch = horse_patches[0]
    return horse_patch.simple_query(""The horse is where?"")",0
5435474,Is the man that is to the left of the motorbike wearing a hat?,no,./data/gqa/../images/2343415.jpg,yes,"def execute_command_5435474(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")",0
226307,Are there any tables in the photo?,no,./data/gqa/../images/2369283.jpg,no,"def execute_command_226307(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))",1
1944826,Who is reflected in the mirror?,a woman,./data/gqa/../images/2319086.jpg,girl,"def execute_command_1944826(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one mirror
    image_patch = ImagePatch(image)
    mirror_patches = image_patch.find(""mirror"")
    if len(mirror_patches) == 0:
        return image_patch.simple_query(""Who is reflected in the mirror?"")
    mirror_patch = mirror_patches[0]
    return mirror_patch.simple_query(""Who is reflected in the mirror?"")",0
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?,pot,./data/gqa/../images/2353040.jpg,pan,"def execute_command_6199650(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one woman and one cooking utensil
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    woman_patch = woman_patches[0]
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    cooking_utensil_patch = cooking_utensil_patches[0]
    if cooking_utensil_patch.horizontal_center > woman_patch.horizontal_center:
        return cooking_utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    return cooking_utensil_patch.simple_query(""What is the cooking utensil on top of the stove that is to the left of the woman called?"")",0
18435846,What is the color of the balloon that is to the right of the backpack?,purple,./data/gqa/../images/2321647.jpg,purple,"def execute_command_18435846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one balloon and one backpack
    image_patch = ImagePatch(image)
    balloon_patches = image_patch.find(""balloon"")
    backpack_patches = image_patch.find(""backpack"")
    if len(balloon_patches) == 0 or len(backpack_patches) == 0:
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    balloon_patch = balloon_patches[0]
    backpack_patch = backpack_patches[0]
    if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
        return balloon_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")",1
8390894,Is the woman to the right of the man sitting on a sofa?,yes,./data/gqa/../images/2393431.jpg,yes,"def execute_command_8390894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman and one man
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    if len(woman_patches) == 0 or len(man_patches) == 0:
        return ""no""
    woman_patch = woman_patches[0]
    man_patch = man_patches[0]
    sofa_patches = image_patch.find(""sofa"")
    if len(sofa_patches) == 0:
        return ""no""
    for sofa_patch in sofa_patches:
        if sofa_patch.horizontal_center > man_patch.horizontal_center and sofa_patch.horizontal_center < woman_patch.horizontal_center:
            return ""yes""
    return ""no""",1
18896007,Which side of the image is the pot on?,right,./data/gqa/../images/2359495.jpg,right,"def execute_command_18896007(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
19323898,Is that pillow on a couch?,no,./data/gqa/../images/2372130.jpg,no,"def execute_command_19323898(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pillow patch
    image_patch = ImagePatch(image)
    pillow_patch = image_patch.find(""pillow"")[0]
    couch_patch = image_patch.find(""couch"")[0]
    return bool_to_yesno(pillow_patch.horizontal_center > couch_patch.horizontal_center)",1
1281034,Where are the trees?,in the background,./data/gqa/../images/2377817.jpg,hills,"def execute_command_1281034(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the location of the trees
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Where are the trees?"")
    return tree_patches[0].simple_query(""Where are the trees?"")",0
13515147,What is on the cow?,a sign,./data/gqa/../images/2397982.jpg,chain,"def execute_command_13515147(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the cow?"")",0
91036716,What is the skater doing?,doing tricks,./data/gqa/../images/2408800.jpg,riding,"def execute_command_91036716(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one skater patch
    image_patch = ImagePatch(image)
    skater_patches = image_patch.find(""skater"")
    if len(skater_patches) == 0:
        # If no skater is found, query the image directly
        return image_patch.simple_query(""What is the skater doing?"")
    skater_patch = skater_patches[0]
    return skater_patch.simple_query(""What is the skater doing?"")",0
17791510,What is the person to the left of the boy carrying?,bicycle,./data/gqa/../images/2344827.jpg,handbag,"def execute_command_17791510(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person to the left of the boy carrying?"")",0
13152020,Is the ground wet or dry?,yes,./data/gqa/../images/2404203.jpg,dry,"def execute_command_13152020(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ground is a noun, so go step by step
    image_patch = ImagePatch(image)
    is_wet = image_patch.simple_query(""Is the ground wet?"")
    return bool_to_yesno(is_wet)",0
19312096,"On which side is the purse, the left or the right?",right,./data/gqa/../images/2336491.jpg,right,"def execute_command_19312096(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one purse
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    purse_patch = purse_patches[0]
    if purse_patch.left < image_patch.left + (image_patch.right - image_patch.left) / 2:
        return ""left""
    else:
        return ""right""",1
71002343,Are there breads in this photograph?,no,./data/gqa/../images/2386067.jpg,no,"def execute_command_71002343(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bread patch
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bread""))",1
9113663,Do you see either any snow or sand that are white?,yes,./data/gqa/../images/2416419.jpg,yes,"def execute_command_9113663(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # snow and sand are white
    image_patch = ImagePatch(image)
    is_snow = image_patch.exists(""snow"")
    is_sand = image_patch.exists(""sand"")
    return bool_to_yesno(is_snow or is_sand)",1
10243612,Which place is it?,zoo,./data/gqa/../images/2394575.jpg,pen,"def execute_command_10243612(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
555062,What vegetable is to the left of the napkin?,tomato,./data/gqa/../images/2368244.jpg,onion,"def execute_command_555062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"")",0
15599523,Is the dog on the right side?,yes,./data/gqa/../images/2345386.jpg,yes,"def execute_command_15599523(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    dog_patch = dog_patches[0]
    if dog_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
101019673,What is the man wearing?,sunglasses,./data/gqa/../images/2337631.jpg,hat,"def execute_command_101019673(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"")",0
333047,Do you see any men to the right of the orange tent?,no,./data/gqa/../images/2415736.jpg,no,"def execute_command_333047(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one orange tent
    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""men"")
    # Question assumes only one men patch
    if len(men_patches) == 0:
        # If no men are found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    for men_patch in men_patches:
        orange_tent_patches = image_patch.find(""orange tent"")
        # Question assumes only one orange tent patch
        if len(orange_tent_patches) == 0:
            return ""no""
        for orange_tent_patch in orange_tent_patches:
            if men_patch.horizontal_center > orange_tent_patch.horizontal_center:
                return ""yes""
    return ""no""",1
13907796,Is the shirt striped and green?,no,./data/gqa/../images/2371222.jpg,no,"def execute_command_13907796(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shirt is a predicate of a property (striped, green, etc)
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt striped and green?"")
    shirt_patch = shirt_patches[0]
    is_striped = shirt_patch.verify_property(""shirt"", ""striped"")
    is_green = shirt_patch.verify_property(""shirt"", ""green"")
    return bool_to_yesno(is_striped and is_green)",1
17207604,Are there either bottles or shelves?,yes,./data/gqa/../images/2322049.jpg,yes,"def execute_command_17207604(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle or shelf
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)",1
1890653,What vehicle is to the right of the train on the left of the photo?,bus,./data/gqa/../images/2372833.jpg,train car,"def execute_command_1890653(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one train patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"")
    train_patch = train_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > train_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is to the right of the train on the left of the photo?"") # crop would include the train so keep it in the query
    return ""no""",0
7165131,Is that train engine small or large?,large,./data/gqa/../images/2369857.jpg,large,"def execute_command_7165131(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one train engine
    image_patch = ImagePatch(image)
    train_engine_patches = image_patch.find(""train engine"")
    if len(train_engine_patches) == 0:
        # If no train engine is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    train_engine_patch = train_engine_patches[0]
    return train_engine_patch.simple_query(""Is that train engine small or large?"")",1
21049362,Where are the railroad tracks?,in the station,./data/gqa/../images/2394610.jpg,station,"def execute_command_21049362(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # railroad tracks are a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"")",0
6224352,What is the animal looking at?,computer,./data/gqa/../images/2360401.jpg,laptop,"def execute_command_6224352(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal looking at?"")",0
14367593,What are the children playing?,soccer,./data/gqa/../images/2333221.jpg,soccer,"def execute_command_14367593(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer to the question
    image_patch = ImagePatch(image)
    children_patches = image_patch.find(""children"")
    # Question assumes only one children patch
    if len(children_patches) == 0:
        # If no children are found, query the image directly
        return image_patch.simple_query(""What are the children playing?"")
    return children_patches[0].simple_query(""What are the children playing?"") # crop would include the children so keep it in the query",1
598297,Are there combs or figurines in the picture?,no,./data/gqa/../images/2362150.jpg,no,"def execute_command_598297(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)",1
16409127,What is the wire on?,track,./data/gqa/../images/2397884.jpg,pole,"def execute_command_16409127(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"")",0
5841062,Is the tunnel small or large?,large,./data/gqa/../images/2341512.jpg,large,"def execute_command_5841062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one tunnel patch
    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    tunnel_patch = tunnel_patches[0]
    return tunnel_patch.simple_query(""Is the tunnel small or large?"")",1
17560468,Do you see trains or windows?,yes,./data/gqa/../images/2359451.jpg,yes,"def execute_command_17560468(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)",1
9321809,What is the person near the man wearing?,jeans,./data/gqa/../images/2388923.jpg,hat,"def execute_command_9321809(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    person_patch = person_patches[0]
    if abs(person_patch.horizontal_center - man_patch.horizontal_center) < 100:
        return person_patch.simple_query(""What is the person near the man wearing?"")
    return image_patch.simple_query(""What is the person near the man wearing?"")",0
12352375,Is the vehicle that is sitting down black or blue?,no,./data/gqa/../images/2361646.jpg,black,"def execute_command_12352375(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # vehicle is sitting down
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    vehicle_patch = vehicle_patches[0]
    is_sitting_down = (vehicle_patch.simple_query(""Is the vehicle sitting down?"") == ""yes"")
    if is_sitting_down:
        return vehicle_patch.best_text_match([""black"", ""blue""])
    else:
        return ""no""",0
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?,left,./data/gqa/../images/2348437.jpg,left,"def execute_command_7949280(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one shower curtain patch
    image_patch = ImagePatch(image)
    metal_trash_can_patches = image_patch.find(""metal trash can"")
    # Question assumes only one metal trash can patch
    if len(metal_trash_can_patches) == 0:
        # If no metal trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    metal_trash_can_patch = metal_trash_can_patches[0]
    white_thing_patches = image_patch.find(""white thing"")
    # Question assumes only one white thing patch
    if len(white_thing_patches) == 0:
        return ""no""
    white_thing_patch = white_thing_patches[0]
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        return ""no""
    shower_curtain_patch = shower_curtain_patches[0]
    if metal_trash_can_patch.horizontal_center < white_thing_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
5800248,Is it outdoors?,yes,./data/gqa/../images/150517.jpg,no,"def execute_command_5800248(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))",0
4604785,Does the pizza slice to the left of the pizza have large size?,no,./data/gqa/../images/2344801.jpg,yes,"def execute_command_4604785(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pizza patch
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes only one pizza patch
    if len(pizza_patches) == 0:
        # If no pizza is found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    pizza_patch = pizza_patches[0]
    pizza_slices = image_patch.find(""pizza slice"")
    # Question assumes only one pizza slice patch
    if len(pizza_slices) == 0:
        return ""no""
    for pizza_slice in pizza_slices:
        if pizza_slice.horizontal_center < pizza_patch.horizontal_center:
            return bool_to_yesno(pizza_slice.verify_property(""pizza slice"", ""large""))
    return ""no""",0
15185845,What's the man wearing?,suit,./data/gqa/../images/2348528.jpg,hat,"def execute_command_15185845(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    return man_patches[0].simple_query(""What's the man wearing?"")",0
2282232,Where is the snow?,in the mountains,./data/gqa/../images/2394560.jpg,hillside,"def execute_command_2282232(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # snow is a property of the image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"")",0
7889197,Who is wearing a shirt?,man,./data/gqa/../images/2329334.jpg,man,"def execute_command_7889197(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing a shirt?"")
    person_patch = person_patches[0]
    is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
    if is_wearing_shirt:
        return person_patch.simple_query(""Who is wearing a shirt?"")
    return ""no one""",1
11292587,Are there either any blankets or pictures in the photograph?,yes,./data/gqa/../images/2391808.jpg,no,"def execute_command_11292587(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)",0
154682,Where does the bird stand on?,the ground,./data/gqa/../images/2357415.jpg,ground,"def execute_command_154682(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on, in, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where does the bird stand on?"")",1
10435315,Is the man holding a racket?,no,./data/gqa/../images/2407451.jpg,no,"def execute_command_10435315(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    for racket_patch in racket_patches:
        if racket_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no""",1
121035887,Do the man shorts have white color?,yes,./data/gqa/../images/2366019.jpg,yes,"def execute_command_121035887(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man shorts"", ""white""))",1
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?,van,./data/gqa/../images/2349511.jpg,van,"def execute_command_10770422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man and one vehicle
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    vehicle_patch = vehicle_patches[0]
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    cow_patch = cow_patches[0]
    if vehicle_patch.horizontal_center < man_patch.horizontal_center and man_patch.horizontal_center < cow_patch.horizontal_center:
        return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")",1
19659501,What is the color of the umbrella the bird is on?,orange,./data/gqa/../images/2406733.jpg,light brown,"def execute_command_19659501(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")",0
10595217,Where is the grass?,on the ground,./data/gqa/../images/2404396.jpg,yard,"def execute_command_10595217(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the location of the grass
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Where is the grass?"")
    return grass_patches[0].simple_query(""Where is the grass?"")",0
14803743,Which kind of clothing is black?,leggings,./data/gqa/../images/2318376.jpg,pants,"def execute_command_14803743(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # clothing is a broad category
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the color so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")",0
19743238,Is the man on the right side?,no,./data/gqa/../images/1592305.jpg,no,"def execute_command_19743238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
3965204,Are the mountains covered with snow?,yes,./data/gqa/../images/2386293.jpg,yes,"def execute_command_3965204(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one mountain patch
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Are the mountains covered with snow?"")
    mountain_patch = mountain_patches[0]
    return bool_to_yesno(mountain_patch.verify_property(""mountain"", ""snow""))",1
141024710,Are there both windows and cars in the picture?,no,./data/gqa/../images/2363539.jpg,yes,"def execute_command_141024710(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)",0
6481635,What color do you think the shirt is?,red,./data/gqa/../images/2406865.jpg,orange,"def execute_command_6481635(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    return shirt_patches[0].simple_query(""What color do you think the shirt is?"")",0
3623367,What's he doing?,sleeping,./data/gqa/../images/2407473.jpg,lying,"def execute_command_3623367(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What's he doing?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""What's he doing?"")",0
15634950,Where is the giraffe in front of the hay eating from?,in front of,./data/gqa/../images/2394254.jpg,tree,"def execute_command_15634950(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one giraffe patch
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    giraffe_patch = giraffe_patches[0]
    hay_patches = image_patch.find(""hay"")
    for hay_patch in hay_patches:
        if hay_patch.horizontal_center > giraffe_patch.horizontal_center:
            return ""in front of""
    return ""behind""",0
16644500,What animal is the log pulled by?,no animal,./data/gqa/../images/2368283.jpg,elephants,"def execute_command_16644500(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one log patch
    image_patch = ImagePatch(image)
    log_patch = image_patch.find(""log"")[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > log_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the log pulled by?"") # crop would include the log so keep it in the query
    return ""no animal""",0
3202108,Which side is the car on?,right,./data/gqa/../images/2412878.jpg,right,"def execute_command_3202108(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
10137201,Are the papers in the bottom part of the picture?,no,./data/gqa/../images/2335027.jpg,no,"def execute_command_10137201(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one paper patch
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    paper_patch = paper_patches[0]
    if paper_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",1
5325670,Is the boy to the left or to the right of the person that is on the left?,left,./data/gqa/../images/2378586.jpg,right,"def execute_command_5325670(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person patch
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    boy_patch = boy_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        return ""no""
    person_patch = person_patches[0]
    if person_patch.horizontal_center < image_patch.horizontal_center:
        if boy_patch.horizontal_center < person_patch.horizontal_center:
            return ""left""
        else:
            return ""right""
    else:
        if boy_patch.horizontal_center < person_patch.horizontal_center:
            return ""right""
        else:
            return ""left""",0
8438091,The picture is what color?,black and white,./data/gqa/../images/2406323.jpg,white,"def execute_command_8438091(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is the original image
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The picture is what color?"")",0
4325939,On which side of the photo is the banana?,left,./data/gqa/../images/2326465.jpg,left,"def execute_command_4325939(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one banana patch
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    banana_patch = banana_patches[0]
    if banana_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
1425189,What is the name of the brown piece of furniture?,table,./data/gqa/../images/2404639.jpg,table,"def execute_command_1425189(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the name of the brown piece of furniture
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown"")
    # Question assumes only one brown patch
    if len(brown_patches) == 0:
        # If no brown is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    brown_patch = brown_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return ""no""
    furniture_patch = furniture_patches[0]
    if furniture_patch.horizontal_center > brown_patch.horizontal_center:
        return furniture_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return brown_patch.simple_query(""What is the name of the brown piece of furniture?"")",1
5119962,Is the man to the right of glasses?,no,./data/gqa/../images/2407415.jpg,no,"def execute_command_5119962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man and one glasses patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    glasses_patches = image_patch.find(""glasses"")
    if len(man_patches) == 0 or len(glasses_patches) == 0:
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    man_patch = man_patches[0]
    glasses_patch = glasses_patches[0]
    return bool_to_yesno(man_patch.horizontal_center > glasses_patch.horizontal_center)",1
16523418,Is the toilet lid down or up?,yes,./data/gqa/../images/2320085.jpg,up,"def execute_command_16523418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one toilet
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    toilet_patch = toilet_patches[0]
    return bool_to_yesno(toilet_patch.simple_query(""Is the toilet lid down or up?""))",0
6522554,Which kind of device does the man hold?,cell phone,./data/gqa/../images/2374402.jpg,cell phone,"def execute_command_6522554(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    device_patch = device_patches[0]
    if man_patch.horizontal_center > device_patch.horizontal_center:
        return device_patch.simple_query(""Which kind of device does the man hold?"") # crop would include the device so keep it in the query
    return man_patch.simple_query(""Which kind of device does the man hold?"")",1
870619,What is the device to the left of the person that is to the left of the television?,computer,./data/gqa/../images/2370929.jpg,screen,"def execute_command_870619(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person and one television
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    person_patch = person_patches[0]
    television_patches = image_patch.find(""television"")
    # Question assumes only one television patch
    if len(television_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    television_patch = television_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < person_patch.horizontal_center and person_patch.horizontal_center < television_patch.horizontal_center:
            return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"") # crop would include the person and the television so keep it in the query
    return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")",0
12713794,Does the woman to the left of the man wear a necklace?,yes,./data/gqa/../images/2403230.jpg,yes,"def execute_command_12713794(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man and one woman
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one man and one woman patch
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return bool_to_yesno(woman_patch.verify_property(""woman"", ""necklace""))
    return ""no""",1
824070,What is the man doing?,talking,./data/gqa/../images/2399195.jpg,talking,"def execute_command_824070(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man doing?"")",1
11593733,Which kind of furniture is right to the pillow?,bed,./data/gqa/../images/2347710.jpg,bed,"def execute_command_11593733(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one pillow patch
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is right to the pillow?"") # crop would include the pillow so keep it in the query
    # If no furniture is right to the pillow, query the image directly
    return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")",1
3357821,Does the dog to the left of the other dog look small or large?,small,./data/gqa/../images/2380239.jpg,small,"def execute_command_3357821(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one dog patch
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog_patch = dog_patches[0]
    right_dog_patch = dog_patches[1]
    if left_dog_patch.horizontal_center < right_dog_patch.horizontal_center:
        return left_dog_patch.simple_query(""Does the dog look small or large?"")
    else:
        return right_dog_patch.simple_query(""Does the dog look small or large?"")",1
338026,Are the white candles short or tall?,tall,./data/gqa/../images/2369595.jpg,tall,"def execute_command_338026(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one white candle patch
    image_patch = ImagePatch(image)
    white_candle_patches = image_patch.find(""white candle"")
    if len(white_candle_patches) == 0:
        # If no white candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    white_candle_patch = white_candle_patches[0]
    return white_candle_patch.simple_query(""Are the white candles short or tall?"")",1
15346232,What kind of fruit is the girl holding?,banana,./data/gqa/../images/2345601.jpg,banana,"def execute_command_15346232(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    girl_patch = girl_patches[0]
    fruit_patches = image_patch.find(""fruit"")
    if len(fruit_patches) == 0:
        return ""no fruit""
    fruit_patch = fruit_patches[0]
    return fruit_patch.best_text_match([""apple"", ""banana"", ""orange""]) # crop would include the fruit so keep it in the query",1
13553098,"On which side of the photo is the yellow vehicle, the right or the left?",right,./data/gqa/../images/2327453.jpg,right,"def execute_command_13553098(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one yellow vehicle
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    if len(yellow_vehicle_patches) == 0:
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    yellow_vehicle_patch = yellow_vehicle_patches[0]
    if yellow_vehicle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
81030271,Is the gray car to the right or to the left of the cart?,left,./data/gqa/../images/713056.jpg,left,"def execute_command_81030271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car and one cart
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    cart_patches = image_patch.find(""cart"")
    if len(car_patches) == 0 or len(cart_patches) == 0:
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    car_patch = car_patches[0]
    cart_patch = cart_patches[0]
    if car_patch.horizontal_center > cart_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?,pan,./data/gqa/../images/2321180.jpg,kettle,"def execute_command_1827581(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # cooking utensil is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is the cooking utensil that is to the right of the canister made of chrome?"")",0
8240699,What animal is in front of the bird?,elephant,./data/gqa/../images/2331215.jpg,elephant,"def execute_command_8240699(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the bird?"")",1
10105081,Is the fence white or green?,white,./data/gqa/../images/2375234.jpg,white,"def execute_command_10105081(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].best_text_match([""white"", ""green""])",1
13613689,Is there a train or a fence in the picture?,yes,./data/gqa/../images/1592228.jpg,yes,"def execute_command_13613689(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""train"") or image_patch.exists(""fence""))",1
10662521,What is the bottle made of?,plastic,./data/gqa/../images/2316905.jpg,plastic,"def execute_command_10662521(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle is a container
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"")",1
1152309,Which kind of fruit is on the plate?,orange,./data/gqa/../images/2376542.jpg,orange,"def execute_command_1152309(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one plate
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Which kind of fruit is on the plate?"")
    plate_patch = plate_patches[0]
    fruit_patches = image_patch.find(""fruit"")
    # Question assumes only one fruit patch
    if len(fruit_patches) == 0:
        return ""no fruit""
    fruit_patch = fruit_patches[0]
    return fruit_patch.best_text_match([""apple"", ""banana"", ""orange""]) # crop would include the fruit so keep it in the query",1
16701575,What device is to the right of the cake?,television,./data/gqa/../images/2357683.jpg,cell phone,"def execute_command_16701575(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one device and one cake
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    cake_patches = image_patch.find(""cake"")
    if len(device_patches) == 0 or len(cake_patches) == 0:
        return image_patch.simple_query(""What device is to the right of the cake?"")
    device_patch = device_patches[0]
    cake_patch = cake_patches[0]
    if device_patch.horizontal_center > cake_patch.horizontal_center:
        return device_patch.simple_query(""What device is to the right of the cake?"")
    return cake_patch.simple_query(""What device is to the right of the cake?"")",0
6572516,What material is the ceiling?,glass,./data/gqa/../images/2388570.jpg,glass,"def execute_command_6572516(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # ceiling is not a common object, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")",1
11213633,Are there both magazines and umbrellas?,no,./data/gqa/../images/2326769.jpg,no,"def execute_command_11213633(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)",1
8606777,What is the color of the egg in the middle of the picture?,yellow,./data/gqa/../images/2391115.jpg,yellow,"def execute_command_8606777(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one egg patch
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    if len(egg_patches) == 0:
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    egg_patch = egg_patches[0]
    return egg_patch.simple_query(""What is the color of the egg in the middle of the picture?"")",1
14371534,Are the gold pans on the right part or on the left?,right,./data/gqa/../images/2355898.jpg,right,"def execute_command_14371534(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pan patch
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
16538076,What does the man that is not tall wear?,shirt,./data/gqa/../images/2412554.jpg,shirt,"def execute_command_16538076(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if not man_patch.verify_property(""man"", ""tall""):
            return man_patch.simple_query(""What does the man that is not tall wear?"") # crop would include the man so keep it in the query
    # If no man is not tall, query the image directly
    return image_patch.simple_query(""What does the man that is not tall wear?"")",1
5483644,"On which side is the woman, the left or the right?",right,./data/gqa/../images/2350119.jpg,right,"def execute_command_5483644(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
181041779,What is the animal in this photograph?,cat,./data/gqa/../images/2367010.jpg,cat,"def execute_command_181041779(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer to ""What is this?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is this?"")",1
1290926,Are there either any life vests or flags?,no,./data/gqa/../images/2408133.jpg,no,"def execute_command_1290926(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one life vest and one flag
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)",1
18273738,Do you see a cup?,yes,./data/gqa/../images/2360431.jpg,yes,"def execute_command_18273738(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cup""))",1
4211922,Who is sitting on the table?,people,./data/gqa/../images/2356402.jpg,man,"def execute_command_4211922(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Who is sitting on the table?"")
    table_patch = table_patches[0]
    person_patches = image_patch.find(""person"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > table_patch.horizontal_center:
            return person_patch.simple_query(""Who is sitting on the table?"")
    return ""no one""",0
6587526,What is the color of the girl to the left of the other girl?,white,./data/gqa/../images/23.jpg,brunette,"def execute_command_6587526(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    left_girl_patch = girl_patches[0]
    right_girl_patch = None
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center > left_girl_patch.horizontal_center:
            right_girl_patch = girl_patch
    if right_girl_patch is None:
        return left_girl_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    return right_girl_patch.simple_query(""What is the color of the girl to the left of the other girl?"")",0
6599090,What is the person to the right of the car holding?,tennis racket,./data/gqa/../images/2325132.jpg,racket,"def execute_command_6599090(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car and one person
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    person_patches = image_patch.find(""person"")
    if len(car_patches) == 0 or len(person_patches) == 0:
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    car_patch = car_patches[0]
    person_patch = person_patches[0]
    if person_patch.horizontal_center > car_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the right of the car holding?"")
    return ""no""",0
1174895,What is the vehicle in the parking lot?,van,./data/gqa/../images/2414806.jpg,truck,"def execute_command_1174895(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    return vehicle_patches[0].simple_query(""What is the vehicle in the parking lot?"")",0
14755158,Who is the woman in front of?,the bride,./data/gqa/../images/2317677.jpg,child,"def execute_command_14755158(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is the woman in front of?"")",0
18349161,Where does the cow that is standing stand?,in the middle,./data/gqa/../images/2339240.jpg,ground,"def execute_command_18349161(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cow patch
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    cow_patch = cow_patches[0]
    return cow_patch.simple_query(""Where does the cow that is standing stand?"")",0
7472884,On which side is the tap?,left,./data/gqa/../images/2341053.jpg,left,"def execute_command_7472884(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one tap
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        return image_patch.simple_query(""On which side is the tap?"")
    tap_patch = tap_patches[0]
    if tap_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
111051831,On which side of the image is the cabinet?,left,./data/gqa/../images/2413467.jpg,left,"def execute_command_111051831(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    if cabinet_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
3590007,On which side of the image is the fork?,left,./data/gqa/../images/1591898.jpg,left,"def execute_command_3590007(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    if fork_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
2409726,Do you see men to the right of the bag the person is carrying?,no,./data/gqa/../images/2409472.jpg,no,"def execute_command_2409726(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    person_patch = person_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        return ""no""
    bag_patch = bag_patches[0]
    men_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(men_patches) == 0:
        return ""no""
    for man_patch in men_patches:
        if man_patch.horizontal_center > bag_patch.horizontal_center:
            return ""yes""
    return ""no""",1
577862,Are the artwork and the computer desk made of the same material?,no,./data/gqa/../images/2405119.jpg,no,"def execute_command_577862(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # material is a property
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    artwork_patch = artwork_patches[0]
    computer_desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one computer desk patch
    if len(computer_desk_patches) == 0:
        return ""no""
    computer_desk_patch = computer_desk_patches[0]
    return bool_to_yesno(artwork_patch.verify_property(""artwork"", ""material"") == computer_desk_patch.verify_property(""computer desk"", ""material""))",1
14298125,Who is playing Wii?,man,./data/gqa/../images/2369899.jpg,guy,"def execute_command_14298125(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person playing Wii
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is playing Wii?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Who is playing Wii?"")",0
9382689,What's the floor made of?,wood,./data/gqa/../images/2322855.jpg,wood,"def execute_command_9382689(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one floor patch
    image_patch = ImagePatch(image)
    floor_patches = image_patch.find(""floor"")
    if len(floor_patches) == 0:
        return image_patch.simple_query(""What's the floor made of?"")
    return floor_patches[0].simple_query(""What's the floor made of?"")",1
12889614,Who is wearing the dress?,no,./data/gqa/../images/2397488.jpg,woman,"def execute_command_12889614(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing the dress?"")
    person_patch = person_patches[0]
    dress_patches = image_patch.find(""dress"")
    # Question assumes only one dress patch
    if len(dress_patches) == 0:
        return ""no""
    for dress_patch in dress_patches:
        if dress_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.simple_query(""Who is wearing the dress?"")
    return ""no""",0
15127108,Does the tea pot above the receipt look short and white?,no,./data/gqa/../images/2390938.jpg,no,"def execute_command_15127108(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # tea pot is above the receipt
    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    # Question assumes only one tea pot patch
    if len(tea_pot_patches) == 0:
        # If no tea pot is found, query the image directly
        return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")
    tea_pot_patch = tea_pot_patches[0]
    receipt_patches = image_patch.find(""receipt"")
    # Question assumes only one receipt patch
    if len(receipt_patches) == 0:
        return ""no""
    receipt_patch = receipt_patches[0]
    if tea_pot_patch.vertical_center < receipt_patch.vertical_center:
        return bool_to_yesno(tea_pot_patch.verify_property(""tea pot"", ""short"") and tea_pot_patch.verify_property(""tea pot"", ""white""))
    return ""no""",1
15632653,Which room is it?,office,./data/gqa/../images/2351404.jpg,office,"def execute_command_15632653(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
485962,Which kind of clothing is black?,pants,./data/gqa/../images/2331832.jpg,pants,"def execute_command_485962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # clothing is a broad category
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the color so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")",1
490992,Is the fence on the left side or on the right of the picture?,right,./data/gqa/../images/2395.jpg,left,"def execute_command_490992(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.left < image_patch.left:
        return ""left""
    else:
        return ""right""",0
17133284,Do the mountains look rocky?,no,./data/gqa/../images/2347513.jpg,yes,"def execute_command_17133284(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one mountain patch
    image_patch = ImagePatch(image)
    mountain_patches = image_patch.find(""mountain"")
    if len(mountain_patches) == 0:
        # If no mountain is found, query the image directly
        return image_patch.simple_query(""Do the mountains look rocky?"")
    return bool_to_yesno(mountain_patches[0].verify_property(""mountain"", ""rocky""))",0
17573742,Is the woman to the right of the camera wearing a coat?,yes,./data/gqa/../images/2392625.jpg,yes,"def execute_command_17573742(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center > image_patch.horizontal_center:
        return bool_to_yesno(woman_patch.verify_property(""woman"", ""coat""))
    return ""no""",1
3395780,Is the vehicle to the left of the parking meter covered in rain?,yes,./data/gqa/../images/2402775.jpg,yes,"def execute_command_3395780(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one vehicle and one parking meter
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    parking_meter_patches = image_patch.find(""parking meter"")
    # Question assumes only one vehicle and one parking meter patch
    if len(vehicle_patches) == 0 or len(parking_meter_patches) == 0:
        # If no vehicle or parking meter is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    vehicle_patch = vehicle_patches[0]
    parking_meter_patch = parking_meter_patches[0]
    if vehicle_patch.horizontal_center < parking_meter_patch.horizontal_center:
        return bool_to_yesno(vehicle_patch.verify_property(""vehicle"", ""rain""))
    return ""no""",1
1542668,Is there a black laptop or desk?,yes,./data/gqa/../images/2318905.jpg,yes,"def execute_command_1542668(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_black_laptop = image_patch.exists(""black laptop"")
    is_black_desk = image_patch.exists(""black desk"")
    return bool_to_yesno(is_black_laptop or is_black_desk)",1
1655442,What type of food is to the right of the waffles that are to the right of the person?,bacon,./data/gqa/../images/2410436.jpg,egg,"def execute_command_1655442(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    person_patch = person_patches[0]
    waffles_patches = image_patch.find(""waffles"")
    # Question assumes only one waffles patch
    if len(waffles_patches) == 0:
        # If no waffles are found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    waffles_patch = waffles_patches[0]
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center > waffles_patch.horizontal_center and waffles_patch.horizontal_center > person_patch.horizontal_center:
            return food_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"") # crop would include the waffles so keep",0
395290,How large is the bag?,large,./data/gqa/../images/2368361.jpg,large,"def execute_command_395290(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the size of the bag
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    return bag_patches[0].simple_query(""How large is the bag?"")",1
16138893,Are there both motorcycles and cars in this scene?,no,./data/gqa/../images/2342301.jpg,yes,"def execute_command_16138893(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)",0
1462176,Who is wearing shorts?,the man,./data/gqa/../images/2323323.jpg,man,"def execute_command_1462176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing shorts?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Who is wearing shorts?"")",1
171032184,What hangs from the windows?,curtains,./data/gqa/../images/2377805.jpg,curtains,"def execute_command_171032184(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one window
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""What hangs from the windows?"")
    window_patch = window_patches[0]
    return window_patch.simple_query(""What hangs from the window?"") # crop would include the window so keep it in the query",1
15962394,Are there both spoons and plates in the image?,yes,./data/gqa/../images/2337344.jpg,yes,"def execute_command_15962394(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one spoon and one plate
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)",1
16184773,What is in front of the giraffe that the tree is behind of?,zebra,./data/gqa/../images/2356100.jpg,bush,"def execute_command_16184773(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")",0
8197176,What color is the jacket that the man wears?,red,./data/gqa/../images/2384012.jpg,red,"def execute_command_8197176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = image_patch.find(""jacket"")
    if len(jacket_patches) == 0:
        return ""no""
    jacket_patch = jacket_patches[0]
    return jacket_patch.simple_query(""What color is the jacket that the man wears?"")",1
3440931,What are that pieces of furniture called?,chairs,./data/gqa/../images/2365148.jpg,shelves,"def execute_command_3440931(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What are that pieces of furniture called?"")
    return furniture_patches[0].simple_query(""What are that pieces of furniture called?"")",0
337924,What is the fruit that is to the left of the chair?,cherry,./data/gqa/../images/2369595.jpg,cherry,"def execute_command_337924(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")",1
16208211,What do you think are the bowls on?,microwave,./data/gqa/../images/2338510.jpg,microwave,"def execute_command_16208211(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bowl patch
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    bowl_patch = bowl_patches[0]
    return bowl_patch.simple_query(""What do you think is the bowl on?"") # crop would include the object so keep it in the query",1
18330260,Is the sky above the trees open and clear?,yes,./data/gqa/../images/2392331.jpg,yes,"def execute_command_18330260(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # sky is above trees
    image_patch = ImagePatch(image)
    # contains a relation (above, below, etc), so ask directly
    return image_patch.simple_query(""Is the sky above the trees open and clear?"")",1
14119691,Does the squirrel to the right of the stuffed dog look white?,yes,./data/gqa/../images/2334270.jpg,no,"def execute_command_14119691(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    squirrel_patches = image_patch.find(""squirrel"")
    # Question assumes only one squirrel patch
    if len(squirrel_patches) == 0:
        # If no squirrel is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    for squirrel_patch in squirrel_patches:
        stuffed_dog_patches = image_patch.find(""stuffed dog"")
        for stuffed_dog_patch in stuffed_dog_patches:
            if stuffed_dog_patch.horizontal_center > squirrel_patch.horizontal_center:
                return bool_to_yesno(squirrel_patch.simple_query(""Does the squirrel look white?"")) # crop would include the squirrel so keep it in the query
    return ""no""",0
18437694,Does the clock to the right of the statue have gold color and tiny size?,yes,./data/gqa/../images/2380137.jpg,no,"def execute_command_18437694(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one clock patch
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Does the clock to the right of the statue have gold color and tiny size?"")
    clock_patch = clock_patches[0]
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        return ""no""
    statue_patch = statue_patches[0]
    if clock_patch.horizontal_center > statue_patch.horizontal_center:
        return bool_to_yesno(clock_patch.verify_property(""clock"", ""gold"") and clock_patch.verify_property(""clock"", ""tiny""))
    return ""no""",0
1252960,Where was the photo taken?,in the woods,./data/gqa/../images/2417745.jpg,pavement,"def execute_command_1252960(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the location of the photo
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")",0
17454895,Is there a frisbee on the grass?,yes,./data/gqa/../images/2403570.jpg,yes,"def execute_command_17454895(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there a frisbee on the grass?"")",1
13180513,Are there either cakes or containers in the photo?,yes,./data/gqa/../images/2320293.jpg,no,"def execute_command_13180513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)",0
479962,Are there black cars or motorcycles?,yes,./data/gqa/../images/2401325.jpg,yes,"def execute_command_479962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)",1
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?,behind,./data/gqa/../images/2382358.jpg,behind,"def execute_command_19927240(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one police officer
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    blue_car_patch = blue_car_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    vehicle_patch = vehicle_patches[0]
    police_officer_patches = image_patch.find(""police officer"")
    # Question assumes only one police officer patch
    if len(police_officer_patches) == 0:
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    police_officer_patch = police_officer_patches[0]
    if police_officer_patch.horizontal_center < vehicle_patch.horizontal_center:
        if blue_car_patch.horizontal_center < vehicle_patch.horizontal_center:
            return ""behind""
        else:
            return ""in front of""
    else:
        if blue_car_patch.horizontal_center < vehicle_patch.horizontal_center:
            return ""in front of""
        else:
            return ""behind""",1
5785831,What is in the glass?,soup,./data/gqa/../images/2346644.jpg,straw,"def execute_command_5785831(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the glass?"")",0
19246241,Are there any brown benches or buckets?,no,./data/gqa/../images/2363085.jpg,yes,"def execute_command_19246241(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_brown_bucket = image_patch.exists(""brown bucket"")
    return bool_to_yesno(is_brown_bench or is_brown_bucket)",0
3243803,"Where in the picture is the spoon, on the right or on the left?",right,./data/gqa/../images/2393253.jpg,right,"def execute_command_3243803(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one spoon
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    if len(spoon_patches) == 0:
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
6952486,Does the shirt look white?,yes,./data/gqa/../images/2416057.jpg,yes,"def execute_command_6952486(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))",1
17401425,Is there a bag that is not brown?,no,./data/gqa/../images/2353264.jpg,no,"def execute_command_17401425(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bag is not a relational verb
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if not bag_patch.verify_property(""bag"", ""brown""):
            return ""yes""
    return ""no""",1
481240,"Which kind of furniture is large, the shelf or the cupboard?",cupboard,./data/gqa/../images/2347977.jpg,cupboard,"def execute_command_481240(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one shelf and one cupboard
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    if len(shelf_patches) == 0 or len(cupboard_patches) == 0:
        # If no shelf or cupboard is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    shelf_patch = shelf_patches[0]
    cupboard_patch = cupboard_patches[0]
    if shelf_patch.width > cupboard_patch.width:
        return ""shelf""
    else:
        return ""cupboard""",1
8531943,Are there any screens or bags?,yes,./data/gqa/../images/2327666.jpg,no,"def execute_command_8531943(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)",0
1969545,What is she wearing?,wetsuit,./data/gqa/../images/2408009.jpg,wetsuit,"def execute_command_1969545(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is she wearing?"")
    return person_patches[0].simple_query(""What is she wearing?"")",1
91045271,"Which appliance is not white, the freezer or the ice maker?",ice maker,./data/gqa/../images/2322424.jpg,ice maker,"def execute_command_91045271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one appliance patch
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    appliance_patch = appliance_patches[0]
    is_freezer = appliance_patch.simple_query(""Is the freezer white?"")
    is_ice_maker = appliance_patch.simple_query(""Is the ice maker white?"")
    if is_freezer:
        return ""ice maker""
    elif is_ice_maker:
        return ""freezer""
    else:
        return ""both""",1
1051870,Are there chairs or tables that are not green?,no,./data/gqa/../images/2348897.jpg,no,"def execute_command_1051870(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one chair or table patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    table_patches = image_patch.find(""table"")
    # Question assumes only one chair or table patch
    if len(chair_patches) == 0 and len(table_patches) == 0:
        # If no chair or table is found, query the image directly
        return image_patch.simple_query(""Are there chairs or tables that are not green?"")
    for patch in chair_patches + table_patches:
        if not patch.verify_property(""chair"", ""green"") and not patch.verify_property(""table"", ""green""):
            return ""yes""
    return ""no""",1
1366363,Does the taxi have a different color than the truck?,no,./data/gqa/../images/2349328.jpg,no,"def execute_command_1366363(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # taxi and truck are assumed to be in the same image
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""Does the taxi have a different color than the truck?"")
    taxi_patch = taxi_patches[0]
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        return ""no""
    truck_patch = truck_patches[0]
    if taxi_patch.simple_query(""What color is the taxi?"") != truck_patch.simple_query(""What color is the truck?""):
        return ""yes""
    return ""no""",1
5460839,In which part of the image is the dog?,87.0 186.0,./data/gqa/../images/713369.jpg,left,"def execute_command_5460839(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the part of the image where the dog is
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    return str(dog_patches[0].vertical_center) + "" "" + str(dog_patches[0].horizontal_center)",0
18899476,What type of vegetable is to the right of the rice that is on the plate?,carrot,./data/gqa/../images/2404623.jpg,olive,"def execute_command_18899476(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one rice patch
    image_patch = ImagePatch(image)
    rice_patches = image_patch.find(""rice"")
    # Question assumes only one rice patch
    if len(rice_patches) == 0:
        # If no rice is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    rice_patch = rice_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return ""no""
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > rice_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    return ""no""",0
8606903,What food item is not wide?,sandwich,./data/gqa/../images/2391115.jpg,egg,"def execute_command_8606903(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one food item
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if not food_patch.verify_property(""food"", ""wide""):
            return food_patch.simple_query(""What food item is not wide?"")
    return ""no food item is not wide""",0
18394861,Are there any folding chairs or skateboards?,no,./data/gqa/../images/2351386.jpg,no,"def execute_command_18394861(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)",1
2327600,Is there an elephant near the pond?,yes,./data/gqa/../images/2392698.jpg,no,"def execute_command_2327600(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one elephant and one pond
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    if len(elephant_patches) == 0:
        return ""no""
    elephant_patch = elephant_patches[0]
    pond_patches = image_patch.find(""pond"")
    if len(pond_patches) == 0:
        return ""no""
    pond_patch = pond_patches[0]
    if abs(elephant_patch.horizontal_center - pond_patch.horizontal_center) < 100:
        return ""yes""
    return ""no""",0
1575941,Which place is it?,a river,./data/gqa/../images/2340292.jpg,river,"def execute_command_1575941(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",1
9725865,What is the color of the floor that the desk is on top of?,blue,./data/gqa/../images/1526.jpg,blue,"def execute_command_9725865(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on top of), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")",1
16654241,Is the TV on the left or on the right?,left,./data/gqa/../images/2360482.jpg,left,"def execute_command_16654241(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one TV patch
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    tv_patch = tv_patches[0]
    if tv_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
18685233,Which kind of vehicle is to the left of the flags?,car,./data/gqa/../images/2340467.jpg,cars,"def execute_command_18685233(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    vehicle_patch = vehicle_patches[0]
    flags_patches = image_patch.find(""flags"")
    if len(flags_patches) == 0:
        # If no flags are found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    for flags_patch in flags_patches:
        if vehicle_patch.horizontal_center < flags_patch.horizontal_center:
            return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"") # crop would include the flags so keep it in the query
    return ""no""",0
9796068,Are there both a fence and a sheep in the picture?,no,./data/gqa/../images/2377949.jpg,no,"def execute_command_9796068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)",1
181002473,Do you see any blue blanket or towel?,no,./data/gqa/../images/2397824.jpg,no,"def execute_command_181002473(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_blue_blanket = image_patch.exists(""blue blanket"")
    is_blue_towel = image_patch.exists(""blue towel"")
    return bool_to_yesno(is_blue_blanket or is_blue_towel)",1
1110330,Is the pillow to the left of the frog cream colored or green?,cream colored,./data/gqa/../images/498281.jpg,green,"def execute_command_1110330(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a string
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    for pillow_patch in pillow_patches:
        frog_patches = image_patch.find(""frog"")
        # Question assumes only one frog patch
        if len(frog_patches) == 0:
            # If no frog is found, query the image directly
            return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
        if pillow_patch.horizontal_center < frog_patches[0].horizontal_center:
            return pillow_patch.best_text_match([""cream colored"", ""green""])",0
511507,Is the antenna on the aircraft?,yes,./data/gqa/../images/2410567.jpg,yes,"def execute_command_511507(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # aircraft is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the antenna on the aircraft?"")",1
10464417,"In which part is the tent, the top or the bottom?",top,./data/gqa/../images/2360651.jpg,top,"def execute_command_10464417(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one tent patch
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
10816730,Is the tree in front of the building?,no,./data/gqa/../images/2375742.jpg,no,"def execute_command_10816730(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the tree in front of the building?"")",1
18766115,Who is walking?,the man,./data/gqa/../images/2396393.jpg,woman,"def execute_command_18766115(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is walking?"")
    return person_patches[0].simple_query(""Who is walking?"")",0
10625851,Are there either any fruits or plates in the image?,yes,./data/gqa/../images/2370622.jpg,yes,"def execute_command_10625851(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)",1
71018537,Is the person wearing a coat?,yes,./data/gqa/../images/2376129.jpg,yes,"def execute_command_71018537(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    person_patch = person_patches[0]
    return bool_to_yesno(person_patch.verify_property(""person"", ""coat""))",1
4194722,Is the man wearing a helmet?,yes,./data/gqa/../images/2346161.jpg,yes,"def execute_command_4194722(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""helmet""))",1
414248,"What animal are the women near the ocean riding, a pig or a horse?",horse,./data/gqa/../images/2365322.jpg,horse,"def execute_command_414248(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one woman patch
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")
    woman_patch = woman_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > woman_patch.horizontal_center:
            return animal_patch.best_text_match([""pig"", ""horse""])
    return ""no animal is near the woman""",1
683094,Who is wearing the shirt?,person,./data/gqa/../images/2347147.jpg,man,"def execute_command_683094(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""Who is wearing the shirt?"")
    return shirt_patches[0].simple_query(""Who is wearing the shirt?"")",0
12140603,What device is to the left of the headphones?,laptop,./data/gqa/../images/2359333.jpg,camera,"def execute_command_12140603(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What device is to the left of the headphones?"")",0
5575209,The flowers are where?,on the ground,./data/gqa/../images/2415237.jpg,field,"def execute_command_5575209(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one flower patch
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flower"")
    if len(flower_patches) == 0:
        # If no flower is found, query the image directly
        return image_patch.simple_query(""The flowers are where?"")
    flower_patch = flower_patches[0]
    return flower_patch.simple_query(""The flowers are where?"")",0
8773829,Which kind of furniture is made of wood?,chair,./data/gqa/../images/2315907.jpg,chair,"def execute_command_8773829(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""Which kind of furniture is made of wood?"")",1
12636428,Which kind of animal is black?,giraffe,./data/gqa/../images/2391612.jpg,zebra,"def execute_command_12636428(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal black?"") == ""yes"":
            return animal_patch.simple_query(""Which kind of animal is black?"")
    return image_patch.simple_query(""Which kind of animal is black?"")",0
1020584,What animals is the car behind of?,Error Ejecucion: 'list' object has no attribute 'horizontal_center',./data/gqa/../images/2403905.jpg,zebras,"def execute_command_1020584(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car patch
    image_patch = ImagePatch(image)
    car_patch = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patch) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What animals is the car behind of?"")
    animals_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animals_patches) == 0:
        return ""no""
    animal_patch = animals_patches[0]
    if animal_patch.horizontal_center < car_patch.horizontal_center:
        return animal_patch.simple_query(""What animals is the car behind of?"") # crop would include the car so keep it in the query
    return ""no""",0
11879418,The man is standing on what?,snowboard,./data/gqa/../images/2363398.jpg,snowboard,"def execute_command_11879418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is standing on what?"")",1
12334288,What device is to the left of the cabinet?,television,./data/gqa/../images/2320242.jpg,controller,"def execute_command_12334288(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one device and one cabinet
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    cabinet_patches = image_patch.find(""cabinet"")
    if len(device_patches) == 0 or len(cabinet_patches) == 0:
        return image_patch.simple_query(""What device is to the left of the cabinet?"")
    device_patch = device_patches[0]
    cabinet_patch = cabinet_patches[0]
    if device_patch.horizontal_center < cabinet_patch.horizontal_center:
        return device_patch.simple_query(""What device is to the left of the cabinet?"")
    return cabinet_patch.simple_query(""What device is to the left of the cabinet?"")",0
691610,Is the monitor to the left of a book?,yes,./data/gqa/../images/713796.jpg,no,"def execute_command_691610(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one monitor and one book
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    book_patches = image_patch.find(""book"")
    if len(monitor_patches) == 0 or len(book_patches) == 0:
        return ""no""
    monitor_patch = monitor_patches[0]
    book_patch = book_patches[0]
    return bool_to_yesno(monitor_patch.horizontal_center < book_patch.horizontal_center)",0
7552714,Is the color of the jacket black?,no,./data/gqa/../images/2316935.jpg,yes,"def execute_command_7552714(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return bool_to_yesno(jacket_patches[0].verify_property(""jacket"", ""black""))",0
8492422,Is the man to the left of a boy?,no,./data/gqa/../images/2360778.jpg,no,"def execute_command_8492422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man to the left of a boy?"")",1
13248061,What type of device is to the left of the keyboard in the bottom of the image?,mouse,./data/gqa/../images/2394374.jpg,speaker,"def execute_command_13248061(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one keyboard patch
    image_patch = ImagePatch(image)
    keyboard_patches = image_patch.find(""keyboard"")
    if len(keyboard_patches) == 0:
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    keyboard_patch = keyboard_patches[0]
    if keyboard_patch.vertical_center > image_patch.vertical_center:
        return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    for device_patch in image_patch.find(""device""):
        if device_patch.horizontal_center < keyboard_patch.horizontal_center:
            return device_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")
    return image_patch.simple_query(""What type of device is to the left of the keyboard in the bottom of the image?"")",0
18252454,What is common to the roof and the sky?,"Error Ejecucion: sequence item 0: expected str instance, bool found",./data/gqa/../images/2406434.jpg,color,"def execute_command_18252454(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one roof and one sky
    image_patch = ImagePatch(image)
    roof_patches = image_patch.find(""roof"")
    sky_patches = image_patch.find(""sky"")
    if len(roof_patches) == 0 or len(sky_patches) == 0:
        return image_patch.simple_query(""What is common to the roof and the sky?"")
    roof_patch = roof_patches[0]
    sky_patch = sky_patches[0]
    common_properties = set(roof_patch.verify_property(""roof"", prop) for prop in [""blue"", ""red"", ""green"", ""yellow"", ""gray"", ""white"", ""black""])
    common_properties = common_properties.intersection(set(sky_patch.verify_property(""sky"", prop) for prop in [""blue"", ""red"", ""green"", ""yellow"", ""gray"", ""white"", ""black""]))
    if len(common_properties) == 0:
        return ""nothing""
    return "", "".join(common_properties)",0
14443687,What do the cat and the book have in common?,white,./data/gqa/../images/2347201.jpg,color,"def execute_command_14443687(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cat and one book
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    book_patches = image_patch.find(""book"")
    # Question assumes only one cat and one book patch
    if len(cat_patches) == 0 or len(book_patches) == 0:
        # If no cat or book is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    cat_patch = cat_patches[0]
    book_patch = book_patches[0]
    common_properties = set(cat_patch.simple_query(""What is the cat's color?"").split("" and ""))
    common_properties.update(book_patch.simple_query(""What is the book's color?"").split("" and ""))
    return "" and "".join(common_properties)",0
14571335,Who is wearing trousers?,no,./data/gqa/../images/2388962.jpg,umpire,"def execute_command_14571335(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing trousers?"")
    person_patch = person_patches[0]
    trousers_patches = image_patch.find(""trousers"")
    if len(trousers_patches) == 0:
        return ""no""
    for trousers_patch in trousers_patches:
        if trousers_patch.horizontal_center > person_patch.horizontal_center:
            return ""no""
    return person_patch.simple_query(""Who is wearing trousers?"")",0
474885,Who wears a cap?,man,./data/gqa/../images/2317947.jpg,boy,"def execute_command_474885(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # cap is a noun
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    for cap_patch in cap_patches:
        return cap_patch.simple_query(""Who wears a cap?"") # crop would include the cap so keep it in the query",0
141013015,"What color is the toilet, brown or white?",white,./data/gqa/../images/2397007.jpg,brown,"def execute_command_141013015(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one toilet
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].best_text_match([""brown"", ""white""])",0
5515816,On which side of the image is the fence?,left,./data/gqa/../images/2405722.jpg,left,"def execute_command_5515816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # left or right
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    if fence_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
16774696,What is the surfer wearing?,blue shirt,./data/gqa/../images/2388093.jpg,shirt,"def execute_command_16774696(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one surfer
    image_patch = ImagePatch(image)
    surfer_patches = image_patch.find(""surfer"")
    if len(surfer_patches) == 0:
        return image_patch.simple_query(""What is the surfer wearing?"")
    surfer_patch = surfer_patches[0]
    return surfer_patch.simple_query(""What is the surfer wearing?"")",0
13701956,Is there any grass or sand that is not dry?,no,./data/gqa/../images/2339742.jpg,no,"def execute_command_13701956(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # not dry
    image_patch = ImagePatch(image)
    is_grass = image_patch.exists(""grass"")
    is_sand = image_patch.exists(""sand"")
    if is_grass or is_sand:
        return ""yes""
    return ""no""",1
11606870,Is there a cow or a zebra in the picture?,yes,./data/gqa/../images/2372978.jpg,yes,"def execute_command_11606870(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)",1
1589297,Does the fire hydrant look modern?,yes,./data/gqa/../images/2378861.jpg,yes,"def execute_command_1589297(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    firehydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes only one fire hydrant patch
    if len(firehydrant_patches) == 0:
        # If no fire hydrant is found, query the image directly
        return image_patch.simple_query(""Does the fire hydrant look modern?"")
    return bool_to_yesno(firehydrant_patches[0].verify_property(""fire hydrant"", ""modern""))",1
942308,Is the cup empty or full?,full,./data/gqa/../images/2379897.jpg,empty,"def execute_command_942308(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cup
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    if len(cup_patches) == 0:
        return image_patch.simple_query(""Is the cup empty or full?"")
    cup_patch = cup_patches[0]
    return cup_patch.simple_query(""Is the cup empty or full?"")",0
15815976,Is the woman wearing a scarf?,no,./data/gqa/../images/2334878.jpg,yes,"def execute_command_15815976(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the woman wearing a scarf?"")",0
3193231,Do you see either parking meters or brooms in the picture?,no,./data/gqa/../images/2361610.jpg,no,"def execute_command_3193231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # parking meter or broom
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)",1
314218,Is the sign in front of the bridge small and white?,yes,./data/gqa/../images/2357167.jpg,no,"def execute_command_314218(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Is the sign in front of the bridge small and white?"")
    sign_patch = sign_patches[0]
    is_in_front_of_bridge = sign_patch.simple_query(""Is the sign in front of the bridge?"")
    is_small = sign_patch.simple_query(""Is the sign small?"")
    is_white = sign_patch.simple_query(""Is the sign white?"")
    return bool_to_yesno(is_in_front_of_bridge and is_small and is_white)",0
18130465,Does the umbrella that is not dry look orange and open?,yes,./data/gqa/../images/2318939.jpg,no,"def execute_command_18130465(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one umbrella patch
    image_patch = ImagePatch(image)
    umbrella_patches = image_patch.find(""umbrella"")
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return image_patch.simple_query(""Does the umbrella that is not dry look orange and open?"")
    umbrella_patch = umbrella_patches[0]
    is_not_dry = umbrella_patch.simple_query(""Is the umbrella not dry?"")
    is_orange = umbrella_patch.simple_query(""Does the umbrella look orange?"")
    is_open = umbrella_patch.simple_query(""Does the umbrella look open?"")
    return bool_to_yesno(is_not_dry and is_orange and is_open)",0
7920817,What's in the paper?,news,./data/gqa/../images/2401506.jpg,donut,"def execute_command_7920817(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # paper is a container
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's in the paper?"")",0
18167292,What is on the bun in the top?,lettuce,./data/gqa/../images/2375415.jpg,lettuce,"def execute_command_18167292(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bun patch
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""What is on the bun in the top?"")
    bun_patch = bun_patches[0]
    if bun_patch.upper < image_patch.upper / 2:
        return bun_patch.simple_query(""What is on the bun in the top?"")
    else:
        return bun_patch.simple_query(""What is on the bun in the bottom?"")",1
16929928,What is the fence made of?,wood,./data/gqa/../images/2317275.jpg,wood,"def execute_command_16929928(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # fence is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")",1
14113312,Is the woman to the left or to the right of the lady?,right,./data/gqa/../images/1507.jpg,left,"def execute_command_14113312(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # lady is a woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    woman_patch = woman_patches[0]
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        return ""no""
    lady_patch = lady_patches[0]
    if woman_patch.horizontal_center < lady_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
17993299,Is the horse to the left of a car?,yes,./data/gqa/../images/2339294.jpg,yes,"def execute_command_17993299(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the horse to the left of a car?"")",1
8717022,Is the small animal to the left of the vehicle that looks silver?,no,./data/gqa/../images/2413350.jpg,yes,"def execute_command_8717022(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one small animal and one vehicle
    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    if len(small_animal_patches) == 0:
        return ""no""
    small_animal_patch = small_animal_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return ""no""
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.simple_query(""Is the vehicle silver?"") == ""yes"":
        if small_animal_patch.horizontal_center < vehicle_patch.horizontal_center:
            return ""yes""
    return ""no""",0
2998707,Which color is the chair that is on the right?,white,./data/gqa/../images/2381662.jpg,white,"def execute_command_2998707(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return chair_patch.simple_query(""Which color is the chair that is on the right?"") # crop would include the chair so keep it in the query
    return chair_patch.simple_query(""Which color is the chair that is on the left?"") # crop would include the chair so keep it in the query",1
171017786,Do you see any cups to the left of the monitor?,no,./data/gqa/../images/2344162.jpg,yes,"def execute_command_171017786(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one monitor
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    for cup_patch in cup_patches:
        if cup_patch.horizontal_center < image_patch.horizontal_center:
            return ""yes""
    return ""no""",0
2220068,Is the girl to the right or to the left of the glasses the man is wearing?,right,./data/gqa/../images/2322282.jpg,left,"def execute_command_2220068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        return ""no""
    girl_patch = girl_patches[0]
    if girl_patch.horizontal_center > glasses_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",0
1941568,What animal is in the water?,bear,./data/gqa/../images/2360440.jpg,bear,"def execute_command_1941568(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is in the water?"")
    return animal_patches[0].simple_query(""What animal is in the water?"")",1
17577787,Does the man's hair look short and white?,yes,./data/gqa/../images/2330449.jpg,yes,"def execute_command_17577787(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""short white hair""))",1
6711650,Are there chairs to the left of the bottle the toilet is to the right of?,no,./data/gqa/../images/2413428.jpg,no,"def execute_command_6711650(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bottle is to the right of the toilet
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    for chair_patch in chair_patches:
        bottle_patches = image_patch.find(""bottle"")
        for bottle_patch in bottle_patches:
            toilet_patches = image_patch.find(""toilet"")
            for toilet_patch in toilet_patches:
                if bottle_patch.horizontal_center > toilet_patch.horizontal_center and chair_patch.horizontal_center < toilet_patch.horizontal_center:
                    return ""yes""
    return ""no""",1
9825336,Which kind of furniture is the mat lying on?,table,./data/gqa/../images/2336412.jpg,table,"def execute_command_9825336(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one mat
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    return mat_patches[0].simple_query(""Which kind of furniture is the mat lying on?"")",1
11222427,Do you see fences or elephants?,yes,./data/gqa/../images/2382001.jpg,yes,"def execute_command_11222427(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)",1
1233009,"What kind of furniture is not white, the entertainment center or the bed?",bed,./data/gqa/../images/2410011.jpg,entertainment center,"def execute_command_1233009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bed and one entertainment center
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    entertainment_center_patches = image_patch.find(""entertainment center"")
    # Question assumes only one bed and one entertainment center patch
    if len(bed_patches) == 0 or len(entertainment_center_patches) == 0:
        # If no bed or entertainment center is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    bed_patch = bed_patches[0]
    entertainment_center_patch = entertainment_center_patches[0]
    if bed_patch.simple_query(""Is the bed white?"") == ""yes"":
        return entertainment_center_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    elif entertainment_center_patch.simple_query(""Is the entertainment center white?"") == ""yes"":
        return bed_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    else:
        return ""bed""",0
1152020,Do you see either any plate or tomato that are red?,yes,./data/gqa/../images/2376541.jpg,yes,"def execute_command_1152020(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # plate or tomato
    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""plate"") and image_patch.verify_property(""plate"", ""red"")
    is_red_tomato = image_patch.exists(""tomato"") and image_patch.verify_property(""tomato"", ""red"")
    return bool_to_yesno(is_red_plate or is_red_tomato)",1
8961520,Who is surfing?,a girl,./data/gqa/../images/2375358.jpg,girl,"def execute_command_8961520(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is surfing?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Who is surfing?"")",1
18106780,Which room is it?,living room,./data/gqa/../images/2411038.jpg,living room,"def execute_command_18106780(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
1892692,What color do you think the bowl that is to the right of the person is?,purple,./data/gqa/../images/2397720.jpg,pink,"def execute_command_1892692(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bowl is to the right of the person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    person_patch = person_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > person_patch.horizontal_center:
            return bowl_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"") # crop would include the bowl so keep it in the query
    # If no bowl is to the right of the person, query the image directly
    return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")",0
6952082,What color is the hair?,brown,./data/gqa/../images/2416055.jpg,gray,"def execute_command_6952082(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one hair patch
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    return hair_patches[0].simple_query(""What color is the hair?"")",0
3768067,What color is the pot the statue is to the right of?,gold,./data/gqa/../images/285673.jpg,brown,"def execute_command_3768067(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the pot the statue is to the right of?"")",0
17866761,Is the clear glass on the shelf of the table?,no,./data/gqa/../images/2412235.jpg,yes,"def execute_command_17866761(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # table is not a relation, so go step by step
    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    clear_glass_patch = clear_glass_patches[0]
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        return ""no""
    shelf_patch = shelf_patches[0]
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        return ""no""
    table_patch = table_patches[0]
    if clear_glass_patch.horizontal_center > shelf_patch.horizontal_center and clear_glass_patch.horizontal_center < table_patch.horizontal_center:
        return ""yes""
    return ""no""",0
798020,Does the skirt look black or yellow?,yellow,./data/gqa/../images/2356411.jpg,yellow,"def execute_command_798020(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # skirt is a color
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""black"", ""yellow""])",1
828981,How old is he?,not enough information,./data/gqa/../images/2403003.jpg,old,"def execute_command_828981(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""How old is he?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""How old is he?"")",0
7236463,Of what color is the book?,black,./data/gqa/../images/1592401.jpg,black,"def execute_command_7236463(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the book
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].simple_query(""Of what color is the book?"")",1
6376684,What color is the car to the left of the train car?,white,./data/gqa/../images/2352530.jpg,orange,"def execute_command_6376684(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one train car
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    for car_patch in car_patches:
        train_car_patches = image_patch.find(""train car"")
        for train_car_patch in train_car_patches:
            if train_car_patch.horizontal_center > car_patch.horizontal_center:
                return car_patch.simple_query(""What color is the car to the left of the train car?"") # crop would include the train car so keep it in the query
    # If no car is to the left of a train car, query the image directly
    return image_patch.simple_query(""What color is the car to the left of the train car?"")",0
786798,Is this a photo of a beach?,yes,./data/gqa/../images/2416197.jpg,no,"def execute_command_786798(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is a PIL Image object
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.simple_query(""Is this a photo of a beach?"")) # simple_query will return ""yes"" or ""no""",0
19836753,What vehicles are to the left of the fence?,car,./data/gqa/../images/1655.jpg,cars,"def execute_command_19836753(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one fence patch
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    for fence_patch in fence_patches:
        vehicle_patches = image_patch.find(""vehicle"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return vehicle_patch.simple_query(""What vehicle is to the left of the fence?"") # crop would include the fence so keep it in the query
    # If no vehicle is to the left of the fence, query the image directly
    return image_patch.simple_query(""What vehicles are to the left of the fence?"")",0
15284615,Who is playing?,children,./data/gqa/../images/2367184.jpg,children,"def execute_command_15284615(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person playing
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is playing?"")
    return person_patches[0].simple_query(""Who is playing?"")",1
16785170,Is the man that is walking holding a remote control?,no,./data/gqa/../images/2393941.jpg,no,"def execute_command_16785170(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man that is walking holding a remote control?"")",1
17746396,What's the boy wearing?,shirt,./data/gqa/../images/2368062.jpg,necklace,"def execute_command_17746396(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer to ""What's the boy wearing?""
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    return boy_patches[0].simple_query(""What's the boy wearing?"")",0
3625764,Is there a mug to the right of the bottle which is to the right of the tap?,no,./data/gqa/../images/1057.jpg,yes,"def execute_command_3625764(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one tap, bottle, and mug
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    if len(tap_patches) == 0:
        return ""no""
    tap_patch = tap_patches[0]
    bottle_patches = image_patch.find(""bottle"")
    if len(bottle_patches) == 0:
        return ""no""
    bottle_patch = bottle_patches[0]
    if bottle_patch.horizontal_center < tap_patch.horizontal_center:
        return ""no""
    mug_patches = image_patch.find(""mug"")
    if len(mug_patches) == 0:
        return ""no""
    for mug_patch in mug_patches:
        if mug_patch.horizontal_center > bottle_patch.horizontal_center:
            return ""yes""
    return ""no""",0
13826837,What color is the door?,white,./data/gqa/../images/2348833.jpg,black,"def execute_command_13826837(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # door is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the door?"")",0
19249907,Are there any horses in the field?,yes,./data/gqa/../images/2343183.jpg,yes,"def execute_command_19249907(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # field is a relation, so ask directly
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse""))",1
2964690,What is in front of the mountains?,water,./data/gqa/../images/2397904.jpg,fire hydrant,"def execute_command_2964690(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in front of the mountains?"")",0
13396373,Are there vehicles to the right of the truck?,no,./data/gqa/../images/2351928.jpg,no,"def execute_command_13396373(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one truck
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    truck_patch = truck_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
            return ""yes""
    return ""no""",1
493755,Does the scarf made of wool seem to be long and blue?,yes,./data/gqa/../images/2353054.jpg,yes,"def execute_command_493755(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a boolean
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?""))
    scarf_patch = scarf_patches[0]
    is_long = scarf_patch.simple_query(""Is the scarf long?"")
    is_blue = scarf_patch.simple_query(""Is the scarf blue?"")
    return bool_to_yesno(is_long and is_blue)",1
1189986,Is the man behind the elephant holding a surfboard?,no,./data/gqa/../images/2387165.jpg,no,"def execute_command_1189986(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man and one elephant
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one man and one elephant patch
    if len(man_patches) == 0 or len(elephant_patches) == 0:
        # If no man or elephant is found, query the image directly
        return image_patch.simple_query(""Is the man behind the elephant holding a surfboard?"")
    man_patch = man_patches[0]
    elephant_patch = elephant_patches[0]
    surfboard_patches = image_patch.find(""surfboard"")
    # Question assumes only one surfboard patch
    if len(surfboard_patches) == 0:
        return ""no""
    for surfboard_patch in surfboard_patches:
        if (surfboard_patch.horizontal_center > elephant_patch.horizontal_center and
            surfboard_patch.horizontal_center < man_patch.horizontal_center):
            return ""yes""
    return ""no""",1
8792466,Which color is the closed window?,white,./data/gqa/../images/2409043.jpg,white,"def execute_command_8792466(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the color of the closed window
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    for window_patch in window_patches:
        if window_patch.verify_property(""window"", ""closed""):
            return window_patch.simple_query(""Which color is the closed window?"") # crop would include the window so keep it in the query
    # If no window is closed, query the image directly
    return image_patch.simple_query(""Which color is the closed window?"")",1
10188423,Who is wearing a shirt?,the man,./data/gqa/../images/2327560.jpg,boy,"def execute_command_10188423(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing a shirt?"")
    person_patch = person_patches[0]
    is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
    if is_wearing_shirt:
        return person_patch.simple_query(""Who is wearing a shirt?"")
    return ""no one""",0
8965417,What kind of vegetable is to the right of the girl?,carrot,./data/gqa/../images/2416035.jpg,lemons,"def execute_command_8965417(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one girl patch
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    girl_patch = girl_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > girl_patch.horizontal_center:
            return vegetable_patch.best_text_match([""carrot"", ""broccoli"", ""potato""])
    return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")",0
4929965,Is there a black racket or clock in the picture?,yes,./data/gqa/../images/1592676.jpg,yes,"def execute_command_4929965(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_clock = image_patch.exists(""clock"")
    return bool_to_yesno(is_black_racket or is_clock)",1
4782038,What kind of animal is white?,horse,./data/gqa/../images/2351458.jpg,horse,"def execute_command_4782038(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal white?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is white?"") # crop would include the color so keep it in the query
    return ""no animal is white""",1
14658201,Is the sheep that looks white and brown made of plastic?,yes,./data/gqa/../images/2408154.jpg,yes,"def execute_command_14658201(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a boolean
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    sheep_patch = sheep_patches[0]
    is_white = sheep_patch.simple_query(""Is the sheep white?"")
    is_brown = sheep_patch.simple_query(""Is the sheep brown?"")
    is_plastic = sheep_patch.simple_query(""Is the sheep made of plastic?"")
    return bool_to_yesno(is_white and is_brown and is_plastic)",1
1441865,Do you see any boxes on the table under the grill?,no,./data/gqa/../images/2383269.jpg,yes,"def execute_command_1441865(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    table_patch = table_patches[0]
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        return ""no""
    box_patch = box_patches[0]
    if box_patch.vertical_center > table_patch.vertical_center and box_patch.vertical_center < table_patch.vertical_center + table_patch.height:
        return ""yes""
    return ""no""",0
1424926,What is the tag on?,the bench,./data/gqa/../images/2374543.jpg,bench,"def execute_command_1424926(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tag on?"")",1
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?,no,./data/gqa/../images/2380680.jpg,desk,"def execute_command_5543521(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person and one laptop
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    person_patch = person_patches[0]
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes only one laptop patch
    if len(laptop_patches) == 0:
        return ""no""
    laptop_patch = laptop_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > person_patch.horizontal_center and furniture_patch.horizontal_center < laptop_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    return ""no""",0
3635257,Is there any freezer in this photo?,no,./data/gqa/../images/2367211.jpg,no,"def execute_command_3635257(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # freezer is a specific object
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer""))",1
8821026,Are there either any bags or chairs?,yes,./data/gqa/../images/1591920.jpg,yes,"def execute_command_8821026(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)",1
13669952,In what vehicle is the bus driver?,bus,./data/gqa/../images/2358850.jpg,bus,"def execute_command_13669952(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bus driver is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In what vehicle is the bus driver?"")",1
17204662,What is that man in front of?,grass,./data/gqa/../images/2388260.jpg,trees,"def execute_command_17204662(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that man in front of?"")",0
380866,Are there any girls or radios?,no,./data/gqa/../images/2356972.jpg,no,"def execute_command_380866(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)",1
13775896,The girl is sitting on what?,a towel,./data/gqa/../images/2360273.jpg,blanket,"def execute_command_13775896(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The girl is sitting on what?"")",0
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?,right,./data/gqa/../images/2374558.jpg,right,"def execute_command_18798369(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pillow patch
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    for lamp_patch in lamp_patches:
        if lamp_patch.simple_query(""Is the lamp white?"") == ""yes"":
            pillow_patches = image_patch.find(""pillow"")
            # Question assumes only one pillow patch
            if len(pillow_patches) == 0:
                # If no pillow is found, query the image directly
                return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
            pillow_patch = pillow_patches[0]
            if lamp_patch.horizontal_center < pillow_patch.horizontal_center:
                return ""left""
            else:
                return ""right""
    # If no white lamp is found, query the image directly
    return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")",1
16545552,What color do you think is the vehicle the girl is washing?,"Error Codigo: unterminated string literal (detected at line 8) (Codex, line 8)",./data/gqa/../images/2408602.jpg,red,"def execute_command_16545552(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    vehicle_patch = vehicle_patches[0]
    return vehicle_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""black"", ""white"", ""gray"", ""brown"", ""purple"", ""pink"", ""orange"", ""silver"", ""gold"", ""tan"", ""beige"", ""ivory"", ""maroon"", ""navy"", ""olive"", ""teal"", ""turquoise"", ""lavender"", ""coral"", ""salmon"", ""chocolate"", ""plum"", ""fuchsia"", ""crimson"", ""scarlet"", ""emerald"", ""sapphire"", ""ruby"", ""amber"", ""bronze"", ""copper"", ""bronze"", ""rose"", ""lilac"", ""powder blue"", ""periwinkle"", ""sage"", ""mocha"", ""ivory"", ""taupe"", ""charcoal"", ""umber"", ""sepia"", ""mahogany"", ""ebony"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""ivory"", ""iv",0
16719872,Are there motorcycles to the left of the man who is wearing a hat?,no,./data/gqa/../images/2346089.jpg,no,"def execute_command_16719872(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there motorcycles to the left of the man who is wearing a hat?"")
    man_patch = man_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        return ""no""
    hat_patch = hat_patches[0]
    if man_patch.horizontal_center < hat_patch.horizontal_center:
        return ""no""
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        return ""no""
    motorcycle_patch = motorcycle_patches[0]
    if motorcycle_patch.horizontal_center < man_patch.horizontal_center:
        return ""yes""
    return ""no""",1
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?,right,./data/gqa/../images/2387508.jpg,right,"def execute_command_2954090(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one garbage can and one person
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    person_patches = image_patch.find(""person"")
    if len(garbage_can_patches) == 0 or len(person_patches) == 0:
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    garbage_can_patch = garbage_can_patches[0]
    person_patch = person_patches[0]
    if garbage_can_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
13711589,What do the truck and the street sign have in common?,,./data/gqa/../images/2375467.jpg,color,"def execute_command_13711589(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one truck and one street sign
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    street_sign_patches = image_patch.find(""street sign"")
    # Question assumes only one truck and one street sign
    if len(truck_patches) == 0 or len(street_sign_patches) == 0:
        # If no truck or street sign is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    truck_patch = truck_patches[0]
    street_sign_patch = street_sign_patches[0]
    common_properties = []
    for property in truck_patch.simple_query(""What properties does the truck have?"").split("",""):
        if property in street_sign_patch.simple_query(""What properties does the street sign have?"").split("",""):
            common_properties.append(property)
    return "", "".join(common_properties)",0
10227573,Who is wearing a shirt?,no one,./data/gqa/../images/2413021.jpg,man,"def execute_command_10227573(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is wearing a shirt?"")
    person_patch = person_patches[0]
    is_wearing_shirt = (person_patch.simple_query(""Is the person wearing a shirt?"") == ""yes"")
    if is_wearing_shirt:
        return person_patch.simple_query(""Who is wearing a shirt?"")
    return ""no one""",0
161071156,What animal is the man leading?,no animal is leading the man,./data/gqa/../images/2376032.jpg,sheep,"def execute_command_161071156(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is the man leading?"")
    man_patch = man_patches[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is the man leading?"")
    return ""no animal is leading the man""",0
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?,desk,./data/gqa/../images/2368963.jpg,drawer,"def execute_command_161036781(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")",0
7190226,Does the puddle look large?,yes,./data/gqa/../images/2404965.jpg,yes,"def execute_command_7190226(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one puddle
    image_patch = ImagePatch(image)
    puddle_patch = image_patch.find(""puddle"")[0]
    return bool_to_yesno(puddle_patch.verify_property(""puddle"", ""large""))",1
11675152,Who throws the frisbee?,woman,./data/gqa/../images/2374020.jpg,girl,"def execute_command_11675152(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one frisbee
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Who throws the frisbee?"")
    for frisbee_patch in frisbee_patches:
        person_patches = image_patch.find(""person"")
        for person_patch in person_patches:
            if person_patch.simple_query(""Is the person throwing the frisbee?"") == ""yes"":
                return person_patch.simple_query(""Who throws the frisbee?"")
    return ""no one""",0
8723676,Which kind of animal is the water on?,bear,./data/gqa/../images/2343473.jpg,bear,"def execute_command_8723676(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # water is a noun, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is the water on?"")",1
61046657,Do you think that traffic light is tall?,yes,./data/gqa/../images/45.jpg,yes,"def execute_command_61046657(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is not used
    return ""yes""",1
9581034,On which side is the wine glass?,right,./data/gqa/../images/2399046.jpg,right,"def execute_command_9581034(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one wine glass
    image_patch = ImagePatch(image)
    wine_glass_patches = image_patch.find(""wine glass"")
    if len(wine_glass_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    wine_glass_patch = wine_glass_patches[0]
    if wine_glass_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?,right,./data/gqa/../images/2397824.jpg,right,"def execute_command_181002374(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pizza patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        pizza_patches = image_patch.find(""pizza"")
        for pizza_patch in pizza_patches:
            if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
                return ""right""
            else:
                return ""left""",1
18535266,Is the face mask made of the same material as the mask?,yes,./data/gqa/../images/2332010.jpg,yes,"def execute_command_18535266(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one face mask and one mask
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    mask_patches = image_patch.find(""mask"")
    if len(face_mask_patches) == 0 or len(mask_patches) == 0:
        return ""no""
    face_mask_patch = face_mask_patches[0]
    mask_patch = mask_patches[0]
    return bool_to_yesno(face_mask_patch.verify_property(""face mask"", ""same material as"") == mask_patch.verify_property(""mask"", ""same material as""))",1
11254215,What is the tan item of furniture?,cabinet,./data/gqa/../images/498276.jpg,chair,"def execute_command_11254215(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # tan item of furniture
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tan item of furniture?"")",0
1852010,How is the device to the right of the device on the desk called?,no,./data/gqa/../images/2363550.jpg,monitor,"def execute_command_1852010(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # device is a general term
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    device_patch = device_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        return ""no""
    for device_patch in device_patches:
        if device_patch.horizontal_center > device_patch.horizontal_center:
            return device_patch.simple_query(""How is the device to the right of the device on the desk called?"") # crop would include the device so keep it in the query
    return ""no""",0
1587534,Is the device on the floor black and large?,yes,./data/gqa/../images/2333881.jpg,yes,"def execute_command_1587534(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    device_patch = device_patches[0]
    is_on_floor = device_patch.simple_query(""Is the device on the floor?"")
    is_black = device_patch.simple_query(""Is the device black?"")
    is_large = device_patch.simple_query(""Is the device large?"")
    return bool_to_yesno(is_on_floor and is_black and is_large)",1
8470757,Are there any surfboards?,no,./data/gqa/../images/2386200.jpg,no,"def execute_command_8470757(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))",1
11273949,Is the shirt white?,no,./data/gqa/../images/2352259.jpg,no,"def execute_command_11273949(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one shirt
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))",1
7475238,What's the airplane in front of?,rocks,./data/gqa/../images/2375515.jpg,mountain,"def execute_command_7475238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"")",0
16685900,Where does the horse to the right of the hose run?,across the field,./data/gqa/../images/2325337.jpg,ground,"def execute_command_16685900(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one horse and one hose
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    hose_patches = image_patch.find(""hose"")
    # Question assumes only one horse and one hose patch
    if len(horse_patches) == 0 or len(hose_patches) == 0:
        # If no horse or hose is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    horse_patch = horse_patches[0]
    hose_patch = hose_patches[0]
    if horse_patch.horizontal_center > hose_patch.horizontal_center:
        return horse_patch.simple_query(""Where does the horse run?"")
    return hose_patch.simple_query(""Where does the horse run?"")",0
3932624,Are there either any gray chairs or laptops?,no,./data/gqa/../images/2384710.jpg,yes,"def execute_command_3932624(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)",0
10584099,Is the water brown or blue?,blue,./data/gqa/../images/2408730.jpg,blue,"def execute_command_10584099(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one water patch
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return image_patch.simple_query(""Is the water brown or blue?"")
    return water_patches[0].best_text_match([""brown"", ""blue""])",1
9256263,Which kind of furniture is brown?,table,./data/gqa/../images/2376689.jpg,table,"def execute_command_9256263(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one furniture patch
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.simple_query(""Which kind of furniture is brown?"")",1
18719769,Is the man wearing glasses?,no,./data/gqa/../images/2407920.jpg,no,"def execute_command_18719769(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""glasses""))",1
18342439,What animal is white?,no animal is white,./data/gqa/../images/2414595.jpg,panda,"def execute_command_18342439(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal white?"") == ""yes"":
            return animal_patch.simple_query(""What animal is white?"") # crop would include the color so keep it in the query
    return ""no animal is white""",0
8665725,Who is wearing a coat?,the man,./data/gqa/../images/2382109.jpg,skier,"def execute_command_8665725(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a coat?"")
    person_patch = person_patches[0]
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        return ""no""
    for coat_patch in coat_patches:
        if coat_patch.horizontal_center > person_patch.horizontal_center:
            return person_patch.simple_query(""Who is wearing a coat?"")
    return ""no""",0
5440407,What vehicle isn't black?,train,./data/gqa/../images/2348770.jpg,car,"def execute_command_5440407(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one vehicle patch
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.simple_query(""Is the vehicle black?"") == ""no"":
        return vehicle_patch.simple_query(""What vehicle isn't black?"")
    return ""no vehicle is not black""",0
4104707,On which side of the picture is the oven?,right,./data/gqa/../images/2319689.jpg,right,"def execute_command_4104707(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one oven
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    if len(oven_patches) == 0:
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    oven_patch = oven_patches[0]
    if oven_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
3126763,What is common to the logo and the letter?,"blue, purple, white",./data/gqa/../images/2400784.jpg,color,"def execute_command_3126763(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns a string
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    logo_patch = logo_patches[0]
    letter_patches = image_patch.find(""letter"")
    # Question assumes only one letter patch
    if len(letter_patches) == 0:
        return ""no""
    letter_patch = letter_patches[0]
    common_properties = []
    for property in [""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""orange"", ""pink"", ""black"", ""white""]:
        if logo_patch.verify_property(""logo"", property) and letter_patch.verify_property(""letter"", property):
            common_properties.append(property)
    if len(common_properties) == 0:
        return ""no""
    return "", "".join(common_properties)",0
18640925,What animal is in the water the man is walking through?,bear,./data/gqa/../images/2347772.jpg,shark,"def execute_command_18640925(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    man_patch = image_patch.find(""man"")[0]
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > man_patch.horizontal_center:
            return animal_patch.simple_query(""What animal is in the water the man is walking through?"")
    return image_patch.simple_query(""What animal is in the water the man is walking through?"")",0
125488,What is the man wearing?,red jacket,./data/gqa/../images/1159982.jpg,hat,"def execute_command_125488(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man wearing?"")",0
5925435,What is the sidewalk made of?,concrete,./data/gqa/../images/2352009.jpg,concrete,"def execute_command_5925435(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # sidewalk is a noun
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")",1
17563472,What is the pattern of the coat?,stripes,./data/gqa/../images/2351669.jpg,striped,"def execute_command_17563472(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the pattern of the coat
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    return coat_patches[0].best_text_match([""stripes"", ""polka dots"", ""plaid""]) # crop would include the pattern so keep it in the query",0
4819547,What kind of furniture is white?,"Error Codigo: unterminated string literal (detected at line 9) (Codex, line 9)",./data/gqa/../images/4912.jpg,bed,"def execute_command_4819547(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one piece of furniture
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.best_text_match([""white"", ""brown"", ""black"", ""red"", ""blue"", ""green"", ""yellow"", ""purple"", ""gray"", ""orange"", ""pink"", ""turquoise"", ""silver"", ""gold"", ""wood"", ""metal"", ""plastic"", ""leather"", ""wooden"", ""metallic"", ""plastic"", ""leather"", ""wooden"", ""metallic"", ""plastic"", ""leather"", ""wooden"", ""metallic"", ""plastic"", ""leather"", ""wooden"", ""metallic"", ""plastic"", ""leather"", ""wooden"", ""metallic"", ""plastic"", ""leather"", ""wooden"", ""metallic"", ""plastic"", ""leather"", ""wooden"", ""metallic"", ""plastic"", ""leather"", ""wooden"", ""metallic"", ""plastic"", ""leather"", ""wooden"", ""metallic"", ""plastic"", ""leather"", ""wooden"", ""metallic"", ""plastic"", ""leather"", ""wooden"", ""metallic"", ""plastic"", ""leather"", ""wooden"", ""metal",0
14263174,What color do you think the chair that is to the right of the other chair is?,brown,./data/gqa/../images/2402329.jpg,brown,"def execute_command_14263174(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one chair patch
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    right_chair_patch = None
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > image_patch.horizontal_center:
            right_chair_patch = chair_patch
    if right_chair_patch is None:
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    return right_chair_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")",1
7515210,Is the man that is to the left of the person riding the green train in front of the fence?,no,./data/gqa/../images/2364161.jpg,yes,"def execute_command_7515210(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?"")",0
9239936,Do the cows near the trees have white color?,no,./data/gqa/../images/2410256.jpg,no,"def execute_command_9239936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one cow patch
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    cow_patch = cow_patches[0]
    tree_patches = image_patch.find(""tree"")
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    tree_patch = tree_patches[0]
    if cow_patch.horizontal_center > tree_patch.horizontal_center:
        return bool_to_yesno(cow_patch.verify_property(""cow"", ""white""))
    return bool_to_yesno(cow_patch.verify_property(""cow"", ""white""))",1
1885178,"In which part of the image is the remote control, the bottom or the top?",top,./data/gqa/../images/2374740.jpg,top,"def execute_command_1885178(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one remote control
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    if remote_control_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
12341631,Which color is the bag in the top part?,red,./data/gqa/../images/2378022.jpg,blue,"def execute_command_12341631(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bag is in the top part
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    if bag_patch.vertical_center < image_patch.vertical_center:
        return bag_patch.simple_query(""Which color is the bag in the top part?"")
    return bag_patch.simple_query(""Which color is the bag in the bottom part?"")",0
5532909,"What is the weather like, cloudless or maybe rainy?",no,./data/gqa/../images/2360826.jpg,cloudless,"def execute_command_5532909(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # cloudless or rainy
    image_patch = ImagePatch(image)
    is_cloudless = image_patch.exists(""cloudless"")
    is_rainy = image_patch.exists(""rainy"")
    return bool_to_yesno(is_cloudless or is_rainy)",0
2618222,What is connected to the open laptop?,mouse,./data/gqa/../images/2361858.jpg,cord,"def execute_command_2618222(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is connected to the open laptop?"")",0
3252220,Of which color is the shirt the man wears?,black,./data/gqa/../images/2345859.jpg,gray,"def execute_command_3252220(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shirt is not a property of the man
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        return ""no""
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""Of which color is the shirt the man wears?"") # crop would include the shirt so keep it in the query",0
8947801,What is in the vase?,a plant,./data/gqa/../images/2395512.jpg,plant,"def execute_command_8947801(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (in), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the vase?"")",1
10841562,Is the color of the pants the same as the shorts?,no,./data/gqa/../images/912.jpg,yes,"def execute_command_10841562(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    pants_color = pants_patches[0].simple_query(""What color are the pants?"")
    shorts_patches = image_patch.find(""shorts"")
    # Question assumes only one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    shorts_color = shorts_patches[0].simple_query(""What color are the shorts?"")
    return bool_to_yesno(pants_color == shorts_color)",0
15511838,What kind of furniture is to the left of the bucket?,table,./data/gqa/../images/2384300.jpg,shelf,"def execute_command_15511838(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one bucket patch
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")
    bucket_patch = bucket_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center < bucket_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is to the left of the bucket?"") # crop would include the furniture so keep it in the query
    return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")",0
14495306,Is there any racket to the right of the person that the woman is to the left of?,no,./data/gqa/../images/2374540.jpg,no,"def execute_command_14495306(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")",1
14841932,Do the tiles have square shape and black color?,no,./data/gqa/../images/2385350.jpg,no,"def execute_command_14841932(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    tiles_patches = image_patch.find(""tiles"")
    # Question assumes only one tile patch
    if len(tiles_patches) == 0:
        # If no tile is found, query the image directly
        return image_patch.simple_query(""Do the tiles have square shape and black color?"")
    tile_patch = tiles_patches[0]
    return bool_to_yesno(tile_patch.verify_property(""tiles"", ""square"") and tile_patch.verify_property(""tiles"", ""black""))",1
41029381,What is the vehicle that is the same color as the shirt called?,I don't know,./data/gqa/../images/2320665.jpg,van,"def execute_command_41029381(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one vehicle and one shirt
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    shirt_patches = image_patch.find(""shirt"")
    if len(vehicle_patches) == 0 or len(shirt_patches) == 0:
        return image_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    vehicle_patch = vehicle_patches[0]
    shirt_patch = shirt_patches[0]
    if vehicle_patch.best_text_match([""red"", ""blue"", ""green""]) == shirt_patch.best_text_match([""red"", ""blue"", ""green""]):
        return vehicle_patch.simple_query(""What is the vehicle that is the same color as the shirt called?"")
    return ""I don't know""",0
161027428,Are there both windows and doors in the image?,no,./data/gqa/../images/2368893.jpg,yes,"def execute_command_161027428(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",0
16478246,Does the pillow to the right of the man have green color and large size?,no,./data/gqa/../images/2330311.jpg,yes,"def execute_command_16478246(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one man patch
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        return ""no""
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""))
    return ""no""",0
9450308,Is the happy person wearing a hat?,no,./data/gqa/../images/2362787.jpg,no,"def execute_command_9450308(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one happy person
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy"")
    if len(happy_patches) == 0:
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    happy_patch = happy_patches[0]
    hat_patches = image_patch.find(""hat"")
    if len(hat_patches) == 0:
        return ""no""
    for hat_patch in hat_patches:
        if hat_patch.horizontal_center > happy_patch.horizontal_center:
            return ""yes""
    return ""no""",1
11850389,What place is this?,Error Ejecucion: ImagePatch.simple_query() missing 1 required positional argument: 'question',./data/gqa/../images/2365727.jpg,road,"def execute_command_11850389(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the answer to ""What is this?""
    image_patch = ImagePatch(image)
    return image_patch.simple_query() # returns the answer to ""What is this?"" by default",0
17250452,What kind of appliance is on the right of the drawer?,microwave,./data/gqa/../images/2411357.jpg,oven,"def execute_command_17250452(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one appliance and one drawer
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")
    appliance_patch = appliance_patches[0]
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        return ""no""
    drawer_patch = drawer_patches[0]
    if appliance_patch.horizontal_center > drawer_patch.horizontal_center:
        return appliance_patch.best_text_match([""microwave"", ""dishwasher"", ""refrigerator""])
    return ""no""",0
14857961,Is the lady to the right of a woman?,yes,./data/gqa/../images/2388625.jpg,no,"def execute_command_14857961(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # lady and woman are the same object
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    for lady_patch in lady_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center > lady_patch.horizontal_center:
                return ""yes""
    return ""no""",0
132385,What cooking utensils are to the left of the pan on the right side?,pan,./data/gqa/../images/2324466.jpg,ladles,"def execute_command_132385(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one pan on the right
    image_patch = ImagePatch(image)
    cooking_utensils_patches = image_patch.find(""cooking utensils"")
    # Question assumes only one cooking utensils patch
    if len(cooking_utensils_patches) == 0:
        # If no cooking utensils are found, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    cooking_utensils_patch = cooking_utensils_patches[0]
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        return ""no""
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center > image_patch.horizontal_center:
        return cooking_utensils_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return ""no""",0
9745131,Which color is the truck that is to the left of the lamps?,red,./data/gqa/../images/2382208.jpg,green,"def execute_command_9745131(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")",0
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?,no,./data/gqa/../images/2387752.jpg,eagle,"def execute_command_5546009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # image is the original image
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    bird_patch = bird_patches[0]
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        return ""no""
    motorcycle_patch = motorcycle_patches[0]
    if bird_patch.best_text_match([""red"", ""blue"", ""green""]) == motorcycle_patch.best_text_match([""red"", ""blue"", ""green""]):
        return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    return ""no""",0
867818,Is the man on the skateboard?,yes,./data/gqa/../images/2413471.jpg,yes,"def execute_command_867818(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the man on the skateboard?"")",1
13896221,What is on the table?,pizza,./data/gqa/../images/2345610.jpg,candle,"def execute_command_13896221(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one table patch
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""What is on the table?"")
    table_patch = table_patches[0]
    return table_patch.simple_query(""What is on the table?"")",0
1964517,What is the food that is above the white paper?,pizza,./data/gqa/../images/2410495.jpg,pizza,"def execute_command_1964517(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one white paper patch
    image_patch = ImagePatch(image)
    white_paper_patches = image_patch.find(""white paper"")
    if len(white_paper_patches) == 0:
        # If no white paper is found, query the image directly
        return image_patch.simple_query(""What is the food that is above the white paper?"")
    white_paper_patch = white_paper_patches[0]
    food_patches = image_patch.find(""food"")
    for food_patch in food_patches:
        if food_patch.vertical_center < white_paper_patch.vertical_center:
            return food_patch.simple_query(""What is the food that is above the white paper?"") # crop would include the food so keep it in the query
    # If no food is above the white paper, query the image directly
    return image_patch.simple_query(""What is the food that is above the white paper?"")",1
15705231,Is the shelf to the left of a cabinet?,yes,./data/gqa/../images/2345287.jpg,no,"def execute_command_15705231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # shelf and cabinet are not in the image
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > shelf_patch.horizontal_center:
                return ""yes""
    return ""no""",0
15693846,Is the motorcycle parked on the grass?,yes,./data/gqa/../images/2338449.jpg,yes,"def execute_command_15693846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the motorcycle parked on the grass?"")",1
13872995,Who is jumping?,a man,./data/gqa/../images/2363826.jpg,skateboarder,"def execute_command_13872995(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""Who is jumping?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Who is jumping?"")",0
4502830,Is this a dog or a cat?,dog,./data/gqa/../images/2362262.jpg,dog,"def execute_command_4502830(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Is this a dog or a cat?"")
    animal_patch = animal_patches[0]
    return animal_patch.best_text_match([""dog"", ""cat""])",1
12584623,What is the person with the bag wearing?,white shirt,./data/gqa/../images/713911.jpg,cap,"def execute_command_12584623(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    person_patch = person_patches[0]
    bag_patches = image_patch.find(""bag"")
    if len(bag_patches) == 0:
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    bag_patch = bag_patches[0]
    if person_patch.horizontal_center > bag_patch.horizontal_center:
        return person_patch.simple_query(""What is the person with the bag wearing?"")
    return bag_patch.simple_query(""What is the person with the bag wearing?"")",0
7202064,"What is this, a bus or a truck?",neither,./data/gqa/../images/2357280.jpg,truck,"def execute_command_7202064(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bus or truck
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_truck = image_patch.exists(""truck"")
    if is_bus and is_truck:
        return ""both""
    elif is_bus:
        return ""bus""
    elif is_truck:
        return ""truck""
    else:
        return ""neither""",0
16542208,Do you see either any beds or blankets there?,yes,./data/gqa/../images/2395353.jpg,yes,"def execute_command_16542208(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)",1
11700224,Do you see both lettuce and salad?,no,./data/gqa/../images/2368922.jpg,yes,"def execute_command_11700224(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one lettuce and one salad
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)",0
1067136,Is the ball on the tree?,no,./data/gqa/../images/2336294.jpg,yes,"def execute_command_1067136(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the ball on the tree?"")",0
364079,What kind of furniture is to the right of the blanket?,chair,./data/gqa/../images/2334847.jpg,shelf,"def execute_command_364079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one blanket patch
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for blanket_patch in blanket_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
                return furniture_patch.best_text_match([""chair"", ""table"", ""sofa""])
    return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")",0
2533062,How large is the ground the zebra is standing on?,472x401,./data/gqa/../images/2407291.jpg,large,"def execute_command_2533062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the size of the ground
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    zebra_patch = zebra_patches[0]
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        return ""no ground found""
    ground_patch = ground_patches[0]
    return str(ground_patch.width) + ""x"" + str(ground_patch.height)",0
19683710,The clock is inside what?,ceiling,./data/gqa/../images/2341180.jpg,train station,"def execute_command_19683710(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (inside, outside, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The clock is inside what?"")",0
15674863,Is the racket in the top part?,no,./data/gqa/../images/2384074.jpg,yes,"def execute_command_15674863(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one racket patch
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    racket_patch = racket_patches[0]
    if racket_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",0
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?,no,./data/gqa/../images/2359192.jpg,no,"def execute_command_4860320(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person patch
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    for shirt_patch in shirt_patches:
        if person_patch.horizontal_center < shirt_patch.horizontal_center:
            skateboard_patches = image_patch.find(""skateboard"")
            for skateboard_patch in skateboard_patches:
                if skateboard_patch.horizontal_center > person_patch.horizontal_center:
                    return ""yes""
    return ""no""",1
2292637,What is the color of the shirt that the passenger is wearing?,blue,./data/gqa/../images/2405583.jpg,black,"def execute_command_2292637(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one passenger patch
    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    passenger_patch = passenger_patches[0]
    shirt_patches = image_patch.find(""shirt"")
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")",0
9175259,What is the chair made of?,plastic,./data/gqa/../images/2386899.jpg,plastic,"def execute_command_9175259(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one chair
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return image_patch.simple_query(""What is the chair made of?"")
    chair_patch = chair_patches[0]
    return chair_patch.simple_query(""What is the chair made of?"")",1
8714882,How big is the carrot in the top of the picture?,no,./data/gqa/../images/2321131.jpg,small,"def execute_command_8714882(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the size of the carrot
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    return carrot_patches[0].simple_query(""How big is the carrot in the top of the picture?"")",0
1638685,What is the name of the vegetable that is on the yellow food?,broccoli,./data/gqa/../images/2385819.jpg,pepper,"def execute_command_1638685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # yellow food is a relation, so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")",0
5828256,Is the clock on a tower?,no,./data/gqa/../images/2384655.jpg,no,"def execute_command_5828256(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the clock on a tower?"")",1
18937563,What kind of animal is orange?,no animal is orange,./data/gqa/../images/2379404.jpg,dog,"def execute_command_18937563(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is orange?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal orange?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is orange?"") # crop would include the color so keep it in the query
    return ""no animal is orange""",0
14360113,What is the smiling woman holding?,no,./data/gqa/../images/2352235.jpg,banana,"def execute_command_14360113(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one smiling woman
    image_patch = ImagePatch(image)
    smiling_woman_patches = image_patch.find(""smiling woman"")
    if len(smiling_woman_patches) == 0:
        # If no smiling woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    smiling_woman_patch = smiling_woman_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes only one object patch
    if len(object_patches) == 0:
        return ""no""
    object_patch = object_patches[0]
    if smiling_woman_patch.horizontal_center > object_patch.horizontal_center:
        return ""no""
    return smiling_woman_patch.simple_query(""What is the smiling woman holding?"")",0
593188,Is the hair short?,yes,./data/gqa/../images/2381086.jpg,yes,"def execute_command_593188(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the hair short?"")
    return bool_to_yesno(person_patches[0].verify_property(""hair"", ""short""))",1
10824666,Are there ladies to the left of the man that is wearing shorts?,no,./data/gqa/../images/2385924.jpg,yes,"def execute_command_10824666(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    is_wearing_shorts = (man_patch.simple_query(""Is the man wearing shorts?"") == ""yes"")
    if not is_wearing_shorts:
        return ""no""
    ladies_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(ladies_patches) == 0:
        return ""no""
    for lady_patch in ladies_patches:
        if lady_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no""",0
1890604,Is the gray car to the left or to the right of the garbage bin?,right,./data/gqa/../images/2372833.jpg,right,"def execute_command_1890604(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one car and one garbage bin
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    garbage_bin_patches = image_patch.find(""garbage bin"")
    if len(car_patches) == 0 or len(garbage_bin_patches) == 0:
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    car_patch = car_patches[0]
    garbage_bin_patch = garbage_bin_patches[0]
    if car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
7574939,Is there any table or plate that is white?,yes,./data/gqa/../images/2359185.jpg,yes,"def execute_command_7574939(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # table or plate
    image_patch = ImagePatch(image)
    is_table = image_patch.exists(""table"")
    is_plate = image_patch.exists(""plate"")
    if is_table or is_plate:
        return ""yes""
    return ""no""",1
12252101,Is it outdoors?,yes,./data/gqa/../images/2359418.jpg,no,"def execute_command_12252101(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))",0
6943442,What cooking utensil is on the oven?,pan,./data/gqa/../images/2394601.jpg,kettle,"def execute_command_6943442(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one oven
    image_patch = ImagePatch(image)
    oven_patch = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patch) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""What cooking utensil is on the oven?"")
    cooking_utensil_patches = image_patch.find(""cooking utensil"")
    # Question assumes only one cooking utensil patch
    if len(cooking_utensil_patches) == 0:
        return ""no""
    for cooking_utensil_patch in cooking_utensil_patches:
        if cooking_utensil_patch.horizontal_center > oven_patch.horizontal_center:
            return cooking_utensil_patch.simple_query(""What cooking utensil is on the oven?"")
    return ""no""",0
2977077,The propeller that looks red is what pattern?,no,./data/gqa/../images/2402545.jpg,striped,"def execute_command_2977077(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one propeller patch
    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    propeller_patch = propeller_patches[0]
    if propeller_patch.simple_query(""Is the propeller red?"") == ""yes"":
        return propeller_patch.best_text_match([""stripes"", ""polka dots"", ""plaid""])
    return ""no""",0
11190306,Which kind of animal is to the left of the train?,horse,./data/gqa/../images/2335202.jpg,horse,"def execute_command_11190306(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one train patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center < image_patch.find(""train"")[0].horizontal_center:
            return animal_patch.simple_query(""What kind of animal is to the left of the train?"") # crop would include the train so keep it in the query
    return image_patch.simple_query(""Which kind of animal is to the left of the train?"")",1
5107190,Do you see both an airplane and a truck?,no,./data/gqa/../images/2399616.jpg,no,"def execute_command_5107190(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # airplane and truck are not in the same image
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)",1
4360982,How old is the child?,5,./data/gqa/../images/2333049.jpg,little,"def execute_command_4360982(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # age is a property of the child
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"")",0
12536783,What kind of animal is in front of the pole?,elephant,./data/gqa/../images/2400415.jpg,elephants,"def execute_command_12536783(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")",0
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?,right,./data/gqa/../images/2343442.jpg,right,"def execute_command_443846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man patch
    image_patch = ImagePatch(image)
    glasses_patches = image_patch.find(""glasses"")
    man_patches = image_patch.find(""man"")
    if len(glasses_patches) == 0 or len(man_patches) == 0:
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    glasses_patch = glasses_patches[0]
    man_patch = man_patches[0]
    if glasses_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
18655269,Which room is it?,bedroom,./data/gqa/../images/2328704.jpg,bedroom,"def execute_command_18655269(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
7405860,Is it indoors?,yes,./data/gqa/../images/2376437.jpg,yes,"def execute_command_7405860(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one image
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""indoors""))",1
1705569,Does the pot on top of the stove look black?,no,./data/gqa/../images/2406620.jpg,yes,"def execute_command_1705569(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one pot and one stove
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    pot_patch = pot_patches[0]
    stove_patches = image_patch.find(""stove"")
    # Question assumes only one stove patch
    if len(stove_patches) == 0:
        return ""no""
    stove_patch = stove_patches[0]
    if pot_patch.upper > stove_patch.upper:
        return ""yes""
    return ""no""",0
1028569,Are there both a cyclist and a helmet in the photo?,no,./data/gqa/../images/2326510.jpg,yes,"def execute_command_1028569(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)",0
13954115,Are there any men to the left of the person in the crowd?,yes,./data/gqa/../images/2402862.jpg,no,"def execute_command_13954115(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person in the crowd
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person in the crowd"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Are there any men to the left of the person in the crowd?"")
    person_patch = person_patches[0]
    man_patches = image_patch.find(""man"")
    for man_patch in man_patches:
        if man_patch.horizontal_center < person_patch.horizontal_center:
            return ""yes""
    return ""no""",0
12436797,What kind of device is to the left of the keyboard?,laptop,./data/gqa/../images/2319675.jpg,headphones,"def execute_command_12436797(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one device
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    if len(device_patches) == 0:
        return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    device_patch = device_patches[0]
    if device_patch.horizontal_center < image_patch.horizontal_center:
        return device_patch.simple_query(""What kind of device is to the left of the keyboard?"")
    return device_patch.simple_query(""What kind of device is to the right of the keyboard?"")",0
1017626,Who is inside the train?,people,./data/gqa/../images/2408028.jpg,man,"def execute_command_1017626(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one train patch
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train"")
    if len(train_patches) == 0:
        # If no train is found, query the image directly
        return image_patch.simple_query(""Who is inside the train?"")
    train_patch = train_patches[0]
    return train_patch.simple_query(""Who is inside the train?"")",0
7650014,Which place is it?,park,./data/gqa/../images/2402045.jpg,park,"def execute_command_7650014(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one place
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",1
15889871,What is the person to the left of the car doing?,walking,./data/gqa/../images/2361083.jpg,walking,"def execute_command_15889871(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one car and one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    car_patches = image_patch.find(""car"")
    if len(person_patches) == 0 or len(car_patches) == 0:
        return image_patch.simple_query(""What is the person to the left of the car doing?"")
    person_patch = person_patches[0]
    car_patch = car_patches[0]
    if person_patch.horizontal_center < car_patch.horizontal_center:
        return person_patch.simple_query(""What is the person to the left of the car doing?"")
    return person_patch.simple_query(""What is the person to the right of the car doing?"")",1
1310985,Is the yellow vehicle to the left of a lamp?,no,./data/gqa/../images/2411295.jpg,yes,"def execute_command_1310985(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # yellow vehicle
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    for yellow_vehicle_patch in yellow_vehicle_patches:
        lamp_patches = image_patch.find(""lamp"")
        for lamp_patch in lamp_patches:
            if lamp_patch.horizontal_center > yellow_vehicle_patch.horizontal_center:
                return ""no""
    return ""yes""",0
646935,Which room is it?,office,./data/gqa/../images/2336424.jpg,office,"def execute_command_646935(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one room
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
9495263,Is the woman to the left or to the right of the man that wears a cap?,left,./data/gqa/../images/2397998.jpg,left,"def execute_command_9495263(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one man and one woman
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    for woman_patch in woman_patches:
        for man_patch in man_patches:
            if woman_patch.horizontal_center < man_patch.horizontal_center:
                return ""left""
            else:
                return ""right""",1
946016,Do you think the animal that is sitting-down is small or large?,small,./data/gqa/../images/2391364.jpg,small,"def execute_command_946016(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one animal patch
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    animal_patch = animal_patches[0]
    if animal_patch.verify_property(""animal"", ""sitting-down"") and animal_patch.verify_property(""animal"", ""small""):
        return ""small""
    elif animal_patch.verify_property(""animal"", ""sitting-down"") and animal_patch.verify_property(""animal"", ""large""):
        return ""large""
    else:
        return ""no""",1
9617920,Do the garbage can and the pan have the same color?,no,./data/gqa/../images/2365993.jpg,no,"def execute_command_9617920(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    garbage_can_patch = garbage_can_patches[0]
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        return ""no""
    pan_patch = pan_patches[0]
    return bool_to_yesno(garbage_can_patch.verify_property(""garbage can"", ""same color as"") and pan_patch.verify_property(""pan"", ""same color as""))",1
3578781,Which kind of clothing is black?,boots,./data/gqa/../images/2321843.jpg,jacket,"def execute_command_3578781(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # clothing is a broad category
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"") # crop would include the color so keep it in the query
    # If no clothing is black, pick the first clothing
    return clothing_patches[0].simple_query(""Which kind of clothing is black?"")",0
4695656,What is the lamp on?,table,./data/gqa/../images/2366034.jpg,nightstand,"def execute_command_4695656(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lamp on?"")",0
13696926,The homes that are to the left of the people have what color?,black,./data/gqa/../images/2321676.jpg,white,"def execute_command_13696926(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one home and one person
    image_patch = ImagePatch(image)
    home_patches = image_patch.find(""home"")
    person_patches = image_patch.find(""person"")
    # Question assumes only one home and one person patch
    if len(home_patches) == 0 or len(person_patches) == 0:
        # If no home or person is found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    home_patch = home_patches[0]
    person_patch = person_patches[0]
    if home_patch.horizontal_center < person_patch.horizontal_center:
        return home_patch.simple_query(""What color is the home?"")
    else:
        return person_patch.simple_query(""What color is the home?"")",0
16946079,What is on the wall?,blue,./data/gqa/../images/2355225.jpg,stuffed animals,"def execute_command_16946079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # contains a relation (on, next to, etc), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")",0
18986542,Is the napkin on the right side?,yes,./data/gqa/../images/2375683.jpg,yes,"def execute_command_18986542(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one napkin patch
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    napkin_patch = napkin_patches[0]
    if napkin_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    return ""no""",1
11513897,What appliance is the label on?,blender,./data/gqa/../images/2411741.jpg,blender,"def execute_command_11513897(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes only one appliance
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    if len(appliance_patches) == 0:
        return image_patch.simple_query(""What appliance is the label on?"")
    appliance_patch = appliance_patches[0]
    return appliance_patch.simple_query(""What appliance is the label on?"")",1
8240644,What is the color of the bird's tail?,brown,./data/gqa/../images/2331215.jpg,black,"def execute_command_8240644(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # bird's tail
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What is the color of the bird's tail?"") # crop would include the tail so keep it in the query",0
5245080,Is he to the right or to the left of the camera?,left,./data/gqa/../images/2400302.jpg,left,"def execute_command_5245080(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # assumes one person
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
17800894,Are there both a window and a door in the picture?,no,./data/gqa/../images/2412027.jpg,yes,"def execute_command_17800894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",0
191027873,Where is the snowboard?,in the air,./data/gqa/../images/2371443.jpg,snow,"def execute_command_191027873(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns the location of the snowboard
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Where is the snowboard?"")
    return snowboard_patches[0].simple_query(""Where is the snowboard?"")",0
1964079,Are the box and the paper the same color?,yes,./data/gqa/../images/2410495.jpg,yes,"def execute_command_1964079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
 # returns yes or no
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    box_color = box_patches[0].simple_query(""What color is the box?"")
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_color = paper_patches[0].simple_query(""What color is the paper?"")
    return bool_to_yesno(box_color == paper_color)",1
-,-,-,-,-,-,0.538
