sample_id,query,Answer,image_path,truth_answers,code,accuracy
13151559,Is the large hair both white and soft?,yes,./data/gqa/../images/2410936.jpg,yes,"def execute_command_13151559(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the large hair both white and soft?"")
    hair_patch = hair_patches[0]
    return bool_to_yesno(hair_patch.verify_property(""hair"", ""white"") and hair_patch.verify_property(""hair"", ""soft""))",1
18370956,Who is eating the cupcake?,woman,./data/gqa/../images/2317542.jpg,woman,"def execute_command_18370956(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is eating the cupcake?"")",1
6436809,What is the guy wearing?,hat,./data/gqa/../images/2373592.jpg,sweatshirt,"def execute_command_6436809(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the guy wearing?"")",0
117037,Which kind of food is to the right of the cabbage?,"Error Codigo: unterminated string literal (detected at line 13) (Codex, line 13)",./data/gqa/../images/2365608.jpg,sandwich,"def execute_command_117037(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cabbage_patches = image_patch.find(""cabbage"")
    # Question assumes only one cabbage patch
    if len(cabbage_patches) == 0:
        # If no cabbage is found, query the image directly
        return image_patch.simple_query(""Which kind of food is to the right of the cabbage?"")
    cabbage_patch = cabbage_patches[0]
    food_patches = image_patch.find(""food"")
    # Question assumes one food patch to the right of the cabbage
    for food_patch in food_patches:
        if food_patch.horizontal_center > cabbage_patch.horizontal_center:
            return food_patch.best_text_match([""pocket"", ""pasta"", ""burger"", ""meatball"", ""pie"", ""carrot"", ""cake"", ""bread"", ""salad"", ""fries"", ""sandwich"", ""hotdog"", ""steak"", ""pancake"", ""waffle"", ""donut"", ""hamburger"", ""meat"", ""fish"", ""egg"", ""noodle"", ""rice"", ""pumpkin"", ""taco"", ""pizza"", ""sushi"", ""falafel"", ""curry"", ""pasta"", ""ramen"", ""bun"", ""muffin"", ""bagel"", ""croissant"", ""pan"", ""fritter"", ""pie"", ""pastry"", ""meatloaf"", ""lasagna"", ""tortellini"", ""ravioli"", ""scone"", ""quiche"", ""fritter"", ""empanada"", ""spring roll"", ""dumpling"", ""wonton"", ""nachos"", ""springroll"", ""tortilla"", ""biscuit"", ""croissant"", ""bagel"", ""muffin"", ""cake"", ""pastry"", ""pie"", ""donut"", ""cookie"", ""brownie"", ""biscuit"", ""fritter"", ""pancake"", ""waffle"", ""crepe"", ""blintz"", ""fritter"", ""empanada"", ""spring roll"", ""dumpling"", ""wonton"", ""nachos"", ""springroll"", ""tortilla"", ""biscuit"", ""muffin"", ""bagel"", ""cake"", ""pastry"", ""pie"", ""donut"", ""cookie"", ""brownie"", ""biscuit"", ""fritter"", ""pancake"", ""waffle"", ""crepe"", ""blintz"", ""frit",0
758936,Who wears the cap?,the man,./data/gqa/../images/2400175.jpg,skier,"def execute_command_758936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    wearer_patches = cap_patches[0].find(""person with cap"")
    if len(wearer_patches) == 0:
        # If no person with cap is found, query the image directly
        return image_patch.simple_query(""Who wears the cap?"")
    return wearer_patches[0].simple_query(""Who wears the cap?"")",0
111046440,Who is pointing?,the batter,./data/gqa/../images/2351822.jpg,player,"def execute_command_111046440(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is pointing?"")",0
15804389,Is the woman's hair short or long?,long,./data/gqa/../images/2325937.jpg,long,"def execute_command_15804389(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair short or long?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""Is your hair short or long?"") # crop would include the woman's hair so keep it in the query",1
11445636,The women are watching who?,the train,./data/gqa/../images/2391915.jpg,man,"def execute_command_11445636(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The women are watching who?"")",0
17736165,Do the dishwasher to the left of the woman and the gas stove inside the kitchen both have white color?,yes,./data/gqa/../images/2343545.jpg,yes,"def execute_command_17736165(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # first check if the woman exists
    woman_patches = image_patch.find(""woman"")
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return bool_to_yesno(image_patch.verify_property(""dishwasher"", ""has white color"") and image_patch.verify_property(""kitchen"", ""has gas stove with white color""))
    woman_patch = woman_patches[0]
    # find the dishwasher to the left of the woman
    left_patches = image_patch.find(""dishwasher"")
    for patch in left_patches:
        if patch.horizontal_center < woman_patch.horizontal_center:
            left_dishwasher_patch = patch
            break
    else:
        # If no dishwasher to the left of the woman is found, query the image directly
        return bool_to_yesno(image_patch.verify_property(""kitchen"", ""has gas stove with white color""))
    # find the gas stove in the kitchen
    kitchen_patches = image_patch.find(""kitchen"")
    if len(kitchen_patches) == 0:
        # If no kitchen is found, query the image directly
        return bool_to_yesno(image_patch.verify_property(""dishwasher"", ""has white color""))
    kitchen_patch = kitchen_patches[0]
    return bool_to_yesno(left_dishwasher_patch.verify_property(""dishwasher"", ""has white color"") and kitchen_patch.verify_property(""kitchen"", ""has gas stove with white color""))",1
1594898,What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?,no,./data/gqa/../images/2389006.jpg,bed,"def execute_command_1594898(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    bed_patch = bed_patches[0]
    baby_patches = image_patch.find(""baby"")
    # Question assumes one baby patch
    if len(baby_patches) == 0:
        return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")
    baby_patch = baby_patches[0]
    if baby_patch.horizontal_center > bed_patch.horizontal_center:
        bed_patch, baby_patch = baby_patch, bed_patch
    for object_patch in image_patch.find(""furniture""):
        if object_patch.horizontal_center != baby_patch.horizontal_center and object_patch.horizontal_query(""Is this the same color as the bed sheet the baby is to the right of?"") == ""yes"":
            return object_patch.simple_query(""What is your name?"")
        if object_patch.horizontal_center == baby_patch.horizontal_center:
            return object_patch.simple_query(""What is your name?"")
    return image_patch.simple_query(""What is the name of the piece of furniture that is the same color as the bed sheet the baby is to the right of?"")

class ImagePatch:
    # ... (rest of the class definition remains the same)

    def horizontal_query(self, question: str):
        return self.simple_query(question)",0
758958,Is there either any red pillow or snowboard?,yes,./data/gqa/../images/2400175.jpg,yes,"def execute_command_758958(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_red_pillow = image_patch.exists(""red pillow"")
    is_snowboard = image_patch.exists(""snowboard"")
    return bool_to_yesno(is_red_pillow or is_snowboard)",1
143816,Which place is it?,a farm,./data/gqa/../images/2382258.jpg,field,"def execute_command_143816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
13741513,Which side is the knife on?,left,./data/gqa/../images/2325019.jpg,left,"def execute_command_13741513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    knife_patches = image_patch.find(""knife"")
    # Question assumes only one knife patch
    if len(knife_patches) == 0:
        # If no knife is found, query the image directly
        return image_patch.simple_query(""Which side is the knife on?"")
    knife_patch = knife_patches[0]
    if knife_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
17829769,What is the computer mouse in front of?,computer,./data/gqa/../images/2400080.jpg,computer,"def execute_command_17829769(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""computer mouse"")
    # Question assumes only one mouse patch
    if len(mouse_patches) == 0:
        # If no mouse is found, query the image directly
        return image_patch.simple_query(""What is the computer mouse in front of?"")
    mouse_patch = mouse_patches[0]
    object_patches = image_patch.find(""computer monitor"") or image_patch.find(""laptop"")
    # Question assumes one object patch
    if len(object_patches) == 0:
        return image_patch.simple_query(""What is the computer mouse in front of?"")
    return object_patches[0].simple_query(""What is the computer mouse in front of?"")",1
17233738,What is the toddler holding?,skis,./data/gqa/../images/2394369.jpg,skis,"def execute_command_17233738(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toddler holding?"")",1
2951242,Is the gray shirt sleeveless or short sleeved?,short sleeved,./data/gqa/../images/2386013.jpg,short sleeved,"def execute_command_2951242(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt with gray sleeve"")
    # Question assumes only one shirt patch with gray sleeve
    if len(shirt_patches) == 0:
        # If no shirt with gray sleeve is found, query the image directly
        return image_patch.simple_query(""Is the gray shirt sleeveless or short sleeved?"")
    shirt_patch = shirt_patches[0]
    if shirt_patch.simple_query(""Is the shirt sleeveless?"") == ""yes"":
        return ""sleeveless""
    else:
        return ""short sleeved""",1
15241795,Is the tank top red?,no,./data/gqa/../images/2358063.jpg,no,"def execute_command_15241795(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tank_top_patches = image_patch.find(""tank top"")
    # Question assumes only one tank top patch
    if len(tank_top_patches) == 0:
        # If no tank top is found, query the image directly
        return image_patch.simple_query(""Is the tank top red?"")
    tank_top_patch = tank_top_patches[0]
    return bool_to_yesno(tank_top_patch.verify_property(""tank top"", ""red""))",1
13885234,Which kind of animal is in front of the rocks?,elephant,./data/gqa/../images/2386629.jpg,elephant,"def execute_command_13885234(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is in front of the rocks?"")",1
19335715,Do you see any grapes?,no,./data/gqa/../images/2404433.jpg,no,"def execute_command_19335715(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""grapes""))",1
6455591,What type of furniture is white?,antique,./data/gqa/../images/2349792.jpg,cabinets,"def execute_command_6455591(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.best_text_match([""brown"", ""white"", ""black"", ""wooden""]):
            return furniture_patch.simple_query(""What type of furniture is white?"")
    return furniture_patches[0].simple_query(""What type of furniture is white?"")",0
1033761,What is the blue clothing item?,shirt,./data/gqa/../images/2405536.jpg,uniform,"def execute_command_1033761(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""clothing"")
    # Question assumes only one blue clothing patch
    if len(blue_patches) == 0:
        # If no blue clothing is found, query the image directly
        return image_patch.simple_query(""What is the blue clothing item?"")
    best_match = blue_patches[0]
    for blue_patch in blue_patches:
        if blue_patch.simple_query(""Is this blue clothing item a dress?"") == ""yes"":
            return ""dress""
        if blue_patch.simple_query(""Is this blue clothing item a shirt?"") == ""yes"":
            return ""shirt""
        if blue_patch.simple_query(""Is this blue clothing item a coat?"") == ""yes"":
            return ""coat""
        if blue_patch.simple_query(""Is this blue clothing item pants?"") == ""yes"":
            return ""pants""
    return best_match.simple_query(""What is the blue clothing item?"")",0
17726504,Who is wearing the glasses?,man,./data/gqa/../images/2349045.jpg,people,"def execute_command_17726504(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candidates = image_patch.find(""person with glasses"")
    # Question assumes only one person with glasses
    if len(candidates) == 0:
        # If no person with glasses is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    return candidates[0].simple_query(""Who is wearing the glasses?"")",0
13112902,Is the woman wearing a bracelet?,yes,./data/gqa/../images/2356577.jpg,yes,"def execute_command_13112902(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a bracelet?"")
    woman_patch = woman_patches[0]
    return bool_to_yesno(woman_patch.exists(""bracelet""))",1
698766,What is the food that is not white?,sandwich,./data/gqa/../images/2323182.jpg,lettuce,"def execute_command_698766(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one non-white food patch
    for food_patch in food_patches:
        if food_patch.simple_query(""Is the food white?"") == ""no"":
            return food_patch.simple_query(""What is the food?"")
    # If all food is white, query the image directly
    return image_patch.simple_query(""What is the food that is not white?"")",0
1332276,Are there both a cup and a bottle in the picture?,yes,./data/gqa/../images/2385859.jpg,yes,"def execute_command_1332276(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_cup = image_patch.exists(""cup"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_cup and is_bottle)",1
12633088,What color is that glove?,blue,./data/gqa/../images/713282.jpg,gray,"def execute_command_12633088(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return image_patch.simple_query(""What color is that glove?"")
    return image_patch.simple_query(""What color is that glove?"") # crop would include the glove so keep it in the query",0
18103787,Who is holding the helmet?,man,./data/gqa/../images/2378758.jpg,boy,"def execute_command_18103787(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Who is holding the helmet?"")
    for helmet_patch in helmet_patches:
        # assumes one holder per helmet
        holder_patches = image_patch.find(""person holding a helmet"")
        if len(holder_patches) == 0:
            return image_patch.simple_query(""Who is holding the helmet?"")
        return holder_patches[0].simple_query(""Who is holding the helmet?"")",0
2143247,What is the name of the food to the left of the donut that looks little?,n/a,./data/gqa/../images/2317344.jpg,pastry,"def execute_command_2143247(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    donut_patches = image_patch.find(""donut with little appearance"")
    # Question assumes only one donut patch
    if len(donut_patches) == 0:
        # If no donut is found, query the image directly
        return image_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    donut_patch = donut_patches[0]
    food_patches = image_patch.find(""food"")
    # Question assumes only one food patch
    for food_patch in food_patches:
        if food_patch.horizontal_center < donut_patch.horizontal_center:
            return food_patch.simple_query(""What is the name of the food to the left of the donut that looks little?"")
    return ""n/a"" # if no food is found to the left of the donut, return 'n/a'",0
3767951,Is the clock to the right or to the left of the man on the left?,right,./data/gqa/../images/285673.jpg,right,"def execute_command_3767951(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes at least one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    left_man_patch = man_patches[0]
    clock_patches = image_patch.find(""clock"")
    # Question assumes at least one clock patch
    if len(clock_patches) == 0:
        return image_patch.simple_query(""Is the clock to the right or to the left of the man on the left?"")
    for clock_patch in clock_patches:
        if clock_patch.horizontal_center > left_man_patch.horizontal_center:
            return ""right""
        else:
            return ""left""",1
17655180,What's the sticker on?,wall,./data/gqa/../images/2409933.jpg,sign,"def execute_command_17655180(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What's the sticker on?"")
    return sticker_patches[0].simple_query(""What's the sticker on?"")",0
3468831,In front of what is this table?,bottle,./data/gqa/../images/2355360.jpg,tree,"def execute_command_3468831(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In front of what is this table?"")",0
5888523,Do you see people to the right of the still car?,yes,./data/gqa/../images/2352943.jpg,no,"def execute_command_5888523(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    still_car_patches = image_patch.find(""still car"")
    # Question assumes only one still car patch
    if len(still_car_patches) == 0:
        # If no still car is found, query the image directly
        return image_patch.simple_query(""Do you see people to the right of the still car?"")
    still_car_patch = still_car_patches[0]
    people_patches = image_patch.find(""people"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > still_car_patch.horizontal_center:
            return ""yes""
    return ""no""",0
7188981,Does the giraffe look adult?,yes,./data/gqa/../images/2404963.jpg,no,"def execute_command_7188981(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Does the giraffe look adult?"")
    return bool_to_yesno(giraffe_patches[0].verify_property(""giraffe"", ""adult""))",0
16852802,Of what color are the pants?,black,./data/gqa/../images/2359824.jpg,gray,"def execute_command_16852802(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Of what color are the pants?"")
    return pants_patches[0].best_text_match([""blue"", ""black"", ""brown"", ""gray"", ""white""])",0
9619158,What kind of watercraft is full of men?,boat,./data/gqa/../images/2406392.jpg,boat,"def execute_command_9619158(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    watercraft_patches = image_patch.find(""watercraft"")
    # Question assumes only one watercraft patch
    if len(watercraft_patches) == 0:
        # If no watercraft is found, query the image directly
        return image_patch.simple_query(""What kind of watercraft is full of men?"")
    for watercraft_patch in watercraft_patches:
        if watercraft_patch.simple_query(""Is the watercraft full of men?"") == ""yes"":
            return watercraft_patch.simple_query(""What kind of watercraft is full of men?"")
    # If no watercraft is full of men, pick the first watercraft
    return watercraft_patches[0].simple_query(""What kind of watercraft is full of men?"")",1
3625225,On which side of the picture are the boats?,left,./data/gqa/../images/1054.jpg,left,"def execute_command_3625225(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    boat_patches = image_patch.find(""boat"")
    # Question assumes at least one boat patch
    if len(boat_patches) == 0:
        # If no boat is found, query the image directly
        return image_patch.simple_query(""On which side of the picture are the boats?"")
    left_count = 0
    right_count = 0
    for boat_patch in boat_patches:
        if boat_patch.horizontal_center < image_patch.horizontal_center:
            left_count += 1
        else:
            right_count += 1
    if left_count > right_count:
        return ""left""
    elif right_count > left_count:
        return ""right""
    else:
        return ""center""",1
7126345,Does the elephant to the left of the other elephant have large size?,yes,./data/gqa/../images/2416088.jpg,yes,"def execute_command_7126345(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes at least two elephant patches
    if len(elephant_patches) < 2:
        # If less than two elephants are found, query the image directly
        return image_patch.simple_query(""Does the elephant to the left of the other elephant have large size?"")
    left_elephant_patch = elephant_patches[0]
    right_elephant_patch = elephant_patches[1]
    if left_elephant_patch.horizontal_center < right_elephant_patch.horizontal_center:
        return bool_to_yesno(left_elephant_patch.verify_property(""elephant"", ""large""))
    else:
        return bool_to_yesno(right_elephant_patch.verify_property(""elephant"", ""large""))",1
19834124,What is the girl holding?,paper bag,./data/gqa/../images/2384946.jpg,phone,"def execute_command_19834124(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl holding?"")
    girl_patch = girl_patches[0]
    object_patches = image_patch.find(""object"")
    # Question assumes one object patch
    if len(object_patches) == 0:
        object_patches = image_patch.find(""thing"")
        if len(object_patches) == 0:
            object_patches = image_patch.find(""item"")
            if len(object_patches) == 0:
                return image_patch.simple_query(""What is the girl holding?"")
    object_patch = object_patches[0]
    if image_patch.exists(""pocket"") and image_patch.exists(""pocket on girl's clothing""):
        return object_patch.simple_query(""What is the girl holding in her pocket?"")
    return object_patch.simple_query(""What is the girl holding?"")",0
4617704,Does the toilet seat that is not down appear to be white and open?,yes,./data/gqa/../images/2397470.jpg,yes,"def execute_command_4617704(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")
    for toilet_patch in toilet_patches:
        is_down = toilet_patch.simple_query(""Is the toilet seat down?"")
        if not is_down:
            return bool_to_yesno(toilet_patch.verify_property(""toilet seat"", ""white and open""))
    # If all toilet seats are down, query the image directly
    return image_patch.simple_query(""Does the toilet seat that is not down appear to be white and open?"")",1
5899539,Are there any bottles or mugs that are not purple?,yes,./data/gqa/../images/2386338.jpg,no,"def execute_command_5899539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    mug_patches = image_patch.find(""mug"")
    for patch in bottle_patches + mug_patches:
        if patch.simple_query(""What color is the bottle/mug?"") != ""purple"":
            return ""yes""
    return ""no""",0
2631593,Which place is it?,city,./data/gqa/../images/2412366.jpg,sidewalk,"def execute_command_2631593(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
12228864,Do you see any men to the right of the person that is in the living room?,yes,./data/gqa/../images/2324040.jpg,yes,"def execute_command_12228864(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    living_room_patches = image_patch.find(""living room"")
    # Question assumes only one living room patch
    if len(living_room_patches) == 0:
        # If no living room is found, query the image directly
        return image_patch.simple_query(""Do you see any men to the right of the person that is in the living room?"")
    living_room_patch = living_room_patches[0]
    horizontal_center = living_room_patch.horizontal_center
    image_patch_for_query = ImagePatch(image)
    man_patches = image_patch_for_query.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        return ""no""
    for man_patch in man_patches:
        if man_patch.horizontal_center > horizontal_center:
            return ""yes""
    return ""no""",1
111054378,Is the small couch to the right or to the left of the bottle?,right,./data/gqa/../images/2386495.jpg,right,"def execute_command_111054378(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""small couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes one bottle patch
    if len(bottle_patches) == 0:
        return image_patch.simple_query(""Is the small couch to the right or to the left of the bottle?"")
    couch_patch = couch_patches[0]
    bottle_patch = bottle_patches[0]
    if couch_patch.horizontal_center > bottle_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
9392411,Is the bottle to the right or to the left of the appliance on the left?,right,./data/gqa/../images/2323628.jpg,right,"def execute_command_9392411(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    bottle_patch = bottle_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes one appliance patch on the left
    if len(appliance_patches) == 0:
        return image_patch.simple_query(""Is the bottle to the right or to the left of the appliance on the left?"")
    appliance_patch = appliance_patches[0]
    if appliance_patch.horizontal_center < image_patch.horizontal_center:
        if bottle_patch.horizontal_center > appliance_patch.horizontal_center:
            return ""right""
        else:
            return ""left""
    else:
        return ""left""",1
16753829,What type of animal is sitting in the container in the bottom of the photo?,cat,./data/gqa/../images/2414356.jpg,cats,"def execute_command_16753829(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    container_patch = container_patches[0]
    animal_patches = container_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    animal_patch = animal_patches[0]
    if animal_patch.vertical_center != container_patch.vertical_center:
        return animal_patch.simple_query(""What type of animal is sitting in the container in the bottom of the photo?"")
    return animal_patch.simple_query(""What type of animal is sitting in the container?"") # crop would include the container so keep it in the query",0
1345482,What is that train in front of?,wall,./data/gqa/../images/2404342.jpg,windows,"def execute_command_1345482(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is that train in front of?"")",0
1527449,Are there cars to the right of the palm trees which are to the right of the girl?,no,./data/gqa/../images/2363853.jpg,yes,"def execute_command_1527449(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    girl_patch = girl_patches[0]
    palm_patches = image_patch.find(""palm tree"")
    # Question assumes only one palm tree patch to the right of the girl
    if len(palm_patches) == 0:
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    right_of_girl_palm_patches = [patch for patch in palm_patches if patch.horizontal_center > girl_patch.horizontal_center]
    if len(right_of_girl_palm_patches) == 0:
        return image_patch.simple_query(""Are there cars to the right of the palm trees which are to the right of the girl?"")
    right_of_palm_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    for patch in right_of_palm_patches:
        if patch.horizontal_center > max([p.horizontal_center for p in right_of_girl_palm_patches]):
            return ""yes""
    return ""no""",0
459445,In which part is the silver device?,top,./data/gqa/../images/2371279.jpg,left,"def execute_command_459445(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""In which part is the silver device, the bottom, top, or right side of the image?"")",0
11786203,What is the man on?,skateboard,./data/gqa/../images/2333294.jpg,skateboard,"def execute_command_11786203(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man on?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What is the man on?"") # crop would include what the man is on, so keep it in the query",1
5200013,Is there a brown door or chair?,no,./data/gqa/../images/2413903.jpg,yes,"def execute_command_5200013(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_brown_door = image_patch.exists(""brown door"")
    is_brown_chair = image_patch.exists(""brown chair"")
    return bool_to_yesno(is_brown_door or is_brown_chair)",0
131031372,What is the napkin in?,box,./data/gqa/../images/2363711.jpg,napkin dispenser,"def execute_command_131031372(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the napkin in?"")",0
1241681,Are there any people behind the white dessert?,yes,./data/gqa/../images/2362038.jpg,yes,"def execute_command_1241681(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    white_dessert_patches = image_patch.find(""white dessert"")
    # Question assumes only one white dessert patch
    if len(white_dessert_patches) == 0:
        # If no white dessert is found, query the image directly
        return image_patch.simple_query(""Are there any people behind the white dessert?"")
    white_dessert_patch = white_dessert_patches[0]
    return bool_to_yesno(image_patch.exists(""people with their backs to a white dessert""))",1
8730954,What type of animal do you think is in front of the curtain which is to the right of the radiator?,dog,./data/gqa/../images/2412382.jpg,dog,"def execute_command_8730954(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of animal do you think is in front of the curtain which is to the right of the radiator?"")",1
8553578,What is the Pikachu doing?,sitting,./data/gqa/../images/2376660.jpg,lying,"def execute_command_8553578(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the Pikachu doing?"")",0
16711804,"On which side is the car, the left or the right?",right,./data/gqa/../images/2398104.jpg,right,"def execute_command_16711804(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""On which side is the car, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
5546271,What is on the large mountains?,monument,./data/gqa/../images/2387752.jpg,snow,"def execute_command_5546271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the large mountains?"")",0
5107295,What is in the sky?,kites,./data/gqa/../images/2329046.jpg,kite,"def execute_command_5107295(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the sky?"")",0
123768,What kind of watercraft is the fruit on?,boat,./data/gqa/../images/2410041.jpg,boat,"def execute_command_123768(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of watercraft is the fruit on?"")",1
1827218,Is the bottle in the bottom of the image?,no,./data/gqa/../images/2326413.jpg,no,"def execute_command_1827218(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle in the bottom of the image?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.vertical_center < image_patch.vertical_center / 2:
        return ""yes""
    else:
        return ""no""",1
10938155,What color is the sky?,white,./data/gqa/../images/2392194.jpg,white,"def execute_command_10938155(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")",1
4893512,Does the sail look white or red?,white,./data/gqa/../images/2321817.jpg,white,"def execute_command_4893512(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    sail_patches = image_patch.find(""sail"")
    # Question assumes only one sail patch
    if len(sail_patches) == 0:
        # If no sail is found, query the image directly
        return image_patch.simple_query(""Does the sail look white or red?"")
    return sail_patches[0].best_text_match([""white"", ""red""])",1
3662784,Do you see either any traffic lights or cars?,yes,./data/gqa/../images/2384789.jpg,yes,"def execute_command_3662784(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_traffic_light = image_patch.exists(""traffic light"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_traffic_light or is_car)",1
15515711,Are there any girls to the right of the yellow helmet?,no,./data/gqa/../images/2402975.jpg,no,"def execute_command_15515711(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    yellow_helmet_patches = image_patch.find(""yellow helmet"")
    # Question assumes only one yellow helmet patch
    if len(yellow_helmet_patches) == 0:
        # If no yellow helmet is found, query the image directly
        return image_patch.simple_query(""Are there any girls to the right of the yellow helmet?"")
    yellow_helmet_patch = yellow_helmet_patches[0]
    girl_patches = image_patch.find(""girl"")
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center > yellow_helmet_patch.horizontal_center:
            return ""yes""
    return ""no""",1
6315316,Which kind of furniture is in front of the window?,chair,./data/gqa/../images/2401271.jpg,chair,"def execute_command_6315316(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Which kind of furniture is in front of the window?"")",1
17736488,What appliance is to the left of the faucet?,stove,./data/gqa/../images/2343545.jpg,oven,"def execute_command_17736488(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What appliance is to the left of the faucet?"")",0
41050828,What is the color of the jacket?,white,./data/gqa/../images/2386051.jpg,pink,"def execute_command_41050828(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""What is the color of the jacket?"")
    return jacket_patches[0].best_text_match([""blue"", ""red"", ""green"", ""black"", ""white"", ""brown"", ""gray""])",0
610914,Is the green boat to the right or to the left of the wood house?,left,./data/gqa/../images/2404484.jpg,left,"def execute_command_610914(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    green_boat_patches = image_patch.find(""green boat"")
    # Question assumes only one green boat patch
    if len(green_boat_patches) == 0:
        # If no green boat is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    green_boat_patch = green_boat_patches[0]
    wood_house_patches = image_patch.find(""wooden house"")
    # Question assumes only one wood house patch
    if len(wood_house_patches) == 0:
        # If no wood house is found, query the image directly
        return image_patch.simple_query(""Is the green boat to the right or to the left of the wood house?"")
    wood_house_patch = wood_house_patches[0]
    if green_boat_patch.horizontal_center > wood_house_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
13158346,Is the woman in the bottom part of the picture?,yes,./data/gqa/../images/2368542.jpg,yes,"def execute_command_13158346(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the bottom part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",1
16318707,Are there either any colorful bikes or skateboards?,no,./data/gqa/../images/1593020.jpg,no,"def execute_command_16318707(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_colorful_bike = image_patch.exists(""colorful bike"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_colorful_bike or is_skateboard)",1
2805654,Is the bag to the right or to the left of the bench?,right,./data/gqa/../images/2367000.jpg,right,"def execute_command_2805654(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    bag_patch = bag_patches[0]
    bench_patches = image_patch.find(""bench"")
    # Question assumes one bench patch
    if len(bench_patches) == 0:
        return image_patch.simple_query(""Is the bag to the right or to the left of the bench?"")
    bench_patch = bench_patches[0]
    if bag_patch.horizontal_center > bench_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
15315607,What do you think is in the sky?,kite,./data/gqa/../images/2399821.jpg,kite,"def execute_command_15315607(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is in the sky?"")",1
2995829,What color is the truck near the gas station?,yellow,./data/gqa/../images/2318396.jpg,yellow,"def execute_command_2995829(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What color is the truck near the gas station?"")
    truck_patch = truck_patches[0]
    gas_station_patches = image_patch.find(""gas station"")
    # Question assumes one gas station patch
    if len(gas_station_patches) == 0:
        return truck_patch.simple_query(""What color is the truck near the gas station?"")
    # ask directly because near is a vague relation
    return truck_patch.simple_query(""What color is the truck?"")",1
12140940,"What are the headphones on, a sofa or a desk?",desk,./data/gqa/../images/2359333.jpg,sofa,"def execute_command_12140940(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    headphones_patches = image_patch.find(""headphones"")
    # Question assumes only one headphones patch
    if len(headphones_patches) == 0:
        # If no headphones are found, query the image directly
        return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
    if len(image_patch.find(""sofa"")) > 0 or len(image_patch.find(""desk"")) > 0:
        if len(image_patch.find(""sofa"")) > 0:
            sofa_patches = image_patch.find(""sofa"")
            if len(sofa_patches) == 0:
                return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
            if sofa_patches[0].horizontal_center > image_patch.horizontal_center:
                return ""sofa""
        if len(image_patch.find(""desk"")) > 0:
            desk_patches = image_patch.find(""desk"")
            if len(desk_patches) == 0:
                return image_patch.simple_query(""What are the headphones on, a sofa or a desk?"")
        return ""desk""
    return ""sofa"" # if no sofa or desk, default to sofa",0
727533,Does the bun look brown and toasted?,no,./data/gqa/../images/2380474.jpg,yes,"def execute_command_727533(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bun_patches = image_patch.find(""bun"")
    # Question assumes only one bun patch
    if len(bun_patches) == 0:
        # If no bun is found, query the image directly
        return image_patch.simple_query(""Does the bun look brown and toasted?"")
    return bool_to_yesno(bun_patches[0].verify_property(""bun"", ""brown and toasted""))",0
61044602,What is in the brown basket?,mangoes,./data/gqa/../images/2381908.jpg,mango,"def execute_command_61044602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the brown basket?"")",0
16827204,Is the marker different in color than the paper?,yes,./data/gqa/../images/713822.jpg,yes,"def execute_command_16827204(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    marker_patches = image_patch.find(""marker"")
    # Question assumes only one marker patch
    if len(marker_patches) == 0:
        # If no marker is found, query the image directly
        return image_patch.simple_query(""Is the marker different in color than the paper?"")
    marker_patch = marker_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return ""no""
    paper_patch = paper_patches[0]
    return bool_to_yesno(marker_patch.simple_query(""Is your color different from the paper's?""))",1
1284539,Is there a racket to the right of the man on the right side?,Error Ejecucion: 'ImagePatch' object has no attribute 'horizontal',./data/gqa/../images/2362041.jpg,no,"def execute_command_1284539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes at least one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    right_man_patch = max(man_patches, key=lambda patch: patch.horizontal_center)
    if len(man_patches) == 1 or right_man_patch.horizontal_center == image_patch.horizontal:
        # If only one man or the rightmost man is at the right edge, query directly
        return image_patch.simple_query(""Is there a racket to the right of the man on the right side?"")
    for patch in image_patch.find(""racket""):
        if patch.horizontal_center > right_man_patch.horizontal:
            return ""yes""
    return ""no""",0
1257391,What place is this?,a city,./data/gqa/../images/2391338.jpg,street,"def execute_command_1257391(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")",0
16223517,What do you think is the color of the large device?,white,./data/gqa/../images/713330.jpg,black,"def execute_command_16223517(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""large device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What do you think is the color of the large device?"")
    return device_patches[0].best_text_match([""blue"", ""black"", ""white"", ""green"", ""red""])",0
1024280,Does the shirt look long sleeved or sleeveless?,long sleeved,./data/gqa/../images/2332543.jpg,sleeveless,"def execute_command_1024280(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look long sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""long sleeved"", ""sleeveless""])",0
2769463,Which kind of animal is lying in the chair?,dog,./data/gqa/../images/2320543.jpg,dog,"def execute_command_2769463(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is lying in the chair?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""lying""):
            return animal_patch.simple_query(""Which kind of animal is lying in the chair?"")
    # If no animal is lying, query the image directly
    return image_patch.simple_query(""Which kind of animal is lying in the chair?"")",1
18503776,Is the white box to the right of the crate the chair is to the right of?,no,./data/gqa/../images/498069.jpg,no,"def execute_command_18503776(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    chair_patch = chair_patches[0]
    crate_patches = image_patch.find(""crate"")
    # Question assumes only one crate patch
    if len(crate_patches) == 0:
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    crate_patch = crate_patches[0]
    white_box_patches = image_patch.find(""white box"")
    # Question assumes only one white box patch
    if len(white_box_patches) == 0:
        return image_patch.simple_query(""Is the white box to the right of the crate the chair is to the right of?"")
    white_box_patch = white_box_patches[0]
    if white_box_patch.horizontal_center > crate_patch.horizontal_center and white_box_patch.horizontal_center > chair_patch.horizontal_center:
        return ""yes""
    else:
        return ""no""",1
3434581,Are there both a coffee table and a lamp?,no,./data/gqa/../images/2394519.jpg,yes,"def execute_command_3434581(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_coffee_table = image_patch.exists(""coffee table"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_coffee_table and is_lamp)",0
19201196,Is that flower pot made of clay?,False,./data/gqa/../images/2378173.jpg,yes,"def execute_command_19201196(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    flower_pot_patches = image_patch.find(""flower pot"")
    # Question assumes only one flower pot patch
    if len(flower_pot_patches) == 0:
        # If no flower pot is found, query the image directly
        return image_patch.simple_query(""Is that flower pot made of clay?"")
    return flower_pot_patches[0].verify_property(""flower pot"", ""clay"")",0
191006281,Does the sky look clear and gray?,yes,./data/gqa/../images/2389688.jpg,yes,"def execute_command_191006281(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""clear and gray""))",1
681336,Do you see hats or gloves that are white?,no,./data/gqa/../images/2319126.jpg,yes,"def execute_command_681336(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    hats_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    is_white_hat = False
    if len(hats_patches) > 0:
        is_white_hat = (hats_patches[0].simple_query(""Is the hat white?"") == ""yes"")
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one gloves patch
    is_white_gloves = False
    if len(gloves_patches := image_patch.find(""gloves"")) > 0:
        is_white_gloves = (gloves_patches[0].simple_query(""Are the gloves white?"") == ""yes"")
    return bool_to_yesno(is_white_hat or is_white_gloves)",0
1300368,What is on the cabinet that is to the right of the keyboard?,printer,./data/gqa/../images/4900.jpg,printer,"def execute_command_1300368(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")
    cabinet_patch = cabinet_patches[0]
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return cabinet_patch.simple_query(""What is on the cabinet that is to the right of the keyboard?"")",1
172394,What is the animal to the left of the tap called?,cat,./data/gqa/../images/2411058.jpg,cat,"def execute_command_172394(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal to the left of the tap called?"")
    for animal_patch in animal_patches:
        tap_patches = image_patch.find(""tap"")
        for tap_patch in tap_patches:
            if tap_patch.horizontal_center > animal_patch.horizontal_center:
                return animal_patch.simple_query(""What animal is this?"")
    # If no tap is found, query the image directly
    return image_patch.simple_query(""What is the animal to the left of the tap called?"")",1
738176,Is the chair on the right?,yes,./data/gqa/../images/2377028.jpg,yes,"def execute_command_738176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    chair_patch = chair_patches[0]
    image_center = image_patch.horizontal_center
    return bool_to_yesno(chair_patch.horizontal_center > image_center)",1
4194919,Is the child on the right of the picture?,yes,./data/gqa/../images/2346160.jpg,no,"def execute_command_4194919(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""Is the child on the right of the picture?"")
    child_patch = child_patches[0]
    image_width = image_patch.horizontal_center * 2 # width of the image
    if child_patch.horizontal_center >= image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no""",0
3585327,Who is on the surfboard?,the boy,./data/gqa/../images/2342125.jpg,girl,"def execute_command_3585327(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is on the surfboard?"")",0
1711172,What size are the packages the candle is on top of?,small,./data/gqa/../images/2344916.jpg,small,"def execute_command_1711172(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only one candle patch
    if len(candle_patches) == 0:
        # If no candle is found, query the image directly
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    candle_patch = candle_patches[0]
    package_patches = image_patch.find(""package"")
    # Question assumes at least one package patch
    if len(package_patches) == 0:
        return image_patch.simple_query(""What size are the packages the candle is on top of?"")
    max_size = max(package_patch.simple_query(""What size is the package?"") for package_patch in package_patches)
    return max_size",1
4353895,Who is on the snowboard on the right?,three people,./data/gqa/../images/2343238.jpg,people,"def execute_command_4353895(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    snowboard_patches = image_patch.find(""snowboard"")
    # Question assumes only one snowboard patch
    if len(snowboard_patches) == 0:
        # If no snowboard is found, query the image directly
        return image_patch.simple_query(""Who is on the snowboard on the right?"")
    snowboard_patch = snowboard_patches[0]
    # crop to the right half of the image
    right_image_patch = image_patch.crop(image_patch.horizontal_center, 0, image_patch.width, image_patch.height)
    # ask about the person on the right
    return right_image_patch.simple_query(""Who is on the snowboard?"")",0
17929304,What is the vehicle that is on the road?,truck,./data/gqa/../images/2322483.jpg,truck,"def execute_command_17929304(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # contains a relation (on the road), so ask directly
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle is on the road?"")
    return vehicle_patches[0].simple_query(""What vehicle is on the road?"")",1
1363574,What color is the crust?,white,./data/gqa/../images/2379627.jpg,gold,"def execute_command_1363574(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bread_patches = image_patch.find(""bread"")
    # Question assumes only one bread patch
    if len(bread_patches) == 0:
        # If no bread is found, query the image directly
        return image_patch.simple_query(""What color is the crust?"")
    return bread_patches[0].best_text_match([""brown"", ""white"", ""brown-white"", ""white-brown""]) # some breads have brown and white crusts",0
5672474,Is the plate to the left or to the right of the beer on the left?,left,./data/gqa/../images/2373095.jpg,right,"def execute_command_5672474(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    beer_patches = image_patch.find(""beer"")
    # Question assumes only one beer patch
    if len(beer_patches) == 0:
        # If no beer is found, query the image directly
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    beer_patch = beer_patches[0]
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        return image_patch.simple_query(""Is the plate to the left or to the right of the beer on the left?"")
    plate_patch = plate_patches[0]
    if plate_patch.horizontal_center < beer_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
11341284,What is the pattern of the mattress on the street?,plaid,./data/gqa/../images/2397107.jpg,checkered,"def execute_command_11341284(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the pattern of the mattress on the street?"")",0
14192693,Are there any boys behind the fence?,yes,./data/gqa/../images/2355736.jpg,no,"def execute_command_14192693(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes one fence patch
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return bool_to_yesno(image_patch.exists(""boy""))
    for boy_patch in boy_patches:
        for fence_patch in fence_patches:
            if boy_patch.horizontal_center < fence_patch.horizontal_center:
                return ""yes""
    return ""no""",0
19203395,Is the white toilet paper to the right or to the left of the toilet?,left,./data/gqa/../images/2347431.jpg,left,"def execute_command_19203395(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    toilet_patch = toilet_patches[0]
    paper_patches = image_patch.find(""toilet paper"")
    # Question assumes only one toilet paper patch
    if len(paper_patches) == 0:
        return image_patch.simple_query(""Is the white toilet paper to the right or to the left of the toilet?"")
    paper_patch = paper_patches[0]
    if paper_patch.horizontal_center > toilet_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
1194938,Are there any airplanes in front of the building?,Error Codigo: name 'image_patch' is not defined,./data/gqa/../images/2377599.jpg,yes,"def execute_command_1194938(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    airplane_patches = image_patch.find(""airplane"")
    # Question assumes only one building patch
    building_patches = image_patch.find(""building"")
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return bool_to_yesno(len(airplane_patches) > 0)
    for airplane_patch in airplane_patches:
        for building_patch in building_patches:
            if building_patch.horizontal_center > image_patch.horizontal_center:
                if building_patch.horizontal_center - image_patch.horizontal_center > image_patch.horizontal / 2:
                    # if building is to the right and far enough, check if airplane is to the left
                    return bool_to_yesno(airplane_patch.horizontal_center < building_patch.horizontal_center)
            else:
                # if building is to the left, check if airplane is to the left of it
                return bool_to_yesno(airplane_patch.horizontal_center < building_patch.horizontal_center)
    return bool_to_yesno(len(airplane_patches) > 0) # if no building is found, check if any airplane exists

image_patch.horizontal = image_patch.width # add attribute to ImagePatch class
image_patch.horizontal /= 2 # add attribute to ImagePatch class
image_patch.__dict__[""horizontal""] = image_patch.width / 2 # add attribute to ImagePatch class
image_patch.__dict__[""width""] # add attribute to ImagePatch class
def ImagePatch(image, left: int=None, lower: int=None, right: int=None, upper: int=None):
    if left is None and right is None and upper is None and lower is None:
        self = ImagePatch # add attribute to ImagePatch class
        self.cropped_image = image
        self.left = 0
        self.lower = 0
        self.right = image.shape[2]  # width
        self.upper = image.shape[1]  # height
    else:
        self = ImagePatch # add attribute to ImagePatch class
        self.cropped_image = image[:, lower:upper, left:right]
        self.left = left
        self.upper = upper
        self.right = right
        self.lower = lower

    self.width = self.cropped_image.shape[2]
    self.height = self.cropped_image.shape[1]

    self.horizontal_center = (self.left + self.right) / 2
    self.vertical_center = (self.lower + self.upper) / 2",0
5350205,How clean is the road that the car is on the side of?,no,./data/gqa/../images/2317789.jpg,clean,"def execute_command_5350205(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    car_patch = car_patches[0]
    min_x = min([patch.horizontal_center for patch in car_patches])
    max_x = max([patch.horizontal_center for patch in car_patches])
    road_patches = image_patch.find(""road"")
    # Question assumes one road patch
    if len(road_patches) == 0:
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    road_patch = road_patches[0]
    if min_x > road_patch.horizontal_center or max_x < road_patch.horizontal_center:
        return image_patch.simple_query(""How clean is the road that the car is on the side of?"")
    return road_patch.simple_query(""How clean is the road?"")",0
4256016,"In which part of the picture is the black van, the bottom or the top?",bottom,./data/gqa/../images/2382873.jpg,bottom,"def execute_command_4256016(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""black van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the black van, the bottom or the top?"")
    if van_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
9179602,What is the person to the right of the fence doing?,skateboarding,./data/gqa/../images/2381259.jpg,skateboarding,"def execute_command_9179602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    fence_patch = fence_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes one person patch to the right of the fence
    if len(person_patches) == 0:
        return image_patch.simple_query(""What is the person to the right of the fence doing?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > fence_patch.horizontal_center:
            return person_patch.simple_query(""What is the person to the right of the fence doing?"")
    # If no person is to the right of the fence, query the image directly
    return image_patch.simple_query(""What is the person to the right of the fence doing?"")",1
16471124,Does the horse have a different color than the boot?,yes,./data/gqa/../images/2353868.jpg,no,"def execute_command_16471124(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Does the horse have a different color than the boot?"")
    horse_patch = horse_patches[0]
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        return ""no""
    boot_patch = boot_patches[0]
    if horse_patch.simple_query(""Is the horse the same color as the boot?"") == ""no"":
        return ""yes""
    return ""no""",0
958247,Is the mouse to the right of a chair?,yes,./data/gqa/../images/2343793.jpg,yes,"def execute_command_958247(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    mouse_patches = image_patch.find(""mouse"")
    # Question assumes only one mouse patch
    if len(mouse_patches) == 0:
        # If no mouse is found, query the image directly
        return image_patch.simple_query(""Is the mouse to the right of a chair?"")
    mouse_patch = mouse_patches[0]
    chair_patches = image_patch.find(""chair"")
    if len(chair_patches) == 0:
        return ""no""
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center < image_patch.horizontal_center and mouse_patch.horizontal_center > image_patch.horizontal_center:
            return ""yes""
    # If no chair is to the left of the image center, check if any chair is to the right of the mouse
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > mouse_patch.horizontal_center:
            return ""yes""
    return ""no""",1
11179512,The basket made of plastic is what color?,blue,./data/gqa/../images/2399681.jpg,blue,"def execute_command_11179512(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return image_patch.simple_query(""The basket made of plastic is what color?"")
    for basket_patch in basket_patches:
        if basket_patch.simple_query(""Is the basket made of plastic?"") == ""yes"":
            return basket_patch.simple_query(""What color is the basket?"")
    # If no plastic basket is found, pick the first basket
    return basket_patches[0].simple_query(""What color is the basket?"")",1
8816272,Do you see any elephant to the left of the bird?,no,./data/gqa/../images/2375806.jpg,no,"def execute_command_8816272(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    bird_patches = image_patch.find(""bird"")
    # Question assumes at least one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Do you see any elephant to the left of the bird?"")
    for elephant_patch in elephant_patches:
        if elephant_patch.horizontal_center < bird_patches[0].horizontal_center:
            return ""yes""
    return ""no""",1
11168592,What is the animal in front of the lamp?,horse,./data/gqa/../images/2318496.jpg,horse,"def execute_command_11168592(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in front of the lamp?"")",1
3568717,Who is wearing the jacket?,man,./data/gqa/../images/2405929.jpg,man,"def execute_command_3568717(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Who is wearing the jacket?"")
    jacket_patch = jacket_patches[0]
    max_patch_area = 0
    max_patch = None
    for patch in image_patch.find(""man"") + image_patch.find(""woman""):
        if patch.horizontal_center > image_patch.horizontal_center:
            if patch.simple_query(""Is this person wearing a jacket?"") == ""yes"":
                if patch.width * patch.height > max_patch_area:
                    max_patch = patch
                    max_patch_area = patch.width * patch.height
    if max_patch is not None:
        return max_patch.simple_query(""Who is wearing the jacket?"")
    # If no one is wearing the jacket, query the image directly
    return image_patch.simple_query(""Who is wearing the jacket?"")",1
7398502,What is the food to the left of the girl in the bottom of the photo?,sandwich,./data/gqa/../images/2333310.jpg,sandwich,"def execute_command_7398502(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # crop to the bottom of the image
    bottom_patch = image_patch.crop(0, 0, image_patch.width, image_patch.height // 2)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    girl_patches = bottom_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return bottom_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    girl_patch = girl_patches[0]
    food_patches = bottom_patch.find(""food"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        return bottom_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < girl_patch.horizontal_center:
            return food_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")
    # If no food is to the left of the girl, query the image directly
    return bottom_patch.simple_query(""What is the food to the left of the girl in the bottom of the photo?"")",1
5145864,What is the device that the camera is in front of?,cell phone,./data/gqa/../images/2327025.jpg,phone,"def execute_command_5145864(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the device that the camera is in front of?"")",0
788143,Is the man on the surfboard?,yes,./data/gqa/../images/2410668.jpg,yes,"def execute_command_788143(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man on surfboard"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man on surfboard is found, query the image directly
        return image_patch.simple_query(""Is the man on the surfboard?"")
    return bool_to_yesno(True) # man on surfboard is the query, so it's true by definition",1
15854501,What device has the same color as the device in the box?,iphone,./data/gqa/../images/2413508.jpg,screen,"def execute_command_15854501(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    device_patches_in_box = image_patch.find(""device in the box"")
    # Question assumes only one device patch in the box
    if len(device_patches_in_box) == 0:
        # If no device in the box is found, query the image directly
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    device_in_box_patch = device_patches_in_box[0]
    device_patches = image_patch.find(""device"")
    # Question assumes at least one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""What device has the same color as the device in the box?"")
    for device_patch in device_patches:
        if device_patch.simple_query(""Is the device the same color as the device in the box?"") == ""yes"":
            return device_patch.simple_query(""What device has the same color as the device in the box?"")
    # If no device has the same color as the device in the box, query the image directly
    return image_patch.simple_query(""What device has the same color as the device in the box?"")",0
3228067,What is the child wearing?,jacket,./data/gqa/../images/2324724.jpg,skis,"def execute_command_3228067(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child wearing?"")
    return child_patches[0].simple_query(""What are you wearing?"") # crop would include the clothing so keep it in the query",0
6817336,Is the blue sky behind a cathedral?,no,./data/gqa/../images/2358376.jpg,yes,"def execute_command_6817336(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blue sky"")
    # Question assumes only one blue patch
    if len(blue_patches) == 0:
        # If no blue sky is found, query the image directly
        return image_patch.simple_query(""Is the blue sky behind a cathedral?"")
    blue_patch = blue_patches[0]
    cathedral_patches = image_patch.find(""cathedral"")
    # Question assumes one cathedral patch
    if len(cathedral_patches) == 0:
        return ""no""
    for cathedral_patch in cathedral_patches:
        if blue_patch.horizontal_center < cathedral_patch.horizontal_center:
            return ""yes""
    return ""no""",0
6347271,"In which part of the image is the yellow pepper, the bottom or the top?",bottom,./data/gqa/../images/2395361.jpg,bottom,"def execute_command_6347271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    yellow_pepper_patches = image_patch.find(""yellow pepper"")
    # Question assumes only one yellow pepper patch
    if len(yellow_pepper_patches) == 0:
        # If no yellow pepper is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the yellow pepper, the bottom or the top?"")
    if yellow_pepper_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
296230,What animal is the woman feeding?,elephant,./data/gqa/../images/2414858.jpg,elephant,"def execute_command_296230(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman feeding"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman feeding is found, query the image directly
        return image_patch.simple_query(""What animal is the woman feeding?"")
    return woman_patches[0].simple_query(""What animal is the woman feeding?"") # crop would include the woman feeding so keep it in the query",1
3427727,On which side is the bucket?,right,./data/gqa/../images/2361130.jpg,right,"def execute_command_3427727(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bucket_patches = image_patch.find(""bucket"")
    # Question assumes only one bucket patch
    if len(bucket_patches) == 0:
        # If no bucket is found, query the image directly
        return image_patch.simple_query(""On which side is the bucket?"")
    bucket_patch = bucket_patches[0]
    if bucket_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
31050314,Is the small chimney in the bottom part of the picture?,yes,./data/gqa/../images/2377037.jpg,yes,"def execute_command_31050314(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    chimney_patches = image_patch.find(""small chimney"")
    # Question assumes only one small chimney patch
    if len(chimney_patches) == 0:
        # If no small chimney is found, query the image directly
        return image_patch.simple_query(""Is the small chimney in the bottom part of the picture?"")
    if chimney_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",1
3503396,Are the pants purple?,yes,./data/gqa/../images/2340511.jpg,yes,"def execute_command_3503396(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Are the pants purple?"")
    return bool_to_yesno(pants_patches[0].verify_property(""pants"", ""purple""))",1
11742862,Which kind of furniture is to the right of the paper towels?,cabinet,./data/gqa/../images/2344431.jpg,shelves,"def execute_command_11742862(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    paper_towels_patches = image_patch.find(""paper towels"")
    # Question assumes only one paper towels patch
    if len(paper_towels_patches) == 0:
        # If no paper towels are found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    for paper_towels_patch in paper_towels_patches:
        furniture_patches = image_patch.find(""furniture"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center > paper_towels_patch.horizontal_center:
                return furniture_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"")
    return image_patch.simple_query(""Which kind of furniture is to the right of the paper towels?"") # if no furniture is found to the right, query the image directly",0
5891809,What kind of furniture is gray?,table,./data/gqa/../images/2384647.jpg,table,"def execute_command_5891809(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is gray?"")
    gray_patches = [patch for patch in furniture_patches if patch.simple_query(""Is the furniture gray?"") == ""yes""]
    # If no gray furniture is found, query the image directly
    if len(gray_patches) == 0:
        return image_patch.simple_query(""What kind of furniture is gray?"")
    return gray_patches[0].simple_query(""What kind of furniture is gray?"")",1
5370528,Is the hair white and long?,no,./data/gqa/../images/2389614.jpg,yes,"def execute_command_5370528(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return image_patch.simple_query(""Is the hair white and long?"")
    hair_patch = hair_patches[0]
    return bool_to_yesno(hair_patch.verify_property(""hair"", ""white"") and hair_patch.verify_property(""hair"", ""long""))",0
781153,Do you see trains near the lamp post that looks white?,no,./data/gqa/../images/61557.jpg,no,"def execute_command_781153(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""train with white lamp post near""))",1
5543456,Is the container to the left of the person that wears bracelets?,yes,./data/gqa/../images/2380680.jpg,yes,"def execute_command_5543456(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
    person_patches = image_patch.find(""person with bracelets"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person with bracelets is found, query the image directly
        return image_patch.simple_query(""Is the container to the left of the person that wears bracelets?"")
    for container_patch in container_patches:
        for person_patch in person_patches:
            if person_patch.horizontal_center > container_patch.horizontal_center:
                return ""yes""
    return ""no""",1
163134,What do you think is on the roof?,snow,./data/gqa/../images/2383884.jpg,snow,"def execute_command_163134(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What do you think is on the roof?"")",1
5603075,Is the shoe white or brown?,brown,./data/gqa/../images/2328644.jpg,brown,"def execute_command_5603075(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""brown"", ""white""])",1
5511395,What is wrapped in paper?,hot dog,./data/gqa/../images/2373700.jpg,bagel,"def execute_command_5511395(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wrapped in paper?"")",0
5611256,Are there any couches in the picture?,no,./data/gqa/../images/2352773.jpg,no,"def execute_command_5611256(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""couch""))",1
1162826,The man is in what?,an orange shirt,./data/gqa/../images/2334672.jpg,air,"def execute_command_1162826(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is in what?"")",0
81020685,Which color is the small house?,white,./data/gqa/../images/2408787.jpg,white,"def execute_command_81020685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Which color is the small house?"")
    if len(house_patches) > 1:
        # If multiple small houses, pick the first one
        house_patch = house_patches[0]
    else:
        house_patch = house_patches[0]
    return house_patch.best_text_match([""red"", ""blue"", ""white"", ""brown"", ""gray""])",1
19640724,Who is in the bathroom?,a man,./data/gqa/../images/2414682.jpg,man,"def execute_command_19640724(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the bathroom?"")",1
289960,Do you see a racket to the right of the boy that is looking at the tie?,True,./data/gqa/../images/2395760.jpg,no,"def execute_command_289960(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy looking at tie"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy looking at tie is found, query the image directly
        return image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"")
    boy_patch = boy_patches[0]
    return bool_to_yesno(image_patch.exists(""racket with max horizontal center of 1000"")) and (image_patch.simple_query(""Is the boy looking at the tie?"") == ""yes"") and (image_patch.simple_query(""Do you see a racket to the right of the boy that is looking at the tie?"") == ""no"" or (image_patch.simple_query(""What is the horizontal center of the boy looking at the tie?"") != ""0"" and image_patch.horizontal_center > boy_patch.horizontal_center))",0
9957748,Does the hair appear to be long and brown?,yes,./data/gqa/../images/2374505.jpg,yes,"def execute_command_9957748(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the hair appear to be long and brown?""))
    hair_patch = hair_patches[0]
    return bool_to_yesno(hair_patch.simple_query(""Is it long and brown?""))",1
21031610,What is the shoe that looks black and white resting on?,skateboard,./data/gqa/../images/2399342.jpg,skateboard,"def execute_command_21031610(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""What is the shoe that looks black and white resting on?"")
    for shoe_patch in shoe_patches:
        if shoe_patch.simple_query(""Is the shoe black and white?"") == ""yes"":
            return shoe_patch.simple_query(""What is the shoe resting on?"")
    # If no black and white shoe is found, pick the first shoe
    return shoe_patches[0].simple_query(""What is the shoe that looks black and white resting on?"")",1
12801921,What is the glass on?,table,./data/gqa/../images/2322304.jpg,coffee table,"def execute_command_12801921(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the glass on?"")",0
16243948,Is the white pillow under the black animal?,no,./data/gqa/../images/2386158.jpg,yes,"def execute_command_16243948(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    white_pillow_patches = image_patch.find(""white pillow"")
    # Question assumes only one white pillow patch
    if len(white_pillow_patches) == 0:
        # If no white pillow is found, query the image directly
        return image_patch.simple_query(""Is the white pillow under the black animal?"")
    white_pillow_patch = white_pillow_patches[0]
    black_animal_patches = image_patch.find(""black animal"")
    # Question assumes only one black animal patch
    if len(black_animal_patches) == 0:
        return ""no""
    black_animal_patch = black_animal_patches[0]
    if white_pillow_patch.vertical_center < black_animal_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",0
457770,What kind of clothing is striped?,shirt,./data/gqa/../images/2402763.jpg,dress shirt,"def execute_command_457770(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing with stripes"")
    # Question assumes only one clothing patch with stripes
    if len(clothing_patches) == 0:
        # If no clothing with stripes is found, query the image directly
        return image_patch.simple_query(""What kind of clothing is striped?"")
    return clothing_patches[0].best_text_match([""pullover"", ""shirt"", ""pants""])",0
12603153,Are the child's eyes blue and open?,yes,./data/gqa/../images/2410549.jpg,yes,"def execute_command_12603153(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Are the child's eyes blue and open?""))
    child_patch = child_patches[0]
    return bool_to_yesno(child_patch.verify_property(""child's eyes"", ""blue"") and child_patch.simple_query(""Are the child's eyes open?""))",1
9480973,What is located on top of the tub?,shower,./data/gqa/../images/2382058.jpg,towel,"def execute_command_9480973(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is located on top of the tub?"")",0
8399764,Is the fork to the right or to the left of the white plate?,right,./data/gqa/../images/2359716.jpg,right,"def execute_command_8399764(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
    for fork_patch in fork_patches:
        white_patches = image_patch.find(""white plate"")
        # Question assumes one white plate patch
        if len(white_patches) == 0:
            return image_patch.simple_query(""Is the fork to the right or to the left of the white plate?"")
        white_patch = white_patches[0]
        if fork_patch.horizontal_center > white_patch.horizontal_center:
            return ""right""
        else:
            return ""left""",1
13420253,On which side of the photo is the chair?,left,./data/gqa/../images/2335072.jpg,left,"def execute_command_13420253(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the chair?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
4747006,What is the label on?,pizza,./data/gqa/../images/2362436.jpg,glass,"def execute_command_4747006(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the label on?"")",0
3322787,What bird is to the left of the person that is wearing a shirt?,owl,./data/gqa/../images/2358081.jpg,owl,"def execute_command_3322787(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person with shirt"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person with shirt is found, query the image directly
        return image_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        return ""no bird found""
    for bird_patch in bird_patches:
        if bird_patch.horizontal_center < person_patch.horizontal_center:
            return bird_patch.simple_query(""What bird is to the left of the person that is wearing a shirt?"")
    return bird_patches[0].simple_query(""What bird is to the left of the person that is wearing a shirt?"") # if no bird is to the left, query the first bird",1
6399594,On which side is the man?,left,./data/gqa/../images/2325614.jpg,right,"def execute_command_6399594(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""On which side is the man?"")
    man_patch = man_patches[0]
    image_center = image_patch.horizontal_center
    if man_patch.horizontal_center < image_center:
        return ""left""
    else:
        return ""right""",0
6930120,Is the glass bowl on the right or on the left?,left,./data/gqa/../images/2389120.jpg,left,"def execute_command_6930120(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""glass bowl"")
    # Question assumes only one glass bowl patch
    if len(bowl_patches) == 0:
        # If no glass bowl is found, query the image directly
        return image_patch.simple_query(""Is the glass bowl on the right or on the left?"")
    bowl_patch = bowl_patches[0]
    if bowl_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
12619961,What vehicles are to the left of the taxi?,bus,./data/gqa/../images/2383807.jpg,cars,"def execute_command_12619961(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    # Question assumes only one taxi patch
    if len(taxi_patches) == 0:
        # If no taxi is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the taxi?"")
    for vehicle_patch in image_patch.find(""vehicle""):
        if vehicle_patch.horizontal_center < taxi_patches[0].horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is to the left of the taxi?"")
    return image_patch.simple_query(""What vehicles are to the left of the taxi?"") # if no vehicle is to the left, query directly",0
13362315,Is the basket on the shelf black and empty?,no,./data/gqa/../images/2387101.jpg,yes,"def execute_command_13362315(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket on shelf"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket on shelf is found, query the image directly
        return bool_to_yesno(image_patch.exists(""basket on shelf"") and image_patch.exists(""black"") and image_patch.exists(""empty""))
    basket_patch = basket_patches[0]
    return bool_to_yesno(basket_patch.exists(""black"") and basket_patch.exists(""empty""))",0
3830854,What is the animal that is standing next to the donkey that is standing in the hay?,sheep,./data/gqa/../images/2399312.jpg,sheep,"def execute_command_3830854(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is standing next to the donkey that is standing in the hay?"")",1
18382324,Is this a bed or a table?,table,./data/gqa/../images/2377976.jpg,table,"def execute_command_18382324(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""bed"", ""table""])",1
18104571,"Which animal is that, a bird or a cat?",cat,./data/gqa/../images/2369293.jpg,cat,"def execute_command_18104571(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which animal is that, a bird or a cat?"")
    animal_patch = animal_patches[0]
    return animal_patch.best_text_match([""bird"", ""cat""])",1
2913379,Do you see any fence or pot?,no,./data/gqa/../images/2357474.jpg,yes,"def execute_command_2913379(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_pot = image_patch.exists(""pot"")
    return bool_to_yesno(is_fence or is_pot)",0
9294271,What is in front of the fence the zebra is kept in?,trees,./data/gqa/../images/2357869.jpg,tree,"def execute_command_9294271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the fence the zebra is kept in?"")",0
10741434,What is the vegetable that is on top of the plate called?,broccoli,./data/gqa/../images/2333173.jpg,broccoli,"def execute_command_10741434(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the vegetable that is on top of the plate called?"")",1
765962,Where is the car?,on the street,./data/gqa/../images/2342119.jpg,street,"def execute_command_765962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the car?"")",0
12399262,Is there either a yellow truck or airplane?,yes,./data/gqa/../images/2350062.jpg,yes,"def execute_command_12399262(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_yellow_truck = image_patch.exists(""yellow truck"")
    is_airplane = image_patch.exists(""airplane"")
    return bool_to_yesno(is_yellow_truck or is_airplane)",1
13964213,Is the man on the left of the photo?,no,./data/gqa/../images/2402240.jpg,no,"def execute_command_13964213(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return bool_to_yesno(image_patch.horizontal_center < image_patch.right / 2)
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.horizontal_center < image_patch.horizontal_center)",1
16171369,What is covered in the snow?,skis,./data/gqa/../images/2346375.jpg,ground,"def execute_command_16171369(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered in the snow?"")",0
181055844,On which side is the plastic bottle?,left,./data/gqa/../images/2367436.jpg,left,"def execute_command_181055844(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""plastic bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""On which side is the plastic bottle?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
5858491,Do you see any ropes on the fence that is on the left of the picture?,no,./data/gqa/../images/1409.jpg,no,"def execute_command_5858491(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Do you see any ropes on the fence that is on the left of the picture?"")
    leftmost_fence_patch = min(fence_patches, key=lambda x:x.horizontal_center)
    for fence_patch in fence_patches:
        if fence_patch.horizontal_center == leftmost_fence_patch.horizontal_center:
            continue
        rope_patches = fence_patch.find(""rope"")
        return bool_to_yesno(len(rope_patches) > 0)
    return ""no""",1
17834539,Are there any lamps in the scene?,no,./data/gqa/../images/2399386.jpg,no,"def execute_command_17834539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""lamp""))",1
15658176,Who is wearing a helmet?,the woman,./data/gqa/../images/2404190.jpg,woman,"def execute_command_15658176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candidate_patches = image_patch.find(""biker"") or image_patch.find(""motorcyclist"") or image_patch.find(""policeman"") or image_patch.find(""hiker"")
    # Question assumes only one candidate patch
    if len(candidate_patches) == 0:
        # If no candidate is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for candidate_patch in candidate_patches:
        if candidate_patch.verify_property(""biker"", ""wearing helmet"") or candidate_patch.verify_property(""motorcyclist"", ""wearing helmet"") or candidate_patch.verify_property(""policeman"", ""wearing helmet"") or candidate_patch.verify_property(""hiker"", ""wearing helmet""):
            return candidate_patch.simple_query(""Who is wearing a helmet?"")
    return image_patch.simple_query(""Who is wearing a helmet?"") # if no one is wearing a helmet, query the image directly",1
14372400,Does that coat have red color?,no,./data/gqa/../images/2344615.jpg,no,"def execute_command_14372400(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Does that coat have red color?"")
    return bool_to_yesno(coat_patches[0].verify_property(""coat"", ""red""))",1
411886,Are there any curtains or blankets in this scene?,no,./data/gqa/../images/2372006.jpg,yes,"def execute_command_411886(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_curtain = image_patch.exists(""curtain"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_curtain or is_blanket)",0
16921850,What is the item of furniture to the left of the remote that the man is holding called?,television,./data/gqa/../images/2378471.jpg,bookcase,"def execute_command_16921850(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man holding remote"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man holding remote is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")
    man_patch = man_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center < man_patch.horizontal_center:
            return furniture_patch.simple_query(""What item of furniture is to the left of the remote that the man is holding?"")
    return image_patch.simple_query(""What is the item of furniture to the left of the remote that the man is holding called?"")",0
51039491,Is the fence black or red?,black,./data/gqa/../images/2416432.jpg,black,"def execute_command_51039491(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence black or red?"")
    return fence_patches[0].best_text_match([""black"", ""red""])",1
7425912,What animal is standing in the field?,elephant,./data/gqa/../images/2388942.jpg,elephant,"def execute_command_7425912(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal with which one of the following is commonly found in a field?"")
    # if no animal is found, ask directly
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is standing in the field?"")
    return animal_patches[0].simple_query(""What animal is standing in the field?"")",1
13136338,What animal is in front of the dog which is to the right of the bird?,horse,./data/gqa/../images/2405555.jpg,horse,"def execute_command_13136338(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains multiple relations, so ask directly
    return image_patch.simple_query(""What animal is in front of the dog which is to the right of the bird?"")",1
3775066,Which color are the cabinets in the bottom of the picture?,blue,./data/gqa/../images/2379723.jpg,blue,"def execute_command_3775066(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch at the bottom
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    bottom_patch = cabinet_patches[0]
    if bottom_patch.vertical_center == image_patch.vertical_center:
        # if the cabinet is in the middle, query the image directly
        return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")
    min_bottom_patch = cabinet_patches[0]
    min_bottom_patch_height = min_patch_if_multiple(image_patch, cabinet_patches).vertical_center
    if bottom_patch.vertical_center < min_bottom_patch_height:
        return bottom_patch.best_text_match([""red"", ""brown"", ""white"", ""gray""])
    else:
        return bottom_patch.best_text_match([""blue"", ""white"", ""gray"", ""brown""])

def min_patch_if_multiple(image_patch, patches):
    min_patch = patches[0]
    for patch in patches:
        if patch.vertical_center < min_patch.vertical_center:
            min_patch = patch
    return min_patch

# helper function to query the image directly if no cabinets are found
def query_image_direct(image_patch):
    return image_patch.simple_query(""Which color are the cabinets in the bottom of the picture?"")",1
17206239,Is the happy girl to the right of a player?,yes,./data/gqa/../images/2413307.jpg,no,"def execute_command_17206239(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    happy_girl_patches = image_patch.find(""happy girl"")
    # Question assumes only one happy girl patch
    if len(happy_girl_patches) == 0:
        # If no happy girl is found, query the image directly
        return image_patch.simple_query(""Is the happy girl to the right of a player?"")
    for happy_girl_patch in happy_girl_patches:
        player_patches = image_patch.find(""player"")
        for player_patch in player_patches:
            if player_patch.horizontal_center > happy_girl_patch.horizontal_center:
                return ""yes""
    return ""no""",0
2992517,"What piece of furniture is not wooden, the table or the chair?",table,./data/gqa/../images/2400911.jpg,chair,"def execute_command_2992517(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one table and one chair patch
    if len(table_patches) == 0 or len(chair_patches) == 0:
        # If no table or chair is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    table_patch = table_patches[0]
    chair_patch = chair_patches[0]
    if table_patch.simple_query(""Is the table wooden?"") == ""yes"":
        return chair_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")
    else:
        return table_patch.simple_query(""What piece of furniture is not wooden, the table or the chair?"")",0
1827558,Which side of the image is the kettle on?,right,./data/gqa/../images/2321180.jpg,right,"def execute_command_1827558(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    kettle_patches = image_patch.find(""kettle"")
    # Question assumes only one kettle patch
    if len(kettle_patches) == 0:
        # If no kettle is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the kettle on?"")
    kettle_patch = kettle_patches[0]
    if kettle_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
2785208,Where is the man?,Error Ejecucion: could not convert string to float: 'no',./data/gqa/../images/2398401.jpg,beach,"def execute_command_2785208(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Where is the man?"")
    man_patch = man_patches[0]
    locations = [""park"", ""home"", ""street"", ""store"", ""beach"", ""forest"", ""garden"", ""mountain"", ""desert""]
    max_confidence = 0
    best_location = ""unknown""
    for location in locations:
        confidence = man_patch.simple_query(f""How confident are you that the man is in a {location}?"")
        if confidence != ""unknown"" and float(confidence) > max_confidence:
            max_confidence = float(confidence)
            best_location = location
    return best_location",0
6623967,Is the baby near the countertop chewing a computer mouses?,yes,./data/gqa/../images/2319542.jpg,no,"def execute_command_6623967(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    baby_patches = image_patch.find(""baby"")
    # Question assumes only one baby patch
    if len(baby_patches) == 0:
        # If no baby is found, query the image directly
        return image_patch.simple_query(""Is the baby near the countertop chewing a computer mouse?"")
    baby_patch = baby_patches[0]
    mouse_patches = image_patch.find(""computer mouse"")
    # Question assumes one mouse patch
    if len(mouse_patches) == 0:
        return ""no""
    mouse_patch = mouse_patches[0]
    if (abs(baby_patch.horizontal_center - mouse_patch.horizontal_center) <= 100 and
        baby_patch.simple_query(""Is the baby near the countertop chewing?"") == ""yes""):
        return ""yes""
    return ""no""",0
12804807,Is the small bottle open or closed?,open,./data/gqa/../images/2402996.jpg,open,"def execute_command_12804807(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the small bottle open or closed?"")
    bottle_patch = bottle_patches[0]
    if bottle_patch.exists(""bottle open""):
        return ""open""
    else:
        return ""closed""",1
18437691,Is the clock small or large?,large,./data/gqa/../images/2380137.jpg,large,"def execute_command_18437691(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock small or large?"")
    if clock_patches[0].simple_query(""Is the clock small or large?"") == ""small"":
        return ""small""
    else:
        return ""large""",1
9482318,Are there either any glasses or bottles in this photo?,yes,./data/gqa/../images/2383551.jpg,no,"def execute_command_9482318(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_glasses = image_patch.exists(""glasses"")
    is_bottle = image_patch.exists(""bottle"")
    return bool_to_yesno(is_glasses or is_bottle)",0
12362819,Is the sky blue or dark?,dark,./data/gqa/../images/2335554.jpg,dark,"def execute_command_12362819(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""blue"", ""dark""])",1
171054254,What is the piece of furniture to the right of the shelf the cup is on called?,fireplace,./data/gqa/../images/713692.jpg,bookshelf,"def execute_command_171054254(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the piece of furniture to the right of the shelf the cup is on called?"")",0
1416636,Are there both bridges and chandeliers in this photograph?,no,./data/gqa/../images/2377557.jpg,no,"def execute_command_1416636(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_bridge = image_patch.exists(""bridge"")
    is_chandelier = image_patch.exists(""chandelier"")
    return bool_to_yesno(is_bridge and is_chandelier)",1
1997041,"Which side is the car on, the left or the right?",right,./data/gqa/../images/2355723.jpg,right,"def execute_command_1997041(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on, the left or the right?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
6110985,Is there any plate or orange in the photo?,yes,./data/gqa/../images/2361774.jpg,yes,"def execute_command_6110985(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_plate = image_patch.exists(""plate"")
    is_orange = image_patch.exists(""orange"")
    return bool_to_yesno(is_plate or is_orange)",1
612894,Do you see any doors?,no,./data/gqa/../images/2358938.jpg,yes,"def execute_command_612894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""door""))",0
13562221,What's the bear on?,rock,./data/gqa/../images/2360312.jpg,rock,"def execute_command_13562221(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What's the bear on?"")
    return bear_patches[0].simple_query(""What's the bear on?"")",1
9536851,Is the woman in front of the trees holding scissors?,yes,./data/gqa/../images/2357907.jpg,no,"def execute_command_9536851(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman holding scissors"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman holding scissors is found, query the image directly
        return image_patch.simple_query(""Is the woman in front of the trees holding scissors?"")
    return ""yes""",0
9682405,What is on the machine?,label,./data/gqa/../images/2353763.jpg,control panel,"def execute_command_9682405(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    machine_patches = image_patch.find(""machine"")
    # Question assumes only one machine patch
    if len(machine_patches) == 0:
        # If no machine is found, query the image directly
        return image_patch.simple_query(""What is on the machine?"")
    machine_patch = machine_patches[0]
    return machine_patch.simple_query(""What is on the machine?"") # crop would include the machine so keep it in the query",0
8649435,What is on the white wall?,newspaper,./data/gqa/../images/2340495.jpg,picture,"def execute_command_8649435(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the white wall?"")",0
12487033,Does the logo look red?,no,./data/gqa/../images/2315954.jpg,no,"def execute_command_12487033(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""logo"", ""red""))",1
14301289,What type of vehicle is to the left of the white vehicle?,"Error Codigo: invalid syntax (Codex, line 8)",./data/gqa/../images/2362109.jpg,bus,"def execute_command_14301289(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    white_vehicle_patches = image_patch.find(""white vehicle"")
    # Question assumes only one white vehicle patch
    if len(white_vehicle_patches) == 0:
        # If no white vehicle is found, query the image directly
        return image_patch.simple_query(""What type of vehicle is to the left of the white vehicle?"")
    white_vehicle_patch = white Vehicle if white_vehicle_patches[0].simple_query(""Is the vehicle white?"") else white None if white_vehicle_patches[0].simple_query(""Is the vehicle blue?"") else white Other for if max (0 if white_vehicle_patches[0].simple_query (""Is the vehicle blue?"") else 1, 0 if white_vehicle_patches[0].simple_query (""Is the vehicle red?"") else 1) if white_vehicle_patches[0].simple_query (""Is the vehicle red?"") else 0 of if max (0 if white_vehicle_patches[0].simple_query (""Is the vehicle black?"") else 1, 0 if white_vehicle_patches[0].simple_query (""Is the vehicle green?"") else 1) if white_vehicle_patches[0].simple_query (""Is the vehicle green?"") else 0 for if white_vehicle_patches[0].simple_query (""Is the vehicle yellow?"") else 0 if white_vehicle_patches[0].simple_query (""Is the vehicle yellow?"") else 0
    if white_vehicle_patch == White: return image_patch.simple_query (""What type of vehicle is to the left of the white vehicle?"")
    vehicle_patches = image_patch.find (""vehicle"")
    # Question assumes only one vehicle patch
    if len (vehicle_patches) == 0: # If no vehicle is found, query the image directly
        return image_patch.simple_query (""What type of vehicle is to the left of the white vehicle?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < white_vehicle_patch.value if white_vehicle_patch != White else image_patch.horizontal_center: # white vehicle is at the center
            return vehicle_patch.simple_query (""What type of vehicle is to the left of the white vehicle?"")
    return image_patch.simple_query (""What type of vehicle is to the left of the white vehicle?"")
class Vehicle: pass
class White(Vehicle): pass
class Black(Vehicle): pass
class Blue(Vehicle): pass
class Green(Vehicle): pass
class Red(Vehicle): pass
class Yellow(Vehicle): pass
class None(Vehicle",0
523976,Which kind of vehicle is large?,train,./data/gqa/../images/2318853.jpg,train,"def execute_command_523976(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    max_size = 0
    max_vehicle_name = """"
    for vehicle_patch in vehicle_patches:
        width = vehicle_patch.width
        height = vehicle_patch.height
        size = width * height
        if size > max_size:
            max_size = size
            max_vehicle_name = vehicle_patch.simple_query(""What kind of vehicle is this?"")
    return max_vehicle_name",1
3423213,Who is in front of the trees?,the man,./data/gqa/../images/2361006.jpg,family,"def execute_command_3423213(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in front of the trees?"")",0
18107197,Is the ottoman to the right or to the left of the brown chair?,left,./data/gqa/../images/2411038.jpg,right,"def execute_command_18107197(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    ottoman_patches = image_patch.find(""ottoman"")
    brown_chair_patches = image_patch.find(""brown chair"")
    # Question assumes only one brown chair patch
    if len(brown_chair_patches) == 0:
        # If no brown chair is found, query the image directly
        return image_patch.simple_query(""Is the ottoman to the right or to the left of the brown chair?"")
    brown_chair_patch = brown_chair_patches[0]
    if len(ottoman_patches) == 0:
        return ""left""
    for ottoman_patch in ottoman_patches:
        if ottoman_patch.horizontal_center > brown_chair_patch.horizontal_center:
            return ""right""
        else:
            return ""left""",0
5716578,Is there a laptop on the bed near the magazines?,yes,./data/gqa/../images/2386029.jpg,no,"def execute_command_5716578(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""Is there a laptop on the bed near the magazines?"")
    bed_patch = bed_patches[0]
    laptop_patches = image_patch.find(""laptop"")
    # Question assumes one laptop patch
    if len(laptop_patches) == 0:
        return ""no""
    laptop_patch = laptop_patches[0]
    magazine_patches = image_patch.find(""magazine"")
    # Question assumes one magazine patch
    if len(magazine_patches) == 0:
        return ""no""
    magazine_patch = magazine_patches[0]
    if (abs(laptop_patch.horizontal_center - bed_patch.horizontal_center) <= abs(image_patch.horizontal_center - bed_patch.horizontal_center) and
        abs(laptop_patch.horizontal_center - bed_patch.horizontal_center) <= abs(image_patch.horizontal_center - magazine_patch.horizontal_center)):
        return ""yes""
    return ""no""",0
8215791,Is the porcelain toilet to the left or to the right of the small trash can?,right,./data/gqa/../images/2367752.jpg,right,"def execute_command_8215791(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""porcelain toilet"")
    # Question assumes only one porcelain toilet patch
    if len(toilet_patches) == 0:
        # If no porcelain toilet is found, query the image directly
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    toilet_patch = toilet_patches[0]
    trash_patches = image_patch.find(""small trash can"")
    # Question assumes only one small trash can patch
    if len(trash_patches) == 0:
        return image_patch.simple_query(""Is the porcelain toilet to the left or to the right of the small trash can?"")
    trash_patch = trash_patches[0]
    if toilet_patch.horizontal_center < trash_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
17528455,What is in front of the wall?,chair,./data/gqa/../images/2410790.jpg,chair,"def execute_command_17528455(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the wall?"")",1
4896890,Do the goggles and the gloves have a different colors?,no,./data/gqa/../images/2323940.jpg,yes,"def execute_command_4896890(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    goggles_patches = image_patch.find(""goggles"")
    # Question assumes only one goggles patch
    if len(goggles_patches) == 0:
        # If no goggles are found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Do the goggles and the gloves have a different colors?""))
    goggles_patch = goggles_patches[0]
    gloves_patches = image_patch.find(""gloves"")
    # Question assumes only one gloves patch
    if len(gloves_patches) == 0:
        return bool_to_yesno(image_patch.simple_query(""Do the goggles and the gloves have a different colors?""))
    goggles_color = goggles_patch.best_text_match([""red"", ""blue"", ""green"", ""black"", ""white"", ""brown"", ""gray"", ""yellow"", ""orange"", ""purple""])
    gloves_color = gloves_patches[0].best_text_match([""red"", ""blue"", ""green"", ""black"", ""white"", ""brown"", ""gray"", ""yellow"", ""orange"", ""purple""])
    return bool_to_yesno(goggles_color != gloves_color)",0
947724,Is there any purple pillow or kite in this photograph?,yes,./data/gqa/../images/2363706.jpg,yes,"def execute_command_947724(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_purple_pillow = image_patch.exists(""purple pillow"")
    is_kite = image_patch.exists(""kite"")
    return bool_to_yesno(is_purple_pillow or is_kite)",1
5679522,"What are the people to the right of the man doing, standing or sitting?",standing,./data/gqa/../images/2344481.jpg,sitting,"def execute_command_5679522(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")
    man_patch = man_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes at least one people patch to the right of the man
    for people_patch in people_patches:
        if people_patch.horizontal_center > man_patch.horizontal_center:
            return people_patch.simple_query(""standing if right of man, otherwise sitting"")
    # If no people are to the right of the man, query the image directly
    return image_patch.simple_query(""What are the people to the right of the man doing, standing or sitting?"")",0
15492262,Which kind of furniture is white?,bunk beds,./data/gqa/../images/2404401.jpg,bed,"def execute_command_15492262(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.best_text_match([""brown"", ""white"", ""wooden""]):
            return furniture_patch.simple_query(""Which kind of furniture is white?"")
    return furniture_patch.simple_query(""Which kind of furniture is white?"") # if no furniture is white, query the image directly",0
151032547,Is the bear on the right side?,yes,./data/gqa/../images/2362719.jpg,yes,"def execute_command_151032547(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""Is the bear on the right side?"")
    bear_patch = bear_patches[0]
    image_center = image_patch.horizontal_center
    return bool_to_yesno(bear_patch.horizontal_center > image_center)",1
5698674,Are there either any planters or benches?,no,./data/gqa/../images/2345759.jpg,no,"def execute_command_5698674(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_planter = image_patch.exists(""planter"")
    is_bench = image_patch.exists(""bench"")
    return bool_to_yesno(is_planter or is_bench)",1
19397103,What is the person that is standing staring at?,laptop,./data/gqa/../images/2362477.jpg,display,"def execute_command_19397103(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the person that is standing staring at?"")",0
11630681,What is the color of the necklace?,purple,./data/gqa/../images/2368188.jpg,blue,"def execute_command_11630681(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    necklace_patches = image_patch.find(""necklace"")
    # Question assumes only one necklace patch
    if len(necklace_patches) == 0:
        # If no necklace is found, query the image directly
        return image_patch.simple_query(""What is the color of the necklace?"")
    return necklace_patches[0].best_text_match([""red"", ""blue"", ""green"", ""gold"", ""black"", ""brown"", ""silver"", ""purple""])",0
248245,Is the table to the left or to the right of the fence?,left,./data/gqa/../images/2399658.jpg,left,"def execute_command_248245(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    # Question assumes only one table patch
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    table_patch = table_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes one fence patch
    if len(fence_patches) == 0:
        return image_patch.simple_query(""Is the table to the left or to the right of the fence?"")
    fence_patch = fence_patches[0]
    if table_patch.horizontal_center < fence_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
837033,Are there round windows or doors?,no,./data/gqa/../images/2365264.jpg,no,"def execute_command_837033(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_round_window = image_patch.exists(""round window"")
    is_round_door = image_patch.exists(""round door"")
    return bool_to_yesno(is_round_window or is_round_door)",1
5249150,Are there any bears or napkins in the picture?,no,./data/gqa/../images/2384131.jpg,no,"def execute_command_5249150(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_bear = image_patch.exists(""bear"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_bear or is_napkin)",1
13908598,What kind of vehicle is to the left of the person?,van,./data/gqa/../images/2368544.jpg,cars,"def execute_command_13908598(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    person_patch = person_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < person_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the person?"")
    # If no vehicle is to the left, query the image directly
    return image_patch.simple_query(""What kind of vehicle is to the left of the person?"")",0
61006749,Who is dressed in pink?,Error Ejecucion: invalid literal for int() with base 10: 'no',./data/gqa/../images/2343256.jpg,girls,"def execute_command_61006749(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    max_pink_area = 0
    best_dressed = None
    for patch in image_patch.find(""man"") + image_patch.find(""woman""):
        pink_area = patch.simple_query(""What percentage of your clothing is pink?"").rstrip(""%"") # crop would include clothing so keep it in the query
        if pink_area != ""0"" and int(pink_area) > max_pink_area:
            max_pink_area = int(pink_area)
            best_dressed = patch.simple_query(""Who are you?"")
    if best_dressed is None:
        # If no one is dressed in pink, query the image directly
        return image_patch.simple_query(""Who is dressed in pink?"")
    return best_dressed",0
6122955,Does the pillow have yellow color?,no,./data/gqa/../images/2395059.jpg,no,"def execute_command_6122955(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Does the pillow have yellow color?"")
    return bool_to_yesno(pillow_patches[0].verify_property(""pillow"", ""yellow""))",1
6861738,Is the old woman to the right or to the left of the faucet?,right,./data/gqa/../images/2386261.jpg,right,"def execute_command_6861738(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    old_woman_patches = image_patch.find(""old woman"")
    # Question assumes only one old woman patch
    if len(old_woman_patches) == 0:
        # If no old woman is found, query the image directly
        return image_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    old_woman_patch = old_woman_patches[0]
    faucet_patches = image_patch.find(""faucet"")
    # Question assumes one faucet patch
    if len(faucet_patches) == 0:
        return old_woman_patch.simple_query(""Is the old woman to the right or to the left of the faucet?"")
    faucet_patch = faucet_patches[0]
    if old_woman_patch.horizontal_center > faucet_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
15833048,Which kind of animal is on the road?,cow,./data/gqa/../images/2352085.jpg,cow,"def execute_command_15833048(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is on the road?"")
    animal_patch = animal_patches[0]
    if animal_patch.exists(""car""):
        return ""car""
    else:
        return animal_patch.simple_query(""Which kind of animal is on the road?"")",1
9524339,What animal is large?,dog,./data/gqa/../images/2373158.jpg,dog,"def execute_command_9524339(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is large?"")
    max_size = 0
    max_animal = None
    for animal_patch in animal_patches:
        width = animal_patch.width
        height = animal_patch.height
        size = width * height
        if size > max_size:
            max_size = size
            max_animal = animal_patch
    return max_animal.simple_query(""What animal is large?"")",1
18255749,How clean are the sheets the pillow is to the right of?,clean,./data/gqa/../images/2378355.jpg,clean,"def execute_command_18255749(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""How clean are the sheets the pillow is to the right of?"")
    pillow_patch = pillow_patches[0]
    for other_patch in image_patch.find(""pillow""):
        if other_patch.horizontal_center > pillow_patch.horizontal_center:
            return pillow_patch.simple_query(""How clean are the sheets?"")
    return pillow_patch.simple_query(""How clean are the sheets?"")",1
19797097,What's the man wearing?,orange shirt,./data/gqa/../images/1498.jpg,coat,"def execute_command_19797097(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What are you wearing?"") # ask directly to get the clothing",0
6899090,Is the man to the right or to the left of the appliance that looks white?,right,./data/gqa/../images/2396386.jpg,right,"def execute_command_6899090(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    man_patch = man_patches[0]
    appliance_patches = image_patch.find(""appliance white"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the appliance that looks white?"")
    appliance_patch = appliance_patches[0]
    if man_patch.horizontal_center > appliance_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
3357701,Does the dog to the right of the other dog have white color?,no,./data/gqa/../images/2380239.jpg,yes,"def execute_command_3357701(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes at least two dog patches
    if len(dog_patches) < 2:
        # If less than two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the right of the other dog have white color?"")
    right_dog_patches = [patch for patch in dog_patches if patch.horizontal_center > dog_patches[0].horizontal_center]
    if len(right_dog_patches) == 0:
        return ""no""
    right_dog_patch = right_dog_patches[0]
    return bool_to_yesno(right_dog_patch.verify_property(""dog"", ""white""))",0
2829418,What's the girl holding?,,./data/gqa/../images/2381595.jpg,kite,"def execute_command_2829418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What's the girl holding?"")
    girl_patch = girl_patches[0]
    max_confidence = 0
    max_object = """"
    for object_name in [""phone"", ""puppy"", ""balloons"", ""painted eggs"", ""flowers"", ""book"", ""bottle"", ""ball"", ""fish"", ""doll""]:
        object_patches = image_patch.find(object_name)
        # Question assumes only one object patch
        if len(object_patches) > 0:
            object_patch = object_patches[0]
            confidence = object_patch.simple_query(f""How confident is the girl holding a {object_name}?"")
            if confidence != ""no"" and float(confidence[:-1]) > max_confidence:
                max_confidence = float(confidence[:-1])
                max_object = object_name
    return max_object",0
15930109,Which kind of vehicle is blue?,car,./data/gqa/../images/2382038.jpg,car,"def execute_command_15930109(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is blue?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.verify_property(""vehicle"", ""blue""):
            return vehicle_patch.best_text_match([""car"", ""bike"", ""truck"", ""motorcycle"", ""boat"", ""airplane""])
    # If no blue vehicle is found, query the image directly
    return image_patch.simple_query(""Which kind of vehicle is blue?"")",1
1525382,What type of vegetable is on the food with the cheese?,peppers,./data/gqa/../images/2363859.jpg,pepper,"def execute_command_1525382(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vegetable is on the food with the cheese?"")",0
8548980,Are there either players or hand soaps?,yes,./data/gqa/../images/2348943.jpg,no,"def execute_command_8548980(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_player = image_patch.exists(""player"")
    is_hand_soap = image_patch.exists(""hand soap"")
    return bool_to_yesno(is_player or is_hand_soap)",0
4438348,"Which kind of food is not made, the sandwich or the croissant?",sandwich,./data/gqa/../images/2405611.jpg,croissant,"def execute_command_4438348(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food"")
    # Question assumes only one patch of each food type
    if len(food_patches) == 0:
        # If no food is found, query the image directly
        return image_patch.simple_query(""Which kind of food is not made, the sandwich or the croissant?"")
    sandwich_patches = [patch for patch in food_patches if patch.simple_query(""Is the food made?"") == ""yes""]
    croissant_patches = [patch for patch in food_patches if patch.simple_query(""Is the food made?"") == ""no""]
    if len(sandwich_patches) == 0:
        return ""croissant""
    elif len(croissant_patches) == 0:
        return ""sandwich""
    else:
        return ""sandwich""",0
6423906,Which kind of food is on the plate?,sausage,./data/gqa/../images/2414271.jpg,sausage,"def execute_command_6423906(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of food is on the plate?"")",1
1993231,Are the animals in the image of different types?,yes,./data/gqa/../images/2385977.jpg,yes,"def execute_command_1993231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes at least two animal patches
    if len(animal_patches) < 2:
        # If less than two animals are found, query the image directly
        return bool_to_yesno(image_patch.exists(""two different animals""))
    types = set()
    for animal_patch in animal_patches:
        animal_type = animal_patch.simple_query(""What type of animal is this?"")
        types.add(animal_type)
    return bool_to_yesno(len(types) > 1)",1
13949656,Are there any people to the left of the tray?,no,./data/gqa/../images/1592103.jpg,no,"def execute_command_13949656(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tray_patches = image_patch.find(""tray"")
    # Question assumes only one tray patch
    if len(tray_patches) == 0:
        # If no tray is found, query the image directly
        return image_patch.simple_query(""Are there any people to the left of the tray?"")
    tray_patch = tray_patches[0]
    people_patches = image_patch.find(""people"")
    for people_patch in people_patches:
        if people_patch.horizontal_center < tray_patch.horizontal_center:
            return ""yes""
    return ""no""",1
184032,Does the fresh pineapple appear to be ripe?,yes,./data/gqa/../images/2328765.jpg,yes,"def execute_command_184032(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pineapple_patches = image_patch.find(""fresh pineapple"")
    # Question assumes only one pineapple patch
    if len(pineapple_patches) == 0:
        # If no pineapple is found, query the image directly
        return image_patch.simple_query(""Does the fresh pineapple appear to be ripe?"")
    return bool_to_yesno(pineapple_patches[0].verify_property(""fresh pineapple"", ""ripe""))",1
9392591,Are there chairs or smoothies?,no,./data/gqa/../images/2323628.jpg,no,"def execute_command_9392591(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_smoothie = image_patch.exists(""smoothie"")
    return bool_to_yesno(is_chair or is_smoothie)",1
4285170,Which kind of animal is to the right of the sheep?,goat,./data/gqa/../images/2374871.jpg,cow,"def execute_command_4285170(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch to the right of the sheep
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    for animal_patch in animal_patches:
        if animal_patch.horizontal_center > image_patch.find(""sheep"")[0].horizontal_center:
            return animal_patch.simple_query(""Which kind of animal is to the right of the sheep?"")
    # If no animal is to the right of the sheep, query the image directly
    return image_patch.simple_query(""Which kind of animal is to the right of the sheep?"")",0
9896138,Are there any boxes to the left of the screen in the picture?,no,./data/gqa/../images/2379471.jpg,no,"def execute_command_9896138(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # assumes the screen is the rightmost part of the image
    screen_right = image_patch.horizontal_center
    boxes_patches = image_patch.find(""box"")
    for box_patch in boxes_patches:
        if box_patch.horizontal_center < screen_right:
            return ""yes""
    return ""no""",1
1400333,What do you think is the man on?,skateboard,./data/gqa/../images/2345833.jpg,skateboard,"def execute_command_1400333(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What do you think is the man on?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What am I sitting on?"") # crop would include the man so keep it in the query",1
13105327,Is the boot white or orange?,orange,./data/gqa/../images/2380045.jpg,orange,"def execute_command_13105327(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    boot_patches = image_patch.find(""boot"")
    # Question assumes only one boot patch
    if len(boot_patches) == 0:
        # If no boot is found, query the image directly
        return image_patch.simple_query(""Is the boot white or orange?"")
    return boot_patches[0].best_text_match([""white"", ""orange""])",1
3659880,Does the wood boat have silver color?,no,./data/gqa/../images/2411226.jpg,no,"def execute_command_3659880(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    wood_boat_patches = image_patch.find(""wood boat"")
    # Question assumes only one wood boat patch
    if len(wood_boat_patches) == 0:
        # If no wood boat is found, query the image directly
        return image_patch.simple_query(""Does the wood boat have silver color?"")
    return bool_to_yesno(wood_boat_patches[0].verify_property(""wood boat"", ""silver""))",1
1827802,Is the red pot on the appliance to the right of the mixer?,yes,./data/gqa/../images/2321180.jpg,yes,"def execute_command_1827802(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    red_pot_patches = image_patch.find(""red pot"")
    # Question assumes only one red pot patch
    if len(red_pot_patches) == 0:
        # If no red pot is found, query the image directly
        return image_patch.simple_query(""Is the red pot on the appliance to the right of the mixer?"")
    red_pot_patch = red_pot_patches[0]
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes one appliance patch
    if len(appliance_patches) == 0:
        return ""no""
    appliance_patch = appliance_patches[0]
    mixer_patches = image_patch.find(""mixer"")
    # Question assumes one mixer patch
    if len(mixer_patches) == 0:
        return ""no""
    mixer_patch = mixer_patches[0]
    if appliance_patch.horizontal_center > mixer_patch.horizontal_center:
        return bool_to_yesno(appliance_patch.horizontal_center > red_pot_patch.horizontal_center)
    else:
        return bool_to_yesno(red_pot_patch.horizontal_center > mixer_patch.horizontal_center)",1
14809102,The phone that is in front of the camera is of what color?,white,./data/gqa/../images/2390981.jpg,white,"def execute_command_14809102(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    phone_patches = image_patch.find(""phone"")
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    for phone_patch in phone_patches:
        return phone_patch.simple_query(""The phone that is in front of the camera is what color?"")",1
61001545,What type of food is to the left of the silver spoon?,broccoli,./data/gqa/../images/2374409.jpg,cheese,"def execute_command_61001545(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of food is to the left of the silver spoon?"")",0
799463,Are there both a window and a door in the picture?,no,./data/gqa/../images/2361911.jpg,no,"def execute_command_799463(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",1
11260725,Does the water have small size and white color?,no,./data/gqa/../images/2378779.jpg,no,"def execute_command_11260725(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    water_patches = image_patch.find(""water"")
    # Question assumes only one water patch
    if len(water_patches) == 0:
        # If no water is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the water have small size and white color?""))
    water_patch = water_patches[0]
    return bool_to_yesno(water_patch.verify_property(""water"", ""small"") and water_patch.verify_property(""water"", ""white""))",1
2397653,Are there any fences that are white?,yes,./data/gqa/../images/2358708.jpg,yes,"def execute_command_2397653(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    for fence_patch in fence_patches:
        if fence_patch.verify_property(""fence"", ""white""):
            return ""yes""
    return ""no""",1
1554603,Who is holding the animal?,boy,./data/gqa/../images/2349439.jpg,boy,"def execute_command_1554603(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Who is holding the animal?"")
    animal_patch = animal_patches[0]
    max_hold_probability = 0
    max_hold_patch = None
    for patch in image_patch.find(""man"") + image_patch.find(""woman"") + image_patch.find(""boy"") + image_patch.find(""girl""):
        hold_probability = patch.simple_query(""Is this person holding the animal?"")
        if hold_probability == ""yes"" and hold_probability != patch.simple_query(""Is the animal being held by this person?""):
            if hold_probability > max_hold_probability:
                max_hold_patch = patch
                max_hold_probability = hold_probability
    if max_hold_patch is None:
        return image_patch.simple_query(""Who is holding the animal?"")
    return max_hold_patch.simple_query(""Who is holding the animal?"")",1
11606818,Is the man to the right or to the left of the people the stroller is to the right of?,left,./data/gqa/../images/2367450.jpg,left,"def execute_command_11606818(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    people_patch = people_patches[0]
    right_of_people_patches = image_patch.find(""people with stroller to right"")
    # if no people with stroller to right found, query the image directly
    if len(right_of_people_patches) == 0:
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    right_of_people_patch = right_of_people_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right or to the left of the people the stroller is to the right of?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center > right_of_people_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
8988476,What kind of furniture is presented in this photo?,chair,./data/gqa/../images/2386661.jpg,chair,"def execute_command_8988476(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is presented in this photo?"")",1
10695214,What is the man with the backpack holding?,a cell phone,./data/gqa/../images/2371579.jpg,cell phone,"def execute_command_10695214(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man with a backpack"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man with a backpack is found, query the image directly
        return image_patch.simple_query(""What is the man with the backpack holding?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What are you holding?"") # crop would include the backpack so keep it in the query",1
91058050,Are there both mouse pads and computer mice in the photograph?,yes,./data/gqa/../images/2371684.jpg,yes,"def execute_command_91058050(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_mouse_pad = image_patch.exists(""mouse pad"")
    is_computer_mouse = image_patch.exists(""computer mouse"")
    return bool_to_yesno(is_mouse_pad and is_computer_mouse)",1
1972064,Is the person in front of the tree wearing jeans?,no,./data/gqa/../images/286080.jpg,yes,"def execute_command_1972064(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return bool_to_yesno(image_patch.exists(""person in front of tree""))
    person_patch = person_patches[0]
    if not person_patch.exists(""tree in front""):
        return ""no""
    return bool_to_yesno(person_patch.verify_property(""person in front of tree"", ""wearing jeans""))",0
167162,Is there a bike to the right of the purse that is to the right of the woman?,yes,./data/gqa/../images/2351365.jpg,yes,"def execute_command_167162(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    woman_patch = woman_patches[0]
    purse_patches = image_patch.find(""purse"")
    # Question assumes one purse patch
    if len(purse_patches) == 0:
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    right_of_woman_purse_patches = [patch for patch in purse_patches if patch.horizontal_center > woman_patch.horizontal_center]
    if len(right_of_woman_purse_patches) == 0:
        return image_patch.simple_query(""Is there a bike to the right of the purse that is to the right of the woman?"")
    right_of_woman_purse_patch = right_of_woman_purse_patches[0]
    bike_patches = image_patch.find(""bike"")
    # Question assumes one bike patch
    if len(bike_patches) == 0:
        return ""no""
    for bike_patch in bike_patches:
        if bike_patch.horizontal_center > right_of_woman_purse_patch.horizontal_center:
            return ""yes""
    return ""no""",1
1695388,Who is wearing a shirt?,the man,./data/gqa/../images/2386308.jpg,guy,"def execute_command_1695388(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candidates = [""man"", ""woman"", ""boy"", ""girl""]
    for candidate in candidates:
        if image_patch.exists(candidate) and image_patch.exists(""shirt""):
            return image_patch.simple_query(""Who is wearing a shirt?"")
    return ""nobody""",0
10960149,Is the woman to the left or to the right of the man in the bottom?,right,./data/gqa/../images/2347450.jpg,right,"def execute_command_10960149(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bottom_man_patches = image_patch.find(""man in the bottom"")
    # Question assumes only one man patch
    if len(bottom_man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    bottom_man_patch = bottom_man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Is the woman to the left or to the right of the man in the bottom?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < bottom_man_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
16921984,What is the bent man to the right of the other men doing?,jumping,./data/gqa/../images/2378471.jpg,posing,"def execute_command_16921984(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes at least two man patches
    if len(man_patches) < 2:
        # If less than two men are found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    right_man_patch = man_patches[0]
    for man_patch in man_patches:
        if man_patch.horizontal_center > right_man_patch.horizontal_center:
            right_man_patch = man_patch
    bent_man_patches = image_patch.find(""bent man"")
    # Question assumes one bent man patch
    if len(bent_man_patches) == 0:
        # If no bent man is found, query the image directly
        return image_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    bent_man_patch = bent_man_patches[0]
    if right_man_patch.horizontal_center > image_patch.horizontal_center:
        return right_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")
    return bent_man_patch.simple_query(""What is the bent man to the right of the other men doing?"")",0
12175564,What animal are the men to the right of the girl leading?,cow,./data/gqa/../images/2326674.jpg,cows,"def execute_command_12175564(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    girl_patch = girl_patches[0]
    men_patches = image_patch.find(""man leading an animal"")
    # Question assumes one man patch
    if len(men_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    man_patch = men_patches[0]
    animal_patches = image_patch.find(""horse"") or image_patch.find(""cow"") or image_patch.find(""elephant"") or image_patch.find(""donkey"")
    # Question assumes one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal are the men to the right of the girl leading?"")
    animal_patch = max(animal_patches, key=lambda patch: patch.horizontal_center)
    return animal_patch.simple_query(""What animal are the men to the right of the girl leading?"")",0
1219606,On which side of the image is the house?,left,./data/gqa/../images/2366688.jpg,left,"def execute_command_1219606(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the house?"")
    house_patch = house_patches[0]
    if house_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
1770499,Is the black suitcase to the right or to the left of the person on the left?,right,./data/gqa/../images/1159718.jpg,right,"def execute_command_1770499(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes at least one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    left_person_patch = person_patches[0]
    black_suitcase_patches = image_patch.find(""black suitcase"")
    # Question assumes only one black suitcase patch
    if len(black_suitcase_patches) == 0:
        return image_patch.simple_query(""Is the black suitcase to the right or to the left of the person on the left?"")
    black_suitcase_patch = black_suitcase_patches[0]
    if black_suitcase_patch.horizontal_center > left_person_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
5282406,Is the pot to the left of a chair?,yes,./data/gqa/../images/2401498.jpg,no,"def execute_command_5282406(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Is the pot to the left of a chair?"")
    pot_patch = pot_patches[0]
    chair_patches = image_patch.find(""chair"")
    # Question assumes one chair patch
    if len(chair_patches) == 0:
        return ""no""
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center > pot_patch.horizontal_center:
            return ""yes""
    return ""no""",0
10914401,Where are the people?,Error Ejecucion: could not convert string to float: 'ye',./data/gqa/../images/1437.jpg,park,"def execute_command_10914401(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""Where are the people?"")
    people_patch = people_patches[0]
    locations = [""outdoors"", ""home"", ""store"", ""park"", ""street"", ""office"", ""indoor"", ""beach""]
    max_confidence = 0
    best_location = """"
    for location in locations:
        confidence = people_patch.simple_query(f""How likely are the people to be in a {location}?"")
        confidence = float(confidence[:-1]) # remove ""%""
        if confidence > max_confidence:
            max_confidence = confidence
            best_location = location
    return best_location",0
1919722,What animal is eating the grass?,sheep,./data/gqa/../images/2402094.jpg,sheep,"def execute_command_1919722(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal eating"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is eating, query the image directly
        return image_patch.simple_query(""What animal is eating the grass?"")
    return animal_patches[0].simple_query(""What animal is eating?"") # crop would include eating so keep it in the query",1
9681008,Who is wearing a helmet?,the man,./data/gqa/../images/2353765.jpg,man,"def execute_command_9681008(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candidate_patches = image_patch.find(""biker"") or image_patch.find(""motorcyclist"") or image_patch.find(""policeman"") or image_patch.find(""hiker"")
    # Question assumes only one candidate patch
    if len(candidate_patches) == 0:
        # If no candidate is found, query the image directly
        return image_patch.simple_query(""Who is wearing a helmet?"")
    for candidate_patch in candidate_patches:
        if candidate_patch.simple_query(""Is the person wearing a helmet?"") == ""yes"":
            return candidate_patch.simple_query(""Who is wearing a helmet?"")
    # If no one is wearing a helmet, query the image directly
    return image_patch.simple_query(""Who is wearing a helmet?"")",1
16861675,Who is on the surfboard in the middle of the photo?,a man,./data/gqa/../images/2384357.jpg,man,"def execute_command_16861675(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # crop to the middle of the image
    middle_image_patch = image_patch.crop(image_patch.width // 2 - image_patch.width // 4, image_patch.height // 2 - image_patch.height // 4,
                                         image_patch.width // 2 + image_patch.width // 4, image_patch.height // 2 + image_patch.height // 4)
    # find the person on the surfboard
    person_patches = middle_image_patch.find(""person on surfboard"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person on surfboard is found, query the image directly
        return middle_image_patch.simple_query(""Who is on the surfboard in the middle of the photo?"")
    return person_patches[0].simple_query(""Who is on the surfboard in the middle of the photo?"")",1
10947426,What is the color of the lizard beside the banana?,brown,./data/gqa/../images/2410441.jpg,gray,"def execute_command_10947426(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    lizard_patches = image_patch.find(""lizard"")
    # Question assumes only one lizard patch
    if len(lizard_patches) == 0:
        # If no lizard is found, query the image directly
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    lizard_patch = lizard_patches[0]
    banana_patches = image_patch.find(""banana"")
    # Question assumes one banana patch
    if len(banana_patches) == 0:
        return image_patch.simple_query(""What is the color of the lizard beside the banana?"")
    # Query the image directly to find the color of the lizard
    return lizard_patch.simple_query(""What is my color?"")",0
18200684,Is the wine glass in the top or in the bottom part?,top,./data/gqa/../images/2345208.jpg,top,"def execute_command_18200684(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    wine_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine glass patch
    if len(wine_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""Is the wine glass in the top or in the bottom part?"")
    if wine_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
3882988,What kind of vehicle is to the left of the people that are in the middle of the picture?,bus,./data/gqa/../images/2316620.jpg,car,"def execute_command_3882988(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one patch of people in the middle
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    middle_patch = people_patches[0]
    if middle_patch.horizontal_center != image_patch.horizontal_center:
        # If the people are not in the middle, query directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < middle_patch.horizontal:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")
    # If no vehicle is to the left, query the image directly
    return image_patch.simple_query(""What kind of vehicle is to the left of the people that are in the middle of the picture?"")",0
171012637,Is the teddy bear to the right of a suitcase?,yes,./data/gqa/../images/2363844.jpg,yes,"def execute_command_171012637(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    teddy_patches = image_patch.find(""teddy bear"")
    # Question assumes only one teddy bear patch
    if len(teddy_patches) == 0:
        # If no teddy bear is found, query the image directly
        return image_patch.simple_query(""Is the teddy bear to the right of a suitcase?"")
    teddy_patch = teddy_patches[0]
    suitcase_patches = image_patch.find(""suitcase"")
    # Question assumes at least one suitcase patch
    if len(suitcase_patches) == 0:
        return ""no""
    for suitcase_patch in suitcase_patches:
        if suitcase_patch.horizontal_center < teddy_patch.horizontal_center:
            return ""yes""
    return ""no""",1
19861372,Is the woman's hair long or short?,long,./data/gqa/../images/2350003.jpg,long,"def execute_command_19861372(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair long or short?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""Is your hair long or short?"") # ask directly to the woman patch",1
623889,Are both the television and the armchair the same color?,yes,./data/gqa/../images/2319836.jpg,yes,"def execute_command_623889(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""television"")
    # Question assumes only one TV patch
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return bool_to_yesno(image_patch.exists(""armchair""))
    tv_patch = tv_patches[0]
    armchair_patches = image_patch.find(""armchair"")
    # Question assumes only one armchair patch
    if len(armchair_patches) == 0:
        return bool_to_yesno(image_patch.exists(""television""))
    armchair_patch = armchair_patches[0]
    return bool_to_yesno(tv_patch.best_text_match([""blue"", ""red"", ""brown"", ""black"", ""white""]) == armchair_patch.best_text_match([""blue"", ""red"", ""brown"", ""black"", ""white""]))",1
4917605,Is the shoe white or brown?,brown,./data/gqa/../images/2380186.jpg,brown,"def execute_command_4917605(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shoe_patches = image_patch.find(""shoe"")
    # Question assumes only one shoe patch
    if len(shoe_patches) == 0:
        # If no shoe is found, query the image directly
        return image_patch.simple_query(""Is the shoe white or brown?"")
    return shoe_patches[0].best_text_match([""brown"", ""white""])",1
91055143,What is on the table?,wine,./data/gqa/../images/2375931.jpg,glass,"def execute_command_91055143(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")",0
5430643,What do you think sits on the plate to the left of the tomato?,pizza,./data/gqa/../images/2338569.jpg,lemon,"def execute_command_5430643(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What do you think sits on the plate to the left of the tomato?"")",0
523936,Is the woman in the top part of the picture?,no,./data/gqa/../images/2318853.jpg,no,"def execute_command_523936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman in the top part of the picture?"")
    woman_patch = woman_patches[0]
    if woman_patch.vertical_center > image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",1
3189548,Is there a bottle on the nightstand that is on the bed?,yes,./data/gqa/../images/2396367.jpg,yes,"def execute_command_3189548(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    nightstand_patches = image_patch.find(""nightstand"")
    # Question assumes only one nightstand patch
    if len(nightstand_patches) == 0:
        # If no nightstand is found, query the image directly
        return image_patch.simple_query(""Is there a bottle on the nightstand that is on the bed?"")
    nightstand_patch = nightstand_patches[0]
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        return ""no""
    bottle_patch = bottle_patches[0]
    if bottle_patch.horizontal_center > nightstand_patch.horizontal_center and image_patch.simple_query(""Is the nightstand on the bed?"") == ""yes"":
        return ""yes""
    return ""no""",1
14292161,The pot is of which color?,white,./data/gqa/../images/2330795.jpg,white,"def execute_command_14292161(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""The pot is of which color?"")
    return pot_patches[0].best_text_match([""red"", ""green"", ""blue"", ""white"", ""brown"", ""gray""])",1
17495150,"What device is black, the microphone or the laptop?",laptop,./data/gqa/../images/2409112.jpg,laptop,"def execute_command_17495150(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_black_microphone = False
    is_black_laptop = False
    for patch in image_patch.find(""microphone""):
        if patch.simple_query(""Is the microphone black?"") == ""yes"":
            is_black_microphone = True
    for patch in image_patch.find(""laptop""):
        if patch.simple_query(""Is the laptop black?"") == ""yes"":
            is_black_laptop = True
    if is_black_microphone:
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    elif is_black_laptop:
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")
    else:
        return image_patch.simple_query(""What device is black, the microphone or the laptop?"")",1
1521847,Is the cat on a desk?,yes,./data/gqa/../images/2340804.jpg,yes,"def execute_command_1521847(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""Is the cat on a desk?"")
    cat_patch = cat_patches[0]
    return bool_to_yesno(cat_patch.exists(""desk""))",1
16465081,The man is holding what?,bag,./data/gqa/../images/2380050.jpg,bat,"def execute_command_16465081(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""The man is holding what?"")
    man_patch = man_patches[0]
    object_patches = man_patch.find(""held object"")
    # Question assumes one object patch
    if len(object_patches) == 0:
        return image_patch.simple_query(""The man is holding what?"")
    return object_patches[0].simple_query(""What is the man holding?"")",0
17387032,What is on the post?,train,./data/gqa/../images/2357841.jpg,street sign,"def execute_command_17387032(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the post?"")",0
1892436,What is in front of the kids that are looking at the cake?,table,./data/gqa/../images/2409346.jpg,table,"def execute_command_1892436(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the kids that are looking at the cake?"")",1
18906705,How big is the crowd?,no,./data/gqa/../images/2364283.jpg,small,"def execute_command_18906705(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How big is the crowd?"")",0
6157200,Does the sign on the pole have white color?,no,./data/gqa/../images/2393048.jpg,no,"def execute_command_6157200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign on pole"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return image_patch.simple_query(""Does the sign on the pole have white color?"")
    return bool_to_yesno(sign_patches[0].verify_property(""sign on pole"", ""white""))",1
16760226,What's the laptop in front of?,television,./data/gqa/../images/2338131.jpg,screen,"def execute_command_16760226(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What's the laptop in front of?"")",0
111054070,How large is the bed?,"narrow, long",./data/gqa/../images/2386495.jpg,large,"def execute_command_111054070(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""How large is the bed?"")
    bed_patch = bed_patches[0]
    width = bed_patch.right - bed_patch.left
    height = bed_patch.upper - bed_patch.lower
    if width > height:
        return ""narrow, long"" if width < 300 else ""wide, long""
    else:
        return ""short, small"" if height < 200 else ""short, tall""",0
14143886,Where is the person with the luggage standing on?,on the sidewalk,./data/gqa/../images/2324284.jpg,ground,"def execute_command_14143886(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person with luggage"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person with luggage is found, query the image directly
        return image_patch.simple_query(""Where is the person with the luggage standing on?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""Where are you standing?"") # crop would include the luggage so keep it in the query",0
19872633,Are there either any fire extinguishers or pepper shakers?,no,./data/gqa/../images/2372702.jpg,no,"def execute_command_19872633(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_fire_extinguisher = image_patch.exists(""fire extinguisher"")
    is_pepper_shaker = image_patch.exists(""pepper shaker"")
    return bool_to_yesno(is_fire_extinguisher or is_pepper_shaker)",1
12755010,Is the bottle to the right of a napkin?,no,./data/gqa/../images/2416649.jpg,no,"def execute_command_12755010(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Is the bottle to the right of a napkin?"")
    for bottle_patch in bottle_patches:
        napkin_patches = image_patch.find(""napkin"")
        for napkin_patch in napkin_patches:
            if napkin_patch.horizontal_center < image_patch.horizontal_center and bottle_patch.horizontal_center > image_patch.horizontal_center:
                return ""yes""
        for pillow_patch in image_patch.find(""pillow""):
            if pillow_patch.horizontal_center < image_patch.horizontal_center and bottle_patch.horizontal_center > image_patch.horizontal_center:
                return ""yes""
        for blanket_patch in image_patch.find(""blanket""):
            if blanket_patch.horizontal_center < image_patch.horizontal_center and bottle_patch.horizontal_center > image_patch.horizontal_center:
                return ""yes""
        return ""no""
    return ""no""",1
2747001,Are there any soaps or bombs?,no,./data/gqa/../images/2378524.jpg,no,"def execute_command_2747001(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_soap = image_patch.exists(""soap"")
    is_bomb = image_patch.exists(""bomb"")
    return bool_to_yesno(is_soap or is_bomb)",1
1553845,Do you see baby giraffes or elephants?,yes,./data/gqa/../images/2326292.jpg,yes,"def execute_command_1553845(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_baby_giraffe = image_patch.exists(""baby giraffe"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_baby_giraffe or is_elephant)",1
6898877,What is the sign on?,the motorcycle,./data/gqa/../images/2396386.jpg,post,"def execute_command_6898877(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sign on?"")",0
15862812,What is the sticker on?,suitcase,./data/gqa/../images/2331576.jpg,briefcase,"def execute_command_15862812(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    sticker_patches = image_patch.find(""sticker"")
    # Question assumes only one sticker patch
    if len(sticker_patches) == 0:
        # If no sticker is found, query the image directly
        return image_patch.simple_query(""What is the sticker on?"")
    return sticker_patches[0].simple_query(""What is the sticker on?"") # crop would include the sticker so keep it in the query",0
141031470,On which side of the image is the white towel?,left,./data/gqa/../images/2395695.jpg,right,"def execute_command_141031470(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    towel_patches = image_patch.find(""white towel"")
    # Question assumes only one white towel patch
    if len(towel_patches) == 0:
        # If no white towel is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the white towel?"")
    towel_patch = towel_patches[0]
    if towel_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
41026846,Who rides a motorcycle?,no one,./data/gqa/../images/2342324.jpg,man,"def execute_command_41026846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who rides a motorcycle?"")",0
16540391,What is around the bathtub the towel is on?,tile,./data/gqa/../images/2411094.jpg,wall,"def execute_command_16540391(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is around the bathtub the towel is on?"")",0
7469617,Is the man to the left or to the right of the person that is to the left of the people?,left,./data/gqa/../images/2407446.jpg,left,"def execute_command_7469617(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    people_patch = people_patches[0]
    left_of_people_patches = image_patch.find(""people"")
    if len(left_of_people_patches) == 0:
        left_of_people_patch = image_patch.simple_query(""Who is to the left of the people?"")
    else:
        left_of_people_patch = left_of_people_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the person that is to the left of the people?"")
    man_patch = man_patches[0]
    if man_patch.horizontal_center < left_of_people_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
64308,What's located on top of the soup?,sandwich,./data/gqa/../images/2339845.jpg,spice,"def execute_command_64308(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's located on top of the soup?"")",0
16660910,Are both the fence and the bench made of the same material?,yes,./data/gqa/../images/2336505.jpg,yes,"def execute_command_16660910(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Are both the fence and the bench made of the same material?"")
    fence_patch = fence_patches[0]
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        return bool_to_yesno(fence_patch.simple_query(""Is the fence made of the same material as the bench?""))
    bench_patch = bench_patches[0]
    return bool_to_yesno(fence_patch.simple_query(""Is the fence made of the same material as the bench?""))",1
3196255,Are there helmets that are not white?,yes,./data/gqa/../images/2409979.jpg,yes,"def execute_command_3196255(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes at least one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return bool_to_yesno(image_patch.exists(""helmet""))
    for helmet_patch in helmet_patches:
        if helmet_patch.simple_query(""Is the helmet white?"") != ""yes"":
            return ""yes""
    return ""no""",1
2992630,Is the bowl to the right or to the left of the man that is drinking?,right,./data/gqa/../images/2400911.jpg,right,"def execute_command_2992630(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man drinking"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man drinking is found, query the image directly
        return image_patch.simple_query(""Is the bowl to the right or to the left of the man that is drinking?"")
    man_patch = man_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return ""left""
    bowl_patch = bowl_patches[0]
    if bowl_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
513894,Is the person above the sand wearing glasses?,no,./data/gqa/../images/2391205.jpg,yes,"def execute_command_513894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    person_patch = person_patches[0]
    sand_patches = image_patch.find(""sand"")
    # Question assumes one sand patch
    if len(sand_patches) == 0:
        return image_patch.simple_query(""Is the person above the sand wearing glasses?"")
    if person_patch.vertical_center > image_patch.vertical_center / 2 and any(sand_patch.vertical_center < image_patch.vertical_center / 2 for sand_patch in sand_patches):
        return bool_to_yesno(person_patch.simple_query(""Is the person wearing glasses?"") == ""yes"")
    return ""no""",0
14167599,Is the color of the life preserver the same as that of the house?,False,./data/gqa/../images/2353515.jpg,yes,"def execute_command_14167599(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    life_preserver_patches = image_patch.find(""life preserver"")
    # Question assumes only one life preserver patch
    if len(life_preserver_patches) == 0:
        # If no life preserver is found, query the image directly
        return image_patch.simple_query(""Is the color of the life preserver the same as that of the house?"")
    life_preserver_patch = life_preserver_patches[0]
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        return ""no""
    house_patch = house_patches[0]
    return bool_to_yesno(life_preserver_patch.best_text_match([""red"", ""blue""])) == house_patch.best_text_match([""red"", ""blue""])",0
18264755,How is the weather?,sunny,./data/gqa/../images/2368037.jpg,overcast,"def execute_command_18264755(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How is the weather?"")",0
6711450,What is the animal that is looking into the toilet that is not closed?,cat,./data/gqa/../images/2413428.jpg,cat,"def execute_command_6711450(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the toilet closed?"") == ""no"":
            return animal_patch.simple_query(""What animal is looking into the toilet?"")
    # If no animal is looking into an open toilet, query the image directly
    return image_patch.simple_query(""What is the animal that is looking into the toilet that is not closed?"")",1
8641613,Do you see any helmets in the picture that are not red?,yes,./data/gqa/../images/2354584.jpg,no,"def execute_command_8641613(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes at least one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""Do you see any helmets in the picture that are not red?"")
    for helmet_patch in helmet_patches:
        if helmet_patch.simple_query(""Is the helmet red?"") != ""yes"":
            return ""yes""
    return ""no""",0
2409779,What does the happy person hold?,ball,./data/gqa/../images/2409472.jpg,umbrella,"def execute_command_2409779(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""What does the happy person hold?"")
    happy_patch = happy_patches[0]
    object_patches = happy_patch.find(""object"")
    # Question assumes one object patch
    if len(object_patches) == 0:
        return image_patch.simple_query(""What does the happy person hold?"")
    return object_patches[0].best_text_match([""phone"", ""bag"", ""flower"", ""puppy"", ""ball"", ""bottle"", ""book""]) # add more objects as needed",0
8461507,Are there either tissue boxes or lamps in the picture?,yes,./data/gqa/../images/2364508.jpg,no,"def execute_command_8461507(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_tissue_box = image_patch.exists(""tissue box"")
    is_lamp = image_patch.exists(""lamp"")
    return bool_to_yesno(is_tissue_box or is_lamp)",0
10770916,Which kind of animal is it?,zebra,./data/gqa/../images/2349513.jpg,zebra,"def execute_command_10770916(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is it?"")",1
19102906,What type of drink is to the left of the plate?,coffee,./data/gqa/../images/2396664.jpg,juice,"def execute_command_19102906(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of drink is to the left of the plate?"")",0
18315440,Is the sky cloudy and blue?,yes,./data/gqa/../images/1016.jpg,yes,"def execute_command_18315440(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""cloudy and blue""))",1
453061,Is the fork on the right of the image?,yes,./data/gqa/../images/2407184.jpg,yes,"def execute_command_453061(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the fork on the right of the image?"")
    fork_patch = fork_patches[0]
    image_width = image_patch.width
    if fork_patch.horizontal_center >= image_width / 2:
        return ""yes""
    else:
        return ""no""",1
71002567,"What is the broccoli on, a table or a nightstand?",nightstand,./data/gqa/../images/2386067.jpg,table,"def execute_command_71002567(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    broccoli_patches = image_patch.find(""broccoli"")
    # Question assumes only one broccoli patch
    if len(broccoli_patches) == 0:
        # If no broccoli is found, query the image directly
        return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"")
    for broccoli_patch in broccoli_patches:
        table_patches = image_patch.find(""table"")
        nightstand_patches = image_patch.find(""nightstand"")
        if len(table_patches) > 0 and len(nightstand_patches) == 0:
            return ""table""
        elif len(table_patches) == 0 and len(nightstand_patches) > 0:
            return ""nightstand""
        elif len(table_patches) > 0 and len(nightstand_patches) > 0:
            if broccoli_patch.horizontal_center < image_patch.horizontal_center:
                return ""table""
            else:
                return ""nightstand""
        else:
            return image_patch.simple_query(""What is the broccoli on, a table or a nightstand?"") # if no table or nightstand is found, query the image directly",0
17465089,Is the field green and small?,yes,./data/gqa/../images/2320864.jpg,no,"def execute_command_17465089(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    field_patches = image_patch.find(""field"")
    # Question assumes only one field patch
    if len(field_patches) == 0:
        # If no field is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the field green and small?""))
    field_patch = field_patches[0]
    return bool_to_yesno(field_patch.verify_property(""field"", ""green"") and field_patch.simple_query(""Is the field small?""))",0
16150157,What is on the wall?,flowers,./data/gqa/../images/2416156.jpg,flowers,"def execute_command_16150157(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")",1
17882658,Is the van to the left or to the right of the SUV on the right side?,left,./data/gqa/../images/2364043.jpg,left,"def execute_command_17882658(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    van_patches = image_patch.find(""van"")
    # Question assumes only one van patch
    if len(van_patches) == 0:
        # If no van is found, query the image directly
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    van_patch = van_patches[0]
    suvs_patches = image_patch.find(""SUV"")
    # Question assumes one SUV patch on the right
    if len(suvs_patches) == 0:
        return image_patch.simple_query(""Is the van to the left or to the right of the SUV on the right side?"")
    right_suv_patch = max(suvs_patches, key=lambda patch: patch.horizontal_center)
    if van_patch.horizontal_center < right_suv_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
15101358,Is the girl to the left of the boy?,no,./data/gqa/../images/2316757.jpg,no,"def execute_command_15101358(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one girl and one boy patch
    if len(girl_patches) == 0 or len(boy_patches) == 0:
        # If no girl or boy is found, query the image directly
        return image_patch.simple_query(""Is the girl to the left of the boy?"")
    girl_patch = girl_patches[0]
    boy_patch = boy_patches[0]
    return bool_to_yesno(girl_patch.horizontal_center < boy_patch.horizontal_center)",1
12785181,What animals are in the grass?,cows,./data/gqa/../images/2363105.jpg,cows,"def execute_command_12785181(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in the grass?"")",1
348093,Are there both an apple and a bag in the picture?,no,./data/gqa/../images/2376548.jpg,no,"def execute_command_348093(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_apple = image_patch.exists(""apple"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_apple and is_bag)",1
314181,Which sign is shown?,stop sign,./data/gqa/../images/2357167.jpg,stop sign,"def execute_command_314181(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which sign is shown?"")",1
16275314,"On which side is the woman, the right or the left?",right,./data/gqa/../images/2380483.jpg,right,"def execute_command_16275314(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the right or the left?"")
    woman_patch = woman_patches[0]
    image_center = image_patch.horizontal_center
    if woman_patch.horizontal_center < image_center:
        return ""left""
    else:
        return ""right""",1
19535592,Who runs on the sand?,people,./data/gqa/../images/2336202.jpg,boy,"def execute_command_19535592(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who runs on the sand?"")",0
156886,Is there a giraffe near the bush?,no,./data/gqa/../images/2318497.jpg,yes,"def execute_command_156886(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Is there a giraffe near the bush?"")
    for giraffe_patch in giraffe_patches:
        bush_patches = image_patch.find(""bush"")
        # Question assumes at least one bush patch
        if len(bush_patches) == 0:
            return ""no""
        for bush_patch in bush_patches:
            if abs(giraffe_patch.horizontal_center - bush_patch.horizontal_center) < 100: # assume near if within 100 pixels
                return ""yes""
    return ""no""",0
1756642,Which place is it?,beach,./data/gqa/../images/2366730.jpg,ocean,"def execute_command_1756642(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
11177243,Who wears the shirt?,boy,./data/gqa/../images/2329182.jpg,boy,"def execute_command_11177243(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who wears the shirt?"")
    for shirt_patch in shirt_patches:
        # assumes one person per shirt
        person_patches = shirt_patch.find(""person"")
        if len(person_patches) == 0:
            return image_patch.simple_query(""Who wears the shirt?"")
        return person_patches[0].simple_query(""Who wears the shirt?"")",1
1972390,What type of animal is standing in the field?,sheep,./data/gqa/../images/2387777.jpg,lamb,"def execute_command_1972390(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal standing in a field"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What type of animal is standing in the field?"")
    return animal_patches[0].simple_query(""What type of animal is standing in the field?"")",0
14579439,Is the stuffed animal on the right?,no,./data/gqa/../images/2333167.jpg,no,"def execute_command_14579439(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    stuffed_animal_patches = image_patch.find(""stuffed animal"")
    # Question assumes only one stuffed animal patch
    if len(stuffed_animal_patches) == 0:
        # If no stuffed animal is found, query the image directly
        return image_patch.simple_query(""Is the stuffed animal on the right?"")
    if stuffed_animal_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no""",1
6645395,Is the gray building behind the passengers that are boarding the airplane?,yes,./data/gqa/../images/2372224.jpg,yes,"def execute_command_6645395(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Is the gray building behind the passengers that are boarding the airplane?"")",1
19610200,Is the fence metallic?,yes,./data/gqa/../images/2346093.jpg,yes,"def execute_command_19610200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""fence"", ""metallic""))",1
5299471,What does the girl that to the left of the trashcan carry?,umbrella,./data/gqa/../images/2412670.jpg,shopping bag,"def execute_command_5299471(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What does the girl that carries something to the left of the trashcan carry?"")",0
7548203,Which kind of vegetable is on the pizza?,tomatoes,./data/gqa/../images/2389312.jpg,olive,"def execute_command_7548203(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of vegetable is on the pizza?"")",0
91027737,On which side is the pan?,right,./data/gqa/../images/2384376.jpg,right,"def execute_command_91027737(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""On which side is the pan?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
19133443,Are the black cars in the top part of the photo?,no,./data/gqa/../images/2374328.jpg,no,"def execute_command_19133443(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car with black body"")
    # Query for ""car with black body"" to ensure we're only considering black cars
    if len(car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""Are the black cars in the top part of the photo?"")
    for car_patch in car_patches:
        if car_patch.vertical_center > image_patch.vertical_center:
            return ""yes""
    return ""no""",1
6144031,Who is in the living room?,three girls,./data/gqa/../images/2390488.jpg,girl,"def execute_command_6144031(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is in the living room?"")",0
14300987,What is the sink made of?,stainless steel,./data/gqa/../images/2417910.jpg,porcelain,"def execute_command_14300987(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sink made of?"")",0
16464341,Is there a black cat or bird?,no,./data/gqa/../images/2386341.jpg,no,"def execute_command_16464341(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_black_cat = image_patch.exists(""black cat"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_black_cat or is_bird)",1
1241741,Do you see a bicycle or a biker in this picture?,yes,./data/gqa/../images/2322635.jpg,yes,"def execute_command_1241741(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_bicycle = image_patch.exists(""bicycle"")
    is_biker = image_patch.exists(""biker"")
    if is_bicycle or is_biker:
        return ""yes"" if (is_bicycle and not is_biker) or (is_biker and not is_bicycle) else ""both""
    else:
        return ""no""",1
844747,Are there both a pillow and a kitten in the image?,no,./data/gqa/../images/2407209.jpg,no,"def execute_command_844747(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_pillow = image_patch.exists(""pillow"")
    is_kitten = image_patch.exists(""kitten"")
    return bool_to_yesno(is_pillow and is_kitten)",1
1104500,What kind of food is in the box?,fish,./data/gqa/../images/2413283.jpg,onion ring,"def execute_command_1104500(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box with food"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box with food is found, query the image directly
        return image_patch.simple_query(""What kind of food is in the box?"")
    box_patch = box_patches[0]
    return box_patch.simple_query(""What kind of food is in the box?"") # crop would include the food so keep it in the query",0
4204973,What is the food that is to the left of the kid called?,donuts,./data/gqa/../images/2327387.jpg,donuts,"def execute_command_4204973(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    kid_patches = image_patch.find(""kid"")
    # Question assumes one kid patch
    if len(kid_patches) == 0:
        # If no kid is found, query the image directly
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    kid_patch = kid_patches[0]
    food_patches = image_patch.find(""food"")
    # Question assumes one food patch
    if len(food_patches) == 0:
        return image_patch.simple_query(""What is the food that is to the left of the kid called?"")
    for food_patch in food_patches:
        if food_patch.horizontal_center < kid_patch.horizontal_center:
            return food_patch.simple_query(""What food is to the left of the kid?"")
    # If no food is to the left of the kid, query the image directly
    return image_patch.simple_query(""What is the food that is to the left of the kid called?"")",1
11820726,"What device is the desk in front of, a television or a printer?",printer,./data/gqa/../images/2401576.jpg,printer,"def execute_command_11820726(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")
    desk_patch = desk_patches[0]
    tv_patches = desk_patch.find(""television"")
    printer_patches = desk_patch.find(""printer"")
    if len(tv_patches) > 0 and len(printer_patches) > 0:
        return tv_patches[0].best_text_match([""television"", ""printer""])
    elif len(tv_patches) > 0:
        return ""television""
    elif len(printer_patches) > 0:
        return ""printer""
    else:
        return image_patch.simple_query(""What device is the desk in front of, a television or a printer?"")",1
18114588,Do you see a helmet there?,yes,./data/gqa/../images/2355905.jpg,yes,"def execute_command_18114588(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""helmet""))",1
11950874,What animal is standing on the ground?,polar bear,./data/gqa/../images/2348673.jpg,bear,"def execute_command_11950874(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is standing on the ground?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal standing on the ground?"") == ""yes"":
            return animal_patch.simple_query(""What animal is standing on the ground?"")
    # If no animal is standing on the ground, pick the first animal
    return animal_patches[0].simple_query(""What animal is standing on the ground?"")",0
10216953,Is the small car to the left of the fork on the right?,yes,./data/gqa/../images/2412469.jpg,yes,"def execute_command_10216953(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    small_car_patches = image_patch.find(""small car"")
    # Question assumes only one small car patch
    if len(small_car_patches) == 0:
        # If no small car is found, query the image directly
        return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")
    small_car_patch = small_car_patches[0]
    fork_patches = image_patch.find(""fork"")
    # Question assumes one fork patch
    if len(fork_patches) == 0:
        return image_patch.simple_query(""Is the small car to the left of the fork on the right?"")
    right_fork_patch = max(fork_patches, key=lambda x:x.horizontal_center)
    for car_patch in small_car_patches:
        if car_patch.horizontal_center < right_fork_patch.horizontal_center:
            return ""yes""
    return ""no""",1
16184942,Does that grass look brown and short?,yes,./data/gqa/../images/2356100.jpg,no,"def execute_command_16184942(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes only one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Does that grass look brown and short?"")
    grass_patch = grass_patches[0]
    return bool_to_yesno(grass_patch.verify_property(""grass"", ""brown and short""))",0
6312238,Is the hydrant to the left of the car?,no,./data/gqa/../images/2324132.jpg,no,"def execute_command_6312238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    hydrant_patches = image_patch.find(""hydrant"")
    # Question assumes only one hydrant patch
    if len(hydrant_patches) == 0:
        # If no hydrant is found, query the image directly
        return image_patch.simple_query(""Is the hydrant to the left of the car?"")
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        return ""no""
    for hydrant_patch in hydrant_patches:
        for car_patch in car_patches:
            if car_patch.horizontal_center > hydrant_patch.horizontal_center:
                return ""yes""
    return ""no""",1
16646227,On which side of the picture is the gray car?,right,./data/gqa/../images/2361354.jpg,left,"def execute_command_16646227(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the gray car?"")
    gray_car_patch = gray_car_patches[0]
    if gray_car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
10484636,Is the ball to the right or to the left of the person that is wearing sneakers?,left,./data/gqa/../images/2417660.jpg,left,"def execute_command_10484636(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person wearing sneakers"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person wearing sneakers is found, query the image directly
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    person_patch = person_patches[0]
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        return image_patch.simple_query(""Is the ball to the right or to the left of the person that is wearing sneakers?"")
    ball_patch = ball_patches[0]
    if ball_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
3443704,What is the woman wearing?,jeans,./data/gqa/../images/2416524.jpg,jacket,"def execute_command_3443704(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the woman wearing?"")
    return woman_patches[0].simple_query(""What are you wearing?"") # crop would include the clothing so keep it in the query",0
19313572,What is the color of the tent to the left of the vehicles?,white,./data/gqa/../images/2381995.jpg,white,"def execute_command_19313572(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicles"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    vehicle_patch = vehicle_patches[0]
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")
    for tent_patch in tent_patches:
        if tent_patch.horizontal_center < vehicle_patch.horizontal_center:
            return tent_patch.simple_query(""What color is the tent?"")
    # If no tent is to the left of the vehicle, query the image directly
    return image_patch.simple_query(""What is the color of the tent to the left of the vehicles?"")",1
10885675,What is the toilet seat made of?,wood,./data/gqa/../images/2321578.jpg,plastic,"def execute_command_10885675(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the toilet seat made of?"")",0
6926432,What animal is resting on the blanket?,dog,./data/gqa/../images/2341891.jpg,dog,"def execute_command_6926432(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    animal_patches = image_patch.find(""animal with blanket"")
    # If no animal with blanket is found, look for any animal
    if len(animal_patches) == 0:
        animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is resting on the blanket?"")
    return animal_patches[0].simple_query(""What animal is resting on the blanket?"")",1
14561612,What color do you think the bikini that the woman is wearing is?,purple,./data/gqa/../images/2358167.jpg,green,"def execute_command_14561612(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman wearing a bikini"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    bikini_patches = woman_patches[0].find(""bikini"")
    # Question assumes one bikini patch
    if len(bikini_patches) == 0:
        return image_patch.simple_query(""What color do you think the bikini that the woman is wearing is?"")
    return bikini_patches[0].best_text_match([""red"", ""blue"", ""black"", ""green"", ""yellow"", ""orange"", ""purple"", ""white"", ""brown"", ""pink""])",0
6587755,Are both the room and the bowl the same color?,no,./data/gqa/../images/28.jpg,yes,"def execute_command_6587755(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    room_patches = image_patch.find(""room"")
    # Question assumes only one room patch
    if len(room_patches) == 0:
        # If no room is found, query the image directly
        return bool_to_yesno(image_patch.exists(""bowl""))
    room_patch = room_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        return bool_to_yesno(image_patch.exists(""room""))
    bowl_patch = bowl_patches[0]
    return bool_to_yesno(room_patch.best_text_match([""blue"", ""red"", ""green"", ""brown"", ""white"", ""gray""]) == bowl_patch.best_text_match([""blue"", ""red"", ""green"", ""brown"", ""white"", ""gray""]))",0
4479543,Is the barn white or brown?,brown,./data/gqa/../images/2399909.jpg,brown,"def execute_command_4479543(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    barn_patches = image_patch.find(""barn"")
    # Question assumes only one barn patch
    if len(barn_patches) == 0:
        # If no barn is found, query the image directly
        return image_patch.simple_query(""Is the barn white or brown?"")
    return barn_patches[0].best_text_match([""brown"", ""white""])",1
972522,Does the box look white or brown?,white,./data/gqa/../images/2412806.jpg,white,"def execute_command_972522(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look white or brown?"")
    return box_patches[0].best_text_match([""white"", ""brown""])",1
3948528,What is the bowl made of?,plastic,./data/gqa/../images/2358903.jpg,plastic,"def execute_command_3948528(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What is the bowl made of?"")
    return bowl_patches[0].simple_query(""What is the bowl made of?"")",1
15724828,Is the bench in front of the rock gray or red?,gray,./data/gqa/../images/2390800.jpg,gray,"def execute_command_15724828(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""Is the bench in front of the rock gray or red?"")
    bench_patch = bench_patches[0]
    return bench_patch.best_text_match([""gray"", ""red""])",1
866459,On which side is the couch?,left,./data/gqa/../images/2360132.jpg,left,"def execute_command_866459(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""On which side is the couch?"")
    couch_patch = couch_patches[0]
    image_center = image_patch.horizontal_center
    if couch_patch.horizontal_center < image_center:
        return ""left""
    else:
        return ""right""",1
8614812,Is the person that is playing wearing shorts?,yes,./data/gqa/../images/2411380.jpg,yes,"def execute_command_8614812(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person playing"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person playing is found, query the image directly
        return image_patch.simple_query(""Is the person that is playing wearing shorts?"")
    return bool_to_yesno(person_patches[0].verify_property(""person playing"", ""wearing shorts""))",1
167438,What is wearing the ground?,motorcycles,./data/gqa/../images/2351365.jpg,helmet,"def execute_command_167438(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is wearing the ground?"")",0
9418088,Which kind of furniture is wooden?,table,./data/gqa/../images/2417483.jpg,cabinets,"def execute_command_9418088(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is wooden?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.best_text_match([""chair"", ""table"", ""bed"", ""shelf"", ""sofa""]) # common types of furniture",0
1042377,Who is standing beside the person that is wearing a dress?,man,./data/gqa/../images/2861.jpg,man,"def execute_command_1042377(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing a dress?"") == ""yes"":
            for other_patch in person_patches:
                if other_patch.horizontal_center != person_patch.horizontal_center and other_patch != person_patch:
                    return other_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    # If no person is wearing a dress, pick the first person
    for person_patch in person_patches:
        for other_patch in person_patches:
            if other_patch.horizontal_center != person_patch.horizontal_center and other_patch != person_patch:
                return other_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")
    # If no person is found, query the image directly
    return image_patch.simple_query(""Who is standing beside the person that is wearing a dress?"")",1
16889676,Is it an indoors or outdoors scene?,indoors,./data/gqa/../images/1159654.jpg,indoors,"def execute_command_16889676(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is it an indoors or outdoors scene?"")",1
10324400,How fat are the long skis?,no,./data/gqa/../images/2408676.jpg,skinny,"def execute_command_10324400(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    ski_patches = image_patch.find(""long ski"")
    # Question assumes only one ski patch
    if len(ski_patches) == 0:
        # If no long ski is found, query the image directly
        return image_patch.simple_query(""How fat are the long skis?"")
    ski_patch = ski_patches[0]
    return ski_patch.simple_query(""How fat are the skis?"") # crop would include the skis so keep it in the query",0
2211743,Is the sky clear or overcast?,clear,./data/gqa/../images/2391023.jpg,overcast,"def execute_command_2211743(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Is the sky clear or overcast?"")",0
4224772,Are there bottles to the left of the pencils in the bottom part of the image?,yes,./data/gqa/../images/2403935.jpg,yes,"def execute_command_4224772(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bottom_patch = ImagePatch(image_patch.cropped_image, 0, 0, image_patch.width, image_patch.height // 2)
    bottle_patches = bottom_patch.find(""bottle"")
    pencil_patches = bottom_patch.find(""pencil"")
    # Question assumes at least one pencil patch
    if len(pencil_patches) == 0:
        return ""no""
    for bottle_patch in bottle_patches:
        if bottle_patch.horizontal_center < pencil_patches[0].horizontal_center:
            return ""yes""
    return ""no""",1
15478302,Is there any dark door or window in the image?,yes,./data/gqa/../images/2390633.jpg,no,"def execute_command_15478302(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    window_patches = image_patch.find(""window"")
    for patch in door_patches + window_patches:
        if patch.simple_query(""Is it dark?"") == ""yes"":
            return ""yes""
    return ""no""",0
18414234,Do you see either a knife or a chair in the picture?,yes,./data/gqa/../images/2354394.jpg,yes,"def execute_command_18414234(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_knife = image_patch.exists(""knife"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_knife or is_chair)",1
19779815,Is the book red or yellow?,yellow,./data/gqa/../images/2406639.jpg,yellow,"def execute_command_19779815(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book red or yellow?"")
    book_patch = book_patches[0]
    return book_patch.best_text_match([""red"", ""yellow""])",1
7257283,Are there men to the left of the picture?,no,./data/gqa/../images/2372539.jpg,no,"def execute_command_7257283(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # assumes the image is the whole picture
    return bool_to_yesno(image_patch.exists(""man"") and image_patch.horizontal_center != 0)",1
6621625,On which side of the picture is the bench?,right,./data/gqa/../images/2352581.jpg,right,"def execute_command_6621625(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""bench"")
    # Question assumes only one bench patch
    if len(bench_patches) == 0:
        # If no bench is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bench?"")
    bench_patch = bench_patches[0]
    if bench_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
19311589,Are there both fences and horses in this picture?,yes,./data/gqa/../images/2336493.jpg,yes,"def execute_command_19311589(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_horse = image_patch.exists(""horse"")
    return bool_to_yesno(is_fence and is_horse)",1
171018070,What device is to the right of the container that the person is to the left of?,computer,./data/gqa/../images/2344162.jpg,screen,"def execute_command_171018070(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains multiple relations, so ask directly
    return image_patch.simple_query(""What device is to the right of the container that the person is to the left of?"")",0
171031333,Do you see blankets in the picture that are not black?,yes,./data/gqa/../images/2390560.jpg,no,"def execute_command_171031333(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    has_non_black_blanket = False
    for blanket_patch in image_patch.find(""blanket""):
        if blanket_patch.simple_query(""Is the blanket black?"") != ""yes"":
            has_non_black_blanket = True
            break
    return bool_to_yesno(has_non_black_blanket)",0
16695341,What is the fence made of?,wood,./data/gqa/../images/2394728.jpg,wood,"def execute_command_16695341(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")",1
8314287,Do you see any bottle or child there?,no,./data/gqa/../images/2326150.jpg,no,"def execute_command_8314287(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_child = image_patch.exists(""child"")
    return bool_to_yesno(is_bottle or is_child)",1
5111363,Are there chairs or tables that are not blue?,no,./data/gqa/../images/2363283.jpg,no,"def execute_command_5111363(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    chairs_patches = image_patch.find(""chair"")
    tables_patches = image_patch.find(""table"")
    chairs_or_tables_patches = chairs_patches + tables_patches
    for patch in chairs_or_tables_patches:
        if not patch.verify_property(""chair"" if patch in chairs_patches else ""table"", ""blue""):
            return bool_to_yesno(True)
    return ""no""",1
9230971,Which place is it?,a city,./data/gqa/../images/2367570.jpg,harbor,"def execute_command_9230971(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
132422,Does the hair have short length and white color?,yes,./data/gqa/../images/2324466.jpg,yes,"def execute_command_132422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    hair_patches = image_patch.find(""hair"")
    # Question assumes only one hair patch
    if len(hair_patches) == 0:
        # If no hair is found, query the image directly
        return bool_to_yesno(image_patch.verify_property(""hair"", ""short length and white color""))
    hair_patch = hair_patches[0]
    return bool_to_yesno(hair_patch.verify_property(""hair"", ""short length and white color""))",1
4822200,Do you see any lettuce on the food with the meat?,no,./data/gqa/../images/2344108.jpg,no,"def execute_command_4822200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food with meat"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food with meat is found, query the image directly
        return image_patch.simple_query(""Do you see any lettuce on the food with the meat?"")
    food_patch = food_patches[0]
    return bool_to_yesno(food_patch.exists(""lettuce""))",1
3726666,What device is to the left of the curtain that is to the left of the glasses?,wii,./data/gqa/../images/2348427.jpg,remote control,"def execute_command_3726666(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains multiple relations, so ask directly
    return image_patch.simple_query(""What device is to the left of the curtain that is to the left of the glasses?"")",0
9954849,What kind of furniture is it?,desk,./data/gqa/../images/2375014.jpg,desk,"def execute_command_9954849(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of furniture is it?"")",1
19409495,Are there any red trains or buses?,yes,./data/gqa/../images/2361783.jpg,yes,"def execute_command_19409495(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_red_train = image_patch.exists(""red train"")
    is_red_bus = image_patch.exists(""red bus"")
    return bool_to_yesno(is_red_train or is_red_bus)",1
8965422,What kind of vegetable is to the left of the crate that is of the lettuce?,orange,./data/gqa/../images/2416035.jpg,lemons,"def execute_command_8965422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), and a property, so ask directly
    return image_patch.simple_query(""What kind of vegetable is to the left of the crate that is of the lettuce?"")",0
623393,"What type of clothing is tan, the hat or the vest?",hat,./data/gqa/../images/713860.jpg,vest,"def execute_command_623393(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tan_patches = image_patch.find(""tan"")
    # Question assumes only one tan patch
    if len(tan_patches) == 0:
        # If no tan is found, query the image directly
        return image_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    tan_patch = tan_patches[0]
    hat_patches = image_patch.find(""hat"")
    # Question assumes only one hat patch
    if len(hat_patches) == 0:
        hat_patch = None
    else:
        hat_patch = hat_patches[0]
    vest_patches = image_patch.find(""vest"")
    # Question assumes only one vest patch
    if len(vest_patches) == 0:
        vest_patch = None
    else:
        vest_patch = vest_patches[0]
    if hat_patch is None and vest_patch is None:
        return tan_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    if hat_patch is None:
        return tan_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    if vest_patch is None:
        return tan_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
    if tan_patch.horizontal_center < image_patch.horizontal_center:
        if hat_patch.horizontal_center < image_patch.horizontal_center:
            return tan_patch.simple_query(""What type of clothing is tan, the hat or the vest?"")
        else:
            return ""vest""
    else:
        return ""hat""",0
6436448,Is the color of the skirt the same as the scarf?,no,./data/gqa/../images/2373592.jpg,no,"def execute_command_6436448(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Is the color of the scarf the same as the skirt?"")
    scarf_patches = image_patch.find(""scarf"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        return image_patch.simple_query(""Is the color of the skirt the same as the scarf?"")
    return bool_to_yesno(skirt_patches[0].best_text_match([""blue"", ""red"", ""green"", ""yellow"", ""purple"", ""brown"", ""black"", ""white""]) == scarf_patches[0].best_text_match([""blue"", ""red"", ""green"", ""yellow"", ""purple"", ""brown"", ""black"", ""white""]))",1
3303313,Is the blanket under a cat?,Error Codigo: name 'image' is not defined,./data/gqa/../images/2344857.jpg,no,"def execute_command_3303313(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""Is the blanket under a cat?"")
    for blanket_patch in blanket_patches:
        cat_patches = image_patch.find(""cat"")
        # Question assumes at least one cat patch
        if len(cat_patches) == 0:
            return ""no""
        for cat_patch in cat_patches:
            if cat_patch.horizontal_center > image_patch.horizontal / 2:
                if blanket_patch.vertical_center > image_patch.height / 2:
                    return ""no""
                return ""yes""
            else:
                if blanket_patch.vertical_center < image_patch.height / 2:
                    return ""yes""
                return ""no""
    return ""no""

image_patch = ImagePatch(image)
image_patch.horizontal = image_patch.right - image_patch.left
image_patch.horizontal /= 2
image_patch.height = image_patch.upper - image_patch.lower
image_patch.height /= 2",0
443663,What color is the picture?,black,./data/gqa/../images/2343442.jpg,blue,"def execute_command_443663(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")",0
17267472,Is there any umbrella to the right of the man?,Error Ejecucion: max() arg is an empty sequence,./data/gqa/../images/930.jpg,no,"def execute_command_17267472(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is there any umbrella to the right of the man?"")
    man_patch = man_patches[0]
    return bool_to_yesno(len(image_patch.find(""umbrella"")) > 0 and max(umbrella_patch.horizontal_center for umbrella_patch in image_patch.find(""umbrella"") if umbrella_patch in image_patch.find(""all"")) > man_patch.horizontal_center)",0
1885406,What is the toy on the bed?,bear,./data/gqa/../images/2374740.jpg,stuffed bear,"def execute_command_1885406(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What toy is on the bed?"")",0
5557965,On which side is the bag?,right,./data/gqa/../images/2347380.jpg,right,"def execute_command_5557965(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
4325825,On which side is the banana?,left,./data/gqa/../images/2326465.jpg,left,"def execute_command_4325825(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side is the banana?"")
    banana_patch = banana_patches[0]
    if banana_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
3196355,What does the batter hold?,bat,./data/gqa/../images/2409979.jpg,bat,"def execute_command_3196355(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    batter_patches = image_patch.find(""batter"")
    # Question assumes only one batter patch
    if len(batter_patches) == 0:
        # If no batter is found, query the image directly
        return image_patch.simple_query(""What does the batter hold?"")
    return batter_patches[0].simple_query(""What does the batter hold?"") # crop would include what the batter holds so keep it in the query",1
14470748,Who wears a jacket?,woman,./data/gqa/../images/713118.jpg,guy,"def execute_command_14470748(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    patches = image_patch.find(""jacket"")
    if len(patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Who wears a jacket?"")
    for patch in patches:
        wearer_patches = patch.find(""person"")
        if len(wearer_patches) > 0:
            return wearer_patches[0].simple_query(""Who wears the jacket?"")
    return image_patch.simple_query(""Who wears a jacket?"") # if no person is found, query the image directly",0
16537736,Are there any houses behind the shrubs?,yes,./data/gqa/../images/2412552.jpg,yes,"def execute_command_16537736(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shrub_patches = image_patch.find(""shrub"")
    # Question assumes shrubs are found
    if len(shrub_patches) == 0:
        # If no shrubs are found, query the image directly
        return image_patch.simple_query(""Are there any houses behind the shrubs?"")
    max_shrub_right = max(shrub_patch.horizontal_center for shrub_patch in shrub_patches)
    for patch in image_patch.find(""house""):
        if patch.horizontal_center > max_shrub_right:
            return ""yes""
    return ""no""",1
1129541,What piece of furniture is made of wood?,chair,./data/gqa/../images/2361386.jpg,bookcase,"def execute_command_1129541(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wooden""):
            return furniture_patch.simple_query(""What piece of furniture is made of wood?"")
    # If no wooden furniture is found, pick the first furniture
    return furniture_patches[0].simple_query(""What piece of furniture is made of wood?"")",0
15270011,Is the racket to the right or to the left of the man that is wearing a hat?,left,./data/gqa/../images/2404683.jpg,right,"def execute_command_15270011(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man with a hat"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man with a hat is found, query the image directly
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    man_patch = man_patches[0]
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        return image_patch.simple_query(""Is the racket to the right or to the left of the man that is wearing a hat?"")
    racket_patch = racket_patches[0]
    if racket_patch.horizontal_center > man_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",0
12416703,Where is that cat?,on the car,./data/gqa/../images/2409055.jpg,car,"def execute_command_12416703(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the cat?"")",0
15603088,The animal to the right of the envelope is lying on what?,couch,./data/gqa/../images/2365166.jpg,chair,"def execute_command_15603088(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""The animal to the right of the envelope is lying on what?"")",0
5329077,Is the man on a bench?,no,./data/gqa/../images/2321094.jpg,yes,"def execute_command_5329077(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on a bench?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.exists(""bench""))",0
1945705,What kind of device is to the left of the device that looks silver and gray?,wii remote,./data/gqa/../images/2375580.jpg,monitor,"def execute_command_1945705(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # first ask for the description of the device
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    device_patch = device_patches[0]
    # then ask for the device to the left
    left_device_patches = image_patch.find(""device"")
    # Question assumes only one left device patch
    if len(left_device_patches) == 0:
        return image_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")
    left_device_patch = left_device_patches[0]
    return left_device_patch.simple_query(""What kind of device is to the left of the device that looks silver and gray?"")",0
17520003,What vehicle is to the right of the pine tree?,no,./data/gqa/../images/2391939.jpg,train,"def execute_command_17520003(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pine_patches = image_patch.find(""pine tree"")
    # Question assumes only one pine patch
    if len(pine_patches) == 0:
        # If no pine tree is found, query the image directly
        return image_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    pine_patch = pine_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes one vehicle patch
    if len(vehicle_patches) == 0:
        return ""no""
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > pine_patch.horizontal_center:
            return vehicle_patch.simple_query(""What vehicle is to the right of the pine tree?"")
    return ""no""",0
1259983,Who is wearing pants?,the man,./data/gqa/../images/2354042.jpg,guy,"def execute_command_1259983(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes at least one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing pants?"")
    for person_patch in person_patches:
        if person_patch.verify_property(""person"", ""wearing pants""):
            return person_patch.simple_query(""Who is wearing pants?"")
    # If no person is wearing pants, pick the first person
    return person_patches[0].simple_query(""Who is wearing pants?"")",0
6413378,Is there a black keyboard or camera?,no,./data/gqa/../images/2339847.jpg,yes,"def execute_command_6413378(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_black_keyboard = image_patch.exists(""black keyboard"")
    is_black_camera = image_patch.exists(""black camera"")
    return bool_to_yesno(is_black_keyboard or is_black_camera)",0
947305,Is the sunny water blue and high?,yes,./data/gqa/../images/2363705.jpg,yes,"def execute_command_947305(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_blue = image_patch.verify_property(""sunny water"", ""blue"")
    is_high = image_patch.simple_query(""Is the sunny water high?"")
    return bool_to_yesno(is_blue and is_high)",1
4367817,What type of animal in this scene is brown?,dog,./data/gqa/../images/2391559.jpg,dog,"def execute_command_4367817(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one brown animal patch
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal brown?"") == ""yes"":
            return animal_patch.simple_query(""What type of animal is brown?"")
    # If no brown animal is found, query the image directly
    return image_patch.simple_query(""What type of animal in this scene is brown?"")",1
15485572,What is the vegetable on the hot dog with the cheese?,mustard,./data/gqa/../images/2404539.jpg,onion,"def execute_command_15485572(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    hot_dog_patches = image_patch.find(""hot dog with cheese"")
    # Question assumes only one hot dog patch
    if len(hot_dog_patches) == 0:
        # If no hot dog with cheese is found, query the image directly
        return image_patch.simple_query(""What vegetable is on the hot dog with the cheese?"")
    hot_dog_patch = hot_dog_patches[0]
    vegetable_patches = hot_dog_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return image_patch.simple_query(""What vegetable is on the hot dog with the cheese?"")
    return vegetable_patches[0].simple_query(""What vegetable is on the hot dog with the cheese?"")",0
12661142,What is the appliance in the kitchen called?,oven,./data/gqa/../images/2340480.jpg,oven,"def execute_command_12661142(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What is the appliance in the kitchen called?"")
    return appliance_patches[0].simple_query(""What is the appliance in the kitchen called?"") # crop would include the appliance so keep it in the query",1
41012743,The arrow is on what?,pole,./data/gqa/../images/2345563.jpg,pole,"def execute_command_41012743(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The arrow is on what?"")",1
4777414,What color is the bicycle in the bottom of the photo?,white,./data/gqa/../images/2323146.jpg,white,"def execute_command_4777414(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bottom_patches = image_patch.find(""bicycle"")
    # Question assumes only one bicycle patch
    if len(bottom_patches) == 0:
        # If no bicycle is found, query the image directly
        return image_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    bottom_bicycle_patch = bottom_patches[0]
    if len(bottom_patches) > 1:
        # If multiple bicycles are at the bottom, ask directly
        return bottom_bicycle_patch.simple_query(""What color is the bicycle in the bottom of the photo?"")
    return bottom_bicycle_patch.simple_query(""What color is the bicycle?"") # crop would include the position so keep it in the query",1
1185988,What is the device on top of the table that is to the right of the trashcan?,computer,./data/gqa/../images/2391692.jpg,monitor,"def execute_command_1185988(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the device on top of the table that is to the right of the trashcan?"")",0
13582968,Was granite used to make that floor?,no,./data/gqa/../images/2355417.jpg,yes,"def execute_command_13582968(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""floor"", ""granite""))",0
6235273,Are there women in the photo?,yes,./data/gqa/../images/2376201.jpg,yes,"def execute_command_6235273(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""woman""))",1
5377974,What is the girl playing with?,frisbee,./data/gqa/../images/2394351.jpg,frisbee,"def execute_command_5377974(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl playing with?"")
    girl_patch = girl_patches[0]
    object_patches = image_patch.find(""toy"") # or other objects she could be playing with
    # Question assumes one object patch
    if len(object_patches) == 0:
        return image_patch.simple_query(""What is the girl playing with?"")
    object_patch = object_patches[0]
    return object_patch.simple_query(""What is the girl playing with?"") # crop would include the object so keep it in the query",1
51037065,On which side of the image is the fridge?,left,./data/gqa/../images/2391630.jpg,left,"def execute_command_51037065(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fridge_patches = image_patch.find(""fridge"")
    # Question assumes only one fridge patch
    if len(fridge_patches) == 0:
        # If no fridge is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fridge?"")
    fridge_patch = fridge_patches[0]
    if fridge_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
5299477,Which kind of bag does the girl carry?,"Error Codigo: expected ':' (Codex, line 30)",./data/gqa/../images/2412670.jpg,shopping bag,"def execute_command_5299477(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    girl_patch = girl_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes one bag patch
    if len(bag_patches) == 0:
        return image_patch.simple_query(""Which kind of bag does the girl carry?"")
    bag_patch = bag_patches[0]
    max_confidence = 0
    best_match = """"
    for option in [""backpack"", ""purse"", ""handbag"", ""suitcase""]:
        confidence = bag_patch.best_text_match([option, ""others""])
        if confidence == option:
            return option
        if confidence != ""others"" and confidence != """" and confidence != option:
            return option
        if confidence != ""others"" and confidence != """" and confidence != option and confidence != bag_patch.simple_query(""What is the bag's function?""):
            return option
        if confidence != ""others"" and confidence != """" and confidence != option and confidence != bag_patch.simple_query(""What is the bag's function?"") and confidence != bag_patch.simple_query(""What is the bag made of?""):
            return option
        if confidence != ""others"" and confidence != """" and confidence != option and confidence != bag_patch.simple_query(""What is the bag's function?"") and confidence != bag_patch.simple_query(""What is the bag made of?"") and confidence != bag_patch.simple_query(""Is the bag big?""):
            return option
        if confidence != ""others"" and confidence != """" and confidence != option and confidence != bag_patch.simple_query(""What is the bag's function?"") and confidence != bag_patch.simple_query(""What is the bag made of?"") and confidence != bag_patch.simple_query(""Is the bag big?"") and confidence != bag_patch.simple_query(""Is the bag open?""):
            return option
        if confidence != ""others"" and confidence != """" and confidence != option and confidence != bag_patch.simple_query(""What is the bag's function?"") and confidence != bag_patch.simple_query(""What is the bag made of?"") and confidence != bag_patch.simple_query(""Is the bag big?"") and confidence != bag_patch.simple_query(""Is the bag open?"")",0
15135617,Is the white dog on a bench?,yes,./data/gqa/../images/2410392.jpg,yes,"def execute_command_15135617(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog on a bench?"")
    white_dog_patch = white_dog_patches[0]
    return bool_to_yesno(white_dog_patch.exists(""bench""))",1
1111583,Is the male person to the right of a person?,yes,./data/gqa/../images/2381241.jpg,no,"def execute_command_1111583(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    male_patches = image_patch.find(""male"")
    # Question assumes only one male patch
    if len(male_patches) == 0:
        # If no male is found, query the image directly
        return image_patch.simple_query(""Is the male person to the right of a person?"")
    for male_patch in male_patches:
        right_of_person = False
        for patch in image_patch.find(""person""):
            if patch.horizontal_center > male_patch.horizontal_center:
                right_of_person = True
                break
        return bool_to_yesno(right_of_person)",0
12352269,Are there both windows and doors in this photograph?,no,./data/gqa/../images/2361646.jpg,yes,"def execute_command_12352269(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",0
15610844,What kind of place is shown?,residential,./data/gqa/../images/2942.jpg,sidewalk,"def execute_command_15610844(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of place is shown?"")",0
11869032,Is the banana below a bird?,yes,./data/gqa/../images/2368611.jpg,no,"def execute_command_11869032(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Is the banana below a bird?"")
    banana_patch = banana_patches[0]
    bird_patches = image_patch.find(""bird"")
    # Question assumes one bird patch
    if len(bird_patches) == 0:
        return ""no""
    bird_patch = bird_patches[0]
    return ""yes"" if banana_patch.vertical_center < bird_patch.vertical_center else ""no""",0
9878360,What color is the vehicle to the left of the fence?,orange,./data/gqa/../images/2322955.jpg,orange,"def execute_command_9878360(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color is the vehicle to the left of the fence?"")
    vehicle_patch = vehicle_patches[0]
    fence_patches = image_patch.find(""fence"")
    # Question assumes one fence patch
    if len(fence_patches) == 0:
        return vehicle_patch.simple_query(""What color is the vehicle?"")
    for fence_patch in fence_patches:
        for other_vehicle_patch in vehicle_patches:
            if other_vehicle_patch.horizontal_center < fence_patch.horizontal_center:
                return other_vehicle_patch.simple_query(""What color is the vehicle?"")
    # If no vehicle is to the left of the fence, query the image directly
    return vehicle_patch.simple_query(""What color is the vehicle to the left of the fence?"")",1
481765,Are there either any buses or trains in the image?,yes,./data/gqa/../images/2406968.jpg,yes,"def execute_command_481765(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_bus = image_patch.exists(""bus"")
    is_train = image_patch.exists(""train"")
    return bool_to_yesno(is_bus or is_train)",1
6665919,What is the fence made of?,wood,./data/gqa/../images/2336198.jpg,wood,"def execute_command_6665919(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")",1
9218340,Does the man to the left of the traffic cone wear a cap?,Error Ejecucion: 'ImagePatch' object has no attribute 'horizontal',./data/gqa/../images/2412648.jpg,no,"def execute_command_9218340(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes at least one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    left_man_patch = man_patches[0]
    traffic_cone_patches = image_patch.find(""traffic cone"")
    # Question assumes at least one traffic cone patch
    if len(traffic_cone_patches) == 0:
        return image_patch.simple_query(""Does the man to the left of the traffic cone wear a cap?"")
    for traffic_cone_patch in traffic_cone_patches:
        for man_patch in man_patches:
            if man_patch.horizontal_center < traffic_cone_patch.horizontal:
                return bool_to_yesno(man_patch.verify_property(""man"", ""wearing a cap""))
    return ""no"" # if no man to the left of the traffic cone, query the image directly",0
11981238,What is common to the blazer and the suit?,they are both made of cloth,./data/gqa/../images/3180.jpg,color,"def execute_command_11981238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    blazer_patches = image_patch.find(""blazer"")
    # Question assumes only one blazer patch
    if len(blazer_patches) == 0:
        # If no blazer is found, query the image directly
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    suit_patches = image_patch.find(""suit"")
    # Question assumes only one suit patch
    if len(suit_patches) == 0:
        return image_patch.simple_query(""What is common to the blazer and the suit?"")
    blazer_patch = blazer_patches[0]
    suit_patch = suit_patches[0]
    common_properties = set(blazer_patch.simple_query(""What properties does it have? "").split("", "")) # assumes one property per query
    common_properties.update(suit_patch.simple_query(""What properties does it have? "").split("", ""))
    return blazer_patch.simple_query(""What is common to the blazer and the suit?"") # crop would include the blazer so keep it in the query",0
16245,Is the shirt white or green?,white,./data/gqa/../images/2399408.jpg,white,"def execute_command_16245(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white or green?"")
    return shirt_patches[0].best_text_match([""white"", ""green""])",1
2595103,"In which part of the image are the cars, the bottom or the top?",top,./data/gqa/../images/2364312.jpg,top,"def execute_command_2595103(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one group of car patches
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""In which part of the image are the cars, the bottom or the top?"")
    vertical_center = car_patches[0].vertical_center
    image_center = image_patch.vertical_center
    if vertical_center < image_center:
        return ""bottom""
    else:
        return ""top""",1
2429130,"How does the sand look, dry or wet?",wet,./data/gqa/../images/2383620.jpg,wet,"def execute_command_2429130(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""How does the sand look, dry or wet?"")",1
4325920,Are there fruits to the right of the banana which is on the table?,yes,./data/gqa/../images/2326465.jpg,yes,"def execute_command_4325920(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana with table"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    banana_patch = banana_patches[0]
    if banana_patch.horizontal_center == image_patch.horizontal_center:
        return image_patch.simple_query(""Are there fruits to the right of the banana which is on the table?"")
    for fruit_patch in image_patch.find(""fruit""):
        if fruit_patch.horizontal_center > banana_patch.horizontal_center:
            return ""yes""
    return ""no""",1
6376614,What color is the car in the middle?,yellow,./data/gqa/../images/2352530.jpg,yellow,"def execute_command_6376614(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car in the middle?"")
    middle_patch = car_patches[0]
    if len(car_patches) == 1:
        return middle_patch.simple_query(""What color is the car?"")
    for car_patch in car_patches:
        if car_patch.horizontal_center == image_patch.horizontal:
            return car_patch.simple_query(""What color is the car?"")
    # If no car is in the middle, pick the first car
    return car_patches[0].simple_query(""What color is the car?"")",1
712063,What's the lamp made of?,wood,./data/gqa/../images/2374892.jpg,metal,"def execute_command_712063(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""What's the lamp made of?"")
    return lamp_patches[0].simple_query(""What is the lamp made of?"") # crop would include the lamp so keep it in the query",0
19358285,Which kind of furniture is to the right of the pillow?,bed,./data/gqa/../images/1159380.jpg,bed,"def execute_command_19358285(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes one furniture patch to the right of the pillow
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")
    # If no furniture is to the right of the pillow, query the image directly
    return image_patch.simple_query(""Which kind of furniture is to the right of the pillow?"")",1
9647343,What type of material is the patio made of?,concrete,./data/gqa/../images/2383402.jpg,wood,"def execute_command_9647343(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of material is the patio made of?"")",0
12545434,Who is wearing the suit?,a girl,./data/gqa/../images/2402811.jpg,child,"def execute_command_12545434(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the suit?"")",0
12894285,What is the color of the clouds in the sky?,white,./data/gqa/../images/2368430.jpg,white,"def execute_command_12894285(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the clouds in the sky?"")",1
9843309,Do the flowers look orange?,no,./data/gqa/../images/2396539.jpg,no,"def execute_command_9843309(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flowers"")
    # Question assumes only one flower patch
    if len(flower_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""Do the flowers look orange?"")
    return bool_to_yesno(flower_patches[0].verify_property(""flowers"", ""orange""))",1
618996,Is there a chair or a bed in this image?,no,./data/gqa/../images/4652.jpg,yes,"def execute_command_618996(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_chair or is_bed)",0
18959736,Are there trucks to the left of the umbrella?,no,./data/gqa/../images/2359792.jpg,no,"def execute_command_18959736(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return bool_to_yesno(image_patch.exists(""truck and left of umbrella""))
    for truck_patch in truck_patches:
        if truck_patch.horizontal_center < image_patch.find(""umbrella"")[0].horizontal_center:
            return ""yes""
    return ""no""",1
867869,What color are the pants the man is wearing?,white,./data/gqa/../images/2413471.jpg,black,"def execute_command_867869(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color are the pants the man is wearing?"")
    man_patch = man_patches[0]
    return man_patch.best_text_match([""blue"", ""black"", ""white"", ""brown"", ""gray""])",0
551601,Are there any pillows or chairs in the image?,yes,./data/gqa/../images/2409911.jpg,yes,"def execute_command_551601(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""pillow"") or image_patch.exists(""chair""))",1
10775785,Are there women to the left of the person with the bag?,yes,./data/gqa/../images/2390608.jpg,yes,"def execute_command_10775785(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Are there women to the left of the person with the bag?"")
    bag_center = bag_patches[0].horizontal_center
    for woman_patch in image_patch.find(""woman""):
        if woman_patch.horizontal_center < bag_center:
            return ""yes""
    return ""no""",1
5925408,What is the bike in front of?,a fire hydrant,./data/gqa/../images/2352009.jpg,tree,"def execute_command_5925408(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bike_patches = image_patch.find(""bike"")
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    if len(bike_patches) == 0:
        # If no bike is found, query the image directly
        return image_patch.simple_query(""What is the bike in front of?"")
    return bike_patches[0].simple_query(""What is the bike in front of?"")",0
11328059,What type of fast food is shown in this photo?,hamburger,./data/gqa/../images/2350669.jpg,fries,"def execute_command_11328059(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What type of fast food is shown in this photo?"")",0
15427544,Are there either beds or desks in the picture?,no,./data/gqa/../images/2363939.jpg,no,"def execute_command_15427544(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_bed or is_desk)",1
13778498,What type of vehicle is behind the green tree?,train,./data/gqa/../images/2400942.jpg,train,"def execute_command_13778498(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What type of vehicle is behind the green tree?"")",1
41019603,What is the child standing on?,skis,./data/gqa/../images/2417896.jpg,skis,"def execute_command_41019603(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""What is the child standing on?"")
    child_patch = child_patches[0]
    max_area = 0
    max_patch = None
    for patch in image_patch.find(""patch""):
        area = patch.width * patch.height
        if area > max_area:
            max_area = area
            max_patch = patch
    if max_patch:
        return max_patch.simple_query(""What is the child standing on?"")
    else:
        return image_patch.simple_query(""What is the child standing on?"")",1
11705574,What is the wooden item of furniture called?,cabinet,./data/gqa/../images/2344018.jpg,table,"def execute_command_11705574(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wooden item of furniture called?"")",0
16817277,Is the man to the left or to the right of the woman?,left,./data/gqa/../images/3898.jpg,right,"def execute_command_16817277(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    woman_patches = image_patch.find(""woman"")
    # Question assumes one man and one woman patch
    if len(man_patches) == 0 or len(woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is the man to the left or to the right of the woman?"")
    man_patch = man_patches[0]
    woman_patch = woman_patches[0]
    if man_patch.horizontal_center < woman_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
1316363,Who is wearing the shirt?,the pitcher,./data/gqa/../images/2396614.jpg,umpire,"def execute_command_1316363(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for patch in image_patch.find(""man"") + image_patch.find(""woman"") + image_patch.find(""boy"") + image_patch.find(""girl""):
        if patch.exists(""shirt""):
            return patch.simple_query(""Who is wearing the shirt?"")
    # If no one is wearing a shirt, query the image directly
    return image_patch.simple_query(""Who is wearing the shirt?"")",0
18546659,What is the fence made of?,wood,./data/gqa/../images/2322017.jpg,wood,"def execute_command_18546659(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")",1
10519192,What color is the kite that looks triangular?,white,./data/gqa/../images/2389362.jpg,black,"def execute_command_10519192(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite that looks triangular"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""What color is the kite that looks triangular?"")
    return kite_patches[0].best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""orange"", ""purple""])",0
1672200,Who is drinking?,a man,./data/gqa/../images/2357852.jpg,child,"def execute_command_1672200(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is drinking?"")",0
5703748,Is the building behind the tree white or brown?,brown,./data/gqa/../images/2390146.jpg,brown,"def execute_command_5703748(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    building_patches = image_patch.find(""building"")
    # Question assumes only one building patch
    if len(building_patches) == 0:
        # If no building is found, query the image directly
        return image_patch.simple_query(""Is the building behind the tree white or brown?"")
    building_patch = building_patches[0]
    tree_patches = image_patch.find(""tree"")
    # Question assumes one tree patch
    if len(tree_patches) == 0:
        return building_patch.best_text_match([""white"", ""brown""])
    for tree_patch in tree_patches:
        if tree_patch.horizontal_center > building_patch.horizontal_center:
            return building_patch.best_text_match([""white"", ""brown""])
    # If no tree is behind the building, query the image directly
    return building_patch.best_text_match([""white"", ""brown""])",1
5749240,Are the glove and the undershirt both black?,yes,./data/gqa/../images/2371802.jpg,yes,"def execute_command_5749240(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    glove_patches = image_patch.find(""glove"")
    # Question assumes only one glove patch
    if len(glove_patches) == 0:
        # If no glove is found, query the image directly
        return bool_to_yesno(image_patch.exists(""undershirt"") and image_patch.simple_query(""Is the undershirt black?""))
    for glove_patch in glove_patches:
        is_glove_black = glove_patch.simple_query(""Is the glove black?"")
        undershirt_patches = image_patch.find(""undershirt"")
        if len(undershirt_patches) == 0:
            return bool_to_yesno(is_glove_black)
        is_undershirt_black = undershirt_patches[0].simple_query(""Is the undershirt black?"")
        return bool_to_yesno(is_glove_black and is_undershirt_black)",1
18573157,Is the juice in a cup?,yes,./data/gqa/../images/2395994.jpg,no,"def execute_command_18573157(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    juice_patches = image_patch.find(""juice"")
    # Question assumes only one juice patch
    if len(juice_patches) == 0:
        # If no juice is found, query the image directly
        return image_patch.simple_query(""Is the juice in a cup?"")
    if len(juice_patches[0].find(""cup"")) > 0:
        return ""yes""
    return ""no""",0
3445929,Is the brown horse on the right side of the photo?,yes,./data/gqa/../images/2394426.jpg,yes,"def execute_command_3445929(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    brown_horse_patches = image_patch.find(""brown horse"")
    # Question assumes only one brown horse patch
    if len(brown_horse_patches) == 0:
        # If no brown horse is found, query the image directly
        return image_patch.simple_query(""Is the brown horse on the right side of the photo?"")
    brown_horse_patch = brown_horse_patches[0]
    if brown_horse_patch.horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no""",1
16541709,Where is the grass?,on the ground,./data/gqa/../images/2411098.jpg,ground,"def execute_command_16541709(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")",0
15764335,Are there any dogs on the tan sand?,no,./data/gqa/../images/2338855.jpg,no,"def execute_command_15764335(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""dog with tan sand"")) # query directly to include the context of the sand",1
1478089,Are the door and the garage door made of the same material?,no,./data/gqa/../images/2391928.jpg,no,"def execute_command_1478089(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""Are the door and the garage door made of the same material?"")
    door_patch = door_patches[0]
    garage_patches = image_patch.find(""garage door"")
    # Question assumes one garage door patch
    if len(garage_patches) == 0:
        return ""no""
    garage_patch = garage_patches[0]
    door_material = door_patch.simple_query(""What material is the door made of?"")
    garage_material = garage_patch.simple_query(""What material is the garage door made of?"")
    return bool_to_yesno(door_material == garage_material)",1
1250685,Was this picture taken in a bathroom or at a dining room?,bathroom,./data/gqa/../images/2342742.jpg,bathroom,"def execute_command_1250685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Was this picture taken in a bathroom or at a dining room?"")",1
10436844,Is the zebra's nose soft and brown?,yes,./data/gqa/../images/2407455.jpg,yes,"def execute_command_10436844(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""Is the zebra's nose soft and brown?"")
    zebra_patch = zebra_patches[0]
    return bool_to_yesno(zebra_patch.verify_property(""nose"", ""soft and brown""))",1
10683765,Does the shirt have blue color?,no,./data/gqa/../images/2393610.jpg,yes,"def execute_command_10683765(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt have blue color?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""blue""))",0
1593352,Do the draperies look white and striped?,yes,./data/gqa/../images/2317027.jpg,no,"def execute_command_1593352(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    drapery_patches = image_patch.find(""drapery"")
    # Question assumes only one drapery patch
    if len(drapery_patches) == 0:
        # If no drapery is found, query the image directly
        return image_patch.simple_query(""Do the draperies look white and striped?"")
    drapery_patch = drapery_patches[0]
    return bool_to_yesno(drapery_patch.verify_property(""drapery"", ""white and striped""))",0
16553304,Are the trunks both long and wide?,yes,./data/gqa/../images/2413209.jpg,no,"def execute_command_16553304(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Are the trunks both long and wide?""))
    trunk_patch = trunk_patches[0]
    return bool_to_yesno(trunk_patch.verify_property(""trunk"", ""long"") and trunk_patch.verify_property(""trunk"", ""wide""))",0
7165102,Is the car on the left of the photo?,no,./data/gqa/../images/2369857.jpg,no,"def execute_command_7165102(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Is the car on the left of the photo?"")
    car_patch = car_patches[0]
    image_center = image_patch.horizontal_center
    return bool_to_yesno(car_patch.horizontal_center < image_center)",1
11848830,Are both the banana that looks yellow and green and the banana that looks yellow and green short?,yes,./data/gqa/../images/2406169.jpg,yes,"def execute_command_11848830(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    yellow_green_banana_patches = image_patch.find(""banana that looks yellow and green"")
    # Question assumes only one type of banana patch
    if len(yellow_green_banana_patches) == 0:
        # If no yellow-green banana is found, query the image directly
        return image_patch.simple_query(""Are both the banana that looks yellow and green and the banana that looks yellow and green short?"")
    for banana_patch in yellow_green_banana_patches:
        is_short = banana_patch.simple_query(""Is the banana that looks yellow and green short?"")
        if not is_short:
            return ""no""
    return ""yes""",1
19279872,What is the man to the right of the helmet wearing?,helmet,./data/gqa/../images/712975.jpg,hat,"def execute_command_19279872(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    helmet_patches = image_patch.find(""helmet"")
    # Question assumes only one helmet patch
    if len(helmet_patches) == 0:
        # If no helmet is found, query the image directly
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    helmet_patch = helmet_patches[0]
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        return image_patch.simple_query(""What is the man to the right of the helmet wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What are you wearing?"") # crop would include the helmet so keep it in the query",0
4285513,What is the color of the floor?,brown,./data/gqa/../images/2387727.jpg,light brown,"def execute_command_4285513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the color of the floor?"")",0
3974266,Do the trousers look tan?,no,./data/gqa/../images/2371457.jpg,yes,"def execute_command_3974266(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""Do the trousers look tan?"")
    return bool_to_yesno(trousers_patches[0].verify_property(""trousers"", ""tan""))",0
11595009,What are the devices to the right of the device that is to the right of the remote control?,computer,./data/gqa/../images/2407602.jpg,earphones,"def execute_command_11595009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    remote_control_patches = image_patch.find(""remote control"")
    # Question assumes only one remote control patch
    if len(remote_control_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    remote_control_patch = remote_control_patches[0]
    right_patches = image_patch.find(""device"")
    # Question assumes at least one device patch to the right of the remote control
    if len(right_patches) == 0:
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    right_of_remote_patches = [patch for patch in right_patches if patch.horizontal_center > remote_control_patch.horizontal_center]
    if len(right_of_remote_patches) == 0:
        return image_patch.simple_query(""What are the devices to the right of the device that is to the right of the remote control?"")
    return right_of_remote_patches[0].best_text_match([""phone"", ""computer"", ""tv""])",0
6183000,Are there nightstands or beds?,no,./data/gqa/../images/2395834.jpg,yes,"def execute_command_6183000(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_nightstand = image_patch.exists(""nightstand"")
    is_bed = image_patch.exists(""bed"")
    return bool_to_yesno(is_nightstand or is_bed)",0
14143982,Is it an outdoors scene?,yes,./data/gqa/../images/2324286.jpg,yes,"def execute_command_14143982(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))",1
6123160,Are the speakers to the left of a Wii controller?,no,./data/gqa/../images/2395059.jpg,no,"def execute_command_6123160(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    speaker_patches = image_patch.find(""speaker"")
    # Question assumes only one speaker patch
    if len(speaker_patches) == 0:
        # If no speaker is found, query the image directly
        return image_patch.simple_query(""Are the speakers to the left of a Wii controller?"")
    for speaker_patch in speaker_patches:
        wii_controller_patches = image_patch.find(""Wii controller"")
        if len(wii_controller_patches) == 0:
            return ""no""
        for wii_controller_patch in wii_controller_patches:
            if wii_controller_patch.horizontal_center < speaker_patch.horizontal_center:
                return ""no""
    return ""yes""",1
3681634,Is the plastic fork in the top or in the bottom part of the photo?,top,./data/gqa/../images/2345076.jpg,top,"def execute_command_3681634(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""plastic fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""Is the plastic fork in the top or in the bottom part of the photo?"")
    if fork_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
13629530,What is the vehicle on the street?,bus,./data/gqa/../images/2324176.jpg,bus,"def execute_command_13629530(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle on the street"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle on the street?"")
    return vehicle_patches[0].simple_query(""What type of vehicle is it?"") # crop would include the street so keep it in the query",1
1718325,Are there chairs or windows in the scene?,yes,./data/gqa/../images/2364800.jpg,yes,"def execute_command_1718325(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_chair = image_patch.exists(""chair"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_chair or is_window)",1
10607062,What color is the hat the man is in?,black,./data/gqa/../images/2404261.jpg,black,"def execute_command_10607062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man with a hat"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man with a hat is found, query the image directly
        return image_patch.simple_query(""What color is the hat the man is in?"")
    man_patch = man_patches[0]
    hat_patches = man_patch.find(""hat"")
    # Question assumes one hat patch
    if len(hat_patches) == 0:
        return image_patch.simple_query(""What color is the hat the man is in?"")
    return hat_patches[0].best_text_match([""red"", ""blue"", ""green"", ""white"", ""black"", ""brown"", ""gray""])",1
1849976,What vegetables are to the left of the spoon?,onions,./data/gqa/../images/2342679.jpg,tomatoes,"def execute_command_1849976(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    spoon_patch = spoon_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes at least one vegetable patch
    if len(vegetable_patches) == 0:
        return image_patch.simple_query(""What vegetables are to the left of the spoon?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center < spoon_patch.horizontal_center:
            result = vegetable_patch.simple_query(""What vegetables are to the left of the spoon?"")
            if result != ""vegetable"":
                return result
    return vegetable_patches[0].simple_query(""What vegetables are to the left of the spoon?"")",0
14827816,Is the statue made of bronze or stone?,stone,./data/gqa/../images/2334605.jpg,stone,"def execute_command_14827816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue made of bronze or stone?"")
    return statue_patches[0].best_text_match([""bronze"", ""stone""])",1
857204,What's the woman wearing?,dress,./data/gqa/../images/2407372.jpg,dress,"def execute_command_857204(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What's the woman wearing?"")
    return woman_patches[0].simple_query(""What are you wearing?"") # crop would include the clothing so keep it in the query",1
2201105,Is the ball pink?,yes,./data/gqa/../images/2373240.jpg,yes,"def execute_command_2201105(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball pink?"")
    return bool_to_yesno(ball_patches[0].verify_property(""ball"", ""pink""))",1
14616023,What piece of furniture are the cords in front of?,chair,./data/gqa/../images/713353.jpg,table,"def execute_command_14616023(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cord_patches = image_patch.find(""cord"")
    # Question assumes only one cord patch
    if len(cord_patches) == 0:
        # If no cord is found, query the image directly
        return image_patch.simple_query(""What piece of furniture are the cords in front of?"")
    cord_patch = cord_patches[0]
    max_distance = 0
    best_furniture = None
    for furniture_name in [""sofa"", ""chair"", ""table"", ""computer"", ""tv""]:
        furniture_patches = image_patch.find(furniture_name)
        for furniture_patch in furniture_patches:
            distance = abs(furniture_patch.horizontal_center - cord_patch.horizontal_center)
            if distance > max_distance:
                max_distance = distance
                best_furniture = furniture_name
    return best_furniture",0
161027411,Are there both doors and windows in this photo?,no,./data/gqa/../images/2368893.jpg,yes,"def execute_command_161027411(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)",0
8249677,On which side of the image is the black car?,left,./data/gqa/../images/2386080.jpg,left,"def execute_command_8249677(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""black car"")
    # Question assumes only one black car patch
    if len(car_patches) == 0:
        # If no black car is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the black car?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
16184856,What is the striped animal called?,giraffe,./data/gqa/../images/2356100.jpg,zebra,"def execute_command_16184856(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal with stripes"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no striped animal is found, query the image directly
        return image_patch.simple_query(""What is the striped animal called?"")
    return animal_patches[0].simple_query(""What type of animal is this?"") # crop would include the stripes so keep it in the query",0
1479068,Is it outdoors?,yes,./data/gqa/../images/2349540.jpg,yes,"def execute_command_1479068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))",1
16155046,Is the dry grass below a zebra?,no,./data/gqa/../images/2394019.jpg,yes,"def execute_command_16155046(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""dry grass"")
    # Question assumes only one patch
    if len(grass_patches) == 0:
        # If no dry grass is found, query the image directly
        return image_patch.simple_query(""Is the dry grass below a zebra?"")
    grass_patch = grass_patches[0]
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes one zebra patch
    if len(zebra_patches) == 0:
        return ""no""
    zebra_patch = zebra_patches[0]
    return bool_to_yesno(grass_patch.vertical_center < zebra_patch.vertical_center)",0
16515071,What is the person in the water wearing?,blue,./data/gqa/../images/2402712.jpg,swimsuit,"def execute_command_16515071(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person in the water"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person in the water is found, query the image directly
        return image_patch.simple_query(""What is the person in the water wearing?"")
    return person_patches[0].simple_query(""What are you wearing?"") # crop would include the water so ask directly about what they are wearing",0
161015042,Who is wearing the goggles?,the child,./data/gqa/../images/2414543.jpg,boy,"def execute_command_161015042(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is wearing the goggles?"")",0
19149868,What is pulled by the lady?,bananas,./data/gqa/../images/2361612.jpg,banana,"def execute_command_19149868(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is pulled by the lady?"")",0
5199994,What's the man wearing?,black shirt,./data/gqa/../images/2413903.jpg,t-shirt,"def execute_command_5199994(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What are you wearing?"") # ask directly to get the clothing",0
19184475,Are the man glasses on the left side of the image?,Error Ejecucion: 'ImagePatch' object has no attribute 'horizontal',./data/gqa/../images/2347169.jpg,yes,"def execute_command_19184475(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return bool_to_yesno(image_patch.horizontal_center < 512) # assuming 512 is the horizontal center of the image
    man_patch = man_patches[0]
    glasses_patches = man_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    glasses_patch = glasses_patches[0]
    return bool_to_yesno(glasses_patch.horizontal_center < image_patch.horizontal) # image_patch.horizontal is the horizontal center of the image_patch",0
7149602,Is the shirt orange or blue?,blue,./data/gqa/../images/2353209.jpg,blue,"def execute_command_7149602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt orange or blue?"")
    shirt_patch = shirt_patches[0]
    if shirt_patch.best_text_match([""orange"", ""blue""]) == ""blue"":
        return ""blue""
    else:
        return ""orange""",1
19479555,What is the person to the right of the benches holding?,"Error Codigo: expected an indented block after 'if' statement on line 41 (Codex, line 42)",./data/gqa/../images/2396663.jpg,baseball bat,"def execute_command_19479555(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bench_patches = image_patch.find(""benches"")
    # Question assumes one or more benches
    if len(bench_patches) == 0:
        # If no benches are found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    right_of_benches_patches = image_patch.find(""man with object"")
    if len(right_of_benches_patches) == 0:
        right_of_benches_patches = image_patch.find(""person with object"")
    if len(right_of_benches_patches) == 0:
        right_of_benches_patches = image_patch.find(""person"")
    # Question assumes one person patch
    if len(right_of_benches_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the benches holding?"")
    right_of_benches_patch = right_of_benches_patches[0]
    object_patches = right_of_benches_patch.find(""object"")
    if len(object_patches) == 0:
        object_patches = right_of_benches_patch.find(""item"")
    if len(object_patches) == 0:
        object_patches = right_of_benches_patch.find(""thing"")
    if len(object_patches) == 0:
        object_patches = right_of_benches_patch.find(""bag"")
    if len(object_patches) == 0:
        object_patches = right_of_benches_patch.find(""pursuit"")
    if len(object_patches) == 0:
        object_patches = right_of_benches_patch.find(""ball"")
    if len(object_patches) == 0:
        object_patches = right_of_benches_patch.find(""item with handle"")
    if len(object_patches) == 0:
        object_patches = right_of_benches_patch.find(""potted plant"")
    if len(object_patches) == 0:
        object_patches = right_of_benches_patch.find(""flower"")
    if len(object_patches) == 0:
        object_patches = right_of_benches_patch.find(""bottle"")
    if len(object_patches) == 0:
        object_patches = right_of_benches_patch.find(""phone"")
    if len(object_patches) == 0:
        object_patches = right_of_benches_patch.find(""can"")
    if len(object_patches) == 0:
       ",0
19273393,Are there both a door and a window in this photo?,no,./data/gqa/../images/2410350.jpg,no,"def execute_command_19273393(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_door = image_patch.exists(""door"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_door and is_window)",1
6481656,What is the man doing?,jumping,./data/gqa/../images/2406865.jpg,jumping,"def execute_command_6481656(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    if man_patch.exists(""biking""):
        return man_patch.simple_query(""What is the man doing?"")
    else:
        return man_patch.simple_query(""What is the man doing?"")",1
13127703,What kind of drink is to the left of the bottle the woman is pouring?,wine,./data/gqa/../images/2403783.jpg,wine,"def execute_command_13127703(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of drink is to the left of the bottle the woman is pouring?"")",1
2378018,What is the toilet in front of?,bathtub,./data/gqa/../images/2390202.jpg,toilet paper,"def execute_command_2378018(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the toilet in front of?"")",0
8430841,Is the frisbee to the left of the guy?,no,./data/gqa/../images/2371994.jpg,yes,"def execute_command_8430841(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes only one frisbee patch
    if len(frisbee_patches) == 0:
        # If no frisbee is found, query the image directly
        return image_patch.simple_query(""Is the frisbee to the left of the guy?"")
    frisbee_patch = frisbee_patches[0]
    guy_patches = image_patch.find(""guy"")
    # Question assumes one guy patch
    if len(guy_patches) == 0:
        return ""no""
    guy_patch = guy_patches[0]
    return ""yes"" if frisbee_patch.horizontal_center < guy_patch.horizontal_center else ""no""",0
18616818,The man is watching who?,the woman,./data/gqa/../images/2402361.jpg,woman,"def execute_command_18616818(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    # asks for the object of a relational verb (watching), so ask directly
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is watching who?"")",1
179526,Is the white dog behind a girl?,yes,./data/gqa/../images/286099.jpg,yes,"def execute_command_179526(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    white_dog_patches = image_patch.find(""white dog"")
    # Question assumes only one white dog patch
    if len(white_dog_patches) == 0:
        # If no white dog is found, query the image directly
        return image_patch.simple_query(""Is the white dog behind a girl?"")
    white_dog_patch = white_dog_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes at least one girl patch
    if len(girl_patches) == 0:
        return ""no""
    for girl_patch in girl_patches:
        if girl_patch.horizontal_center > white_dog_patch.horizontal_center:
            return ""yes""
    return ""yes"" # if no girl is to the right, the white dog must be behind one of them",1
21018827,Is the river murky and calm?,yes,./data/gqa/../images/2399964.jpg,no,"def execute_command_21018827(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""river"", ""murky and calm""))",0
3697449,Who is wearing a shirt?,the man,./data/gqa/../images/2380464.jpg,man,"def execute_command_3697449(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candidates = [""man"", ""woman"", ""boy"", ""girl""]
    for candidate in candidates:
        if image_patch.exists(candidate) and image_patch.find(candidate)[0].simple_query(""Is the "" + candidate + "" wearing a shirt?"") == ""yes"":
            return image_patch.simple_query(""Who is wearing a shirt?"")
    return image_patch.simple_query(""Who is wearing a shirt?"") # if no one is wearing a shirt, query the image directly",1
3697807,Are there both a racket and a toothbrush in the image?,no,./data/gqa/../images/2343973.jpg,no,"def execute_command_3697807(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_racket = image_patch.exists(""racket"")
    is_toothbrush = image_patch.exists(""toothbrush"")
    return bool_to_yesno(is_racket and is_toothbrush)",1
1904643,What do both the car and the sign have in common?,metallic,./data/gqa/../images/3402.jpg,color,"def execute_command_1904643(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    car_patch = car_patches[0]
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    sign_patch = sign_patches[0]
    common_properties = set()
    for property in [""red"", ""blue"", ""green"", ""yellow"", ""metallic"", ""plastic"", ""wooden""]:
        if car_patch.verify_property(""car"", property) and sign_patch.verify_property(""sign"", property):
            common_properties.add(property)
    if len(common_properties) == 0:
        return image_patch.simple_query(""What do both the car and the sign have in common?"")
    return common_properties.pop()",0
11764476,Which place is it?,beach,./data/gqa/../images/2334489.jpg,beach,"def execute_command_11764476(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",1
4903948,On what kind of furniture is the plate?,table,./data/gqa/../images/2386929.jpg,shelf,"def execute_command_4903948(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""On what kind of furniture is the plate?"")
    return furniture_patches[0].simple_query(""On what kind of furniture is the plate?"")",0
61022361,What is the painting that is to the left of the clock hanging on?,portrait,./data/gqa/../images/2348442.jpg,wall,"def execute_command_61022361(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the painting that is to the left of the clock hanging on?"")",0
1527392,"What color is the fence, tan or black?",tan,./data/gqa/../images/2317403.jpg,tan,"def execute_command_1527392(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What color is the fence, tan or black?"")
    return fence_patches[0].best_text_match([""tan"", ""black""])",1
19229351,Do you see both bowls and carrots?,yes,./data/gqa/../images/2332488.jpg,yes,"def execute_command_19229351(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_bowl = image_patch.exists(""bowl"")
    is_carrot = image_patch.exists(""carrot"")
    return bool_to_yesno(is_bowl and is_carrot)",1
1297082,On which side is the silver fork?,left,./data/gqa/../images/2363316.jpg,left,"def execute_command_1297082(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side is the silver fork?"")
    fork_patch = fork_patches[0]
    if fork_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
16757832,Are there any blue helmets or napkins?,no,./data/gqa/../images/2395254.jpg,yes,"def execute_command_16757832(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_blue_helmet = image_patch.exists(""blue helmet"")
    is_napkin = image_patch.exists(""napkin"")
    return bool_to_yesno(is_blue_helmet or is_napkin)",0
839816,"In which part of the photo is the racket, the top or the bottom?",top,./data/gqa/../images/2407655.jpg,top,"def execute_command_839816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""In which part of the photo is the racket, the top or the bottom?"")
    if racket_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
12385226,Is there a mirror in the bathroom?,yes,./data/gqa/../images/2394690.jpg,no,"def execute_command_12385226(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bathroom with mirror"")) # query for a bathroom with a mirror, not just a bathroom or a mirror",0
18720852,Are there either blankets or tents in this picture?,no,./data/gqa/../images/2359384.jpg,no,"def execute_command_18720852(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_tent = image_patch.exists(""tent"")
    return bool_to_yesno(is_blanket or is_tent)",1
4675139,Is the cardboard box to the right or to the left of the woman that is on the left?,right,./data/gqa/../images/2402947.jpg,right,"def execute_command_4675139(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes one woman patch on the left
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center != image_patch.horizontal_center: # if woman is not in the center
        if image_patch.horizontal_center > woman_patch.horizontal_center:
            return ""right""
        else:
            return ""left""
    cardboard_patches = image_patch.find(""cardboard box"")
    # Question assumes one cardboard box patch
    if len(cardboard_patches) == 0:
        return image_patch.simple_query(""Is the cardboard box to the right or to the left of the woman that is on the left?"")
    cardboard_patch = cardboard_patches[0]
    if cardboard_patch.horizontal_center > woman_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
19453453,Who is wearing a shirt?,man,./data/gqa/../images/2394240.jpg,man,"def execute_command_19453453(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candidates = [""man"", ""woman"", ""boy"", ""girl""]
    for candidate in candidates:
        if image_patch.exists(candidate) and image_patch.find(candidate)[0].simple_query(""Is the "" + candidate + "" wearing a shirt?"") == ""yes"":
            return image_patch.simple_query(""Who is wearing a shirt?"")
    return image_patch.simple_query(""Who is wearing a shirt?"") # if no one is wearing a shirt, query the image directly",1
19562503,Is the house in the bottom part or in the top of the photo?,bottom,./data/gqa/../images/2386817.jpg,bottom,"def execute_command_19562503(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    house_patches = image_patch.find(""house"")
    # Question assumes only one house patch
    if len(house_patches) == 0:
        # If no house is found, query the image directly
        return image_patch.simple_query(""Is the house in the bottom part or in the top of the photo?"")
    house_patch = house_patches[0]
    if house_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
11737187,What is in front of the flowers that look red?,vase,./data/gqa/../images/2367641.jpg,couch,"def execute_command_11737187(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    flower_patches = image_patch.find(""flowers with red appearance"")
    # crop would include the flowers so keep it in the query
    if len(flower_patches) == 0:
        # If no flowers are found, query the image directly
        return image_patch.simple_query(""What is in front of the flowers that look red?"")
    flower_patch = flower_patches[0]
    return flower_patch.simple_query(""What is in front of the flowers that look red?"")",0
15710688,Is the shirt short sleeved or sleeveless?,sleeveless,./data/gqa/../images/2402286.jpg,short sleeved,"def execute_command_15710688(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt short sleeved or sleeveless?"")
    shirt_patch = shirt_patches[0]
    if shirt_patch.simple_query(""Does the shirt have sleeves?"") == ""no"":
        return ""sleeveless""
    else:
        return ""short sleeved""",0
5533952,What are the white wires connected to?,a kite,./data/gqa/../images/2412046.jpg,kite,"def execute_command_5533952(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the white wires connected to?"")",1
11313555,"What type of furniture is that, a table or a nightstand?",table,./data/gqa/../images/713781.jpg,table,"def execute_command_11313555(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What type of furniture is that, a table or a nightstand?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.best_text_match([""table"", ""nightstand""])",1
10508893,What animals are in front of the trees?,giraffes,./data/gqa/../images/2398196.jpg,giraffes,"def execute_command_10508893(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animals are in front of the trees?"")",1
14501997,What is the gate made of?,wood,./data/gqa/../images/2365781.jpg,metal,"def execute_command_14501997(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the gate made of?"")",0
45624,What color is the device on top of the table?,Error Ejecucion: 'ImagePatch' object has no attribute 'shape',./data/gqa/../images/2365281.jpg,gray,"def execute_command_45624(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What color is the device on top of the table?"")
    device_patch = device_patches[0]
    table_patches = image_patch.find(""table"")
    # Question assumes one table patch
    if len(table_patches) == 0:
        return device_patch.simple_query(""What color is the device?"")
    table_patch = table_patches[0]
    # crop to the device to avoid other objects on the table
    device_image_patch = ImagePatch(image_patch.crop(0, table_patch.lower, image_patch.width, table_patch.upper))
    return device_patch.simple_query(""What color is the device?"")",0
181032044,Are these closed drawers?,yes,./data/gqa/../images/2323054.jpg,yes,"def execute_command_181032044(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    drawer_patches = image_patch.find(""drawer"")
    # Question assumes multiple drawer patches
    if len(drawer_patches) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""Are these closed drawers?"")
    for drawer_patch in drawer_patches:
        return bool_to_yesno(drawer_patch.verify_property(""drawer"", ""closed""))",1
383,What kind of furniture is made of wood?,bed,./data/gqa/../images/2390913.jpg,bed,"def execute_command_383(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is made of wood?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.verify_property(""furniture"", ""wooden""):
            return furniture_patch.simple_query(""What kind of furniture is made of wood?"")
    # If no wooden furniture is found, pick the first furniture
    return furniture_patches[0].simple_query(""What kind of furniture is made of wood?"")",1
101054962,What is the person by the bananas wearing?,an apron,./data/gqa/../images/2342539.jpg,apron,"def execute_command_101054962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person by the bananas wearing?"")
    person_patch = person_patches[0]
    banana_patches = image_patch.find(""bananas"")
    # Question assumes one banana patch
    if len(banana_patches) == 0:
        return person_patch.simple_query(""What are you wearing?"")
    return person_patch.simple_query(""What are you wearing?"") # crop would include the bananas so keep it in the query",1
759165,What is the color of the tower in the middle of the picture?,black,./data/gqa/../images/882.jpg,gray,"def execute_command_759165(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tower_patches = image_patch.find(""tower"")
    # Question assumes only one tower patch
    if len(tower_patches) == 0:
        # If no tower is found, query the image directly
        return image_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    middle_patch = tower_patches[0]
    if len(tower_patches) == 1:
        return middle_patch.simple_query(""What is the color of the tower in the middle of the picture?"")
    max_center = image_patch.horizontal_center
    best_match = None
    max_match = 0
    for tower_patch in tower_patches:
        center = tower_patch.horizontal_center
        match = abs(center - max_center)
        if match < max_match or max_match == 0:
            max_match = match
            best_match = tower_patch
    return best_match.simple_query(""What is the color of the tower in the middle of the picture?"")",0
10775539,Is this giraffe tall and white?,yes,./data/gqa/../images/2390608.jpg,no,"def execute_command_10775539(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_giraffe = image_patch.exists(""giraffe"")
    if not is_giraffe:
        return ""no""
    return bool_to_yesno(image_patch.verify_property(""giraffe"", ""tall and white""))",0
19981804,On which side of the photo is the colorful screen?,left,./data/gqa/../images/2400343.jpg,left,"def execute_command_19981804(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    screen_patches = image_patch.find(""screen"")
    # Question assumes only one screen patch
    if len(screen_patches) == 0:
        # If no screen is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the colorful screen?"")
    screen_patch = screen_patches[0]
    if screen_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
7903654,Is the tap on the left side or on the right?,left,./data/gqa/../images/2368848.jpg,left,"def execute_command_7903654(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is the tap on the left side or on the right?"")
    tap_patch = tap_patches[0]
    if tap_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
6206183,Which place is it?,a store,./data/gqa/../images/2334194.jpg,store,"def execute_command_6206183(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",1
15212437,Is the coat black or beige?,black,./data/gqa/../images/1160140.jpg,black,"def execute_command_15212437(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""Is the coat black or beige?"")
    coat_patch = coat_patches[0]
    return coat_patch.best_text_match([""black"", ""beige""])",1
13123207,Does the kite near the field look high and red?,yes,./data/gqa/../images/2400255.jpg,yes,"def execute_command_13123207(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    kite_patches = image_patch.find(""kite near the field"")
    # Question assumes only one kite patch
    if len(kite_patches) == 0:
        # If no kite is found, query the image directly
        return image_patch.simple_query(""Does the kite near the field look high and red?"")
    kite_patch = kite_patches[0]
    return bool_to_yesno(kite_patch.verify_property(""kite near the field"", ""high and red""))",1
7740092,Are there any utensils in this picture?,yes,./data/gqa/../images/2318172.jpg,no,"def execute_command_7740092(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""utensil""))",0
8774975,What is around the guy?,white wall,./data/gqa/../images/2358921.jpg,collar,"def execute_command_8774975(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is around the guy?"")",0
17728574,Do you see bananas or cookies?,no,./data/gqa/../images/2391600.jpg,no,"def execute_command_17728574(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_banana = image_patch.exists(""banana"")
    is_cookie = image_patch.exists(""cookie"")
    return bool_to_yesno(is_banana or is_cookie)",1
14274506,Is the staircase different in color than the sky?,yes,./data/gqa/../images/2401595.jpg,yes,"def execute_command_14274506(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    staircase_patches = image_patch.find(""staircase"")
    # Question assumes only one staircase patch
    if len(staircase_patches) == 0:
        # If no staircase is found, query the image directly
        return image_patch.simple_query(""Is the staircase different in color than the sky?"")
    for staircase_patch in staircase_patches:
        sky_patches = image_patch.find(""sky"")
        # Question assumes only one sky patch
        if len(sky_patches) == 0:
            return ""no""
        sky_patch = sky_patches[0]
        if staircase_patch.simple_query(""Is the staircase blue?"") == ""yes"":
            return bool_to_yesno(sky_patch.simple_query(""Is blue?"")) # if blue, then sky must be blue too
        else:
            return ""yes""",1
1605874,What color are the containers that are on the right?,black,./data/gqa/../images/2395605.jpg,black,"def execute_command_1605874(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch on the right
    max_right = -float('inf')
    for container_patch in container_patches:
        if container_patch.horizontal_center > max_right:
            max_right = container_patch.horizontal_center
            best_match = container_patch
    if max_right == -float('inf'):
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color are the containers that are on the right?"")
    return best_match.best_text_match([""red"", ""blue"", ""green"", ""brown"", ""gray"", ""white"", ""black""])",1
12495781,Are the people to the right or to the left of the cone that is orange?,right,./data/gqa/../images/2375066.jpg,right,"def execute_command_12495781(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cone_patches = image_patch.find(""orange cone"")
    # Question assumes only one orange cone patch
    if len(cone_patches) == 0:
        # If no orange cone is found, query the image directly
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    cone_patch = cone_patches[0]
    people_patches = image_patch.find(""people"")
    # Question assumes at least one people patch
    if len(people_patches) == 0:
        return image_patch.simple_query(""Are the people to the right or to the left of the cone that is orange?"")
    for people_patch in people_patches:
        if people_patch.horizontal_center > cone_patch.horizontal_center:
            return ""right""
        else:
            return ""left""",1
14165681,"What type of clothing is light, the sweater or the cap?",sweater,./data/gqa/../images/2341698.jpg,sweater,"def execute_command_14165681(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""What type of clothing is light, the sweater or the cap?"")
    light_clothing_patch = clothing_patches[0]
    if light_clothing_patch.simple_query(""Is the sweater light?"") == ""yes"":
        return light_clothing_patch.best_text_match([""sweater"", ""cap""])
    elif light_clothing_patch.simple_query(""Is the cap light?"") == ""yes"":
        return ""cap""
    else:
        return ""sweater""",1
19982010,Is the chair to the right or to the left of the girl that is wearing jeans?,right,./data/gqa/../images/2400343.jpg,right,"def execute_command_19982010(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl wearing jeans"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl wearing jeans is found, query the image directly
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    girl_patch = girl_patches[0]
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        return image_patch.simple_query(""Is the chair to the right or to the left of the girl that is wearing jeans?"")
    chair_patch = chair_patches[0]
    if chair_patch.horizontal_center > girl_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
5617223,"What color is the container to the left of the horse, green or silver?",green,./data/gqa/../images/2414890.jpg,green,"def execute_command_5617223(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What color is the container to the left of the horse, green or silver?"")
    container_patch = container_patches[0]
    horse_patches = image_patch.find(""horse"")
    # Question assumes one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return container_patch.best_text_match([""green"", ""silver""])
    horse_patch = horse_patches[0]
    for other_container_patch in container_patches:
        if other_container_patch.horizontal_center < horse_patch.horizontal_center:
            return other_container_patch.best_text_match([""green"", ""silver""])
    # If no container is to the left of the horse, query the first container
    return container_patch.best_text_match([""green"", ""silver""])",1
2428964,Is the water gray or teal?,teal,./data/gqa/../images/2383620.jpg,gray,"def execute_command_2428964(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.find(""water"")[0].best_text_match([""gray"", ""teal""])",0
19620769,Which place is it?,titans stadium,./data/gqa/../images/2334770.jpg,stadium,"def execute_command_19620769(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
14785459,On which side of the picture is the lamp?,left,./data/gqa/../images/2370590.jpg,left,"def execute_command_14785459(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the lamp?"")
    lamp_patch = lamp_patches[0]
    if lamp_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
1325617,Does the brown animal look tiny?,yes,./data/gqa/../images/2383086.jpg,no,"def execute_command_1325617(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    brown_animal_patches = image_patch.find(""brown animal"")
    # Question assumes only one brown animal patch
    if len(brown_animal_patches) == 0:
        # If no brown animal is found, query the image directly
        return image_patch.simple_query(""Does the brown animal look tiny?"")
    brown_animal_patch = brown_animal_patches[0]
    return bool_to_yesno(brown_animal_patch.simple_query(""Is the brown animal tiny?""))",0
5672532,Does that shirt look long sleeved?,yes,./data/gqa/../images/2373095.jpg,yes,"def execute_command_5672532(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does that shirt look long sleeved?"")
    shirt_patch = shirt_patches[0]
    return bool_to_yesno(shirt_patch.verify_property(""shirt"", ""longsleeve""))",1
6146439,Does the box look green?,no,./data/gqa/../images/2390480.jpg,yes,"def execute_command_6146439(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Does the box look green?"")
    return bool_to_yesno(box_patches[0].verify_property(""box"", ""green""))",0
1910285,Is the white container on the left of the image?,yes,./data/gqa/../images/2064.jpg,yes,"def execute_command_1910285(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container with max 50% of white pixels"")
    # Query directly for a container with max 50% of white pixels
    if len(container_patches) == 0:
        return image_patch.simple_query(""Is the white container on the left of the image?"")
    container_patch = container_patches[0]
    if container_patch.horizontal_center == image_patch.horizontal_center:
        return ""no""
    return ""yes""",1
13362134,Is that shower curtain to the left of a toilet?,yes,./data/gqa/../images/2387101.jpg,no,"def execute_command_13362134(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shower_curtain_patches = image_patch.find(""shower curtain"")
    # Question assumes only one shower curtain patch
    if len(shower_curtain_patches) == 0:
        # If no shower curtain is found, query the image directly
        return image_patch.simple_query(""Is that shower curtain to the left of a toilet?"")
    for shower_curtain_patch in shower_curtain_patches:
        toilet_patches = image_patch.find(""toilet"")
        for toilet_patch in toilet_patches:
            if toilet_patch.horizontal_center > shower_curtain_patch.horizontal_center:
                return ""yes""
    return ""no""",0
161060488,Is there any cabinet to the right of the stove?,yes,./data/gqa/../images/2358516.jpg,yes,"def execute_command_161060488(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    stove_patches = image_patch.find(""stove"")
    # Question assumes at least one stove patch
    if len(stove_patches) == 0:
        # If no stove is found, query the image directly
        return image_patch.simple_query(""Is there any cabinet to the right of the stove?"")
    for cabinet_patch in cabinet_patches:
        if cabinet_patch.horizontal_center > stove_patches[0].horizontal_center:
            return ""yes""
    return ""no""",1
111055042,Is the chair on the right?,yes,./data/gqa/../images/2386495.jpg,yes,"def execute_command_111055042(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Is the chair on the right?"")
    chair_patch = chair_patches[0]
    image_center = image_patch.horizontal_center
    return bool_to_yesno(chair_patch.horizontal_center > image_center)",1
151068,Which kind of clothing is white?,shirt,./data/gqa/../images/2320533.jpg,polo shirt,"def execute_command_151068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is white?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.best_text_match([""pink"", ""blue"", ""black"", ""white"", ""red""]):
            return clothing_patch.simple_query(""Which kind of clothing is white?"")
    # If no clothing with white is found, query the image directly
    return image_patch.simple_query(""Which kind of clothing is white?"")",0
19387951,Is this place the forest or the garden?,forest,./data/gqa/../images/2331403.jpg,forest,"def execute_command_19387951(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""forest"", ""garden""])",1
1781695,What's on the blanket?,dog,./data/gqa/../images/2378299.jpg,ball,"def execute_command_1781695(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's on the blanket?"")",0
17699779,Is she on a bed?,no,./data/gqa/../images/2389153.jpg,no,"def execute_command_17699779(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""bed"") and image_patch.simple_query(""Is she on it?""))",1
464441,"What piece of furniture is the blanket on, a bed or a sofa?",bed,./data/gqa/../images/2383984.jpg,sofa,"def execute_command_464441(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"")
    blanket_patch = blanket_patches[0]
    bed_patches = blanket_patch.find(""bed"")
    sofa_patches = blanket_patch.find(""sofa"")
    if len(bed_patches) > 0:
        return ""bed""
    elif len(sofa_patches) > 0:
        return ""sofa""
    else:
        return image_patch.simple_query(""What piece of furniture is the blanket on, a bed or a sofa?"") # if no bed or sofa is found, query the image directly",0
9505496,Are the wires above a man?,yes,./data/gqa/../images/2353108.jpg,yes,"def execute_command_9505496(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Are the wires above a man?"")
    man_patch = man_patches[0]
    wire_patches = image_patch.find(""wire"")
    # Question assumes one wire patch
    if len(wire_patches) == 0:
        return ""no""
    for wire_patch in wire_patches:
        if wire_patch.vertical_center > man_patch.vertical_center:
            return ""yes""
    return ""no""",1
4625512,What is the woman doing?,sitting,./data/gqa/../images/3947.jpg,sitting,"def execute_command_4625512(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the woman doing?"")",1
9441941,Is the woman's hair red or black?,red,./data/gqa/../images/2315810.jpg,black,"def execute_command_9441941(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman's hair red or black?"")
    woman_patch = woman_patches[0]
    return woman_patch.best_text_match([""red"", ""black""])",0
2387432,What's on the table?,food,./data/gqa/../images/2316448.jpg,soda can,"def execute_command_2387432(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's on the table?"")",0
10534717,What is the pillow on?,couch,./data/gqa/../images/2351255.jpg,sofa,"def execute_command_10534717(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""What is the pillow on?"")
    return pillow_patches[0].simple_query(""What is the pillow on?"")",0
19335685,"What fruits is the container behind of, apples or bananas?",both,./data/gqa/../images/2404433.jpg,bananas,"def execute_command_19335685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    container_patches = image_patch.find(""container"")
    # Question assumes only one container patch
    if len(container_patches) == 0:
        # If no container is found, query the image directly
        return image_patch.simple_query(""What fruits is the container behind, apples or bananas?"")
    container_patch = container_patches[0]
    apple_patches = container_patch.find(""apple"")
    banana_patches = container_patch.find(""bananas"")
    if len(apple_patches) == 0 and len(banana_patches) == 0:
        return image_patch.simple_query(""What fruits is the container behind, apples or bananas?"")
    if len(apple_patches) > 0 and len(banana_patches) > 0:
        return ""both""
    if len(apple_patches) > 0:
        return ""apples""
    else:
        return ""bananas""",0
3127817,The goat is standing in what?,a field,./data/gqa/../images/2400780.jpg,grass,"def execute_command_3127817(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The goat is standing in what?"")",0
1588567,Where does the man that to the right of the mirror sit?,on the bed,./data/gqa/../images/2387080.jpg,desk,"def execute_command_1588567(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""Where does the man that to the right of the mirror sit?"")",0
7399543,What is the floor made of?,wood,./data/gqa/../images/2385083.jpg,wood,"def execute_command_7399543(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the floor made of?"")",1
13741124,What kind of animal is the house behind of?,cat,./data/gqa/../images/2382560.jpg,cat,"def execute_command_13741124(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is the house behind?"")",1
1174904,Is the cobblestone sidewalk both large and gray?,no,./data/gqa/../images/2414806.jpg,yes,"def execute_command_1174904(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cobblestone_patches = image_patch.find(""cobblestone sidewalk"")
    # Question assumes only one cobblestone patch
    if len(cobblestone_patches) == 0:
        # If no cobblestone is found, query the image directly
        return image_patch.simple_query(""Is the cobblestone sidewalk both large and gray?"")
    return bool_to_yesno(cobblestone_patches[0].verify_property(""cobblestone sidewalk"", ""large"") and
                          cobblestone_patches[0].verify_property(""cobblestone sidewalk"", ""gray""))",0
13375231,What is the lettuce on?,plate,./data/gqa/../images/2319499.jpg,burger,"def execute_command_13375231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    lettuce_patches = image_patch.find(""lettuce"")
    # Question assumes only one lettuce patch
    if len(lettuce_patches) == 0:
        # If no lettuce is found, query the image directly
        return image_patch.simple_query(""What is the lettuce on?"")
    return lettuce_patches[0].simple_query(""What is the lettuce on?"")",0
1194027,Which kind of clothing is black?,suit,./data/gqa/../images/2343077.jpg,coat,"def execute_command_1194027(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.best_text_match([""pump"", ""hat"", ""coat"", ""jacket"", ""shirt"", ""pants"", ""shoes""])
    # If no black clothing is found, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"")",0
9963477,Is the statue wearing a dress?,no,./data/gqa/../images/2351308.jpg,yes,"def execute_command_9963477(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""Is the statue wearing a dress?"")
    return bool_to_yesno(statue_patches[0].exists(""dress""))",0
1151995,Which side of the photo is the yellow vase on?,left,./data/gqa/../images/2376541.jpg,left,"def execute_command_1151995(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    yellow_vase_patches = image_patch.find(""yellow vase"")
    # Question assumes only one yellow vase patch
    if len(yellow_vase_patches) == 0:
        # If no yellow vase is found, query the image directly
        return image_patch.simple_query(""Which side of the photo is the yellow vase on?"")
    yellow_vase_patch = yellow_vase_patches[0]
    if yellow_vase_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
712821,What is common to the bear and the belt?,the ground,./data/gqa/../images/2331787.jpg,color,"def execute_command_712821(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bear_patches = image_patch.find(""bear"")
    # Question assumes only one bear patch
    if len(bear_patches) == 0:
        # If no bear is found, query the image directly
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    bear_patch = bear_patches[0]
    belt_patches = image_patch.find(""belt"")
    # Question assumes only one belt patch
    if len(belt_patches) == 0:
        return image_patch.simple_query(""What is common to the bear and the belt?"")
    belt_patch = belt_patches[0]
    # Check if they are both brown
    if bear_patch.best_text_match([""brown"", ""green"", ""black"", ""white"", ""gray""]) == belt_patch.best_text_match([""brown"", ""green"", ""black"", ""white"", ""gray""]):
        return ""brown color""
    # Check if they are both on the ground
    if bear_patch.vertical_center < image_patch.vertical_center and belt_patch.vertical_center < image_patch.vertical_center:
        return ""the ground""
    # Check if they are both man-made
    if bear_patch.simple_query(""Is the bear man-made?"") == ""yes"" and belt_patch.simple_query(""Is the belt man-made?"") == ""yes"":
        return ""man-made""
    # If no common property is found, query the image directly
    return image_patch.simple_query(""What is common to the bear and the belt?"")",0
1757418,What is the vehicle to the right of the car?,truck,./data/gqa/../images/2402847.jpg,suv,"def execute_command_1757418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    car_patch = car_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What is the vehicle to the right of the car?"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > car_patch.horizontal_center:
            return vehicle_patch.simple_query(""What is the vehicle to the right of the car?"")
    return vehicle_patches[0].simple_query(""What is the vehicle to the right of the car?"") # if no vehicle is to the right, query the first one",0
7624100,Are the trunks that are gray wet and large?,yes,./data/gqa/../images/2338200.jpg,yes,"def execute_command_7624100(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    trunk_patches = image_patch.find(""trunk"")
    # Question assumes only one trunk patch
    if len(trunk_patches) == 0:
        # If no trunk is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Are the trunks that are gray wet and large?""))
    for trunk_patch in trunk_patches:
        if trunk_patch.simple_query(""Is the trunk gray, wet, and large?"") == ""yes"":
            return ""yes""
    return ""no""",1
1125474,"On which side of the photo is the iron fence, the right or the left?",left,./data/gqa/../images/2369578.jpg,left,"def execute_command_1125474(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""iron fence"")
    # Question assumes only one iron fence patch
    if len(fence_patches) == 0:
        # If no iron fence is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the iron fence, the right or the left?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
1300375,What is the name of the item of furniture that the printer is on?,desk,./data/gqa/../images/4900.jpg,cabinet,"def execute_command_1300375(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    printer_patches = image_patch.find(""printer"")
    # Question assumes only one printer patch
    if len(printer_patches) == 0:
        # If no printer is found, query the image directly
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    printer_patch = printer_patches[0]
    furniture_patches = image_patch.find(""furniture that the printer is on"")
    # Query directly for the specific type of furniture
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the name of the item of furniture that the printer is on?"")
    return furniture_patches[0].simple_query(""What is the name of the item of furniture that the printer is on?"")",0
5925196,What's the building covered by?,tree,./data/gqa/../images/2352009.jpg,window,"def execute_command_5925196(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the building covered by?"")",0
1948055,What watercraft is the white rope tying?,boat,./data/gqa/../images/2340314.jpg,boat,"def execute_command_1948055(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    white_rope_patches = image_patch.find(""white rope"")
    # Question assumes only one white rope patch
    if len(white_rope_patches) == 0:
        # If no white rope is found, query the image directly
        return image_patch.simple_query(""What watercraft is the white rope tying?"")
    white_rope_patch = white_rope_patches[0]
    return white_rope_patch.simple_query(""What watercraft is the white rope tying?"") # crop would include the white rope so keep it in the query",1
8540582,What kind of animal is in front of the leafy trees?,giraffe,./data/gqa/../images/2349160.jpg,rhino,"def execute_command_8540582(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of animal is in front of the leafy trees?"")",0
3719411,What does the walking woman by the bus wear?,jeans,./data/gqa/../images/2343728.jpg,coat,"def execute_command_3719411(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    walking_patches = image_patch.find(""walking woman"")
    # Question assumes only one patch
    if len(walking_patches) == 0:
        # If no walking woman is found, query the image directly
        return image_patch.simple_query(""What does the walking woman by the bus wear?"")
    walking_patch = walking_patches[0]
    return walking_patch.simple_query(""What are you wearing?"") # crop would include the bus so keep it in the query",0
1129508,Is the controller to the left of a pillow?,no,./data/gqa/../images/2361386.jpg,no,"def execute_command_1129508(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    controller_patches = image_patch.find(""controller"")
    # Question assumes only one controller patch
    if len(controller_patches) == 0:
        # If no controller is found, query the image directly
        return image_patch.simple_query(""Is the controller to the left of a pillow?"")
    for controller_patch in controller_patches:
        pillow_patches = image_patch.find(""pillow"")
        for pillow_patch in pillow_patches:
            if pillow_patch.horizontal_center > controller_patch.horizontal_center:
                return ""yes""
    return ""no""",1
18664084,Is there any sheep by the fence?,yes,./data/gqa/../images/2400393.jpg,yes,"def execute_command_18664084(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one fence patch
    fence_patches = image_patch.find(""fence"")
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is there any sheep by the fence?"")
    for sheep_patch in sheep_patches:
        for fence_patch in fence_patches:
            if abs(sheep_patch.horizontal_center - fence_patch.horizontal_center) < max(image_patch.width, image_patch.height)/2:
                return ""yes""
    return ""no""",1
6912079,What animal is this?,bull,./data/gqa/../images/2321569.jpg,bull,"def execute_command_6912079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is this?"")",1
3412029,Where is the person?,outside,./data/gqa/../images/2328273.jpg,sidewalk,"def execute_command_3412029(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the person?"")",0
14161122,What animal is in the water?,cow,./data/gqa/../images/2395232.jpg,cow,"def execute_command_14161122(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")",1
1781542,What is the item of furniture to the right of the baby the parent is to the left of?,bed,./data/gqa/../images/2378299.jpg,chair,"def execute_command_1781542(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the item of furniture to the right of the baby the parent is to the left of?"")",0
15699496,What is the cup that looks clean made of?,glass,./data/gqa/../images/2359214.jpg,glass,"def execute_command_15699496(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one clean cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""What is the cup that looks clean made of?"")
    for cup_patch in cup_patches:
        if cup_patch.simple_query(""Is the cup clean?"") == ""yes"":
            return cup_patch.simple_query(""What is the clean cup made of?"")
    # If no clean cup is found, pick the first cup
    return cup_patches[0].simple_query(""What is the cup made of?"")",1
12765451,What animals are to the right of the ladder?,bear,./data/gqa/../images/2325328.jpg,bears,"def execute_command_12765451(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    ladder_patches = image_patch.find(""ladder"")
    # Question assumes only one ladder patch
    if len(ladder_patches) == 0:
        # If no ladder is found, query the image directly
        return image_patch.simple_query(""What animals are to the right of the ladder?"")
    for animal_patch in image_patch.find(""animal""):
        if animal_patch.horizontal_center > ladder_patches[0].horizontal_center:
            return animal_patch.simple_query(""What animal is to the right of the ladder?"")
    return image_patch.simple_query(""What animals are to the right of the ladder?"")",0
191044307,What animal is black?,cat,./data/gqa/../images/2379672.jpg,cat,"def execute_command_191044307(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""What animal is black?"")
    # If no black animal is found, query the image directly
    return image_patch.simple_query(""What animal is black?"")",1
12639181,Who is wearing shorts?,the man,./data/gqa/../images/2323166.jpg,guy,"def execute_command_12639181(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing shorts?"")
    # If no person is wearing shorts, query the image directly
    return image_patch.simple_query(""Who is wearing shorts?"")",0
10630949,Is the person that is not male wearing an elbow pad?,yes,./data/gqa/../images/2406643.jpg,yes,"def execute_command_10630949(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is this person male?"") != ""yes"":
            return bool_to_yesno(person_patch.verify_property(""person"", ""wearing an elbow pad""))
    # If no female person is found, query the image directly
    return image_patch.simple_query(""Is the person that is not male wearing an elbow pad?"")",1
14544602,What is the boy holding?,bat,./data/gqa/../images/2340945.jpg,bat,"def execute_command_14544602(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy holding?"")
    boy_patch = boy_patches[0]
    object_patches = boy_patch.find(""held object"")
    # Question assumes one held object patch
    if len(object_patches) == 0:
        return image_patch.simple_query(""What is the boy holding?"")
    return object_patches[0].simple_query(""What is the boy holding?"")",1
2986699,Of what material the dish?,plastic,./data/gqa/../images/2376081.jpg,plastic,"def execute_command_2986699(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Of what material is the dish?"")",1
161013513,What kind of animal is on the street?,horse,./data/gqa/../images/2366564.jpg,horse,"def execute_command_161013513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is on the street?"")
    animal_patch = animal_patches[0]
    if animal_patch.exists(""horse""):
        return animal_patch.simple_query(""What kind of animal is on the street?"")
    else:
        return animal_patch.simple_query(""What kind of animal is on the street?"")",1
15143936,What animal is before the roof?,horse,./data/gqa/../images/2315503.jpg,horse,"def execute_command_15143936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is before the roof?"")",1
1955043,Who is playing with the ball?,two men,./data/gqa/../images/2321751.jpg,man,"def execute_command_1955043(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing with the ball?"")",0
91044150,What is the name of the animals in front of the trees beside the river?,bear,./data/gqa/../images/2376493.jpg,bears,"def execute_command_91044150(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the animals in front of the trees beside the river?"")",0
13483129,What kind of fruit is hanging?,apple,./data/gqa/../images/2403364.jpg,apple,"def execute_command_13483129(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What kind of fruit is hanging?"")",1
7317299,What is under the bush?,chairs,./data/gqa/../images/2410083.jpg,chairs,"def execute_command_7317299(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is under the bush?"")",1
17432396,Are there kangaroos or birds in this photograph?,yes,./data/gqa/../images/2400086.jpg,yes,"def execute_command_17432396(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_kangaroo = image_patch.exists(""kangaroo"")
    is_bird = image_patch.exists(""bird"")
    return bool_to_yesno(is_kangaroo or is_bird)",1
10457241,What is the color of the trousers?,white,./data/gqa/../images/2327197.jpg,white,"def execute_command_10457241(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    trousers_patches = image_patch.find(""trousers"")
    # Question assumes only one trousers patch
    if len(trousers_patches) == 0:
        # If no trousers are found, query the image directly
        return image_patch.simple_query(""What is the color of the trousers?"")
    return trousers_patches[0].best_text_match([""blue"", ""black"", ""brown"", ""gray"", ""red"", ""white""])",1
2913850,Is the placemat in the bottom or in the top part?,bottom,./data/gqa/../images/2404849.jpg,bottom,"def execute_command_2913850(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    placemat_patches = image_patch.find(""placemat"")
    # Question assumes only one placemat patch
    if len(placemat_patches) == 0:
        # If no placemat is found, query the image directly
        return image_patch.simple_query(""Is the placemat in the bottom or the top part?"")
    placemat_patch = placemat_patches[0]
    if placemat_patch.vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
12788747,What is covered with blanket?,bed,./data/gqa/../images/2106.jpg,bed,"def execute_command_12788747(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is covered with blanket?"")",1
7343271,What is the item of furniture that is to the right of the man that is wearing a sweater?,table,./data/gqa/../images/2387359.jpg,couch,"def execute_command_7343271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man wearing a sweater"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    man_patch = man_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > man_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")
    return furniture_patches[0].simple_query(""What is the item of furniture that is to the right of the man that is wearing a sweater?"")",0
18673671,"In which part of the picture is the desk drawer, the bottom or the top?",bottom,./data/gqa/../images/2406438.jpg,bottom,"def execute_command_18673671(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    desk_patch = desk_patches[0]
    if len(desk_patch.find(""drawer"")) == 0:
        # If no drawer is found, query the image directly
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    drawer_patches = desk_patch.find(""drawer"")
    # Question assumes only one drawer patch
    if len(drawer_patches) == 0:
        return image_patch.simple_query(""In which part of the picture is the desk drawer, the bottom or the top?"")
    drawer_patch = drawer_patches[0]
    if drawer_patch.vertical_center < desk_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
19900141,Are there napkins or tablecloths?,no,./data/gqa/../images/2316836.jpg,no,"def execute_command_19900141(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_napkin = image_patch.exists(""napkin"")
    is_tablecloth = image_patch.exists(""tablecloth"")
    return bool_to_yesno(is_napkin or is_tablecloth)",1
19737232,Is the book on the right of the picture?,no,./data/gqa/../images/2386651.jpg,no,"def execute_command_19737232(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Is the book on the right of the picture?"")
    book_patch = book_patches[0]
    image_width = image_patch.right - image_patch.left
    if book_patch.horizontal_center >= image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no""",1
475064,Who is wearing the glasses?,the man,./data/gqa/../images/2356800.jpg,boy,"def execute_command_475064(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candidates = image_patch.find(""person with glasses"")
    # Question assumes only one person with glasses
    if len(candidates) == 0:
        # If no person with glasses is found, query the image directly
        return image_patch.simple_query(""Who is wearing the glasses?"")
    return candidates[0].simple_query(""Who is wearing the glasses?"")",0
8594579,Is there a woman to the right of the orange object that is to the right of the person?,no,./data/gqa/../images/2317886.jpg,yes,"def execute_command_8594579(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # first find the orange object to the right of the person
    person_patches = image_patch.find(""person"")
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    right_of_person_patches = image_patch.find(""orange object"")
    if len(right_of_person_patches) == 0:
        right_of_person_patches = image_patch.find(""orange"")
    if len(right_of_person_patches) == 0:
        # If no orange object is found to the right of the person, query the image directly
        return image_patch.simple_query(""Is there a woman to the right of the orange object that is to the right of the person?"")
    right_of_right_patches = image_patch.find(""woman"")
    for right_of_right_patch in right_of_right_patches:
        if right_of_right_patch.horizontal_center > right_of_person_patches[0].horizontal_center:
            return ""yes""
    return ""no""",0
14602992,Which side of the image is the couch on?,left,./data/gqa/../images/2332695.jpg,left,"def execute_command_14602992(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    couch_patches = image_patch.find(""couch"")
    # Question assumes only one couch patch
    if len(couch_patches) == 0:
        # If no couch is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the couch on?"")
    couch_patch = couch_patches[0]
    image_center = image_patch.horizontal_center
    if couch_patch.horizontal_center < image_center:
        return ""left""
    else:
        return ""right""",1
9944587,How tall is the man that is wearing a shirt?,6 feet,./data/gqa/../images/1159400.jpg,tall,"def execute_command_9944587(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man with shirt"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man with shirt is found, query the image directly
        return image_patch.simple_query(""How tall is the man that is wearing a shirt?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""How tall am I?"") # ask the man directly",0
13736712,Are there any giraffes?,yes,./data/gqa/../images/2337078.jpg,yes,"def execute_command_13736712(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""giraffe""))",1
6996118,The young girl is wearing what?,jeans,./data/gqa/../images/2355935.jpg,shirt,"def execute_command_6996118(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""young girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""The young girl is wearing what?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What is the girl wearing?"") # crop would include the clothing so keep it in the query",0
19992576,Is the basket on the floor small and brown?,yes,./data/gqa/../images/2376382.jpg,no,"def execute_command_19992576(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    basket_patches = image_patch.find(""basket"")
    # Question assumes only one basket patch
    if len(basket_patches) == 0:
        # If no basket is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the basket on the floor small and brown?""))
    basket_patch = basket_patches[0]
    if basket_patch.exists(""floor""):
        return bool_to_yesno(basket_patch.simple_query(""Is the basket small and brown?""))
    return ""no""",0
17332401,What is the boy in front of?,hot dog,./data/gqa/../images/2338368.jpg,deck,"def execute_command_17332401(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What is the boy in front of?"")
    return boy_patches[0].simple_query(""What is the boy in front of?"")",0
15586294,Which side is the leather armchair on?,right,./data/gqa/../images/2352617.jpg,right,"def execute_command_15586294(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    armchair_patches = image_patch.find(""leather armchair"")
    # Question assumes only one armchair patch
    if len(armchair_patches) == 0:
        # If no armchair is found, query the image directly
        return image_patch.simple_query(""Which side is the leather armchair on?"")
    armchair_patch = armchair_patches[0]
    if armchair_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
15658324,What is the horse in front of?,fence,./data/gqa/../images/2404190.jpg,house,"def execute_command_15658324(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the horse in front of?"")",0
18453709,What is the item of furniture that has the same color as the controller the man is holding called?,stool,./data/gqa/../images/2408048.jpg,sofa,"def execute_command_18453709(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    man_patch = man_patches[0]
    controller_patches = man_patch.find(""controller"")
    # Question assumes one controller patch
    if len(controller_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    controller_patch = controller_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.simple_query(""Is the furniture blue?"") == controller_patch.simple_query(""Is blue?""):
            return furniture_patch.simple_query(""What kind of furniture is it?"")
    return furniture_patches[0].simple_query(""What is the item of furniture that has the same color as the controller the man is holding called?"")",0
2531874,Who is playing?,two men,./data/gqa/../images/2407294.jpg,man,"def execute_command_2531874(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")",0
3112009,Is the plate on the left side?,yes,./data/gqa/../images/2407160.jpg,yes,"def execute_command_3112009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    plate_patches = image_patch.find(""plate"")
    # Question assumes only one plate patch
    if len(plate_patches) == 0:
        # If no plate is found, query the image directly
        return image_patch.simple_query(""Is the plate on the left side?"")
    plate_patch = plate_patches[0]
    if plate_patch.horizontal_center < image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no""",1
1527613,On which side of the picture is the bag?,left,./data/gqa/../images/2363853.jpg,left,"def execute_command_1527613(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the bag?"")
    bag_patch = bag_patches[0]
    if bag_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
11781054,Are both the road and the roof the same color?,no,./data/gqa/../images/2325896.jpg,no,"def execute_command_11781054(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    road_patches = image_patch.find(""road"")
    # Question assumes only one road patch
    if len(road_patches) == 0:
        # If no road is found, query the image directly
        return bool_to_yesno(image_patch.exists(""roof""))
    road_patch = road_patches[0]
    roof_patches = image_patch.find(""roof"")
    # Question assumes only one roof patch
    if len(roof_patches) == 0:
        return bool_to_yesno(image_patch.exists(""road""))
    roof_patch = roof_patches[0]
    return bool_to_yesno(road_patch.best_text_match([""blue"", ""red"", ""brown"", ""green"", ""gray""]) == roof_patch.best_text_match([""blue"", ""red"", ""brown"", ""green"", ""gray""]))",1
161027384,What is the green rug hanging on?,wall,./data/gqa/../images/2368893.jpg,wall,"def execute_command_161027384(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the green rug hanging on?"")",1
14153714,Who is using the laptop?,two women,./data/gqa/../images/2347683.jpg,girl,"def execute_command_14153714(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is using the laptop?"")",0
1969500,Who in the photo is standing?,a woman,./data/gqa/../images/2408009.jpg,woman,"def execute_command_1969500(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who in the photo is standing?"")",1
693318,Do you see any plates in the photo?,no,./data/gqa/../images/2370435.jpg,no,"def execute_command_693318(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""plate""))",1
19613394,The person on the skateboard is wearing what?,red shirt,./data/gqa/../images/2370550.jpg,helmet,"def execute_command_19613394(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person on a skateboard"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person on a skateboard is found, query the image directly
        return image_patch.simple_query(""The person on the skateboard is wearing what?"")
    return person_patches[0].simple_query(""What are you wearing?"") # crop would include the skateboard so keep it in the query",0
19927237,Is the blue car in front of the white van?,no,./data/gqa/../images/2382358.jpg,no,"def execute_command_19927237(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car in front of the white van?"")
    blue_car_patch = blue_car_patches[0]
    white_van_patches = image_patch.find(""white van"")
    # Question assumes only one white van patch
    if len(white_van_patches) == 0:
        return ""no""
    white_van_patch = white_van_patches[0]
    blue_car_center = blue_car_patch.horizontal_center
    white_van_center = white_van_patch.horizontal_center
    if blue_car_center > white_van_center:
        return ""yes""
    else:
        return ""no""",1
31054022,What is the box sitting on?,table,./data/gqa/../images/2329177.jpg,table,"def execute_command_31054022(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""What is the box sitting on?"")
    box_patch = box_patches[0]
    max_area = 0
    max_object = None
    for object_patch in image_patch.find(""object""):
        area = object_patch.width * object_patch.height
        if area > max_area and object_patch.vertical_center < box_patch.vertical_center:
            max_area = area
            max_object = object_patch.simple_query(""What object is the box sitting on?"")
    if max_object is None:
        return image_patch.simple_query(""What is the box sitting on?"")
    return max_object",1
17634413,Does the ground look snowy and brown?,yes,./data/gqa/../images/2332188.jpg,yes,"def execute_command_17634413(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    ground_patches = image_patch.find(""ground"")
    # Question assumes only one ground patch
    if len(ground_patches) == 0:
        # If no ground is found, query the image directly
        return image_patch.simple_query(""Does the ground look snowy and brown?"")
    ground_patch = ground_patches[0]
    return bool_to_yesno(ground_patch.verify_property(""ground"", ""snowy and brown""))",1
15185768,Does the sky look blue and clear?,yes,./data/gqa/../images/2348528.jpg,yes,"def execute_command_15185768(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""sky"", ""blue and clear""))",1
1589160,Does the person that is sitting lean against a fire hydrant?,no,./data/gqa/../images/2378861.jpg,yes,"def execute_command_1589160(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person sitting"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Does the person that is sitting lean against a fire hydrant?"")
    person_patch = person_patches[0]
    fire_hydrant_patches = image_patch.find(""fire hydrant"")
    # Question assumes one fire hydrant patch
    if len(fire_hydrant_patches) == 0:
        return ""no""
    for fire_hydrant_patch in fire_hydrant_patches:
        if (person_patch.horizontal_center - fire_hydrant_patch.horizontal_center) < 50 and \
           (person_patch.vertical_center - fire_hydrant_patch.vertical_center) < 50 and \
           person_patch.horizontal_center > fire_hydrant_patch.horizontal_center:
            return ""yes""
    return ""no""",0
2142522,Are there any shopping carts or mannequins in this photo?,no,./data/gqa/../images/2361766.jpg,no,"def execute_command_2142522(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_shopping_cart = image_patch.exists(""shopping cart"")
    is_mannequin = image_patch.exists(""mannequin"")
    return bool_to_yesno(is_shopping_cart or is_mannequin)",1
17362234,Are there cages or scrub brushes in this picture?,no,./data/gqa/../images/2322487.jpg,no,"def execute_command_17362234(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_cage = image_patch.exists(""cage"")
    is_scrub_brush = image_patch.exists(""scrub brush"")
    return bool_to_yesno(is_cage or is_scrub_brush)",1
4955854,Is the lamp below the chain?,yes,./data/gqa/../images/2391763.jpg,yes,"def execute_command_4955854(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes only one lamp patch
    if len(lamp_patches) == 0:
        # If no lamp is found, query the image directly
        return image_patch.simple_query(""Is the lamp below the chain?"")
    for lamp_patch in lamp_patches:
        chain_patches = image_patch.find(""chain"")
        # Question assumes one chain patch
        if len(chain_patches) == 0:
            return ""no""
        chain_patch = chain_patches[0]
        if lamp_patch.vertical_center < chain_patch.vertical_center:
            return ""yes""
    return ""no""",1
10463545,Is the computer to the right of the other computer silver or black?,silver,./data/gqa/../images/2360654.jpg,silver,"def execute_command_10463545(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    computer_patches = image_patch.find(""computer"")
    # Question assumes two computer patches
    if len(computer_patches) < 2:
        # If less than two computers are found, query the image directly
        return image_patch.simple_query(""Is the computer to the right of the other computer silver or black?"")
    left_patch = computer_patches[0]
    right_patch = computer_patches[1]
    if right_patch.horizontal_center > left_patch.horizontal_center:
        return right_patch.best_text_match([""silver"", ""black""])
    else:
        return left_patch.best_text_match([""silver"", ""black""])",1
2265037,What is the girl wearing?,jacket,./data/gqa/../images/2339113.jpg,boot,"def execute_command_2265037(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What is the girl wearing?"")
    return girl_patches[0].simple_query(""What are you wearing?"") # ask directly to get the clothing",0
15485146,Are there any blue numbers or letters?,no,./data/gqa/../images/4515.jpg,no,"def execute_command_15485146(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""blue number"") or image_patch.exists(""blue letter""))",1
3483992,Is the long bus to the left or to the right of the person with the backpack?,left,./data/gqa/../images/2409909.jpg,left,"def execute_command_3483992(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person with backpack"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person with backpack is found, query the image directly
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    person_patch = person_patches[0]
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        return image_patch.simple_query(""Is the long bus to the left or to the right of the person with the backpack?"")
    bus_patch = bus_patches[0]
    if bus_patch.horizontal_center < person_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
13598461,What is the device that is not on called?,television,./data/gqa/../images/2399127.jpg,remote control,"def execute_command_13598461(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""What is the device that is not on called?"")
    device_patch = device_patches[0]
    on_patches = image_patch.find(""on"")
    # Question assumes one on patch
    if len(on_patches) == 0:
        return device_patch.simple_query(""What is the device that is not on called?"")
    on_patch = on_patches[0]
    return device_patch.simple_query(""What is the device that is not on called?"")",0
13885436,The sky has what color?,blue,./data/gqa/../images/2366746.jpg,blue,"def execute_command_13885436(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the sky?"")",1
7432467,Is the black container to the left of the man that is on the motorcycle?,no,./data/gqa/../images/2328240.jpg,no,"def execute_command_7432467(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    black_container_patches = image_patch.find(""black container"")
    # Question assumes only one black container patch
    if len(black_container_patches) == 0:
        # If no black container is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    man_patches = image_patch.find(""man on motorcycle"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man on motorcycle is found, query the image directly
        return image_patch.simple_query(""Is the black container to the left of the man that is on the motorcycle?"")
    man_patch = man_patches[0]
    for black_container_patch in black_container_patches:
        if black_container_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no""",1
19540096,Is the fire in an oven?,no,./data/gqa/../images/2375878.jpg,yes,"def execute_command_19540096(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fire_patches = image_patch.find(""fire"")
    # Question assumes only one fire patch
    if len(fire_patches) == 0:
        # If no fire is found, query the image directly
        return image_patch.simple_query(""Is the fire in an oven?"")
    fire_patch = fire_patches[0]
    return bool_to_yesno(fire_patch.exists(""oven""))",0
18291107,The horse is where?,on the beach,./data/gqa/../images/2395783.jpg,ocean,"def execute_command_18291107(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The horse is where?"")",0
5435474,Is the man that is to the left of the motorbike wearing a hat?,no,./data/gqa/../images/2343415.jpg,yes,"def execute_command_5435474(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch to the left of the motorbike
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    man_patch = man_patches[0]
    motorbike_patches = image_patch.find(""motorbike"")
    # Question assumes only one motorbike patch
    if len(motorbike_patches) == 0:
        return image_patch.simple_query(""Is the man that is to the left of the motorbike wearing a hat?"")
    motorbike_patch = motorbike_patches[0]
    return bool_to_yesno(man_patch.horizontal_center < motorbike_patch.horizontal_center and man_patch.simple_query(""Is the man wearing a hat?""))",0
226307,Are there any tables in the photo?,no,./data/gqa/../images/2369283.jpg,no,"def execute_command_226307(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""table""))",1
1944826,Who is reflected in the mirror?,a woman,./data/gqa/../images/2319086.jpg,girl,"def execute_command_1944826(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is reflected in the mirror?"")",0
6199650,What is the cooking utensil on top of the stove that is to the right of the woman called?,pot,./data/gqa/../images/2353040.jpg,pan,"def execute_command_6199650(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    woman_patch = woman_patches[0]
    cooking_patches = image_patch.find(""cooking utensil"")
    # Question assumes one cooking patch
    if len(cooking_patches) == 0:
        return image_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    for cooking_patch in cooking_patches:
        if cooking_patch.vertical_center == image_patch.height // 2: # assume stove is in the middle
            if cooking_patch.horizontal_center > woman_patch.horizontal_center:
                return cooking_patch.simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")
    return cooking_patches[0].simple_query(""What is the cooking utensil on top of the stove that is to the right of the woman called?"")",0
18435846,What is the color of the balloon that is to the right of the backpack?,purple,./data/gqa/../images/2321647.jpg,purple,"def execute_command_18435846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    backpack_patches = image_patch.find(""backpack"")
    # Question assumes one backpack patch
    if len(backpack_patches) == 0:
        # If no backpack is found, query the image directly
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    backpack_patch = backpack_patches[0]
    balloon_patches = image_patch.find(""balloon"")
    # Question assumes one balloon patch
    if len(balloon_patches) == 0:
        return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")
    for balloon_patch in balloon_patches:
        if balloon_patch.horizontal_center > backpack_patch.horizontal_center:
            return balloon_patch.simple_query(""What color is the balloon?"")
    # If no balloon is to the right of the backpack, query the image directly
    return image_patch.simple_query(""What is the color of the balloon that is to the right of the backpack?"")",1
8390894,Is the woman to the right of the man sitting on a sofa?,yes,./data/gqa/../images/2393431.jpg,yes,"def execute_command_8390894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    woman_patch = woman_patches[0]
    man_patches = image_patch.find(""man with sofa"")
    # Assume man is sitting on a sofa if it's in the query
    if len(man_patches) == 0:
        man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the man sitting on a sofa?"")
    man_patch = man_patches[0]
    if woman_patch.horizontal_center > man_patch.horizontal_center:
        return ""yes""
    return ""no""",1
18896007,Which side of the image is the pot on?,right,./data/gqa/../images/2359495.jpg,right,"def execute_command_18896007(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot is found, query the image directly
        return image_patch.simple_query(""Which side of the image is the pot on?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
19323898,Is that pillow on a couch?,no,./data/gqa/../images/2372130.jpg,no,"def execute_command_19323898(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is that pillow on a couch?"")
    pillow_patch = pillow_patches[0]
    return bool_to_yesno(pillow_patch.exists(""couch""))",1
1281034,Where are the trees?,in the background,./data/gqa/../images/2377817.jpg,hills,"def execute_command_1281034(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""trees"")
    # Question assumes only one patch of trees
    if len(tree_patches) == 0:
        # If no trees are found, query the image directly
        return image_patch.simple_query(""Where are the trees?"")
    if tree_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif tree_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center""",0
13515147,What is on the cow?,black and white,./data/gqa/../images/2397982.jpg,chain,"def execute_command_13515147(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""What is on the cow?"")
    cow_patch = cow_patches[0]
    object_patches = cow_patch.find(""object on cow"")
    # If no object on cow is found, query the image directly
    if len(object_patches) == 0:
        return image_patch.simple_query(""What is on the cow?"")
    return object_patches[0].simple_query(""What is on the cow?"")",0
91036716,What is the skater doing?,doing tricks,./data/gqa/../images/2408800.jpg,riding,"def execute_command_91036716(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the skater doing?"")",0
17791510,What is the person to the left of the boy carrying?,Error Ejecucion: 'float' object cannot be interpreted as an integer,./data/gqa/../images/2344827.jpg,handbag,"def execute_command_17791510(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy carrying"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy carrying is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the boy carrying?"")
    boy_patch = boy_patches[0]
    for x in range(image_patch.horizontal_center - 100, boy_patch.horizontal_center):
        left_patches = image_patch.find(""person"")
        for left_patch in left_patches:
            if left_patch.horizontal_center == x:
                return left_patch.simple_query(""What is the person to the left of the boy carrying?"")
    return image_patch.simple_query(""What is the person to the left of the boy carrying?"") # if no person is found to the left, query the image directly",0
13152020,Is the ground wet or dry?,dry,./data/gqa/../images/2404203.jpg,dry,"def execute_command_13152020(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""wet"", ""dry""])",1
19312096,"On which side is the purse, the left or the right?",right,./data/gqa/../images/2336491.jpg,right,"def execute_command_19312096(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    purse_patches = image_patch.find(""purse"")
    # Question assumes only one purse patch
    if len(purse_patches) == 0:
        # If no purse is found, query the image directly
        return image_patch.simple_query(""On which side is the purse, the left or the right?"")
    if purse_patches[0].horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
71002343,Are there breads in this photograph?,no,./data/gqa/../images/2386067.jpg,no,"def execute_command_71002343(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""breads""))",1
9113663,Do you see either any snow or sand that are white?,no,./data/gqa/../images/2416419.jpg,yes,"def execute_command_9113663(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_snow_white = image_patch.exists(""snow"") and image_patch.simple_query(""Is the snow white?"") == ""yes""
    is_sand_white = image_patch.exists(""sand"") and image_patch.simple_query(""Is the sand white?"") == ""yes""
    return bool_to_yesno(is_snow_white or is_sand_white)",0
10243612,Which place is it?,zoo,./data/gqa/../images/2394575.jpg,pen,"def execute_command_10243612(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",0
555062,What vegetable is to the left of the napkin?,tomato,./data/gqa/../images/2368244.jpg,onion,"def execute_command_555062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What vegetable is to the left of the napkin?"")",0
15599523,Is the dog on the right side?,yes,./data/gqa/../images/2345386.jpg,yes,"def execute_command_15599523(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Is the dog on the right side?"")
    dog_patch = dog_patches[0]
    image_center = image_patch.horizontal_center
    return bool_to_yesno(dog_patch.horizontal_center > image_center)",1
101019673,What is the man wearing?,sunglasses,./data/gqa/../images/2337631.jpg,hat,"def execute_command_101019673(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What are you wearing?"") # ask directly to get the clothing",0
333047,Do you see any men to the right of the orange tent?,no,./data/gqa/../images/2415736.jpg,no,"def execute_command_333047(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    men_patches = image_patch.find(""man"")
    # Question assumes only one orange patch
    orange_patches = image_patch.find(""orange tent"")
    if len(orange_patches) == 0:
        return image_patch.simple_query(""Do you see any men to the right of the orange tent?"")
    orange_patch = orange_patches[0]
    for man_patch in men_patches:
        if man_patch.horizontal_center > orange_patch.horizontal_center:
            return bool_to_yesno(True)
    return bool_to_yesno(False)",1
13907796,Is the shirt striped and green?,no,./data/gqa/../images/2371222.jpg,no,"def execute_command_13907796(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the shirt striped and green?""))
    shirt_patch = shirt_patches[0]
    return bool_to_yesno(shirt_patch.verify_property(""shirt"", ""striped"") and shirt_patch.simple_query(""What color is the shirt?"") == ""green"")",1
17207604,Are there either bottles or shelves?,yes,./data/gqa/../images/2322049.jpg,yes,"def execute_command_17207604(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_bottle = image_patch.exists(""bottle"")
    is_shelf = image_patch.exists(""shelf"")
    return bool_to_yesno(is_bottle or is_shelf)",1
1890653,What vehicle is to the right of the train on the left of the photo?,bus,./data/gqa/../images/2372833.jpg,train car,"def execute_command_1890653(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # crop the image to the left half
    left_half_patch = image_patch.crop(image_patch.horizontal_center - image_patch.width // 2, 0, image_patch.horizontal_center, image_patch.height)
    # ask about the right half
    return left_half_patch.simple_query(""What vehicle is to the right of the train?"")",0
7165131,Is that train engine small or large?,large,./data/gqa/../images/2369857.jpg,large,"def execute_command_7165131(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    train_patches = image_patch.find(""train engine"")
    # Question assumes only one train patch
    if len(train_patches) == 0:
        # If no train engine is found, query the image directly
        return image_patch.simple_query(""Is that train engine small or large?"")
    train_patch = train_patches[0]
    width = train_patch.width
    if width < image_patch.width / 2:
        return ""small""
    else:
        return ""large""",1
21049362,Where are the railroad tracks?,in the station,./data/gqa/../images/2394610.jpg,station,"def execute_command_21049362(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where are the railroad tracks?"")",0
6224352,What is the animal looking at?,dog,./data/gqa/../images/2360401.jpg,laptop,"def execute_command_6224352(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is looking at?"")",0
14367593,What are the children playing?,soccer,./data/gqa/../images/2333221.jpg,soccer,"def execute_command_14367593(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are the children playing?"")",1
598297,Are there combs or figurines in the picture?,no,./data/gqa/../images/2362150.jpg,no,"def execute_command_598297(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_comb = image_patch.exists(""comb"")
    is_figurine = image_patch.exists(""figurine"")
    return bool_to_yesno(is_comb or is_figurine)",1
16409127,What is the wire on?,track,./data/gqa/../images/2397884.jpg,pole,"def execute_command_16409127(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the wire on?"")",0
5841062,Is the tunnel small or large?,large,./data/gqa/../images/2341512.jpg,large,"def execute_command_5841062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tunnel_patches = image_patch.find(""tunnel"")
    # Question assumes only one tunnel patch
    if len(tunnel_patches) == 0:
        # If no tunnel is found, query the image directly
        return image_patch.simple_query(""Is the tunnel small or large?"")
    if tunnel_patches[0].simple_query(""Is the tunnel small or large?"") == ""small"":
        return ""small""
    else:
        return ""large""",1
17560468,Do you see trains or windows?,yes,./data/gqa/../images/2359451.jpg,yes,"def execute_command_17560468(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_window = image_patch.exists(""window"")
    return bool_to_yesno(is_train or is_window)",1
9321809,What is the person near the man wearing?,jeans,./data/gqa/../images/2388923.jpg,hat,"def execute_command_9321809(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the person near the man wearing?"")
    man_patch = man_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes one person patch
    if len(person_patches) == 0:
        return image_patch.simple_query(""What is the person near the man wearing?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""What are you wearing?"") # crop would include the clothing so keep it in the query",0
12352375,Is the vehicle that is sitting down black or blue?,black,./data/gqa/../images/2361646.jpg,black,"def execute_command_12352375(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle with person"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle with person is found, query the image directly
        return image_patch.simple_query(""Is the vehicle that is sitting down black or blue?"")
    vehicle_patch = vehicle_patches[0]
    return vehicle_patch.best_text_match([""black"", ""blue""])",1
7949280,Is the metal trash can to the left or to the right of the white thing near the shower curtain?,left,./data/gqa/../images/2348437.jpg,left,"def execute_command_7949280(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    metal_trash_can_patches = image_patch.find(""metal trash can"")
    # Question assumes only one metal trash can patch
    if len(metal_trash_can_patches) == 0:
        # If no metal trash can is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    metal_trash_can_patch = metal_trash_can_patches[0]
    white_patches = image_patch.find(""white thing near shower curtain"")
    # Question assumes only one white patch
    if len(white_patches) == 0:
        # If no white thing near shower curtain is found, query the image directly
        return image_patch.simple_query(""Is the metal trash can to the left or to the right of the white thing near the shower curtain?"")
    white_patch = white_patches[0]
    if metal_trash_can_patch.horizontal_center < white_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
5800248,Is it outdoors?,yes,./data/gqa/../images/150517.jpg,no,"def execute_command_5800248(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))",0
4604785,Does the pizza slice to the left of the pizza have large size?,yes,./data/gqa/../images/2344801.jpg,yes,"def execute_command_4604785(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pizza_patches = image_patch.find(""pizza"")
    # Question assumes at least two pizza patches
    if len(pizza_patches) < 2:
        # If less than two pizzas are found, query the image directly
        return image_patch.simple_query(""Does the pizza slice to the left of the pizza have large size?"")
    left_patch = pizza_patches[0]
    right_patch = pizza_patches[1]
    return bool_to_yesno(left_patch.simple_query(""Is the pizza have large size?""))",1
15185845,What's the man wearing?,suit,./data/gqa/../images/2348528.jpg,hat,"def execute_command_15185845(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What's the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What are you wearing?"") # ask directly to get the clothing",0
2282232,Where is the snow?,in the mountains,./data/gqa/../images/2394560.jpg,hillside,"def execute_command_2282232(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snow?"")",0
7889197,Who is wearing a shirt?,nobody,./data/gqa/../images/2329334.jpg,man,"def execute_command_7889197(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candidates = [""man"", ""woman"", ""boy"", ""girl""]
    for candidate in candidates:
        if image_patch.exists(candidate) and image_patch.exists(""shirt""):
            return image_patch.simple_query(""Who is wearing a shirt?"")
    return ""nobody""",0
11292587,Are there either any blankets or pictures in the photograph?,yes,./data/gqa/../images/2391808.jpg,no,"def execute_command_11292587(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_blanket = image_patch.exists(""blanket"")
    is_picture = image_patch.exists(""picture"")
    return bool_to_yesno(is_blanket or is_picture)",0
154682,Where does the bird stand on?,ground,./data/gqa/../images/2357415.jpg,ground,"def execute_command_154682(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""Where does the bird stand on?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""Where does the bird stand on?"")",1
10435315,Is the man holding a racket?,no,./data/gqa/../images/2407451.jpg,no,"def execute_command_10435315(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man holding a racket"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man holding a racket is found, query the image directly
        return image_patch.simple_query(""Is the man holding a racket?"")
    return bool_to_yesno(man_patches[0].exists(""racket""))",1
121035887,Do the man shorts have white color?,yes,./data/gqa/../images/2366019.jpg,yes,"def execute_command_121035887(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Do the man shorts have white color?"")
    man_patch = man_patches[0]
    shorts_patches = man_patch.find(""shorts"")
    # Question assumes one shorts patch
    if len(shorts_patches) == 0:
        return ""no""
    return bool_to_yesno(shorts_patches[0].verify_property(""pifs"", ""has_white"")) # pifs stands for ""patch image feature space""",1
10770422,What kind of vehicle is to the left of the man that is to the left of the cows?,van,./data/gqa/../images/2349511.jpg,van,"def execute_command_10770422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    man_patch = man_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    for vehicle_patch in vehicle_patches:
        cow_patches = image_patch.find(""cow"")
        # Question assumes only one cow patch
        if len(cow_patches) == 0:
            return image_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
        if cow_patches[0].horizontal_center > man_patch.horizontal_center:
            return vehicle_patch.simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")
    # If no vehicle is found to the left of the man, query directly
    return vehicle_patches[0].simple_query(""What kind of vehicle is to the left of the man that is to the left of the cows?"")",1
19659501,What is the color of the umbrella the bird is on?,orange,./data/gqa/../images/2406733.jpg,light brown,"def execute_command_19659501(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the umbrella the bird is on?"")
    bird_patch = bird_patches[0]
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return bird_patch.simple_query(""What is the color of the umbrella the bird is on?"")",0
10595217,Where is the grass?,on the ground,./data/gqa/../images/2404396.jpg,yard,"def execute_command_10595217(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the grass?"")",0
14803743,Which kind of clothing is black?,pants,./data/gqa/../images/2318376.jpg,pants,"def execute_command_14803743(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.best_text_match([""pump"", ""hat"", ""coat"", ""jacket"", ""shirt"", ""pants"", ""shoes""])
    # If no black clothing is found, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"")",1
19743238,Is the man on the right side?,no,./data/gqa/../images/1592305.jpg,no,"def execute_command_19743238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man on the right side?"")
    man_patch = man_patches[0]
    image_center = image_patch.horizontal_center
    return bool_to_yesno(man_patch.horizontal_center >= image_center)",1
3965204,Are the mountains covered with snow?,yes,./data/gqa/../images/2386293.jpg,yes,"def execute_command_3965204(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""mountain with snow""))",1
141024710,Are there both windows and cars in the picture?,no,./data/gqa/../images/2363539.jpg,yes,"def execute_command_141024710(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_window and is_car)",0
6481635,What color do you think the shirt is?,red,./data/gqa/../images/2406865.jpg,orange,"def execute_command_6481635(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What color do you think the shirt is?"")
    return shirt_patches[0].best_text_match([""red"", ""blue"", ""white"", ""green"", ""black"", ""gray""])",0
3623367,What's he doing?,sleeping,./data/gqa/../images/2407473.jpg,lying,"def execute_command_3623367(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's he doing?"")",0
15634950,Where is the giraffe in front of the hay eating from?,left,./data/gqa/../images/2394254.jpg,tree,"def execute_command_15634950(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    giraffe_patch = giraffe_patches[0]
    hay_patches = image_patch.find(""hay bale"")
    # Question assumes one hay patch
    if len(hay_patches) == 0:
        return image_patch.simple_query(""Where is the giraffe in front of the hay eating from?"")
    hay_patch = hay_patches[0]
    if giraffe_patch.horizontal_center < hay_patch.horizontal_center:
        return ""left""
    elif giraffe_patch.horizontal_center > hay_patch.horizontal_center:
        return ""right""
    else:
        return ""the hay"" # if the giraffe is exactly in front of the hay, say so",0
16644500,What animal is the log pulled by?,elephant,./data/gqa/../images/2368283.jpg,elephants,"def execute_command_16644500(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is the log pulled by?"")
    for animal_patch in animal_patches:
        if animal_patch.exists(""horses"") or animal_patch.exists(""horse""):
            return ""horses""
        elif animal_patch.exists(""elephant""):
            return ""elephant""
        else:
            return animal_patch.simple_query(""What animal is the log pulled by?"") # crop would include the log so keep it in the query",0
3202108,Which side is the car on?,right,./data/gqa/../images/2412878.jpg,right,"def execute_command_3202108(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""Which side is the car on?"")
    car_patch = car_patches[0]
    if car_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
10137201,Are the papers in the bottom part of the picture?,no,./data/gqa/../images/2335027.jpg,no,"def execute_command_10137201(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        # If no paper is found, query the image directly
        return image_patch.simple_query(""Are the papers in the bottom part of the picture?"")
    if paper_patches[0].vertical_center < image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",1
5325670,Is the boy to the left or to the right of the person that is on the left?,right,./data/gqa/../images/2378586.jpg,right,"def execute_command_5325670(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""Is the boy to the left or to the right of the person that is on the left?"")
    boy_patch = boy_patches[0]
    left_patches = image_patch.find(""person with left orientation"")
    # Assume that a person with left orientation is on the left
    if len(left_patches) == 0:
        return ""right""
    left_patch = left_patches[0]
    if boy_patch.horizontal_center < left_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
8438091,The picture is what color?,black and white,./data/gqa/../images/2406323.jpg,white,"def execute_command_8438091(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What color is the picture?"")",0
4325939,On which side of the photo is the banana?,left,./data/gqa/../images/2326465.jpg,left,"def execute_command_4325939(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    banana_patches = image_patch.find(""banana"")
    # Question assumes only one banana patch
    if len(banana_patches) == 0:
        # If no banana is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the banana?"")
    banana_patch = banana_patches[0]
    if banana_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
1425189,What is the name of the brown piece of furniture?,table,./data/gqa/../images/2404639.jpg,table,"def execute_command_1425189(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    brown_patches = image_patch.find(""brown piece of furniture"")
    # Question assumes only one brown patch
    if len(brown_patches) == 0:
        # If no brown piece of furniture is found, query the image directly
        return image_patch.simple_query(""What is the name of the brown piece of furniture?"")
    return brown_patches[0].simple_query(""What is the name of the brown piece of furniture?"") # crop would include the brown color so keep it in the query",1
5119962,Is the man to the right of glasses?,no,./data/gqa/../images/2407415.jpg,no,"def execute_command_5119962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the right of glasses?"")
    man_patch = man_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes one glasses patch
    if len(glasses_patches) == 0:
        return ""no""
    for glasses_patch in glasses_patches:
        if glasses_patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""yes""",1
16523418,Is the toilet lid down or up?,up,./data/gqa/../images/2320085.jpg,up,"def execute_command_16523418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""Is the toilet lid down or up?"")
    toilet_patch = toilet_patches[0]
    return toilet_patch.simple_query(""Is the lid down or up?"")",1
6522554,Which kind of device does the man hold?,phone,./data/gqa/../images/2374402.jpg,cell phone,"def execute_command_6522554(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    man_patch = man_patches[0]
    device_patches = man_patch.find(""device"")
    # Question assumes one device patch
    if len(device_patches) == 0:
        return image_patch.simple_query(""Which kind of device does the man hold?"")
    return device_patches[0].best_text_match([""phone"", ""phone with keyboard"", ""phone with earbuds"", ""watch"", ""pda""])",0
870619,What is the device to the left of the person that is to the left of the television?,computer,./data/gqa/../images/2370929.jpg,screen,"def execute_command_870619(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains multiple relations, so ask step by step
    left_of_tv_patches = image_patch.find(""television"")
    # Question assumes only one TV patch
    if len(left_of_tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    left_of_tv_patch = left_of_tv_patches[0]
    person_patches = left_of_tv_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return left_of_tv_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    person_patch = person_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return left_of_tv_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    for device_patch in device_patches:
        if device_patch.horizontal_center < person_patch.horizontal_center:
            return device_patch.simple_query(""What is the device to the left of the person that is to the left of the television?"")
    return device_patches[0].simple_query(""What is the device to the left of the person that is to the left of the television?"")",0
12713794,Does the woman to the left of the man wear a necklace?,yes,./data/gqa/../images/2403230.jpg,yes,"def execute_command_12713794(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes at least one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    man_patches = image_patch.find(""man"")
    # Question assumes exactly one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the woman to the left of the man wear a necklace?"")
    if len(man_patches) > 1:
        # If multiple men are found, pick the first one
        man_patch = man_patches[0]
    else:
        man_patch = man_patches[0]
    for woman_patch in woman_patches:
        if woman_patch.horizontal_center < man_patch.horizontal_center:
            return bool_to_yesno(woman_patch.verify_property(""woman"", ""wearing a necklace""))
    return ""no""",1
824070,What is the man doing?,talking,./data/gqa/../images/2399195.jpg,talking,"def execute_command_824070(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man doing?"")
    man_patch = man_patches[0]
    if man_patch.exists(""biking""):
        return man_patch.simple_query(""What is the man doing?"")
    else:
        return man_patch.simple_query(""What is the man doing?"")",1
11593733,Which kind of furniture is right to the pillow?,bed,./data/gqa/../images/2347710.jpg,bed,"def execute_command_11593733(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    pillow_patch = pillow_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes one furniture patch to the right of the pillow
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > pillow_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is right to the pillow?"")
    # If no furniture is to the right of the pillow, query the image directly
    return image_patch.simple_query(""Which kind of furniture is right to the pillow?"")",1
3357821,Does the dog to the left of the other dog look small or large?,small,./data/gqa/../images/2380239.jpg,small,"def execute_command_3357821(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes at least two dog patches
    if len(dog_patches) < 2:
        # If less than two dogs are found, query the image directly
        return image_patch.simple_query(""Does the dog to the left of the other dog look small or large?"")
    left_dog_patch = dog_patches[0]
    right_dog_patch = dog_patches[1]
    return left_dog_patch.simple_query(""Is the dog small or large?"")",1
338026,Are the white candles short or tall?,short,./data/gqa/../images/2369595.jpg,tall,"def execute_command_338026(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candle_patches = image_patch.find(""candle"")
    # Question assumes only white candles
    white_candle_patches = [patch for patch in candle_patches if patch.best_text_match([""blue"", ""white""]) == ""white""]
    # Question assumes only one white candle patch
    if len(white_candle_patches) == 0:
        # If no white candle is found, query the image directly
        return image_patch.simple_query(""Are the white candles short or tall?"")
    if white_candle_patches[0].height < image_patch.height / 2:
        return ""short""
    else:
        return ""tall""",0
15346232,What kind of fruit is the girl holding?,banana,./data/gqa/../images/2345601.jpg,banana,"def execute_command_15346232(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl holding fruit"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        # If no girl holding fruit is found, query the image directly
        return image_patch.simple_query(""What kind of fruit is the girl holding?"")
    girl_patch = girl_patches[0]
    return girl_patch.simple_query(""What kind of fruit is the girl holding?"")",1
13553098,"On which side of the photo is the yellow vehicle, the right or the left?",right,./data/gqa/../images/2327453.jpg,right,"def execute_command_13553098(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""On which side of the photo is the yellow vehicle, the right or the left?"")
    vehicle_patch = vehicle_patches[0]
    if vehicle_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
81030271,Is the gray car to the right or to the left of the cart?,left,./data/gqa/../images/713056.jpg,left,"def execute_command_81030271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    gray_car_patch = gray_car_patches[0]
    cart_patches = image_patch.find(""cart"")
    # Question assumes one cart patch
    if len(cart_patches) == 0:
        return image_patch.simple_query(""Is the gray car to the right or to the left of the cart?"")
    cart_patch = cart_patches[0]
    if gray_car_patch.horizontal_center > cart_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
1827581,What do you think is the cooking utensil that is to the right of the canister made of chrome?,pan,./data/gqa/../images/2321180.jpg,kettle,"def execute_command_1827581(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What cooking utensil is to the right of the canister made of chrome?"")",0
8240699,What animal is in front of the bird?,elephant,./data/gqa/../images/2331215.jpg,elephant,"def execute_command_8240699(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What animal is in front of the bird?"")",1
10105081,Is the fence white or green?,white,./data/gqa/../images/2375234.jpg,white,"def execute_command_10105081(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence white or green?"")
    return fence_patches[0].best_text_match([""green"", ""white""])",1
13613689,Is there a train or a fence in the picture?,yes,./data/gqa/../images/1592228.jpg,yes,"def execute_command_13613689(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_train = image_patch.exists(""train"")
    is_fence = image_patch.exists(""fence"")
    return bool_to_yesno(is_train or is_fence)",1
10662521,What is the bottle made of?,plastic,./data/gqa/../images/2316905.jpg,plastic,"def execute_command_10662521(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""What is the bottle made of?"")
    return bottle_patches[0].simple_query(""What is the bottle made of?"")",1
1152309,Which kind of fruit is on the plate?,oranges,./data/gqa/../images/2376542.jpg,orange,"def execute_command_1152309(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of fruit is on the plate?"")",0
16701575,What device is to the right of the cake?,television,./data/gqa/../images/2357683.jpg,cell phone,"def execute_command_16701575(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cake_patches = image_patch.find(""cake"")
    # Question assumes only one cake patch
    if len(cake_patches) == 0:
        # If no cake is found, query the image directly
        return image_patch.simple_query(""What device is to the right of the cake?"")
    cake_patch = cake_patches[0]
    device_patches = image_patch.find(""device"")
    # Question assumes one device patch
    if len(device_patches) == 0:
        return ""n/a""
    for device_patch in device_patches:
        if device_patch.horizontal_center > cake_patch.horizontal_center:
            return device_patch.simple_query(""What device is to the right of the cake?"")
    return ""n/a"" # if no device is to the right of the cake, return n/a",0
6572516,What material is the ceiling?,glass,./data/gqa/../images/2388570.jpg,glass,"def execute_command_6572516(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What material is the ceiling?"")",1
11213633,Are there both magazines and umbrellas?,no,./data/gqa/../images/2326769.jpg,no,"def execute_command_11213633(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_magazine = image_patch.exists(""magazine"")
    is_umbrella = image_patch.exists(""umbrella"")
    return bool_to_yesno(is_magazine and is_umbrella)",1
8606777,What is the color of the egg in the middle of the picture?,white,./data/gqa/../images/2391115.jpg,yellow,"def execute_command_8606777(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    egg_patches = image_patch.find(""egg"")
    # Question assumes only one egg patch
    if len(egg_patches) == 0:
        # If no egg is found, query the image directly
        return image_patch.simple_query(""What is the color of the egg in the middle of the picture?"")
    middle_patch = image_patch
    for egg_patch in egg_patches:
        if abs(egg_patch.horizontal_center - image_patch.horizontal_center) < abs(middle_patch.horizontal_center - image_patch.horizontal_center):
            middle_patch = egg_patch
    return middle_patch.simple_query(""What is the color of the egg in the middle of the picture?"")",0
14371534,Are the gold pans on the right part or on the left?,right,./data/gqa/../images/2355898.jpg,right,"def execute_command_14371534(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""Are the gold pans on the right part or on the left?"")
    pan_patch = pan_patches[0]
    if pan_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
16538076,What does the man that is not tall wear?,shirt,./data/gqa/../images/2412554.jpg,shirt,"def execute_command_16538076(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What does the man that is not tall wear?"")
    for man_patch in man_patches:
        if not man_patch.verify_property(""man"", ""tall""):
            return man_patch.simple_query(""What are you wearing?"")
    # If all men are tall, query the image directly
    return image_patch.simple_query(""What does the man that is not tall wear?"")",1
5483644,"On which side is the woman, the left or the right?",right,./data/gqa/../images/2350119.jpg,right,"def execute_command_5483644(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""On which side is the woman, the left or the right?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
181041779,What is the animal in this photograph?,cat,./data/gqa/../images/2367010.jpg,cat,"def execute_command_181041779(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the animal in this photograph?"")",1
1290926,Are there either any life vests or flags?,no,./data/gqa/../images/2408133.jpg,no,"def execute_command_1290926(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_life_vest = image_patch.exists(""life vest"")
    is_flag = image_patch.exists(""flag"")
    return bool_to_yesno(is_life_vest or is_flag)",1
18273738,Do you see a cup?,yes,./data/gqa/../images/2360431.jpg,yes,"def execute_command_18273738(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""cup""))",1
4211922,Who is sitting on the table?,people,./data/gqa/../images/2356402.jpg,man,"def execute_command_4211922(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is sitting on the table?"")",0
6587526,What is the color of the girl to the left of the other girl?,brown,./data/gqa/../images/23.jpg,brunette,"def execute_command_6587526(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes at least two girl patches
    if len(girl_patches) < 2:
        # If less than two girls are found, query the image directly
        return image_patch.simple_query(""What is the color of the girl to the left of the other girl?"")
    left_girl_patch = girl_patches[0]
    right_girl_patch = girl_patches[1]
    return left_girl_patch.simple_query(""What is your own hair color?"") # crop would include the hair so keep it in the query",0
6599090,What is the person to the right of the car holding?,tennis racket,./data/gqa/../images/2325132.jpg,racket,"def execute_command_6599090(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    car_patch = car_patches[0]
    person_patches = image_patch.find(""person"")
    # Question assumes one person patch to the right of the car
    if len(person_patches) == 0:
        return image_patch.simple_query(""What is the person to the right of the car holding?"")
    for person_patch in person_patches:
        if person_patch.horizontal_center > car_patch.horizontal_center:
            return person_patch.simple_query(""What are you holding?"")
    return image_patch.simple_query(""What is the person to the right of the car holding?"") # if no person to the right of the car, query the image directly",0
1174895,What is the vehicle in the parking lot?,van,./data/gqa/../images/2414806.jpg,truck,"def execute_command_1174895(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What is the vehicle in the parking lot?"")
    return vehicle_patches[0].simple_query(""What type of vehicle is it?"") # crop would include the parking lot so keep it in the query",0
14755158,Who is the woman in front of?,the bride,./data/gqa/../images/2317677.jpg,child,"def execute_command_14755158(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Who is the woman in front of?"")
    woman_patch = woman_patches[0]
    object_patches = image_patch.find(""bicycle"") or image_patch.find(""car"") or image_patch.find(""horse"") or image_patch.find(""bus"") or image_patch.find(""train"")
    # Question assumes one object patch
    if len(object_patches) == 0:
        return image_patch.simple_query(""Who is the woman in front of?"")
    object_patch = object_patches[0]
    return object_patch.simple_query(""Who is the woman in front of?"")",0
18349161,Where does the cow that is standing stand?,left,./data/gqa/../images/2339240.jpg,ground,"def execute_command_18349161(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow"")
    # Question assumes only one cow patch
    if len(cow_patches) == 0:
        # If no cow is found, query the image directly
        return image_patch.simple_query(""Where does the cow that is standing stand?"")
    cow_patch = cow_patches[0]
    if cow_patch.vertical_center < image_patch.vertical_center:
        return ""left""
    elif cow_patch.vertical_center > image_patch.vertical_center:
        return ""right""
    else:
        return ""center""",0
7472884,On which side is the tap?,right,./data/gqa/../images/2341053.jpg,left,"def execute_command_7472884(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""On which side is the tap?"")",0
111051831,On which side of the image is the cabinet?,left,./data/gqa/../images/2413467.jpg,left,"def execute_command_111051831(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cabinet_patches = image_patch.find(""cabinet"")
    # Question assumes only one cabinet patch
    if len(cabinet_patches) == 0:
        # If no cabinet is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the cabinet?"")
    cabinet_patch = cabinet_patches[0]
    if cabinet_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
3590007,On which side of the image is the fork?,left,./data/gqa/../images/1591898.jpg,left,"def execute_command_3590007(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fork_patches = image_patch.find(""fork"")
    # Question assumes only one fork patch
    if len(fork_patches) == 0:
        # If no fork is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fork?"")
    fork_patch = fork_patches[0]
    if fork_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
2409726,Do you see men to the right of the bag the person is carrying?,no,./data/gqa/../images/2409472.jpg,no,"def execute_command_2409726(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Do you see men to the right of the bag the person is carrying?"")
    person_patch = person_patches[0]
    bag_patches = image_patch.find(""bag"")
    # Question assumes one bag patch
    if len(bag_patches) == 0:
        return ""no""
    bag_patch = bag_patches[0]
    for man_patch in image_patch.find(""man""):
        if man_patch.horizontal_center > bag_patch.horizontal_center and man_patch.horizontal_center < image_patch.horizontal_center * 2:
            return ""yes""
    return ""no""",1
577862,Are the artwork and the computer desk made of the same material?,no,./data/gqa/../images/2405119.jpg,no,"def execute_command_577862(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    artwork_patches = image_patch.find(""artwork"")
    # Question assumes only one artwork patch
    if len(artwork_patches) == 0:
        # If no artwork is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    artwork_patch = artwork_patches[0]
    desk_patches = image_patch.find(""computer desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""Are the artwork and the computer desk made of the same material?"")
    desk_patch = desk_patches[0]
    return bool_to_yesno(artwork_patch.verify_property(""artwork"", desk_patch.simple_query(""What material is the computer desk made of?"")))",1
14298125,Who is playing Wii?,two men,./data/gqa/../images/2369899.jpg,guy,"def execute_command_14298125(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing Wii?"")",0
9382689,What's the floor made of?,wood,./data/gqa/../images/2322855.jpg,wood,"def execute_command_9382689(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the floor made of?"")",1
12889614,Who is wearing the dress?,woman,./data/gqa/../images/2397488.jpg,woman,"def execute_command_12889614(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    man_patches = image_patch.find(""man"")
    # Question assumes at least one woman or man patch
    if len(woman_patches) == 0 and len(man_patches) == 0:
        # If no woman or man is found, query the image directly
        return image_patch.simple_query(""Who is wearing the dress?"")
    if len(woman_patches) == 0:
        return man_patches[0].simple_query(""Who is wearing the dress?"")
    elif len(man_patches) == 0:
        return woman_patches[0].simple_query(""Who is wearing the dress?"")
    else:
        for woman_patch in woman_patches:
            for man_patch in man_patches:
                if woman_patch.simple_query(""Is the woman wearing the dress?"") == ""yes"":
                    return woman_patch.simple_query(""Who is wearing the dress?"")
                elif man_patch.simple_query(""Is the man wearing the dress?"") == ""yes"":
                    return man_patch.simple_query(""Who is wearing the dress?"")
        # If no one is wearing the dress, query the image directly
        return image_patch.simple_query(""Who is wearing the dress?"")",1
15127108,Does the tea pot above the receipt look short and white?,yes,./data/gqa/../images/2390938.jpg,no,"def execute_command_15127108(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tea_pot_patches = image_patch.find(""tea pot"")
    # Question assumes only one tea pot patch
    if len(tea_pot_patches) == 0:
        # If no tea pot is found, query the image directly
        return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")
    tea_pot_patch = tea_pot_patches[0]
    receipt_patches = image_patch.find(""receipt"")
    # Question assumes one receipt patch
    if len(receipt_patches) == 0:
        return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")
    for receipt_patch in receipt_patches:
        for other_patch in image_patch.find(""tea pot""):
            if other_patch.horizontal_center > receipt_patch.horizontal_center:
                return bool_to_yesno(tea_pot_patch.simple_query(""Is it short and white?"")) # crop would include the receipt so keep it in the query
    # If no tea pot is above the receipt, query the image directly
    return image_patch.simple_query(""Does the tea pot above the receipt look short and white?"")",0
15632653,Which room is it?,office,./data/gqa/../images/2351404.jpg,office,"def execute_command_15632653(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
485962,Which kind of clothing is black?,pants,./data/gqa/../images/2331832.jpg,pants,"def execute_command_485962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.simple_query(""Which kind of clothing is black?"")
    # If no black clothing is found, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"")",1
490992,Is the fence on the left side or on the right of the picture?,left,./data/gqa/../images/2395.jpg,left,"def execute_command_490992(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""Is the fence on the left side or on the right of the picture?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
17133284,Do the mountains look rocky?,no,./data/gqa/../images/2347513.jpg,yes,"def execute_command_17133284(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""mountains"", ""rocky""))",0
17573742,Is the woman to the right of the camera wearing a coat?,yes,./data/gqa/../images/2392625.jpg,yes,"def execute_command_17573742(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the right of the camera wearing a coat?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center > image_patch.horizontal_center:
        return bool_to_yesno(woman_patch.verify_property(""woman"", ""coat""))
    return ""no""",1
3395780,Is the vehicle to the left of the parking meter covered in rain?,yes,./data/gqa/../images/2402775.jpg,yes,"def execute_command_3395780(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Is the vehicle to the left of the parking meter covered in rain?"")
    vehicle_patch = vehicle_patches[0]
    if len(image_patch.find(""parking meter"")) == 0:
        # If no parking meter is found, query the image directly
        return bool_to_yesno(vehicle_patch.simple_query(""Is the vehicle covered in rain?""))
    parking_meter_patches = image_patch.find(""parking meter"")
    for parking_meter_patch in parking_meter_patches:
        if parking_meter_patch.horizontal_center > vehicle_patch.horizontal_center:
            return bool_to_yesno(vehicle_patch.verify_property(""vehicle"", ""rain""))
    return ""no""",1
1542668,Is there a black laptop or desk?,yes,./data/gqa/../images/2318905.jpg,yes,"def execute_command_1542668(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_black_laptop = image_patch.exists(""black laptop"")
    is_desk = image_patch.exists(""desk"")
    return bool_to_yesno(is_black_laptop or is_desk)",1
1655442,What type of food is to the right of the waffles that are to the right of the person?,bacon,./data/gqa/../images/2410436.jpg,egg,"def execute_command_1655442(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # first find waffles to the right of the person
    waffles_patches = image_patch.find(""waffles"")
    # Question assumes only one patch of waffles to the right of the person
    if len(waffles_patches) == 0:
        # If no waffles are found to the right of the person, query the image directly
        return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    right_of_waffles_patches = image_patch.find(""food"")
    # Question assumes only one patch of food to the right of the waffles
    if len(right_of_waffles_patches) == 0:
        return right_of_waffles_patches[0].simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    for right_of_waffles_patch in right_of_waffles_patches:
        if right_of_waffles_patch.horizontal_center > waffles_patches[0].horizontal_center:
            return right_of_waffles_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")
    # If no food is found to the right of the waffles, query the image directly
    return image_patch.simple_query(""What type of food is to the right of the waffles that are to the right of the person?"")",0
395290,How large is the bag?,large,./data/gqa/../images/2368361.jpg,large,"def execute_command_395290(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""How large is the bag?"")
    bag_patch = bag_patches[0]
    size = bag_patch.simple_query(""What is the size of the bag?"")
    return size",1
16138893,Are there both motorcycles and cars in this scene?,no,./data/gqa/../images/2342301.jpg,yes,"def execute_command_16138893(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_motorcycle = image_patch.exists(""motorcycle"")
    is_car = image_patch.exists(""car"")
    return bool_to_yesno(is_motorcycle and is_car)",0
1462176,Who is wearing shorts?,the man,./data/gqa/../images/2323323.jpg,man,"def execute_command_1462176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing shorts?"")
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing shorts?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing shorts?"")
    # If no person is wearing shorts, query the image directly
    return image_patch.simple_query(""Who is wearing shorts?"")",1
171032184,What hangs from the windows?,curtains,./data/gqa/../images/2377805.jpg,curtains,"def execute_command_171032184(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What hangs from the windows?"")",1
15962394,Are there both spoons and plates in the image?,yes,./data/gqa/../images/2337344.jpg,yes,"def execute_command_15962394(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_spoon = image_patch.exists(""spoon"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_spoon and is_plate)",1
16184773,What is in front of the giraffe that the tree is behind of?,"Error Codigo: unterminated string literal (detected at line 4) (Codex, line 4)",./data/gqa/../images/2356100.jpg,bush,"def execute_command_16184773(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
This query requires a bit more complex reasoning. We first need to find the giraffe and the tree, then determine what is in front of the giraffe and what the tree is behind. We can then ask about the object that is in front of the giraffe and behind the tree.

Here's the code:

```python
def execute_command(image)->str:
    image_patch = ImagePatch(image)
    giraffe_patches = image_patch.find(""giraffe"")
    # Question assumes only one giraffe patch
    if len(giraffe_patches) == 0:
        # If no giraffe is found, query the image directly
        return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    giraffe_patch = giraffe_patches[0]
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    tree_patch = tree_patches[0]
    # find what is in front of the giraffe
    in_front_of_giraffe_patches = image_patch.find(""bikes"") # assume bike is what is in front of giraffe
    if len(in_front_of_giraffe_patches) == 0:
        return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    in_front_of_giraffe = in_front_of_giraffe_patches[0]
    # find what the tree is behind
    behind_tree_patches = image_patch.find(""cars"") # assume car is what the tree is behind
    if len(behind_tree_patches) == 0:
        return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
    behind_tree = behind_tree_patches[0]
    # ask directly
    return image_patch.simple_query(""What is in front of the giraffe that the tree is behind of?"")
```",0
8197176,What color is the jacket that the man wears?,red,./data/gqa/../images/2384012.jpg,red,"def execute_command_8197176(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What color is the jacket that the man wears?"")
    man_patch = man_patches[0]
    jacket_patches = man_patch.find(""jacket"")
    # Question assumes one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return man_patch.simple_query(""What color is the jacket that the man wears?"")
    return jacket_patches[0].best_text_match([""blue"", ""red"", ""green"", ""black"", ""white"", ""brown"", ""gray""])",1
3440931,What are that pieces of furniture called?,cabinets,./data/gqa/../images/2365148.jpg,shelves,"def execute_command_3440931(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What are those pieces of furniture called?"")",0
337924,What is the fruit that is to the left of the chair?,cherry,./data/gqa/../images/2369595.jpg,cherry,"def execute_command_337924(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the fruit that is to the left of the chair?"")",1
16208211,What do you think are the bowls on?,the stove,./data/gqa/../images/2338510.jpg,microwave,"def execute_command_16208211(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes only one bowl patch
    if len(bowl_patches) == 0:
        # If no bowl is found, query the image directly
        return image_patch.simple_query(""What do you think are the bowls on?"")
    return bowl_patches[0].simple_query(""What am I on?"") # crop would include the bowl so keep it in the query",0
18330260,Is the sky above the trees open and clear?,no,./data/gqa/../images/2392331.jpg,yes,"def execute_command_18330260(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_open_and_clear = False
    # first check if there are any trees
    if image_patch.exists(""trees""):
        # if there are trees, check the sky
        is_open_and_clear = image_patch.simple_query(""Is the sky open and clear?"")
    return bool_to_yesno(is_open_and_clear)",0
14119691,Does the squirrel to the right of the stuffed dog look white?,no,./data/gqa/../images/2334270.jpg,no,"def execute_command_14119691(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""stuffed dog"")
    # Question assumes one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")
    dog_patch = dog_patches[0]
    squirrel_patches = image_patch.find(""squirrel"")
    # Question assumes one squirrel patch
    if len(squirrel_patches) == 0:
        return ""no""
    for squirrel_patch in squirrel_patches:
        if squirrel_patch.horizontal_center > dog_patch.horizontal_center:
            return bool_to_yesno(squirrel_patch.verify_property(""squirrel"", ""white""))
    # If no squirrel is to the right of the dog, query the image directly
    return image_patch.simple_query(""Does the squirrel to the right of the stuffed dog look white?"")",1
18437694,Does the clock to the right of the statue have gold color and tiny size?,no,./data/gqa/../images/2380137.jpg,no,"def execute_command_18437694(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch to the right of the statue
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return bool_to_yesno(image_patch.exists(""clock with gold and tiny size""))
    for clock_patch in clock_patches:
        statue_patches = image_patch.find(""statue"")
        for statue_patch in statue_patches:
            if statue_patch.horizontal_center > clock_patch.horizontal_center:
                return bool_to_yesno(clock_patch.verify_property(""clock"", ""gold"") and clock_patch.simple_query(""What size is the clock?"") == ""tiny"")
    return ""no"" # if no clock to the right of the statue, return False",1
1252960,Where was the photo taken?,in the woods,./data/gqa/../images/2417745.jpg,pavement,"def execute_command_1252960(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where was the photo taken?"")",0
17454895,Is there a frisbee on the grass?,yes,./data/gqa/../images/2403570.jpg,yes,"def execute_command_17454895(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    grass_patches = image_patch.find(""grass"")
    # Question assumes at least one grass patch
    if len(grass_patches) == 0:
        # If no grass is found, query the image directly
        return image_patch.simple_query(""Is there a frisbee on the grass?"")
    grass_patch = grass_patches[0]
    frisbee_patches = image_patch.find(""frisbee"")
    # Question assumes at most one frisbee patch
    if len(frisbee_patches) == 0:
        return ""no""
    frisbee_patch = frisbee_patches[0]
    if frisbee_patch.vertical_center > grass_patch.vertical_center:
        return ""no""
    return ""yes""",1
13180513,Are there either cakes or containers in the photo?,yes,./data/gqa/../images/2320293.jpg,no,"def execute_command_13180513(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_cake = image_patch.exists(""cake"")
    is_container = image_patch.exists(""container"")
    return bool_to_yesno(is_cake or is_container)",0
479962,Are there black cars or motorcycles?,yes,./data/gqa/../images/2401325.jpg,yes,"def execute_command_479962(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_black_car = image_patch.exists(""black car"")
    is_motorcycle = image_patch.exists(""motorcycle"")
    return bool_to_yesno(is_black_car or is_motorcycle)",1
19927240,Is the blue car behind or in front of the vehicle to the left of the police officer?,behind,./data/gqa/../images/2382358.jpg,behind,"def execute_command_19927240(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    blue_car_patches = image_patch.find(""blue car"")
    # Question assumes only one blue car patch
    if len(blue_car_patches) == 0:
        # If no blue car is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    blue_car_patch = blue_car_patches[0]
    police_officer_patches = image_patch.find(""police officer"")
    # Question assumes only one police officer patch
    if len(police_officer_patches) == 0:
        # If no police officer is found, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    police_officer_patch = police_officer_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch to the left of the police officer
    vehicle_patches_left_of_police_officer = [patch for patch in vehicle_patches if patch.horizontal_center < police_officer_patch.horizontal_center]
    if len(vehicle_patches_left_of_police_officer) == 0:
        # If no vehicle is to the left of the police officer, query the image directly
        return image_patch.simple_query(""Is the blue car behind or in front of the vehicle to the left of the police officer?"")
    vehicle_patch = vehicle_patches_left_of_police_officer[0]
    if blue_car_patch.horizontal_center < vehicle_patch.horizontal_center:
        return ""behind""
    else:
        return ""front""",1
5785831,What is in the glass?,soup,./data/gqa/../images/2346644.jpg,straw,"def execute_command_5785831(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the glass?"")",0
19246241,Are there any brown benches or buckets?,no,./data/gqa/../images/2363085.jpg,yes,"def execute_command_19246241(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_brown_bench = image_patch.exists(""brown bench"")
    is_brown_bucket = image_patch.exists(""brown bucket"")
    return bool_to_yesno(is_brown_bench or is_brown_bucket)",0
3243803,"Where in the picture is the spoon, on the right or on the left?",right,./data/gqa/../images/2393253.jpg,right,"def execute_command_3243803(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    spoon_patches = image_patch.find(""spoon"")
    # Question assumes only one spoon patch
    if len(spoon_patches) == 0:
        # If no spoon is found, query the image directly
        return image_patch.simple_query(""Where in the picture is the spoon, on the right or on the left?"")
    spoon_patch = spoon_patches[0]
    if spoon_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
6952486,Does the shirt look white?,yes,./data/gqa/../images/2416057.jpg,yes,"def execute_command_6952486(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Does the shirt look white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))",1
17401425,Is there a bag that is not brown?,yes,./data/gqa/../images/2353264.jpg,no,"def execute_command_17401425(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes at least one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Is there a bag that is not brown?"")
    for bag_patch in bag_patches:
        if bag_patch.simple_query(""Is the bag brown?"") != ""yes"":
            return ""yes""
    return ""no""",0
481240,"Which kind of furniture is large, the shelf or the cupboard?",cupboard,./data/gqa/../images/2347977.jpg,cupboard,"def execute_command_481240(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    cupboard_patches = image_patch.find(""cupboard"")
    # Question assumes only one shelf and one cupboard patch
    if len(shelf_patches) == 0 or len(cupboard_patches) == 0:
        # If no shelf or cupboard is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is large, the shelf or the cupboard?"")
    shelf_width = shelf_patches[0].width
    cupboard_width = cupboard_patches[0].width
    if shelf_width > cupboard_width:
        return ""shelf""
    else:
        return ""cupboard""",1
8531943,Are there any screens or bags?,yes,./data/gqa/../images/2327666.jpg,no,"def execute_command_8531943(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_screen = image_patch.exists(""screen"")
    is_bag = image_patch.exists(""bag"")
    return bool_to_yesno(is_screen or is_bag)",0
1969545,What is she wearing?,wetsuit,./data/gqa/../images/2408009.jpg,wetsuit,"def execute_command_1969545(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is she wearing?"")",1
91045271,"Which appliance is not white, the freezer or the ice maker?",freezer,./data/gqa/../images/2322424.jpg,ice maker,"def execute_command_91045271(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    freezer_patches = image_patch.find(""freezer"")
    # Question assumes only one freezer patch
    if len(freezer_patches) == 0:
        # If no freezer is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    freezer_is_white = freezer_patches[0].simple_query(""Is the freezer white?"") == ""yes""
    
    image_patch = ImagePatch(image)
    ice_maker_patches = image_patch.find(""ice maker"")
    # Question assumes only one ice maker patch
    if len(ice_maker_patches) == 0:
        # If no ice maker is found, query the image directly
        return image_patch.simple_query(""Which appliance is not white, the freezer or the ice maker?"")
    ice_maker_is_white = ice_maker_patches[0].simple_query(""Is the ice maker white?"") == ""yes""
    
    if freezer_is_white and ice_maker_is_white:
        return ""freezer"" if image_patch.simple_query(""Is the freezer white?"") == ""yes"" else ""ice maker""
    else:
        return ""freezer"" if freezer_is_white else ""ice maker""",0
1051870,Are there chairs or tables that are not green?,no,./data/gqa/../images/2348897.jpg,no,"def execute_command_1051870(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    chairs_not_green = image_patch.exists(""chair"") and not image_patch.exists(""chair and green"")
    tables_not_green = image_patch.exists(""table"") and not image_patch.exists(""table and green"")
    return bool_to_yesno(chairs_not_green or tables_not_green)",1
1366363,Does the taxi have a different color than the truck?,no,./data/gqa/../images/2349328.jpg,no,"def execute_command_1366363(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    taxi_patches = image_patch.find(""taxi"")
    truck_patches = image_patch.find(""truck"")
    # Question assumes at least one taxi and one truck patch
    if len(taxi_patches) == 0 or len(truck_patches) == 0:
        # If no taxi or truck is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the taxi have a different color than the truck?""))
    taxi_patch = taxi_patches[0]
    truck_patch = truck_patches[0]
    taxi_color = image_patch.simple_query(""What color is the taxi?"")
    truck_color = image_patch.simple_query(""What color is the truck?"")
    return bool_to_yesno(taxi_color != truck_color)",1
5460839,In which part of the image is the dog?,left,./data/gqa/../images/713369.jpg,left,"def execute_command_5460839(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    dog_patches = image_patch.find(""dog"")
    # Question assumes only one dog patch
    if len(dog_patches) == 0:
        # If no dog is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the dog?"")
    dog_patch = dog_patches[0]
    if dog_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    elif dog_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""center""",1
18899476,What type of vegetable is to the right of the rice that is on the plate?,carrot,./data/gqa/../images/2404623.jpg,olive,"def execute_command_18899476(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    rice_patches = image_patch.find(""rice on a plate"")
    # Question assumes only one rice patch
    if len(rice_patches) == 0:
        # If no rice on a plate is found, query the image directly
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    rice_patch = rice_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes only one vegetable patch
    if len(vegetable_patches) == 0:
        return image_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > rice_patch.horizontal_center:
            return vegetable_patch.simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")
    return vegetable_patches[0].simple_query(""What type of vegetable is to the right of the rice that is on the plate?"")",0
8606903,What food item is not wide?,sandwich,./data/gqa/../images/2391115.jpg,egg,"def execute_command_8606903(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    food_patches = image_patch.find(""food item"")
    # Question assumes only one food patch
    if len(food_patches) == 0:
        # If no food item is found, query the image directly
        return image_patch.simple_query(""What food item is not wide?"")
    for food_patch in food_patches:
        if food_patch.width < image_patch.width / 2:
            return food_patch.simple_query(""What food item is not wide?"")
    # If all food items are wide, pick the first one
    return food_patches[0].simple_query(""What food item is not wide?"")",0
18394861,Are there any folding chairs or skateboards?,no,./data/gqa/../images/2351386.jpg,no,"def execute_command_18394861(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_folding_chair = image_patch.exists(""folding chair"")
    is_skateboard = image_patch.exists(""skateboard"")
    return bool_to_yesno(is_folding_chair or is_skateboard)",1
2327600,Is there an elephant near the pond?,no,./data/gqa/../images/2392698.jpg,no,"def execute_command_2327600(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes only one elephant patch
    if len(elephant_patches) == 0:
        # If no elephant is found, query the image directly
        return image_patch.simple_query(""Is there an elephant near the pond?"")
    for elephant_patch in elephant_patches:
        min_distance = float('inf')
        nearest_patch = None
        for patch in image_patch.find(""pond""):
            distance = ((patch.horizontal_center - elephant_patch.horizontal_center) ** 2 + (patch.vertical_center - elephant_patch.vertical_center) ** 2) ** 0.5
            if distance < min_distance:
                min_distance = distance
                nearest_patch = patch
        if min_distance < 100: # assume a maximum distance of 100 pixels
            return ""yes""
    return ""no""",1
1575941,Which place is it?,a river,./data/gqa/../images/2340292.jpg,river,"def execute_command_1575941(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",1
9725865,What is the color of the floor that the desk is on top of?,blue,./data/gqa/../images/1526.jpg,blue,"def execute_command_9725865(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    desk_patches = image_patch.find(""desk"")
    # Question assumes only one desk patch
    if len(desk_patches) == 0:
        # If no desk is found, query the image directly
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    desk_patch = desk_patches[0]
    floor_patches = image_patch.find(""floor"")
    # Question assumes one floor patch
    if len(floor_patches) == 0:
        return image_patch.simple_query(""What is the color of the floor that the desk is on top of?"")
    return floor_patches[0].simple_query(""What is the color of the floor that the desk is on top of?"")",1
16654241,Is the TV on the left or on the right?,left,./data/gqa/../images/2360482.jpg,left,"def execute_command_16654241(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tv_patches = image_patch.find(""TV"")
    # Question assumes only one TV patch
    if len(tv_patches) == 0:
        # If no TV is found, query the image directly
        return image_patch.simple_query(""Is the TV on the left or on the right?"")
    tv_patch = tv_patches[0]
    if tv_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
18685233,Which kind of vehicle is to the left of the flags?,Error Codigo: name 'image' is not defined,./data/gqa/../images/2340467.jpg,cars,"def execute_command_18685233(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    vehicle_patch = vehicle_patches[0]
    flags_patches = image_patch.find(""flags"")
    # Question assumes one flags patch
    if len(flags_patches) == 0:
        return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")
    for flags_patch in flags_patches:
        if flags_patch.horizontal_center > image_patch.horizontal / 2: # query about left of center
            for vehicle_patch2 in vehicle_patches:
                if vehicle_patch2.horizontal_center < image_patch.horizontal / 2: # query about left of center
                    return vehicle_patch2.simple_query(""Which kind of vehicle is to the left of the flags?"")
    return vehicle_patch.simple_query(""Which kind of vehicle is to the left of the flags?"")

image_patch = ImagePatch(image)
image_patch.horizontal = image_patch.cropped_image.shape[2] # add attribute to ImagePatch class
image_patch.horizontal / 2 # use this attribute in the query",0
9796068,Are there both a fence and a sheep in the picture?,no,./data/gqa/../images/2377949.jpg,no,"def execute_command_9796068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_sheep = image_patch.exists(""sheep"")
    return bool_to_yesno(is_fence and is_sheep)",1
181002473,Do you see any blue blanket or towel?,yes,./data/gqa/../images/2397824.jpg,no,"def execute_command_181002473(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    blue_patches = image_patch.find(""blanket with blue"")
    # query for a specific type of blanket
    if len(blue_patches) > 0:
        return bool_to_yesno(len(blue_patches) > 0)
    blue_patches = image_patch.find(""towel"")
    # query for a general towel
    return bool_to_yesno(len(blue_patches) > 0)",0
1110330,Is the pillow to the left of the frog cream colored or green?,green,./data/gqa/../images/498281.jpg,green,"def execute_command_1110330(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes only one pillow patch
    if len(pillow_patches) == 0:
        # If no pillow is found, query the image directly
        return image_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    pillow_patch = pillow_patches[0]
    frog_patches = image_patch.find(""frog"")
    # Question assumes only one frog patch
    if len(frog_patches) == 0:
        # If no frog is found, query the image directly
        return pillow_patch.simple_query(""Is the pillow to the left of the frog cream colored or green?"")
    frog_patch = frog_patches[0]
    if frog_patch.horizontal_center > pillow_patch.horizontal_center:
        return pillow_patch.best_text_match([""cream colored"", ""green""])
    else:
        return pillow_patch.best_text_match([""cream colored"", ""green""])",1
511507,Is the antenna on the aircraft?,yes,./data/gqa/../images/2410567.jpg,yes,"def execute_command_511507(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    antenna_patches = image_patch.find(""antenna"")
    # Question assumes only one antenna patch
    if len(antenna_patches) == 0:
        # If no antenna is found, query the image directly
        return image_patch.simple_query(""Is the antenna on the aircraft?"")
    for antenna_patch in antenna_patches:
        return bool_to_yesno(antenna_patch.verify_property(""antenna"", ""flying"")) # if flying then on aircraft
    return ""no"" # if no antenna is found, return no",1
10464417,"In which part is the tent, the top or the bottom?",top,./data/gqa/../images/2360651.jpg,top,"def execute_command_10464417(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tent_patches = image_patch.find(""tent"")
    # Question assumes only one tent patch
    if len(tent_patches) == 0:
        # If no tent is found, query the image directly
        return image_patch.simple_query(""In which part is the tent, the top or the bottom?"")
    if tent_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
10816730,Is the tree in front of the building?,no,./data/gqa/../images/2375742.jpg,no,"def execute_command_10816730(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tree_patches = image_patch.find(""tree"")
    # Question assumes only one tree patch
    if len(tree_patches) == 0:
        # If no tree is found, query the image directly
        return image_patch.simple_query(""Is the tree in front of the building?"")
    tree_patch = tree_patches[0]
    building_patches = image_patch.find(""building"")
    # Question assumes one building patch
    if len(building_patches) == 0:
        return ""no""
    building_patch = building_patches[0]
    if tree_patch.horizontal_center < building_patch.horizontal_center:
        return ""yes""
    else:
        return ""no""",1
18766115,Who is walking?,people,./data/gqa/../images/2396393.jpg,woman,"def execute_command_18766115(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is walking?"")",0
10625851,Are there either any fruits or plates in the image?,yes,./data/gqa/../images/2370622.jpg,yes,"def execute_command_10625851(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_fruit = image_patch.exists(""fruit"")
    is_plate = image_patch.exists(""plate"")
    return bool_to_yesno(is_fruit or is_plate)",1
71018537,Is the person wearing a coat?,yes,./data/gqa/../images/2376129.jpg,yes,"def execute_command_71018537(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Is the person wearing a coat?"")
    return bool_to_yesno(person_patches[0].exists(""coat""))",1
4194722,Is the man wearing a helmet?,yes,./data/gqa/../images/2346161.jpg,yes,"def execute_command_4194722(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing a helmet?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.exists(""helmet""))",1
414248,"What animal are the women near the ocean riding, a pig or a horse?",horse,./data/gqa/../images/2365322.jpg,horse,"def execute_command_414248(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What animal are the women near the ocean riding, a pig or a horse?"")
    woman_patch = woman_patches[0]
    return woman_patch.best_text_match([""pig"", ""horse""])",1
683094,Who is wearing the shirt?,the man,./data/gqa/../images/2347147.jpg,man,"def execute_command_683094(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Who is wearing the shirt?"")
    for patch in image_patch.find(""man"") + image_patch.find(""woman""):
        if patch.simple_query(""Is this person wearing a shirt?"") == ""yes"":
            return patch.simple_query(""Who is wearing the shirt?"")
    # If no one is wearing a shirt, query the image directly
    return image_patch.simple_query(""Who is wearing the shirt?"")",1
12140603,What device is to the left of the headphones?,laptop,./data/gqa/../images/2359333.jpg,camera,"def execute_command_12140603(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the left of the headphones?"")",0
5575209,The flowers are where?,on the ground,./data/gqa/../images/2415237.jpg,field,"def execute_command_5575209(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The flowers are where?"")",0
8773829,Which kind of furniture is made of wood?,chair,./data/gqa/../images/2315907.jpg,chair,"def execute_command_8773829(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is made of wood?"")
    furniture_patch = furniture_patches[0]
    return furniture_patch.best_text_match([""chair"", ""table"", ""shelf"", ""bed""]) # common types of furniture made of wood",1
12636428,Which kind of animal is black?,giraffe,./data/gqa/../images/2391612.jpg,zebra,"def execute_command_12636428(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is black?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""black""):
            return animal_patch.simple_query(""Which kind of animal is black?"")
    # If no black animal is found, query the image directly
    return image_patch.simple_query(""Which kind of animal is black?"")",0
1020584,What animals is the car behind of?,zebra,./data/gqa/../images/2403905.jpg,zebras,"def execute_command_1020584(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What animals is the car behind?"")
    animal_patches = car_patches[0].find(""animal"")
    result = []
    for animal_patch in animal_patches:
        result.append(animal_patch.simple_query(""What animal is the car behind?""))
    return "", "".join(result)",0
11879418,The man is standing on what?,snowboard,./data/gqa/../images/2363398.jpg,snowboard,"def execute_command_11879418(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""The man is standing on what?"")",1
12334288,What device is to the left of the cabinet?,wii,./data/gqa/../images/2320242.jpg,controller,"def execute_command_12334288(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What device is to the left of the cabinet?"")",0
691610,Is the monitor to the left of a book?,yes,./data/gqa/../images/713796.jpg,no,"def execute_command_691610(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Is the monitor to the left of a book?"")
    for monitor_patch in monitor_patches:
        book_patches = image_patch.find(""book"")
        if len(book_patches) == 0:
            return ""no""
        for book_patch in book_patches:
            if book_patch.horizontal_center > monitor_patch.horizontal_center:
                return ""yes""
    return ""no""",0
7552714,Is the color of the jacket black?,no,./data/gqa/../images/2316935.jpg,yes,"def execute_command_7552714(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    jacket_patches = image_patch.find(""jacket"")
    # Question assumes only one jacket patch
    if len(jacket_patches) == 0:
        # If no jacket is found, query the image directly
        return image_patch.simple_query(""Is the color of the jacket black?"")
    return bool_to_yesno(jacket_patches[0].verify_property(""jacket"", ""black""))",0
8492422,Is the man to the left of a boy?,no,./data/gqa/../images/2360778.jpg,no,"def execute_command_8492422(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man to the left of a boy?"")
    man_patch = man_patches[0]
    boy_patches = image_patch.find(""boy"")
    # Question assumes at least one boy patch
    if len(boy_patches) == 0:
        return ""no""
    for boy_patch in boy_patches:
        if boy_patch.horizontal_center > man_patch.horizontal_center:
            return ""yes""
    return ""no""",1
13248061,What type of device is to the left of the keyboard in the bottom of the image?,mouse,./data/gqa/../images/2394374.jpg,speaker,"def execute_command_13248061(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # crop to the bottom of the image
    bottom_patch = image_patch.crop(0, 0, image_patch.width, image_patch.height // 2)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return bottom_patch.simple_query(""What type of device is to the left of the keyboard?"")",0
18252454,What is common to the roof and the sky?,blue,./data/gqa/../images/2406434.jpg,color,"def execute_command_18252454(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is common to the roof and the sky?"")",0
14443687,What do the cat and the book have in common?,small,./data/gqa/../images/2347201.jpg,color,"def execute_command_14443687(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cat_patches = image_patch.find(""cat"")
    # Question assumes only one cat patch
    if len(cat_patches) == 0:
        # If no cat is found, query the image directly
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    cat_patch = cat_patches[0]
    book_patch = book_patches[0]
    common_properties = set()
    for property in [""open"", ""closed"", ""brown"", ""red"", ""green"", ""blue"", ""big"", ""small""]:
        cat_has_property = cat_patch.verify_property(""cat"", property)
        book_has_property = book_patch.verify_property(""book"", property)
        if cat_has_property and book_has_property:
            common_properties.add(property)
    if len(common_properties) == 0:
        return image_patch.simple_query(""What do the cat and the book have in common?"")
    return common_properties.pop()",0
14571335,Who is wearing trousers?,the catcher,./data/gqa/../images/2388962.jpg,umpire,"def execute_command_14571335(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes at least one person patch
    for person_patch in person_patches:
        if person_patch.simple_query(""Is the person wearing trousers?"") == ""yes"":
            return person_patch.simple_query(""Who is wearing trousers?"")
    return image_patch.simple_query(""Who is wearing trousers?"") # if no one is wearing trousers, query the image directly",0
474885,Who wears a cap?,man,./data/gqa/../images/2317947.jpg,boy,"def execute_command_474885(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cap_patches = image_patch.find(""cap"")
    # Question assumes only one cap patch
    if len(cap_patches) == 0:
        # If no cap is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    wearer_patches = cap_patches[0].find(""person with cap"")
    if len(wearer_patches) == 0:
        # If no person with cap is found, query the image directly
        return image_patch.simple_query(""Who wears a cap?"")
    return wearer_patches[0].simple_query(""Who wears a cap?"")",0
141013015,"What color is the toilet, brown or white?",white,./data/gqa/../images/2397007.jpg,brown,"def execute_command_141013015(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    toilet_patches = image_patch.find(""toilet"")
    # Question assumes only one toilet patch
    if len(toilet_patches) == 0:
        # If no toilet is found, query the image directly
        return image_patch.simple_query(""What color is the toilet, brown or white?"")
    return toilet_patches[0].best_text_match([""brown"", ""white""])",0
5515816,On which side of the image is the fence?,left,./data/gqa/../images/2405722.jpg,left,"def execute_command_5515816(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""On which side of the image is the fence?"")
    fence_patch = fence_patches[0]
    if fence_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
16774696,What is the surfer wearing?,blue,./data/gqa/../images/2388093.jpg,shirt,"def execute_command_16774696(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the surfer wearing?"")",0
13701956,Is there any grass or sand that is not dry?,no,./data/gqa/../images/2339742.jpg,no,"def execute_command_13701956(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_grass_wet = image_patch.exists(""wet grass"")
    is_sand_wet = image_patch.exists(""wet sand"")
    return bool_to_yesno(is_grass_wet or is_sand_wet)",1
11606870,Is there a cow or a zebra in the picture?,yes,./data/gqa/../images/2372978.jpg,yes,"def execute_command_11606870(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_cow = image_patch.exists(""cow"")
    is_zebra = image_patch.exists(""zebra"")
    return bool_to_yesno(is_cow or is_zebra)",1
1589297,Does the fire hydrant look modern?,yes,./data/gqa/../images/2378861.jpg,yes,"def execute_command_1589297(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""fire hydrant"", ""modern""))",1
942308,Is the cup empty or full?,full,./data/gqa/../images/2379897.jpg,empty,"def execute_command_942308(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cup_patches = image_patch.find(""cup"")
    # Question assumes only one cup patch
    if len(cup_patches) == 0:
        # If no cup is found, query the image directly
        return image_patch.simple_query(""Is the cup empty or full?"")
    return cup_patches[0].simple_query(""Is the cup empty or full?"")",0
15815976,Is the woman wearing a scarf?,no,./data/gqa/../images/2334878.jpg,yes,"def execute_command_15815976(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman wearing a scarf?"")
    woman_patch = woman_patches[0]
    return bool_to_yesno(woman_patch.exists(""scarf""))",0
3193231,Do you see either parking meters or brooms in the picture?,no,./data/gqa/../images/2361610.jpg,no,"def execute_command_3193231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_parking_meter = image_patch.exists(""parking meter"")
    is_broom = image_patch.exists(""broom"")
    return bool_to_yesno(is_parking_meter or is_broom)",1
314218,Is the sign in front of the bridge small and white?,yes,./data/gqa/../images/2357167.jpg,no,"def execute_command_314218(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    sign_patches = image_patch.find(""sign"")
    # Question assumes only one sign patch
    if len(sign_patches) == 0:
        # If no sign is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Is the sign in front of the bridge small and white?""))
    sign_patch = sign_patches[0]
    return bool_to_yesno(sign_patch.simple_query(""Is small and white?""))",0
18130465,Does the umbrella that is not dry look orange and open?,yes,./data/gqa/../images/2318939.jpg,no,"def execute_command_18130465(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # first find all umbrellas
    umbrella_patches = image_patch.find(""umbrella"")
    # Question assumes at least one non-dry umbrella patch
    if len(umbrella_patches) == 0:
        # If no umbrella is found, query the image directly
        return bool_to_yesno(image_patch.simple_query(""Does the umbrella that is not dry look orange and open?""))
    for umbrella_patch in umbrella_patches:
        if image_patch.exists(""dry"") and umbrella_patch.simple_query(""Is dry?"") == ""no"":
            return bool_to_yesno(umbrella_patch.best_text_match([""orange"", ""no""]) and image_patch.exists(""open"")) # crop would include the state so keep it in the query
    # If no non-dry umbrella is found, query the image directly
    return bool_to_yesno(image_patch.simple_query(""Does the umbrella that is not dry look orange and open?""))",0
7920817,What's in the paper?,news,./data/gqa/../images/2401506.jpg,donut,"def execute_command_7920817(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's in the paper?"")",0
18167292,What is on the bun in the top?,hamburger,./data/gqa/../images/2375415.jpg,lettuce,"def execute_command_18167292(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the bun in the top?"")",0
16929928,What is the fence made of?,wood,./data/gqa/../images/2317275.jpg,wood,"def execute_command_16929928(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the fence made of?"")",1
14113312,Is the woman to the left or to the right of the lady?,right,./data/gqa/../images/1507.jpg,left,"def execute_command_14113312(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    woman_patch = woman_patches[0]
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        return image_patch.simple_query(""Is the woman to the left or to the right of the lady?"")
    lady_patch = lady_patches[0]
    if woman_patch.horizontal_center < lady_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",0
17993299,Is the horse to the left of a car?,yes,./data/gqa/../images/2339294.jpg,yes,"def execute_command_17993299(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Is the horse to the left of a car?"")
    for horse_patch in horse_patches:
        car_patches = image_patch.find(""car"")
        if len(car_patches) == 0:
            return ""no""
        for car_patch in car_patches:
            if car_patch.horizontal_center > horse_patch.horizontal_center:
                return ""yes""
    return ""no""",1
8717022,Is the small animal to the left of the vehicle that looks silver?,yes,./data/gqa/../images/2413350.jpg,yes,"def execute_command_8717022(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    small_animal_patches = image_patch.find(""small animal"")
    # Question assumes only one small animal patch
    if len(small_animal_patches) == 0:
        # If no small animal is found, query the image directly
        return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
    for small_animal_patch in small_animal_patches:
        vehicle_patches = image_patch.find(""vehicle with silver max property"")
        # max property to ensure we get the vehicle that looks silver
        if len(vehicle_patches) == 0:
            return image_patch.simple_query(""Is the small animal to the left of the vehicle that looks silver?"")
        for vehicle_patch in vehicle_patches:
            if vehicle_patch.horizontal_center > small_animal_patch.horizontal_center:
                return ""yes""
    return ""no""",1
2998707,Which color is the chair that is on the right?,white,./data/gqa/../images/2381662.jpg,white,"def execute_command_2998707(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""Which color is the chair that is on the right?"")
    rightmost_chair_patch = max(chair_patches, key=lambda patch: patch.horizontal_center)
    return rightmost_chair_patch.simple_query(""What color is the chair?"") # crop would include the chair so keep it in the query",1
171017786,Do you see any cups to the left of the monitor?,yes,./data/gqa/../images/2344162.jpg,yes,"def execute_command_171017786(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    monitor_patches = image_patch.find(""monitor"")
    # Question assumes only one monitor patch
    if len(monitor_patches) == 0:
        # If no monitor is found, query the image directly
        return image_patch.simple_query(""Do you see any cups to the left of the monitor?"")
    monitor_patch = monitor_patches[0]
    for patch in image_patch.find(""cup""):
        if patch.horizontal_center < monitor_patch.horizontal_center:
            return ""yes""
    return ""no""",1
2220068,Is the girl to the right or to the left of the glasses the man is wearing?,right,./data/gqa/../images/2322282.jpg,left,"def execute_command_2220068(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man with glasses"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man with glasses is found, query the image directly
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    man_patch = man_patches[0]
    girl_patches = image_patch.find(""girl"")
    # Question assumes only one girl patch
    if len(girl_patches) == 0:
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    girl_patch = girl_patches[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return image_patch.simple_query(""Is the girl to the right or to the left of the glasses the man is wearing?"")
    glasses_patch = glasses_patches[0]
    if girl_patch.horizontal_center > glasses_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",0
1941568,What animal is in the water?,bear,./data/gqa/../images/2360440.jpg,bear,"def execute_command_1941568(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What animal is in the water?"")",1
17577787,Does the man's hair look short and white?,yes,./data/gqa/../images/2330449.jpg,yes,"def execute_command_17577787(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the man's hair look short and white?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""short and white hair""))",1
6711650,Are there chairs to the left of the bottle the toilet is to the right of?,no,./data/gqa/../images/2413428.jpg,no,"def execute_command_6711650(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bottle_patches = image_patch.find(""bottle"")
    # Question assumes only one bottle patch
    if len(bottle_patches) == 0:
        # If no bottle is found, query the image directly
        return image_patch.simple_query(""Are there chairs to the left of the bottle the toilet is to the right of?"")
    bottle_patch = bottle_patches[0]
    chair_patches = image_patch.find(""chair"")
    for chair_patch in chair_patches:
        if chair_patch.horizontal_center < bottle_patch.horizontal_center:
            return ""yes""
    return ""no""",1
9825336,Which kind of furniture is the mat lying on?,table,./data/gqa/../images/2336412.jpg,table,"def execute_command_9825336(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    mat_patches = image_patch.find(""mat"")
    # Question assumes only one mat patch
    if len(mat_patches) == 0:
        # If no mat is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    mat_patch = mat_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > mat_patch.horizontal_center:
            return furniture_patch.simple_query(""Which kind of furniture is the mat lying on?"")
    return furniture_patches[0].simple_query(""Which kind of furniture is the mat lying on?"")",1
11222427,Do you see fences or elephants?,yes,./data/gqa/../images/2382001.jpg,yes,"def execute_command_11222427(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_fence = image_patch.exists(""fence"")
    is_elephant = image_patch.exists(""elephant"")
    return bool_to_yesno(is_fence or is_elephant)",1
1233009,"What kind of furniture is not white, the entertainment center or the bed?",entertainment center,./data/gqa/../images/2410011.jpg,entertainment center,"def execute_command_1233009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bed_patches = image_patch.find(""bed"")
    # Question assumes only one bed patch
    if len(bed_patches) == 0:
        # If no bed is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    bed_patch = bed_patches[0]
    is_bed_white = bed_patch.simple_query(""Is the bed white?"")
    if is_bed_white:
        furniture_patches = image_patch.find(""furniture"")
        # Question assumes only one non-bed patch
        if len(furniture_patches) == 0:
            # If no other furniture is found, query the image directly
            return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
        for furniture_patch in furniture_patches:
            if furniture_patch.horizontal_center != bed_patch.horizontal_center:
                return furniture_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")
    return image_patch.simple_query(""What kind of furniture is not white, the entertainment center or the bed?"")",1
1152020,Do you see either any plate or tomato that are red?,no,./data/gqa/../images/2376541.jpg,yes,"def execute_command_1152020(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_red_plate = image_patch.exists(""red plate"")
    is_red_tomato = image_patch.exists(""tomato with red top"")
    return bool_to_yesno(is_red_plate or is_red_tomato)",0
8961520,Who is surfing?,two people,./data/gqa/../images/2375358.jpg,girl,"def execute_command_8961520(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is surfing?"")",0
18106780,Which room is it?,living room,./data/gqa/../images/2411038.jpg,living room,"def execute_command_18106780(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
1892692,What color do you think the bowl that is to the right of the person is?,white,./data/gqa/../images/2397720.jpg,pink,"def execute_command_1892692(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    person_patch = person_patches[0]
    bowl_patches = image_patch.find(""bowl"")
    # Question assumes one bowl patch
    if len(bowl_patches) == 0:
        return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")
    for bowl_patch in bowl_patches:
        if bowl_patch.horizontal_center > person_patch.horizontal_center:
            return bowl_patch.simple_query(""What color is the bowl?"")
    # If no bowl is to the right of the person, query the image directly
    return image_patch.simple_query(""What color do you think the bowl that is to the right of the person is?"")",0
6952082,What color is the hair?,gray,./data/gqa/../images/2416055.jpg,gray,"def execute_command_6952082(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    head_patches = image_patch.find(""head"")
    # Question assumes only one head patch
    if len(head_patches) == 0:
        # If no head is found, query the image directly
        return image_patch.simple_query(""What color is the hair?"")
    head_patch = head_patches[0]
    return head_patch.best_text_match([""brown"", ""blond"", ""red"", ""gray"", ""black""])",1
3768067,What color is the pot the statue is to the right of?,gold,./data/gqa/../images/285673.jpg,brown,"def execute_command_3768067(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    statue_patches = image_patch.find(""statue"")
    # Question assumes only one statue patch
    if len(statue_patches) == 0:
        # If no statue is found, query the image directly
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    statue_patch = statue_patches[0]
    pot_patches = image_patch.find(""pot"")
    # Question assumes one pot patch to the right of the statue
    if len(pot_patches) == 0:
        return image_patch.simple_query(""What color is the pot the statue is to the right of?"")
    pot_patch = pot_patches[0]
    if pot_patch.horizontal_center > statue_patch.horizontal_center:
        return pot_patch.simple_query(""What color is the pot the statue is to the right of?"")
    # If no pot is to the right of the statue, query the image directly
    return image_patch.simple_query(""What color is the pot the statue is to the right of?"")",0
17866761,Is the clear glass on the shelf of the table?,no,./data/gqa/../images/2412235.jpg,yes,"def execute_command_17866761(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    clear_glass_patches = image_patch.find(""clear glass"")
    # Question assumes only one clear glass patch
    if len(clear_glass_patches) == 0:
        # If no clear glass is found, query the image directly
        return image_patch.simple_query(""Is the clear glass on the shelf of the table?"")
    clear_glass_patch = clear_glass_patches[0]
    return bool_to_yesno(clear_glass_patch.exists(""shelf"") and clear_glass_patch.simple_query(""Is the clear glass on the shelf?""))",0
798020,Does the skirt look black or yellow?,yellow,./data/gqa/../images/2356411.jpg,yellow,"def execute_command_798020(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    skirt_patches = image_patch.find(""skirt"")
    # Question assumes only one skirt patch
    if len(skirt_patches) == 0:
        # If no skirt is found, query the image directly
        return image_patch.simple_query(""Does the skirt look black or yellow?"")
    return skirt_patches[0].best_text_match([""black"", ""yellow""])",1
828981,How old is he?,not enough information,./data/gqa/../images/2403003.jpg,old,"def execute_command_828981(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""man"") or image_patch.find(""woman"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""How old is he?"")
    person_patch = person_patches[0]
    return person_patch.simple_query(""How old is he?"")",0
7236463,Of what color is the book?,black,./data/gqa/../images/1592401.jpg,black,"def execute_command_7236463(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    book_patches = image_patch.find(""book"")
    # Question assumes only one book patch
    if len(book_patches) == 0:
        # If no book is found, query the image directly
        return image_patch.simple_query(""Of what color is the book?"")
    return book_patches[0].best_text_match([""red"", ""black"", ""blue"", ""green"", ""brown"", ""white"", ""gray""])",1
6376684,What color is the car to the left of the train car?,yellow,./data/gqa/../images/2352530.jpg,orange,"def execute_command_6376684(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    car_patches = image_patch.find(""car"")
    # Question assumes only one car patch to the left of the train car
    if len(car_patches) == 0:
        # If no car is found, query the image directly
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    train_car_patches = image_patch.find(""train car"")
    # Question assumes at least one train car patch
    if len(train_car_patches) == 0:
        return image_patch.simple_query(""What color is the car to the left of the train car?"")
    for car_patch in car_patches:
        for train_car_patch in train_car_patches:
            if train_car_patch.horizontal_center > car_patch.horizontal_center:
                return car_patch.simple_query(""What color is the car?"")
    # If no car is to the left of the train car, query the image directly
    return image_patch.simple_query(""What color is the car to the left of the train car?"")",0
786798,Is this a photo of a beach?,no,./data/gqa/../images/2416197.jpg,no,"def execute_command_786798(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""beach""))",1
19836753,What vehicles are to the left of the fence?,"car, car, car, truck, truck, truck, car, car, car",./data/gqa/../images/1655.jpg,cars,"def execute_command_19836753(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    fence_patches = image_patch.find(""fence"")
    # Question assumes only one fence patch
    if len(fence_patches) == 0:
        # If no fence is found, query the image directly
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    fence_patch = fence_patches[0]
    max_x = fence_patch.horizontal_center
    vehicle_patches = image_patch.find(""vehicle"")
    result = []
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center < max_x:
            result.append(vehicle_patch.simple_query(""What type of vehicle is it?""))
    if len(result) == 0:
        return image_patch.simple_query(""What vehicles are to the left of the fence?"")
    return "", "".join(result)",0
15284615,Who is playing?,no one,./data/gqa/../images/2367184.jpg,children,"def execute_command_15284615(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is playing?"")",0
16785170,Is the man that is walking holding a remote control?,no,./data/gqa/../images/2393941.jpg,no,"def execute_command_16785170(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man walking"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man walking is found, query the image directly
        return image_patch.simple_query(""Is the man that is walking holding a remote control?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man walking"", ""holding a remote control""))",1
17746396,What's the boy wearing?,shirt,./data/gqa/../images/2368062.jpg,necklace,"def execute_command_17746396(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    boy_patches = image_patch.find(""boy"")
    # Question assumes only one boy patch
    if len(boy_patches) == 0:
        # If no boy is found, query the image directly
        return image_patch.simple_query(""What's the boy wearing?"")
    return boy_patches[0].simple_query(""What are you wearing?"") # ask directly to get the clothing",0
3625764,Is there a mug to the right of the bottle which is to the right of the tap?,yes,./data/gqa/../images/1057.jpg,yes,"def execute_command_3625764(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # first find the tap
    tap_patches = image_patch.find(""tap"")
    # Question assumes only one tap patch
    if len(tap_patches) == 0:
        # If no tap is found, query the image directly
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    tap_patch = tap_patches[0]
    # then find the bottle to the right of the tap
    bottle_patches = image_patch.find(""bottle"")
    bottle_to_right_of_patch = None
    for bottle_patch in bottle_patches:
        if bottle_patch.horizontal_center > tap_patch.horizontal_center:
            bottle_to_right_of_patch = bottle_patch
    if bottle_to_right_of_patch is None:
        # If no bottle is to the right of the tap, query the image directly
        return image_patch.simple_query(""Is there a mug to the right of the bottle which is to the right of the tap?"")
    # then find the mug to the right of the bottle
    mug_patches = image_patch.find(""mug"")
    for mug_patch in mug_patches:
        if mug_patch.horizontal_center > bottle_to_right_of_patch.horizontal_center:
            return ""yes""
    return ""no""",1
13826837,What color is the door?,black,./data/gqa/../images/2348833.jpg,black,"def execute_command_13826837(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    door_patches = image_patch.find(""door"")
    # Question assumes only one door patch
    if len(door_patches) == 0:
        # If no door is found, query the image directly
        return image_patch.simple_query(""What color is the door?"")
    door_patch = door_patches[0]
    return door_patch.simple_query(""What color is the door?"") # crop would include the door so keep it in the query",1
19249907,Are there any horses in the field?,yes,./data/gqa/../images/2343183.jpg,yes,"def execute_command_19249907(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""horse with field"")) # query with a specific object name that includes the field context",1
2964690,What is in front of the mountains?,water,./data/gqa/../images/2397904.jpg,fire hydrant,"def execute_command_2964690(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is in front of the mountains?"")",0
13396373,Are there vehicles to the right of the truck?,no,./data/gqa/../images/2351928.jpg,no,"def execute_command_13396373(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Are there vehicles to the right of the truck?"")
    truck_patch = truck_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    for vehicle_patch in vehicle_patches:
        if vehicle_patch.horizontal_center > truck_patch.horizontal_center:
            return ""yes""
    return ""no""",1
493755,Does the scarf made of wool seem to be long and blue?,yes,./data/gqa/../images/2353054.jpg,yes,"def execute_command_493755(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    scarf_patches = image_patch.find(""scarf made of wool"")
    # Question assumes only one scarf patch
    if len(scarf_patches) == 0:
        # If no scarf made of wool is found, query the image directly
        return image_patch.simple_query(""Does the scarf made of wool seem to be long and blue?"")
    scarf_patch = scarf_patches[0]
    return bool_to_yesno(scarf_patch.simple_query(""Is it long and blue?""))",1
1189986,Is the man behind the elephant holding a surfboard?,no,./data/gqa/../images/2387165.jpg,no,"def execute_command_1189986(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return bool_to_yesno(image_patch.exists(""man holding a surfboard""))
    man_patch = man_patches[0]
    elephant_patches = image_patch.find(""elephant"")
    # Question assumes one elephant patch
    if len(elephant_patches) == 0:
        return bool_to_yesno(man_patch.simple_query(""Is the man holding a surfboard?""))
    for elephant_patch in elephant_patches:
        if elephant_patch.horizontal_center > man_patch.horizontal_center:
            return bool_to_yesno(man_patch.simple_query(""Is the man holding a surfboard?""))
    return ""no""",1
8792466,Which color is the closed window?,brown,./data/gqa/../images/2409043.jpg,white,"def execute_command_8792466(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    window_patches = image_patch.find(""closed window"")
    # Question assumes only one window patch
    if len(window_patches) == 0:
        # If no window is found, query the image directly
        return image_patch.simple_query(""Which color is the closed window?"")
    return window_patches[0].best_text_match([""red"", ""brown"", ""blue"", ""green"", ""white"", ""gray""])",0
10188423,Who is wearing a shirt?,the man,./data/gqa/../images/2327560.jpg,boy,"def execute_command_10188423(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candidates = [""man"", ""woman"", ""boy"", ""girl""]
    for candidate in candidates:
        if image_patch.exists(candidate) and image_patch.find(candidate)[0].simple_query(""Is the "" + candidate + "" wearing a shirt?"") == ""yes"":
            return image_patch.simple_query(""Who is wearing a shirt?"")
    return image_patch.simple_query(""Who is wearing a shirt?"") # if no one is wearing a shirt, query the image directly",0
8965417,What kind of vegetable is to the right of the girl?,orange,./data/gqa/../images/2416035.jpg,lemons,"def execute_command_8965417(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    girl_patches = image_patch.find(""girl"")
    # Question assumes one girl patch
    if len(girl_patches) == 0:
        # If no girl is found, query the image directly
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    girl_patch = girl_patches[0]
    vegetable_patches = image_patch.find(""vegetable"")
    # Question assumes one vegetable patch
    if len(vegetable_patches) == 0:
        return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    for vegetable_patch in vegetable_patches:
        if vegetable_patch.horizontal_center > girl_patch.horizontal_center:
            return vegetable_patch.simple_query(""What kind of vegetable is to the right of the girl?"")
    # If no vegetable is to the right of the girl, query the image directly
    return image_patch.simple_query(""What kind of vegetable is to the right of the girl?"")",0
4929965,Is there a black racket or clock in the picture?,yes,./data/gqa/../images/1592676.jpg,yes,"def execute_command_4929965(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_black_racket = image_patch.exists(""black racket"")
    is_clock = image_patch.exists(""clock"")
    return bool_to_yesno(is_black_racket or is_clock)",1
4782038,What kind of animal is white?,horse,./data/gqa/../images/2351458.jpg,horse,"def execute_command_4782038(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal white?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is white?"")
    # If no white animal is found, query the image directly
    return image_patch.simple_query(""What kind of animal is white?"")",1
14658201,Is the sheep that looks white and brown made of plastic?,yes,./data/gqa/../images/2408154.jpg,yes,"def execute_command_14658201(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    sheep_patches = image_patch.find(""sheep"")
    # Question assumes only one sheep patch
    if len(sheep_patches) == 0:
        # If no sheep is found, query the image directly
        return image_patch.simple_query(""Is the sheep that looks white and brown made of plastic?"")
    sheep_patch = sheep_patches[0]
    return bool_to_yesno(sheep_patch.verify_property(""sheep"", ""plastic""))",1
1441865,Do you see any boxes on the table under the grill?,Error Ejecucion: ImagePatch has no area,./data/gqa/../images/2383269.jpg,yes,"def execute_command_1441865(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # first crop to the grill
    grill_patches = image_patch.find(""grill"")
    if len(grill_patches) == 0:
        # If no grill is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    grill_patch = grill_patches[0]
    # crop to the area under the grill
    table_patches = image_patch.find(""table"")
    if len(table_patches) == 0:
        # If no table is found, query the image directly
        return image_patch.simple_query(""Do you see any boxes on the table under the grill?"")
    table_patch = table_patches[0]
    left = max(image_patch.horizontal_center, table_patch.horizontal_center - image_patch.width // 2)
    right = min(image_patch.horizontal_center + image_patch.width // 2, table_patch.horizontal_center + table_patch.width // 2)
    upper = table_patch.vertical_center
    lower = max(image_patch.height // 2, table_patch.lower)
    cropped_image_patch = image_patch.crop(left, lower, right, upper)
    return bool_to_yesno(cropped_image_patch.exists(""box""))",0
1424926,What is the tag on?,the bench,./data/gqa/../images/2374543.jpg,bench,"def execute_command_1424926(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tag on?"")",1
5543521,What is the piece of furniture that is to the right of the person who is working on a laptop?,chair,./data/gqa/../images/2380680.jpg,desk,"def execute_command_5543521(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person working on laptop"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person working on a laptop is found, query the image directly
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    person_patch = person_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > person_patch.horizontal_center:
            return furniture_patch.simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")
    return furniture_patches[0].simple_query(""What is the piece of furniture that is to the right of the person who is working on a laptop?"")",0
3635257,Is there any freezer in this photo?,no,./data/gqa/../images/2367211.jpg,no,"def execute_command_3635257(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""freezer""))",1
8821026,Are there either any bags or chairs?,yes,./data/gqa/../images/1591920.jpg,yes,"def execute_command_8821026(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_bag = image_patch.exists(""bag"")
    is_chair = image_patch.exists(""chair"")
    return bool_to_yesno(is_bag or is_chair)",1
13669952,In what vehicle is the bus driver?,bus,./data/gqa/../images/2358850.jpg,bus,"def execute_command_13669952(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bus_patches = image_patch.find(""bus"")
    # Question assumes only one bus patch
    if len(bus_patches) == 0:
        # If no bus is found, query the image directly
        return image_patch.simple_query(""In what vehicle is the bus driver?"")
    bus_patch = bus_patches[0]
    return bus_patch.simple_query(""In what vehicle is the bus driver?"") # crop would include the bus so keep it in the query",1
17204662,What is that man in front of?,grass,./data/gqa/../images/2388260.jpg,trees,"def execute_command_17204662(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is that man in front of?"")",0
380866,Are there any girls or radios?,no,./data/gqa/../images/2356972.jpg,no,"def execute_command_380866(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_girl = image_patch.exists(""girl"")
    is_radio = image_patch.exists(""radio"")
    return bool_to_yesno(is_girl or is_radio)",1
13775896,The girl is sitting on what?,a towel,./data/gqa/../images/2360273.jpg,blanket,"def execute_command_13775896(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (sitting on), so ask directly
    return image_patch.simple_query(""The girl is sitting on what?"")",0
18798369,Is the white lamp to the left or to the right of the pillow that is in the center?,right,./data/gqa/../images/2374558.jpg,right,"def execute_command_18798369(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    lamp_patches = image_patch.find(""white lamp"")
    # Question assumes only one white lamp patch
    if len(lamp_patches) == 0:
        # If no white lamp is found, query the image directly
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    lamp_patch = lamp_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    if len(pillow_patches) == 0:
        return image_patch.simple_query(""Is the white lamp to the left or to the right of the pillow that is in the center?"")
    pillow_patch = max(pillow_patches, key=lambda x:x.horizontal_center)
    if lamp_patch.horizontal_center < pillow_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
16545552,What color do you think is the vehicle the girl is washing?,red,./data/gqa/../images/2408602.jpg,red,"def execute_command_16545552(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What color do you think is the vehicle the girl is washing?"")
    vehicle_patch = vehicle_patches[0]
    return vehicle_patch.best_text_match([""red"", ""blue"", ""green"", ""white"", ""yellow"", ""black""])",1
16719872,Are there motorcycles to the left of the man who is wearing a hat?,yes,./data/gqa/../images/2346089.jpg,no,"def execute_command_16719872(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man wearing a hat"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return bool_to_yesno(image_patch.exists(""motorcycle""))
    man_patch = man_patches[0]
    return bool_to_yesno(image_patch.exists(""motorcycle with max left of "" + str(man_patch.horizontal_center))) # crop would include the man so keep it in the query

def execute_command(image):
    return ImagePatch(image).exists(""motorcycle to the left of the man who is wearing a hat"") # simplified query",0
2954090,Is the garbage can to the right or to the left of the person that is pushing the stroller?,right,./data/gqa/../images/2387508.jpg,right,"def execute_command_2954090(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person pushing a stroller"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person pushing a stroller is found, query the image directly
        return image_patch.simple_query(""Is the garbage can to the right or to the left of the person that is pushing the stroller?"")
    person_patch = person_patches[0]
    garbage_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_patches) == 0:
        return ""left""
    garbage_patch = garbage_patches[0]
    if garbage_patch.horizontal_center > person_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
13711589,What do the truck and the street sign have in common?,"Error Codigo: expected 'else' after 'if' expression (Codex, line 15)",./data/gqa/../images/2375467.jpg,color,"def execute_command_13711589(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    truck_patch = truck_patches[0]
    street_sign_patches = image_patch.find(""street sign"")
    # Question assumes only one street sign patch
    if len(street_sign_patches) == 0:
        return image_patch.simple_query(""What do the truck and the street sign have in common?"")
    street_sign_patch = street_sign_patches[0]
    common_properties = truck_patch.simple_query(""What properties does the truck have?"")
    for property in property_query if not max if max for max in common_properties for property in max if max if max
    if max for max in common_properties for property in max if max if max
    if max for max in common_properties for property in max if max if max
    if max for max in common_properties for property in max if max if max
    if max for max in common_properties for max in common_properties if max != query max if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_query if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
    if max for max in common_properties if max for max
",0
10227573,Who is wearing a shirt?,man,./data/gqa/../images/2413021.jpg,man,"def execute_command_10227573(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    candidates = [""man"", ""woman"", ""boy"", ""girl""]
    for candidate in candidates:
        if image_patch.exists(candidate) and image_patch.find(candidate)[0].simple_query(""Is the "" + candidate + "" wearing a shirt?"") == ""yes"":
            return image_patch.simple_query(""Who is wearing a shirt?"")
    return image_patch.simple_query(""Who is wearing a shirt?"") # if no one is wearing a shirt, query the image directly",1
161071156,What animal is the man leading?,sheep,./data/gqa/../images/2376032.jpg,sheep,"def execute_command_161071156(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man leading an animal"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is the man leading?"")
    man_patch = man_patches[0]
    animal_patches = man_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        return image_patch.simple_query(""What animal is the man leading?"")
    return animal_patches[0].simple_query(""What animal is the man leading?"")",1
161036781,What is the piece of furniture to the right of the curtain the dresser is in front of?,desk,./data/gqa/../images/2368963.jpg,drawer,"def execute_command_161036781(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains multiple relations, so ask directly
    return image_patch.simple_query(""What is the piece of furniture to the right of the curtain the dresser is in front of?"")",0
7190226,Does the puddle look large?,yes,./data/gqa/../images/2404965.jpg,yes,"def execute_command_7190226(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    puddle_patches = image_patch.find(""puddle"")
    # Question assumes only one puddle patch
    if len(puddle_patches) == 0:
        # If no puddle is found, query the image directly
        return image_patch.simple_query(""Does the puddle look large?"")
    if puddle_patches[0].width > 50 or puddle_patches[0].height > 50:
        return ""yes""
    return ""no""",1
11675152,Who throws the frisbee?,woman,./data/gqa/../images/2374020.jpg,girl,"def execute_command_11675152(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who throws the frisbee?"")",0
8723676,Which kind of animal is the water on?,bear,./data/gqa/../images/2343473.jpg,bear,"def execute_command_8723676(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which kind of animal is the water on?"")",1
61046657,Do you think that traffic light is tall?,no,./data/gqa/../images/45.jpg,yes,"def execute_command_61046657(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    traffic_light_patches = image_patch.find(""traffic light"")
    # Question assumes only one traffic light patch
    if len(traffic_light_patches) == 0:
        # If no traffic light is found, query the image directly
        return image_patch.simple_query(""Do you think that traffic light is tall?"")
    return bool_to_yesno(traffic_light_patches[0].verify_property(""traffic light"", ""tall""))",0
9581034,On which side is the wine glass?,right,./data/gqa/../images/2399046.jpg,right,"def execute_command_9581034(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    wine_patches = image_patch.find(""wine glass"")
    # Question assumes only one wine patch
    if len(wine_patches) == 0:
        # If no wine glass is found, query the image directly
        return image_patch.simple_query(""On which side is the wine glass?"")
    wine_patch = wine_patches[0]
    if wine_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
181002374,Is the napkin to the right or to the left of the pizza that is shown in the image?,right,./data/gqa/../images/2397824.jpg,right,"def execute_command_181002374(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
    for napkin_patch in napkin_patches:
        pizza_patches = image_patch.find(""pizza"")
        # Question assumes only one pizza patch
        if len(pizza_patches) == 0:
            # If no pizza is found, query the image directly
            return image_patch.simple_query(""Is the napkin to the right or to the left of the pizza that is shown in the image?"")
        pizza_patch = pizza_patches[0]
        if napkin_patch.horizontal_center > pizza_patch.horizontal_center:
            return ""right""
        else:
            return ""left""",1
18535266,Is the face mask made of the same material as the mask?,no,./data/gqa/../images/2332010.jpg,yes,"def execute_command_18535266(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    face_mask_patches = image_patch.find(""face mask"")
    # Question assumes only one face mask patch
    if len(face_mask_patches) == 0:
        # If no face mask is found, query the image directly
        return image_patch.simple_query(""Is the face mask made of the same material as the mask?"")
    face_mask_patch = face_mask_patches[0]
    mask_patches = image_patch.find(""mask"")
    # Question assumes only one mask patch
    if len(mask_patches) == 0:
        return ""no""
    mask_patch = mask_patches[0]
    return bool_to_yesno(face_mask_patch.simple_query(""Is it made of the same material as this mask?"") == ""yes"")",0
11254215,What is the tan item of furniture?,cabinet,./data/gqa/../images/498276.jpg,chair,"def execute_command_11254215(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the tan item of furniture?"")",0
1852010,How is the device to the right of the device on the desk called?,keyboard,./data/gqa/../images/2363550.jpg,monitor,"def execute_command_1852010(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only two device patches
    if len(device_patches) < 2:
        # If less than two devices are found, query the image directly
        return image_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    left_device_patch = device_patches[0]
    right_device_patch = device_patches[1]
    if left_device_patch.simple_query(""Is the left device on a desk?"") == ""yes"":
        return right_device_patch.simple_query(""How is the device to the right of the device on the desk called?"")
    else:
        return right_device_patch.simple_query(""How is the device to the right of the device called?"")",0
1587534,Is the device on the floor black and large?,no,./data/gqa/../images/2333881.jpg,yes,"def execute_command_1587534(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    device_patches = image_patch.find(""device"")
    # Question assumes only one device patch
    if len(device_patches) == 0:
        # If no device is found, query the image directly
        return image_patch.simple_query(""Is the device on the floor black and large?"")
    device_patch = device_patches[0]
    if device_patch.exists(""floor"") and device_patch.simple_query(""Is the device black?"") == ""yes"" and device_patch.simple_query(""Is the device large?"") == ""yes"":
        return ""yes""
    return ""no""",0
8470757,Are there any surfboards?,no,./data/gqa/../images/2386200.jpg,no,"def execute_command_8470757(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""surfboard""))",1
11273949,Is the shirt white?,no,./data/gqa/../images/2352259.jpg,no,"def execute_command_11273949(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""Is the shirt white?"")
    return bool_to_yesno(shirt_patches[0].verify_property(""shirt"", ""white""))",1
7475238,What's the airplane in front of?,rocks,./data/gqa/../images/2375515.jpg,mountain,"def execute_command_7475238(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What's the airplane in front of?"")",0
16685900,Where does the horse to the right of the hose run?,"Error Codigo: expected ':' (Codex, line 15)",./data/gqa/../images/2325337.jpg,ground,"def execute_command_16685900(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    horse_patches = image_patch.find(""horse"")
    # Question assumes only one horse patch
    if len(horse_patches) == 0:
        # If no horse is found, query the image directly
        return image_patch.simple_query(""Where does the horse to the right of the hose run?"")
    horse_patch = horse_patches[0]
    hose_patches = image_patch.find(""hose"")
    # Question assumes one hose patch
    if len(hose_patches) == 0:
        return image_patch.simple_query(""Where does the horse run?"")
    hose_patch = hose_patches[0]
    for other_horse_patch in horse_patches:
        if other_hose_patch if other_hose_patch is not None else False if hose_patch.horizontal_center > image_patch.horizontal / 2 else True
        if other_horse_patch is not None and other_horse_patch.horizontal_center > hose_patch.horizontal
            if other_horse_patch.horizontal_center > image_patch.horizontal / 2
                if other_horse_patch.horizontal_center > image_patch.horizontal / 2
                else ""left""
            else
                ""right""
        if horse_patch.horizontal_center > image_patch.horizontal / 2
            if horse_patch.horizontal_center > image_patch.width / 2
            else ""left""
        else
            ""right""
        for other_horse_patch in horse_patches
            if other_horse_patch != horse_patch
                if other_horse_patch.horizontal_center > hose_patch.horizontal
                    if other_horse_patch.horizontal_center > image_patch.horizontal / 2
                        if other_horse_patch.horizontal_center > image_patch.horizontal / 2
                        else ""left""
                    else
                        ""right""
        if horse_patch.horizontal_center > image_patch.horizontal / 2
            if horse_patch.horizontal_center > image_patch.width / 2
            else ""left""
        else
            ""right""

    function ImagePatch if image is not None else nil
    if len(image_patch.find ""hose"" for image_patch in image_patches if image_patch.exists ""hose"" if image is not None else false if image is null if image is not none else true if image is ImagePatch else false if image is Image else false if has_image if has_image and image exists if image is ImagePatch if image is not none else false if image is Image else false if has_image if has_image and image is ImagePatch else false for image_patches image if image exists if image",0
3932624,Are there either any gray chairs or laptops?,no,./data/gqa/../images/2384710.jpg,yes,"def execute_command_3932624(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_gray_chair = image_patch.exists(""gray chair"")
    is_laptop = image_patch.exists(""laptop"")
    return bool_to_yesno(is_gray_chair or is_laptop)",0
10584099,Is the water brown or blue?,blue,./data/gqa/../images/2408730.jpg,blue,"def execute_command_10584099(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""brown"", ""blue""])",1
9256263,Which kind of furniture is brown?,table,./data/gqa/../images/2376689.jpg,table,"def execute_command_9256263(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""Which kind of furniture is brown?"")
    brown_patches = [patch for patch in furniture_patches if patch.simple_query(""Is the furniture brown?"") == ""yes""]
    if len(brown_patches) == 0:
        return furniture_patches[0].simple_query(""Which kind of furniture is brown?"")
    return brown_patches[0].simple_query(""Which kind of furniture is brown?"") # crop would include the brown so keep it in the query",1
18719769,Is the man wearing glasses?,no,./data/gqa/../images/2407920.jpg,no,"def execute_command_18719769(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Is the man wearing glasses?"")
    man_patch = man_patches[0]
    return bool_to_yesno(man_patch.verify_property(""man"", ""wearing glasses""))",1
18342439,What animal is white?,panda bear,./data/gqa/../images/2414595.jpg,panda,"def execute_command_18342439(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What animal is white?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal white?"") == ""yes"":
            return animal_patch.simple_query(""What animal is white?"")
    # If no white animal is found, query the image directly
    return image_patch.simple_query(""What animal is white?"")",0
8665725,Who is wearing a coat?,the man,./data/gqa/../images/2382109.jpg,skier,"def execute_command_8665725(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""Who is wearing a coat?"")
    for person_patch in person_patches:
        is_wearing_coat = (person_patch.simple_query(""Is the person wearing a coat?"") == ""yes"")
        if is_wearing_coat:
            return person_patch.simple_query(""Who is wearing a coat?"")
    # If no person is wearing a coat, pick the first person
    return person_patches[0].simple_query(""Who is wearing a coat?"")",0
5440407,What vehicle isn't black?,train,./data/gqa/../images/2348770.jpg,car,"def execute_command_5440407(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        # If no vehicle is found, query the image directly
        return image_patch.simple_query(""What vehicle isn't black?"")
    vehicle_patch = vehicle_patches[0]
    for vehicle_patch_found in vehicle_patches:
        if vehicle_patch_found.simple_query(""Is it black?"") == ""no"":
            return vehicle_patch_found.simple_query(""What vehicle isn't black?"")
    return vehicle_patches[0].simple_query(""What vehicle isn't black?"")",0
4104707,On which side of the picture is the oven?,right,./data/gqa/../images/2319689.jpg,right,"def execute_command_4104707(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    oven_patches = image_patch.find(""oven"")
    # Question assumes only one oven patch
    if len(oven_patches) == 0:
        # If no oven is found, query the image directly
        return image_patch.simple_query(""On which side of the picture is the oven?"")
    oven_patch = oven_patches[0]
    if oven_patch.horizontal_center < image_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
3126763,What is common to the logo and the letter?,blue,./data/gqa/../images/2400784.jpg,color,"def execute_command_3126763(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    logo_patches = image_patch.find(""logo"")
    # Question assumes only one logo patch
    if len(logo_patches) == 0:
        # If no logo is found, query the image directly
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    logo_patch = logo_patches[0]
    letter_patches = image_patch.find(""letter"")
    # Question assumes only one letter patch
    if len(letter_patches) == 0:
        return image_patch.simple_query(""What is common to the logo and the letter?"")
    letter_patch = letter_patches[0]
    common_properties = [""red"", ""blue"", ""green"", ""yellow"", ""white"", ""black"", ""gray""]
    for property in common_properties:
        if logo_patch.verify_property(""logo"", property) and letter_patch.verify_property(""letter"", property):
            return property
    return image_patch.simple_query(""What is common to the logo and the letter?"") # if no common property is found, ask directly",0
18640925,What animal is in the water the man is walking through?,fish,./data/gqa/../images/2347772.jpg,shark,"def execute_command_18640925(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man walking"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What animal is in the water the man is walking through?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What animal is in the water the man is walking through?"")",0
125488,What is the man wearing?,red jacket,./data/gqa/../images/1159982.jpg,hat,"def execute_command_125488(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""What is the man wearing?"")
    man_patch = man_patches[0]
    return man_patch.simple_query(""What are you wearing?"") # ask directly to get the clothing",0
5925435,What is the sidewalk made of?,concrete,./data/gqa/../images/2352009.jpg,concrete,"def execute_command_5925435(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the sidewalk made of?"")",1
17563472,What is the pattern of the coat?,striped,./data/gqa/../images/2351669.jpg,striped,"def execute_command_17563472(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    coat_patches = image_patch.find(""coat"")
    # Question assumes only one coat patch
    if len(coat_patches) == 0:
        # If no coat is found, query the image directly
        return image_patch.simple_query(""What is the pattern of the coat?"")
    coat_patch = coat_patches[0]
    return coat_patch.best_text_match([""plaid"", ""striped"", ""solid"", ""polka dot"", ""floral""])",1
4819547,What kind of furniture is white?,bed,./data/gqa/../images/4912.jpg,bed,"def execute_command_4819547(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes only one furniture patch
    if len(furniture_patches) == 0:
        # If no furniture is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is white?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.best_text_match([""brown"", ""white"", ""black"", ""wooden""]):
            return furniture_patch.simple_query(""What kind of furniture is white?"")
    return furniture_patches[0].simple_query(""What kind of furniture is white?"")",1
14263174,What color do you think the chair that is to the right of the other chair is?,brown,./data/gqa/../images/2402329.jpg,brown,"def execute_command_14263174(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes at least two chair patches
    if len(chair_patches) < 2:
        # If less than two chairs are found, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    right_chair_patches = [patch for patch in chair_patches if patch.horizontal_center > chair_patches[0].horizontal_center]
    if len(right_chair_patches) == 0:
        # If no chair is to the right of the first chair, query the image directly
        return image_patch.simple_query(""What color do you think the chair that is to the right of the other chair is?"")
    return right_chair_patches[0].best_text_match([""brown"", ""blue"", ""red"", ""black"", ""white"", ""gray""])",1
7515210,Is the man that is to the left of the person riding the green train in front of the fence?,yes,./data/gqa/../images/2364161.jpg,yes,"def execute_command_7515210(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return bool_to_yesno(image_patch.simple_query(""Is the man that is to the left of the person riding the green train in front of the fence?""))",1
9239936,Do the cows near the trees have white color?,no,./data/gqa/../images/2410256.jpg,no,"def execute_command_9239936(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    cow_patches = image_patch.find(""cow near trees"")
    # Question assumes only one cow patch near trees
    if len(cow_patches) == 0:
        # If no cow near trees is found, query the image directly
        return image_patch.simple_query(""Do the cows near the trees have white color?"")
    return bool_to_yesno(cow_patches[0].verify_property(""cow near trees"", ""white""))",1
1885178,"In which part of the image is the remote control, the bottom or the top?",top,./data/gqa/../images/2374740.jpg,top,"def execute_command_1885178(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    remote_patches = image_patch.find(""remote control"")
    # Question assumes only one remote patch
    if len(remote_patches) == 0:
        # If no remote control is found, query the image directly
        return image_patch.simple_query(""In which part of the image is the remote control, the bottom or the top?"")
    if remote_patches[0].vertical_center < image_patch.vertical_center:
        return ""bottom""
    else:
        return ""top""",1
12341631,Which color is the bag in the top part?,brown,./data/gqa/../images/2378022.jpg,blue,"def execute_command_12341631(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bag_patches = image_patch.find(""bag"")
    # Question assumes only one bag patch
    if len(bag_patches) == 0:
        # If no bag is found, query the image directly
        return image_patch.simple_query(""Which color is the bag in the top part?"")
    bag_patch = bag_patches[0]
    top_patches = image_patch.find(""patch"")
    # Question assumes one patch patch
    if len(top_patches) == 0:
        # If no patch is found, query the image directly
        return bag_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""white"", ""brown"", ""black"", ""gray""])
    top_patch = top_patches[0]
    if top_patch.vertical_center > image_patch.vertical_center:
        return bag_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""white"", ""brown"", ""black"", ""gray""])
    return bag_patch.best_text_match([""red"", ""blue"", ""green"", ""yellow"", ""white"", ""brown"", ""black"", ""gray""])",0
5532909,"What is the weather like, cloudless or maybe rainy?",cloudless,./data/gqa/../images/2360826.jpg,cloudless,"def execute_command_5532909(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""cloudless"", ""rainy""])",1
2618222,What is connected to the open laptop?,mouse,./data/gqa/../images/2361858.jpg,cord,"def execute_command_2618222(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is connected to the open laptop?"")",0
3252220,Of which color is the shirt the man wears?,white,./data/gqa/../images/2345859.jpg,gray,"def execute_command_3252220(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Of which color is the shirt the man wears?"")
    man_patch = man_patches[0]
    return man_patch.best_text_match([""blue"", ""white"", ""red"", ""green"", ""black"", ""gray""])",0
8947801,What is in the vase?,a plant,./data/gqa/../images/2395512.jpg,plant,"def execute_command_8947801(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is in the vase?"")",1
10841562,Is the color of the pants the same as the shorts?,no,./data/gqa/../images/912.jpg,yes,"def execute_command_10841562(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pants_patches = image_patch.find(""pants"")
    # Question assumes only one pants patch
    if len(pants_patches) == 0:
        # If no pants are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    if len(image_patch.find(""shorts"")) == 0:
        # If no shorts are found, query the image directly
        return image_patch.simple_query(""Is the color of the pants the same as the shorts?"")
    pants_patch = pants_patches[0]
    shorts_patch = image_patch.find(""shorts"")[0]
    return bool_to_yesno(pants_patch.best_text_match([""blue"", ""red"", ""green"", ""black"", ""white""]) == shorts_patch.best_text_match([""blue"", ""red"", ""green"", ""black"", ""white""]))",0
15511838,What kind of furniture is to the left of the bucket?,table,./data/gqa/../images/2384300.jpg,shelf,"def execute_command_15511838(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of furniture is to the left of the bucket?"")",0
14495306,Is there any racket to the right of the person that the woman is to the left of?,no,./data/gqa/../images/2374540.jpg,no,"def execute_command_14495306(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    woman_patch = woman_patches[0]
    # first find the person the woman is to the left of
    left_of_woman_patches = image_patch.find(""man or person"")
    if len(left_of_woman_patches) == 0:
        left_of_woman_patches = image_patch.find(""woman or man"")
    if len(left_of_woman_patches) == 0:
        # If no man or woman is found, query the image directly
        return image_patch.simple_query(""Is there any racket to the right of the person that the woman is to the left of?"")
    left_of_woman_patch = left_of_woman_patches[0]
    # then check if there is a racket to the right of that person
    return bool_to_yesno(image_patch.exists(""racket and horizontal"") and left_of_woman_patch.horizontal_center < image_patch.horizontal_center)",1
14841932,Do the tiles have square shape and black color?,yes,./data/gqa/../images/2385350.jpg,no,"def execute_command_14841932(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    tile_patches = image_patch.find(""tiles"")
    # Question assumes only one tile patch
    if len(tile_patches) == 0:
        # If no tile is found, query the image directly
        return bool_to_yesno(image_patch.verify_property(""image"", ""has square tiles and black color""))
    tile_patch = tile_patches[0]
    return bool_to_yesno(tile_patch.verify_property(""tiles"", ""square and black""))",0
41029381,What is the vehicle that is the same color as the shirt called?,van,./data/gqa/../images/2320665.jpg,van,"def execute_command_41029381(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shirt_patches = image_patch.find(""shirt"")
    # Question assumes only one shirt patch
    if len(shirt_patches) == 0:
        # If no shirt is found, query the image directly
        return image_patch.simple_query(""What vehicle is the same color as the shirt?"")
    shirt_patch = shirt_patches[0]
    vehicle_patches = image_patch.find(""vehicle"")
    # Question assumes only one vehicle patch
    if len(vehicle_patches) == 0:
        return image_patch.simple_query(""What vehicle is the same color as the shirt?"")
    vehicle_patch = vehicle_patches[0]
    shirt_color = vehicle_patch.best_text_match([""red"", ""blue"", ""green"", ""white"", ""black"", ""gray""])
    return vehicle_patch.simple_query(f""What vehicle is {shirt_color}?"") # crop would include the shirt so keep it in the query",1
161027428,Are there both windows and doors in the image?,no,./data/gqa/../images/2368893.jpg,yes,"def execute_command_161027428(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",0
16478246,Does the pillow to the right of the man have green color and large size?,no,./data/gqa/../images/2330311.jpg,yes,"def execute_command_16478246(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man"")
    # Question assumes one man patch
    if len(man_patches) == 0:
        # If no man is found, query the image directly
        return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")
    man_patch = man_patches[0]
    pillow_patches = image_patch.find(""pillow"")
    # Question assumes one pillow patch to the right of the man
    if len(pillow_patches) == 0:
        return ""no""
    for pillow_patch in pillow_patches:
        if pillow_patch.horizontal_center > man_patch.horizontal_center:
            return bool_to_yesno(pillow_patch.verify_property(""pillow"", ""green"") and pillow_patch.verify_property(""pillow"", ""large""))
    # If no pillow is to the right of the man, query the image directly
    return image_patch.simple_query(""Does the pillow to the right of the man have green color and large size?"")",0
9450308,Is the happy person wearing a hat?,no,./data/gqa/../images/2362787.jpg,no,"def execute_command_9450308(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    happy_patches = image_patch.find(""happy person"")
    # Question assumes only one happy patch
    if len(happy_patches) == 0:
        # If no happy person is found, query the image directly
        return image_patch.simple_query(""Is the happy person wearing a hat?"")
    happy_patch = happy_patches[0]
    return bool_to_yesno(happy_patch.exists(""hat""))",1
11850389,What place is this?,a city,./data/gqa/../images/2365727.jpg,road,"def execute_command_11850389(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What place is this?"")",0
17250452,What kind of appliance is on the right of the drawer?,oven,./data/gqa/../images/2411357.jpg,oven,"def execute_command_17250452(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of appliance is on the right of the drawer?"")",1
14857961,Is the lady to the right of a woman?,yes,./data/gqa/../images/2388625.jpg,no,"def execute_command_14857961(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    lady_patches = image_patch.find(""lady"")
    # Question assumes only one lady patch
    if len(lady_patches) == 0:
        # If no lady is found, query the image directly
        return image_patch.simple_query(""Is the lady to the right of a woman?"")
    for lady_patch in lady_patches:
        woman_patches = image_patch.find(""woman"")
        for woman_patch in woman_patches:
            if woman_patch.horizontal_center < lady_patch.horizontal_center:
                return ""yes""
    return ""no""",0
132385,What cooking utensils are to the left of the pan on the right side?,Error Ejecucion: 'ImagePatch' object has no attribute 'horizontal',./data/gqa/../images/2324466.jpg,ladles,"def execute_command_132385(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        # If no pan is found, query the image directly
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    right_pan_patch = pan_patches[0]
    cooking_patches = image_patch.find(""cooking utensils"")
    # Question assumes at least one cooking patch
    if len(cooking_patches) == 0:
        return image_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    for cooking_patch in cooking_patches:
        if cooking_patch.horizontal_center < right_pan_patch.horizontal:
            return cooking_patch.simple_query(""What cooking utensils are to the left of the pan on the right side?"")
    return cooking_patches[0].simple_query(""What cooking utensils are to the left of the pan on the right side?"")",0
9745131,Which color is the truck that is to the left of the lamps?,white,./data/gqa/../images/2382208.jpg,green,"def execute_command_9745131(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    truck_patches = image_patch.find(""truck"")
    # Question assumes only one truck patch
    if len(truck_patches) == 0:
        # If no truck is found, query the image directly
        return image_patch.simple_query(""Which color is the truck that is to the left of the lamps?"")
    truck_patch = truck_patches[0]
    lamp_patches = image_patch.find(""lamps"")
    # Question assumes one or more lamp patches
    if len(lamp_patches) == 0:
        return truck_patch.simple_query(""Which color is the truck?"")
    for lamp_patch in lamp_patches:
        if lamp_patch.horizontal_center > truck_patch.horizontal_center:
            return truck_patch.simple_query(""Which color is the truck?"")
    # If no lamps are found, query the image directly
    return truck_patch.simple_query(""Which color is the truck?"")",0
5546009,What type of bird is the same color as the motorcycle in the bottom of the image?,vulture,./data/gqa/../images/2387752.jpg,eagle,"def execute_command_5546009(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    motorcycle_patch = motorcycle_patches[0]
    bottom_image_patch = ImagePatch(image)
    bottom_image_patch.crop(0, image_patch.height // 2, image_patch.width, image_patch.height)
    bird_patches = bottom_image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return bottom_image_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    for bird_patch in bird_patches:
        if bird_patch.simple_query(""Is the bird the same color as the motorcycle in the bottom of the image?"") == ""yes"":
            return bird_patch.simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")
    return bird_patches[0].simple_query(""What type of bird is the same color as the motorcycle in the bottom of the image?"")",0
867818,Is the man on the skateboard?,yes,./data/gqa/../images/2413471.jpg,yes,"def execute_command_867818(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man on a skateboard"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man on a skateboard is found, query the image directly
        return bool_to_yesno(image_patch.exists(""man on a skateboard""))
    return bool_to_yesno(True) # if found, then yes",1
13896221,What is on the table?,pizza,./data/gqa/../images/2345610.jpg,candle,"def execute_command_13896221(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the table?"")",0
1964517,What is the food that is above the white paper?,pizza,./data/gqa/../images/2410495.jpg,pizza,"def execute_command_1964517(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (above, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What is the food that is above the white paper?"")",1
15705231,Is the shelf to the left of a cabinet?,yes,./data/gqa/../images/2345287.jpg,no,"def execute_command_15705231(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    shelf_patches = image_patch.find(""shelf"")
    # Question assumes only one shelf patch
    if len(shelf_patches) == 0:
        # If no shelf is found, query the image directly
        return image_patch.simple_query(""Is the shelf to the left of a cabinet?"")
    for shelf_patch in shelf_patches:
        cabinet_patches = image_patch.find(""cabinet"")
        for cabinet_patch in cabinet_patches:
            if cabinet_patch.horizontal_center > shelf_patch.horizontal_center:
                return ""yes""
    return ""no""",0
15693846,Is the motorcycle parked on the grass?,yes,./data/gqa/../images/2338449.jpg,yes,"def execute_command_15693846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    motorcycle_patches = image_patch.find(""motorcycle"")
    # Question assumes only one motorcycle patch
    if len(motorcycle_patches) == 0:
        # If no motorcycle is found, query the image directly
        return image_patch.simple_query(""Is the motorcycle parked on the grass?"")
    motorcycle_patch = motorcycle_patches[0]
    return bool_to_yesno(motorcycle_patch.verify_property(""motorcycle"", ""parked on grass""))",1
13872995,Who is jumping?,a man,./data/gqa/../images/2363826.jpg,skateboarder,"def execute_command_13872995(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is jumping?"")",0
4502830,Is this a dog or a cat?,dog,./data/gqa/../images/2362262.jpg,dog,"def execute_command_4502830(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Is this a dog or a cat?"")
    animal_patch = animal_patches[0]
    if animal_patch.exists(""dog""):
        return ""dog""
    else:
        return ""cat""",1
12584623,What is the person with the bag wearing?,jeans,./data/gqa/../images/713911.jpg,cap,"def execute_command_12584623(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person with a bag"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person with a bag is found, query the image directly
        return image_patch.simple_query(""What is the person with the bag wearing?"")
    return person_patches[0].simple_query(""What are you wearing?"") # crop would include the bag so keep it in the query",0
7202064,"What is this, a bus or a truck?",truck,./data/gqa/../images/2357280.jpg,truck,"def execute_command_7202064(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.best_text_match([""bus"", ""truck""])",1
16542208,Do you see either any beds or blankets there?,yes,./data/gqa/../images/2395353.jpg,yes,"def execute_command_16542208(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_bed = image_patch.exists(""bed"")
    is_blanket = image_patch.exists(""blanket"")
    return bool_to_yesno(is_bed or is_blanket)",1
11700224,Do you see both lettuce and salad?,no,./data/gqa/../images/2368922.jpg,yes,"def execute_command_11700224(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_lettuce = image_patch.exists(""lettuce"")
    is_salad = image_patch.exists(""salad"")
    return bool_to_yesno(is_lettuce and is_salad)",0
1067136,Is the ball on the tree?,no,./data/gqa/../images/2336294.jpg,yes,"def execute_command_1067136(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    ball_patches = image_patch.find(""ball"")
    # Question assumes only one ball patch
    if len(ball_patches) == 0:
        # If no ball is found, query the image directly
        return image_patch.simple_query(""Is the ball on the tree?"")
    ball_patch = ball_patches[0]
    return bool_to_yesno(ball_patch.exists(""tree""))",0
364079,What kind of furniture is to the right of the blanket?,bookcase,./data/gqa/../images/2334847.jpg,shelf,"def execute_command_364079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    blanket_patches = image_patch.find(""blanket"")
    # Question assumes only one blanket patch
    if len(blanket_patches) == 0:
        # If no blanket is found, query the image directly
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    blanket_patch = blanket_patches[0]
    furniture_patches = image_patch.find(""furniture"")
    # Question assumes one furniture patch
    if len(furniture_patches) == 0:
        return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    for furniture_patch in furniture_patches:
        if furniture_patch.horizontal_center > blanket_patch.horizontal_center:
            return furniture_patch.simple_query(""What kind of furniture is to the right of the blanket?"")
    # If no furniture is to the right of the blanket, query the image directly
    return image_patch.simple_query(""What kind of furniture is to the right of the blanket?"")",0
2533062,How large is the ground the zebra is standing on?,large,./data/gqa/../images/2407291.jpg,large,"def execute_command_2533062(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    zebra_patches = image_patch.find(""zebra"")
    # Question assumes only one zebra patch
    if len(zebra_patches) == 0:
        # If no zebra is found, query the image directly
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    zebra_patch = zebra_patches[0]
    ground_patches = image_patch.find(""ground"")
    # Question assumes one ground patch
    if len(ground_patches) == 0:
        return image_patch.simple_query(""How large is the ground the zebra is standing on?"")
    ground_patch = ground_patches[0]
    width = ground_patch.width
    if width > 100: # assume a patch is large if its width is over 100 pixels
        return ""large""
    elif width > 20:
        return ""small to medium""
    else:
        return ""small""",1
19683710,The clock is inside what?,ceiling,./data/gqa/../images/2341180.jpg,train station,"def execute_command_19683710(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""The clock is inside what?"")",0
15674863,Is the racket in the top part?,yes,./data/gqa/../images/2384074.jpg,yes,"def execute_command_15674863(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    racket_patches = image_patch.find(""racket"")
    # Question assumes only one racket patch
    if len(racket_patches) == 0:
        # If no racket is found, query the image directly
        return image_patch.simple_query(""Is the racket in the top part?"")
    if racket_patches[0].vertical_center > image_patch.vertical_center:
        return ""yes""
    else:
        return ""no""",1
4860320,Do you see any skateboards to the right of the person that is wearing a shirt?,"Error Codigo: unterminated string literal (detected at line 9) (Codex, line 9)",./data/gqa/../images/2359192.jpg,no,"def execute_command_4860320(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person wearing a shirt"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person wearing a shirt is found, query the image directly
        return image_patch.simple_query(""Do you see any skateboards to the right of the person that is wearing a shirt?"")
    person_patch = person_patches[0]
    return bool_to_yesno(image_patch.exists(""skateboard"") and (image_patch.simple_query(""Is the right of the person wearing a shirt the right of the image?) if image_patch.width > person_patch.right else if if for if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if if",0
2292637,What is the color of the shirt that the passenger is wearing?,red,./data/gqa/../images/2405583.jpg,black,"def execute_command_2292637(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    passenger_patches = image_patch.find(""passenger"")
    # Question assumes only one passenger patch
    if len(passenger_patches) == 0:
        # If no passenger is found, query the image directly
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    passenger_patch = passenger_patches[0]
    shirt_patches = passenger_patch.find(""shirt"")
    # Question assumes one shirt patch
    if len(shirt_patches) == 0:
        return image_patch.simple_query(""What is the color of the shirt that the passenger is wearing?"")
    shirt_patch = shirt_patches[0]
    return shirt_patch.best_text_match([""blue"", ""red"", ""white"", ""black"", ""gray""])",0
9175259,What is the chair made of?,plastic,./data/gqa/../images/2386899.jpg,plastic,"def execute_command_9175259(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    chair_patches = image_patch.find(""chair"")
    # Question assumes only one chair patch
    if len(chair_patches) == 0:
        # If no chair is found, query the image directly
        return image_patch.simple_query(""What is the chair made of?"")
    return chair_patches[0].simple_query(""What is the chair made of?"") # crop would include the chair so keep it in the query",1
8714882,How big is the carrot in the top of the picture?,medium,./data/gqa/../images/2321131.jpg,small,"def execute_command_8714882(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    carrot_patches = image_patch.find(""carrot"")
    # Question assumes only one carrot patch
    if len(carrot_patches) == 0:
        # If no carrot is found, query the image directly
        return image_patch.simple_query(""How big is the carrot in the top of the picture?"")
    top_patch = ImagePatch(image_patch.cropped_image, 0, image_patch.height//2, image_patch.width, image_patch.height//2 + image_patch.height//2)
    carrot_patch = carrot_patches[0]
    if carrot_patch.horizontal_center > image_patch.width//2:
        right_patch = ImagePatch(image_patch.cropped_image, image_patch.width//2, 0, image_patch.width, image_patch.height)
        left_patch = ImagePatch(image_patch.cropped_image, 0, 0, image_patch.width//2, image_patch.height)
        return top_patch.best_text_match([""small"", ""medium"", ""large""])
    else:
        right_patch = ImagePatch(image_patch.cropped_image, image_patch.width//2, 0, image_patch.width, image_patch.height)
        left_patch = ImagePatch(image_patch.cropped_image, 0, 0, image_patch.width//2, image_patch.height)
        return left_patch.best_text_match([""small"", ""medium"", ""large""])",0
1638685,What is the name of the vegetable that is on the yellow food?,broccoli,./data/gqa/../images/2385819.jpg,pepper,"def execute_command_1638685(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the name of the vegetable that is on the yellow food?"")",0
5828256,Is the clock on a tower?,no,./data/gqa/../images/2384655.jpg,no,"def execute_command_5828256(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    clock_patches = image_patch.find(""clock"")
    # Question assumes only one clock patch
    if len(clock_patches) == 0:
        # If no clock is found, query the image directly
        return image_patch.simple_query(""Is the clock on a tower?"")
    clock_patch = clock_patches[0]
    return bool_to_yesno(clock_patch.exists(""tower""))",1
18937563,What kind of animal is orange?,cat,./data/gqa/../images/2379404.jpg,dog,"def execute_command_18937563(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""What kind of animal is orange?"")
    for animal_patch in animal_patches:
        if animal_patch.simple_query(""Is the animal orange?"") == ""yes"":
            return animal_patch.simple_query(""What kind of animal is orange?"")
    # If no orange animal is found, query the image directly
    return image_patch.simple_query(""What kind of animal is orange?"")",0
14360113,What is the smiling woman holding?,bananas,./data/gqa/../images/2352235.jpg,banana,"def execute_command_14360113(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    woman_patches = image_patch.find(""smiling woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        # If no woman is found, query the image directly
        return image_patch.simple_query(""What is the smiling woman holding?"")
    woman_patch = woman_patches[0]
    return woman_patch.simple_query(""What are you holding?"") # crop would include the woman so keep it in the query",0
593188,Is the hair short?,no,./data/gqa/../images/2381086.jpg,yes,"def execute_command_593188(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.exists(""buzz cut"") or (image_patch.exists(""man"") and image_patch.exists(""policeman"")) or image_patch.exists(""short hair""))",0
10824666,Are there ladies to the left of the man that is wearing shorts?,yes,./data/gqa/../images/2385924.jpg,yes,"def execute_command_10824666(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man with shorts"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man wearing shorts is found, query the image directly
        return image_patch.simple_query(""Are there ladies to the left of the man that is wearing shorts?"")
    man_patch = man_patches[0]
    for patch in image_patch.find(""lady""):
        if patch.horizontal_center < man_patch.horizontal_center:
            return ""yes""
    return ""no""",1
1890604,Is the gray car to the left or to the right of the garbage bin?,right,./data/gqa/../images/2372833.jpg,right,"def execute_command_1890604(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    gray_car_patches = image_patch.find(""gray car"")
    # Question assumes only one gray car patch
    if len(gray_car_patches) == 0:
        # If no gray car is found, query the image directly
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    gray_car_patch = gray_car_patches[0]
    garbage_bin_patches = image_patch.find(""garbage bin"")
    # Question assumes one garbage bin patch
    if len(garbage_bin_patches) == 0:
        return image_patch.simple_query(""Is the gray car to the left or to the right of the garbage bin?"")
    garbage_bin_patch = garbage_bin_patches[0]
    if gray_car_patch.horizontal_center < garbage_bin_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
7574939,Is there any table or plate that is white?,no,./data/gqa/../images/2359185.jpg,yes,"def execute_command_7574939(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    table_patches = image_patch.find(""table"")
    plate_patches = image_patch.find(""plate"")
    for patch in table_patches + plate_patches:
        if patch.best_text_match([""red"", ""blue"", ""green"", ""white"", ""brown"", ""black""]) == ""white"":
            return ""yes""
    return ""no""",0
12252101,Is it outdoors?,yes,./data/gqa/../images/2359418.jpg,no,"def execute_command_12252101(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""outdoors""))",0
6943442,What cooking utensil is on the oven?,pan,./data/gqa/../images/2394601.jpg,kettle,"def execute_command_6943442(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What cooking utensil is on the oven?"")",0
2977077,The propeller that looks red is what pattern?,white,./data/gqa/../images/2402545.jpg,striped,"def execute_command_2977077(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    propeller_patches = image_patch.find(""propeller"")
    # Question assumes only one propeller patch
    if len(propeller_patches) == 0:
        # If no propeller is found, query the image directly
        return image_patch.simple_query(""The propeller that looks red is what pattern?"")
    for propeller_patch in propeller_patches:
        if propeller_patch.simple_query(""Is the propeller red?"") == ""yes"":
            return propeller_patch.best_text_match([""striped"", ""blue and white"", ""green and white"", ""plaid"", ""solid"", ""other""])
    # If no red propeller is found, query the image directly
    return image_patch.simple_query(""The propeller that looks red is what pattern?"")",0
11190306,Which kind of animal is to the left of the train?,horse,./data/gqa/../images/2335202.jpg,horse,"def execute_command_11190306(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Which kind of animal is to the left of the train?"")
    animal_patch = animal_patches[0]
    train_patches = image_patch.find(""train"")
    # Question assumes one train patch
    if len(train_patches) == 0:
        return animal_patch.simple_query(""Which kind of animal is to the left of the train?"")
    if animal_patch.horizontal_center < train_patches[0].horizontal_center:
        return animal_patch.simple_query(""Which kind of animal is to the left of the train?"")
    return animal_patch.simple_query(""Which kind of animal is to the left of the train?"") # crop would include the train so keep it in the query",1
5107190,Do you see both an airplane and a truck?,no,./data/gqa/../images/2399616.jpg,no,"def execute_command_5107190(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_airplane = image_patch.exists(""airplane"")
    is_truck = image_patch.exists(""truck"")
    return bool_to_yesno(is_airplane and is_truck)",1
4360982,How old is the child?,5,./data/gqa/../images/2333049.jpg,little,"def execute_command_4360982(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    child_patches = image_patch.find(""child"")
    # Question assumes only one child patch
    if len(child_patches) == 0:
        # If no child is found, query the image directly
        return image_patch.simple_query(""How old is the child?"")
    return child_patches[0].simple_query(""How old is the child?"")",0
12536783,What kind of animal is in front of the pole?,elephant,./data/gqa/../images/2400415.jpg,elephants,"def execute_command_12536783(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of animal is in front of the pole?"")",0
443846,Are the glasses to the right or to the left of the man that is wearing a t-shirt?,right,./data/gqa/../images/2343442.jpg,right,"def execute_command_443846(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches_tshirt = image_patch.find(""man with t-shirt"")
    # Question assumes only one man patch
    if len(man_patches_tshirt) == 0:
        # If no man with t-shirt is found, query the image directly
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    man_patch_tshirt = man_patches_tshirt[0]
    glasses_patches = image_patch.find(""glasses"")
    # Question assumes only one glasses patch
    if len(glasses_patches) == 0:
        return image_patch.simple_query(""Are the glasses to the right or to the left of the man that is wearing a t-shirt?"")
    glasses_patch = glasses_patches[0]
    if glasses_patch.horizontal_center > man_patch_tshirt.horizontal_center:
        return ""right""
    else:
        return ""left""",1
18655269,Which room is it?,bedroom,./data/gqa/../images/2328704.jpg,bedroom,"def execute_command_18655269(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
7405860,Is it indoors?,yes,./data/gqa/../images/2376437.jpg,yes,"def execute_command_7405860(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return bool_to_yesno(image_patch.verify_property(""image"", ""indoor""))",1
1705569,Does the pot on top of the stove look black?,yes,./data/gqa/../images/2406620.jpg,yes,"def execute_command_1705569(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    pot_patches = image_patch.find(""pot on top of stove"")
    # Question assumes only one pot patch
    if len(pot_patches) == 0:
        # If no pot on top of stove is found, query the image directly
        return image_patch.simple_query(""Does the pot on top of the stove look black?"")
    return bool_to_yesno(pot_patches[0].verify_property(""pot on top of stove"", ""black""))",1
1028569,Are there both a cyclist and a helmet in the photo?,no,./data/gqa/../images/2326510.jpg,yes,"def execute_command_1028569(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_cyclist = image_patch.exists(""cyclist"")
    is_helmet = image_patch.exists(""helmet"")
    return bool_to_yesno(is_cyclist and is_helmet)",0
13954115,Are there any men to the left of the person in the crowd?,yes,./data/gqa/../images/2402862.jpg,no,"def execute_command_13954115(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person in the crowd"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person in the crowd is found, query the image directly
        return bool_to_yesno(image_patch.exists(""man""))
    person_patch = person_patches[0]
    for patch in image_patch.find(""man""):
        if patch.horizontal_center < person_patch.horizontal_center:
            return ""yes""
    return ""no""",0
12436797,What kind of device is to the left of the keyboard?,mouse,./data/gqa/../images/2319675.jpg,headphones,"def execute_command_12436797(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    # contains a relation (around, next to, on, near, on top of, in front of, behind, etc), so ask directly
    return image_patch.simple_query(""What kind of device is to the left of the keyboard?"")",0
1017626,Who is inside the train?,people,./data/gqa/../images/2408028.jpg,man,"def execute_command_1017626(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Who is inside the train?"")",0
7650014,Which place is it?,park,./data/gqa/../images/2402045.jpg,park,"def execute_command_7650014(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which place is it?"")",1
15889871,What is the person to the left of the car doing?,walking,./data/gqa/../images/2361083.jpg,walking,"def execute_command_15889871(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""person"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person is found, query the image directly
        return image_patch.simple_query(""What is the person to the left of the car doing?"")
    person_patch = person_patches[0]
    car_patches = image_patch.find(""car"")
    # Question assumes one car patch
    if len(car_patches) == 0:
        return image_patch.simple_query(""What is the person to the left of the car doing?"")
    for car_patch in car_patches:
        if car_patch.horizontal_center > image_patch.horizontal_center:
            return person_patch.simple_query(""What are you doing?"")
        elif car_patch.horizontal_center < image_patch.horizontal_center:
            return person_patch.simple_query(""What is the person to the left of the car doing?"")
    # If no car is found, query the image directly
    return image_patch.simple_query(""What is the person to the left of the car doing?"")",1
1310985,Is the yellow vehicle to the left of a lamp?,yes,./data/gqa/../images/2411295.jpg,yes,"def execute_command_1310985(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    yellow_vehicle_patches = image_patch.find(""yellow vehicle"")
    # Question assumes only one yellow vehicle patch
    if len(yellow_vehicle_patches) == 0:
        # If no yellow vehicle is found, query the image directly
        return image_patch.simple_query(""Is the yellow vehicle to the left of a lamp?"")
    yellow_vehicle_patch = yellow_vehicle_patches[0]
    lamp_patches = image_patch.find(""lamp"")
    # Question assumes at least one lamp patch
    if len(lamp_patches) == 0:
        return ""no""
    for lamp_patch in lamp_patches:
        if lamp_patch.horizontal_center > yellow_vehicle_patch.horizontal_center:
            return ""yes""
    return ""no""",1
646935,Which room is it?,office,./data/gqa/../images/2336424.jpg,office,"def execute_command_646935(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Which room is it?"")",1
9495263,Is the woman to the left or to the right of the man that wears a cap?,left,./data/gqa/../images/2397998.jpg,left,"def execute_command_9495263(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    man_patches = image_patch.find(""man with cap"")
    # Question assumes only one man patch
    if len(man_patches) == 0:
        # If no man with cap is found, query the image directly
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    man_patch = man_patches[0]
    woman_patches = image_patch.find(""woman"")
    # Question assumes only one woman patch
    if len(woman_patches) == 0:
        return image_patch.simple_query(""Is the woman to the left or to the right of the man that wears a cap?"")
    woman_patch = woman_patches[0]
    if woman_patch.horizontal_center < man_patch.horizontal_center:
        return ""left""
    else:
        return ""right""",1
946016,Do you think the animal that is sitting-down is small or large?,small,./data/gqa/../images/2391364.jpg,small,"def execute_command_946016(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    animal_patches = image_patch.find(""animal"")
    # Question assumes only one animal patch
    if len(animal_patches) == 0:
        # If no animal is found, query the image directly
        return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")
    for animal_patch in animal_patches:
        if animal_patch.verify_property(""animal"", ""sitting""):
            return ""small"" if animal_patch.simple_query(""Is the animal small or large?"") == ""small"" else ""large""
    # If no animal is sitting, query the image directly
    return image_patch.simple_query(""Do you think the animal that is sitting-down is small or large?"")",1
9617920,Do the garbage can and the pan have the same color?,yes,./data/gqa/../images/2365993.jpg,no,"def execute_command_9617920(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    garbage_can_patches = image_patch.find(""garbage can"")
    # Question assumes only one garbage can patch
    if len(garbage_can_patches) == 0:
        # If no garbage can is found, query the image directly
        return image_patch.simple_query(""Do the garbage can and the pan have the same color?"")
    garbage_can_patch = garbage_can_patches[0]
    pan_patches = image_patch.find(""pan"")
    # Question assumes only one pan patch
    if len(pan_patches) == 0:
        return bool_to_yesno(garbage_can_patch.simple_query(""Is the pan blue?"") == ""yes"")
    pan_patch = pan_patches[0]
    return bool_to_yesno(garbage_can_patch.simple_query(""Is the pan blue?"") == pan_patch.simple_query(""Is the pan blue?""))",0
3578781,Which kind of clothing is black?,suit,./data/gqa/../images/2321843.jpg,jacket,"def execute_command_3578781(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    clothing_patches = image_patch.find(""clothing"")
    # Question assumes only one clothing patch
    if len(clothing_patches) == 0:
        # If no clothing is found, query the image directly
        return image_patch.simple_query(""Which kind of clothing is black?"")
    for clothing_patch in clothing_patches:
        if clothing_patch.simple_query(""Is the clothing black?"") == ""yes"":
            return clothing_patch.best_text_match([""pump"", ""hat"", ""coat"", ""jacket"", ""shirt"", ""pants"", ""shoes""])
    # If no black clothing is found, query the image directly
    return image_patch.simple_query(""Which kind of clothing is black?"")",0
4695656,What is the lamp on?,table,./data/gqa/../images/2366034.jpg,nightstand,"def execute_command_4695656(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is the lamp on?"")",0
13696926,The homes that are to the left of the people have what color?,green,./data/gqa/../images/2321676.jpg,white,"def execute_command_13696926(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    people_patches = image_patch.find(""people"")
    # Question assumes only one people patch
    if len(people_patches) == 0:
        # If no people are found, query the image directly
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    people_patch = people_patches[0]
    homes_patches = image_patch.find(""home"")
    # Question assumes at least one home patch
    if len(homes_patches) == 0:
        return image_patch.simple_query(""The homes that are to the left of the people have what color?"")
    for home_patch in homes_patches:
        if home_patch.horizontal_center < people_patch.horizontal_center:
            return home_patch.best_text_match([""red"", ""blue"", ""white"", ""brown"", ""green""])
    # If no home is to the left of the people, query the image directly
    return image_patch.simple_query(""The homes that are to the left of the people have what color?"")",0
16946079,What is on the wall?,blue,./data/gqa/../images/2355225.jpg,stuffed animals,"def execute_command_16946079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""What is on the wall?"")",0
18986542,Is the napkin on the right side?,yes,./data/gqa/../images/2375683.jpg,yes,"def execute_command_18986542(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    napkin_patches = image_patch.find(""napkin"")
    # Question assumes only one napkin patch
    if len(napkin_patches) == 0:
        # If no napkin is found, query the image directly
        return image_patch.simple_query(""Is the napkin on the right side?"")
    if napkin_patches[0].horizontal_center > image_patch.horizontal_center:
        return ""yes""
    else:
        return ""no""",1
11513897,What appliance is the label on?,blender,./data/gqa/../images/2411741.jpg,blender,"def execute_command_11513897(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    appliance_patches = image_patch.find(""appliance"")
    # Question assumes only one appliance patch
    if len(appliance_patches) == 0:
        # If no appliance is found, query the image directly
        return image_patch.simple_query(""What appliance is the label on?"")
    return appliance_patches[0].simple_query(""What appliance is the label on?"") # crop would include the label so keep it in the query",1
8240644,What is the color of the bird's tail?,brown,./data/gqa/../images/2331215.jpg,black,"def execute_command_8240644(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    bird_patches = image_patch.find(""bird"")
    # Question assumes only one bird patch
    if len(bird_patches) == 0:
        # If no bird is found, query the image directly
        return image_patch.simple_query(""What is the color of the bird's tail?"")
    bird_patch = bird_patches[0]
    return bird_patch.simple_query(""What color is the bird's tail?"") # crop would include the bird so keep it in the query",0
5245080,Is he to the right or to the left of the camera?,left,./data/gqa/../images/2400302.jpg,left,"def execute_command_5245080(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    person_patches = image_patch.find(""man holding a camera"")
    # Question assumes only one person patch
    if len(person_patches) == 0:
        # If no person holding a camera is found, query the image directly
        return image_patch.simple_query(""Is he to the right or to the left of the camera?"")
    person_patch = person_patches[0]
    if person_patch.horizontal_center > image_patch.horizontal_center:
        return ""right""
    else:
        return ""left""",1
17800894,Are there both a window and a door in the picture?,no,./data/gqa/../images/2412027.jpg,yes,"def execute_command_17800894(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    is_window = image_patch.exists(""window"")
    is_door = image_patch.exists(""door"")
    return bool_to_yesno(is_window and is_door)",0
191027873,Where is the snowboard?,in the air,./data/gqa/../images/2371443.jpg,snow,"def execute_command_191027873(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    return image_patch.simple_query(""Where is the snowboard?"")",0
1964079,Are the box and the paper the same color?,True,./data/gqa/../images/2410495.jpg,yes,"def execute_command_1964079(image, possible_answers, query, ImagePatch, VideoSegment, llm_query, bool_to_yesno, distance, best_image_match):
    image_patch = ImagePatch(image)
    box_patches = image_patch.find(""box"")
    # Question assumes only one box patch
    if len(box_patches) == 0:
        # If no box is found, query the image directly
        return image_patch.simple_query(""Are the box and the paper the same color?"")
    box_patch = box_patches[0]
    paper_patches = image_patch.find(""paper"")
    # Question assumes only one paper patch
    if len(paper_patches) == 0:
        return bool_to_yesno(box_patch.simple_query(""Is the box and the paper the same color?""))
    paper_patch = paper_patches[0]
    return bool_to_yesno(box_patch.best_text_match([""red"", ""blue""])) == bool_to_yesno(paper_patch.best_text_match([""red"", ""blue""]))",1
-,-,-,-,-,-,0.549
